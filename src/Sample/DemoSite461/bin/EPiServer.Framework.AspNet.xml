<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EPiServer.Framework.AspNet</name>
  </assembly>
  <members>
    <member name="T:Microsoft.ServiceModel.Samples.AsyncResult">
      <summary>
            A generic base class for IAsyncResult implementations
            that wraps a ManualResetEvent.
            </summary>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.InputQueue`1">
      <summary>
            Handles asynchronous interactions between producers and consumers. 
            Producers can dispatch available data to the input queue, 
            where it will be dispatched to a waiting consumer or stored until a
            consumer becomes available. Consumers can synchronously or asynchronously
            request data from the queue, which will be returned when data becomes
            available.
            </summary>
      <typeparam name="T">The concrete type of the consumer objects that are waiting for data.</typeparam>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.UdpBinding">
      <summary>
            Binding for Udp. This is our "sample profile" for Udp, which uses Text+Soap 1.2 
            and allows for variation in Reliability capabilities. If ReliableSessionEnabled is set
            then we will layer RM+CompositeDuplex on top of Udp. Otherwise we will just
            have Udp on our stack.  
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpBinding.CreateBindingElements">
      <summary>
            Create the set of binding elements that make up this binding. 
            NOTE: order of binding elements is important.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.UdpBindingCollectionElement">
      <summary>
            Binding Section for Udp. Implements configuration for SampleProfileUdpBinding.
            </summary>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.UdpBindingElementImporter">
      <summary>
            Policy import/export for Udp
            </summary>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.UdpChannelFactory">
      <summary>
            IChannelFactory implementation for Udp.
            
            Supports IOutputChannel only, as Udp is fundamentally
            a datagram protocol.
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpChannelFactory.OnCreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>
            Create a new Udp Channel. Supports IOutputChannel.
            </summary>
      <param name="remoteAddress">The address of the remote endpoint</param>
      <param name="via">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.UdpConstants">
      <summary>
            Collection of constants used by the Udp Channel classes
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpChannelHelpers.ConvertTransferException(System.Net.Sockets.SocketException)">
      <summary>
            The Channel layer normalizes exceptions thrown by the underlying networking implementations
            into subclasses of CommunicationException, so that Channels can be used polymorphically from
            an exception handling perspective.
            </summary>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.UdpChannelListener">
      <summary>
            IListenerFactory implementation for Udp.
            
            Supports IInputChannel only, as Udp is fundamentally
            a datagram protocol. Uses a listening UDP socket for each
            Factory instance, then demuxes to the appropriate IInputListener
            based on the registered filters. More advanced implementations could factor
            out the listening socket and demux from this listening object
            to separate factories based on a framing Via.
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpChannelListener.OnAbort">
      <summary>
            Shutdown ungracefully
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpChannelListener.OnClose(System.TimeSpan)">
      <summary>
            Shutdown gracefully
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpChannelListener.OnOpening">
      <summary>
            Initialize any objects we're going to need for the opened factory
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpChannelListener.OnOpen(System.TimeSpan)">
      <summary>
            Open the listener factory for use. Ensures our UDP socket is bound
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpChannelListener.OnOpened">
      <summary>
            Open has completed, start an asynchronous receive on our socket.
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpChannelListener.Dispatch(System.ServiceModel.Channels.Message)">
      <summary>
            Matches an incoming message to its waiting listener,
            using the FilterTable to dispatch the message to the correc
            listener. If no listener is waiting for the message, it is silently
            discarded.
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpChannelListener.InitializeUniqueUri(System.String)">
      <summary>
            Used to get a unique uri (by CompositeDuplexChannelFactory for example).
            We get a unique TCP port by binding to "port 0"
            </summary>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.UdpOutputChannel">
      <summary>
            IOutputChannel implementation for Udp.
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpOutputChannel.OnOpen(System.TimeSpan)">
      <summary>
            Open the channel for use. We don't have any blocking work to perform so this is a no-op
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpOutputChannel.OnAbort">
      <summary>
            Shutdown ungracefully
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpOutputChannel.OnClose(System.TimeSpan)">
      <summary>
            Shutdown gracefully
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpOutputChannel.EncodeMessage(System.ServiceModel.Channels.Message)">
      <summary>
            Address the Message and serialize it into a byte array.
            </summary>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.UdpOutputChannel.SendAsyncResult">
      <summary>
            Implementation of async send for Udp. 
            </summary>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.UdpTransportBindingElement">
      <summary>
            Udp Binding Element.  
            Used to configure and construct Udp ChannelFactories and ChannelListeners.
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>
            Used by higher layers to determine what types of channel factories this
            binding element supports. Which in this case is just IOutputChannel.
            </summary>
    </member>
    <member name="M:Microsoft.ServiceModel.Samples.UdpTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>
            Used by higher layers to determine what types of channel listeners this
            binding element supports. Which in this case is just IInputChannel.
            </summary>
    </member>
    <member name="T:Microsoft.ServiceModel.Samples.UdpTransportElement">
      <summary>
            Configuration section for Udp. 
            </summary>
    </member>
    <member name="T:EPiServer.Configuration.Transform.Internal.EnvironmentOptionsTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Configuration.Transform.Internal.ExceptionMessageFormatterTransformation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Configuration.Transform.Internal.LocalizationOptionsTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Configuration.Transform.Internal.ProviderSettingsValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Configuration.Transform.Internal.VirtualRoleOptionsTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.CriterionBase`1">
      <summary>
            An abstract class for a visitor group criterion using strongly typed settings and automatically generated user interface
            </summary>
      <typeparam name="T">The type of model/settings to operate on.</typeparam>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.CriterionBase`1.Initialize(EPiServer.Personalization.VisitorGroups.VisitorGroupCriterion)">
      <summary>
            Initializes the criterion with the provided settings or creates new settings.
            </summary>
      <param name="visitorGroupCriterion">The stored visitor group for this criterion.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.CriterionBase`1.Model">
      <summary>
            Gets the model for this criterian instance.
            </summary>
      <value>The model.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.CriterionBase`1.EPiServer#Personalization#VisitorGroups#IGeneratesAdministrativeInterface#ModelType">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <remarks>This is basically a way for the rendering runtime to get hold of the generic type that was specified for
            the model as part of this class.</remarks>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.CriterionBase`1.Subscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Called when a criterion instance is initialized. An instance has here
            the opportunity to subscribe to desired events.
            </summary>
      <remarks>
            Any event subscribed to in this method should be unsubscribed in method Unsubscribe.
            The reason for this is that otherwise there will be "dangling" event handlers. 
            </remarks>
      <param name="criterionEvents">The criterion notifier.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.CriterionBase`1.Unsubscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Called when a criterion is unloaded, for example because it seetings has been updated.
            Here any events subscribed to in method Subscribe should be unsubscribed to to avoid 
            "dangling" event handlers.
            </summary>
      <param name="criterionEvents">The criterion notifier.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.CriterionBase`1.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified principal and/or context matches the criteria.
            </summary>
      <param name="principal">The principal.</param>
      <param name="httpContext">The HTTP context.</param>
      <returns>
        <c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions">
      <summary>
            Html helper for rendering dojo editors
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions.DojoEditorFor``1(System.Web.Mvc.HtmlHelper{``0},System.Reflection.PropertyInfo,System.Object,System.String,System.String,EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions.LabelPosition)">
      <summary>
            Creates Dojo editor.
            </summary>
      <typeparam name="TModel">The type of the model.</typeparam>
      <param name="html">The HTML helper.</param>
      <param name="propertyInfo">The property.</param>
      <param name="htmlAttributes">Additional html attributes</param>
      <param name="label">The label text.</param>
      <param name="labelCssClass">Css class for the label</param>
      <param name="labelPosition">The position of the label relative to the editor control</param>
      <returns>The rendered HTML markup</returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions.DojoEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.String,EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions.LabelPosition)">
      <summary>
            Creates Dojo editor.
            </summary>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper.</param>
      <param name="expression">The property expression.</param>
      <param name="htmlAttributes">Additional html attributes</param>
      <param name="label">The label text.</param>
      <param name="labelCssClass">Css class for the label</param>
      <param name="labelPosition">The position of the label relative to the editor control</param>
      <returns>The rendered HTML markup</returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions.DojoEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.String)">
      <summary>
            Creates Dojo editor.
            </summary>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper.</param>
      <param name="expression">The property expression.</param>
      <param name="htmlAttributes">Additional html attributes</param>
      <param name="label">The label text.</param>
      <param name="labelCssClass">Css class for the label</param>
      <returns>The rendered HTML markup</returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions.DojoEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>
            Creates Dojo editor.
            </summary>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper.</param>
      <param name="expression">The property expression.</param>
      <param name="htmlAttributes">Additional html attributes</param>
      <returns>The rendered HTML markup</returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions.DojoEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Creates Dojo editor.
            </summary>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper.</param>
      <param name="expression">The property expression.</param>
      <returns>The rendered HTML markup</returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions.LabelPosition">
      <summary>
            Label positioning relative to editor control
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions.LabelPosition.Left">
      <summary>
            Position label to the left
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.DojoHtmlExtensions.LabelPosition.Right">
      <summary>
            Position label to the right
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.ICriterion">
      <summary>
            Interface for visitor group criteria
            </summary>
      <remarks>Do not implement this interface, instead use the <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionBase`1" /> class.</remarks>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.ICriterion.Initialize(EPiServer.Personalization.VisitorGroups.VisitorGroupCriterion)">
      <summary>
            Initializes the criterion with its previously stored settings
            </summary>
      <param name="visitorGroupCriterion">The stored instance of this criterion.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.ICriterion.Subscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Called when a criterion instance is initialized. An instance has here
            the opportunity to subscribe to desired events.
            </summary>
      <remarks>
            Any event subscribed to in this method should be unsubscribed in method Unsubscribe.
            The reason for this is that otherwise there will be "dangling" event handlers. 
            </remarks>
      <param name="criterionEvents">The criterion notifier.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.ICriterion.Unsubscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Called when a criterion is unloaded, for example because it seetings has been updated.
            Here any events subscribed to in method Subscribe should be unsubscribed to to avoid 
            "dangling" event handlers.
            </summary>
      <param name="criterionEvents">The criterion notifier.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.ICriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified principal and/or context matches the criteria.
            </summary>
      <param name="principal">The principal.</param>
      <param name="httpContext">The HTTP context.</param>
      <returns>
        <c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs">
      <summary>
            Argument passed to event handlers for critera notifications. 
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.CriterionEventArgs.#ctor(System.Web.HttpContextBase)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> class.
            </summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.CriterionEventArgs.HttpContext">
      <summary>
            Gets or sets the HTTP context for which the event was raised.
            </summary>
      <remarks>
            In some cases HttpContext might be null, for example when executing inside a scheduled job.
            </remarks>
      <value>The HTTP context.</value>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.ICriterionEvents">
      <summary>
            Specifies events a criteria can subscribe to
            </summary>
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.ICriterionEvents.StartSession">
      <summary>
            Occurs when a new session is started.
            </summary>
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.ICriterionEvents.StartRequest">
      <summary>
            Occurs when a request is started.
            </summary>
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.ICriterionEvents.PreRequestHandlerExecute">
      <summary>
            Occurs just before ASP.NET starts executing an event handler (for example a page or an XML Web service).
            When this event is fired Session is available (if the handler for the request supports session).
            </summary>
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.ICriterionEvents.EndRequest">
      <summary>
            Occurs when a request is ended.
            </summary>
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.ICriterionEvents.VisitedPage">
      <summary>
            Occurs when a page is visited.
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.IGeneratesAdministrativeInterface">
      <summary>
            When implemented by a criterion this interface instructs the administrative UI to generate an interface.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.IGeneratesAdministrativeInterface.ModelType">
      <summary>
            The type of model to generate an interface for.
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.ConflictingNameVisitorGroupValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.CookieBasedStateStorage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.Instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or set the static instance used to handle ICriterionEvents.
            </summary>
      <value>The instance.</value>
      <exclude />
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.StartSession">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a new session is started.
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.StartRequest">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a request is started.
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.EndRequest">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a request is ended.
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.PreRequestHandlerExecute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs just before ASP.NET starts executing an event handler (for example a page or an XML Web service).
            When this event is fired Session is available (if the handler for the request supports session).
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.VisitedPage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a page is visited.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.RaiseStartRequest(System.Object,EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise StartRequest event.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.RaiseEndRequest(System.Object,EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise EndRequest event.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.RaiseStartSession(System.Object,EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise event StartSession
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.RaisePreRequestHandlerExecute(System.Object,EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise event PreRequestHandlerExecute
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.CriterionEvents.RaiseVisitedPage(System.Object,EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise event VisitedPage
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.ICriterionEventsRaiser">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies methods to raise events from ICriterionEvents
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.ICriterionEventsRaiser.RaiseStartRequest(System.Object,EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise event StartRequest.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.ICriterionEventsRaiser.RaiseEndRequest(System.Object,EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise event EndRequest.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.ICriterionEventsRaiser.RaiseStartSession(System.Object,EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise event StartSession.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.ICriterionEventsRaiser.RaisePreRequestHandlerExecute(System.Object,EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise event PreRequestHandlerExecute.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.ICriterionEventsRaiser.RaiseVisitedPage(System.Object,EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise event VisitedPage.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.ICriterionFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.IVisitorGroupRoleFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.SessionBasedStateStorage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.StateStorageExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupHttpInitialization.InitializeHttpEvents(System.Web.HttpApplication)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initialize any events on <see c="System.Web.HttpApplication" /> instances created by ASP.NET
            </summary>
      <param name="application">The instance to initialize</param>
      <remarks>
        <para>This method may be called either after or before the Initialize-method so make sure you do not have any dependencies between these methods. The beaviour that is guaranteed
            is that your event handlers will not be called before the Initialize-method. If EPiServer is being initialized outside ASP.NET this method will never get called.</para>
        <para>When the ASP.NET runtime initializes it will create many instances of the <see c="System.Web.HttpApplication" /> class so make sure you only add
            logic to initialize events in this method, and not any one-time configuration which should be placed in the Initialize-method.</para>
        <para>Since a <see c="System.Web.HttpApplication" /> can be disposed at any time make sure you never store references to this class since that could create a memory leak.</para>
      </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStateStorageHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger.#ctor(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. For internal use only
            </summary>
      <param name="enableTimer">if set to <c>true</c> [enable timer].</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger.#ctor(System.Boolean,System.Collections.Generic.IList{EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticRepository})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. For internal use only
            </summary>
      <param name="enableTimer">if set to <c>true</c> [enable timer].</param>
      <param name="statisticRepositories">The statistic repositories.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger.Instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. For internal use only
            </summary>
      <value>The instance.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger.AddStatisticToMemory(System.Guid,System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. For internal use only
            </summary>
      <param name="identity">The identifier.</param>
      <param name="httpContext">The HTTP context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger.CommitStatisticFromMemoryToRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. For internal use only
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger.AddRepository(EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. For internal use only
            </summary>
      <param name="repository">The repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger.RemoveStatistics(System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. For internal use only
            </summary>
      <param name="identities">The identities.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger.AutomaticCommitFromMemoryToRepositoryPeriod">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. For internal use only
            </summary>
      <value>The automatic commit from memory to repository period.</value>
      <exclude />
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger.PersistCollectedStatistic">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupStatisticsLogger.StatisticRepositories">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the statistic repositories.
            </summary>
      <value>The statistic repositories.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A repository for VisitorGroupRole
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository.VisitorGroupRegistered">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Fired when Regiter visitor group is called
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository.VisitorGroupUnregistered">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Fired when Unregiter visitor group is called
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository.#ctor(EPiServer.Security.IVirtualRoleReplication,EPiServer.Personalization.VisitorGroups.ICriterionEvents,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Personalization.VisitorGroups.Internal.IVisitorGroupRoleFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository.BeforeRegister(EPiServer.Personalization.VisitorGroups.VisitorGroupRole)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Calls Subscribe on the visitor group role.
            </summary>
      <param name="virtualRoleProvider">The visitor group role.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository.AfterUnregister(EPiServer.Personalization.VisitorGroups.VisitorGroupRole)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Calls Subscribe on the Unsubscribe group role.
            </summary>
      <param name="virtualRoleProvider">The visitor group role.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository.Register(EPiServer.Personalization.VisitorGroups.VisitorGroup,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers the specified visitor group.
            </summary>
      <param name="visitorGroup">The visitor group.</param>
      <param name="replicateChanges">if set to <c>true</c> changes are replicated</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository.Register(System.String,System.Type,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Register a new visitor group role.
            </summary>
      <param name="name">Name of the role</param>
      <param name="virtualRoleProviderType">The type of the implementation</param>
      <param name="replicateChanges">True if changes should be replicated to other instances or machines</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository.Unregister(System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Unregister a Visitor  Group
            </summary>
      <param name="name">The name of the role</param>
      <param name="replicateChanges">Replicate changes to all instences of this class</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.ISelectionFactory">
      <summary>
            Common inferface for selection factories
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.ISelectionFactory.GetSelectListItems(System.Type)">
      <summary>
            Gets the select list items.
            </summary>
      <param name="propertyType">The property.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.IStateStorage">
      <summary>
            Interface for saving and loading state 
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.IStateStorage.IsAvailable">
      <summary>
            Indicate whether the storage is available.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.IStateStorage.Save(System.String,System.Object)">
      <summary>
            Save value for specific key
            </summary>
      <param name="key">The key</param>
      <param name="value">The value</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.IStateStorage.Load(System.String)">
      <summary>
            Load value for the specific key
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.IStateStorage.Delete(System.String)">
      <summary>
            Delete the saved value for the specific key
            </summary>
      <param name="key">
      </param>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.IVisitorGroupRoleRepository">
      <summary>
            Defines methods to access <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupRole" /></summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.IVisitorGroupRoleRepository.TryGetRole(System.String,EPiServer.Personalization.VisitorGroups.VisitorGroupRole@)">
      <summary>
            Get a role based on name
            </summary>
      <param name="name">Name of the role</param>
      <param name="virtualRoleProvider">The virtual role provider registered for this name</param>
      <returns>True if the role was found</returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.IVisitorGroupsStatisticsLoggerRegistry">
      <summary>
            This is the registry used for <see cref="T:EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticRepository" /> implementations. 
            This is mainly used internally within the CMS.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.IVisitorGroupsStatisticsLoggerRegistry.AddRepository(EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticRepository)">
      <summary>
            Registers a <see cref="T:EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticRepository" /> for statistic collection
            </summary>
      <param name="repository">The repository to register</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.IVisitorGroupsStatisticsLoggerRegistry.RemoveStatistics(System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>
            Removes statistic for specified visitor groups
            </summary>
      <param name="visitorGroupIds">The visitor groups for which statistics should be removed</param>
    </member>
    <member name="E:EPiServer.Personalization.VisitorGroups.IVisitorGroupsStatisticsLoggerRegistry.PersistCollectedStatistic">
      <summary>
            Raised when presisted statistic should be persisted.
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticRepository">
      <summary>
            For internal use only
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticRepository.AddStatistic(System.Guid,System.Web.HttpContextBase)">
      <summary>
            For internal use only
            </summary>
      <param name="identity">Identities to add statistics for</param>
      <param name="httpContext">HttpContext</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticRepository.DeleteStatistics(System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>
            For internal use only
            </summary>
      <param name="identities">Identities to delete statistics for</param>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticsLogger">
      <summary>
            Interface for visitor group statistic logger
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticsLogger.AddStatisticToMemory(System.Guid,System.Web.HttpContextBase)">
      <summary>
            Adds the statistic to memory.
            </summary>
      <param name="identity">The identity.</param>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticsLogger.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticsLogger" /> is enabled.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.SessionStartCookieCriterionBase`1">
      <summary>
             An abstract class for a coockie based visitor group criterion using strongly typed settings and automatically generated user interface
             On session start, a cookie will be created if it's not exist, and the value of the cookie will be set by the implementation
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.SessionStartCookieCriterionBase`1.Subscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Called when a criteria instance is initialized.
            Starts listenen on session start
            </summary>
      <param name="criterionEvents">The criterion notifier.</param>
      <remarks>
            Any event subscribed to in this method should be unsubscribed in method Unsubscribe.
            The reason for this is that otherwise there will be "dangling" event handlers.
            </remarks>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.SessionStartCookieCriterionBase`1.Unsubscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Called when a criteria is unloaded, for example because it seetings has been updated.
            Unsubscribes the session start handler
            </summary>
      <param name="criterionEvents">
      </param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.SessionStartCookieCriterionBase`1.CookieExpires">
      <summary>
            Gets the cookie expires date and time for the cookie.
            If not override, the value will be DateTime.MinValue
            </summary>
      <value>The cookie expires.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.SessionStartCookieCriterionBase`1.GetCookie(System.Web.HttpContextBase)">
      <summary>
            Gets the cookie.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.SessionStartCookieCriterionBase`1.SetCookieValue(System.Web.HttpCookie,System.Web.HttpContextBase)">
      <summary>
            Sets the cookie value.
            </summary>
      <param name="cookie">The cookie.</param>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.SessionStartCookieCriterionBase`1.CookieKey">
      <summary>
            Gets the cookie key.
            </summary>
      <value>The cookie key.</value>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.VisitorGroupCriterionAttribute">
      <summary>
            Attribute used to declaratively define visitor group criterion definitions.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupCriterionAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupCriterionAttribute" /> class.
            </summary>
      <remarks>
            You must use named parameters to initialize the properties.
            </remarks>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.VisitorGroupCriterionAttribute.LanguagePath">
      <summary>
            Path to node in language files where translation can be found.
            </summary>
      <remarks>
            Set this property to the path of the XML element that contains the 
            displayname and description elements in one of your language files 
            (an xml file in the /lang directory.) 
            </remarks>
      <example>
        <para>
            For a LanguagePath with the value "/myshop/plugin/ShopPluginTree/" the 
            XML should look something like this: 
            </para>
        <code source="../CodeSamples/Localization/langfile.xml" region="XML" lang="xml" />
      </example>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.VisitorGroupCriterionAttribute.Category">
      <summary>
            The category of the plugin (currently only supported by Report and Visitor Group Criterion).
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.VisitorGroupCriterionAttribute.DisplayName">
      <summary>
            The display name for the plugin. 
            </summary>
      <returns>A string with the display name.</returns>
      <remarks>
            If a LanguagePath has been defined, the return value for DisplayName will be the translated 
            text from LanguagePath + "/displayname" 
            </remarks>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.VisitorGroupCriterionAttribute.ScriptUrl">
      <summary>
            Gets and sets the url relative the shell module to the resource
            </summary>
      <value>The URL relative the UI directory</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.VisitorGroupCriterionAttribute.Description">
      <summary>
            Description of the plugin 
            </summary>
      <value>The description.</value>
      <remarks>
            If a LanguagePath has been defined, the return value for Description will be the 
            translated text from LanguagePath + "/description"  
            </remarks>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.VisitorGroupHelper">
      <summary>
            Helper methods for working with visitor groups
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupHelper.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRoleRepository)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupHelper" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupHelper.#ctor(EPiServer.Personalization.VisitorGroups.Internal.VisitorGroupRoleRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupHelper" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupHelper.IsPrincipalInGroup(System.Security.Principal.IPrincipal,System.String)">
      <summary>
            Determines whether the specified principal is in the virtual role
            </summary>
      <param name="principal">The principal.</param>
      <param name="virtualRole">The role.</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupHelper.IsPrincipalInGroup(System.Security.Principal.IPrincipal,System.String,System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified principal is in the virtual role
            </summary>
      <param name="principal">The principal.</param>
      <param name="virtualRole">The role.</param>
      <param name="httpContext">The HTTP context.</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupInitialization.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>
            Register the visitor groups into the Virtual Role System.
            </summary>
      <param name="context">The context.</param>
      <remarks>
        <para>
            Gets called as part of the EPiServer Framework initialization sequence. Note that it will be called
            only once per AppDomain, unless the method throws an exception. If an exception is thrown, the initialization
            method will be called repeadetly for each request reaching the site until the method succeeds.
            </para>
        <para>
            The "called once" guarantee uses the IsIntialized property as defined on this interface. The value of this
            property will be set by the EPiServer Framework initialization system and you should not set it directly.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>
             Unregister visitor groups from virtual roles system and its repository.
            </summary>
      <param name="context">The context.</param>
      <remarks>
        <para>
            This method is usually not called when running under a web application since the web app may be shut down very
            abruptly, but your module should still implement it properly since it will make integration and unit testing
            much simpler.
            </para>
        <para>
            Any work done by <see cref="M:EPiServer.Personalization.VisitorGroups.VisitorGroupInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)" /> as well as any code executing on <see cref="E:InitializationEngine.InitComplete" /> should be reversed.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.VisitorGroupRole">
      <summary>
            The VisitorGroupRole class holds a VisitorGroup and its VisitorGroupCriterion collection.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.ImpersonatedVisitorGroupByName">
      <summary>
            Key to httpContext Items to get array of impersonated groups name for current request
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.ImpersonatedVisitorGroupByID">
      <summary>
            Key to httpContext Items to get array of impersonated groups id for current request
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.VisitorGroupKeyByName">
      <summary>
            Query string key to set impersonation to visitor groups by name
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.VisitorGroupKeyByID">
      <summary>
            Query string key to set impersonation to visitor groups by id
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> on a provider after the provider has already been initialized.
            </exception>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupRole" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupRole" /> class.
            </summary>
      <param name="visitorGroupRepository">The visitor group repository.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticsLogger)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupRole" /> class.
            </summary>
      <param name="visitorGroupRepository">The visitor group repository.</param>
      <param name="visitorGroupStatisticsLogger">The visitor group statistics logger.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.#ctor(EPiServer.Personalization.VisitorGroups.VisitorGroup,EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupRole" /> class.
            </summary>
      <param name="visitorGroup">The visitor group.</param>
      <param name="visitorGroupRepository">The visitor group repository.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.#ctor(EPiServer.Personalization.VisitorGroups.VisitorGroup,EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticsLogger)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupRole" /> class.
            </summary>
      <param name="visitorGroup">The visitor group.</param>
      <param name="visitorGroupRepository">The visitor group repository.</param>
      <param name="visitorGroupStatisticsLogger">The visitor group statistics logger.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.#ctor(EPiServer.Personalization.VisitorGroups.VisitorGroup,EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,EPiServer.Personalization.VisitorGroups.IVisitorGroupStatisticsLogger,EPiServer.Personalization.VisitorGroups.Internal.ICriterionFactory,EPiServer.Personalization.IAggregatedPersonalizationEvaluator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupRole" /> class.
            </summary>
      <param name="visitorGroup">The visitor group.</param>
      <param name="visitorGroupRepository">The visitor group repository.</param>
      <param name="visitorGroupStatisticsLogger">The visitor group statistics logger.</param>
      <param name="criterionFactory">The criterion factory</param>
      <param name="personalizationEvaluator">The personalization evaluator</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.Initialize(System.String)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
      <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
      <param name="principal">The principal.</param>
      <param name="context">The object context.</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The context parameter may be null but can be used to transfer external context to a Virtual role provider.
            </remarks>
      <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
      <param name="principal">The principal.</param>
      <param name="httpContext">The HTTP context.</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The context parameter may be null but can be used to transfer external context to a Virtual role provider
            </remarks>
      <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.AddVisitorGroupStatistics(System.Boolean,System.Web.HttpContextBase)">
      <summary>
            Adds statistics for visitor groups if statistics is enabled.
            </summary>
      <param name="isMatch">if set to <c>true</c> [is match].</param>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.Name">
      <summary>
            Gets the friendly name used to refer to the provider during configuration.
            </summary>
      <value>
      </value>
      <returns>
            The friendly name used to refer to the provider during configuration.
            </returns>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.ID">
      <summary>
            Gets the ID for the visitor group which is wrapped by virtual Role provider.
            </summary>
      <value>The ID.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.StatisticsLogger">
      <summary>
            Gets the visitor group statistics logger.
            </summary>
      <value>The visitor group statistics logger.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.VisitorGroupRole.GetRepository">
      <summary>
            Returns the globally used repository for storing visitor groups
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.ClientGeolocationOptions">
      <summary>
            Contains options for how Geolocation for the client is retrieved.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.ClientGeolocationOptions.LocationHeader">
      <summary>
            The name of a header that provides geolocation information in the form of a ISO 3166-1 Alpha-2 country code.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.ClientGeolocationOptions.IPAddressHeader">
      <summary>
            The name of a header that is used to retrieve the IP-address of the client.
            This setting should be used if the site is located behind a proxy server to get the right IP address of the client.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.ClientGeolocationOptions.IPAddressHeaderProxyCount">
      <summary>
            The number of proxy servers in front of the web server listed by IP in the <see cref="P:EPiServer.Personalization.ClientGeolocationOptions.IPAddressHeader" />.
            Default value is 1.
            </summary>
      <example>
            If the proxy count is 3 and the client request contains a header "X-Forwarded-For" with the
            value "217.114.83.121, 217.114.83.129, 217.114.83.128, 217.114.83.127",
            the actual client IP address is assumed to be 217.114.83.129.
            </example>
    </member>
    <member name="T:EPiServer.Personalization.DoNotTrackPersonalizationEvaluator">
      <summary>
            An implementation of <see cref="T:EPiServer.Personalization.IPersonalizationEvaluator" /> that checks if Do Not Track header (DNT) is present on request and if so disables personalization.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.DoNotTrackPersonalizationEvaluator.#ctor(EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpRequestBase})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Personalization.DoNotTrackPersonalizationEvaluator" /></summary>
    </member>
    <member name="M:EPiServer.Personalization.DoNotTrackPersonalizationEvaluator.Personalize">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Personalization.DoNotTrackPersonalizationEvalutator">
      <summary>
            An implementation of <see cref="T:EPiServer.Personalization.IPersonalizationEvaluator" /> that checks if Do Not Track header (DNT) is present on request and if so disables personalization.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.DoNotTrackPersonalizationEvalutator.#ctor(EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpRequestBase})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Personalization.DoNotTrackPersonalizationEvalutator" /></summary>
    </member>
    <member name="T:EPiServer.Personalization.IClientGeolocationResolver">
      <summary>
            Defines a service that resolves the Geolocation of the current client.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.IClientGeolocationResolver.Capabilities">
      <summary>
            Gets the geolocation resolving capabilities of the <see cref="T:EPiServer.Personalization.IClientGeolocationResolver" /></summary>
    </member>
    <member name="M:EPiServer.Personalization.IClientGeolocationResolver.ResolveLocation(System.Web.HttpContextBase)">
      <summary>
            Resolves the geographic location where the current request originates from.
            </summary>
      <param name="httpContext">The current HTTP context.</param>
      <returns>The geolocation of the current client or <c>null</c> if no location could be established.</returns>
    </member>
    <member name="T:EPiServer.Personalization.IClientIPAddressResolver">
      <summary>
            Defines signature for compontent that resolves client ip addresses.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.IClientIPAddressResolver.ResolveAddress(System.Web.HttpContextBase)">
      <summary>
            Resolves the client ip address from the context.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.Internal.FirstActiveClientGeolocationResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of <see cref="T:EPiServer.Personalization.IClientGeolocationResolver" /> that will delegate all calls to the first
            active <see cref="T:EPiServer.Personalization.IClientGeolocationResolver" /> implementation it can find among it's dependencies.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.FirstActiveClientGeolocationResolver.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Personalization.IClientGeolocationResolver})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. ader
            Creates a new instance of <see cref="T:EPiServer.Personalization.Internal.FirstActiveClientGeolocationResolver" /></summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.Internal.FirstActiveClientGeolocationResolver.Capabilities">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.FirstActiveClientGeolocationResolver.ResolveLocation(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.Internal.ProviderBasedClientGeolocationResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of <see cref="T:EPiServer.Personalization.IClientGeolocationResolver" /> that uses the <see cref="T:EPiServer.Personalization.IGeolocationProvider" /> to resolve the client location.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.ProviderBasedClientGeolocationResolver.#ctor(EPiServer.Personalization.IGeolocationProvider,EPiServer.Personalization.IClientIPAddressResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. ader
            Creates a new instance of <see cref="T:EPiServer.Personalization.Internal.ProviderBasedClientGeolocationResolver" /></summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.Internal.ProviderBasedClientGeolocationResolver.Capabilities">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.ProviderBasedClientGeolocationResolver.ResolveLocation(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.Internal.RequestHeaderClientGeolocationResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.Geolocation">
      <summary>
            Provides an interface to the configured Geolocation providers in the application.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Geolocation.Provider">
      <summary>
            Gets a reference to the default geolocation provider for the application.
            </summary>
    </member>
    <member name="T:EPiServer.Data.Configuration.CacheElement">
      <summary>
            Class representing the Cache configuration element
            </summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.CacheElement.DefaultProvider">
      <summary>
            Gets the configured default provider
            </summary>
      <value>The default provider.</value>
    </member>
    <member name="P:EPiServer.Data.Configuration.CacheElement.Providers">
      <summary>
            Gets the configured providers for the cache.
            </summary>
      <remarks>
            Only the provider given as defaultProvider will be instantiated
            </remarks>
      <value>The providers.</value>
    </member>
    <member name="T:EPiServer.Data.Configuration.DataStoreElement">
      <summary>
            Class representing the dataStore configuration element
            </summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.DataStoreElement.DefaultProvider">
      <summary>
            Gets the configured default provider
            </summary>
      <value>A <see cref="T:System.String" /> with the name of the default provider.</value>
    </member>
    <member name="P:EPiServer.Data.Configuration.DataStoreElement.Providers">
      <summary>
            Gets the providers section
            </summary>
      <value>A <see cref="T:System.Configuration.ProviderSettingsCollection" /> instance</value>
    </member>
    <member name="P:EPiServer.Data.Configuration.DataStoreElement.CacheSettings">
      <summary>
            Get the cache section
            </summary>
      <value>A <see cref="T:EPiServer.Data.Configuration.CacheElement" /> instance</value>
    </member>
    <member name="P:EPiServer.Data.Configuration.DataStoreElement.AutoResolveTypes">
      <summary>
        <see langword="true" /> if type resolution should be done automatically by the Dynamic Data Store, otherwise <see langword="false" /></summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.DataStoreElement.AutoRemapStores">
      <summary>
        <see langword="true" /> if stores should be automatically remapped when a type definition changes, otherwise <see langword="false" /></summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.DataStoreElement.DeleteAllOperationTimeout">
      <summary>
            Command timeout for the "delete all" functionality
            </summary>
    </member>
    <member name="T:EPiServer.Data.Configuration.EntityElement">
      <summary>
            Configuration for entities and their providers
            </summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.EntityElement.Providers">
      <summary>
            A list of providers implementing <c>IEntityProvider</c></summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.EntityElement.SupportedTypes">
      <summary>
            A list of the supported .NET types and their providers
            </summary>
    </member>
    <member name="T:EPiServer.Data.Configuration.EPiServerDataStoreSection">
      <summary>
            Class representing the episerver.dataStore configuration element
            </summary>
    </member>
    <member name="F:EPiServer.Data.Configuration.EPiServerDataStoreSection.DefaultConnectionStringName">
      <summary>
            The default name of the connection string used by CMS.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Configuration.EPiServerDataStoreSection.InitializeAllSettings(System.Configuration.Configuration,System.Boolean)">
      <summary>
            Initialize the section from the <paramref name="config" /> passed
            </summary>
      <param name="config">A <see cref="T:System.Configuration.Configuration" /></param>
      <param name="modifyConnectionStringNameForTest">Pass true if the connection string name should be modified when running in test mode</param>
    </member>
    <member name="P:EPiServer.Data.Configuration.EPiServerDataStoreSection.ConfigurationInstance">
      <summary>
            Gets and sets the current configuration to use
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Configuration.EPiServerDataStoreSection.Instance">
      <summary>
            Gets the instance of the <see cref="T:EPiServer.Data.Configuration.EPiServerDataStoreSection" /> section
            </summary>
    </member>
    <member name="M:EPiServer.Data.Configuration.EPiServerDataStoreSection.ResolveConnectionStringSettings">
      <summary>
            Resolves connection strings
            </summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Thrown if connection string was not found</exception>
      <returns>Connection string</returns>
    </member>
    <member name="P:EPiServer.Data.Configuration.EPiServerDataStoreSection.ConnectionStringSection">
      <summary>
            Gets or sets the connection string section to use.
            </summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.EPiServerDataStoreSection.DataStoreSettings">
      <summary>
            Gets the dataStore element
            </summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.EPiServerDataStoreSection.EntitySettings">
      <summary>
            Gets the entity element
            </summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.EPiServerDataStoreSection.DataSettings">
      <summary>
            Gets the data settings element.
            </summary>
      <value>
            The data settings.
            </value>
    </member>
    <member name="M:EPiServer.Data.Configuration.EPiServerDataStoreSection.GetCurrentSiteDataSettings">
      <summary>
            Gets the data settings.
            </summary>
      <returns>The data settings</returns>
    </member>
    <member name="T:EPiServer.Data.Configuration.SiteDataSettingsElement">
      <summary>
            Configuration class for overriding the global data settings
            </summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.SiteDataSettingsElement.ConnectionStringName">
      <summary>
            Gets the connection string
            </summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.SiteDataSettingsElement.Retries">
      <summary>
            Gets the number of retries in case a deadlock is detected
            </summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.SiteDataSettingsElement.RetryDelay">
      <summary>
            Gets the delay between retries in case a deadlock is detected
            </summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.SiteDataSettingsElement.DatabaseQueryTimeout">
      <summary>
            Gets the timeout for database queries
            </summary>
    </member>
    <member name="T:EPiServer.Data.Configuration.SupportedTypeElement">
      <summary>
            Mapping between a .NET type and a <c>IEntityProvider</c></summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.SupportedTypeElement.Provider">
      <summary>
            The name of the provider used to reference it in <see cref="T:EPiServer.Data.Configuration.SupportedTypeElement" /></summary>
    </member>
    <member name="P:EPiServer.Data.Configuration.SupportedTypeElement.Type">
      <summary>
            The .NET type of the provider implementation
            </summary>
    </member>
    <member name="T:EPiServer.Data.Configuration.SupportedTypeElementCollection">
      <summary>
            A collection of <see cref="T:EPiServer.Data.Configuration.SupportedTypeElement" /></summary>
    </member>
    <member name="T:EPiServer.Data.Configuration.Transform.Internal.DataAccessOptionsTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Configuration.Transform.Internal.DynamicDataStoreOptionsTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Configuration.Transform.Internal.LegacyDatabaseHandlerSetup">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Internal.ConnectionStringOptionsExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.IAsyncDatabaseHandler">
      <summary>
            An asynchronous version of <see cref="T:EPiServer.Data.IDatabaseHandler" /></summary>
      <remarks>Asynchronous methods does not support nesting which means a new connection is opened for every call to any async method</remarks>
    </member>
    <member name="M:EPiServer.Data.IAsyncDatabaseHandler.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            An asynchronous version of Execute, opens a connection and executes the function with access to the open connection
            </summary>
    </member>
    <member name="M:EPiServer.Data.IAsyncDatabaseHandler.ExecuteAsync(System.Func{System.Threading.Tasks.Task})">
      <summary>
            An asynchronous version of Execute, opens a connection and executes the function with access to the open connection
            </summary>
    </member>
    <member name="M:EPiServer.Data.IAsyncDatabaseHandler.ExecuteTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            An asynchronous version of ExecuteTransaction, opens a connection and transaction and executes the <see cref="T:System.Action" /> with access to the open connection
            </summary>
    </member>
    <member name="M:EPiServer.Data.IAsyncDatabaseHandler.ExecuteTransactionAsync(System.Func{System.Threading.Tasks.Task})">
      <summary>
            An asynchronous version of ExecuteTransaction, opens a connection and transaction and executes the <see cref="T:System.Action" /> with access to the open connection
            </summary>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Data.IDatabaseHandler">
      <summary>
            Interface for common database operations such as executing stored procedures and transaction management
            </summary>
      <remarks>
        <para>
            This interface is used in all APIs that require database access. The implementation of this interface is defined by <see cref="T:EPiServer.Data.DataInitialization" /> when
            the application is starting. The IDatabaseHandler implementation is managed by the StructureMap container. It is configured to use a scope (HybridOrThreadLocal)
            that will ensure that the same handler instance will be returned throughout each request.
            </para>
        <para>
            Best practice is to never call into the database schema defined by EPiServer since backwards compatibility is not guaranteed. You should use this
            interface when accessing custom tables and want to participate in the shared connnection and transaction handling when doing so.
            </para>
        <para>
            The <see cref="M:Execute" /> and <see cref="M:ExecuteTransaction" /> methods should be the main way of executing your database code. Both methods
            takes an Action method as their only argument and it is this method that should create and execute database commands. Always use 
            <see cref="M:ExecuteTransaction" /> when calling stored procedures that does modifications to the database; using <see cref="M:Execute" /> for this
            purpose could cause problems since the database handler has no way of detecting transactions implicitly created at the database level. There are two overloads
            <see cref="M:Execute{TResult}" /> and <see cref="M:ExecuteTransaction{TResult}" /> that allow for a return value from the method in the argument.
            </para>
        <para>
            Because multiple calls on the same connection are supported (Multiple Active Result Sets) it is very important to dispose any DbDataReader instances returned.
            The preferred way of handling this is the using statement.
            </para>
      </remarks>
      <example>
        <para>
            The following are examples on usage for the most common tasks. Note that the first three examples are using extension methods that are specific to calling stored procedures.
            The extension methods shown here will create a command object, automatically resolve the parameters for the procedure by querying the database, set the parameter values 
            to the values in the params argument and finally execute the command query.
            </para>
        <para>
            Getting values using a data reader
            </para>
        <code source="../CodeSamples/EPiServer.Data/IDatabaseHandler.cs" region="GettingValuesUsingADataReader" lang="cs" />
        <para>
            Executing a scalar query
            </para>
        <code source="../CodeSamples/EPiServer.Data/IDatabaseHandler.cs" region="ExecutingAScalarQuery" lang="cs" />
        <para>
            Executing a non-query command
            </para>
        <code source="../CodeSamples/EPiServer.Data/IDatabaseHandler.cs" region="ExecutingANonQueryCommand" lang="cs" />
        <para>
            Constructing a more complex database command
            </para>
        <code source="../CodeSamples/EPiServer.Data/IDatabaseHandler.cs" region="ConstructingAMoreComplexDatabaseCommand" lang="cs" />
      </example>
    </member>
    <member name="P:EPiServer.Data.IDatabaseHandler.DbFactory">
      <summary>
            Gets the underlying factory class to used to create instances of data access classes
            </summary>
    </member>
    <member name="P:EPiServer.Data.IDatabaseHandler.IsInTransaction">
      <summary>
            Determine if the current context is running under a transaction
            </summary>
    </member>
    <member name="P:EPiServer.Data.IDatabaseHandler.Connection">
      <summary>
            Gets the current connection if one exists.
            </summary>
      <value>Will return null if no connection has been opened</value>
      <remarks>The connection is considered read-only, do not make any changes to it such as opening or closing the connection since the database handler
            will not detect these changes, leading to unexpected behaviour.</remarks>
    </member>
    <member name="P:EPiServer.Data.IDatabaseHandler.ConnectionSettings">
      <summary>
            Gets the connection settings that is being used by this instance.
            </summary>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandler.Execute``1(System.Func{``0})">
      <summary>
            Opens a connection and executes the <see cref="T:System.Func`1" /> with access to the open connection
            </summary>
      <typeparam name="TResult">A return type</typeparam>
      <param name="action">The code that will execute within the open connection</param>
      <remarks>
        <para>
            This method will implicitly open and close the connection when exiting the current scope (or the outermost scope if nested). If the action method throws
            any kind of exception, the connection will be closed before the exception is rethrown.
            </para>
        <para>
            If you are nesting calls to the Execute and/or ExecuteTransaction methods these methods will reuse any already existing connection and/or transaction. The exception is
            if you call ExecuteTransaction inside an Execute scope (which is not in turn inside an ExecuteTransaction scope), in this case a new connection will be opened
            and the transaction created in the new connection.
            </para>
        <para>See the class definition <see cref="T:EPiServer.Data.IDatabaseHandler" /> for example usage.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandler.Execute(System.Action)">
      <summary>
            Opens a connection and executes the <see cref="T:System.Action" /> with access to the open connection
            </summary>
      <param name="action">The code that will execute within the open connection</param>
      <remarks>
        <para>
            This method will implicitly open and close the connection when exiting the current scope or the outermost scope if nested. If the action method throws
            any kind of exception, the connection will be closed before the exception is rethrown.
            </para>
        <para>
            If you are nesting calls to the Execute and/or ExecuteTransaction these methods will reuse any already existing connection and/or transaction. The exception is
            if you call ExecuteTransaction inside an Execute scope (which is not in turn inside an ExecuteTransaction scope), in this case a new connection will be opened
            and the transaction created in the new connection.
            </para>
        <para>See the class definition <see cref="T:EPiServer.Data.IDatabaseHandler" /> for example usage.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandler.ExecuteTransaction(System.Action)">
      <summary>
            Opens a connection and transaction and executes the <see cref="T:System.Action" /> with access to the open connection
            </summary>
      <param name="action">The code that will execute within the connection and transaction</param>
      <remarks>
        <para>
            This method will implicitly commit the current transaction and close the connection when exiting the current scope (or the outermost scope if nested). If the
            action method throws any kind of exception, the transaction will be rolled back the connection closed before the exception is rethrown.
            </para>
        <para>
            If you are nesting calls to the Execute and/or ExecuteTransaction these methods will reuse any already existing connection and/or transaction. The exception is
            if you call ExecuteTransaction inside an Execute scope (which is not in turn inside an ExecuteTransaction scope), in this case a new connection will be opened
            and the transaction created in the new connection.
            </para>
        <para>See the class definition <see cref="T:EPiServer.Data.IDatabaseHandler" /> for example usage.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandler.ExecuteTransaction``1(System.Func{``0})">
      <summary>
            Opens a connection and transaction and executes the <see cref="T:System.Func`1" /> with access to the open connection
            </summary>
      <typeparam name="TResult">A return type</typeparam>
      <param name="action">The code that will execute within the connection and transaction</param>
      <remarks>
        <para>
            This method will implicitly commit the current transaction and close the connection when exiting the current scope (or the outermost scope if nested). If the
            action method throws any kind of exception, the transaction will be rolled back and the connection closed before the exception is rethrown.
            </para>
        <para>
            If you are nesting calls to the Execute and/or ExecuteTransaction these methods will reuse any already existing connection and/or transaction. The exception is
            if you call ExecuteTransaction inside an Execute scope (which is not in turn inside an ExecuteTransaction scope), in this case a new connection will be opened
            and the transaction created in the new connection.
            </para>
        <para>See the class definition <see cref="T:EPiServer.Data.IDatabaseHandler" /> for example usage.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandler.ExecuteLocked(System.String,System.Action)">
      <summary>
            Executes an action with acuiring an exclusive lock for specified resource.
            </summary>
      <param name="resourceName">Name of the resource.</param>
      <param name="action">The action.</param>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandler.ExecuteLocked``1(System.String,System.Func{``0})">
      <summary>
            Executes an action with acuiring an exclusive lock for specified resource.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="resourceName">Name of the resource.</param>
      <param name="action">The action.</param>
      <returns>
            Action result.
            </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandler.CreateCommand">
      <summary>
            Creates a command and attaches it to the current connection
            </summary>
      <returns>A new command instance attached to the current database connection</returns>
      <exception cref="T:System.InvalidOperationException">Will be thrown if no open connection exists, use <see cref="P:DbFactory" /> to create commands outside of a connection</exception>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandler.CreateCommand(System.String,System.Data.CommandType,System.Object[])">
      <summary>
            Creates a command with the given name and type, adding the parameter values and attaches it to the current connection.
            </summary>
      <param name="commandText">The stored procedure name or the SQL code to run.</param>
      <param name="commandType">How to interpret the value supplied in the <paramref name="commandText" /> parameter.</param>
      <param name="parameterValues">Any parameter values to pass to the stored procedure.</param>
      <returns>A command for the current connection with the given text, type and parameter values set.</returns>
      <exception cref="T:System.InvalidOperationException">Will be thrown if no open connection exists, use <see cref="P:DbFactory" /> to create commands outside of a connection</exception>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandler.EscapeWildcardChars(System.String)">
      <summary>
            Escapes wildcard characters such as "%", "_" and "[" for in literal strings used in SQL wildcard comparisons (eg LIKE)
            </summary>
      <param name="value">The string to escape</param>
      <returns>The string with any wildcard characters escaped</returns>
      <remarks>
            Example usage of this method would for example be to make sure that "20%" does not get interpreted as a wildcard search for everything
            starting with "20" when running your SQL code, in this example the string would be translated to "20[%]" for SQL Server. 
            This method does not protect against SQL injection. Vulnerability to SQL injection is best avoided by always passing values using parameters.
            </remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandler.GetProviderSpecificParameterName(System.String)">
      <summary>
            Gets the provider specific parameter name (will normally add a decoration to the parameter name, such as "@" on SQL Server)
            </summary>
      <param name="name">The name of the parameter</param>
      <returns>The decorated parameter name</returns>
    </member>
    <member name="T:EPiServer.Data.IDatabaseHandlerExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.Data.IDatabaseHandler" /> adding some often used functionality
            </summary>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.GetReader(EPiServer.Data.IDatabaseHandler,System.String,System.Data.CommandType,System.Object[])">
      <summary>
            Gets an open <see cref="T:System.Data.Common.DbDataReader" /> from the current connection with the given arguments.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="commandText">The stored procedure name or the SQL query to run.</param>
      <param name="commandType">How to interprete the data supplied in the <paramref name="commandText" /> parameter.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure or SQL query.</param>
      <returns>
            A database reader the current connection by executing the given stored procedure or SQL query with the supplied parameter values.
            </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.GetReader(EPiServer.Data.IDatabaseHandler,System.String,System.Object[])">
      <summary>
            Gets an open <see cref="T:System.Data.Common.DbDataReader" /> from the current connection with the given arguments.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="storedProcedureName">The stored procedure name.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure.</param>
      <returns>
            A database reader the current connection by executing the given stored procedure with the supplied parameter values.
            </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.GetScalar(EPiServer.Data.IDatabaseHandler,System.String,System.Data.CommandType,System.Object[])">
      <summary>
            Gets a scalar value using the given commant text and parameter values from the currently opened connection.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="commandText">The stored procedure name or the SQL query to run.</param>
      <param name="commandType">How to interprete the data supplied in the <paramref name="commandText" /> parameter.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure or SQL query.</param>
      <returns>
            A scalar value using the current connection by executing the given stored procedure or SQL query with the supplied parameter values.
            </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.GetScalar(EPiServer.Data.IDatabaseHandler,System.String,System.Object[])">
      <summary>
            Gets a scalar value using the given commant text and parameter values from the currently opened connection.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="storedProcedureName">The stored procedure name.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure.</param>
      <returns>
            A scalar value using the current connection by executing the given stored procedure with the supplied parameter values.
            </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.ExecuteNonQuery(EPiServer.Data.IDatabaseHandler,System.String,System.Data.CommandType,System.Object[])">
      <summary>
            Executes a non query using the supplied stored procedure or SQL query and parameter values from the currently opened connection.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="commandText">The stored procedure name or the SQL query to run.</param>
      <param name="commandType">How to interprete the data supplied in the <paramref name="commandText" /> parameter.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure or SQL query.</param>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.ExecuteNonQuery(EPiServer.Data.IDatabaseHandler,System.String,System.Object[])">
      <summary>
            Executes a non query using the supplied stored procedure or SQL query and parameter values from the currently opened connection.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="storedProcedureName">The stored procedure name.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure.</param>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.CreateParameter(EPiServer.Data.IDatabaseHandler,System.String,System.Object)">
      <summary>
            Creates a <see cref="T:System.Data.Common.DbParameter" /> with the specified name and value
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="name">Name of the parameter</param>
      <param name="value">The value to be added to the parameter (will determine the type)</param>
      <returns>A parameter populated with name and value</returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.CreateParameter(EPiServer.Data.IDatabaseHandler,System.String,System.Data.DbType,System.Data.ParameterDirection,System.Object)">
      <summary>
            Creates a <see cref="T:System.Data.Common.DbParameter" /> with the given arguments.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="name">The name of the parameter to create</param>
      <param name="type">The database type of the parameter to create</param>
      <param name="direction">The direction of the parameter to create</param>
      <param name="value">A created parameter</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.CreateReturnParameter(EPiServer.Data.IDatabaseHandler)">
      <summary>
            Creates a <see cref="T:System.Data.Common.DbParameter" /> for a return value of type <see cref="F:System.Data.DbType.Int32" /></summary>
      <param name="handler">The handler to execute the method on.</param>
      <returns>An instance of <see cref="T:System.Data.Common.DbParameter" /> configured as a return parameter</returns>
      <remarks>You can use <see cref="M:GetReturnValue" /> to retrieve the value of parameters created with this method</remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.GetReturnValue(EPiServer.Data.IDatabaseHandler,System.Data.Common.DbCommand)">
      <summary>
            Retrieve the return value created with <see cref="M:CreateReturnParameter" /></summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="cmd">The command object from which the return value should be extracted</param>
      <returns>The value of the parameter named "ReturnValue"</returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.GetParameterValue(EPiServer.Data.IDatabaseHandler,System.Data.Common.DbCommand,System.String)">
      <summary>
             Retrieve a value from a parameter in a <see cref="T:System.Data.Common.DbCommand" /></summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="cmd">The command object from which the value should be retrieved</param>
      <param name="name">The name of the parameter from which the value should be retrieved</param>
      <returns>The value of the parameter</returns>
      <exception cref="T:System.Data.DataException">If the parameter does not exist in the collection</exception>
    </member>
    <member name="M:EPiServer.Data.IDatabaseHandlerExtensions.SetParameterValue(EPiServer.Data.IDatabaseHandler,System.Data.Common.DbCommand,System.String,System.Object)">
      <summary>
            Set a value to a parameter in a <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="cmd">The command object on which the value should be set.</param>
      <param name="name">The name of the parameter on which the value should be set.</param>
      <param name="parameterValue">The value of the parameter to be set.</param>
      <exception cref="T:System.Data.DataException">If the parameter does not exist in the collection</exception>
    </member>
    <member name="T:EPiServer.Data.Providers.IDatabaseFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory implementation for <see cref="T:EPiServer.Data.IDatabaseHandler" /></summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.IDatabaseFactory.CreateDefaultHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create a new <see cref="T:EPiServer.Data.IDatabaseHandler" /> with the connection string for the current site.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.IDatabaseFactory.CreateHandler(System.Configuration.ConnectionStringSettings)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new <see cref="T:EPiServer.Data.IDatabaseHandler" /> with the specified connection string.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.IDatabaseFactory.CurrentHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the current <see cref="T:EPiServer.Data.IDatabaseHandler" /> with the connection string for the current site.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.SchemaUpdates.DatabaseSchemaStatus">
      <summary>
            Contains current status of the database given by <see cref="P:EPiServer.Data.SchemaUpdates.DatabaseSchemaStatus.ConnectionStringSettings" />.
            </summary>
    </member>
    <member name="P:EPiServer.Data.SchemaUpdates.DatabaseSchemaStatus.UndefinedVersion">
      <summary>
            Gets a version instance that indicates an undefined version.
            </summary>
    </member>
    <member name="P:EPiServer.Data.SchemaUpdates.DatabaseSchemaStatus.ApplicationRequiredVersion">
      <summary>
            The current database version the application supports.
            </summary>
    </member>
    <member name="P:EPiServer.Data.SchemaUpdates.DatabaseSchemaStatus.DatabaseVersion">
      <summary>
            The current version of the database.
            </summary>
    </member>
    <member name="P:EPiServer.Data.SchemaUpdates.DatabaseSchemaStatus.ConnectionStringSettings">
      <summary>
            The conrresponding connection settings for the database.
            </summary>
    </member>
    <member name="T:EPiServer.Data.SchemaUpdates.IDatabaseSchemaUpdater">
      <summary>
            Signature for component that gets called during startup where the component can detect if the
            database has correct version as application and possibly execute update scripts.
            </summary>
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.IDatabaseSchemaUpdater.GetStatus(System.Configuration.ConnectionStringsSection)">
      <summary>
            Called during startup to collect status of the databases.
            </summary>
      <param name="connectionStrings">The current configured connection strings.</param>
      <returns>The handled database and the current version of the database.</returns>
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.IDatabaseSchemaUpdater.Update(System.Configuration.ConnectionStringSettings)">
      <summary>
            Called during startup if result from <see cref="M:EPiServer.Data.SchemaUpdates.IDatabaseSchemaUpdater.GetStatus(System.Configuration.ConnectionStringsSection)" /> indicates that an update is required.
            </summary>
      <remarks>
            An update is considered to be required if the <see cref="P:EPiServer.Data.SchemaUpdates.DatabaseSchemaStatus.DatabaseVersion" /> is undefined and 
            <see cref="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.CreateDatabaseSchema" /> is <c>true</c><strong>OR</strong>
            if the <see cref="P:EPiServer.Data.SchemaUpdates.DatabaseSchemaStatus.DatabaseVersion" /> is lower than <see cref="P:EPiServer.Data.SchemaUpdates.DatabaseSchemaStatus.ApplicationRequiredVersion" />.
            and <see cref="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.UpdateDatabaseSchema" /> is <c>true</c><strong>AND</strong>
            no <see cref="T:EPiServer.Data.SchemaUpdates.IDatabaseSchemaValidator" /> implemenations return <c>false</c> from method 
            <see cref="M:EPiServer.Data.SchemaUpdates.IDatabaseSchemaValidator.IsDatabaseUpdateAllowed(System.Configuration.ConnectionStringSettings)" />.
            </remarks>
      <param name="connectionStringSettings">The connection string settings returned from <see cref="M:EPiServer.Data.SchemaUpdates.IDatabaseSchemaUpdater.GetStatus(System.Configuration.ConnectionStringsSection)" /></param>
    </member>
    <member name="T:EPiServer.Data.SchemaUpdates.IDatabaseSchemaValidator">
      <summary>
            Signature for component that want to interact when an automatic database schema update is to be executed.
            </summary>
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.IDatabaseSchemaValidator.IsDatabaseUpdateAllowed(System.Configuration.ConnectionStringSettings)">
      <summary>
            Called when need for a database schema update is detected.
            </summary>
      <param name="connectionStringSettings">The connection string settings for the database that needs schema update.</param>
      <returns>true if automatic update should be performed else false.</returns>
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.IDatabaseSchemaValidator.BeforeUpdating(System.Configuration.ConnectionStringSettings)">
      <summary>
            Called if <see cref="M:EPiServer.Data.SchemaUpdates.IDatabaseSchemaValidator.IsDatabaseUpdateAllowed(System.Configuration.ConnectionStringSettings)" /> returns true. If any action is needed before database update it can be done here.
            </summary>
      <param name="connectionStringSettings">The connection string settings for the database that will get a schema update.</param>
    </member>
    <member name="T:EPiServer.Events.Providers.WcfEventProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. EventProvider implementation for sending/recieving events through WCF.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Events.Providers.WcfEventProvider.SendMessage(EPiServer.Events.EventMessage)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Events.Providers.WcfEventProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Events.Providers.WcfEventProvider.InitializeAsync">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Events.Providers.WcfEventProvider.Uninitialize">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Events.Providers.WcfEventProvider.ReceiveMessage(EPiServer.Events.EventMessage)">
      <summary>
            Receives the message from a remote source.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="T:EPiServer.Events.Proxies.Internal.EventReplicationProxy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class is not for public use.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Events.Remote.EventReplication">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that recieves event wcf event.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Events.Remote.EventReplication.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Events.Remote.EventReplication" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Events.Remote.EventReplication.#ctor(EPiServer.Events.Providers.WcfEventProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Events.Remote.EventReplication" /> class.
            </summary>
      <param name="wcfProvider">The WCF provider.</param>
    </member>
    <member name="T:EPiServer.Events.Remote.Internal.CredentialsEventArg">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Ths class can be used of modification UserName/password before to create proxy / channel
            <seealso cref="P:EPiServer.Events.Remote.EventReplicationWCFProviders.CredentialsEvent" />
            This is useful when you will programtically to set username and password for the binding, 
            one senario is when the certificate uses in respective to http binding
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Events.Remote.Internal.CredentialsEventArg.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="P:EPiServer.Events.Remote.Internal.CredentialsEventArg.Credentials" /> class.
            </summary>
      <param name="endpoint">The endpoint.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Events.Remote.Internal.CredentialsEventArg.Endpoint">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the endpoint.
            </summary>
      <value>The endpoint.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Events.Remote.Internal.CredentialsEventArg.Credentials">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the credentials.
            </summary>
      <value>The credentials.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Events.Remote.Internal.EventReplicationProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Base class for event replication providers. 
            An event replication provider is a class that can provide an object implementing the IEventReplication interface.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Events.Remote.Internal.EventReplicationProvider.NewReplicator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the provider
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Events.Remote.Internal.EventReplicationWCFProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The EventReplicationWCFProvider class reads all EndPoint Client and create 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Events.Remote.Internal.EventReplicationWCFProvider.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Events.Remote.Internal.EventReplicationWCFProvider" /> class.
            </summary>
      <param name="eventReplicationEndPointName">Name of the event replication end point.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Events.Remote.Internal.EventReplicationWCFProvider.NewReplicator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the provider
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Events.Remote.Internal.WcfEventReplicationEndpoints">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Events.ServiceModel.IEventReplication">
      <summary>
            This is a WCF service contract for replication of events in EPiServer Events System
            </summary>
    </member>
    <member name="M:EPiServer.Events.ServiceModel.IEventReplication.RaiseEvent(EPiServer.Events.EventMessage)">
      <summary>
            Raise the event to all subscribers.
            </summary>
      <param name="message">The event message that should be passed on.</param>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResourceServiceHttpExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceService" /></summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceServiceHttpExtensions.RegisterRequiredResources(EPiServer.Framework.Web.Resources.IClientResourceService,System.Web.HttpContextBase)">
      <summary>
            Performs the registration of the required client resources.
            </summary>
      <param name="service">The extended service</param>
      <param name="context">The HTTP context.</param>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResourceRegisterAttribute">
      <summary>
            Attribute is used to mark <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceRegister" /> implementations 
            that should be discovered automatically by service locator.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceRegisterAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResourceRegisterAttribute" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResourceRegisterAttribute.Lifecycle">
      <summary>
            Gets the scope of instances of the attributed register class; one instance is reused in scope of the one HTTP context.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResources">
      <summary>
            Helper methods to require and render client resources.
            </summary>
      <summary>
            Helper methods to require and render client resources.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.GetEmbeddedResourceUrl(System.Type,System.String)">
      <summary>
            Gets the embedded resource URL.
            </summary>
      <param name="type">The type belonging to an assembly containing embedded resource.</param>
      <param name="resourcePath">The resource path.</param>
      <returns>A string with url to embedded resource</returns>
      <remarks>This method is a workaround for getting embedded resource URLs in MVC</remarks>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResources.RequiredClientResourceList">
      <summary>
            Exposed for unit test reasons
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResources.ClientResourceService">
      <summary>
            Exposed for unit test reasons
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.Render(EPiServer.Framework.Web.Resources.ClientResource)">
      <summary>
            Renders a html tag for the specific resource
            </summary>
      <param name="resource">The resource to render.</param>
      <returns>A script html tag or css html tag</returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RenderResources(System.String)">
      <summary>
            Renders client resources with specified name.
            </summary>
      <param name="name">The name of the client resources.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RenderResources(System.String,EPiServer.Framework.Web.Resources.ClientResourceType[])">
      <summary>
            Renders client resources with specified name and type.
            </summary>
      <param name="name">The name of the client resources.</param>
      <param name="resourceTypes">Only render resources for these types.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RenderRequiredResources(System.String)">
      <summary>
            Renders the required client resources for specified area.
            </summary>
      <param name="renderingArea">The rendering area.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.Require(System.String)">
      <summary>
            Requires the client resource with specified name.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireScript(System.String)">
      <summary>
            Requires the JavaScript resource with specified path.
            </summary>
      <param name="scriptPath">The script resource virtual path path or URL.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireScript(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Requires the JavaScript resource with specified path.
            </summary>
      <param name="scriptPath">The script resource virtual path path or URL.</param>
      <param name="name">The client resource name.</param>
      <param name="dependencies">The names of other client resources that this script depends on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireScriptInline(System.String)">
      <summary>
            Requires the inline JavaScript.
            </summary>
      <param name="scriptContent">Inline script content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireScriptInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Requires the inline JavaScript.
            </summary>
      <param name="scriptContent">Inline script content.</param>
      <param name="name">The client resource name.</param>
      <param name="dependencies">The names of other client resources that this script depends on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireStyle(System.String)">
      <summary>
            Requires the CSS resource with specified path.
            </summary>
      <param name="cssPath">The CSS resource virtual path path or URL.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireStyle(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Requires the CSS resource with specified path.
            </summary>
      <param name="cssPath">The CSS resource virtual path path or URL.</param>
      <param name="name">The client resource name.</param>
      <param name="dependencies">The names of other client resources that this CSS resource depends on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireStyleInline(System.String)">
      <summary>
            Requires the inline CSS block.
            </summary>
      <param name="cssContent">CSS content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireStyleInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Requires the inline CSS block.
            </summary>
      <param name="cssContent">CSS content.</param>
      <param name="name">The client resource name.</param>
      <param name="dependencies">The names of other client resources that this CSS resource depends on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireHtmlInline(System.String)">
      <summary>
            Requires the inline HTML injection.
            </summary>
      <param name="inlineContent">Inline injection content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.RequireHtmlInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Requires the inline HTML injection.
            </summary>
      <param name="inlineContent">Inline injection content.</param>
            /// <param name="name">The client resource name.</param><param name="dependencies">The names of other client resources that this resource depends on.</param><returns></returns></member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.Require(System.String,System.String,System.String,EPiServer.Framework.Web.Resources.ClientResourceType,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
      <summary>
            Requires the client resource with specified properties.
            </summary>
      <param name="path">The client resource virtual path path or URL.</param>
      <param name="inlineContent">Content of the inline client resource that does not reference any path.</param>
      <param name="name">The client resource name.</param>
      <param name="resourceType">The client resource type.</param>
      <param name="dependencies">The names of other client resources that this resource depends on.</param>
      <param name="sortIndex">Sort index for this client resource within the group with the same name.</param>
      <param name="isMinified">Indicates whether the content of the client resource is minified.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResources.Require(EPiServer.Framework.Web.Resources.ClientResource)">
      <summary>
            Requires the specified client resource.
            </summary>
      <param name="clientResource">The client resource.</param>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.IClientResourceRegister">
      <summary>
            Defines methods to register required client resources for current context.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IClientResourceRegister.RegisterResources(EPiServer.Framework.Web.Resources.IRequiredClientResourceList,System.Web.HttpContextBase)">
      <summary>
            Registers the required client resources for specified context.
            </summary>
      <param name="requiredResources">The list of required client resources.</param>
      <param name="context">The HTTP context.</param>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.Internal.DebugJavascriptHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.Internal.ClientResourceService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Performs the registrations of required client resources by calling available <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceRegistrator" /> instances.
            Provides the list of required client resources combined in bundles.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.ClientResourceService.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Framework.Web.Resources.IClientResourceProvider},System.Collections.Generic.IEnumerable{EPiServer.Framework.Web.Resources.IClientResourceRegistrator},EPiServer.Framework.Web.Resources.IRequiredClientResourceList,EPiServer.Framework.Web.Resources.ClientResourceOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.Internal.ClientResourceService" /> class.
            </summary>
      <param name="clientResourceProviders">The client resource providers.</param>
      <param name="clientResourceRegisters">The client resource registers.</param>
      <param name="requiredResources">The list of required client resources.</param>
      <param name="options">The client resource options.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.Internal.ClientResourceService.ClientResourceRegisters">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.Internal.ClientResourceService.RequiredClientResourceList">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.ClientResourceService.GetClientResources(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.ClientResourceService.GetClientResources(System.String,EPiServer.Framework.Web.Resources.ClientResourceType[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.ClientResourceService.GetRequiredResources(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Client resource manager implementation
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.Require(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.RequireScript(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.RequireScript(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.RequireScriptInline(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.RequireScriptInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.RequireStyle(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.RequireStyle(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.RequireStyleInline(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.RequireStyleInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.RequireHtmlInline(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.RequireHtmlInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.Require(System.String,System.String,System.String,EPiServer.Framework.Web.Resources.ClientResourceType,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.Require(EPiServer.Framework.Web.Resources.ClientResource)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.GetRequiredResourcesSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.Internal.RequiredClientResourceList.GetClientResources">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the dynamically requested client resources.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResource">
      <summary>
            Client resource definition
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResource" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResource.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResource" /> class.
            </summary>
      <param name="path">The path to the resource.</param>
      <param name="name">The client resource name.</param>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResource.ResourceType">
      <summary>
            Gets or sets the type of the client resource.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResource.Path">
      <summary>
            Gets or sets the path to the resource.
            </summary>
      <remarks>
            The path of style and JavaScript resource can have following values:
            <list type="bullet"><item><description>Virtual path to resource file that is available on the site. For example: /modules/ModuleName/Script.js</description></item><item><description>Well-formed URL to the external resource. For example: http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.min.js </description></item></list></remarks>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResource.Name">
      <summary>
            Gets or sets the client resource name.
            </summary>
      <remarks>
            The name is used to reference client resource when registering required resources and defining dependencies.
            Several client resources can use the same name, if they need to be grouped.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResource.SortIndex">
      <summary>
            Gets or sets the sort index, use this if you have dependencies between resources with the same name.
            </summary>
      <remarks>
            Default value is 0.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResource.IsMinified">
      <summary>
            Gets or sets a value indicating whether this resource content is already minified.
            </summary>
      <value>
        <c>true</c> if this resource content is minified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResource.Dependencies">
      <summary>
            Gets or sets the names of other client resources that current resource depends on.
            </summary>
      <value>
            The dependencies.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResource.InlineContent">
      <summary>
            Gets or sets the inline content.
            </summary>
      <remarks>
            Inline content is igroned if client resource has not empty path.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResource.IsStatic">
      <summary>
            Gets a value indicating whether property Path is not empty and the client resource references virtual file or URL.
            </summary>
      <value>
        <c>true</c> if this client resource references virtual file or URL; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResource.IsExternal">
      <summary>
            Gets a value indicating whether this instance references external client resource and Path property contains well-formed URL.
            </summary>
      <value>
        <c>true</c> if this client resource is external; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResource.Equals(EPiServer.Framework.Web.Resources.ClientResource)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResource.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResource.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResourceComparer">
      <summary>
            Client resource comparer that is used to order client resources to guess the best resource loading sequence in the browser. 
            Usually is used for initial simple sorting before sorting by dependencies.
            </summary>
      <remarks>
            The following order of client resources on the page is considered as "the best" sequence when resources can be loaded by browser in parallel:
            <list type="number"><item><description>Static CSS references.</description></item><item><description>Inline CSS blocks.</description></item><item><description>Inline HTML injections.</description></item><item><description>Static JavaScript references.</description></item><item><description>Inline JavaScipt blocks.</description></item></list>
            Sort index and the number of dependencies are considered only if it is not possible to decide which of resources is greater by type and referenced path.
            Resource is considered as greater than other if its sort index is greater of sort index of other resource with the same name or if resource has more dependencies than other resource.
            Resulting order ofthe client resources should be refined basing on dependencies, indexes and possibilities to create bundles.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResourceComparer.Default">
      <summary>
            Gets the default client resource comparer.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceComparer.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResourceComparer" /> class from being created.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceComparer.Compare(EPiServer.Framework.Web.Resources.ClientResource,EPiServer.Framework.Web.Resources.ClientResource)">
      <summary>
            Compares two client resources and returns a value indicating whether one should be rendered before the other.
            </summary>
      <param name="x">The first client resource to compare.</param>
      <param name="y">The second client resource to compare.</param>
      <returns>
            Value
            Condition
            Less than zero
            <paramref name="x" /> is less than <paramref name="y" />.
            Zero
            <paramref name="x" /> equals <paramref name="y" />.
            Greater than zero
            <paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResourceOptions">
      <summary>
            Specifies options for how client resources should be handled
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResourceOptions.Debug">
      <summary>
            Make sure debug versions of included scripts are used instead of compressed/optimized versions
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResourceOptions.Compress">
      <summary>
            Controls if compression is applied to the rest stores.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResourceProviderAttribute">
      <summary>
            Attribute used to mark client resources provider implementations.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceProviderAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResourceProviderAttribute" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResourceProviderAttribute.Lifecycle">
      <summary>
            Gets <see cref="F:EPiServer.ServiceLocation.ServiceInstanceScope.Singleton" />.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResourceRegistratorAttribute">
      <summary>
            Attribute is used to mark <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceRegistrator" /> implementations 
            that should be discovered automatically by service locator.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceRegistratorAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResourceRegistratorAttribute" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResourceRegistratorAttribute.Lifecycle">
      <summary>
            Gets the scope of instances of the attributed register class; one instance is reused in scope of the one HTTP context.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResourceServiceExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceService" /></summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceServiceExtensions.RegisterRequiredResources(EPiServer.Framework.Web.Resources.IClientResourceService)">
      <summary>
            Performs the registration of the required client resources.
            </summary>
      <param name="service">The extended client resource service</param>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResourceSettings">
      <summary>
            Required client resource settings
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResourceSettings.Name">
      <summary>
            Gets or sets the name of required client resource.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResourceSettings.Area">
      <summary>
            Gets or sets the area where required client resource should be rendered.
            </summary>
      <value>
            The rendering area.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Web.Resources.ClientResourceSettings.ResourceTypes">
      <summary>
            Gets or sets the required client resource types.
            </summary>
      <value>
            The resource types.
            </value>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Resources.ClientResourceSettings" /> class. Sets the rendering area to Head.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.AtArea(System.String)">
      <summary>
            Requires to place client resource at specified rendering area.
            </summary>
      <param name="renderingArea">The rendering area.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.AtHeader">
      <summary>
            Requires to place client resource at default rendering area Header.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.AtFooter">
      <summary>
            Requires to place client resource at default rendering area Footer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.OfTypes(System.Collections.Generic.IEnumerable{EPiServer.Framework.Web.Resources.ClientResourceType})">
      <summary>
            Requires client resources of specified types.
            Does not change settings if specified type list are null or empty colection.
            </summary>
      <param name="requiredTypes">The required types of the client resources.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.ScriptsOnly">
      <summary>
            Requires script resources only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.StylesOnly">
      <summary>
            Requires CSS resources only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.Equals(EPiServer.Framework.Web.Resources.ClientResourceSettings)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.ClientResourceSettings.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.ClientResourceType">
      <summary>
            Defines different types of resources
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.Resources.ClientResourceType.Script">
      <summary>
            JavaScript file or inline script block
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.Resources.ClientResourceType.Style">
      <summary>
            CSS file or inline style block
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.Resources.ClientResourceType.Html">
      <summary>
            Inline HTML block that should be injected on the page
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.IClientResourceProvider">
      <summary>
            Classes implementing this interface are used to provide client resources to the 
            site
            </summary>
      <remarks>
            Besides implementing the resource provider interface providers must also be exported
            for usage by the composition container. This is typically done by the class' 
            assembly beeing configured in web.config.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IClientResourceProvider.GetClientResources">
      <summary>
            This method is called when the client resources are collected
            </summary>
      <returns>A list of <see cref="T:EPiServer.Framework.Web.Resources.ClientResource" />s that this provider exposes.</returns>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.IClientResourceRegistrator">
      <summary>
            Defines methods to register required client resources for current context.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IClientResourceRegistrator.RegisterResources(EPiServer.Framework.Web.Resources.IRequiredClientResourceList)">
      <summary>
            Registers the required client resources
            </summary>
      <param name="requiredResources">The list of required client resources.</param>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.IClientResourceService">
      <summary>
            Provides methods to perform registration of required client resources and get registered resources.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IClientResourceService.GetRequiredResources(System.String)">
      <summary>
            Gets the required client resources for specified rendering area.
            </summary>
      <param name="renderingArea">The rendering area.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IClientResourceService.GetClientResources(System.String)">
      <summary>
            Gets all <see cref="T:EPiServer.Framework.Web.Resources.ClientResource" /> from all <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceProvider" /> in the system 
            and dynamically requested resources.
            </summary>
      <param name="name">Client resources name.</param>
      <returns>
            All available resources with specified name
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IClientResourceService.GetClientResources(System.String,EPiServer.Framework.Web.Resources.ClientResourceType[])">
      <summary>
            Gets all <see cref="T:EPiServer.Framework.Web.Resources.ClientResource" /> from all <see cref="T:EPiServer.Framework.Web.Resources.IClientResourceProvider" /> in the system
            and dynamically requested resources.
            </summary>
      <param name="name">Client resources name.</param>
      <param name="resourceTypes">Only get resources for these types.</param>
      <returns>
            All available resources with specified name
            </returns>
    </member>
    <member name="T:EPiServer.Framework.Web.Resources.IRequiredClientResourceList">
      <summary>
            Provides methods to register required client resource and get information about registered items.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.Require(System.String)">
      <summary>
            Requires the client resource with specified name.
            </summary>
      <param name="clientResourceName">Name of the client resource.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireScript(System.String)">
      <summary>
            Requires the JavaScript resource with specified path.
            </summary>
      <param name="scriptPath">The script resource virtual path path or URL.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireScript(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Requires the JavaScript resource with specified path.
            </summary>
      <param name="scriptPath">The script resource virtual path path or URL.</param>
      <param name="name">The client resource name.</param>
      <param name="dependencies">The names of other client resources that this script depends on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireScriptInline(System.String)">
      <summary>
            Requires the inline JavaScript.
            </summary>
      <param name="scriptContent">Inline script content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireScriptInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Requires the inline JavaScript.
            </summary>
      <param name="scriptContent">Inline script content.</param>
      <param name="name">The client resource name.</param>
      <param name="dependencies">The names of other client resources that this script depends on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireStyle(System.String)">
      <summary>
            Requires the CSS resource with specified path.
            </summary>
      <param name="cssPath">The CSS resource virtual path path or URL.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireStyle(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Requires the CSS resource with specified path.
            </summary>
      <param name="cssPath">The CSS resource virtual path path or URL.</param>
      <param name="name">The client resource name.</param>
      <param name="dependencies">The names of other client resources that this CSS resource depends on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireStyleInline(System.String)">
      <summary>
            Requires the inline CSS block.
            </summary>
      <param name="cssContent">CSS content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireStyleInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Requires the inline CSS block.
            </summary>
      <param name="cssContent">CSS content.</param>
      <param name="name">The client resource name.</param>
      <param name="dependencies">The names of other client resources that this CSS resource depends on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireHtmlInline(System.String)">
      <summary>
            Requires the inline HTML injection.
            </summary>
      <param name="inlineContent">Inline injection content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.RequireHtmlInline(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Requires the inline HTML injection.
            </summary>
      <param name="inlineContent">Inline injection content.</param>
      <param name="name">The client resource name.</param>
      <param name="dependencies">The names of other client resources that this resource depends on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.Require(System.String,System.String,System.String,EPiServer.Framework.Web.Resources.ClientResourceType,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
      <summary>
            Requires the client resource with specified properties.
            </summary>
      <param name="path">The client resource virtual path path or URL.</param>
      <param name="inlineContent">Content of the inline client resource that does not reference any path.</param>
      <param name="name">The client resource name.</param>
      <param name="resourceType">The client resource type.</param>
      <param name="dependencies">The names of other client resources that this resource depends on.</param>
      <param name="sortIndex">Sort index for this client resource within the group with the same name.</param>
      <param name="isMinified">Indicates whether the content of the client resource is minified.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.Require(EPiServer.Framework.Web.Resources.ClientResource)">
      <summary>
            Requires the specified client resource.
            </summary>
      <param name="clientResource">The client resource.</param>
    </member>
    <member name="M:EPiServer.Framework.Web.Resources.IRequiredClientResourceList.GetRequiredResourcesSettings">
      <summary>
            Gets registered required client resources.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Framework.Web.AspNetAntiForgery">
      <summary>
            Integrates the cross-site request forgery prevention with ASP.NET
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.#ctor(System.Web.UI.Page)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.AspNetAntiForgery" /> class.
            </summary>
      <param name="page">The page.</param>
    </member>
    <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.#ctor(System.Web.HttpRequestBase,System.Web.HttpResponseBase)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.AspNetAntiForgery" /> class.
            </summary>
      <param name="request">The request object.</param>
      <param name="response">The response object.</param>
    </member>
    <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.#ctor(System.Web.HttpRequestBase,System.Web.HttpResponseBase,EPiServer.Framework.Web.AspNetAntiForgeryOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.AspNetAntiForgery" /> class.
            </summary>
      <param name="request">The request object.</param>
      <param name="response">The response object.</param>
      <param name="antiForgeryOptions">The anti-forgery options.</param>
    </member>
    <member name="P:EPiServer.Framework.Web.AspNetAntiForgery.CookieName">
      <summary>
            Gets the name of the anti-forgery cookie.
            </summary>
      <value>
            The name of the token.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Web.AspNetAntiForgery.FieldName">
      <summary>
            Gets the name of the form field where to store the XSRF validation data.
            </summary>
      <value>
            The name of the field.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Web.AspNetAntiForgery.HeaderName">
      <summary>
            Gets the name of the header where to store the XSRF validation data.
            </summary>
      <value>
            The name of the header.
            </value>
    </member>
    <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.CreateValidationToken">
      <summary>
            Gets the validation token from the cookie, or creates a new if the cookie does not exist.
            </summary>
      <returns>The validation token.</returns>
    </member>
    <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.CreateNewValidationToken">
      <summary>
            Creates a new validation token and sets it to the cookie, overriding the existing value.
            </summary>
      <returns>The validation token.</returns>
    </member>
    <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.CreateValidationField(System.Web.UI.ClientScriptManager)">
      <summary>
            Adds the hidden anti-forgery field to a Web Forms page.
            </summary>
      <param name="scriptManager">The script manager for the current page.</param>
    </member>
    <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.RemoveCookie">
      <summary>
            Removes the anti-forgery cookie.
            </summary>
      <remarks>
            Call this on login/logout to ensure we have a new session.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.ValidateField">
      <summary>
            Validates the current request by checking that the hidden field can be validated with the cookie data.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.ValidateOrigin">
      <summary>
            Checking the current request for same origin.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.AspNetAntiForgery.ValidateToken(System.String)">
      <summary>
            Validates the string representation of the token against the anti-forgery cookie.
            </summary>
      <param name="token">The validation data.</param>
      <remarks>
            This is primarily used in a non-WebForms scenario. For Web Forms you should call ValidateField instead.
            </remarks>
    </member>
    <member name="T:EPiServer.Framework.Web.SameSiteType">
      <summary>
            Defines SameSite attribute values.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.SameSiteType.None">
      <summary>
            The cookie will be sent with all request. Requires SSL.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.SameSiteType.Lax">
      <summary>
            The cookie can be sent with cross-site GET requests which cause top level navigation.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.SameSiteType.Strict">
      <summary>
            The cookie will not be sent in cross-site browsing context.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Web.HttpCookieSameSiteExtensions">
      <summary>
            Extension methods to support working with <see cref="T:EPiServer.Framework.Web.SameSiteType" /> on <see cref="T:System.Web.HttpCookie" /></summary>
    </member>
    <member name="M:EPiServer.Framework.Web.HttpCookieSameSiteExtensions.SetSameSiteType(System.Web.HttpCookie,EPiServer.Framework.Web.SameSiteType)">
      <summary>
            Assign "SameSite" property if it exists (.NET 4.7.2+) or fallback to append policy to "Path" property
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.HttpCookieSameSiteExtensions.GetSameSiteType(System.Web.HttpCookie)">
      <summary>
            Get "SameSite" property if it exists (.NET 4.7.2+) or fallback to get policy from "Path" property
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Web.AspNetAntiForgeryOptions">
      <summary>
            Contains options for anti forgery.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.AspNetAntiForgeryOptions.EnableSameOriginCheck">
      <summary>
            Determines whether <see cref="T:EPiServer.Framework.Web.AspNetAntiForgery" /> should check request for same origin or not.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.AspNetAntiForgeryOptions.SameSiteAttributeValue">
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Web.AspNetAntiForgeryOptions.CookieSameSiteType">
      <summary>
            Indicate if the value of the SameSite property of the cookie should be assigned.
            </summary>
      <remarks>
        <c>null</c> indicates the "sameSite" attribute in web.config is being used.</remarks>
    </member>
    <member name="P:EPiServer.Framework.Web.AspNetAntiForgeryOptions.CookieRequireSSL">
      <summary>
            Indicate the value of the Secure property of the cookie should be assigned.
            </summary>
      <remarks>
        <c>null</c> indicates the "requireSSL" attribute in web.config is being used.</remarks>
    </member>
    <member name="T:EPiServer.Framework.Web.Internal.AsyncTransmitContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. It contians async data for transmitting of files
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Web.Internal.ByteRange">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model class for <see cref="T:EPiServer.Framework.Web.Internal.ByteRangeRequest" /> implemementing RFC2616 (14.35.1 Byte Ranges)
            </summary>
      <remarks>
            Supports wildcarding both start and stop range. If the start range is NULL it means we should treat end range as "last X bytes".
            If the end range is NULL we should take all content from the start position and forward.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Internal.ByteRange.#ctor(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create a new byte range
            </summary>
      <param name="contentLength">The total length of the content</param>
      <param name="rangeStart">Range start</param>
      <param name="rangeEnd">Range end</param>
      <exception cref="T:System.ArgumentException">Thrown when input parameters are not valid</exception>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Web.Internal.ByteRangeRequest">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class implementing RFC2616 14.35.1 Byte Ranges
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Internal.ByteRangeRequest.ProcessRangeRequest(System.Web.HttpContextBase,System.Action{System.Web.HttpContextBase,EPiServer.Framework.Web.Internal.ByteRange})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes a range request
            </summary>
      <param name="context">The context</param>
      <param name="transmitBitsFunction">A method that can transmit the byte ranges</param>
      <returns>
            From RFC2616: If a syntactically valid byte-range-set includes at least one byte-range-spec whose first-byte-pos is less than the current length of
            the entity-body, or at least one suffix-byte-range-spec with a non-zero suffix-length, then the byte-range-set is satisfiable.
            Otherwise, the byte-range-set is unsatisfiable. If the byte-range-set is unsatisfiable, the server SHOULD return a response with a status
            of 416 (Requested range not satisfiable). Otherwise, the server SHOULD return a response with a status of 206 (Partial Content)
            containing the satisfiable ranges of the entity-body.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Internal.ByteRangeRequest.IsRangeRequest(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks the header "Range" or query string "range_start" so see if this is a range request
            </summary>
      <param name="context">The context</param>
      <returns>True if this is a range request</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Web.Internal.ByteRangeRequest.CreateRangeRequest(System.Web.HttpContextBase,System.Int64)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Try create a range request of the current context
            </summary>
      <param name="context">The context</param>
      <param name="contentLength">The content lenght</param>
      <exception cref="T:System.ArgumentException">Thrown when method is called and request is not a range request</exception>
      <returns>True if the operation succeeded</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Web.Internal.TransmitBufferHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions">
      <summary>
            Client resource rendering extensions
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions.ClientResources(System.Web.UI.Page,System.String)">
      <summary>
            Renders client resources with specified name.
            </summary>
      <param name="page">The page to hook the extension on.</param>
      <param name="name">Only get resources with this name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions.ClientResources(System.Web.UI.Page,System.String,EPiServer.Framework.Web.Resources.ClientResourceType[])">
      <summary>
            Renders client resources with specified name and type.
            </summary>
      <param name="page">The page to hook the extension on.</param>
      <param name="name">Only get resources with this name.</param>
      <param name="resourceTypes">Only get resources for these types.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions.RequiredClientResources(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
            Renders required client resources for specified area.
            </summary>
      <param name="html">The HTML helper.</param>
      <param name="renderingArea">The rendering area name to render required client resources for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions.ScriptResource(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
            Returns a script tag.
            </summary>
      <param name="html">The html helper to hook the helper on.</param>
      <param name="sourcePath">The path to the script resource.</param>
      <returns>A script html tag.</returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.Html.ClientResourceExtensions.CssLink(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
            Returns a CSS link tag.
            </summary>
      <param name="html">The html helper to hook the helper on.</param>
      <param name="virtualPath">The path to the css resource.</param>
      <returns>A link html tag.</returns>
    </member>
    <member name="T:EPiServer.Framework.Web.Mvc.Html.MetaExtensions">
      <summary>
            Meta tag rendering extensions
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.Html.MetaExtensions.RenderMeta(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Renders the metadata tag.
            </summary>
      <param name="metaAttributes">The metadata tag attributes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.Html.MetaExtensions.RenderMeta(System.Object)">
      <summary>
            Renders the metadata tag.
            </summary>
      <param name="metaAttributes">The metadata tag attributes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.Html.MetaExtensions.RenderMeta(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Renders the metadata tag.
            </summary>
      <param name="name">The name attribute value.</param>
      <param name="contentAttributeValues">The content attribute values.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.Html.MetaExtensions.RenderMeta(System.String,System.Object)">
      <summary>
            Renders the metadata tag.
            </summary>
      <param name="name">The name attribute value.</param>
      <param name="contentAttributeValues">The content attribute values.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Framework.Web.Mvc.RequireClientResourcesAttribute">
      <summary>
            Action filter to require client resources
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.RequireClientResourcesAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Web.Mvc.RequireClientResourcesAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Web.Mvc.RequireClientResourcesAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>
            Called by the ASP.NET MVC framework before the action result executes.
            All client resource registers will be called to register resources that are required for the current context.
            </summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:EPiServer.Framework.Web.TemplateTypeCategories">
      <summary>
            The different types of render template types supported.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.None">
      <summary>
            Indicates that the template type is unknown.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.WebFormsPage">
      <summary>
            Indicates that the template type is a WebForms page.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.UserControl">
      <summary>
            Indicates that the template type is a WebForms user control.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.ServerControl">
      <summary>
            Indicates that the template type is a server control, e.g. a WebControl or HtmlControl.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.MvcController">
      <summary>
            Indicates that the template type is a MVC Controller.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.MvcView">
      <summary>
            Indicates that the template type is a MVC View.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.MvcPartialController">
      <summary>
            Indicates that the template type is a partial MVC Controller.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.MvcPartialView">
      <summary>
            Indicates that the template type is a partial MVC View.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.HttpHandler">
      <summary>
            Indicates that the template type is a raw HTTP Handler (<see cref="T:System.Web.IHttpHandler" />)
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.WebForms">
      <summary>
            Indicates that the template type is using WebForms.
            This value can only be used for comparison.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.WebFormsPartial">
      <summary>
            Indicates that the template type is a WebForms partial control (User or ServerControl).
            This value can only be used for comparison.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.MvcPartial">
      <summary>
            Indicates that the template type is a partial MVC Controller or View.
            This value can only be used for comparison.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.Mvc">
      <summary>
            Indicates that the template type is a MVC Controller or View.
            This value can only be used for comparison.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.Page">
      <summary>
            Indicates that the template type can be applied on the top page level, 
            i.e. that it is either WebFormsPage or MVC Controller or HttpHandler.
            This value can only be used for comparison.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.TemplateTypeCategories.Request">
      <summary>
            Category describing templates that are used to resond to a http request.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Web.WebControls.RequiredClientResources">
      <summary>
            Renders client resources that are required for specified area.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Web.WebControls.RequiredClientResources.RenderingArea">
      <summary>
            Gets or sets the corresponding rendering area that is used to filter required client resources that should be rendered by this control.
            </summary>
      <value>
            The area.
            </value>
    </member>
    <member name="M:EPiServer.Framework.Web.WebControls.RequiredClientResources.RenderControl(System.Web.UI.HtmlTextWriter)">
      <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter" /> object and stores tracing information about the control if tracing is enabled.
            </summary>
      <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
    </member>
    <member name="M:EPiServer.Framework.Web.WebControls.RequiredClientResources.OnInit(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:EPiServer.Framework.Web.WebControls.RequiredClientResources.SaveControlState">
      <summary>
            Saves any server control state changes, such as RenderingArea, that have occurred since the time the page was posted back to the server.
            </summary>
      <returns>
            Returns the server control's current state. If there is no state associated with the control, this method returns null.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Web.WebControls.RequiredClientResources.LoadControlState(System.Object)">
      <summary>
            Restores control-state information, such as RenderingArea, from a previous page request that was saved by the <see cref="M:System.Web.UI.Control.SaveControlState" /> method.
            </summary>
      <param name="savedState">An <see cref="T:System.Object" /> that represents the control state to be restored.</param>
    </member>
    <member name="T:EPiServer.Framework.Web.RenderingTags">
      <summary>
            Default rendering tags used for public pages.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.RenderingTags.Preview">
      <summary>
            Preview of something, such as a draft of a document
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.RenderingTags.Edit">
      <summary>
            Edit of something, such as a draft of a document
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.RenderingTags.Header">
      <summary>
            The header of a document, usually withing the head tags
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.RenderingTags.Footer">
      <summary>
            Bottom area, usually before closing body tag
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.RenderingTags.Article">
      <summary>
            The actual content, or article on a page
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.RenderingTags.Sidebar">
      <summary>
            List of non-vital content or blocks thay may or may not be related to the main article
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.RenderingTags.Mobile">
      <summary>
            Optimized for mobile devices
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Web.RenderingTags.Empty">
      <summary>
            Support for displaying an item that doesn't have a value.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.AsyncResult">
      <summary>
            Dummy async result which uses in the noop processing, It uses internally 
            </summary>
    </member>
    <member name="M:EPiServer.Framework.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
      <summary>
            Create and keep yje callback and extra data from async caller
            </summary>
      <param name="cb">
      </param>
      <param name="extraData">
      </param>
    </member>
    <member name="P:EPiServer.Framework.AsyncResult.AsyncState">
      <summary>
            The AsyncData
            </summary>
    </member>
    <member name="P:EPiServer.Framework.AsyncResult.CompletedSynchronously">
      <summary>
            Indicate if the operation does Synchronously
            </summary>
    </member>
    <member name="P:EPiServer.Framework.AsyncResult.IsCompleted">
      <summary>
            Indicate if it is competed or nott
            </summary>
    </member>
    <member name="M:EPiServer.Framework.AsyncResult.SetCompleted">
      <summary>
            Calls callback and sets it has been completed
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Cache.HttpRuntimeCache">
      <summary>
            Default implementation of IObjectInstanceCache.
            </summary>
      <remarks>
            Uses HttpRuntime.Cache as the underlying cache mechanism.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.HttpRuntimeCache" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.Insert(System.String,System.Object,EPiServer.Framework.Cache.CacheEvictionPolicy)">
      <summary>
            Inserts the value into the cache with the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value to cache.</param>
      <param name="evictionPolicy">The cache eviction policy.</param>
      <remarks>
            The evicitionPolicy can be null. In that case the item may stay in the cache for an undetermined time.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.Remove(System.String)">
      <summary>
            Removes the specified object.
            </summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.Get(System.String)">
      <summary>
            Gets the specified object.
            </summary>
      <param name="key">The key.</param>
      <returns>
            The object associated with the key, if it exists. Otherwise returns null.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Cache.HttpRuntimeCache.Clear">
      <summary>
            Removes all entries from the cache.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Configuration.AppDataElement">
      <summary>
            Config element that indicates path for common application data.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.AssemblyElementCollection.ProbingPath">
      <summary>
            Gets a site root relative path to modules assemblies.
            Default value is 'modulesbin'.
            </summary>
      <remarks>This path should also be specified in configuration/runtime/assemblyBinding/probing section in privatePath attribute</remarks>.
        </member>
    <member name="T:EPiServer.Framework.Configuration.ClientResourcesElement">
      <summary>
            A configuration element for the client resources
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.ClientResourcesElement.Debug">
      <summary>
            Make sure debug versions of included scripts are used instead of compressed/optimized versions
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.ClientResourcesElement.Compress">
      <summary>
            Controls if compression is applied to the rest stores.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Configuration.ConfigurationSource">
      <summary>
            Exposes the global <see cref="T:EPiServer.Framework.Configuration.IConfigurationSource" /> and events to listen to changes.
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Framework.Configuration.ConfigurationSource.SourceChanged">
      <summary>
            Triggered when <see cref="P:EPiServer.Framework.Configuration.ConfigurationSource.Instance" /> is assigned a new value
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.ConfigurationSource.Instance">
      <summary>
            Global configuration source for EPiServer infrastructure
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Configuration.ConfigurationSourceExtensions">
      <summary>
      </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Configuration.EPiServerFrameworkSection">
      <summary>
            Class representing the episerver.framework configuration element
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.UpdateDatabaseSchema">
      <summary>
            Gets a value indicating whether the database schema should be updated automatically 
            from within the site.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.CreateDatabaseSchema">
      <summary>
            NOTE: This is a pre-release setting that is UNSTABLE and might not satisfy the compatibility requirements 
            as denoted by its associated normal version.
            Gets a value indicating whether the database schema should be created automatically 
            from within the site.
            </summary>
      <remarks>
            This feature is only intended for Developement environments and it is NOT supported in Production environments.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.LoggerFactoryType">
      <summary>
            Get and set value for logger factory type. If the LoggerFactoryType has value then it be used instead of scanning of logger factory type.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.ConfigurationInstance">
      <summary>
            Gets and sets the current configuration to use
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.VirtualPathMappings">
      <summary>
            Gets the virtual path mappings configuration.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.VirtualPathProviders">
      <summary>
            Gets the virtual path provider settings.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.ClientResources">
      <summary>
            Configures client resoruces such as enabling debug mode
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.EPiServerFrameworkSection.Instance">
      <summary>
            Gets the instance of the <see cref="T:EPiServer.Framework.Configuration.EPiServerFrameworkSection" /> section
            </summary>
      <remarks>Returns null if the section isn't found</remarks>
    </member>
    <member name="T:EPiServer.Framework.Configuration.EventElement">
      <summary>
            Element that hold configruation settings for events which is used for communication between sites in a load balanced scenario.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.EventElement.Providers">
      <summary>
            Gets the providers collection.
            </summary>
      <value>
            The providers.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Configuration.EventElement.DefaultProvider">
      <summary>
            Gets or sets the default provider to use.
            </summary>
      <value>
            The default provider.
            </value>
    </member>
    <member name="T:EPiServer.Framework.Configuration.RestartMode">
      <summary>
            Defines how the application should be restarted
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Framework.Configuration.RestartMode.None">
      <summary>
            Just saves configuration, restart might be triggered by the runtime depending on configuration source restart on external changes setting
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Configuration.RestartMode.ThisApplicationOnly">
      <summary>
            Force a restart by unloading the current appdomain
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Configuration.RestartMode.AllApplications">
      <summary>
            Touch configuration file/web.config to trigger a restart even though a configuration source is being used
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Configuration.GlobalConfigurationManager">
      <summary>
            Helper methods to load and save configuration files
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Configuration.GlobalConfigurationManager.Save(System.Configuration.Configuration,EPiServer.Framework.Configuration.RestartMode)">
      <summary>
            Save configuration to the file system based on the path of the application domain configuration file
            </summary>
      <param name="configuration">
      </param>
      <param name="restartMode">
      </param>
    </member>
    <member name="M:EPiServer.Framework.Configuration.GlobalConfigurationManager.Load">
      <summary>
            Load configuration file from the file system based on the application domain configuration file
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Framework.Configuration.IConfigurationSource">
      <summary>
            Reads configuration sections.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Configuration.IConfigurationSource.Get``1(System.String)">
      <summary>
            Reads the configuration by path
            </summary>
      <typeparam name="T">The type of the configuration</typeparam>
      <param name="path">The path to the configuration</param>
      <returns>The configuration or <c>null</c> if not found</returns>
    </member>
    <member name="T:EPiServer.Framework.Configuration.ConfigurationManagerSource">
      <summary>
            Reads configuration from <see cref="T:System.Configuration.ConfigurationManager" />.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Configuration.FileConfigurationSource">
      <summary>
            Load a writable configuration from the configuration file specified by the current <see cref="T:System.AppDomain" />.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Configuration.FileConfigurationSource.ConfigurationInstance">
      <summary>
            Backing configuration instance
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Configuration.LicensingElement">
      <summary>
            Configuration for licensing
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.LicensingElement.LicenseFilePath">
      <summary>
            The full path to the license file
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Configuration.LocalizationElement">
      <summary>
            A configuration element within the EPiServer Framework section of web.config.
            </summary>
      <example>
        <code source="../CodeSamples/Localization/LocalizationElementConfigurationSample.xml" region="config" lang="xml" />
      </example>
    </member>
    <member name="P:EPiServer.Framework.Configuration.LocalizationElement.FallbackBehavior">
      <summary>
            Gets or sets a value describing the fallback behavior of the <see cref="T:EPiServer.Framework.Localization.LocalizationService" />
            if the resource could not be found.
            </summary>
      <value>
            The fallback behavior enum value.
            </value>
      <example>
        <code source="../CodeSamples/Localization/LocalizationElementConfigurationSample.xml" region="config" lang="xml" />
      </example>
    </member>
    <member name="P:EPiServer.Framework.Configuration.LocalizationElement.FallbackCulture">
      <summary>
            Gets or sets a value describing what fallback culture the <see cref="T:EPiServer.Framework.Localization.LocalizationService" />
            should use if the resource could not be found.
            </summary>
      <value>
            The fallback culture identifier.
            </value>
      <example>
        <code source="../CodeSamples/Localization/LocalizationElementConfigurationSample.xml" region="config" lang="xml" />
      </example>
    </member>
    <member name="P:EPiServer.Framework.Configuration.LocalizationElement.Providers">
      <summary>
            Gets the localization providers that should be used by the <see cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService" /> to respond to resource requests.
            </summary>
      <example>
        <code source="../CodeSamples/Localization/LocalizationElementConfigurationSample.xml" region="config" lang="xml" />
      </example>
    </member>
    <member name="T:EPiServer.Framework.Configuration.StaticFileSection">
      <summary>
            Static file handler configuration.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.StaticFileSection.ExpirationTime">
      <summary>
            Gets the cache expiration time.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.StaticFileSection.CacheControl">
      <summary>
            Gets the cache control settings.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.StaticFileSection.EnableOutputCache">
      <summary>
            Gets a value indicating whether output cache should be enabled.
            </summary>
      <value>
        <c>true</c> if output cache is enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Configuration.StaticFileSection.CurrentStaticFileSection">
      <summary>
            Gets the current static file handler configuration.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Configuration.VirtualRolesElement">
      <summary>
            Configuration for virtual roles
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Configuration.VirtualRolesElement.FailSafeIsInRole">
      <summary>
            Gets or sets a value indicating whether IsInRole on VirtualRolePrincipal may throw an exception.
            </summary>
      <value>
        <c>true</c> if IsInRole is fail safe (cannot throw exception); otherwise, <c>false</c>.</value>
      <remarks>
            This setting can be useful to emulate the behavior of IsInRole as it worked in .NET Framework 1.0 / 1.1
            In these versions any exceptions thrown by code executing beneath IsInRole were caught and ignored. The IsInRole
            for a WindowsPrincipal in .NET 2.0 may throw an exception if a domain controller is unavailable - this may be
            undesired behavior since it could prevent the logon process, thus preventing any user from logging on. By setting
            this property to True you will cause any exceptions thrown by IsInRole to be caught and ignored. The IsInRole
            call will be interpreted as returning False on throw.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Configuration.VirtualRolesElement.ReplicationType">
      <summary>
            The type that will handle replication of changes in virtual roles
            </summary>
    </member>
    <member name="T:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute">
      <summary>
            Attribute that describes a template
            </summary>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.ModelType">
      <summary>
            Gets or sets the model type for the described template should be registered for.
            </summary>
      <remarks>
            This property is required if the template doesn't implement the IRenderTemplate&lt;TModel&gt; interface
            or if multiple descriptor attributes are added to the same template. 
            If the template does implement the IRenderTemplate&lt;TModel&gt; interface, this type must match or be a subclass of the 
            type passed to the interface. 
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Name">
      <summary>
            Gets or sets the name of the template.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.AvailableWithoutTag">
      <summary>
            Gets or sets a value indicating whether the renderer should be available even when no specific tag is requested.
            </summary>
      <remarks>
            Default value is true if no <see cref="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Tags" /> is specified else false.
            </remarks>
      <value>
        <c>true</c> if renderer is available without tag specified; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Tags">
      <summary>
            The tags that this renderer support.
            </summary>
      <remarks>Use <see cref="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.TagString" /> instead if your project is CLS-compliant.</remarks>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.TagString">
      <summary>
            Gets or sets the render tags as a comma-separated list.
            </summary>
      <value>The render tag.</value>
      <remarks>This can be used instead of <see cref="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Tags" /> if your project is CLS-compliant.</remarks>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Inherited">
      <summary>
            Gets or sets a value indicating whether model types derived from <see cref="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.ModelType" /> automatically will be able to use the render.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.TemplateTypeCategory">
      <summary>
            Gets or sets the template type of the renderer.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Path">
      <summary>
            Gets or sets the path to the render.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Default">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute" /> is default.
            </summary>
      <value>
        <c>true</c> if default; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.TemplateDescriptorAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.FileSystem.IDirectory">
      <summary>
            Provides methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.FileSystem.IFile">
      <summary>
            Provides methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects
            </summary>
    </member>
    <member name="T:EPiServer.Framework.FileSystem.IFileSystemWatcher">
      <summary>
            Interface representing System.IO.FileSystemWatcher
            </summary>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.NotifyFilter">
      <devdoc>
        <para>
                  Gets or sets the type of changes to watch for. 
               </para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.EnableRaisingEvents">
      <devdoc>
        <para>Gets or sets a value indicating whether the component is enabled.</para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.Filter">
      <devdoc>
        <para>Gets or sets the filter string, used to determine what files are monitored in a directory.</para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.IncludeSubdirectories">
      <devdoc>
        <para>
                  Gets or sets a
                  value indicating whether subdirectories within the specified path should be monitored.
               </para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.InternalBufferSize">
      <devdoc>
        <para>Gets or 
                  sets the size of the internal buffer.</para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.Path">
      <devdoc>
        <para>Gets or sets the path of the directory to watch.</para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.Site">
      <internalonly />
      <devdoc>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.IFileSystemWatcher.SynchronizingObject">
      <devdoc>
        <para>
                  Gets or sets the object used to marshal the event handler calls issued as a 
                  result of a directory change. 
               </para>
      </devdoc>
    </member>
    <member name="E:EPiServer.Framework.FileSystem.IFileSystemWatcher.Changed">
      <devdoc>
        <para>
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> 
                  is changed.
               </para>
      </devdoc>
    </member>
    <member name="E:EPiServer.Framework.FileSystem.IFileSystemWatcher.Created">
      <devdoc>
        <para> 
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> 
                  is created.
               </para>
      </devdoc>
    </member>
    <member name="E:EPiServer.Framework.FileSystem.IFileSystemWatcher.Deleted">
      <devdoc>
        <para> 
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" />
                  is deleted. 
               </para>
      </devdoc>
    </member>
    <member name="E:EPiServer.Framework.FileSystem.IFileSystemWatcher.Error">
      <devdoc>
        <para>
                  Occurs when the internal buffer overflows.
               </para>
      </devdoc>
    </member>
    <member name="E:EPiServer.Framework.FileSystem.IFileSystemWatcher.Renamed">
      <devdoc>
        <para>
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> 
                  is renamed.
               </para>
      </devdoc>
    </member>
    <member name="M:EPiServer.Framework.FileSystem.IFileSystemWatcher.BeginInit">
      <devdoc>
        <para>Notifies the object that initialization is beginning and tells it to standby.</para>
      </devdoc>
    </member>
    <member name="M:EPiServer.Framework.FileSystem.IFileSystemWatcher.EndInit">
      <devdoc>
        <para>
                  Notifies the object that initialization is complete.
               </para>
      </devdoc>
    </member>
    <member name="M:EPiServer.Framework.FileSystem.IFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
      <devdoc>
        <para>
                  A synchronous method that returns a structure that
                  contains specific information on the change that occurred, given the type
                  of change that you wish to monitor. 
               </para>
      </devdoc>
    </member>
    <member name="M:EPiServer.Framework.FileSystem.IFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <devdoc>
        <para>
                  A synchronous 
                  method that returns a structure that contains specific information on the change that occurred, given the
                  type of change that you wish to monitor and the time (in milliseconds) to wait before timing out. 
               </para>
      </devdoc>
    </member>
    <member name="T:EPiServer.Framework.FileSystem.PhysicalDirectory">
      <summary>
            Wrapper for the static class <see cref="T:System.IO.Directory" /></summary>
    </member>
    <member name="T:EPiServer.Framework.FileSystem.PhysicalFile">
      <summary>
            Wrapper for the static class <see cref="T:System.IO.File" /></summary>
    </member>
    <member name="T:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher">
      <summary>
            Wrapper around System.IO.FileSystemWatcher
            </summary>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.NotifyFilter">
      <devdoc>
        <para>
                  Gets or sets the type of changes to watch for. 
               </para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.EnableRaisingEvents">
      <devdoc>
        <para>Gets or sets a value indicating whether the component is enabled.</para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.Filter">
      <devdoc>
        <para>Gets or sets the filter string, used to determine what files are monitored in a directory.</para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.IncludeSubdirectories">
      <devdoc>
        <para>
                  Gets or sets a
                  value indicating whether subdirectories within the specified path should be monitored.
               </para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.InternalBufferSize">
      <devdoc>
        <para>Gets or 
                  sets the size of the internal buffer.</para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.Path">
      <devdoc>
        <para>Gets or sets the path of the directory to watch.</para>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.Site">
      <internalonly />
      <devdoc>
      </devdoc>
    </member>
    <member name="P:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.SynchronizingObject">
      <devdoc>
        <para>
                  Gets or sets the object used to marshal the event handler calls issued as a 
                  result of a directory change. 
               </para>
      </devdoc>
    </member>
    <member name="M:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.BeginInit">
      <devdoc>
        <para>Notifies the object that initialization is beginning and tells it to standby.</para>
      </devdoc>
    </member>
    <member name="M:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.EndInit">
      <devdoc>
        <para>
                  Notifies the object that initialization is complete.
               </para>
      </devdoc>
    </member>
    <member name="M:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
      <devdoc>
        <para>
                  A synchronous method that returns a structure that
                  contains specific information on the change that occurred, given the type
                  of change that you wish to monitor. 
               </para>
      </devdoc>
    </member>
    <member name="M:EPiServer.Framework.FileSystem.PhysicalFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <devdoc>
        <para>
                  A synchronous 
                  method that returns a structure that contains specific information on the change that occurred, given the
                  type of change that you wish to monitor and the time (in milliseconds) to wait before timing out. 
               </para>
      </devdoc>
    </member>
    <member name="T:EPiServer.Framework.FrameworkAspNetInitialization">
      <summary>
            When this module is initialized the EPiServer Framework ASP.NET runtime is initialized.
            Add a <see cref="T:EPiServer.Framework.ModuleDependencyAttribute" /> on any <see cref="T:EPiServer.Framework.IInitializableModule" />
            that should be run once this is completed.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.FrameworkAspNetInitialization.EPiServer#Framework#IInitializableModule#Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inherit-doc />
    </member>
    <member name="M:EPiServer.Framework.FrameworkAspNetInitialization.EPiServer#Framework#IInitializableModule#Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inherit-doc />
    </member>
    <member name="T:EPiServer.Framework.IInitializableHttpModule">
      <summary>
            Interface that you can implement to be part of the EPiServer Framework initialization chain with support for HTTP events.
            </summary>
      <remarks>
            You should set the attribute [InitializableModule] on the class implementing this interface, or if
            you want to control dependencies (making sure that other modules are initialized before your module gets called)
            use the attribute [ModuleDependency(typeof(ClassThatIDependOn), ...)].
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.IInitializableHttpModule.InitializeHttpEvents(System.Web.HttpApplication)">
      <summary>
            Initialize any events on <see c="System.Web.HttpApplication" /> instances created by ASP.NET
            </summary>
      <param name="application">The instance to initialize</param>
      <remarks>
        <para>This method may be called either after or before the Initialize-method so make sure you do not have any dependencies between these methods. The beaviour that is guaranteed
            is that your event handlers will not be called before the Initialize-method. If EPiServer is being initialized outside ASP.NET this method will never get called.</para>
        <para>When the ASP.NET runtime initializes it will create many instances of the <see c="System.Web.HttpApplication" /> class so make sure you only add
            logic to initialize events in this method, and not any one-time configuration which should be placed in the Initialize-method.</para>
        <para>Since a <see c="System.Web.HttpApplication" /> can be disposed at any time make sure you never store references to this class since that could create a memory leak.</para>
      </remarks>
    </member>
    <member name="T:EPiServer.Framework.Initialization.InitializationModule">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationModule.FrameworkInitialization(EPiServer.Framework.Initialization.HostType)">
      <summary>
            Called to initialize the application.
            </summary>
      <param name="hostType">The type of host for the application</param>
    </member>
    <member name="P:EPiServer.Framework.Initialization.InitializationModule.Engine">
      <summary>
            Exposed for (shady) unit test reasons
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Initialization.Internal.ApplicationDomainInitializer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes current application domain.
            </summary>
      <remarks>
            Since we have a subscription to the AppDomain.CurrentDomain.AssemblyResolve event this class will never be garbage collected.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.Internal.ApplicationDomainInitializer.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.Internal.ApplicationDomainInitializer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Initialization.Internal.ApplicationDomainInitializer.Instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A convenient accessor to the singleton instance.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.Internal.ApplicationDomainInitializer.#ctor(System.String,System.String,System.String,System.String[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.Internal.ApplicationDomainInitializer" /> class.
            </summary>
      <param name="relativeProbingPath">The relative probing path.</param>
      <param name="applicationBase">The application base path.</param>
      <param name="shadowCopyDirectories">The shadow copy directories.</param>
      <param name="runtimeProbingPaths">The runtime probing paths.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.Internal.ApplicationDomainInitializer.SetupAppDomain(EPiServer.Framework.Initialization.HostType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Setups the current app domain.
            Verifies probing path configuration in Framework and runtime.
            Adds Framework probing path to ShadowCopyDirectory of the current AppDomain
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.Internal.ApplicationDomainInitializer.PreApplicationStart">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This method should only be called by ASP.NET via the <see cref="T:System.Web.PreApplicationStartMethodAttribute" /> attribute defined in EPiServer.Framework
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Initialization.Internal.ClientResourceInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Client resource initializer to enable debug mode
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Initialization.Internal.VirtualRolesInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Localization.LocalizationServiceResourceProvider">
      <summary>
            Implements a resource provider for the <see cref="P:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.LocalizationService" /> system used in EPiServer.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.LocalizationServiceResourceProvider" /> class.
            </summary>
      <param name="classKey">The class key</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.#ctor(System.String,EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.LocalizationServiceResourceProvider" /> class.
            </summary>
      <param name="classKey">The class key.</param>
      <param name="localizationService">The localization service to use.</param>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.FallbackProvider">
      <summary>
            Get the default provider factory in case we do not have the localized resource ii our lang XML-files.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.GetObject(System.String,System.Globalization.CultureInfo)">
      <summary>
            Returns a resource object for the key and culture.
            </summary>
      <param name="resourceKey">The key identifying a particular resource.</param>
      <param name="culture">The culture identifying a localized value for the resource.</param>
      <returns>An Object that contains the resource value for the resourceKey and culture.</returns>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationServiceResourceProvider.ResourceReader">
      <summary>
            Gets an object to read resource values from a source. Not supported.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory">
      <summary>
            Provides ASP.NET Resource syntax to access localized EPiServer resources.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory.FallbackProviderFactory">
      <summary>
            Gets the fallback provider factory.
            </summary>
      <value>The fallback provider factory.</value>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory.CreateGlobalResourceProvider(System.String)">
      <summary>
            When overridden in a derived class, creates a global resource provider.
            </summary>
      <param name="classKey">The name of the resource class.</param>
      <returns>
            An <see cref="T:System.Web.Compilation.IResourceProvider" />.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationServiceResourceProviderFactory.CreateLocalResourceProvider(System.String)">
      <summary>
            When overridden in a derived class, creates a local resource provider.
            </summary>
      <param name="virtualPath">The path to a resource file.</param>
      <returns>
            An <see cref="T:System.Web.Compilation.IResourceProvider" />.
            </returns>
    </member>
    <member name="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider">
      <summary>
            Extends <see cref="T:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider" /> with functionality to load resource files.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.VirtualPathKey">
      <summary>
            The configKey that should be used if provider is to be used with a <see cref="T:System.Web.Hosting.VirtualPathProvider" /></summary>
    </member>
    <member name="F:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.PhysicalPathKey">
      <summary>
            The configKey that should be used if provider is to be used with a physical folder.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.FileSystemWatchPathKey">
      <summary>
            The configKey that should be used if provider should set up a FileSystemWatcher for a physical directory path.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.#ctor(System.Web.Hosting.VirtualPathProvider,EPiServer.Framework.FileSystem.IFileSystemWatcher,EPiServer.Web.Hosting.IHostingEnvironment)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider" /> class.
            </summary>
      <param name="virtualPathProvider">The virtual path provider.</param>
      <param name="fileSystemWatcher">The file system watcher to use</param>
      <param name="hostingEnvironment">The hosting environment.</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Reads the resource xml files from the location specified in config values.
            </summary>
      <remarks>
            If the resource files are served by a <see cref="T:System.Web.Hosting.VirtualPathProvider" /> then the config value must include key 'virtualPath'. 
            If the resource files are located in a physical folder then the config value must include key 'physicalPath'. 
            </remarks>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
      <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> on a provider after the provider has already been initialized.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A required configuration key was missing or faulty.</exception>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="T:EPiServer.Framework.Localization.XmlResources.VirtualPathXmlLocalizationProviderInitializer">
      <summary>
            Initializes a new <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider" /> using the given virtual path to locate xml files.
            </summary>
      <example>
        <para>Example of how a VirtualPathXmlLocalizationProviderInitializer can be used:</para>
        <code source="../CodeSamples/Localization/CustomLanguageProviderInitializationWithVirtualPath.cs" region="CustomLanguageProvider" lang="cs" />
      </example>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.VirtualPathXmlLocalizationProviderInitializer.#ctor(System.Web.Hosting.VirtualPathProvider)">
      <summary>
            Initializes a new instance of the VirtualPathXmlResourceProviderInitializer class.
            </summary>
      <param name="virtualPathProvider">The virtual path provider used when creating the <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider" /> to initialize.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="virtualPathProvider" /> is <c>null</c>.</exception>
      <example>
        <para>Example of how a VirtualPathXmlLocalizationProviderInitializer can be used:</para>
        <code source="../CodeSamples/Localization/CustomLanguageProviderInitializationWithVirtualPath.cs" region="CustomLanguageProvider" lang="cs" />
      </example>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.VirtualPathXmlLocalizationProviderInitializer.GetInitializedProvider(System.String,System.String)">
      <summary>
            Creates and initalizes a new <see cref="T:EPiServer.Framework.Localization.XmlResources.FileXmlLocalizationProvider" />.
            </summary>
      <param name="virtualPathToLangFolder">The virtual path to the folder where xml-lang files are located.</param>
      <param name="nameOfProvider">A name for the provider.</param>
      <returns>A new initialized provider.</returns>
      <exception cref="T:System.ArgumentNullException">If any parameter is <c>null</c>.</exception>
      <example>
        <para>Example of how a VirtualPathXmlLocalizationProviderInitializer can be used:</para>
        <code source="../CodeSamples/Localization/CustomLanguageProviderInitializationWithVirtualPath.cs" region="CustomLanguageProvider" lang="cs" />
      </example>
    </member>
    <member name="T:EPiServer.Framework.Localization.ProviderBasedLocalizationServiceExtensions">
      <summary>
            Provider based implementation of <see cref="T:EPiServer.Framework.Localization.LocalizationService" />. Uses <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" />s to load localized resources.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationServiceExtensions.InitializeProviders(EPiServer.Framework.Localization.ProviderBasedLocalizationService,System.Configuration.ProviderSettingsCollection)">
      <summary>
            Initializes a set of providers from the provided <see cref="T:System.Configuration.ProviderSettingsCollection" />.
            </summary>
      <param name="service">The service that is extended</param>
      <param name="settings">The <see cref="T:System.Configuration.ProviderSettingsCollection" /> to initialize the provider collection with.</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationServiceExtensions.CreateInstance(EPiServer.Framework.Localization.ProviderBasedLocalizationService,EPiServer.Framework.Localization.ResourceKeyHandler,EPiServer.Framework.Configuration.EPiServerFrameworkSection)">
      <summary>
            Creates a provider based localization service with providers from the given configuration.
            </summary>
      <param name="service">The service that is extended</param>
      <param name="keyHandler">The key handler to use for the localization service.</param>
      <param name="configuration">The configuration to read.</param>
      <returns>
            A localization service.
            </returns>
    </member>
    <member name="T:EPiServer.Framework.Localization.ResourceKeyHandlerExtensions">
      <summary>
            Performs different operations on resource keys for <see cref="T:EPiServer.Framework.Localization.LocalizationService" />.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceKeyHandlerExtensions.ResolveContextBasedKey(EPiServer.Framework.Localization.ResourceKeyHandler,System.String)">
      <summary>
            Resolves a resource key based on the current request path.
            </summary>
      <param name="resourceKey">The resource key to resolve.</param>
      <param name="resourceKeyHandler">The extended resource key handler</param>
      <returns>A key that has the current request path added to the beginning of the key.</returns>
    </member>
    <member name="T:EPiServer.Framework.Modules.IModuleResourceResolver">
      <summary>
            Signature for component that resolves virtual paths for modules (for example shell modules).
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Modules.IModuleResourceResolver.TryResolvePath(System.Reflection.Assembly,System.String,System.String@)">
      <summary>
            Resolves the path for a server side resource for an assembly (that is for example part of a shell module)
            </summary>
      <param name="assembly">The assembly to resolve the path for</param>
      <param name="relativePath">The path relative for the assembly</param>
      <param name="resolvedPath">The resolved path.</param>
      <returns>true if the module supports relative resources else false.</returns>
    </member>
    <member name="M:EPiServer.Framework.Modules.IModuleResourceResolver.ResolvePath(System.String,System.String)">
      <summary>
            Resolves the path for a server side resource for a module (for example a shell module)
            </summary>
      <param name="moduleName">The name of the module to resolve the path for</param>
      <param name="moduleRelativePath">The path relative for the module</param>
      <returns>The resolved path.</returns>
    </member>
    <member name="M:EPiServer.Framework.Modules.IModuleResourceResolver.TryResolveClientPath(System.Reflection.Assembly,System.String,System.String@)">
      <summary>
            Resolves the path for a client side resource for an assembly (that is for example part of a shell module)
            </summary>
      <param name="assembly">The assembly to resolve the path for</param>
      <param name="relativePath">The path relative for the assembly</param>
      <param name="resolvedPath">The resolved path.</param>
      <returns>true if the module supports relative resources else false.</returns>
    </member>
    <member name="M:EPiServer.Framework.Modules.IModuleResourceResolver.ResolveClientPath(System.String,System.String)">
      <summary>
            Resolves the path for a client side resource for a module (for example a shell module)
            </summary>
      <param name="moduleName">The name of the module to resolve the path for</param>
      <param name="moduleRelativePath">The path relative for the module</param>
      <returns>The resolved path.</returns>
    </member>
    <member name="P:EPiServer.Framework.Modules.IModuleResourceResolver.ProtectedRootPath">
      <summary>
            Gets the root path for protected resources
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Modules.Internal.ModuleResourceResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Exposes a convenient way to access the registered <see cref="T:EPiServer.Framework.Modules.IModuleResourceResolver" /> implementation.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Modules.Internal.ModuleResourceResolver.Instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Convenience property to get the registered <see cref="T:EPiServer.Framework.Modules.IModuleResourceResolver" /> implementation
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Security.SecurityEntityProviderInitialization">
      <summary>
            Initialization module responsible for registering <see cref="T:EPiServer.Security.SecurityEntityProvider" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Security.SecurityEntityProviderInitialization.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Security.SecurityEntityProviderInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Security.SecurityEntityProviderInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Framework.TypeScanner.Internal.CachingAssemblyScanner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Caches result from the assembly scanner to disk, thus surviving site restarts
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.TypeScanner.Internal.CachingAssemblyScanner.EnableBuildManagerCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Enables caching to the ASP.NET build manager directory
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.TypeScanner.Internal.CachingAssemblyScanner.LoadCache(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads cached assemblies and types from disk and joins with the assemblies loaded in memory
            </summary>
      <param name="assemblies">The list of loaded assemblies</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.TypeScanner.Internal.CachingAssemblyScanner.Save">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save the cached result to disk
            </summary>
      <remarks>Only saves changes if the cache is dirty</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.VirtualRoleEventHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementations for hooking into different HTTP events for virtual roles
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VirtualRoleEventHandler.WrappingVirtualRolePrincipal_PostAuthenticateRequest(System.Object,System.EventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles the PostAuthenticateRequest event to replace the current principal with a VirtualRolePrincipal.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VirtualRoleEventHandler.WrappingVirtualRolePrincipal_EndRequest(System.Object,System.EventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles the EndRequest event to add the current user (if authenticated) rolelist to cookie if System.Web.Security.Roles.CacheRolesInCookie
            is enabled.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
      <remarks>
            Assumes that Roles are enabled and that CacheRolesInCookie is enabled.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.MultiplexingMembershipProvider">
      <summary>
            A membership provider implementation that acts as a multiplexer between a number of preconfigured membership providers.
            </summary>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Security.MultiplexingMembershipProvider" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.MembershipProviders">
      <summary>
            The collection of configured membership providers
            </summary>
      <remarks>
            Basically a wrapper around <see cref="P:System.Web.Security.Membership.Providers" /> but with the
            option of doing dependency injection to set your own set of membership providers.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.Providers">
      <summary>
            The list of membership providers that are participating in the multiplexing procedure
            </summary>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.ActiveMembershipProviders">
      <summary>
            The list of membership providers that are participating in the multiplexing procedure
            </summary>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.CurrentProvider">
      <summary>
            Provider to use based on CurrentUsername / CurrentMembershipUser
            </summary>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.CurrentMembershipUser">
      <summary>
            The membership user based on CurrentUsername
            </summary>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.CurrentUsername">
      <summary>
            Gets or sets current user
            </summary>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.FindMembershipUser(System.String)">
      <summary>
            Gets membership user for provided username
            </summary>
      <param name="username">Username</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.DefaultProvider">
      <summary>
            Returns default provider that corresponding to provider1 setting in web.config. 
            </summary>
      <value>The default provider.</value>
      <remarks>
            The default role provider is used for operations such as adding a new role, where you cannot apply the operation to all providers, neither
            determine the role provider based on information from the multiplexing membership provider.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes MultiplexingMembershipProvider
            </summary>
      <param name="name">Name of provider</param>
      <param name="config">Collection of name-value pairs</param>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.ApplicationName">
      <summary>
            The name of the application using the custom membership provider.
            </summary>
      <value>
      </value>
      <returns>The name of the application using the custom membership provider.</returns>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.ChangePassword(System.String,System.String,System.String)">
      <summary>
            Processes a request to update the password for a membership user.
            </summary>
      <param name="username">The user to update the password for.</param>
      <param name="oldPassword">The current password for the specified user.</param>
      <param name="newPassword">The new password for the specified user.</param>
      <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
      <remarks>
            Will use the first active provider where username is found.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
      <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
      <param name="username">The user to change the password question and answer for.</param>
      <param name="password">The password for the specified user.</param>
      <param name="newPasswordQuestion">The new password question for the specified user.</param>
      <param name="newPasswordAnswer">The new password answer for the specified user.</param>
      <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
      <remarks>
            Will use the first active provider where username is found.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
      <summary>
            Adds a new membership user to the data source.
            </summary>
      <param name="username">The user name for the new user.</param>
      <param name="password">The password for the new user.</param>
      <param name="email">The e-mail address for the new user.</param>
      <param name="passwordQuestion">The password question for the new user.</param>
      <param name="passwordAnswer">The password answer for the new user</param>
      <param name="isApproved">Whether or not the new user is approved to be validated.</param>
      <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
      <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
      <remarks>
            Will use the DefaultProvider for creating a new user.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.DeleteUser(System.String,System.Boolean)">
      <summary>
            Removes a user from the membership data source.
            </summary>
      <param name="username">The name of the user to delete.</param>
      <param name="deleteAllRelatedData">true to delete data related to the user from the database; false to leave data related to the user in the database.</param>
      <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
      <remarks>
            Will use the first active provider where username is found.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.EnablePasswordReset">
      <summary>
            Indicates whether the membership provider is configured to allow users to reset their passwords.
            </summary>
      <value>
      </value>
      <returns>true if the membership provider supports password reset; otherwise, false. The default is true.</returns>
      <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.EnablePasswordRetrieval">
      <summary>
            Indicates whether the membership provider is configured to allow users to retrieve their passwords.
            </summary>
      <value>
      </value>
      <returns>true if the membership provider is configured to support password retrieval; otherwise, false. The default is false.</returns>
      <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
      <param name="emailToMatch">The e-mail address to search for.</param>
      <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
      <param name="pageSize">The size of the page of results to return.</param>
      <param name="totalRecords">The total number of matched users.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
      <remarks>
            Will return data from each provider in order.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
      <param name="usernameToMatch">The user name to search for.</param>
      <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
      <param name="pageSize">The size of the page of results to return.</param>
      <param name="totalRecords">The total number of matched users.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
      <remarks>
            Will return data from each provider in order.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
      <summary>
            Gets a collection of all the users in the data source in pages of data.
            </summary>
      <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
      <param name="pageSize">The size of the page of results to return.</param>
      <param name="totalRecords">The total number of matched users.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
      <remarks>
            Will return data from each provider in order.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetNumberOfUsersOnline">
      <summary>
            Gets the number of users currently accessing the application.
            </summary>
      <returns>
            The number of users currently accessing the application.
            </returns>
      <remarks>
            Will return the sum of online users from all active providers.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetPassword(System.String,System.String)">
      <summary>
            Gets the password for the specified user name from the data source.
            </summary>
      <param name="username">The user to retrieve the password for.</param>
      <param name="answer">The password answer for the user.</param>
      <returns>
            The password for the specified user name.
            </returns>
      <remarks>
            Will use the first active provider where username is found.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetUser(System.String,System.Boolean)">
      <summary>
            Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
      <param name="username">The name of the user to get information for.</param>
      <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
      <remarks>
            Will use the first active provider where username is found.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetUser(System.Object,System.Boolean)">
      <summary>
            Gets information from the data source for a user based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
      <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
      <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
      <remarks>
            Will use the first active provider where username is found.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.GetUserNameByEmail(System.String)">
      <summary>
            Gets the user name associated with the specified e-mail address.
            </summary>
      <param name="email">The e-mail address to search for.</param>
      <returns>
            The user name associated with the specified e-mail address. If no match is found, return null.
            </returns>
      <remarks>
            Will use the first active provider where email is found.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.MaxInvalidPasswordAttempts">
      <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
      <value>
      </value>
      <returns>The number of invalid password or password-answer attempts allowed before the membership user is locked out.</returns>
      <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.MinRequiredNonAlphanumericCharacters">
      <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
      <value>
      </value>
      <returns>The minimum number of special characters that must be present in a valid password.</returns>
      <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.MinRequiredPasswordLength">
      <summary>
            Gets the minimum length required for a password.
            </summary>
      <value>
      </value>
      <returns>The minimum length required for a password. </returns>
      <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.PasswordAttemptWindow">
      <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
      <value>
      </value>
      <returns>The number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.</returns>
      <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.PasswordFormat">
      <summary>
            Gets a value indicating the format for storing passwords in the membership data store.
            </summary>
      <value>
      </value>
      <returns>One of the <see cref="T:System.Web.Security.MembershipPasswordFormat"></see> values indicating the format for storing passwords in the data store.</returns>
      <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.PasswordStrengthRegularExpression">
      <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
      <value>
      </value>
      <returns>A regular expression used to evaluate a password.</returns>
      <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.RequiresQuestionAndAnswer">
      <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
      <value>
      </value>
      <returns>true if a password answer is required for password reset and retrieval; otherwise, false. The default is true.</returns>
      <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingMembershipProvider.RequiresUniqueEmail">
      <summary>
            Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.
            </summary>
      <value>
      </value>
      <returns>true if the membership provider requires a unique e-mail address; otherwise, false. The default is true.</returns>
      <remarks>
            Will use the DefaultProvider for reading the setting.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.ResetPassword(System.String,System.String)">
      <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
      <param name="username">The user to reset the password for.</param>
      <param name="answer">The password answer for the specified user.</param>
      <returns>The new password for the specified user.</returns>
      <remarks>
            Will use the first active provider where username is found.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.UnlockUser(System.String)">
      <summary>
            Unlocks the user.
            </summary>
      <param name="userName">The username.</param>
      <returns>
      </returns>
      <remarks>
            Will use the first active provider where username is found.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
      <summary>
            Updates information about a user in the data source.
            </summary>
      <param name="user">A <see cref="T:System.Web.Security.MembershipUser"></see> object that represents the user to update and the updated information for the user.</param>
      <remarks>
            Will use the first active provider where username is found.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.ValidateUser(System.String,System.String)">
      <summary>
            Verifies that the specified user name and password exist in the data source.
            </summary>
      <param name="username">The name of the user to validate.</param>
      <param name="password">The password for the specified user.</param>
      <returns>
            true if the specified username and password are valid; otherwise, false.
            </returns>
      <remarks>
            Will use the first active provider where username is found.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.RecordNumberToProviderAndIndex(System.Int32,System.Collections.Generic.List{System.Int32},System.Int32@,System.Int32@)">
      <summary>
            Calculates from which provider at which index to start reading to retrieve items from a specific record number.
            </summary>
    </member>
    <member name="T:EPiServer.Security.MultiplexingMembershipProvider.PageRetrieverDelegate">
      <summary>
            Delegate type used by AggregateProviderResults.
            </summary>
    </member>
    <member name="M:EPiServer.Security.MultiplexingMembershipProvider.AggregateProviderResults(System.Int32,System.Int32,System.Int32@,EPiServer.Security.MultiplexingMembershipProvider.PageRetrieverDelegate)">
      <summary>
            Collects data from multiple providers.
            </summary>
    </member>
    <member name="T:EPiServer.Security.MultiplexingRoleProvider">
      <summary>
            A role provider implementation that acts as a multiplexer between a number of preconfigured role providers.
            </summary>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.MultiplexingRoleProvider" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Security.MultiplexingRoleProvider.DefaultProvider">
      <summary>
            Returns default provider that corresponds to provider1 setting in web.config. 
            </summary>
      <value>The default provider.</value>
      <remarks>
            The default role provider is used for operations such as adding a new role, where you cannot apply the operation to all providers, neither
            determine the role provider based on information from the multiplexing membership provider.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.MultiplexingRoleProvider.CurrentProvider">
      <summary>
            Currently used role provider based on the mapped membership provider
            </summary>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.SetCurrentMembershipUser(System.String)">
      <summary>
            Assign the current user to the context
            </summary>
      <param name="userName">The logged in user name</param>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.ProviderForUser(System.String)">
      <summary>
            Determine the currently used role provider for the user name
            </summary>
      <param name="userName">The logged in user</param>
      <returns>A role provider</returns>
    </member>
    <member name="P:EPiServer.Security.MultiplexingRoleProvider.ActiveRoleProviders">
      <summary>
            A list of currently active role providers
            </summary>
    </member>
    <member name="P:EPiServer.Security.MultiplexingRoleProvider.Providers">
      <summary>
            A list of currently active role providers (read-only)
            </summary>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.MembershipToRoleProvider(System.String)">
      <summary>
            Get the role provider that maps to a membership provider
            </summary>
      <param name="membershipProviderName">The name of the membership provider</param>
      <returns>A role provider</returns>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
      <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.AddUsersToRoles(System.String[],System.String[])">
      <summary>
            Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
      <param name="usernames">A string array of user names to be added to the specified roles.</param>
      <param name="roleNames">A string array of the role names to add the specified user names to.</param>
    </member>
    <member name="P:EPiServer.Security.MultiplexingRoleProvider.ApplicationName">
      <summary>
            Gets or sets the name of the application to store and retrieve role information for.
            </summary>
      <value>
      </value>
      <returns>The name of the application to store and retrieve role information for.</returns>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.CreateRole(System.String)">
      <summary>
            Adds a new role to the data source for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to create.</param>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.DeleteRole(System.String,System.Boolean)">
      <summary>
            Removes a role from the data source for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to delete.</param>
      <param name="throwOnPopulatedRole">If true, throw an exception if roleName has one or more members and do not delete roleName.</param>
      <returns>
            true if the role was successfully deleted; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.FindUsersInRole(System.String,System.String)">
      <summary>
            Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
      <param name="roleName">The role to search in.</param>
      <param name="usernameToMatch">The user name to search for.</param>
      <returns>
            A string array containing the names of all the users where the user name matches usernameToMatch and the user is a member of the specified role.
            </returns>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.GetAllRoles">
      <summary>
            Gets a list of all the roles for the configured applicationName.
            </summary>
      <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.GetRolesForUser(System.String)">
      <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
      <param name="username">The user to return a list of roles for.</param>
      <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.GetUsersInRole(System.String)">
      <summary>
            Gets a list of users in the specified role for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to get the list of users for.</param>
      <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.IsUserInRole(System.String,System.String)">
      <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
      <param name="username">The user name to search for.</param>
      <param name="roleName">The role to search in.</param>
      <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
      <summary>
            Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
      <param name="usernames">A string array of user names to be removed from the specified roles.</param>
      <param name="roleNames">A string array of role names to remove the specified user names from.</param>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.RoleExists(System.String)">
      <summary>
            Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to search for in the data source.</param>
      <returns>
            true if the role name already exists in the data source for the configured applicationName; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.InitProviderMap">
      <summary>
            Delayed initialization of the provider map membership-&gt;role
            </summary>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.InitMembershipProvider">
      <summary>
            Delayed initialization of the corresponding multiplexing membership provider
            </summary>
    </member>
    <member name="M:EPiServer.Security.MultiplexingRoleProvider.InitProviders">
      <summary>
            Delayed initialization of all the role providers defined to be multiplexed
            </summary>
    </member>
    <member name="T:EPiServer.Security.ProviderActions">
      <summary>
            Actions that are supported by the provider.
            </summary>
    </member>
    <member name="F:EPiServer.Security.ProviderActions.Update">
      <summary>
            Update action on provider
            </summary>
    </member>
    <member name="F:EPiServer.Security.ProviderActions.Create">
      <summary>
            Create action on provider
            </summary>
    </member>
    <member name="F:EPiServer.Security.ProviderActions.Delete">
      <summary>
            Delete action on provider
            </summary>
    </member>
    <member name="T:EPiServer.Security.ProviderCapabilityAttribute">
      <summary>
            Attribute used to describe what capabilities a Role or Membership provider
            has: Which actions it can perform, what properties it can set and which wildcard
            symbol is used when searching 
            </summary>
    </member>
    <member name="P:EPiServer.Security.ProviderCapabilityAttribute.AllowedActions">
      <summary>
            The allowed actions
            </summary>
    </member>
    <member name="P:EPiServer.Security.ProviderCapabilityAttribute.Properties">
      <summary>
            Supported properties
            </summary>
    </member>
    <member name="P:EPiServer.Security.ProviderCapabilityAttribute.WildcardSymbol">
      <summary>
            Wildcard symbol used in search
            </summary>
      <remarks>If not set, the consuming class may use a default, e.g. "%"</remarks>
    </member>
    <member name="T:EPiServer.ServiceModel.GenericWcfServiceHost`1">
      <summary>
            Generic EPiServer WCf hosting class which take the configuration in the enterprise senario
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ServiceModel.GenericWcfServiceHost`1" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ServiceModel.GenericWcfServiceHost`1" /> class.
            </summary>
      <param name="serviceType">Type of the service.</param>
    </member>
    <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.#ctor(System.Type,System.Uri[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ServiceModel.GenericWcfServiceHost`1" /> class.
            </summary>
      <param name="serviceType">Type of the service.</param>
      <param name="baseAddresses">The base addresses.</param>
    </member>
    <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.ApplyConfiguration">
      <summary>
            Loads the service description information from the configuration file and applies it to the runtime being constructed.
            </summary>
      <exception cref="T:System.InvalidOperationException">The description of the service hosted is null.</exception>
    </member>
    <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.ConfigWCFService(System.Boolean)">
      <summary>
            Configs the WCF service.
            </summary>
      <param name="privateConfigFile">if set to <c>true</c> [private config file].</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ServiceModel.GenericWcfServiceHost`1.GetWCFConfigFile(System.Boolean)">
      <summary>
            Gets the WCF config file.
            </summary>
      <param name="privateConfigFile">if set to <c>true</c> [private config file].</param>
      <returns>
            path to config file
            </returns>
    </member>
    <member name="T:EPiServer.Web.Hosting.AspNetHostingEnvironment">
      <summary>
            Default implementation of the IHostingEnvironment interface. It delegates to the ASP.NET
            HostingEnvironment class to do the "real" work.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Hosting.CaseInsensitiveZipArchive">
      <summary>
            Wrapper for <see cref="T:System.IO.Compression.ZipArchive" /> providing case insensitive (read-only) entry lookup.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Hosting.DelegatingVirtualFile">
      <summary>
            Virtual file that delegates all member access to the creator.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.DelegatingVirtualFile.Open">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Web.Hosting.DelegatingVirtualFile.Changed">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Web.Hosting.GenericHostingEnvironment">
      <summary>
            Helper class to get access to hosting environment variables, see <see cref="T:EPiServer.Web.Hosting.IHostingEnvironment" /></summary>
    </member>
    <member name="T:EPiServer.Web.Hosting.GenericWebHostingEnvironment">
      <summary>
            Implementation of <see cref="T:EPiServer.Web.IWebHostingEnvironment" /> for <see cref="T:EPiServer.Web.Hosting.GenericHostingEnvironment" /></summary>
    </member>
    <member name="T:EPiServer.Web.Hosting.IHostingEnvironment">
      <summary>
            Helper class to get access to web hosting environment variables
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.IHostingEnvironment.RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)">
      <summary>
            Registers a new virtual path provider with the ASP.NET compilation system.
            </summary>
      <param name="virtualPathProvider">The virtual path provider.</param>
    </member>
    <member name="P:EPiServer.Web.Hosting.IHostingEnvironment.VirtualPathProvider">
      <summary>
            Gets the virtual path provider for this application.
            </summary>
      <value>The virtual path provider.</value>
    </member>
    <member name="P:EPiServer.Web.Hosting.IHostingEnvironment.ApplicationID">
      <summary>
            Gets the unique identifier of the application.
            </summary>
      <value>The application ID.</value>
    </member>
    <member name="M:EPiServer.Web.Hosting.IHostingEnvironment.MapPath(System.String)">
      <summary>
            Maps a virtual path to a physical path on the server.
            </summary>
      <param name="virtualPath">The virtual path (absolute or relative).</param>
      <returns>The physical path on the server specified by the virtualPath parameter.</returns>
    </member>
    <member name="P:EPiServer.Web.Hosting.IHostingEnvironment.ApplicationPhysicalPath">
      <summary>
            Gets the physical path on disk to the application's directory.
            </summary>
      <value>The application physical path.</value>
    </member>
    <member name="P:EPiServer.Web.Hosting.IHostingEnvironment.ApplicationVirtualPath">
      <summary>
            Gets the root virtual path of the application.
            </summary>
      <value>The application virtual path.</value>
    </member>
    <member name="T:EPiServer.Web.Hosting.IVirtualPathProviderModule">
      <summary>
            Can be implemented by a class to create a list of virtual path providers available early when EPiServer Framework initializes
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.IVirtualPathProviderModule.CreateProviders(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>
            Method is called the EPiServer Framework initializes to give a chance to register providers as early as possible
            </summary>
      <param name="context">The context</param>
      <returns>A list of providers</returns>
    </member>
    <member name="T:EPiServer.Web.Hosting.MappedVirtualFile">
      <summary>
            Virtual file implementation for mapping a virtual path to another virtual path, 
            making a <see cref="T:System.Web.Hosting.VirtualFile" /> available in additional locations.
            Used by the <see cref="T:EPiServer.Web.Hosting.VirtualPathMappedProvider" /></summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.MappedVirtualFile.#ctor(System.String,System.Web.Hosting.VirtualFile)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.MappedVirtualFile" /> class.
            </summary>
      <param name="originalName">Original name of the file.</param>
      <param name="actualFile">The actual file.</param>
    </member>
    <member name="P:EPiServer.Web.Hosting.MappedVirtualFile.IsDirectory">
      <summary>
            Gets a value that indicates that this is a virtual resource that should be treated as a file.
            </summary>
      <value>
      </value>
      <returns>Always false. </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.MappedVirtualFile.Open">
      <summary>
            When overridden in a derived class, returns a read-only stream to the virtual resource.
            </summary>
      <returns>A read-only stream to the virtual file.</returns>
    </member>
    <member name="T:EPiServer.Web.Hosting.NonUnifiedDirectory">
      <summary>
            Represents physical directories for a <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.NonUnifiedDirectory.#ctor(System.String,System.String,EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider)">
      <summary>
            Creates a <see cref="T:EPiServer.Web.Hosting.NonUnifiedDirectory" /> instance.
            </summary>
      <param name="physicalPath">The physical path to represent.</param>
      <param name="virtualPath">The virtual path to represent.</param>
      <param name="provider">The <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider" /> that handles the file.</param>
    </member>
    <member name="P:EPiServer.Web.Hosting.NonUnifiedDirectory.PhysicalPath">
      <summary>
            Gets the physical path for the virtual directory.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Hosting.NonUnifiedDirectory.PhysicalDirectory">
      <summary>
            Gets a <see cref="T:System.IO.DirectoryInfo" /> representing the physical directory.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Hosting.NonUnifiedDirectory.Provider">
      <summary>
            Gets the <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider" /> handling this virtual directory.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Hosting.NonUnifiedDirectory.Children">
      <summary>
            Gets an <see cref="T:System.Collections.IEnumerable" /> for all sub directories and files of the virtual directory.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Hosting.NonUnifiedDirectory.Directories">
      <summary>
            Gets an <see cref="T:System.Collections.IEnumerable" /> for all sub directories of the virtual directory.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Hosting.NonUnifiedDirectory.Files">
      <summary>
            Gets an <see cref="T:System.Collections.IEnumerable" /> for all files of the virtual directory.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Hosting.NonUnifiedFile">
      <summary>
            Represents physical files for a <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.NonUnifiedFile.#ctor(System.String,System.String)">
      <summary>
            Creates a <see cref="T:EPiServer.Web.Hosting.NonUnifiedFile" /> instance.
            </summary>
      <param name="physicalPath">The physical path to represent.</param>
      <param name="virtualPath">The virtual path to represent.</param>
    </member>
    <member name="P:EPiServer.Web.Hosting.NonUnifiedFile.PhysicalPath">
      <summary>
            Gets the physical path for the virtual file.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.NonUnifiedFile.Open">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Web.Hosting.NonUnifiedFile.Changed">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Web.Hosting.NonUnifiedFile.LocalPath">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Web.Hosting.VirtualFileEx">
      <summary>
            Extends the <see cref="T:System.Web.Hosting.VirtualFile" /> implemetation with properties enabling efficient transmission by the <see cref="T:EPiServer.Web.StaticFileHandler" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualFileEx.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.VirtualFileEx" /> class.
            </summary>
      <param name="virtualPath">The virtual path to the resource represented by this instance.</param>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualFileEx.Changed">
      <summary>
            Base class implementation of interface. Throws NotImplementedException.
            </summary>
      <value>The changed.</value>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualFileEx.LocalPath">
      <summary>
            Gets the local path. Base class returns null
            </summary>
      <value>The local path.</value>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualFileEx.Extension">
      <summary>
            Gets the UnifiedFiles extension, for example '.doc'.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Hosting.VirtualPathEventArgs">
      <summary>
            Virtual path actions event data
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.VirtualPathEventArgs" /> class.
            </summary>
      <param name="virtualPath">The previous virtual path.</param>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathEventArgs.#ctor(System.Web.Hosting.VirtualFileBase)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.VirtualPathEventArgs" /> class.
            </summary>
      <param name="virtualItem">The virtual item - directory or file.</param>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathEventArgs.VirtualPath">
      <summary>
            Gets or sets the previous virtual path.
            </summary>
      <value>The virtual path.</value>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathEventArgs.VirtualItem">
      <summary>
            Gets or sets the virtual item (file or directory).
            </summary>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the operation should be cancelled.
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:EPiServer.Web.Hosting.VirtualPathMappedProvider">
      <summary>
            A virtual path provider for mapping specific virtual paths to other locations. 
            The mappings are configured in web.config.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Default constructor.
            </summary>
      <param name="name">The name of the provider</param>
      <param name="configParameters">The config parameters for the provider</param>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.#ctor(System.String,System.Collections.Specialized.NameValueCollection,EPiServer.Web.IVirtualPathResolver)">
      <summary>
            Create an instance of VirtualPathMappedProvider
            </summary>
      <param name="name">The name of the provider</param>
      <param name="configParameters">The config parameters for the provider</param>
      <param name="virtualPathResolver">The virtualPathResolver</param>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathMappedProvider.Provider">
      <summary>
            Returns the VirtualPathProvider to use.
            </summary>
      <remarks>
            By default it returns GenericHostingEnvironment.Instance.VirtualPathProvider. For testing purpose it can be assigned.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
      <summary>
             Adds web.config hash to virtualPath
             </summary>
      <param name="virtualPath">Path to file</param>
      <param name="virtualPathDependencies">Path to dependencies to virtualPath file</param>
      <returns>string</returns>
      <remarks>
             Because we have configuration in web.config for VirtualPathMappings we need to know when web.config has changed and reload mappings.
             By default virtualprovider sets only dependencies to file and controls on pages we have mapping to, it doesnt recognize web.config as a dependecy
             Thats why we adding HashCode for webconfig with return
            </remarks>
      <example>
             Web.config.
             <virtualPathMappings><add url="~/myPage.aspx" mappedUrl="~/MapsToThis.aspx" /><add url="~/ctrl.ascx" mappedUrl="~/MapsToThisControl.ascx" /></virtualPathMappings></example>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
      <summary>
            If the path is mapped it will add a cachedependency to the mapped file.
            </summary>
      <param name="virtualPath">
      </param>
      <param name="virtualPathDependencies">
      </param>
      <param name="utcStart">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.GetFile(System.String)">
      <summary>
            Gets the virtualPath file. If it doesn't exists under this providers
            responibillity it transfers the request to the next provider in chain.
            </summary>
      <param name="virtualPath">
      </param>
      <returns>VirtualFile or null.</returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.GetDirectory(System.String)">
      <summary>
            Gets the virtualPath directory. If it doesn't exists under this providers
            responibillity it transfers the request to the next provider in chain.
            </summary>
      <param name="virtualDir">The path to the virtual directory.</param>
      <returns>
            VirtualDirectory or null
            </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.FileExists(System.String)">
      <summary>
            Checks if this VPP has knowlegde in existance of file under virtualPath. If not
            passes the query to the next provider in chain (if any).
            </summary>
      <param name="virtualPath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.DirectoryExists(System.String)">
      <summary>
            Checks if this VPP has knowlegde in existance of directory under virtualPath. If not
            passes the query to the next provider in chain (if any).
            </summary>
      <param name="virtualDir">The virtual path to check existence for</param>
      <returns>
            true if the directory exists in the virtual file system; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.CombineHashCodes(System.Int32,System.Int32)">
      <summary>
            Returns a combination of two hash codes.
            </summary>
      <param name="first">The first number in the </param>
      <param name="second">
      </param>
      <returns>The combination </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathMappedProvider.ReadPathMappingsFromWebConfig">
      <summary>
             Reads section VirtualPathMappings from web.config into a Generic Dictionary
            </summary>
      <example>
        <virtualPathMappings>
          <add url="~/Example.aspx" mappedUrl="~/MapsToThis.aspx" />
        </virtualPathMappings>
      </example>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Thrown when file extensions aren't same</exception>
      <returns>Dictionary&lt;string,string&gt;</returns>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathMappedProvider.PathMappings">
      <summary>
            Adds Virtualmappings to dictionary
            </summary>
      <remarks>
        <para>
            For testing purposes can it be set, otherwise during runtime it is read from config file.
            </para>
        <para>
            Dictionary implements StringComparer.OrdinalIgnoreCase
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathMappedProvider.WebConfigHash">
      <summary>
            Gets hashcode for web.config
            Creates hashcode from FileInfo object. (webConfig path, CreationTime, LastWriteTime, Length)
            </summary>
      <remarks>Can be set for test puropses.</remarks>
    </member>
    <member name="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider">
      <summary>
            This class is used for relocating folders outside physical application root. Typical usage is to separate
            portions of the the EPiServer UI files from the site files.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.ProviderName">
      <summary>
            Gets the name of the virtual path provider.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.ConfigurationParameters">
      <summary>
            Gets the collection of configuration parameters for the virtual path provider.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.LocalPath">
      <summary>
            Gets the physical path mapping to the virtual path root.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.VirtualPathRoot">
      <summary>
            Gets the virtual path root. Only paths starting with this are handled by this provider.
            </summary>
      <value>The virtual path root, always ending with a /.</value>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Creates an instance of a <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider" />.
            </summary>
      <param name="providerName">The provider name as specified in the VirtualPathProviders section in the configuration.</param>
      <param name="configParameters">A dictionary containing all configuration parameters as specified in the configuration file.</param>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.#ctor(System.String,System.Collections.Specialized.NameValueCollection,EPiServer.Web.IVirtualPathResolver)">
      <summary>
            Creates an instance of a <see cref="T:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider" />.
            </summary>
      <param name="providerName">The provider name as specified in the VirtualPathProviders section in the configuration.</param>
      <param name="configParameters">A dictionary containing all configuration parameters as specified in the configuration file.</param>
      <param name="virtualPathResolver">The virtual path provider</param>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.DirectoryExists(System.String)">
      <summary>
            Gets a value that indicates whether a directory exists in the virtual file system.
            </summary>
      <param name="virtualDir">The virtual path.</param>
      <returns>
            true if the directory exists in the virtual file system, otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.FileExists(System.String)">
      <summary>
            Gets a value that indicates whether a file exists in the virtual file system.
            </summary>
      <param name="virtualPath">The virtual path.</param>
      <returns>true if the file exists in the virtual file system, otherwise false.</returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetFile(System.String)">
      <summary>
            Gets a file from the virtual filesystem.
            </summary>
      <param name="virtualPath">The virtual path.</param>
      <returns>A <see cref="T:System.Web.Hosting.VirtualFile" /> object representing the virtual path.</returns>
      <remarks>If the specified virtual path is not handled by the current virtual path provider the next provider in the provider chain is queried.</remarks>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetDirectory(System.String)">
      <summary>
            Gets a directory from the virtual filesystem.
            </summary>
      <param name="virtualDir">The virtual path.</param>
      <returns>A <see cref="T:System.Web.Hosting.VirtualDirectory" /> object representing the virtual path.</returns>
      <remarks>If the specified virtual path is not handled by the current virtual path provider the next provider in the provider chain is queried.</remarks>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
      <summary>
            Creates a cache dependency based on the specified virtual paths.
            </summary>
      <param name="virtualPath">The path to the primary virtual resource.</param>
      <param name="virtualPathDependencies">An array of paths to other resources required by the primary virtual resource.</param>
      <param name="utcStart">The UTC time at which the virtual resources were read.</param>
      <returns>A <see cref="T:System.Web.Caching.CacheDependency" /> object for the specified virtual resources.</returns>
      <remarks>virtualPathDependencies has to be an <see cref="T:System.Collections.IEnumerable" /> of <see cref="T:System.String" />.
            All the elements that are not strings will be ignored. No exception will be thrown.</remarks>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
      <summary>
            Returns a hash for the file found at the specified virtual path and its dependencies.
            </summary>
      <param name="virtualPath">The path to the primary virtual resource.</param>
      <param name="virtualPathDependencies">An array of paths to other virtual resources required by the primary virtual resource.</param>
      <returns>
            A hash of the files specified in the virtual path dependencies.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetFileHash(System.String)">
      <summary>
            Gets the hash value for an existing file.
            The hash is a combination of local path, the creation time, last write time and the file length.
            </summary>
      <param name="localFilePath">The local file path.</param>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.CombineHashCodes(System.Int32,System.Int32)">
      <summary>
            Returns a combination of two hash codes.
            </summary>
      <param name="first">The first number in the </param>
      <param name="second">
      </param>
      <returns>The combination </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.GetAndValidatePhysicalPathBase(System.String)">
      <summary>
            Gets <see cref="T:System.IO.DirectoryInfo" /> object representing the physical path.
            </summary>
      <param name="physicalPath">The physical path.</param>
      <returns>A <see cref="T:System.IO.DirectoryInfo" /> object for the physical path.</returns>
      <remarks>This method considers environment variables when resolving physical paths.</remarks>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.MapVirtualPathToLocalPath(System.String,System.String@)">
      <summary>
            Maps a virtual (relative) path to an local absolute path
            </summary>
      <param name="virtualPath">the virtual path</param>
      <param name="outLocalPath">returned local absolute path</param>
      <returns>True if virtual path was mapped successfully to an absolute path within the namespace of this provider, false otherwise</returns>
      <remarks>Note that this function does not check if the file actually exists, it only cares about path mapping</remarks>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.TryGetHandledAbsolutePath(System.String,System.String@)">
      <summary>
            Tries to get the absolute path.
            </summary>
      <param name="virtualPath">The virtual path.</param>
      <param name="handledPath">The resulting absolute path.</param>
      <returns>True if the virtual path is handled by the current provider.</returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.MapPathInternal(System.IO.DirectoryInfo,System.String)">
      <summary>
            Maps a virtual path to it's corresponding physical path, given a physical path base.
            </summary>
      <remarks>The implementation expects that virtualPath is a absoulte virtualPath
            starting with the path this provider instance is registered with. Validation can be performed 
            by <see cref="M:EPiServer.Web.Hosting.VirtualPathNonUnifiedProvider.TryGetHandledAbsolutePath(System.String,System.String@)" /></remarks>
      <param name="physicalPathBase">The base physical path.</param>
      <param name="virtualPath">The virtual path.</param>
      <returns>A physical path</returns>
    </member>
    <member name="T:EPiServer.Web.Hosting.VirtualPathRegistrationHandler">
      <summary>
            Handles the registration of virtual path providers with the hosting environment.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathRegistrationHandler.RegisterVirtualPathProviders(System.Configuration.ProviderSettingsCollection)">
      <summary>
            Registers the providers from the specified collection with the hosting environment
            </summary>
      <param name="settings">The provider collection.</param>
      <remarks>This method does not support registering virtual path providers from code</remarks>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathRegistrationHandler.RegisterVirtualPathProviders(EPiServer.Framework.Initialization.InitializationEngine,System.Configuration.ProviderSettingsCollection)">
      <summary>
             Registers providers both from code implementing <see cref="T:EPiServer.Web.Hosting.IVirtualPathProviderModule" /> and providers from configuration
             </summary>
      <param name="context">The installation context, if <c>null</c> any providers in code will not be initialized</param>
      <param name="settings">The provider settings, if <c>null</c> they will be ignored</param>
    </member>
    <member name="P:EPiServer.Web.Hosting.VirtualPathRegistrationHandler.RegisteredVirtualPathProviders">
      <summary>
            Gets the registered virtual path providers instances.
            </summary>
      <value>The registered virtual path providers.</value>
    </member>
    <member name="M:EPiServer.Web.Hosting.VirtualPathRegistrationHandler.CreateVirtualPathProviderInstance(System.Configuration.ProviderSettings)">
      <summary>
            Creates an Instance of the registered/configured VirtualPathProvider subclass. Before
            instance can be created Reflection API is used to determine if configured class meets the
            minimun requirements in semantics.
            </summary>
      <param name="providerSettings">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Hosting.ZipArchiveReader">
      <summary>
            Represents a class responsible for reading ZipArchives and provide notification if the underlying archive 
            source has been modified.
            </summary>
      <remarks>
            This class should not be made public without removing the exposure of CaseInsensitiveZipArchive. This can be done
            if ZipArchive starts supporting case insensitive entries, or by replacing OpenArchive with GetEntry and GetDirectoryEntries.
            </remarks>
    </member>
    <member name="E:EPiServer.Web.Hosting.ZipArchiveReader.ArchiveModified">
      <summary>
            Occurs when the underlying archive source has been modified.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveReader.OpenArchive">
      <summary>
            Opens the archive that this reader was created for.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveReader.GetArchiveHash">
      <summary>
            Gets a hash code representing the archive.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveReader.GetCacheDependency(System.Web.Caching.CacheDependency,System.DateTime)">
      <summary>
            Gets a cache dependency to the ZipArchive source.
            </summary>
      <param name="baseDependency">The base dependency.</param>
      <param name="utcStart">The UTC start.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveReader.OnArchiveModified">
      <summary>
            Called when the underlying archive source has been modified.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider">
      <summary>
            A <see cref="T:System.Web.Hosting.VirtualPathProvider" /> that will serve the contents of a zip archive as a virtual file system.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider" /> class.
            </summary>
      <param name="virtualPath">The virtual path that should be mapped by the provider</param>
      <param name="archivePath">Relative or absolute path to the zip archive file</param>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider" /> class.
            </summary>
      <param name="virtualPath">The virtual path that should be mapped by the provider</param>
      <param name="archivePath">Relative or absolute path to the zip archive file</param>
      <param name="archiveBasePath">The base path inside the zip archive that should be use. e.g. if you want to make any subfolder as the base path</param>
    </member>
    <member name="P:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.Archive">
      <summary>
             Gets the zip file as lazily loaded
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.DirectoryExists(System.String)">
      <summary>
            Returns true if the given virtual path exists as a Folder inside the zip
            </summary>
      <param name="virtualDir">The virtual path</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetDirectory(System.String)">
      <summary>
            Returns the virtual folder by given virtual directory path
            </summary>
      <param name="virtualDir">The virtual path to the directory</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.FileExists(System.String)">
      <summary>
            Checks if a file exists in the mapped path, otherwise fall back to the base implementation.
            </summary>
      <param name="virtualPath">The virtual path</param>
      <returns>True if the file exists; otherwise false</returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetFile(System.String)">
      <summary>
            Returns the mapped file if there is one; otherwise fall back to the base implementation
            </summary>
      <param name="virtualPath">Path to the file</param>
      <returns>A virtual file if one exists; otherwise null</returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
      <summary>
            Creates a cache dependency based on the specified virtual paths.
            </summary>
      <param name="virtualPath">The path to the primary virtual resource.</param>
      <param name="virtualPathDependencies">An array of paths to other resources required by the primary virtual resource.</param>
      <param name="utcStart">The UTC time at which the virtual resources were read.</param>
      <returns>
            A <see cref="T:System.Web.Caching.CacheDependency" /> object for the specified virtual resources.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetCacheKey(System.String)">
      <summary>
            Returns a cache key to use for the specified virtual path.
            </summary>
      <param name="virtualPath">The path to the virtual resource.</param>
      <returns>
            A cache key for the specified virtual resource.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
      <summary>
            Returns the computed hash based on zipped file's name, creation time, modified time and uncompressed size
            </summary>
      <param name="virtualPath">The virtual path of the file</param>
      <param name="virtualPathDependencies">List of dependant file paths</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetDirectoryEntry(System.String)">
      <summary>
            Returns the zip entry by given virtual directory path. 
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetFileEntry(System.String)">
      <summary>
            Returns the zip entry by given virtual file path. 
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.ContainsFileEntry(System.String)">
      <summary>
            Only returns true if the ZipEntry exists inside the zip file for given path
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.GetEntry(System.String)">
      <summary>
            Returns the zip file entry for the given path.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.TryToMapped(System.String,System.String@)">
      <summary>
            Try to check whether a given virtualPath is mapped to current provider.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider.ClearResources">
      <summary>
            Empties the in-memory data and loaded archive
            </summary>
    </member>
    <member name="T:EPiServer.Web.MediaHandlerBase">
      <summary>
            Abstract media handler that can be used for any type of binary streams or files
            </summary>
    </member>
    <member name="M:EPiServer.Web.MediaHandlerBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.MediaHandlerBase" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.MediaHandlerBase.ProcessRequest(System.Web.HttpContext)">
      <summary>
            Processes the request
            </summary>
      <param name="context">The context</param>
    </member>
    <member name="M:EPiServer.Web.MediaHandlerBase.ProcessRequestInternal(System.Web.HttpContextBase)">
      <summary>
            The reason for keeping the actual "work code" in a separate 'ProcessRequestInternal'
            function was that it could possibly be called from both IHttpHandler.ProcessRequest 
            as well as from IHttpAsyncHandler.BeginProcessRequest()
            </summary>
      <param name="context">
      </param>
      <returns>True if request was handled, otherwise false</returns>
    </member>
    <member name="M:EPiServer.Web.MediaHandlerBase.NotModifiedHandling(System.Web.HttpContextBase,System.DateTime)">
      <summary>
            Handles "Not Modified" 304 status notification.
            </summary>
      <param name="context">The context.</param>
      <param name="modifiedDate">The modified date.</param>
      <returns>True if the request will return a Not Modified response.</returns>
    </member>
    <member name="M:EPiServer.Web.MediaHandlerBase.CheckIsModifiedAndAddETag(System.Web.HttpContextBase,System.DateTime)">
      <summary>
            Compares context.Request header "If-Modified-Since" with the given datetime
            </summary>
      <param name="context">
      </param>
      <param name="modifiedDate">
      </param>
      <returns>True if either If-Modified-Since header missing from request, or if the
            resource of course *is* modified later than If-Modified-Since date
            Otherwise false</returns>
    </member>
    <member name="M:EPiServer.Web.MediaHandlerBase.SetCachePolicy(System.Web.HttpContextBase,System.DateTime)">
      <summary>
            Configures cache policy of a static file based on configuration rules
            </summary>
      <remarks>Configuration setting expirationTime in web.config states the Expires date that is 
            added to the Resonse (which browsers typically uses to control how long to cache the file before a new request).
            If TimeSpan.Zero is specified in expirationTime no Expires date is added which most browsers will
            interpret so they make a request for the file each time but since Last-Modified is added a 304 (Not modified)
            will be returned by server if file has not changed.</remarks>
      <param name="context">The HttpContext for the current request.</param>
      <param name="fileChangedDate">The changed date for the file that is being requested.</param>
    </member>
    <member name="M:EPiServer.Web.MediaHandlerBase.BeginTransmitStream(System.Web.HttpContextBase,System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>
            Async variant of transmitstream that uses from IHttpAsyncHandler.
            </summary>
      <param name="context">
      </param>
      <param name="source">
      </param>
      <param name="cb">
      </param>
      <param name="extraData">
      </param>
      <returns>
      </returns>
      <remarks>
            This method only supports streams that has Seek capabilities. Use <see cref="M:TransmitStream" /> if the stream 
            doesn't support this.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.MediaHandlerBase.EndTransmitStream(System.IAsyncResult)">
      <summary>
      </summary>
      <param name="res">
      </param>
    </member>
    <member name="T:EPiServer.Web.Routing.StaticFileRemapRoute">
      <summary>
            Routes paths registered in the StaticFileRemapHandler to use the EPiServer StaticFileHandler
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.StaticFileRemapRoute.#ctor(EPiServer.Web.StaticFileRemapHandler)">
      <summary>
            Constructor for StaticFileRemapRoute
            </summary>
      <param name="remapHandler">
      </param>
    </member>
    <member name="M:EPiServer.Web.Routing.StaticFileRemapRoute.GetRouteData(System.Web.HttpContextBase)">
      <summary>
            Checks if the requested path should be remapped according to the StaticFileRemapHandler and remaps accordingly
            </summary>
      <param name="httpContext">The http context</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.StaticFileRemapRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>
            This implementation never returns a virtual path
            </summary>
      <param name="requestContext">The request context</param>
      <param name="values">The route values</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.StaticFileRouteHandler">
      <summary>
            Route handler which always returns the EPiServer StaticFileHandler.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.StaticFileRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>
            Gets the http handler. This implementation always returns the EPiServer StaticFileHandler.
            </summary>
      <param name="requestContext">The request context</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.StopRoutingForExistingFileRoute">
      <summary>
            Route which stops routing if the requested path is a file
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.StopRoutingForExistingFileRoute.#ctor(System.Web.Hosting.VirtualPathProvider)">
      <summary>
            Constructor for StopRoutingForExistingFileRoute
            </summary>
      <param name="vpp">
      </param>
    </member>
    <member name="M:EPiServer.Web.Routing.StopRoutingForExistingFileRoute.GetRouteData(System.Web.HttpContextBase)">
      <summary>
            Checks if file exists and stops routing if that is the case.
            </summary>
      <param name="httpContext">The http context</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.StopRoutingForExistingFileRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>
            This implementation never returns a virtual path
            </summary>
      <param name="requestContext">The request context</param>
      <param name="values">The route values</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.StaticFileHandler">
      <summary>
            Static file handler for Virtual Path Providers
            </summary>
    </member>
    <member name="M:EPiServer.Web.StaticFileHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.StaticFileHandler" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.StaticFileHandler.#ctor(EPiServer.Web.Hosting.IHostingEnvironment)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.StaticFileHandler" /> class.
            </summary>
      <param name="hostingEnvironment">The hosting environment.</param>
    </member>
    <member name="M:EPiServer.Web.StaticFileHandler.#ctor(EPiServer.Web.Hosting.IHostingEnvironment,EPiServer.Web.IMimeTypeResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.StaticFileHandler" /> class.
            </summary>
    </member>
    <member name="E:EPiServer.Web.StaticFileHandler.FileTransmitting">
      <summary>
            Occurs when file is being transmitted by handler, allows to cancel transmitting.
            </summary>
      <remarks>
            Only cancellation of the transmission using <see cref="P:EPiServer.Web.Hosting.VirtualPathEventArgs.Cancel" /> is possible when this event is raised. 
            Changes to the <see cref="P:EPiServer.Web.Hosting.VirtualPathEventArgs.VirtualItem" /> is ignored.
            </remarks>
    </member>
    <member name="E:EPiServer.Web.StaticFileHandler.FileProcessing">
      <summary>
            Occurs when file processing begins and allows for changing the transmitted file.
            </summary>
      <remarks>
            The transmitted file can be changed by setting <see cref="P:EPiServer.Web.Hosting.VirtualPathEventArgs.VirtualItem" /> to an existing file.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.StaticFileHandler.ProcessRequestInternal(System.Web.HttpContextBase)">
      <summary>
            The reason for keeping the actual "work code" in a separate 'ProcessRequestInternal'
            function was that it could possibly be called from both IHttpHandler.ProcessRequest 
            as well as from IHttpAsyncHandler.BeginProcessRequest()
            </summary>
      <param name="context">
      </param>
      <returns>True if request was handled, otherwise false</returns>
    </member>
    <member name="M:EPiServer.Web.StaticFileHandler.OnFileProcessing(EPiServer.Web.Hosting.VirtualPathEventArgs)">
      <summary>
            Raises the <see cref="E:FileProcessing" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.Web.Hosting.VirtualPathEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.StaticFileHandler.OnFileTransmitting(EPiServer.Web.Hosting.VirtualPathEventArgs)">
      <summary>
            Raises the <see cref="E:FileTransmitting" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.Web.Hosting.VirtualPathEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.StaticFileHandler.TransmitFile(EPiServer.Web.Hosting.VirtualFileEx,System.Web.HttpContextBase)">
      <summary>
            Transmits the file using the unbuffered <see cref="M:System.Web.HttpResponse.TransmitFile(System.String)" /> 
            and sets the Http Status code.
            </summary>
      <param name="virtualFileEx">The virtual file to transmit.</param>
      <param name="context">The current http context.</param>
    </member>
    <member name="M:EPiServer.Web.StaticFileHandler.SendVirtualFile(System.Web.Hosting.VirtualFile,System.Web.HttpContextBase)">
      <summary>
            Sends the file using by copying the file stream to the output stream
            and sets the Http Status code.
            </summary>
      <param name="virtualFile">The virtual file to send.</param>
      <param name="context">The current http context.</param>
    </member>
    <member name="T:EPiServer.Web.StaticFileRemapHandler">
      <summary>
            Remaps incoming requests targeted at VPP paths to the static file handler.
            </summary>
    </member>
    <member name="M:EPiServer.Web.StaticFileRemapHandler.ShouldRemapPath(System.String)">
      <summary>
            Checks if the specified path is registered to be remapped.
            </summary>
      <param name="path">The path to check against the list of registered paths.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.StaticFileRemapHandler.OnPostResolveRequestCache(System.Object,System.EventArgs)">
      <summary>
            The HttpApplication.PostMapRequestHandler event handler that validates that the configuration is valid.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:EPiServer.Web.StaticFileRemapHandler.RegisterRemapPaths(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Adds virtual paths to the list of paths that are remapped to the static file handler.
            </summary>
      <param name="appRelativeVirtualPaths">The virtual paths to remap.</param>
    </member>
    <member name="M:EPiServer.Web.StaticFileRemapHandler.UnregisterRemapPath(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Removes virtual paths from the list of paths that are remapped to the static file handler.
            </summary>
      <param name="appRelativeVirtualPaths">The virtual paths to remap.</param>
    </member>
    <member name="T:EPiServer.Web.VirtualPathHelper">
      <summary>
            Contains utlility methods when working with virtual paths
            </summary>
    </member>
    <member name="M:EPiServer.Web.VirtualPathHelper.IsValidVirtualPath(System.String)">
      <summary>
            Determines whether the given candidate has a valid virtual path syntax.
            </summary>
      <param name="candidate">The candidate virtual path string.</param>
      <returns>
        <c>true</c> if the string is not null or empty and has a valid virtual path syntax; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.VirtualPathHelper.Combine(System.String,System.String)">
      <summary>
            Combines a base path and a relative path, but works in a non ASP.NET-hosted environment, and assumes that the
            relative path is relative - even if it begins with a slash.
            </summary>
      <param name="basePath">The base path.</param>
      <param name="relativePath">The relative path.</param>
      <returns>The combined basePath and relativePath.</returns>
      <remarks>
            Extends <seealso cref="M:System.Web.VirtualPathUtility.Combine(System.String,System.String)" /> to make it work in a non ASP.NET-hosted
            environment. Also allows all combos of trailing slash on basePath and leading on relativePath (i.e. will treat
            a 'faulty' relative path starting with a slash as a relative anyway. This is formally incorrect, but pragmatically
            useful due to other EPiServer API:s that for historical reasons work with such 'rooted' paths.
            </remarks>
    </member>
    <member name="T:EPiServer.Licensing.Internal.HandleLicenseException">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Base class for License check.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Licensing.Internal.HandleLicenseException.HandleLicenseError(System.Web.HttpContextBase,EPiServer.Licensing.LicenseException)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handle license error message.
            </summary>
      <param name="context">The context</param>
      <param name="exception">The license exception</param>
      <remarks>
        <para>
            If license errors are reported they will be displayed inline in the HTML output stream (if available) with the HTML template
            as defined by the <see cref="P:EPiServer.Licensing.GlobalResources.LicenseError" /> resource string.
            </para>
        <para>
            If the HTML output stream is not available, a LicenseException will be thrown.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Licensing.RestrictionTypes.PartialRestriction">
      <summary>
            Partial restriction for a license.
            </summary>
    </member>
    <member name="M:EPiServer.Licensing.RestrictionTypes.PartialRestriction.Restricted(System.Reflection.Assembly,System.String)">
      <summary>
            Returns <c>true</c> if the license contains the specific partial restriction, otherwise <c>false</c>.
            </summary>
    </member>
    <member name="P:EPiServer.Licensing.RestrictionTypes.PartialRestriction.Description">
      <summary>
            The partial restriction type
            </summary>
    </member>
    <member name="M:EPiServer.Licensing.RestrictionTypes.PartialRestriction.Setup">
      <summary>
            Setup the instance.
            </summary>
    </member>
    <member name="M:EPiServer.Licensing.RestrictionTypes.PartialRestriction.InternalValidate">
      <summary>
            Sets the partial validation on <see cref="P:System.Web.HttpContext.Current" /> if exist, otherwise <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />.
            </summary>
      <returns>
        <see cref="F:EPiServer.Licensing.ValidationResult.Valid" />
      </returns>
    </member>
    <member name="M:EPiServer.Licensing.RestrictionTypes.PartialRestriction.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Licensing.LicenseBuilderExtensions">
      <summary>
            Builds a license file
            </summary>
    </member>
  </members>
</doc>