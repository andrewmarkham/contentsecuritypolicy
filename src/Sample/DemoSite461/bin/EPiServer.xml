<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EPiServer</name>
  </assembly>
  <members>
    <member name="T:EPiServer.Approvals.Approval">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            An approval instance base class.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.Reference">
      <summary>
            Reference to an approval. Override in inherited class.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.ID">
      <summary>
            The identifier of the approval instance.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.DefinitionVersionID">
      <summary>
            The identifier for the version of the approval definition.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.StartedBy">
      <summary>
            The user that started the approval instance.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.Started">
      <summary>
            The time when the approval instance was started.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.Completed">
      <summary>
            The time when the approval instance was completed.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.CompletedBy">
      <summary>
            The user that completed the approval instance.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.CompletedComment">
      <summary>
            The comment for the decision that completed the approval instance.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.Status">
      <summary>
            Current status of the approval instance.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.StepCount">
      <summary>
            The numbers of steps for the approval instance.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.ActiveStepIndex">
      <summary>
            Index of the currently active step.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.ActiveStepStarted">
      <summary>
            DateTime when the currently active step was started.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.RequireCommentOnReject">
      <summary>
            Flag that specifies if the definition requires that a reject must be commented.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.RequireCommentOnApprove">
      <summary>
            Flag that specifies if the definition requires that an approve must be commented.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.RequireCommentOnStart">
      <summary>
            Flag that specifies if the definition requires that a start must be commented.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.Approval.MakeReadOnly">
      <summary>
            Makes this instance read-only.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.Approval.IsReadOnly">
      <summary>
            Gets a value indicating whether this approval instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Approvals.Approval.CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.Approvals.Approval.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.Approvals.Approval.ThrowIfReadOnly">
      <summary>
            Throws an exception if the current instance is read-only.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalDecisionScope">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            The scope of an approval step decision.
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalDecisionScope.Undecided">
      <summary>
            No decision has yet been taken.
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalDecisionScope.Step">
      <summary>
            Decision for a step where the user is in the current step's definition.
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalDecisionScope.ForceStep">
      <summary>
            Decision for a step regardless of if the user is part of the current step's definition.
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalDecisionScope.Force">
      <summary>
            Decision for the whole approval instance regardless of if the user is part of the current step's definition. 
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalDecisionScope.Comment">
      <summary>
            No decision, only adding a comment
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalDefinition">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            An approval definition base class.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.Reference">
      <summary>
            Reference to an approval definition. Override in inherited class.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.ID">
      <summary>
            The identifier of the definition.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.VersionID">
      <summary>
            The identifier for the version of the definition.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.Steps">
      <summary>
            List of approval steps for this definition
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.SavedBy">
      <summary>
            The user that saved the definition version.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.Saved">
      <summary>
            The time when the definition version was saved.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.RequireCommentOnReject">
      <summary>
            Flag that specifies if a reject must be commented.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.RequireCommentOnApprove">
      <summary>
            Flag that specifies if an approve must be commented.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.RequireCommentOnStart">
      <summary>
            Flag that specifies if a start must be commented.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.ApprovesNeeded">
      <summary>
            Number of approves needed before a step is approved.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.SelfApprove">
      <summary>
            Flag that specifies if a reviewer can approve an approval created by the reviewer.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.DemandCommentOnReject">
      <exclude />
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.IsEnabled">
      <summary>
            Gets or sets whether the approval definition is enabled.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinition.MakeReadOnly">
      <summary>
            Makes this instance read-only.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinition.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinition.CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinition.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinition.ThrowIfReadOnly">
      <summary>
            Throws an exception if the current instance is read-only.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalDefinitionFormatException">
      <summary>
            Exception that is thrown when an <see cref="T:EPiServer.Approvals.ApprovalDefinition" /> has an invalid format.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionFormatException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalDefinitionFormatException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionFormatException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalDefinitionFormatException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionFormatException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalDefinitionFormatException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="paramName">The name of the parameter.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionFormatException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalDefinitionFormatException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalDefinitionFormatException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalDefinitionFormatException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalDefinitionOperationException">
      <summary>
            Exception that is thrown when an <see cref="T:EPiServer.Approvals.ApprovalDefinition" /> is not allowed to do the current operation.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionOperationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalDefinitionOperationException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionOperationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalDefinitionOperationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionOperationException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalDefinitionOperationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="paramName">The name of the parameter.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionOperationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalDefinitionOperationException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionOperationException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalDefinitionOperationException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalDefinitionOperationException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalDefinitionResolveResult">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Result for a definition resolve.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionResolveResult.Definition">
      <summary>
            The resolved approval definition or null is no is found
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionResolveResult.IsInherited">
      <summary>
            Specifies if the definition was inherited from a content ancestor
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalDefinitionReviewer">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            A reviewer in an approval definition step.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionReviewer.#ctor">
      <summary>
            Creates an empty <b>ApprovalDefinitionReviewer</b>/&gt;.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionReviewer.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
      <summary>
            Creates an <b>ApprovalDefinitionReviewer</b> object for a user with a list of <see cref="T:System.Globalization.CultureInfo" />"/&gt;.
            </summary>
      <param name="name">Name of the reviewer</param>
      <param name="languages">Languages for the reviewer</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionReviewer.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo},EPiServer.Approvals.ApprovalDefinitionReviewerType)">
      <summary>
            Creates an <b>ApprovalDefinitionReviewer</b> object for a user with a list of <see cref="T:System.Globalization.CultureInfo" />"/&gt;.
            </summary>
      <param name="name">Name of the reviewer</param>
      <param name="languages">Languages for the reviewer</param>
      <param name="reviewerType">The type of reviewer</param>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionReviewer.Name">
      <summary>
            Name of the reviewer.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionReviewer.ReviewerType">
      <summary>
            Gets or sets the type of reviewer
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionReviewer.Languages">
      <summary>
            List of languages that is valid for a reviewer in current step.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionReviewer.MakeReadOnly">
      <summary>
            Makes this instance read-only.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionReviewer.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionReviewer.CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionReviewer.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionReviewer.ThrowIfReadOnly">
      <summary>
            Throws an exception if the current instance is read-only.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionReviewer.Username">
      <summary>
            Name of the reviewer.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalDefinitionReviewerType">
      <summary>
            Specifies the type of reviewer
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalDefinitionReviewerType.User">
      <summary>
            The reviewer is a user
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalDefinitionReviewerType.Role">
      <summary>
            The reviewer is a role
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalDefinitionStep">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            A step in an approval definition.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionStep.#ctor">
      <summary>
            Creates an empty <b>ApprovalDefinition</b>/&gt;.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionStep.#ctor(System.String,System.Collections.Generic.IEnumerable{EPiServer.Approvals.ApprovalDefinitionReviewer})">
      <summary>
            Creates a named <b>ApprovalDefinitionStep</b> object with a list of <see cref="T:EPiServer.Approvals.ApprovalDefinitionReviewer" />"/&gt;.
            </summary>
      <param name="name">Name of the step</param>
      <param name="reviewers">Reviewers in this step</param>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionStep.Name">
      <summary>
            Name of the step.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionStep.Reviewers">
      <summary>
            List of reviewers in this step.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionStep.ApprovesNeeded">
      <summary>
            Number of approves needed before this step is approved.
            If set, this flag overrides the corresponding definition flag.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionStep.SelfApprove">
      <summary>
            Flag that specifies if a reviewer can approve an approval created by the reviewer.
            If set, this flag overrides the corresponding definition flag.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionStep.MakeReadOnly">
      <summary>
            Makes this instance read-only.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalDefinitionStep.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionStep.CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionStep.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionStep.ThrowIfReadOnly">
      <summary>
            Throws an exception if the current instance is read-only.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalEventArgs">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Arguments for an approval instance event.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEventArgs.#ctor(System.Int32,System.Int32,System.Uri,System.String,System.String,System.Boolean)">
      <summary>
            Creates instance of Approval event arguments class
            </summary>
      <param name="approvalID">The identifier of the approval instance</param>
      <param name="definitionVersionID">The identifier of the approval definition version</param>
      <param name="approvalReference">Approval key</param>
      <param name="username">The name of the user</param>
      <param name="comment">The comment on the approval event</param>
      <param name="forced">Flag specifying if the decision was forced</param>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalEventArgs.ApprovalID">
      <summary>
            The identifier of the approval instance.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalEventArgs.ApprovalReference">
      <summary>
            Approval key.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalEventArgs.DefinitionVersionID">
      <summary>
            The identifier of the approval definition version.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalEventArgs.Username">
      <summary>
            The name of the user.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalEventArgs.Comment">
      <summary>
            The comment of the user.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalEventArgs.Forced">
      <summary>
            Flag specifying if the decision was forced.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalFormatException">
      <summary>
            Exception that is thrown when an <see cref="T:EPiServer.Approvals.Approval" /> has an invalid format.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalFormatException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalFormatException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalFormatException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalFormatException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalFormatException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalFormatException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="paramName">The name of the parameter.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalFormatException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalFormatException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalFormatException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalFormatException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalMissingCommentException">
      <summary>
            Exception that is thrown when a comment is required.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalMissingCommentException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalMissingCommentException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalMissingCommentException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalMissingCommentException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalMissingCommentException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalMissingCommentException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="paramName">The name of the parameter.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalMissingCommentException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalMissingCommentException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalMissingCommentException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalMissingCommentException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalMissingCommentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalMissingCommentException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalQuery">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Class used for querying
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalQuery.Reference">
      <summary>
            Filter result on approval reference. Null for no filter.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalQuery.Username">
      <summary>
            Filter result where a specific user is part of the definition. Null for no filter.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalQuery.Language">
      <summary>
            Filter result on language. Null for no filter.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalQuery.DefinitionID">
      <summary>
            Identifier of an approval definition to filter on. Null for no filter.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalQuery.DefinitionVersionID">
      <summary>
            Identifier of an approval definition version to filter on. Null for no filter.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalQuery.StartedBy">
      <summary>
            Filter result where a specific user has started an approval. Null for no filter.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalQuery.Status">
      <summary>
            Filter result on approval status. Null for no filter.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalQuery.OnlyActiveSteps">
      <summary>
            Option to limit results to where user is in the active step, defaults to false
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalQuery.UserDecision">
      <summary>
            Filter result on decisions made by a user. Null for no filter.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalQueryUserDecision">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Filter on user decisions in an ApprovalQuery
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalQueryUserDecision.AnyDecision">
      <summary>
            A user has made a decision.
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalQueryUserDecision.Approved">
      <summary>
            A user has made an approve decision.
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalQueryUserDecision.Rejected">
      <summary>
            A user has made a reject decision.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalRejectionException">
      <summary>
            Exception that is thrown when an <see cref="T:EPiServer.Approvals.Approval" /> cannot be rejected because it is already approved.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRejectionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalRejectionException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRejectionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalRejectionException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRejectionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalRejectionException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRejectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalRejectionException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalReviewerSelfApproveException">
      <summary>
            Exception that is thrown when the user that started the approval sequence is not allowed to approve it.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalReviewerSelfApproveException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalReviewerSelfApproveException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalReviewerSelfApproveException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalReviewerSelfApproveException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalReviewerSelfApproveException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalReviewerSelfApproveException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalReviewerSelfApproveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalReviewerSelfApproveException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalReviewerStepException">
      <summary>
            Exception that is thrown when a reviewer is not part of the approval definition step.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalReviewerStepException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalReviewerStepException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalReviewerStepException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalReviewerStepException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalReviewerStepException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalReviewerStepException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalReviewerStepException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalReviewerStepException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalStatus">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Status of an approval instance
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalStatus.InReview">
      <summary>
            The approval instance is in review.
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalStatus.Approved">
      <summary>
            The approval instance is approved.
            </summary>
    </member>
    <member name="F:EPiServer.Approvals.ApprovalStatus.Rejected">
      <summary>
            The approval instance is rejected.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalStepDecision">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            A decision by a user for a step in an approval instance.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalStepDecision.#ctor">
      <summary>
            Creates an empty <b>ApprovalStepDecision</b>/&gt;.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalStepDecision.StepIndex">
      <summary>
            Index of the step that this decision is connected to.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalStepDecision.Approved">
      <summary>
            User has approved(true) or rejected(false).
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalStepDecision.Scope">
      <summary>
            Scope of the decision.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalStepDecision.Username">
      <summary>
            Name of the user.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalStepDecision.Decided">
      <summary>
            Timestamp of the decision.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalStepDecision.Comment">
      <summary>
            An optional decision comment.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalStepDecision.MakeReadOnly">
      <summary>
            Makes this instance read-only.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalStepDecision.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalStepDecision.CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalStepDecision.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalStepDecision.ThrowIfReadOnly">
      <summary>
            Throws an exception if the current instance is read-only.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalStepEventArgs">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Arguments for an approval instance step event.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalStepEventArgs.#ctor(System.Int32,System.Int32,System.Uri,System.String,System.String,System.Boolean,System.Int32)">
      <summary>
            Creates instance of ApprovalStep event arguments class
            </summary>
      <param name="approvalID">The identifier of the approval instance</param>
      <param name="definitionVersionID">The identifier of the approval definition version</param>
      <param name="approvalReference">Approval key</param>
      <param name="username">The name of the user</param>
      <param name="comment">The comment on the approval step event</param>
      <param name="stepIndex">The index of the step</param>
      <param name="forced">Flag specifying if the decision was forced</param>
    </member>
    <member name="P:EPiServer.Approvals.ApprovalStepEventArgs.StepIndex">
      <summary>
            The index of the step.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalStepIndexException">
      <summary>
            Exception that is thrown when a step index for an <see cref="T:EPiServer.Approvals.Approval" /> is currently invalid.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalStepIndexException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalStepIndexException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalStepIndexException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalStepIndexException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalStepIndexException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalStepIndexException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalStepIndexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalStepIndexException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.ContentApproval">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
             A content approval instance.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ContentApprovals.ContentApproval.Reference">
      <summary>
            Reference to an approval.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ContentApprovals.ContentApproval.ContentLink">
      <summary>
            Link to the content where the instance resides.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ContentApprovals.ContentApproval.CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinition">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            A content approval definition instance. 
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinition.Reference">
      <summary>
            Reference to a content approval definition.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinition.ContentLink">
      <summary>
            Link to the content where the definition resides.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinition.CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinitionRepositoryExtensions">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Extension method class for <see cref="T:EPiServer.Approvals.IApprovalDefinitionRepository" /></summary>
    </member>
    <member name="M:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinitionRepositoryExtensions.GetItemsAsync(EPiServer.Approvals.IApprovalDefinitionRepository,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>
            Gets a list of approval definitions by using content references.
            </summary>
      <param name="repository">The approval definition repository that is being extended</param>
      <param name="contentLinks">A list of content references to get approval instances for</param>
      <returns>A list of approval definition instances</returns>
    </member>
    <member name="M:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinitionRepositoryExtensions.GetAsync(EPiServer.Approvals.IApprovalDefinitionRepository,EPiServer.Core.ContentReference)">
      <summary>
            Gets an approval definition by using content reference.
            </summary>
      <param name="repository">The approval definition repository that is being extended</param>
      <param name="contentLink">A content reference to get an approval instance for</param>
      <returns>A approval definition instance</returns>
    </member>
    <member name="M:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinitionRepositoryExtensions.ResolveAsync(EPiServer.Approvals.IApprovalDefinitionRepository,EPiServer.Core.ContentReference)">
      <summary>
            Traverses the content tree upwards starting at the ContentReference looking for a definition.
            </summary>
      <param name="repository">The approval repository that is being extended</param>
      <param name="contentLink">Reference to the content where traversal begins</param>
      <returns>A result class where Definition is the current definition or null if no definition can be found</returns>
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.ContentApprovalEventArgsExtensions">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Extension method class for <see cref="T:EPiServer.Approvals.ApprovalEventArgs" /></summary>
    </member>
    <member name="M:EPiServer.Approvals.ContentApprovals.ContentApprovalEventArgsExtensions.GetContentLink(EPiServer.Approvals.ApprovalEventArgs)">
      <summary>
            Converts the ApprovalReference to a ContentReference for content approvals and returns it
            </summary>
      <param name="eventArgs">The eventArgs that is being extended</param>
      <returns>A ContentReference for content approvals</returns>
    </member>
    <member name="M:EPiServer.Approvals.ContentApprovals.ContentApprovalEventArgsExtensions.IsContentApproval(EPiServer.Approvals.ApprovalEventArgs)">
      <summary>
            Check to see if an ApprovalEventArgs is a content approval
            </summary>
      <param name="eventArgs">The eventArgs that is being extended</param>
      <returns>Bool specifying if this is a content approval event</returns>
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.ContentApprovalQuery">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Class used for querying
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.ContentApprovals.ContentApprovalQuery.ContentLink">
      <summary>
            Filter result on content link. Null for no filter.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.ContentApprovalRepositoryExtensions">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Extension method class for <see cref="T:EPiServer.Approvals.IApprovalRepository" /></summary>
    </member>
    <member name="M:EPiServer.Approvals.ContentApprovals.ContentApprovalRepositoryExtensions.GetItemsAsync(EPiServer.Approvals.IApprovalRepository,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>
            Gets a list of approval instances by using content references.
            </summary>
      <param name="repository">The approval repository that is being extended</param>
      <param name="contentLinks">List of content references to get approval instances for</param>
      <returns>A list of approval instances</returns>
    </member>
    <member name="M:EPiServer.Approvals.ContentApprovals.ContentApprovalRepositoryExtensions.GetAsync(EPiServer.Approvals.IApprovalRepository,EPiServer.Core.ContentReference)">
      <summary>
            Gets an approval instance by using content reference.
            </summary>
      <param name="repository">The approval repository that is being extended</param>
      <param name="contentLink">A content reference to get an approval instance for</param>
      <returns>A approval instance</returns>
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.Internal.ContentApprovalContentHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.Internal.ContentApprovalEngineExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.Internal.ContentApprovalEngineHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.Internal.ContentApprovalInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.ContentApprovals.Internal.ContentApprovalReferenceHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.DisabledApprovalDefinitionException">
      <summary>
            Exception that is thrown when an <see cref="T:EPiServer.Approvals.ApprovalDefinition" /> is disabled.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.DisabledApprovalDefinitionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.DisabledApprovalDefinitionException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.DisabledApprovalDefinitionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.DisabledApprovalDefinitionException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.DisabledApprovalDefinitionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.DisabledApprovalDefinitionException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.DisabledApprovalDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.DisabledApprovalDefinitionException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.FallbackApprovals.Internal.FallbackApproval">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.FallbackApprovals.Internal.FallbackApprovalDefinition">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.IApprovalDefinitionReferenceResolver">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Interface for approval definition reference resolving. 
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalDefinitionReferenceResolver.ResolveAsync(System.Uri)">
      <summary>
            This method resolvs an approval reference looking for a definition.
            </summary>
      <param name="reference">Reference to where traversal begins</param>
      <returns>A result class where ApprovalDefinition is the current definition or null if no definition can be found</returns>
    </member>
    <member name="T:EPiServer.Approvals.IApprovalDefinitionRepository">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Repository for handling the current/active approval definitions
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalDefinitionRepository.SaveAsync(EPiServer.Approvals.ApprovalDefinition)">
      <summary>
            Saves an approval definition as a new current version.
            </summary>
      <param name="definition">The approval definition to be saved</param>
      <exception cref="T:EPiServer.Approvals.ApprovalDefinitionFormatException">The format of the approval definition is invalid</exception>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalDefinitionRepository.ResolveAsync(System.Uri)">
      <summary>
            This method resolvs an approval reference looking for a definition.
            </summary>
      <param name="reference">Reference to where traversal begins</param>
      <returns>A result class where ApprovalDefinition is the current definition or null if no definition can be found</returns>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalDefinitionRepository.GetItemsAsync(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
            Gets the current approval definition versions.
            Note that this can be a version that didn't exist when an approval definition were created.
            </summary>
      <param name="references">References to the contents where the definitions resides</param>
      <returns>Current definitions</returns>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalDefinitionRepository.GetItemsAsync(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Gets a list of the current approval definition versions.
            Note that this can be a version that didn't exist when the approval definition were created.
            </summary>
      <param name="ids">The identifiers of the approval definitions</param>
      <returns>Current definitions</returns>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalDefinitionRepository.DeleteAsync(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Deletes approval definitions and all versions connected to them.
            </summary>
      <param name="ids">The identifiers of the approval definitions</param>
      <exception cref="T:EPiServer.Approvals.ApprovalInReviewException">The operation cannot be executed due to a conflict with an approval in review</exception>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalDefinitionRepositoryExtensions">
      <summary>
            Extension method class for <see cref="T:EPiServer.Approvals.IApprovalDefinitionRepository" /></summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionRepositoryExtensions.GetAsync(EPiServer.Approvals.IApprovalDefinitionRepository,System.Uri)">
      <summary>
            Gets the current approval definition version for an approval definition.
            Note that this can be a version that didn't exist when the approval definition were created.
            </summary>
      <param name="repository">The approval definition repository that is being extended</param>
      <param name="reference">Reference to the content where the definition resides</param>
      <returns>Current definition or null if no definition can be found</returns>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionRepositoryExtensions.GetAsync(EPiServer.Approvals.IApprovalDefinitionRepository,System.Int32)">
      <summary>
            Gets the current approval definition version for an approval definition.
            Note that this can be a version that didn't exist when the approval definition were created.
            </summary>
      <param name="repository">The approval definition repository that is being extended</param>
      <param name="id">The identifier of the approval definition</param>
      <returns>Current definition or null if no definition can be found</returns>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalDefinitionRepositoryExtensions.DeleteAsync(EPiServer.Approvals.IApprovalDefinitionRepository,System.Int32)">
      <summary>
            Deletes an approval definition and all versions connected to it.
            </summary>
      <param name="repository">The approval definition repository that is being extended</param>
      <param name="id">The identifier of the approval definition</param>
      <exception cref="T:EPiServer.Approvals.ApprovalInReviewException">The operation cannot be executed due to a conflict with an approval in review</exception>
    </member>
    <member name="T:EPiServer.Approvals.IApprovalDefinitionVersionRepository">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Repository for handling specific approval definition versions
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalDefinitionVersionRepository.GetAsync(System.Int32)">
      <summary>
            Get a specific approval definition version.
            </summary>
      <param name="id">The identifier of the approval definition version</param>
      <returns>The approval definition version</returns>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalDefinitionVersionRepository.DeleteAsync(System.Int32)">
      <summary>
            Deletes an approval definition version.
            If this is the last version for an approval definition, the definition is also deleted.
            </summary>
      <param name="id">The identifier of the approval definition version</param>
      <exception cref="T:EPiServer.Approvals.ApprovalInReviewException">The operation cannot be executed due to a conflict with an approval in review</exception>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalDefinitionVersionRepository.ListAsync(System.Int32)">
      <summary>
            List all approval definition versions for an approval definition.
            </summary>
      <param name="definitionID">The identifier of the approval definition</param>
      <returns>A list of approval definition versions</returns>
    </member>
    <member name="T:EPiServer.Approvals.IApprovalEngine">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Class for running an approval instance
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalEngine.StartAsync(System.Collections.Generic.IEnumerable{System.Uri},System.String,System.Boolean)">
      <summary>
            Start approval instances for a list of approval references.
            </summary>
      <param name="references">A list of approval references</param>
      <param name="username">Name of the user</param>
      <param name="throwOnMissingDefinition">Specifies if an exception should be thrown when an definition is missing or is not enabled</param>
      <returns>A list of approval instances</returns>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.DisabledApprovalDefinitionException">An approval definition was disabled</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalInReviewException">The operation cannot be executed due to a conflict with an approval in review</exception>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalEngine.AbortAsync(System.Collections.Generic.IEnumerable{System.Int32},System.String)">
      <summary>
            Aborts a list of approval instances.
            </summary>
      <param name="ids">A list of approval instance ids</param>
      <param name="username">Name of the user</param>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalEngine.ApproveAsync(System.Int32,System.String,System.Int32,EPiServer.Approvals.ApprovalDecisionScope,System.String)">
      <summary>
            Approves a step in an approval instance. 
            </summary>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to approve. If scope is Force, then this parameter is disregarded</param>
      <param name="scope">Scope of the approve</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalStepIndexException">Step index is currently invalid</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalReviewerStepException">User is not part of the approval definition step</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when approving</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalReviewerSelfApproveException">The user that started the approval is not allowed to approve it</exception>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalEngine.RejectAsync(System.Int32,System.String,System.Int32,EPiServer.Approvals.ApprovalDecisionScope,System.String)">
      <summary>
            Rejects a step in an approval instance. 
            </summary>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to reject. If scope is Force, then this parameter is disregarded</param>
      <param name="scope">Scope of the reject</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalRejectionException">Rejection is not allowed on an approved approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalStepIndexException">Step index is currently invalid</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalReviewerStepException">User is not part of the approval definition step</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when rejecting</exception>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalEngineExtensions">
      <summary>
            Extension method class for <see cref="T:EPiServer.Approvals.IApprovalEngine" /></summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.StartAsync(EPiServer.Approvals.IApprovalEngine,System.Uri,System.String,System.Boolean)">
      <summary>
            Start an approval instance for an approval reference.
            </summary>
      <param name="engine">The approval engine that is being extended</param>
      <param name="reference">Approval reference</param>
      <param name="username">Name of the user</param>
      <param name="throwOnMissingDefinition">Specifies if an exception should be thrown when an definition is missing or is not enabled</param>
      <returns>The approval instance</returns>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.DisabledApprovalDefinitionException">An approval definition was disabled</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalInReviewException">The operation cannot be executed due to a conflict with an approval in review</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.AbortAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String)">
      <summary>
            Aborts an approval instance.
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of an approval instance</param>
      <param name="username">Name of the user</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ApproveAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32,EPiServer.Approvals.ApprovalDecisionScope)">
      <summary>
            Approves a step in an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to approve. If scope is Force, then this parameter is disregarded</param>
      <param name="scope">Scope of the approve</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalStepIndexException">Step index is currently invalid</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalReviewerStepException">User is not part of the approval definition step</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when approving</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.RejectAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32,EPiServer.Approvals.ApprovalDecisionScope)">
      <summary>
            Rejects a step in an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to reject. If scope is Force, then this parameter is disregarded</param>
      <param name="scope">Scope of the reject</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalRejectionException">Rejection is not allowed on an approved approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalStepIndexException">Step index is currently invalid</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalReviewerStepException">User is not part of the approval definition step</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when rejecting</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ApproveStepAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32)">
      <summary>
            Approves a step in an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to approve</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalStepIndexException">Step index is currently invalid</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalReviewerStepException">User is not part of the approval definition step</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when approving</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ApproveStepAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32,System.String)">
      <summary>
            Approves a step in an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to approve</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalStepIndexException">Step index is currently invalid</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalReviewerStepException">User is not part of the approval definition step</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when approving</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceApproveStepAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32)">
      <summary>
            Force approves a step in an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to approve</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when approving</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceApproveStepAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32,System.String)">
      <summary>
            Force approves a step in an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to approve</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when approving</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceApproveAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String)">
      <summary>
            Force approves an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when approving</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceApproveAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.String)">
      <summary>
            Force approves an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when approving</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceApproveAsync(EPiServer.Approvals.IApprovalEngine,System.Collections.Generic.IEnumerable{System.Int32},System.String)">
      <summary>
            Force approves a list of approval instances. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="ids">The identifiers of the approval instances</param>
      <param name="username">Name of the user</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when approving</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceApproveAsync(EPiServer.Approvals.IApprovalEngine,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String)">
      <summary>
            Force approves a list of approval instances. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="ids">The identifiers of the approval instances</param>
      <param name="username">Name of the user</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when approving</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.RejectStepAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32)">
      <summary>
            Rejects a step in an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to reject</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalRejectionException">Rejection is not allowed on an approved approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalStepIndexException">Step index is currently invalid</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalReviewerStepException">User is not part of the approval definition step</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when rejecting</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.RejectStepAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32,System.String)">
      <summary>
            Rejects a step in an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to reject</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalRejectionException">Rejection is not allowed on an approved approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalStepIndexException">Step index is currently invalid</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalReviewerStepException">User is not part of the approval definition step</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when rejecting</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceRejectStepAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32)">
      <summary>
            Force rejects a step in an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to reject</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalRejectionException">Rejection is not allowed on an approved approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when rejecting</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceRejectStepAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32,System.String)">
      <summary>
            Force rejects a step in an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to reject</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalRejectionException">Rejection is not allowed on an approved approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when rejecting</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceRejectAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String)">
      <summary>
            Force rejects an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalRejectionException">Rejection is not allowed on an approved approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when rejecting</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceRejectAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.String)">
      <summary>
            Force rejects an approval instance. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalRejectionException">Rejection is not allowed on an approved approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when rejecting</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceRejectAsync(EPiServer.Approvals.IApprovalEngine,System.Collections.Generic.IEnumerable{System.Int32},System.String)">
      <summary>
            Force rejects a list of approval instances. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="ids">The identifiers of the approval instances</param>
      <param name="username">Name of the user</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalRejectionException">Rejection is not allowed on an approved approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when rejecting</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.ForceRejectAsync(EPiServer.Approvals.IApprovalEngine,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String)">
      <summary>
            Force rejects a list of approval instances. 
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="ids">The identifiers of the approval instances</param>
      <param name="username">Name of the user</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.MissingApprovalDefinitionException">There was a problem finding an approval definition</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalRejectionException">Rejection is not allowed on an approved approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">The approval definition requires a comment when rejecting</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalEngineExtensions.CommentAsync(EPiServer.Approvals.IApprovalEngine,System.Int32,System.String,System.Int32,System.String)">
      <summary>
            Adds a comment to a step in an approval instance
            </summary>
      <param name="engine">The approval engine that is extended</param>
      <param name="id">The identifier of the approval instance</param>
      <param name="username">Name of the user</param>
      <param name="stepIndex">Index of the step to comment</param>
      <param name="comment">An optional comment</param>
      <exception cref="T:EPiServer.Approvals.MissingApprovalException">There was a problem finding an approval</exception>
      <exception cref="T:EPiServer.Approvals.ApprovalMissingCommentException">A comment is required when commenting</exception>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalStepEventHandler">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Event handler signature for <see cref="T:EPiServer.Approvals.ApprovalStepEventArgs" /></summary>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalEventHandler">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Event handler signature for <see cref="T:EPiServer.Approvals.ApprovalEventArgs" /></summary>
    </member>
    <member name="T:EPiServer.Approvals.IApprovalEngineEvents">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Contains events that are raised during the running of an approval instance.
            </summary>
    </member>
    <member name="E:EPiServer.Approvals.IApprovalEngineEvents.StepStarted">
      <summary>
            Occurs when an approval instance step is started.
            </summary>
    </member>
    <member name="E:EPiServer.Approvals.IApprovalEngineEvents.StepApproved">
      <summary>
            Occurs when an approval instance step is approved.
            </summary>
    </member>
    <member name="E:EPiServer.Approvals.IApprovalEngineEvents.StepRejected">
      <summary>
            Occurs when an approval instance step is rejected.
            </summary>
    </member>
    <member name="E:EPiServer.Approvals.IApprovalEngineEvents.Started">
      <summary>
            Occurs when an approval instance is started.
            </summary>
    </member>
    <member name="E:EPiServer.Approvals.IApprovalEngineEvents.Aborted">
      <summary>
            Occurs when an approval instance is aborted.
            </summary>
    </member>
    <member name="E:EPiServer.Approvals.IApprovalEngineEvents.Approved">
      <summary>
            Occurs when an approval instance is approved.
            </summary>
    </member>
    <member name="E:EPiServer.Approvals.IApprovalEngineEvents.Rejected">
      <summary>
            Occurs when an approval instance is rejected.
            </summary>
    </member>
    <member name="E:EPiServer.Approvals.IApprovalEngineEvents.StepCommented">
      <summary>
            Occurs when a step is commented.
            </summary>
    </member>
    <member name="T:EPiServer.Approvals.IApprovalLanguageResolver">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Interface for approval language resolving. 
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalLanguageResolver.ResolveAsync(System.Uri)">
      <summary>
            This method resolvs an approval reference looking for a language.
            </summary>
      <param name="reference">Approval reference</param>
      <returns>The resolved language or InvariantCulture if no language can be found</returns>
    </member>
    <member name="T:EPiServer.Approvals.IApprovalRepository">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Repository for handling approval instances.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalRepository.SaveAsync(System.Collections.Generic.IEnumerable{EPiServer.Approvals.Approval},System.String)">
      <summary>
            Saves a list of approval instances.
            </summary>
      <param name="approvals">List of approval instances</param>
      <param name="username">The user who saved the approvals</param>
      <exception cref="T:EPiServer.Approvals.ApprovalFormatException">The format of the approval is invalid</exception>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalRepository.SaveDecisionAsync(System.Int32,EPiServer.Approvals.ApprovalStepDecision)">
      <summary>
            Saves a decision to an approval instance
            </summary>
      <param name="id">The id of the approval that the decision is associated with</param>
      <param name="decision">The decision to add</param>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalRepository.DeleteAsync(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Deletes a list of approval instances.
            </summary>
      <param name="ids">A list of ids for the approval instances</param>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalRepository.GetItemsAsync(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
            Gets a list of approval instances by using approval references.
            </summary>
      <param name="references">List of approval references</param>
      <returns>A list of approval instances</returns>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalRepository.GetItemsAsync(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Gets a list of approval instances by using ids.
            </summary>
      <param name="ids">List of approval instance ids</param>
      <returns>A list of approval instances</returns>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalRepository.ListAsync(EPiServer.Approvals.ApprovalQuery,System.Int64,System.Int32)">
      <summary>
            Get a filtered and paged list of approval instances.
            </summary>
      <param name="query">Query information</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <returns>Paged list of approval instances</returns>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalRepository.ListDecisionsAsync(System.Int32,System.Nullable{System.Int32})">
      <summary>
            Gets a list of step decisions for an approval instance.
            </summary>
      <param name="id">An approval instance id</param>
      <param name="stepIndex">Filter result for a single step</param>
      <returns>A list of step decisions</returns>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalRepositoryExtensions">
      <summary>
            Extension method class for <see cref="T:EPiServer.Approvals.IApprovalRepository" /></summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRepositoryExtensions.SaveAsync(EPiServer.Approvals.IApprovalRepository,EPiServer.Approvals.Approval,System.String)">
      <summary>
            Saves an approval instance.
            </summary>
      <param name="repository">The approval repository that is being extended</param>
      <param name="approval">An approval instance</param>
      <param name="username">The user who saved the approval</param>
      <returns>The identifier of the approval intance</returns>
      <exception cref="T:EPiServer.Approvals.ApprovalFormatException">The format of the approval is invalid</exception>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRepositoryExtensions.DeleteAsync(EPiServer.Approvals.IApprovalRepository,System.Int32)">
      <summary>
            Deletes an approval instance.
            </summary>
      <param name="repository">The approval repository that is being extended</param>
      <param name="id">The identifier of the approval instance</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRepositoryExtensions.GetAsync(EPiServer.Approvals.IApprovalRepository,System.Int32)">
      <summary>
            Gets an approval instance by using id.
            </summary>
      <param name="repository">The approval repository that is being extended</param>
      <param name="id">The identifier of the approval instance</param>
      <returns>An approval instance</returns>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRepositoryExtensions.GetAsync(EPiServer.Approvals.IApprovalRepository,System.Uri)">
      <summary>
            Gets an approval instance by using approval reference.
            </summary>
      <param name="repository">The approval repository that is being extended</param>
      <param name="reference">Approval reference</param>
      <returns>An approval instance</returns>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRepositoryExtensions.ListAsync(EPiServer.Approvals.IApprovalRepository,EPiServer.Approvals.ApprovalQuery)">
      <summary>
            Get a filtered list of approval instances.
            </summary>
      <param name="repository">The approval repository that is being extended</param>
      <param name="query">Query information</param>
      <returns>List of approval instances</returns>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRepositoryExtensions.ListAsync``1(EPiServer.Approvals.IApprovalRepository,EPiServer.Approvals.ApprovalQuery)">
      <summary>
            Get a filtered list of approval instances.
            </summary>
      <typeparam name="T">Type of approval</typeparam>
      <param name="repository">The approval repository that is being extended</param>
      <param name="query">Query information</param>
      <returns>List of approval instances</returns>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalRepositoryExtensions.ListDecisionsAsync(EPiServer.Approvals.IApprovalRepository,System.Int32)">
      <summary>
            Gets a list of step decisions for an approval instance.
            </summary>
      <param name="repository">The approval repository that is being extended</param>
      <param name="id">An approval instance id</param>
      <returns>A list of step decisions</returns>
    </member>
    <member name="T:EPiServer.Approvals.IApprovalTypeFactory">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Factory for creating a type of approval.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.IApprovalTypeFactory.ApprovalType">
      <summary>
            Identifies the approval type.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.IApprovalTypeFactory.DefinitionReferenceResolver">
      <summary>
            Option of using a custom approval reference resolver. Return null for default.
            </summary>
    </member>
    <member name="P:EPiServer.Approvals.IApprovalTypeFactory.LanguageResolver">
      <summary>
            Option of using a custom approval reference resolver. Return null for default.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalTypeFactory.CreateApproval(System.Uri)">
      <summary>
            Creates an instance of the registered approval class.
            </summary>
      <param name="reference">A reference to an approval</param>
      <returns>A newly created approval</returns>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalTypeFactory.CreateApprovalDefinition(System.Uri)">
      <summary>
            Creates an instance of the registered approval definition class.
            </summary>
      <param name="reference">Reference to an approval definition</param>
      <returns>A newly created approval definition</returns>
    </member>
    <member name="T:EPiServer.Approvals.IApprovalTypeRegistry">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Registry for different types of approvals. 
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalTypeRegistry.Register``2(EPiServer.Approvals.IApprovalTypeFactory)">
      <summary>
            Register a factory to an approval and an approval definition 
            </summary>
      <typeparam name="TApprovalDefinition">A class inherited from ApprovalDefinition</typeparam>
      <typeparam name="TApproval">A class inherited from Approval</typeparam>
      <param name="factory">The approval type factory to register</param>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalTypeRegistry.GetFactory(System.String)">
      <summary>
            Returns a approval type factory registered to an approval type.
            </summary>
      <param name="approvalType">The approval type</param>
      <returns>The registered factory</returns>
    </member>
    <member name="M:EPiServer.Approvals.IApprovalTypeRegistry.GetFactory(System.Type)">
      <summary>
            Returns a approval type factory registered to a class.
            </summary>
      <param name="type">A class inherited from Approval or ApprovalDefinition</param>
      <returns>The registered factory</returns>
    </member>
    <member name="T:EPiServer.Approvals.Internal.ApprovalDefinitionCacheItem">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.Internal.ApprovalDefinitionCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.Internal.ApprovalInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.Internal.DefaultApprovalTypeRegistry">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.Internal.IApprovalEngineEventsRaiser">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Approvals.MissingApprovalDefinitionException">
      <summary>
            Exception that is thrown when an <see cref="T:EPiServer.Approvals.ApprovalDefinition" /> cannot be found.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.MissingApprovalDefinitionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.MissingApprovalDefinitionException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.MissingApprovalDefinitionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.MissingApprovalDefinitionException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.MissingApprovalDefinitionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.MissingApprovalDefinitionException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.MissingApprovalDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.MissingApprovalDefinitionException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.MissingApprovalException">
      <summary>
            Exception that is thrown when an <see cref="T:EPiServer.Approvals.Approval" /> cannot be found.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.MissingApprovalException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.MissingApprovalException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.MissingApprovalException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.MissingApprovalException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.MissingApprovalException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.MissingApprovalException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.MissingApprovalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.MissingApprovalException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Approvals.PagedApprovalResult">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Represents a paged result set for approvals.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.PagedApprovalResult.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Approvals.Approval},System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.PagedApprovalResult" /> class.
            </summary>
      <param name="approvals">The approvals.</param>
      <param name="totalCount">The total count.</param>
    </member>
    <member name="T:EPiServer.Approvals.ApprovalInReviewException">
      <summary>
            Exception that is thrown when an <see cref="T:EPiServer.Approvals.Approval" /> in review exists.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalInReviewException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalInReviewException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalInReviewException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalInReviewException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalInReviewException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Approvals.ApprovalInReviewException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Approvals.ApprovalInReviewException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Approvals.ApprovalInReviewException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.CacheManager">
      <summary>
            Centralized object for handling cache expiration with support for web farms.
            </summary>
      <remarks>
        <para>
            If you need to expire a custom cached item you should call the Remove method 
            instead of calling the .NET methods. This will ensure that your application 
            will operate correctly in a load-balanced environment. There are also some 
            helper methods to add items to the cache.
            </para>
        <b>
          <i>Note</i>
        </b> CacheManager does not have its own internal cache, it will operate 
            against the global ASP.NET Cache class.
            </remarks>
    </member>
    <member name="F:EPiServer.CacheManager.LocalCacheManagerRaiserId">
      <summary>
            The ID of the local cache manager. 
            </summary>
      <remarks>
            Used by the remote event system to identify who originally created an event and determine appropriate action.
            </remarks>
    </member>
    <member name="F:EPiServer.CacheManager.RemoveFromCacheEventId">
      <summary>
            The ID used to identify cache removals requested by the CacheManager.
            </summary>
    </member>
    <member name="F:EPiServer.CacheManager.VersionKey">
      <summary>
            The name of the cache key that is updated on every cache change handled by CacheManager.
            </summary>
    </member>
    <member name="M:EPiServer.CacheManager.Remove(System.String)">
      <summary>
            Removes item from the local cache and other remote cache listeners.
            </summary>
      <param name="key">The cache key to remove</param>
      <remarks>This method will automatically forward updates
            to other machines. Do not use this method in loops, since every call could result
            in a web service call to multiple machines. The recommended pattern when you have
            multiple items that needs to be removed is to have a master dependency item that can
            be removed instead, to trigger all items to be removed.</remarks>
    </member>
    <member name="M:EPiServer.CacheManager.RemoveLocalOnly(System.String)">
      <summary>
            Removes item from the local cache and other remote cache listeners.
            </summary>
      <param name="key">The cache key to remove</param>
    </member>
    <member name="M:EPiServer.CacheManager.RemoveRemoteOnly(System.String)">
      <summary>
            Removes item from remote cache listeners.
            </summary>
      <param name="key">The cache key to remove</param>
      <remarks>This method will not update version or remove item from local
            cache.</remarks>
    </member>
    <member name="M:EPiServer.CacheManager.Insert(System.String,System.Object)">
      <summary>
            Inserts an item in the cache.
            </summary>
      <param name="key">The string key of the item.</param>
      <param name="value">The item value.</param>
    </member>
    <member name="M:EPiServer.CacheManager.Insert(System.String,System.Object,EPiServer.Framework.Cache.CacheEvictionPolicy)">
      <summary>
            Inserts an item in the cache.
            </summary>
      <param name="key">The string key of the item.</param>
      <param name="value">The item value.</param>
      <param name="evictionPolicy">The eviction policy.</param>
    </member>
    <member name="M:EPiServer.CacheManager.Get(System.String)">
      <summary>
            Gets an item from the cache.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.CacheManager.CacheImplementation">
      <summary>
            Gets or sets the cache implementation that CacheManager uses.
            </summary>
      <value>
            The cache implementation.
            </value>
    </member>
    <member name="M:EPiServer.CacheManager.Clear">
      <summary>
            Removes all items that have been added to the cache.
            </summary>
      <note>
            Currently only the local cache is affected.
            </note>
    </member>
    <member name="T:EPiServer.ChildrenEventArgs">
      <summary>
            Event arguments passed from <see cref="T:EPiServer.IContentLoader" />.
            </summary>
    </member>
    <member name="M:EPiServer.ChildrenEventArgs.#ctor(EPiServer.Core.ContentReference,System.Collections.Generic.List{EPiServer.Core.IContent})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ChildrenEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="children">The children.</param>
      <remarks>
            Will initialize the required access level to AccessLevel.Read.
            </remarks>
    </member>
    <member name="M:EPiServer.ChildrenEventArgs.#ctor(EPiServer.Core.ContentReference,System.Collections.Generic.List{EPiServer.Core.IContent},EPiServer.Security.AccessLevel)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ChildrenEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="children">The children.</param>
      <param name="requiredAccess">The required access.</param>
    </member>
    <member name="P:EPiServer.ChildrenEventArgs.ChildrenItems">
      <summary>
            The children that the event applies to.
            </summary>
      <remarks>Changing this object may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.ChildrenEventArgs.ContentLink">
      <summary>
            The reference to the contetn item that the event applies to.
            </summary>
      <remarks>Changing this object may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.ChildrenEventArgs.Creator">
      <summary>
            This property keeps track of the class/instance that created the page object.
            </summary>
      <remarks>
            Note that this property should only be set if you are creating a new PageData instance,
            not if you are just updating information in an existing object.
            </remarks>
    </member>
    <member name="P:EPiServer.ChildrenEventArgs.CancelAction">
      <summary>
            Set value to abort the current event handling.
            </summary>
      <remarks>Changing this value may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.ChildrenEventArgs.CancelReason">
      <summary>
            Gets or sets the reason for cancel.
            </summary>
      <value>The cancel reason.</value>
      <remarks>
            If the cancellation results in an EPiServerCancelAction, this string will be used as the message in the exception.
            </remarks>
    </member>
    <member name="P:EPiServer.ChildrenEventArgs.Items">
      <summary>
            Gets a key-value collection that can be used to organize and share data between events handlers during an event chain.
            </summary>
    </member>
    <member name="P:EPiServer.ChildrenEventArgs.RequiredAccess">
      <summary>
            The required access that the event applies to.
            </summary>
    </member>
    <member name="T:EPiServer.ChildrenEventHandler">
      <summary>
            The delegate type used to generate children-related events from <see cref="T:EPiServer.Core.IContentEvents" /></summary>
    </member>
    <member name="T:EPiServer.Construction.BuildingContext">
      <summary>
            Contains the context information used to build up a <see cref="T:EPiServer.Core.IContentData" /> instance.
            </summary>
    </member>
    <member name="M:EPiServer.Construction.BuildingContext.#ctor(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Construction.BuildingContext" /> class.
            </summary>
      <param name="contentType">Type of the content.</param>
    </member>
    <member name="P:EPiServer.Construction.BuildingContext.ContentType">
      <summary>
            Gets the <see cref="P:EPiServer.Construction.BuildingContext.ContentType" /> to use.
            </summary>
    </member>
    <member name="P:EPiServer.Construction.BuildingContext.ContentLink">
      <summary>
            Gets or sets the reference for the content instance.
            </summary>
      <remarks>
            For new unsaved pages it should be <see cref="F:EPiServer.Core.ContentReference.EmptyReference" /></remarks>
    </member>
    <member name="P:EPiServer.Construction.BuildingContext.Parent">
      <summary>
            Gets or sets the reference for the Parent of the content.
            </summary>
    </member>
    <member name="P:EPiServer.Construction.BuildingContext.LanguageSelector">
      <summary>
            Gets or sets the language selector to use to set the language of the content.
            </summary>
    </member>
    <member name="P:EPiServer.Construction.BuildingContext.SetPropertyValues">
      <summary>
            Gets or sets a value indicating whether the builder should set property values, e.g. default and inherited values.
            </summary>
      <remarks>
            The default value is true which means default and inherited values will be set.
            </remarks>
      <value>
        <c>true</c> if property values should be set; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:EPiServer.Construction.ConstructorParameterResolver">
      <summary>
            Resolves constructor parameters for types that have non default constructors. Will call registered <see cref="T:EPiServer.Construction.IConstructorParameterResolver" />
            instances to resolve the parameters.
            </summary>
      <remarks>
            Uses reflection to find the constructor with most parameters and tries to find parameters for that constructor.
            </remarks>
    </member>
    <member name="P:EPiServer.Construction.ConstructorParameterResolver.Instance">
      <summary>
            Gets the singleton instance.
            </summary>
      <remarks>
            The singleton is registered in IOC container. This is a convinent property to get the singelton instance for those
            who do not want to care about that there exist an IOC container.
            </remarks>
      <value>The instance.</value>
    </member>
    <member name="M:EPiServer.Construction.ConstructorParameterResolver.RegisterResolver(EPiServer.Construction.IConstructorParameterResolver,System.Reflection.Assembly)">
      <summary>
            Registers the resolver for types in specified Assembly.
            </summary>
      <remarks>
            The registered instance might only be called when resolving constructor parameters for types in the specified assembly.
            </remarks>
      <param name="resolver">The resolver.</param>
      <param name="assembly">The assembly.</param>
    </member>
    <member name="M:EPiServer.Construction.ConstructorParameterResolver.GetConstructorArguments(System.Type)">
      <summary>
            Gets the constructor arguments to use for given type.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Construction.ContentFactoryExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.Construction.IContentFactory" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.Construction.ContentFactoryExtensions.CreateContent(EPiServer.Construction.IContentFactory,EPiServer.DataAbstraction.ContentType)">
      <summary>
            Creates an <see cref="T:EPiServer.Core.IContent" /> instance and populates the instance with properties according to the passed in <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <param name="contentFactory">The content factory this method extends</param>
      <param name="contentType">The type of content that should be created.</param>
      <returns>A new <see cref="T:EPiServer.Core.IContent" /> instance.</returns>
    </member>
    <member name="T:EPiServer.Construction.IConstructorParameterResolver">
      <summary>
            Signature for component that resolves dependencies to use in construction of types. 
            </summary>
      <remarks>
            This is used when resolving dependencies during creation of <see cref="T:EPiServer.Core.IContent" /> implementations (like PageData, BlockData) and 
            <see cref="T:EPiServer.Core.PropertyData" /> implementations.
            </remarks>
    </member>
    <member name="M:EPiServer.Construction.IConstructorParameterResolver.TryResolveArguments(System.Type,System.Type[],System.Object[]@)">
      <summary>
            Called when an instance of <paramref name="typeToConstruct" /> is to be created using a constructor
            with dependencies according to <paramref name="constructorArguments" />.
            </summary>
      <remarks>
        <para>
            The implementation is expected to return true if the dependencies could be resolved else false should be returned.
            </para>
        <para>
            The returned dependencies <paramref name="instances" /> must match <paramref name="constructorArguments" /> both
            in type and number.
            </para>
      </remarks>
      <param name="typeToConstruct">The type to construct.</param>
      <param name="constructorArguments">The constructor arguments.</param>
      <param name="instances">The instances.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Construction.IContentDataBuilder">
      <summary>
            Defines the signature for a component that adds properties to a <see cref="T:EPiServer.Core.IContentData" /> instance.
            </summary>
    </member>
    <member name="M:EPiServer.Construction.IContentDataBuilder.AddProperties(EPiServer.Core.IContentData,EPiServer.Construction.BuildingContext)">
      <summary>
            Adds properties to the given <paramref name="contentData" /> according to the <paramref name="buildingContext" /></summary>
      <param name="contentData">The contentData to populate with properties.</param>
      <param name="buildingContext">The building context to use when building up the instance.</param>
    </member>
    <member name="T:EPiServer.Construction.IContentDataFactory`1">
      <summary>
            Defines the signature for a component that is responsible for constructing <see cref="T:EPiServer.Core.IContentData" /> instances.
            </summary>
      <typeparam name="TContentData">The type of the <see cref="T:EPiServer.Core.ContentData" /> to create.</typeparam>
    </member>
    <member name="M:EPiServer.Construction.IContentDataFactory`1.CreateInstance(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Creates a new <typeparamref name="TContentData" /> instance of the specified content type.
            </summary>
      <param name="contentType">Type indicating what type of content to create.</param>
      <returns>
            A new <typeparamref name="TContentData" /> instance.
            </returns>
    </member>
    <member name="M:EPiServer.Construction.IContentDataFactory`1.CreateInstance``1">
      <summary>
            Creates a new <typeparamref name="TContentData" /> instance of the type specified by <typeparamref name="TTypedData" />.
            </summary>
      <typeparam name="TTypedData">Type indicating what type of content to create.</typeparam>
      <returns>
            A new <typeparamref name="TTypedData" /> instance.
            </returns>
    </member>
    <member name="T:EPiServer.Construction.IContentFactory">
      <summary>
            Factory class for creating <see cref="T:EPiServer.Core.IContent" /> instances according to the <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
    </member>
    <member name="M:EPiServer.Construction.IContentFactory.CreateContent(EPiServer.DataAbstraction.ContentType,EPiServer.Construction.BuildingContext)">
      <summary>
            Creates an <see cref="T:EPiServer.Core.IContent" /> instance and populates the instance with properties according to the passed in <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <param name="contentType">The type of content that should be created.</param>
      <param name="buildingContext">The building context that decides how default values and inherited values should be set.</param>
      <returns>A new <see cref="T:EPiServer.Core.IContent" /> instance.</returns>
    </member>
    <member name="T:EPiServer.Construction.Internal.ContentDataBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.Construction.IContentDataBuilder" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataBuilder.#ctor(EPiServer.Construction.IPropertyDataFactory,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Construction.IContentDataFactory{EPiServer.Core.BlockData},EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Construction.Internal.IPageDataMetadataBuilder,EPiServer.Core.IContentLanguageAccessor,EPiServer.Security.IPrincipalAccessor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Construction.Internal.ContentDataBuilder" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Construction.Internal.ContentDataBuilder.RequestTimeGetter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delegate to get current time for request, default implementation is Context.Current.RequestTime.
            </summary>
      <remarks>
            This is exposed mainly for testing purposes to avoid having to set up BaseLibrary in tests.
            </remarks>
      <value>The request time getter.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Construction.Internal.ContentDataBuilder.LanguageBranchRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the language branch repository.
            </summary>
      <value>The language branch repository.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataBuilder.ValidateParameters(EPiServer.Core.IContentData,EPiServer.Construction.BuildingContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the parameters.
            </summary>
      <param name="contentData">The content data.</param>
      <param name="buildingContext">The building context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataBuilder.AddProperties(EPiServer.Core.IContentData,EPiServer.Construction.BuildingContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds properties to the <paramref name="contentData" /> according to the <paramref name="buildingContext" /></summary>
      <param name="contentData">The contentData to populate with properties.</param>
      <param name="buildingContext">The building context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataBuilder.SetIdentity(EPiServer.Core.IContent,EPiServer.Construction.BuildingContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the identity of the IContent instance
            </summary>
      <param name="content">The content.</param>
      <param name="buildingContext">The building context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataBuilder.SetLanguageProperties(EPiServer.Core.IContent,EPiServer.Core.ILanguageSelector)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the language properties for the page according to the passed in languageSelector
            </summary>
      <param name="content">The content.</param>
      <param name="languageSelector">The language selector.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataBuilder.AddContentTypeProperties(EPiServer.Core.IContentData,EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds the content type properties.
            </summary>
      <param name="contentData">The content data.</param>
      <param name="contentType">Type of the content.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataBuilder.SetInheritedData(EPiServer.Core.IContent,EPiServer.Core.IContent,EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets any system defined default values inherited from their parents.
            </summary>
      <param name="content">The content.</param>
      <param name="parentData">The parent page data.</param>
      <param name="contentType">Type of the content.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataBuilder.SetDefaultPropertyValues(EPiServer.Core.IContentData,EPiServer.Core.IContentData,EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the default property values.
            </summary>
      <param name="child">The child.</param>
      <param name="parent">The parent.</param>
      <param name="type">The type.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Construction.Internal.ContentDataFactory`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an instance of <see cref="T:EPiServer.Core.IContentData" /> instances of specified <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <typeparam name="TContentData">The type of the <see cref="T:EPiServer.Core.IContentData" /> to create.</typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataFactory`1.#ctor(EPiServer.DataAbstraction.RuntimeModel.IContentDataActivator,EPiServer.ServiceLocation.IServiceLocator,EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Construction.Internal.ContentDataFactory`1" /> class.
            </summary>
      <param name="contentDataActivator">The activator instance used to instanciate content data objects.</param>
      <param name="serviceLocator">The service locator used as a secondary means of creating content data.</param>
      <param name="contentTypeBaseResolver">The content type base resolver</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataFactory`1.CreateInstance(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new <typeparamref name="TContentData" /> instance of the specified content type.
            </summary>
      <param name="contentType">Type indicating what type of content to create.</param>
      <returns>
            A new <typeparamref name="TContentData" /> instance.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Thrown if the data type defined by the provided content type does not match the return value type.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataFactory`1.CreateInstance``1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new <typeparamref name="TContentData" /> instance of the type specified by <typeparamref name="TTypedData" />.
            </summary>
      <typeparam name="TTypedData">Type indicating what type of content to create.</typeparam>
      <returns>
            A new <typeparamref name="TTypedData" /> instance.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataFactory`1.ResolveContentDataType(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves the <see cref="T:System.Type" /> of <see cref="T:EPiServer.Core.ContentData" /> from the given type and assembly name specified.
            </summary>
      <param name="modelTypeString">The model type string.</param>
      <returns>
            The <see cref="T:System.Type" /> that matches the provided type and assembly string.
            </returns>
      <remarks>
            Will return the type of <typeparamref name="TContentData" /> if the specified type cannot be found.
            Override this if you want to change this fallback behavior.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentDataFactory`1.CreateInstance(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance of the specified model type.
            </summary>
      <param name="modelType">Type of the model to create.</param>
      <returns>A new instance of the given type.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Construction.Internal.ContentFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class for creating content data instances such as <see cref="T:EPiServer.Core.PageData" />, Shared blocks and <see cref="T:EPiServer.Core.IContent" /> according to 
            the <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <remarks>
            This classes encapsulates various factories and builders used to create and build up various content instances depending on the <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentFactory.#ctor(EPiServer.Construction.ISharedBlockFactory,EPiServer.Construction.IContentDataFactory{EPiServer.Core.IContent},EPiServer.Construction.IContentDataFactory{EPiServer.Core.PageData},EPiServer.Construction.IContentDataBuilder,EPiServer.Construction.IPropertyDataFactory,EPiServer.Framework.Cache.IObjectInstanceCache,EPiServer.Core.IContentCacheKeyCreator,EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Construction.Internal.ContentFactory" /> class.
            </summary>
      <param name="sharedblockFactory">The block host factory used to create shared block instances.</param>
      <param name="contentFactory">The content factory used to create <see cref="T:EPiServer.Core.IContent" /> instances that are not pages or hosted blocks.</param>
      <param name="pageDataFactory">The page factory used to create <see cref="T:EPiServer.Core.PageData" /> instances.</param>
      <param name="contentDataBuilder">The content data builder used to build up <see cref="T:EPiServer.Core.IContent" /> that are not <see cref="T:EPiServer.Core.PageData" /> instances.</param>
      <param name="propertyDataFactory">The property data factory used by <paramref name="contentDataBuilder" /></param>
      <param name="cache">The cache used</param>
      <param name="contentCacheKeyCreator">The creator of cache keys</param>
      <param name="contentTypeBaseResolver">The content type base resolver</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Construction.Internal.ContentFactory.SharedBlockFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the block host factory used to create shared <see cref="T:EPiServer.Core.BlockData" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Construction.Internal.ContentFactory.ContentDataBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content data builder used to add <see cref="T:EPiServer.Core.PropertyData" /> instances to a <see cref="T:EPiServer.Core.IContent" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Construction.Internal.ContentFactory.PropertyDataFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the property data factory used to create <see cref="T:EPiServer.Core.PropertyData" /> instances.
            </summary>
      <value>The property data factory.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Construction.Internal.ContentFactory.PageDataFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the PageData factory used to create <see cref="T:EPiServer.Core.PageData" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Construction.Internal.ContentFactory.IContentFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content factory used to create <see cref="T:EPiServer.Core.IContent" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentFactory.CreateContent(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an instance of <see cref="T:EPiServer.Core.IContent" /> and populates the instance with properties according to the passed in <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <param name="contentType">Type of the content.</param>
      <returns>
      </returns>
      <remarks>
            The implemetation will call overload with a BuildingContext set so no property values are set.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.ContentFactory.CreateContent(EPiServer.DataAbstraction.ContentType,EPiServer.Construction.BuildingContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an instance of <see cref="T:EPiServer.Core.IContent" /> and populates the instance with properties according to the passed in <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="buildingContext">The building context.</param>
      <returns>
      </returns>
      <remarks>
        <para>
            Depending on type of <paramref name="contentType" /> (e.g. <see cref="T:EPiServer.DataAbstraction.PageType" />, <see cref="T:EPiServer.DataAbstraction.BlockType" />) the suitable encapsulated factory
            and builder instance will be used to create and build up an <see cref="T:EPiServer.Core.IContent" /> instance.
            </para>
        <para>
            Depending on <paramref name="buildingContext" /> default values and inherited values will be set.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.DefaultPageDataMetadataBuilder.CreateMetaDataProperty(EPiServer.DataAbstraction.MetaDataProperties.MetaData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructs a PropertyData instance of a specific type.
            </summary>
      <param name="metaData">Describes the type to construct.</param>
      <returns>The constructed instance.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.DefaultPageDataMetadataBuilder.SetupRequiredProperties(EPiServer.Core.PropertyDataCollection)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Setup the required properties.
            </summary>
      <param name="properties">A collection of properties.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Construction.Internal.DynamicBlockFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory to create DynamicBlocks which makes it possible to add a block property to 
            a content instance that is not part of the <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.DynamicBlockFactory.#ctor(EPiServer.Construction.IPropertyDataFactory,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.Construction.IContentDataBuilder,EPiServer.Construction.IContentDataFactory{EPiServer.Core.BlockData})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Construction.Internal.DynamicBlockFactory" /> class.
            </summary>
      <param name="propertyDataFactory">The property data factory.</param>
      <param name="contentTypeRepository">The block type repository.</param>
      <param name="propertyDefinitionTypeRepository">The property definition type repository.</param>B
            <param name="contentDataBuilder">The content data builder.</param><param name="blockDataFactory">The block data factory.</param><exclude /></member>
    <member name="M:EPiServer.Construction.Internal.DynamicBlockFactory.CreateDynamicBlock``1(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a typed dynamic block.
            </summary>
      <typeparam name="T">Type inheriting <see cref="T:EPiServer.Core.BlockData" />.</typeparam>
      <param name="dynamicBlockName">Name of the dynamic block.</param>
      <returns>The dynamic block created.</returns>
      <exception cref="T:System.ArgumentException">Thrown if the <paramref name="dynamicBlockName" /> contains any reserved text.</exception>
      <remarks>
        <para>A dynamic block is a block property that is not defined on any <see cref="T:EPiServer.DataAbstraction.PageType" />.</para>
        <para>The <paramref name="dynamicBlockName" /> cannot contain either '.', ':' or 'D:'.</para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.DynamicBlockFactory.CreateDynamicBlock(EPiServer.DataAbstraction.BlockPropertyDefinitionType,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a dynamic block using a specific definition.
            </summary>
      <param name="blockPropertyDefinitionType">Type of the block property definition.</param>
      <param name="dynamicBlockName">Name of the dynamic block.</param>
      <returns>The dynamic block created.</returns>
      <remarks>A dynamic block is a block property that is not defined on any <see cref="T:EPiServer.DataAbstraction.PageType" />.</remarks>
      <exception cref="T:System.ArgumentException">Thrown if the <paramref name="dynamicBlockName" /> contains any reserved text.</exception>
      <remarks>
        <para>A dynamic block is a block property that is not defined on any <see cref="T:EPiServer.DataAbstraction.PageType" />.</para>
        <para>The <paramref name="dynamicBlockName" /> cannot contain either '.', ':' or 'D:'.</para>
      </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Construction.Internal.IPageDataMetadataBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Construction.Internal.IPropertyBlockBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Defines the signature for a component that builds up <see cref="T:EPiServer.SpecializedProperties.IPropertyBlock" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.IPropertyBlockBuilder.AddProperties(EPiServer.SpecializedProperties.IPropertyBlock,EPiServer.DataAbstraction.BlockPropertyDefinitionType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds backing <see cref="T:EPiServer.Core.PropertyData" /> properties to a <see cref="T:EPiServer.SpecializedProperties.IPropertyBlock" /> instance.
            </summary>
      <param name="blockProperty">The block property to add backing data for</param>
      <param name="blockDefintionType">The property definition for the block property</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Construction.Internal.PropertyDataFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.Construction.IPropertyDataFactory" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.PropertyDataFactory.#ctor(EPiServer.Construction.ConstructorParameterResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Construction.Internal.PropertyDataFactory" /> class.
            </summary>
      <param name="constructorParameterResolver">The constructor parameter resolver.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.PropertyDataFactory.CreateProperty(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new <see cref="T:EPiServer.Core.PropertyData" /> instance according to the specified <paramref name="definition" />.
            </summary>
      <param name="definition">The definition describing the property.</param>
      <returns>
            A new <see cref="T:EPiServer.Core.PropertyData" /> instance.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.PropertyDataFactory.CreateInstance(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new <see cref="T:EPiServer.Core.PropertyData" /> instance that matches the
            provided <paramref name="typeName" /> and <paramref name="assemblyName" />.
            </summary>
      <param name="typeName">The full name of the <see cref="T:System.Type" /> of the <see cref="T:EPiServer.Core.PropertyData" /> object.</param>
      <param name="assemblyName">The full name of the assembly where the <see cref="T:System.Type" /> of the <see cref="T:EPiServer.Core.PropertyData" /> resides.</param>
      <returns>
            A new <see cref="T:EPiServer.Core.PropertyData" /> instance.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.PropertyDataFactory.TryCreateInstance(System.String,System.String,EPiServer.Core.PropertyData@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to create a new <see cref="T:EPiServer.Core.PropertyData" /> instance that matches the
            provided <paramref name="typeName" /> and <paramref name="assemblyName" />.
            </summary>
      <param name="typeName">The full type name to use.</param>
      <param name="assemblyName">The assembly name to use.</param>
      <param name="instance">The instance that is instanciated by the method.</param>
      <returns>
        <c>true</c> if the <see cref="T:EPiServer.Core.PropertyData" /> instance was created successfully; <c>false</c> otherwise.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.PropertyDataFactory.CreateInstance(EPiServer.Core.PropertyDataType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new <see cref="T:EPiServer.Core.PropertyData" /> instance that matches the
            provided <paramref name="dataType" />.
            </summary>
      <param name="dataType">The <see cref="T:EPiServer.Core.PropertyDataType" /> describing the type of the <see cref="T:EPiServer.Core.PropertyData" /> to create.</param>
      <returns>
            A new <see cref="T:EPiServer.Core.PropertyData" /> instance that matches the given <see cref="T:EPiServer.Core.PropertyDataType" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="dataType" /> does not map to a known data type.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.PropertyDataFactory.CreateInstance(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new <see cref="T:EPiServer.Core.PropertyData" /> instance that matches the
            provided <paramref name="type" /> argument.
            </summary>
      <param name="type">The type of property that should be created.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Construction.Internal.SharedBlockFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementaion of <see cref="T:EPiServer.Construction.ISharedBlockFactory" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.SharedBlockFactory.#ctor(EPiServer.Construction.IContentDataBuilder,EPiServer.Construction.ConstructorParameterResolver,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Construction.Internal.SharedBlockFactory" /> class.
            </summary>
      <param name="blockDataBuilder">The block data builder.</param>
      <param name="constructorParameterResolver">The constructor parameter resolver.</param>
      <param name="contentDataInterceptorAccessor">The content data interceptor accessor.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.SharedBlockFactory.CreateAndPopulateSharedBlock(EPiServer.DataAbstraction.BlockType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a shared instance of a block of type defined by <paramref name="blockType" />.
            </summary>
      <param name="blockType">Type of the block.</param>
      <returns>
      </returns>
      <remarks>
            This is the method used by system to create a proxy implementing <see cref="T:EPiServer.Core.IContent" /> for a block when loading from database.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Construction.Internal.SharedBlockFactory.CreateSharedBlock(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a IContent instance by creating a proxy of passed in type (must inherit <see cref="T:EPiServer.Core.IContentData" />)
            and a MixIn class that implements <see cref="T:EPiServer.Core.IContent" />.
            </summary>
      <param name="modelType">Type of the model.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Construction.IPropertyDataFactory">
      <summary>
            Defines the signature for a component that constructs <see cref="T:EPiServer.Core.PropertyData" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.Construction.IPropertyDataFactory.CreateProperty(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Creates a new <see cref="T:EPiServer.Core.PropertyData" /> instance and populates it with data 
            according to the specified <paramref name="definition" />.
            </summary>
      <param name="definition">The definition describing the property.</param>
      <returns>
            A new <see cref="T:EPiServer.Core.PropertyData" /> instance.
            </returns>
    </member>
    <member name="M:EPiServer.Construction.IPropertyDataFactory.CreateInstance(System.String,System.String)">
      <summary>
            Creates a new <see cref="T:EPiServer.Core.PropertyData" /> instance that matches the
            provided <paramref name="typeName" /> and <paramref name="assemblyName" />.
            </summary>
      <param name="typeName">The full name of the <see cref="T:System.Type" /> of the <see cref="T:EPiServer.Core.PropertyData" /> object.</param>
      <param name="assemblyName">The full name of the assembly where the <see cref="T:System.Type" /> of the <see cref="T:EPiServer.Core.PropertyData" /> resides.</param>
      <returns>
            A new <see cref="T:EPiServer.Core.PropertyData" /> instance.
            </returns>
    </member>
    <member name="M:EPiServer.Construction.IPropertyDataFactory.TryCreateInstance(System.String,System.String,EPiServer.Core.PropertyData@)">
      <summary>
            Tries to create a new <see cref="T:EPiServer.Core.PropertyData" /> instance that matches the
            provided <paramref name="typeName" /> and <paramref name="assemblyName" />.
            </summary>
      <param name="typeName">Name of the type.</param>
      <param name="assemblyName">Name of the assembly.</param>
      <param name="instance">The instance that is instanciated by the method.</param>
      <returns>
        <c>true</c> if the <see cref="T:EPiServer.Core.PropertyData" /> instance was created successfully; <c>false</c> otherwise.
            </returns>
    </member>
    <member name="M:EPiServer.Construction.IPropertyDataFactory.CreateInstance(EPiServer.Core.PropertyDataType)">
      <summary>
            Creates a new <see cref="T:EPiServer.Core.PropertyData" /> instance that matches the
            provided <paramref name="dataType" />.
            </summary>
      <param name="dataType">The <see cref="T:EPiServer.Core.PropertyDataType" /> describing the type of the <see cref="T:EPiServer.Core.PropertyData" /> to create.</param>
      <returns>
            A new <see cref="T:EPiServer.Core.PropertyData" /> instance that matches the given <see cref="T:EPiServer.Core.PropertyDataType" />.
            </returns>
    </member>
    <member name="T:EPiServer.Construction.ISharedBlockFactory">
      <summary>
            Defines signature for a factory that creates shared instances of <see cref="T:EPiServer.Core.BlockData" /></summary>
    </member>
    <member name="M:EPiServer.Construction.ISharedBlockFactory.CreateAndPopulateSharedBlock(EPiServer.DataAbstraction.BlockType)">
      <summary>
            Creates a shared instance of a block of type defined by <paramref name="blockType" />.
            </summary>
      <param name="blockType">Type of the block.</param>
      <returns>
      </returns>
      <remarks>
        <para>
            This is the method used by system to create a proxy implementing <see cref="T:EPiServer.Core.IContent" /> for a block when loading from database.
            </para>
        <para>
            This method will populate the block instance with <see cref="T:EPiServer.Core.PropertyData" /> instances according to the <paramref name="blockType" />.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Construction.ISharedBlockFactory.CreateSharedBlock(System.Type)">
      <summary>
            Creates a IContent instance by creating a proxy of passed in type (in case of shared block a type inheriting <see cref="T:EPiServer.Core.BlockData" />)
            and a MixIn class that implements <see cref="T:EPiServer.Core.IContent" />.
            </summary>
      <remarks>
            The created IContent will not have backing <see cref="T:EPiServer.Core.PropertyData" /> instance in place. Use method <see cref="M:EPiServer.Construction.ISharedBlockFactory.CreateAndPopulateSharedBlock(EPiServer.DataAbstraction.BlockType)" />
            to get instance populated as well.
            </remarks>
      <param name="modelType">Type of the model.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Construction.IFolderIDGenerator">
      <summary>
            Definies the signature for a component that generates folder ids.
            </summary>
    </member>
    <member name="M:EPiServer.Construction.IFolderIDGenerator.GenerateFolderID(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Generates a folder id for a content.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="parentLink">The parent link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Construction.IFolderIDGenerator.GetNextAvailableFolderID">
      <summary>
            Gets the next available unique folder id.
            </summary>
    </member>
    <member name="T:EPiServer.Construction.IPageDataBuilder">
      <summary>
            Defines the signature for a component that add properties to a <see cref="T:EPiServer.Core.PageData" /> instance.
            </summary>
      <remarks>
            The typical usage is to call AddProperties which will add both metadata and pagetype properties and depending on <see cref="T:EPiServer.Construction.BuildingContext" /> 
            set values for properties. For use case where more control is needed the other methods can be used to build up the page.
            </remarks>
    </member>
    <member name="M:EPiServer.Construction.IPageDataBuilder.AddPageTypeProperties(EPiServer.Core.PageData,EPiServer.DataAbstraction.PageType)">
      <summary>
            Inserts properties defined for the given page type into page data. 
            </summary>
      <param name="page">The PageData  object to update</param>
      <param name="pageType">The type of the page.</param>
    </member>
    <member name="M:EPiServer.Construction.IPageDataBuilder.AddMetaDataProperties(EPiServer.Core.PageReference,EPiServer.Core.PageData,EPiServer.DataAbstraction.PageType,EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Adds the meta data properties.
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="page">The page.</param>
      <param name="pageType">Type of the page.</param>
      <param name="parentLink">The parent link.</param>
      <param name="setPropertyValues">if set to <c>true</c> values will be set on the added meta data properties.</param>
    </member>
    <member name="M:EPiServer.Construction.IPageDataBuilder.SetInheritedPageData(EPiServer.Core.PageData,EPiServer.Core.IContent,EPiServer.DataAbstraction.PageType)">
      <summary>
            Sets the values of properties that inherits data from the parent page.
            </summary>
      <param name="page">The page data.</param>
      <param name="parentData">The parent data.</param>
      <param name="pageType">Type of the page.</param>
    </member>
    <member name="T:EPiServer.Construction.PageDataBuilder">
      <summary>
            Default implementation of PageDataBuilder
            </summary>
    </member>
    <member name="M:EPiServer.Construction.PageDataBuilder.AddProperties(EPiServer.Core.IContentData,EPiServer.Construction.BuildingContext)">
      <summary>
            Adds properties to the <paramref name="contentData" /> according to the <paramref name="buildingContext" /></summary>
      <param name="contentData">The contentData to populate with properties.</param>
      <param name="buildingContext">The building context.</param>
    </member>
    <member name="M:EPiServer.Construction.PageDataBuilder.AddPageTypeProperties(EPiServer.Core.PageData,EPiServer.DataAbstraction.PageType)">
      <summary>
            Inserts properties defined for the given page type into page data. 
            </summary>
      <param name="page">The PageData  object to update</param>
      <param name="pageType">The type of the page.</param>
      <remarks>
            This method is primarily intended for EPiServer internal use. 
            </remarks>
    </member>
    <member name="M:EPiServer.Construction.PageDataBuilder.AddMetaDataProperties(EPiServer.Core.PageReference,EPiServer.Core.PageData,EPiServer.DataAbstraction.PageType,EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Adds the meta data properties.
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="page">The page.</param>
      <param name="pageType">Type of the page.</param>
      <param name="parentContentLink">The parent page link.</param>
      <param name="setPropertyValues">if set to <c>true</c> [set required].</param>
    </member>
    <member name="M:EPiServer.Construction.PageDataBuilder.SetInheritedPageData(EPiServer.Core.PageData,EPiServer.Core.IContent,EPiServer.DataAbstraction.PageType)">
      <summary>
            Adds inherited property data.
            </summary>
      <param name="page">The page data.</param>
      <param name="parentData">The parent page data.</param>
      <param name="pageType">Type of the page.</param>
    </member>
    <member name="M:EPiServer.Construction.PageDataBuilder.SetInheritedData(EPiServer.Core.IContent,EPiServer.Core.IContent,EPiServer.DataAbstraction.ContentType)">
      <summary>
            Adds inherited property data.
            </summary>
      <param name="content">The content.</param>
      <param name="parentData">The parent page data.</param>
      <param name="contentType">Type of the content.</param>
    </member>
    <member name="M:EPiServer.Construction.PageDataBuilder.SetupRequiredProperties(EPiServer.Core.PropertyDataCollection)">
      <summary>
            Setup the required properties.
            </summary>
      <param name="properties">A collection of properties.</param>
    </member>
    <member name="M:EPiServer.Construction.PageDataBuilder.CreateMetaDataProperty(EPiServer.DataAbstraction.MetaDataProperties.MetaData)">
      <summary>
            Constructs a PropertyData instance of a specific type.
            </summary>
      <param name="metaData">Describes the type to construct.</param>
      <returns>The constructed instance.</returns>
    </member>
    <member name="T:EPiServer.ContentEventArgs">
      <summary>
            Event arguments used when content is loaded, saved etc.
            </summary>
    </member>
    <member name="M:EPiServer.ContentEventArgs.#ctor(EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ContentEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link the event applies to.</param>
    </member>
    <member name="M:EPiServer.ContentEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ContentEventArgs" /> class.
            </summary>
      <param name="contentLink">The source content link.</param>
      <param name="targetLink">The target content link.</param>
      <remarks>
            Primarily used for move operations where you have a source and target.
            </remarks>
    </member>
    <member name="M:EPiServer.ContentEventArgs.#ctor(EPiServer.Core.IContent)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ContentEventArgs" /> class.
            </summary>
      <param name="content">The content that the event applies to.</param>
    </member>
    <member name="M:EPiServer.ContentEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.IContent)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ContentEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="content">The content.</param>
    </member>
    <member name="M:EPiServer.ContentEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.IContent,EPiServer.Security.AccessLevel)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ContentEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="content">The content.</param>
      <param name="requiredAccess">The required access level for the operation.</param>
    </member>
    <member name="P:EPiServer.ContentEventArgs.ContentLink">
      <summary>
            The Content that the event applies to
            </summary>
      <remarks>Changing this object may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.ContentEventArgs.TargetLink">
      <summary>
            The parent that the event applies to
            </summary>
      <remarks>Changing this object may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.ContentEventArgs.Content">
      <summary>
            The content that the event applies to
            </summary>
      <remarks>Changing this object may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.ContentEventArgs.Creator">
      <summary>
            This property keeps track of the class/instance that created the page object.
            </summary>
      <remarks>
            Note that this property should only be set if you are creating a new PageData instance,
            not if you are just updating information in an existing object.
            </remarks>
    </member>
    <member name="P:EPiServer.ContentEventArgs.CancelAction">
      <summary>
            Set value to abort the current event handling
            </summary>
      <remarks>Changing this value may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.ContentEventArgs.CancelReason">
      <summary>
            Gets or sets the reason for cancel.
            </summary>
      <value>The cancel reason.</value>
      <remarks>
            If the cancellation results in an EPiServerCancelAction, this string will be used as the message in the exception.
            </remarks>
    </member>
    <member name="P:EPiServer.ContentEventArgs.Items">
      <summary>
            Gets a key-value collection that can be used to organize and share data between events handlers during an event chain.
            </summary>
    </member>
    <member name="P:EPiServer.ContentEventArgs.RequiredAccess">
      <summary>
            The required access that the event applies to.
            </summary>
      <remarks>
            This applies to the destination access if both source and destination are applicable.
            </remarks>
    </member>
    <member name="T:EPiServer.MoveContentEventArgs">
      <summary>
            Event arguments passed from <see cref="T:EPiServer.IContentRepository" /> for content move related events.
            </summary>
    </member>
    <member name="M:EPiServer.MoveContentEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.MoveContentEventArgs" /> class.
            </summary>
      <param name="contentLink">The page link.</param>
      <param name="destinationLink">The destination link.</param>
    </member>
    <member name="P:EPiServer.MoveContentEventArgs.OriginalParent">
      <summary>
            Gets or sets the original (before move) parent for ContentLink
            </summary>
      <value>The previous parent.</value>
    </member>
    <member name="P:EPiServer.MoveContentEventArgs.OriginalContentLink">
      <summary>
            Gets the original (before move) reference for the Content that is being moved. 
            </summary>
      <value>The previous content reference.</value>
      <remarks>
            In most cases is <see cref="P:EPiServer.MoveContentEventArgs.OriginalContentLink" /> and <see cref="P:EPiServer.ContentEventArgs.ContentLink" /> equal. The exception is when a content item
            is moved between content providers. Then in <see cref="E:EPiServer.Core.IContentEvents.MovedContent" /> will <see cref="P:EPiServer.MoveContentEventArgs.OriginalContentLink" />
            be the reference to the content it had before the move operation while <see cref="P:EPiServer.ContentEventArgs.ContentLink" /> will be the new reference
            after the move operation. 
            </remarks>
    </member>
    <member name="P:EPiServer.MoveContentEventArgs.Descendents">
      <summary>
            Gets or sets a list of references to any descendents that will also be affected by the move operation.
            </summary>
    </member>
    <member name="T:EPiServer.SaveContentEventArgs">
      <summary>
            Event arguments used for save-related events.
            </summary>
    </member>
    <member name="M:EPiServer.SaveContentEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.IContent)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SaveContentEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="content">The content.</param>
    </member>
    <member name="M:EPiServer.SaveContentEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SaveContentEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="content">The content.</param>
      <param name="action">The save action to perform.</param>
    </member>
    <member name="P:EPiServer.SaveContentEventArgs.RequireNewVersion">
      <summary>
            Gets or sets a value indicating whether the save operation will force a new version of the content.
            </summary>
      <value>
        <c>true</c> if force new version; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.SaveContentEventArgs.ForceCurrentVersion">
      <summary>
            Gets or sets a value indicating whether to save to overwrite the current version.
            </summary>
      <value>
        <c>true</c> if force overwrite of current version; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.SaveContentEventArgs.MaskedAction">
      <summary>
            Gets the save action without any Force... flags.
            </summary>
      <value>The masked action.</value>
    </member>
    <member name="P:EPiServer.SaveContentEventArgs.Action">
      <summary>
            Gets the requested save action.
            </summary>
      <value>The save action.</value>
    </member>
    <member name="P:EPiServer.SaveContentEventArgs.Transition">
      <summary>
            Gets information on the transition that will happen or that has just completed.
            </summary>
      <remarks>
            Changes made to the save action by modifying the <see cref="P:EPiServer.SaveContentEventArgs.RequireNewVersion" /> or <see cref="P:EPiServer.SaveContentEventArgs.ForceCurrentVersion" />
            on this <see cref="T:EPiServer.SaveContentEventArgs" /> might affect the transition, but this will not be reflected in this object.
            </remarks>
    </member>
    <member name="T:EPiServer.CopyContentEventArgs">
      <summary>
            Event arguments used for content copy operations.
            </summary>
    </member>
    <member name="M:EPiServer.CopyContentEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CopyContentEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="sourceLink">The source link.</param>
      <param name="targetLink">The target link.</param>
    </member>
    <member name="P:EPiServer.CopyContentEventArgs.SourceContentLink">
      <summary>
            The content that is being copied
            </summary>
      <remarks>Changing this object will not change the behavior of a copy operation.</remarks>
    </member>
    <member name="T:EPiServer.ContentLanguageEventArgs">
      <summary>
            EventArgs used with Content Language related events
            </summary>
    </member>
    <member name="M:EPiServer.ContentLanguageEventArgs.#ctor(EPiServer.Core.IContent)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ContentLanguageEventArgs" /> class.
            </summary>
      <param name="content">The page.</param>
    </member>
    <member name="P:EPiServer.ContentLanguageEventArgs.IsMasterLanguageBranch">
      <summary>
            Gets a value indicating whether this instance is master language branch.
            </summary>
      <value>
        <c>true</c> if this instance is master language branch; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.ContentLanguageEventArgs.Language">
      <summary>
            The current language for the content instance.
            </summary>
      <remarks>
            If the content does not implement <see cref="T:EPiServer.Core.ILocale" /> (or <see cref="T:EPiServer.Core.ILocalizable" />) null is retuned.
            </remarks>
    </member>
    <member name="P:EPiServer.ContentLanguageEventArgs.MasterLanguage">
      <summary>
            The current master language for the content instance.
            </summary>
      <remarks>
            If the content does not implement <see cref="T:EPiServer.Core.ILocale" /> (or <see cref="T:EPiServer.Core.ILocalizable" />) null is retuned.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.AccessDeniedException">
      <summary>
            Exception thrown when access to a EPiServer resource is denied.
            </summary>
      <remarks>
            This exception is commonly thrown when you are denied access to perform an 
            action on a specific content using <see cref="T:EPiServer.IContentRepository" />. For debugging scenarios you 
            can use the <see cref="P:EPiServer.Core.AccessDeniedException.ContentLink" /> property for the source page of an exception. 
            </remarks>
    </member>
    <member name="M:EPiServer.Core.AccessDeniedException.#ctor">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.AccessDeniedException" /></summary>
    </member>
    <member name="M:EPiServer.Core.AccessDeniedException.#ctor(System.String)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.AccessDeniedException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:EPiServer.Core.AccessDeniedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.AccessDeniedException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Core.AccessDeniedException.#ctor(EPiServer.Core.ContentReference)">
      <summary>
             Initializes the new instance of <see cref="T:EPiServer.Core.AccessDeniedException" /> providing the reference to the page on which it is raised 
            </summary>
      <param name="contentLink">
      </param>
    </member>
    <member name="M:EPiServer.Core.AccessDeniedException.#ctor(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.AccessDeniedException" />
            providing the reference to the page on which it is raised and other details
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="details">The details.</param>
    </member>
    <member name="M:EPiServer.Core.AccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.AccessDeniedException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:EPiServer.Core.AccessDeniedException.ContentLink">
      <summary>
            The content that generated the exception.
            </summary>
    </member>
    <member name="T:EPiServer.Core.BasicContent">
      <summary>
            A basic implementation of <see cref="T:EPiServer.Core.IContent" />.
            Can be used as base class for custom <see cref="T:EPiServer.Core.IContent" /> implementations.
            </summary>
    </member>
    <member name="P:EPiServer.Core.BasicContent.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:EPiServer.Core.BasicContent.ContentLink">
      <summary>
            Gets or sets the content link. It used to hold references to content in the EPiServer system.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="P:EPiServer.Core.BasicContent.ParentLink">
      <summary>
            Gets or sets the parent link. It used to hold references to the parent content in the EPiServer system.
            </summary>
      <value>
            The parent link.
            </value>
    </member>
    <member name="P:EPiServer.Core.BasicContent.ContentGuid">
      <summary>
            Gets or sets the content GUID.
            </summary>
      <value>
            The content GUID.
            </value>
    </member>
    <member name="P:EPiServer.Core.BasicContent.ContentTypeID">
      <summary>
            Gets or sets the content type ID that this <see cref="T:EPiServer.Core.BasicContent" /> is an instance of.
            </summary>
      <value>The content type ID.</value>
    </member>
    <member name="P:EPiServer.Core.BasicContent.IsDeleted">
      <summary>
            Gets or sets a value indicating whether this instance is deleted.
            </summary>
      <value>
        <c>true</c> if this instance is deleted; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.BasicContent.Created">
      <summary>
            Gets the date and time when this content instance was created.
            </summary>
      <value>
      </value>
      <remarks>
        <b>Created</b> is maintained by the EPiServer infrastructure and you have no control over them.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.BasicContent.CreatedBy">
      <summary>
            Gets the username of the user that created this content instance.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:EPiServer.Core.BasicContent.Changed">
      <summary>
            Gets the date when this content instance was last marked as changed.
            </summary>
      <value>
      </value>
      <remarks>
            The changed date is only updated when property <see cref="P:EPiServer.Core.BasicContent.SetChangedOnPublish" /> is set to <c>true</c>.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.BasicContent.SetChangedOnPublish">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:EPiServer.Core.BasicContent.Changed" /> should be updated on publish.
            </summary>
      <value>
        <c>true</c> if <see cref="P:EPiServer.Core.BasicContent.Changed" /> should be updated; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.BasicContent.ChangedBy">
      <summary>
            Gets the username of the user that most recently changed this content instance.
            </summary>
      <value>
      </value>
      <remarks>
            For instance, if a Windows account was used to create the instance, expect a string
            being returned looking like 'DOMAIN\User Name'.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.BasicContent.Saved">
      <summary>
            Gets the date and time when this content instance was last saved.
            </summary>
      <value>
      </value>
      <remarks>
            Saved is the sibling of <see cref="P:EPiServer.Core.BasicContent.Created" /> and is maintained by the EPiServer infrastructure.
            This means that you have no control over them.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.BasicContent.DeletedBy">
      <summary>
            Gets or sets the deleted by.
            </summary>
      <value>
            The deleted by.
            </value>
    </member>
    <member name="P:EPiServer.Core.BasicContent.Deleted">
      <summary>
            Gets or sets the deleted date.
            </summary>
      <value>
            The deleted date.
            </value>
    </member>
    <member name="M:EPiServer.Core.BasicContent.CreateWriteableCloneImplementation">
      <summary>
            Creates a writable clone of this object.
            </summary>
      <returns>A clone of this object that is writable.</returns>
      <remarks>
        <para>
            This method is called by <see cref="M:EPiServer.Data.Entity.IReadOnly.CreateWritableClone" />. If you are inheriting, directly or indirectly, from
            <see cref="T:EPiServer.Core.ContentData" /> you should override this method to make sure that all reference type members of your class are cloned.
            </para>
        <para>
            Your override of this method <strong>must</strong> create the clone by calling <c>base.CreateWritableCloneImplementation()</c>. This ensures that all
            classes in the inheritance chain can create clones as necessary. Also, by calling the base implementation the values of all value
            type members are copied as the <see cref="T:EPiServer.Core.ContentData" /> implementation of this method calls <see cref="M:System.Object.MemberwiseClone()" />.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.BasicContent.ResetModified">
      <summary>
            Resets the modified flag on all the properties in the <see cref="P:EPiServer.Core.IContentData.Property" /> collection.
            </summary>
    </member>
    <member name="P:EPiServer.Core.BasicContent.IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.BasicContent.MakeReadOnly">
      <summary>
            Makes the current instance and all it's properties read-only.
            </summary>
      <remarks>
            After calling this method the <see cref="P:EPiServer.Data.Entity.IReadOnly.IsReadOnly" /> property will return <c>true</c>.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.BasicContent.EPiServer#Core#Transfer#IExportable#ShouldBeImplicitlyExported">
      <summary>
            Gets a value indicating whether this instance should be implicitly added to export package when referenced
            by some entity that is exported.
            </summary>
      <value>
        <c>true</c> if instance should implicity be added to export package when referenced; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.BasicContent.ShouldBeImplicitlyExported">
      <summary>
            Gets a value indicating whether this instance should be implicitly added to export package when referenced
            by some entity that is exported.
            </summary>
      <remarks>
            Default implementation returns true.
            </remarks>
      <value>
        <c>true</c> if instance should implicity be added to export package when referenced; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Core.BlockData">
      <summary>
                Contains information about a specific block.
            </summary>
      <example>
                The following example shows how you can create a custom block data:
                <code source="../CodeSamples/EPiServer/Core/BlockDataSamples.cs" region="BlockData" /></example>
    </member>
    <member name="M:EPiServer.Core.BlockData.CreateWritableClone">
      <summary>
            Creates a writable clone of this object.
            </summary>
      <returns>A clone of this object.</returns>
    </member>
    <member name="T:EPiServer.Core.CacheSettings">
      <summary>
            Holds information about which settings that should be used when a <see cref="T:EPiServer.Core.IContent" /> instance or an children listing is added to the runtime cache.
            </summary>
    </member>
    <member name="M:EPiServer.Core.CacheSettings.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.CacheSettings" /> class.
            </summary>
      <param name="slidingExpiration">The sliding expiration.</param>
    </member>
    <member name="P:EPiServer.Core.CacheSettings.CancelCaching">
      <summary>
            Gets or sets a value indicating whether the content/listing should be added to cache.
            If value is true to the content/listing will not be added to cache.
            </summary>
      <value>
        <c>true</c> if the content/listing should not be added to cache; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.CacheSettings.SlidingExpiration">
      <summary>
            The interval between the time the added object was last accessed and the time at which that object expires. 
            If absolute expiration is used, the slidingExpiration parameter must be "System.Web.Caching.Cache.NoSlidingExpiration". 
            </summary>
      <value>The sliding expiration.</value>
    </member>
    <member name="P:EPiServer.Core.CacheSettings.AbsoluteExpiration">
      <summary>
            The time at which the added object expires and is removed from the cache. 
            If you are using sliding expiration, the absoluteExpiration parameter must be "System.Web.Caching.Cache.NoAbsoluteExpiration".
            </summary>
      <value>The absolute expiration.</value>
    </member>
    <member name="P:EPiServer.Core.CacheSettings.CacheKeys">
      <summary>
            An list of cache keys that is monitored for changes. When any of these cache keys changes, the cached content instance becomes obsolete and is removed from the cache. 
            </summary>
      <value>The cache keys.</value>
    </member>
    <member name="P:EPiServer.Core.CacheSettings.MasterKeys">
      <summary>
            An list of master keys that is monitored for changes. When any of these cache keys changes, the cached content instance becomes obsolete and is removed from the cache. 
            </summary>
      <remarks>
            Master keys are used as markers to set up common dependencies without having to create the cache entries first.
            If you set up a master key dependency, there is no need for the corresponding entry to exist before adding 
            something that depends on the master key.
            </remarks>
      <value>The cache keys.</value>
    </member>
    <member name="P:EPiServer.Core.CacheSettings.FileNames">
      <summary>
            An list of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached IContent becomes obsolete and is removed from the cache. 
            </summary>
      <value>The file names.</value>
    </member>
    <member name="T:EPiServer.Core.CannotMoveProviderException">
      <summary>
            Thrown when this page or some of it's descendants is parent to a content provider and it can't be deleted.
            </summary>
    </member>
    <member name="M:EPiServer.Core.CannotMoveProviderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.CannotMoveProviderException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.CannotMoveProviderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.CannotMoveProviderException" /> class.
            </summary>
      <param name="message">Error message</param>
    </member>
    <member name="M:EPiServer.Core.CannotMoveProviderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.CannotMoveProviderException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:EPiServer.Core.CannotMoveProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.CannotMoveProviderException" /> class.
            </summary>
      <param name="serializationInfo">The serialization info.</param>
      <param name="streamingContext">The streaming context.</param>
    </member>
    <member name="T:EPiServer.Core.CategoryList">
      <summary>
            Datatype for categories. Used to classify pages with system-wide categories.
            </summary>
      <remarks>
        <para>
            CategoryList is a lightweight collection of <see cref="T:System.Int32" /> values pointing to categories. 
            Used primarily from the <see cref="P:EPiServer.Core.PageData.Category" /> property 
            on <see cref="T:EPiServer.Core.PageData" /> class which holds page information.
            </para>
      </remarks>
      <example>
            Example of enumeration all categories on a page
            <code source="../CodeSamples/EPiServer/Core/CategoryListSamples.cs" region="EnumCats" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.Core.CategoryList.#ctor">
      <summary>
            Initializes a new empty instance of the <see cref="T:EPiServer.Core.CategoryList" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.CategoryList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.CategoryList" /> class.
            </summary>
      <param name="categoryType">The content definition id of the category or 0 if it's the built in page categories.</param>
    </member>
    <member name="M:EPiServer.Core.CategoryList.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.CategoryList" /> class with an initial set of categories.
            </summary>
      <param name="categories">The categories that the <see cref="T:EPiServer.Core.CategoryList" /> should be initialized with.</param>
    </member>
    <member name="M:EPiServer.Core.CategoryList.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.CategoryList" /> class with an initial set of categories.
            </summary>
      <param name="categoryType">The content definition id of the category or 0 if it's the built in page categories.</param>
      <param name="categories">The categories that the <see cref="T:EPiServer.Core.CategoryList" /> should be initialized with.</param>
      <exception cref="T:System.ArgumentNullException">categories</exception>
    </member>
    <member name="M:EPiServer.Core.CategoryList.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>A new instance of <see cref="T:EPiServer.Core.CategoryList" /> with the values from the current instance.</returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.Contains(System.Int32)">
      <summary>
            /// Determines whether an element is in the list.
            </summary>
      <param name="category">The item</param>
      <returns>true if item is found in the list; otherwise, false.</returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.Add(System.Int32)">
      <summary>
            Add a category to the existing CategoryList.
            </summary>
      <param name="category">The category to add.</param>
    </member>
    <member name="M:EPiServer.Core.CategoryList.Remove(System.Int32)">
      <summary>
            Remove a category from the existing CategoryList.
            </summary>
      <param name="category">The category to remove.</param>
      <returns>
        <c>true</c> if success; otherwise <c>false</c></returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.Clear">
      <summary>
            Remove all categories from list.
            </summary>
    </member>
    <member name="P:EPiServer.Core.CategoryList.IsEmpty">
      <summary>
            Gets a value that indicates if the list contains any categories at all.
            </summary>
    </member>
    <member name="P:EPiServer.Core.CategoryList.CategoryType">
      <summary>
            Gets the page definition id for this category list.
            </summary>
      <value>The page definition id of the category.</value>
      <remarks>Returns 0 for built in page categories.</remarks>
    </member>
    <member name="P:EPiServer.Core.CategoryList.Count">
      <summary>
            Gets the number of categories contained in the collection. 
            </summary>
    </member>
    <member name="P:EPiServer.Core.CategoryList.IsModified">
      <summary>
            Gets a value indicating whether this <see cref="T:EPiServer.Core.CategoryList" /> has been modified after loading.
            </summary>
    </member>
    <member name="M:EPiServer.Core.CategoryList.ResetModified">
      <summary>
            Resets the modified flag on all the data contained on this <see cref="T:EPiServer.Core.CategoryList" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.CategoryList.MemberOf(System.Int32)">
      <summary>
            Checks if this <see cref="T:EPiServer.Core.CategoryList" /> belongs to a specific category.
            </summary>
      <param name="category">The category (int) to check.</param>
      <returns>
        <b>True</b> if the category is a member of this <see cref="T:EPiServer.Core.CategoryList" /></returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.MemberOfAny(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Checks if any of the categories provided in the list exist in this <see cref="T:EPiServer.Core.CategoryList" />.
            </summary>
      <param name="categories">The categories to check.</param>
      <returns>
        <b>True</b> if at least one of the categories exist in this <see cref="T:EPiServer.Core.CategoryList" />.</returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.MemberOfAll(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Check if all categories in the provided list exist in this <see cref="T:EPiServer.Core.CategoryList" />.
            </summary>
      <param name="categories">The categories to check.</param>
      <returns>
        <b>True</b> if all categories exists in this <see cref="T:EPiServer.Core.CategoryList" />.</returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.op_Equality(EPiServer.Core.CategoryList,EPiServer.Core.CategoryList)">
      <summary>
            Implements the operator == to compare two <see cref="T:EPiServer.Core.CategoryList" /> instances.
            </summary>
      <param name="x">The first <see cref="T:EPiServer.Core.CategoryList" />.</param>
      <param name="y">The second <see cref="T:EPiServer.Core.CategoryList" />.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.op_Inequality(EPiServer.Core.CategoryList,EPiServer.Core.CategoryList)">
      <summary>
            Implements the operator != to compare two <see cref="T:EPiServer.Core.CategoryList" /> instances..
            </summary>
      <param name="x">The first <see cref="T:EPiServer.Core.CategoryList" />.</param>
      <param name="y">The second <see cref="T:EPiServer.Core.CategoryList" />.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="o">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.ToString">
      <summary>
            Returns a comma separated <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A comma separated <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.MakeReadOnly">
      <summary>
            Changes the object instance into a read-only object.
            </summary>
      <remarks>
            After calling this method, any attempt to change the object instance or any contained object
            will generate a <see cref="T:System.NotSupportedException" />. I e the semantics is "deep read-only".
            <para>
            Note! After setting an object to read-only it is not possible to revert back to read-write mode.
            You will have to call the CreateWritableClone method to get a copy that can be modified.
            </para></remarks>
    </member>
    <member name="P:EPiServer.Core.CategoryList.IsReadOnly">
      <summary>
            Indicates if the current object instance is read-only.
            </summary>
      <value>True if the current object instance is read-only; otherwise false.</value>
    </member>
    <member name="M:EPiServer.Core.CategoryList.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates writable clone of this object.
            </summary>
      <returns>Writable clone object.</returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.CreateWritableClone">
      <summary>
            Create a copy of the current object instance that is writable.
            </summary>
      <returns>A new copy of the object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.CategoryList.ThrowIfReadOnly">
      <summary>
            Throws an <see cref="T:System.NotSupportedException" /> if this instance is set to read only.
            </summary>
    </member>
    <member name="M:EPiServer.Core.CategoryList.IndexOf(System.Int32)">
      <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the range of elements in the list
            that starts at the specified index and contains the specified number of elements.
            </summary>
      <param name="item">The item.</param>
      <returns>
            The zero-based index of the first occurrence of item within the range of
            elements in the list that extends from index
            to the last element, if found; otherwise, â€“1.
            </returns>
    </member>
    <member name="M:EPiServer.Core.CategoryList.Insert(System.Int32,System.Int32)">
      <summary>
            Inserts an element into the Slist at the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="item">The item.</param>
    </member>
    <member name="M:EPiServer.Core.CategoryList.RemoveAt(System.Int32)">
      <summary>
            Removes the link at the specified index.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="P:EPiServer.Core.CategoryList.Item(System.Int32)">
      <summary>
            Gets the item at the specified index.
            </summary>
      <value>The item at the specified index.</value>
    </member>
    <member name="M:EPiServer.Core.CategoryList.CopyTo(System.Int32[],System.Int32)">
      <summary>
            Copies the entire list to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
      <param name="array">
            The one-dimensional System.Array that is the destination of the elements 
            copied from list. The System.Array must have
            zero-based indexing.
            </param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:EPiServer.Core.CategoryList.Parse(System.String)">
      <summary>
            Parse a string with comma-separated categories to a <see cref="T:EPiServer.Core.CategoryList" />.
            </summary>
      <param name="complexReference">A comma-separated string with category ids.</param>
    </member>
    <member name="M:EPiServer.Core.CategoryList.Parse(System.String,System.Int32)">
      <summary>
            Parse a string with comma-separated categories to a <see cref="T:EPiServer.Core.CategoryList" />.
            </summary>
      <param name="complexReference">A comma-separated string with category ids.</param>
      <param name="categoryType">The category type that the created <see cref="T:EPiServer.Core.CategoryList" /> should have</param>
    </member>
    <member name="T:EPiServer.Core.ContentArea">
      <summary>
            Represents an structure that controls how Content are placed in an area.
            </summary>
      <remarks>
            This class is a container of string fragments each representing where a content
            is placed in the area.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentArea.#ctor">
      <summary>
            Initializes a new empty instance of the <see cref="T:EPiServer.Core.ContentArea" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentArea.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentArea" /> class with the passed value.
            </summary>
      <param name="unparsedString">The value that should be assigned to the new instace.</param>
    </member>
    <member name="P:EPiServer.Core.ContentArea.FragmentFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the content fragment factory.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.ContentArea.MarkupGeneratorFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the content fragment factory.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.ContentArea.Tag">
      <summary>
            Gets or sets the tag for the Content Area.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentArea.Items">
      <summary>
            Gets the items hosted by this <see cref="T:EPiServer.Core.ContentArea" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentArea.CreateContentAreaItemCollection">
      <summary>
            Creates a ContentAreaItem collection from the current <see cref="M:Fragments" /> collection.
            </summary>
      <remarks>
            The returned collection is made read-only if the <see cref="M:IsReadOnly" /> flag is set.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentArea.MakeReadOnly">
      <summary>
            Makes this instance read only.
            </summary>
      <remarks>
            It will also make its <see cref="M:Fragments" /> and <see cref="M:ContentAreaItem" />s readonly.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.ContentArea.FilteredItems">
      <summary>
            Gets the <see cref="T:EPiServer.Core.ContentAreaItem" />s filtered by publish status, permissions and personalization.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentArea.ContentFragments">
      <exclude />
    </member>
    <member name="P:EPiServer.Core.ContentArea.FilteredContentFragments">
      <exclude />
    </member>
    <member name="P:EPiServer.Core.ContentArea.Contents">
      <exclude />
    </member>
    <member name="P:EPiServer.Core.ContentArea.FilteredContents">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentArea.Add(EPiServer.Core.IContent)">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentArea.Add(EPiServer.Core.IContent,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <summary>
            Adds a content
            </summary>
      <param name="content">The content.</param>
      <param name="securedFragmentMarkupGenerator">The secured fragment markup generator.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentArea.Add(EPiServer.Core.IContent,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentArea.Insert(System.Int32,EPiServer.Core.IContent)">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentArea.Insert(System.Int32,EPiServer.Core.IContent,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentArea.Insert(System.Int32,EPiServer.Core.IContent,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentArea.Remove(EPiServer.Core.IContent)">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentArea.Filter(System.Security.Principal.IPrincipal)">
      <summary>
            Gets the <see cref="T:EPiServer.Core.ContentAreaItem" />s filtered by publish status, permissions and personalization.
            </summary>
      <param name="principal">The principal for which the items are filtered</param>
      <value>
            The filtered content area items.
            </value>
    </member>
    <member name="M:EPiServer.Core.ContentArea.RemoveContentFragment(System.Int32)">
      <summary>
            Remove a content fragment from the fragments collection
            </summary>
      <param name="index">The index of Fragments</param>
    </member>
    <member name="P:EPiServer.Core.ContentArea.Count">
      <summary>
            Returns the number of content fragments found
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentArea.Move(System.Int32,System.Int32)">
      <summary>
            Moves a content from one position to another.
            </summary>
      <param name="oldIndex">The old index. Start index is 0.</param>
      <param name="newIndex">The new index. Start index is 0.</param>
    </member>
    <member name="M:EPiServer.Core.ContentArea.Copy">
      <summary>
            Creates a deep copy of this instance.
            </summary>
      <returns>A copy of the current instance.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentArea.CreateWriteableCloneImplementation">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.ContentArea.CreateWritableClone">
      <summary>
            Creates the writable clone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentArea.CreateStringFragments(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.ContentArea.OnAddingFragment(System.Object,EPiServer.Core.Html.StringParsing.StringFragmentEventArgs)">
      <summary>
            Called when a fragment is added to the <see cref="M:Fragments" /> collection
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentArea.OnRemovingFragment(System.Object,EPiServer.Core.Html.StringParsing.StringFragmentEventArgs)">
      <summary>
            Called when a fragment is removed from the <see cref="M:Fragments" /> collection
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentArea.OnChangingFragment(System.Object,EPiServer.Core.Html.StringParsing.StringFragmentEventArgs)">
      <summary>
            Called when a fragment is changed in the <see cref="M:Fragments" /> collection
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentArea.OnContentAreaItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Called when ContentAreaItems collection changes.
            </summary>
      <param name="sender">The changed collection.</param>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Core.ContentArea.AddContentAreaItemsToFragments(System.Collections.IList,System.Int32)">
      <summary>
            Adds a collection of content area items to the fragments collection.
            </summary>
      <param name="items">The <see cref="T:EPiServer.Core.ContentAreaItem" /> instances to add.</param>
      <param name="startIndex">The start index for insertion.</param>
    </member>
    <member name="M:EPiServer.Core.ContentArea.ModifyCollectionInternally(System.Action)">
      <summary>
            Helper method when modifying the fragments and content area collections to prevent us from 
            ending up in an infinite loop when change events are raised.
            </summary>
      <param name="modification">The modification to perform.</param>
    </member>
    <member name="P:EPiServer.Core.ContentArea.ReferencedPermanentLinkIds">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this property.
            </summary>
      <value>
            An <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this property.
            </value>
    </member>
    <member name="M:EPiServer.Core.ContentArea.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>
            Remaps permanent links according to the provided link mapping.
            </summary>
      <param name="idMap">The link mapping.</param>
    </member>
    <member name="T:EPiServer.Core.ContentAreaItem">
      <summary>
            The model for item that will be rendered in a <see cref="T:EPiServer.Core.ContentArea" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentAreaItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentAreaItem" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentAreaItem.#ctor(EPiServer.Core.Html.StringParsing.ContentFragment)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentAreaItem" /> class.
            </summary>
      <param name="fragment">The inner fragment.</param>
    </member>
    <member name="P:EPiServer.Core.ContentAreaItem.ContentLink">
      <summary>
            Gets or sets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="P:EPiServer.Core.ContentAreaItem.ContentGuid">
      <summary>
            Gets or sets the content Guid.
            </summary>
      <value>
            The content Guid.
            </value>
    </member>
    <member name="P:EPiServer.Core.ContentAreaItem.ContentGroup">
      <summary>
            Gets or sets the content group that has been selected for this <see cref="T:EPiServer.Core.ContentAreaItem" />.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentAreaItem.DisplayOption">
      <summary>
            Gets or sets the <see cref="P:EPiServer.Core.ContentAreaItem.DisplayOption" /> that has been selected for this <see cref="T:EPiServer.Core.ContentAreaItem" />.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.ContentAreaItem.RenderSettings">
      <summary>
            Gets or sets a dictionary of key values that can be used to customize the rendering of the <see cref="T:EPiServer.Core.ContentAreaItem" />.
            </summary>
      <remarks>
            To set the display option of this <see cref="T:EPiServer.Core.ContentAreaItem" />, add an entry with the key <see cref="F:EPiServer.Core.Html.StringParsing.ContentFragment.ContentDisplayOptionAttributeName" /> 
            and the value being the id of the <see cref="T:EPiServer.Web.DisplayOption" />.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.ContentAreaItem.AllowedRoles">
      <summary>
            Gets or sets a collection of roles which this <see cref="T:EPiServer.Core.ContentAreaItem" /> should be restricted to.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentAreaItem.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentAreaItem.CreateWritableClone">
      <summary>
            Creates the writable clone.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentAreaItem.MakeReadOnly">
      <summary>
            Makes this instance read only.
            </summary>
    </member>
    <member name="T:EPiServer.Core.ContentAreaItemExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.Core.ContentArea" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentAreaItemExtensions.GetContent(EPiServer.Core.ContentAreaItem)">
      <summary>
            Gets the content for a <see cref="T:EPiServer.Core.ContentAreaItem" /></summary>
      <param name="item">The content area item.</param>
      <returns>An <see cref="T:EPiServer.Core.IContent" /> instance.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentAreaItemExtensions.GetContent(EPiServer.Core.ContentAreaItem,EPiServer.IContentLoader)">
      <summary>
            Gets the content for a <see cref="T:EPiServer.Core.ContentAreaItem" /></summary>
      <param name="item">The item.</param>
      <param name="contentLoader">The content loader to use.</param>
      <returns>An <see cref="T:EPiServer.Core.IContent" /> instance.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentAreaItemExtensions.LoadDisplayOption(EPiServer.Core.ContentAreaItem)">
      <summary>
            Loads the <see cref="T:EPiServer.Web.DisplayOption" /> for the current <see cref="T:EPiServer.Core.ContentAreaItem" /> if set in the <see cref="P:EPiServer.Core.ContentAreaItem.RenderSettings" /> dictionary.
            </summary>
      <param name="contentAreaItem">The content area item.</param>
      <returns>A <see cref="T:EPiServer.Web.DisplayOption" /> instance or null if the id is not found in the render settings.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentAreaItemExtensions.LoadDisplayOption(EPiServer.Core.ContentAreaItem,EPiServer.Web.DisplayOptions)">
      <summary>
            Loads the <see cref="T:EPiServer.Web.DisplayOption" /> for the current <see cref="T:EPiServer.Core.ContentAreaItem" /> if set in the <see cref="P:EPiServer.Core.ContentAreaItem.RenderSettings" /> dictionary.
            </summary>
      <param name="contentAreaItem">The content area item.</param>
      <param name="displayOptions">The DisplayOptions registry</param>
      <returns>A <see cref="T:EPiServer.Web.DisplayOption" /> instance or null if the id is not found in the render settings.</returns>
    </member>
    <member name="T:EPiServer.Core.ContentAssetFolder">
      <summary>
            Represents a folder in the content assets tree. A content asset folder is used to host assets related to a content item.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentAssetFolder.ContentOwnerID">
      <summary>
            The content item that owns this asset folder
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentAssetFolder.Attach(EPiServer.Core.IContent)">
      <summary>
            Attaches this folder instance as asset folder for specified content instance.
            </summary>
      <param name="content">The content.</param>
      <exception cref="T:System.ArgumentNullException">If the specified content is null.</exception>
      <exception cref="T:System.ArgumentException">If the specified content does not implement IResourcable</exception>
      <remarks>
            The attach method will only set references between the content and the asset folder.
            Both content and folder needs to be saved to persist the connection.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentAssetFolder.GetContentSecurityDescriptor">
      <summary>
            Returns the owners ACL
            </summary>
      <returns>The ACL of the owner</returns>
    </member>
    <member name="T:EPiServer.Core.ContentAssetHelper">
      <summary>
            Helper class used when working with assets.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentAssetHelper.GetAssetOwner(EPiServer.Core.ContentReference)">
      <summary>
            Gets the owner for a content item (assuming the content is an asset inside the asset folder)
            </summary>
      <param name="contentLink">The content to get asset folder for.</param>
      <returns>The asset folder or <c>null</c> if asset folder is not a parent of this content item</returns>
      <exception cref="T:EPiServer.Core.EPiServerException">Thrown when the content cannot be found</exception>
      <exception cref="T:System.ArgumentNullException">When contentLink is null or empty</exception>
    </member>
    <member name="M:EPiServer.Core.ContentAssetHelper.GetAssetFolder(EPiServer.Core.ContentReference)">
      <summary>
            Gets the asset folder for a content item
            </summary>
      <param name="contentLink">The content to get asset folder for.</param>
      <returns>The asset folder or <c>null</c> if asset folder is not supported because the content item does not implement <see cref="T:EPiServer.Core.IResourceable" /></returns>
      <exception cref="T:EPiServer.Core.EPiServerException">Thrown when the content cannot be found</exception>
      <exception cref="T:System.ArgumentNullException">When contentLink is null or empty</exception>
    </member>
    <member name="M:EPiServer.Core.ContentAssetHelper.GetOrCreateAssetFolder(EPiServer.Core.ContentReference)">
      <summary>
            Gets or creates the asset folder for a content item
            </summary>
      <param name="contentLink">The content to get or create asset folder for.</param>
      <returns>The asset folder or <c>null</c> if asset folder is not supported because the content item does not implement <see cref="T:EPiServer.Core.IResourceable" /></returns>
      <remarks>If the passed in content does not have an asset folder one is created.</remarks>
      <exception cref="T:EPiServer.Core.EPiServerException">Thrown when the content cannot be found</exception>
      <exception cref="T:System.ArgumentNullException">When contentLink is null or empty</exception>
    </member>
    <member name="M:EPiServer.Core.ContentAssetHelper.GetParentFolder(EPiServer.Core.ContentReference,System.String,System.Nullable{System.DateTime},System.Boolean)">
      <summary>
            Gets the parent folder.
            </summary>
      <param name="root">The root.</param>
      <param name="relativePath">The relative path.</param>
      <param name="saveTime">The create time.</param>
      <param name="createIfNotExist">if set to <c>true</c> it will create folder if it does not exist.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentAssetHelper.GetMedia(EPiServer.Core.ContentReference,System.String,System.Guid)">
      <summary>
            Gets a media item given parent and name and guid based id.
            </summary>
      <remarks>
            If the media exist it is returned, otherwise a new media item is created (but not saved)
            </remarks>
      <param name="parentLink">The parent link.</param>
      <param name="mediaName">Name of the media.</param>
      <param name="mediaId">The media id.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">mediaName must contain a valid extension</exception>
      <remarks>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentAssetHelper.WriteProperty(EPiServer.Core.IContent,System.String,System.String,System.Boolean)">
      <summary>
            Writes the property to a content item.
            </summary>
      <remarks>
            If the property has a backing <see cref="T:EPiServer.Core.PropertyData" /> instance, ParseToSelf on that instance is called.
            If there is no backing property data the value is set through reflection and using System.Convert.ChangeType to
            get correct type from string representation.
            </remarks>
      <param name="content">The content.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="log">if set to <c>true</c> [log].</param>
      <remarks>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.ContentBase">
      <summary>
            Class that can be used as base class for IContent implementations. See also <see cref="T:EPiServer.Core.StandardContentBase" />,
            which in most cases is the base class that content types should inherit from.
            </summary>
      <remarks>
        <see cref="T:EPiServer.Web.Routing.IRoutable" /> should be implemented to support direct routing to instances.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.ContentBase.Status">
      <summary>
            Gets or sets the status of the instance.
            </summary>
      <value>The status.</value>
    </member>
    <member name="P:EPiServer.Core.ContentBase.IsPendingPublish">
      <summary>
            Gets or sets a value indicating whether this instance is in pending publish state.
            </summary>
      <value>
        <c>true</c> if this instance is in pending publish state; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.ContentBase.StartPublish">
      <summary>
            Gets or sets the start publish.
            </summary>
      <value>
            The start publish.
            </value>
    </member>
    <member name="P:EPiServer.Core.ContentBase.StopPublish">
      <summary>
            Gets or sets the stop publish.
            </summary>
      <value>
            The stop publish.
            </value>
    </member>
    <member name="P:EPiServer.Core.ContentBase.IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.ContentBase.ResetModified">
      <summary>
            Resets the modified flag on all the properties in the <see cref="P:EPiServer.Core.IContentData.Property" /> collection.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentBase.EPiServer#Core#IModifiedTrackable#IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.ContentBase.EPiServer#Core#IModifiedTrackable#ResetModified">
      <summary>
            Resets the modified flag on all the properties in the <see cref="P:EPiServer.Core.IContentData.Property" /> collection.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentBase.CreateWriteableCloneImplementation">
      <summary>
            Creates a writable clone of this object.
            </summary>
      <returns>A clone of this object that is writable.</returns>
      <remarks>
        <para>
            This method is called by <see cref="M:EPiServer.Data.Entity.IReadOnly.CreateWritableClone" />. If you are inheriting, directly or indirectly, from
            <see cref="T:EPiServer.Core.ContentData" /> you should override this method to make sure that all reference type members of your class are cloned.
            </para>
        <para>
            Your override of this method <strong>must</strong> create the clone by calling <c>base.CreateWritableCloneImplementation()</c>. This ensures that all
            classes in the inheritance chain can create clones as necessary. Also, by calling the base implementation the values of all value
            type members are copied as the <see cref="T:EPiServer.Core.ContentData" /> implementation of this method calls <see cref="M:System.Object.MemberwiseClone()" />.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentBase.MakeReadOnly">
      <summary>
            Makes the current instance and all it's properties read-only.
            </summary>
      <remarks>
            After calling this method the <see cref="P:EPiServer.Data.Entity.IReadOnly.IsReadOnly" /> property will return <c>true</c>.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentBase.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates a writable clone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.ContentBase.EPiServer#Data#Entity#IReadOnly#IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.ContentBase.EPiServer#Data#Entity#IReadOnly#MakeReadOnly">
      <summary>
            Makes the instance read only.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentBase.Category">
      <summary>
            Gets a <see cref="T:EPiServer.Core.CategoryList" /> containing the categories that the instance belongs to.
            </summary>
      <value>
      </value>
      <returns>A <b>CategoryList</b> with the categories.</returns>
    </member>
    <member name="T:EPiServer.Core.ContentCacheScope">
      <summary>
            Specify content caching options for a scope of code
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentCacheScope.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentCacheScope" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentCacheScope.SlidingExpiration">
      <summary>
            The sliding cache for how long published content is cached. Set to "0:0:0" to disable.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentCacheScope.Current">
      <summary>
            Get current caching scope
            </summary>
    </member>
    <member name="T:EPiServer.Core.ContentData">
      <summary>
            Base class for classes that holds content.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentData" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentData.#ctor(EPiServer.Core.PropertyDataCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentData" /> class with the given property collection.
            </summary>
      <param name="properties">The collection of properties that the instance should contain.</param>
    </member>
    <member name="P:EPiServer.Core.ContentData.Property">
      <summary>
            Gets or sets the properties for this ContentData.
            </summary>
      <remarks>
        <para>
                By using the indexer of the <see cref="T:EPiServer.Core.PropertyDataCollection" /> you can get access
                to the <see cref="T:EPiServer.Core.PropertyData" /> object. This will return null if the property is not found.
              </para>
        <para>
                On <see cref="T:EPiServer.Core.PageData" /> there is a list of default properties, see <see cref="T:EPiServer.DataAbstraction.MetaDataProperties" />.
              </para>
      </remarks>
      <value>
            A collection with all properties defined for this ContentData, and all values.
            </value>
    </member>
    <member name="P:EPiServer.Core.ContentData.IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.ContentData.ResetModified">
      <summary>
            Resets the modified flag on all the properties in the <see cref="P:EPiServer.Core.ContentData.Property" /> collection.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentData.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Sets the default property values on the content data.
            </summary>
      <param name="contentType">Type of the content.</param>
      <remarks>
            Override this method if you want to set custom default values.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.ContentData.EPiServer#Core#IModifiedTrackable#IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.ContentData.EPiServer#Core#IModifiedTrackable#ResetModified">
      <summary>
            Resets the modified flag on all the properties in the <see cref="P:EPiServer.Core.ContentData.Property" /> collection.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentData.IsReadOnly">
      <summary>
            Gets a value indicating if current instance is read-only.
            </summary>
      <value>
        <c>true</c> if this instance is read-only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.ContentData.MakeReadOnly">
      <summary>
            Makes the current instance and all it's properties read-only.
            </summary>
      <remarks>
            After calling this method the <see cref="P:EPiServer.Core.ContentData.IsReadOnly" /> property will return <c>true</c>.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentData.CreateWritableClone">
      <summary>
            Creates a writable clone of this object.
            </summary>
      <returns>A clone of this object that is writable.</returns>
      <remarks>Any changes should be added by overriding <see cref="M:EPiServer.Core.ContentData.CreateWriteableCloneImplementation" />.</remarks>
    </member>
    <member name="M:EPiServer.Core.ContentData.CreateWriteableCloneImplementation">
      <summary>Creates a writable clone of this object.</summary>
      <returns>A clone of this object that is writable.</returns>
      <remarks>
        <para>
                    This method is called by <see cref="M:EPiServer.Core.ContentData.CreateWritableClone" />. If you are inheriting, directly or indirectly, from 
                    <see cref="T:EPiServer.Core.ContentData" /> you should override this method to make sure that all reference type members of your class are cloned.
                </para>
        <para>
                    Your override of this method <strong>must</strong> create the clone by calling <c>base.CreateWritableCloneImplementation()</c>. This ensures that all
                    classes in the inheritance chain can create clones as necessary. Also, by calling the base implementation the values of all value 
                    type members are copied as the <see cref="T:EPiServer.Core.ContentData" /> implementation of this method calls <see cref="M:System.Object.MemberwiseClone()" />.
                </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentData.ThrowIfReadOnly">
      <summary>
            Throws an exception if the current instance is read-only.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentData.Item(System.String)">
      <summary>
            Gets or sets the value of a property in the <see cref="P:EPiServer.Core.ContentData.Property" /> collection or 
            null if the property does not exist.
            </summary>
      <value>
            The value of the page property which name matches the given index.
            </value>
      <remarks>
        <para>
            Note that this indexer will use the Pre and Post handlers for property lookup, i.e. the returned
            values are not guaranteed to belong to the page, but may be from a different source link dynamic properties or 
            another page when <see cref="T:EPiServer.Core.LinkType" /> is set to the value of <see cref="F:EPiServer.Core.PageShortcutType.FetchData" />.
            </para>
        <para>
            To get data guaranteed to belong to this page, use the <see cref="M:EPiServer.Core.ContentData.GetValue(System.String)" /> and <see cref="M:EPiServer.Core.ContentData.SetValue(System.String,System.Object)" />  methods.
            </para>
        <para>
            Also note that setting values with this indexer will only set values that acually belong to the page, i.e.
            you may get a valid value by reading from the indexer, but trying to set a new value for the same index may
            yield an exception if the value does not exist in the page.
            </para>
      </remarks>
      <exception cref="T:EPiServer.Core.EPiServerException">Thrown if the property referenced by index does not exist.</exception>
    </member>
    <member name="M:EPiServer.Core.ContentData.GetValue(System.String)">
      <summary>
            Gets the value.
            </summary>
      <param name="name">The name of the property.</param>
      <returns>The value of the property data indexed by name.</returns>
      <remarks>
            This method can be used in the same way as the string indexer, but GetValue will not make use of the Pre and Post handlers.
            Any non-null value returned by GetValue is guaranteed to come from the PageData itself.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentData.SetValue(System.String,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="index">The index.</param>
      <param name="value">The value.</param>
      <exception cref="T:EPiServer.Core.EPiServerException">Thrown if the property referenced by index does not exist.</exception>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertyValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
                Returns the value for a property on a content data object.
            </summary>
      <typeparam name="TContentData">The type of page data.</typeparam>
      <typeparam name="TPropertyValue">The type of the property value.</typeparam>
      <param name="contentData">The object this method extends.</param>
      <param name="expression">A lambda expression indication which property to get.</param>
      <returns>The value of the specified property</returns>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertyValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
      <summary>
                Returns the value for a property on a content data object.
            </summary>
      <typeparam name="TContentData">The type of page data.</typeparam>
      <typeparam name="TPropertyValue">The type of the property value.</typeparam>
      <param name="contentData">The object this method extends.</param>
      <param name="expression">A lambda expression indication which property to get.</param>
      <param name="defaultValue">The default value to use if no value is set on the specified property.</param>
      <returns>The value of the specified property</returns>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertyValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1})">
      <summary>
                Returns the value for a property on a content data object.
            </summary>
      <typeparam name="TContentData">The type of content data.</typeparam>
      <typeparam name="TPropertyValue">The type of the property value.</typeparam>
      <param name="contentData">The object this method extends.</param>
      <param name="expression">A lambda expression indication which property to get.</param>
      <param name="defaultValue">The default value to use if no value is set on the specified property.</param>
      <returns>The value of the specified property</returns>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertyValue``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Func{``1,``2},System.Func{``2})">
      <summary>
                Returns the value for a property on a content data object.
            </summary>
      <typeparam name="TContentData">The type of page data.</typeparam>
      <typeparam name="TPropertyValue">The type of the property value.</typeparam>
      <typeparam name="TPropertyData">The type of the property data.</typeparam>
      <param name="contentData">The object this method extends.</param>
      <param name="expression">A lambda expression indication which property to get.</param>
      <param name="valueRetriever">The function that retrieves the value from the property data object.</param>
      <param name="defaultValue">The default value to use if no value is set on the specified property.</param>
      <returns>The value of the specified property</returns>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.SetPropertyValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
      <summary>
                Sets the specified value on a specified property.
            </summary>
      <typeparam name="TContentData">The type of page data.</typeparam>
      <typeparam name="TPropertyValue">The type of the property value.</typeparam>
      <param name="contentData">The object this method extends.</param>
      <param name="expression">A lambda expression indication which property to set.</param>
      <param name="propertyValue">The value to set on the specified property.</param>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.SetPropertyValue``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Action{``1})">
      <summary>
                Sets the specified value on a specified property.
            </summary>
      <typeparam name="TContentData">The type of page data.</typeparam>
      <typeparam name="TPropertyValue">The type of the property value.</typeparam>
      <typeparam name="TPropertyData">
      </typeparam>
      <param name="contentData">The object this method extends.</param>
      <param name="expression">A lambda expression indication which property to set.</param>
      <param name="valueAction">The action function that sets the value of the property data object</param>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertyValue(EPiServer.Core.ContentData,System.String)">
      <summary>
            Returns the string representation of the value of a property of the
            <see cref="T:EPiServer.Core.ContentData" /> instance, taking into account that
            <see cref="T:EPiServer.Core.PropertyData" /> or the Value property of the
            <see cref="T:EPiServer.Core.PropertyData" /> may be null, in which case null is returned.
            The value is converted to a string using the type's ToString method.
            </summary>
      <param name="contentData">Instance to read property from.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>The string representation of the property value, or null if
            the <see cref="T:EPiServer.Core.PropertyData" /> or the Value property of the
            <see cref="T:EPiServer.Core.PropertyData" /> is null.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertyValue(EPiServer.Core.ContentData,System.String,System.String)">
      <summary>
            Returns the string representation of the value of a property of the
            <see cref="T:EPiServer.Core.ContentData" /> instance, taking into account that
            <see cref="T:EPiServer.Core.PropertyData" /> or the Value property of the
            <see cref="T:EPiServer.Core.PropertyData" /> may be null, in which case the specified
            default value is returned. The value is converted to a string using the
            type's ToString method.
            </summary>
      <param name="contentData">Instance to read property from.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">A default value to return if the <see cref="T:EPiServer.Core.PropertyData" /> or
            the Value property of the <see cref="T:EPiServer.Core.PropertyData" /> is null</param>
      <returns>The string representation of the property value, or the specified
            default value if the <see cref="T:EPiServer.Core.PropertyData" /> or the Value property of the
            <see cref="T:EPiServer.Core.PropertyData" /> is null.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertyValue``1(EPiServer.Core.ContentData,System.String)">
      <summary>
            Returns the value of a property of the <see cref="T:EPiServer.Core.ContentData" /> instance,
            taking into account that <see cref="T:EPiServer.Core.PropertyData" /> or the Value property
            of the <see cref="T:EPiServer.Core.PropertyData" /> may be null, in which case the specified
            default value is returned. The value is cast to the specified type.
            </summary>
      <typeparam name="TPropertyValue">The type the <see cref="T:EPiServer.Core.PropertyData" /> Value has.</typeparam>
      <param name="contentData">Instance to read property from.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>The property value, or the specified default value if the <see cref="T:EPiServer.Core.PropertyData" />
            or the Value property of the <see cref="T:EPiServer.Core.PropertyData" /> is null.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertyValue``1(EPiServer.Core.ContentData,System.String,``0)">
      <summary>
            Returns the value of a property of the <see cref="T:EPiServer.Core.ContentData" /> instance,
            taking into account that <see cref="T:EPiServer.Core.PropertyData" /> or the Value property
            of the <see cref="T:EPiServer.Core.PropertyData" /> may be null, in which case the default value
            for the return type is returned. The value is cast to the specified type.
            </summary>
      <typeparam name="TPropertyValue">The type the <see cref="T:EPiServer.Core.PropertyData" /> Value has.</typeparam>
      <param name="contentData">Instance to read property from.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="defaultValue">A default value to return if the <see cref="T:EPiServer.Core.PropertyData" /> or
            the Value property of the <see cref="T:EPiServer.Core.PropertyData" /> is null</param>
      <returns>The property value, or the default value for the return type if the
            <see cref="T:EPiServer.Core.PropertyData" /> or the Value property of the <see cref="T:EPiServer.Core.PropertyData" />
            is null.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertyValue``2(EPiServer.Core.ContentData,System.String,System.Func{``0,``1})">
      <summary>
            Returns the value of a property of the <see cref="T:EPiServer.Core.ContentData" /> instance,
            taking into account that <see cref="T:EPiServer.Core.PropertyData" /> or the Value property
            of the <see cref="T:EPiServer.Core.PropertyData" /> may be null, in which case the default value
            for the return type is returned. The value is cast to the specified type and
            then projected to the return type using the supplied delegate.
            </summary>
      <typeparam name="TPropertyValue">The type the <see cref="T:EPiServer.Core.PropertyData" /> Value has.</typeparam>
      <typeparam name="TResult">The type the property value will be projected to.</typeparam>
      <param name="contentData">Instance to read property from.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="resultSelector">A delegate which will be called if a value is successfully
            retrieved from the property, to perform additional conversions.</param>
      <returns>The projected property value, or the default value for the return type if the
            <see cref="T:EPiServer.Core.PropertyData" /> or the Value property of the <see cref="T:EPiServer.Core.PropertyData" />
            is null.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertyValue``2(EPiServer.Core.ContentData,System.String,System.Func{``0,``1},``1)">
      <summary>
            Returns the value of a property of the <see cref="T:EPiServer.Core.ContentData" /> instance,
            taking into account that <see cref="T:EPiServer.Core.PropertyData" /> or the Value property
            of the <see cref="T:EPiServer.Core.PropertyData" /> may be null, in which case the specified
            default value is returned. The value is cast to the specified type and then
            projected to the return type using the supplied delegate.
            </summary>
      <typeparam name="TPropertyValue">The type the <see cref="T:EPiServer.Core.PropertyData" /> Value has.</typeparam>
      <typeparam name="TResult">The type the property value will be projected to.</typeparam>
      <param name="contentData">Instance to read property from.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="resultSelector">A delegate which will be called if a value is successfully
            retrieved from the property, to perform additional conversions.</param>
      <param name="defaultValue">A default value to return if the <see cref="T:EPiServer.Core.PropertyData" /> or
            the Value property of the <see cref="T:EPiServer.Core.PropertyData" /> is null</param>
      <returns>The projected property value, or the specified default value if the
            <see cref="T:EPiServer.Core.PropertyData" /> or the Value property of the <see cref="T:EPiServer.Core.PropertyData" />
            is null.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertySettings``1(EPiServer.Core.IContentData,System.String)">
      <summary>
                Get the property settings from a specified property.
            </summary>
      <typeparam name="TPropertySettings">The type of property settings.</typeparam>
      <param name="contentData">The object this method extends.</param>
      <param name="propertyName">The property name</param>
      <value>The setting or <c>null</c> if no setting was found</value>
      <remarks>This methods uses <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsResolver" /> to resolve the settings.</remarks>
    </member>
    <member name="M:EPiServer.Core.ContentDataExtensions.GetPropertySettings``2(``1,System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
      <summary>
                Get the property settings from a specified property.
            </summary>
      <typeparam name="TPropertySettings">The type of property settings.</typeparam>
      <typeparam name="TContentData">The type of content.</typeparam>
      <param name="contentData">The object this method extends.</param>
      <param name="expression">A lambda expression indication which property to get settings for.</param>
      <value>The setting or <c>null</c> if no setting was found</value>
      <remarks>This methods uses <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsResolver" /> to resolve the settings.</remarks>
    </member>
    <member name="T:EPiServer.Core.ContentFolder">
      <summary>
            Represents a folder in a content tree. A content folder is used to structure content and has no visual appearance on the site.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentFolder.GetSiteDefinitionRepository">
      <summary>
            Function delegate that returns the SiteDefinitionRepository
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentFolder.GetLocalizationService">
      <summary>
            Function delegate that returns the LocalizationService
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentFolder.CreateWriteableCloneImplementation">
      <summary>
            Creates a writable clone of this object.
            </summary>
      <returns>A clone of this object that is writable.</returns>
      <remarks>
        <para>
            This method is called by <see cref="M:EPiServer.Core.ContentFolder.CreateWritableClone" />. If you are inheriting, directly or indirectly, from
            <see cref="T:EPiServer.Core.ContentData" /> you should override this method to make sure that all reference type members of your class are cloned.
            </para>
        <para>
            Your override of this method <strong>must</strong> create the clone by calling <c>base.CreateWritableCloneImplementation()</c>. This ensures that all
            classes in the inheritance chain can create clones as necessary. Also, by calling the base implementation the values of all value
            type members are copied as the <see cref="T:EPiServer.Core.ContentData" /> implementation of this method calls <see cref="M:System.Object.MemberwiseClone()" />.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Core.ContentFolder.IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.ContentFolder.MakeReadOnly">
      <summary>
            Makes the current instance and all it's properties read-only.
            </summary>
      <remarks>
            After calling this method the <see cref="P:EPiServer.Data.Entity.IReadOnly.IsReadOnly" /> property will return <c>true</c>.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentFolder.ResetModified">
      <summary>
            Resets the modified flag on all the properties in the <see cref="P:EPiServer.Core.IContentData.Property" /> collection.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentFolder.CreateWritableClone">
      <summary>
            Creates the writable clone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentFolder.GetSecurityDescriptor">
      <summary>
            Gets the security descriptor.
            </summary>
      <returns>
            An implementation of ISecurityDescriptor.
            </returns>
    </member>
    <member name="P:EPiServer.Core.ContentFolder.RouteSegment">
      <summary>
            Gets or sets the Route segment.
            </summary>
      <value>The Route segment.</value>
    </member>
    <member name="P:EPiServer.Core.ContentFolder.Name">
      <summary>
            Overwrite name with translation for root folder
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentFolder.GetLocalizedAssetsFolderName(System.String)">
      <summary>
            If the folder is a SiteAssets, GlobalAssets or ContentAsset folder return the globalized name for it, 
            otherwise return the name stored in the DB
            </summary>
      <param name="name">Base name</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.ContentLanguageSettingsHandler">
      <summary>
            Acts as a facade for <see cref="T:EPiServer.Core.IContentLanguageSettingsHandler" /></summary>
    </member>
    <member name="P:EPiServer.Core.ContentLanguageSettingsHandler.Instance">
      <summary>
            Retrieves the registered instance of <see cref="T:EPiServer.Core.IContentLanguageSettingsHandler" /></summary>
    </member>
    <member name="T:EPiServer.Core.ContentLanguageSettingsHandlerExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Core.IContentLanguageSettingsHandler" /> with convenient methods
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentLanguageSettingsHandlerExtensions.GetClosestSetting(EPiServer.Core.IContentLanguageSettingsHandler,EPiServer.Core.ContentReference)">
      <summary>
            Gets the content link for where the language settings is defined
            </summary>
      <remarks>
            If settings is not defined on specified content link the ancestor chain is traversed until a setting is found.
            </remarks>
      <param name="contentLanguageSettingsHandler">the hanlder that is being extended</param>
      <param name="contentLink">The content link to determine where settings is defined for</param>
      <returns>The content link where settings is defined or null if no settings are defined</returns>
    </member>
    <member name="T:EPiServer.Core.ContentLock">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Contains metadata information about a locked content version
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentLock.#ctor(EPiServer.Core.ContentReference,System.String,System.String,System.DateTime)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.ContentLock" /></summary>
      <param name="contentLink">The content version that is locked</param>
      <param name="lockedBy">The user who locked the version</param>
      <param name="lockIdentifier">An identifier for the lock</param>
      <param name="locked">The date and time when the version was locked</param>
    </member>
    <member name="P:EPiServer.Core.ContentLock.ContentLink">
      <summary>
            The content version that is locked
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentLock.Locked">
      <summary>
            Gets or sets the date and time when the content version was locked
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentLock.LockedBy">
      <summary>
            Gets or sets the username of the user that locked this content version.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentLock.LockIdentifier">
      <summary>
            Gets or sets the identifier for the owner of the lock, for example a component
            </summary>
    </member>
    <member name="T:EPiServer.Core.ContentMediaResolver">
      <summary>
            Resolves matching <see cref="T:EPiServer.Core.IContentMedia" /> types for extensions.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentMediaResolver.Initialize(EPiServer.DataAbstraction.ContentTypeModelRepository)">
      <summary>
            Initializes the specified media resolver with mappings from model repository.
            </summary>
      <param name="modelRepository">The model repository.</param>
    </member>
    <member name="M:EPiServer.Core.ContentMediaResolver.GetFirstMatching(System.String)">
      <summary>
            Gets the first matching type assignable to <see cref="T:EPiServer.Core.IContentMedia" />.
            </summary>
      <remarks>
            Types registered for extension will be preffered before types registered for no/all extensions.
            </remarks>
      <param name="extension">The extension.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">extension must be given</exception>
    </member>
    <member name="M:EPiServer.Core.ContentMediaResolver.ListAllMatching(System.String)">
      <summary>
            Lists all matching types assignable to <see cref="T:EPiServer.Core.IContentMedia" />.
            </summary>
      <remarks>
            List is oredered so types registered for extension will be inserted before types registered for no/all extensions.
            </remarks>
      <param name="extension">The extension.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">extension must be given</exception>
    </member>
    <member name="T:EPiServer.Core.ContentNotFoundException">
      <summary>
            Thrown when a <see cref="T:EPiServer.Core.ContentData" /> cannot be found.
            </summary>
      <remarks>
            This exception is commonly thrown when you are accessing a content that does 
            not exist using <see cref="T:EPiServer.IContentRepository" />. For debugging scenarios 
            you can use the <see cref="P:EPiServer.Core.ContentNotFoundException.ContentLink" /> property for the source page of an exception. 
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentNotFoundException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentNotFoundException" /> class for a given content instance that was not found.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentNotFoundException" /> class for a given content instance that was not found.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.ContentNotFoundException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Core.ContentNotFoundException.#ctor(EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentNotFoundException" /> class for a given content instance that was not found.
            </summary>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="M:EPiServer.Core.ContentNotFoundException.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentNotFoundException" /> class for a given content instance GUID that was not found.
            </summary>
      <param name="contentGuid">The content GUID.</param>
    </member>
    <member name="M:EPiServer.Core.ContentNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentNotFoundException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:EPiServer.Core.ContentNotFoundException.ContentLink">
      <summary>
            Gets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="P:EPiServer.Core.ContentNotFoundException.ContentGuid">
      <summary>
            Gets the content GUID.
            </summary>
      <value>The content GUID.</value>
    </member>
    <member name="T:EPiServer.Core.ContentOptions">
      <summary>
            Contains various options that can be used to configure how content should be handled within CMS
            </summary>
    </member>
    <member name="F:EPiServer.Core.ContentOptions.NoStringCompression">
      <summary>
            Value to use for <see cref="P:EPiServer.Core.ContentOptions.StringCompressionThreshold" /> when no string compression should be used.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentOptions.VersionCacheSlidingExpiration">
      <summary>
            The sliding cache for how long a content version is cached. Set to "0:0:0" to disable.
            </summary>
      <remarks>Default value is 10 minutes</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentOptions.ContentCacheSlidingExpiration">
      <summary>
            The sliding cache for how long published content is cached. Set to "0:0:0" to disable.
            </summary>
      <remarks>Default value is 12 hours</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentOptions.StringCompressionThreshold">
      <summary>
            Set to the number of characters when compression should be activated .
            </summary>
      <remarks>Default value is 0 meaning no compression is done</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentOptions.PropertyLazyLoadThreshold">
      <summary>
            The number of characters when lazy loading should be activated for properties using the <see cref="F:EPiServer.Core.PropertyDataType.LongString" /> data type.
            </summary>
      <remarks>Default value is 255 characters</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentOptions.MaximumVersions">
      <summary>
            The maximum number of previously published versions that will be kept.
            </summary>
      <remarks>Default value is 20</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentOptions.InMemoryCopyThreshold">
      <summary>
            Gets or sets the maximum number of content items that will be copied in one operation
            using in process memory. 
            </summary>
      <remarks>Default value is 50 content items</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentOptions.MaximumContentItemsPerDatabaseRequest">
      <summary>
            The maximum number of content items that should be returned from a content query
            in one database request.
            </summary>
      <remarks>Default value is 2000 content items</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentOptions.InvalidateRemoteCacheForVersions">
      <summary>
            Defines if changes to content versions should trigger cache invalidation on remote servers.
            </summary>
      <remarks>The default value is true</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentOptions.EnableDynamicProperties">
      <summary>
            Gets or sets if DynamicProperties should be enabled.
            </summary>
      <remarks>DynamicProperties are disabled by default.</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentOptions.Providers">
      <summary>
            List of content providers that should be used by the system; each represented by a <see cref="T:EPiServer.Core.ContentProviderBuilder" /> instance.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentOptions.AddProvider``1(System.String,System.Action{System.Collections.Specialized.NameValueCollection})">
      <summary>
            Adds a <see cref="T:EPiServer.Core.ContentProvider" /> of the given type.
            </summary>
      <typeparam name="TProvider">The type of provider to add.</typeparam>
      <param name="name">The name of the provider to add.</param>
      <param name="configure">Method to configure the parameter collection.</param>
    </member>
    <member name="T:EPiServer.Core.ContentPath">
      <summary>
            A collection of <see cref="T:EPiServer.Core.ContentReference" />s to represents the content item and it's ancestors.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentPath.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentPath" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentPath.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentPath" /> class.
            </summary>
      <param name="contentLinks">The content links for all ancestor content to the actual content.</param>
    </member>
    <member name="M:EPiServer.Core.ContentPath.ToString">
      <summary>
            Generates a comma-separated list with content links
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentPath.StartsWith(EPiServer.Core.ContentPath)">
      <summary>
            Checks if the current <see cref="T:EPiServer.Core.ContentPath" /> starts with all the contentlinks in the given <see cref="T:EPiServer.Core.ContentPath" />.
            </summary>
      <param name="parentPath">The parent path to compare with.</param>
      <returns>
        <c>true</c> if the current <see cref="T:EPiServer.Core.ContentPath" /> starts with all the contentlinks in the given <see cref="T:EPiServer.Core.ContentPath" />; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentPath.Parse(System.String)">
      <summary>
            Parses a dot seperated list of content links which represent the acestry of a content item.
            </summary>
      <param name="stringToParse">The string to parse</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.ContentPath" />.</returns>
    </member>
    <member name="T:EPiServer.Core.ContentProvider">
      <summary>
            The base class for Content Provider.
            </summary>
      <remarks>
            A Custom Content Provider registered with EPiServer must inherit from this base class.
            The ContentProviderBase class provides many services for the custom content provider, such as caching, but it is
            possible for the custom Content Provider to override most of the default implementations.
            </remarks>
      <summary>
            The base class for Content Provider.
            </summary>
      <remarks>
            A Custom Content Provider registered with EPiServer must inherit from this base class.
            The ContentProviderBase class provides many services for the custom content provider, such as caching, but it is
            possible for the custom Content Provider to override most of the default implementations.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.ContentProvider.DefaultProviderKey">
      <summary>
            Name of the default provider when defined in configuration.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentProvider" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.DependencyHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get or sets a <see cref="T:EPiServer.Core.Internal.ContentProviderDependencyHelper" /> instance that
            provides the abstract class with dependencies. 
            </summary>
      <remarks>
            This property is only provided for unit testing purposes.
            </remarks>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.ContentProvider.Name">
      <summary>
            Gets the friendly name used to refer to the provider during configuration.
            </summary>
      <value>
      </value>
      <returns>The friendly name used to refer to the provider during configuration.</returns>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.ProviderKey">
      <summary>
            Gets the provider key that this ContentProvider instance has. It is unique for the EPiServer instance.
            This is the value that is set on <see cref="P:EPiServer.Core.ContentReference.ProviderName" /> on each ContentReference served by this provider instance.
            </summary>
      <value>The provider key.</value>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.IsDefaultProvider">
      <summary>
            Gets a value indicating whether this instance is the default provider.
            </summary>
      <value>
        <c>true</c> if this instance is default provider; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.EntryPoint">
      <summary>
            Gets the entry point which serves as root for this content provider instance.
            </summary>
      <remarks>The default content provider (the one registered with key String.Empty) will not
            have a EntryPoint since it is the default provider. That provider will return ContentReference.EmptyReference</remarks>
      <value>The entry point.</value>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.Parameters">
      <summary>
            Gets the configuration parameters for the content provider
            </summary>
      <value>The parameters.</value>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.ProviderCacheKey">
      <summary>
            Gets the provider cache key.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.IconPath">
      <summary>
            Gets the icon path defined for the provider.
            </summary>
      <value>The icon path.</value>
      <remarks>
            Will be shown in page tree to distinguish pages served by this provider instance. 
            The value is given by specifying attribute "iconPath" in provider configuration. 
            The path given should be relative the theme folder "/Images/ExplorerTree/PageTree/".
            </remarks>
      <example>
            If the icon custom.gif is placed in folder App_Themes/Default/Images/ExplorerTree/PageTree value given on
            configuration attribute iconPath should be custom.gif.
            </example>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.LoadContent(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)">
      <summary>
            Load content for given contentlink.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageSelector">The language selector.</param>
      <returns>A language specific content or master language version content</returns>
      <remarks>If the requested content does not exist for the <paramref name="languageSelector" /> then the content of master language version should be retuned.</remarks>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider with configuration seetings.
            Override this method to do any provider specific initialization.
            </summary>
      <remarks>
            Remember to call base.Initialize in implementation
            </remarks>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> on a provider after the provider has already been initialized.
            </exception>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.LoadChildrenReferencesAndTypes(EPiServer.Core.ContentReference,System.String,System.Boolean@)">
      <summary>
            Loads the children references and types
            </summary>
      <param name="contentLink">
      </param>
      <param name="languageID">
      </param>
      <param name="languageSpecific">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ResolveContent(System.Guid)">
      <summary>
            Tries to resolve a Content from a Guid identifier.
            </summary>
      <param name="contentGuid">The content GUID.</param>
      <remarks>
            This method should be implemented to support permanent link support. With permanent link  means that a link to a <see cref="T:EPiServer.Core.IContent" /> instance 
            can be stored in a Guid based format. Then the link is not broken even if content instance moves. Also permanent links are preserved during import/export and
            mirroring.
            </remarks>
      <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult" /> with the identifiers for the content or null if no content was matched.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ResolveContent(EPiServer.Core.ContentReference)">
      <summary>
            Tries to resolve a Content from a <see cref="T:EPiServer.Core.ContentReference" />.
            </summary>
      <remarks>
            This method should be implemented to support permanent link support. With permanent link  means that a link to a <see cref="T:EPiServer.Core.IContent" /> instance 
            can be stored in a Guid based format. Then the link is not broken even if content instance moves. Also permanent links are preserved during import/export and
            mirroring.
            </remarks>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult" /> with the identifiers for the content or null if no content was matched.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetDefaultContent(EPiServer.Core.IContent,System.Int32,EPiServer.Core.ILanguageSelector)">
      <summary>
            Gets the default content.
            </summary>
      <param name="parentContent">Content of the parent.</param>
      <param name="contentTypeID">The content type ID.</param>
      <param name="languageSelector">The language selector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetLanguageBranches(EPiServer.Core.ContentReference)">
      <summary>
            Gets the language branches.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.CreateLanguageBranch(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)">
      <summary>
            Creates the language branch.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="selector">The selector.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.VersionRepository">
      <summary>
            Gets the version repository.
            </summary>
      <remarks>
            Default implementation does not support versioning and has repository implemented by <see cref="T:EPiServer.Core.Internal.NullContentVersionRepository" /></remarks>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetReferencesToLocalContent(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Gets all references to the specified content.
            Override method to get all references to the given items and optionally references to all decendents.
            </summary>
      <param name="contentLink">The content links.</param>
      <param name="includeDecendents">if set to <c>true</c> references to decendents is also checked.</param>
      <returns>
            A list of items that hold some kind of reference to the specified content.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetReferencesToContentItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>
            Gets all references to the specified content iotems.
            Override method to get all references to the given items.
            </summary>
      <param name="contentLinks">The content links to check references for.</param>
      <returns>
            A list of items that hold some kind of reference to the specified content.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetPagesWithPropertyDefinition(EPiServer.DataAbstraction.PropertyDefinition,System.Boolean,System.Boolean)">
      <summary>
            Gets the pages with instance of page definition.
            <para>
            This method is for example called to verify that no pages with page definition exist 
            before a page definition defined in code is deleted.
            </para></summary>
      <remarks>The default implementation returns empty list.</remarks>
      <param name="propertyDefinition">The page definition.</param>
      <param name="onlyNoneMasterLanguage">if set to <c>true</c> only none master langauge are taken into account.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions are taken into account.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ListContentOfContentType(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Gets a list of references to pages of specified <see cref="T:EPiServer.DataAbstraction.PageType" />.
            <para>
            This method is for example called to verify that no content of a type exist before a content type defined in code is deleted.
            </para></summary>
      <param name="contentType">The contentType to return references for.</param>
      <returns>
      </returns>
      <remarks>
            The default implementation returns empty list.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.IsContentTypeUsed(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Performs a check if specified <see cref="T:EPiServer.DataAbstraction.ContentType" /> is used.
            <para>
            This method is for example called before a content type defined in code is deleted.
            </para></summary>
      <remarks>
            Default implementation calls ListContentOfContentType and checks if it returns Count &gt; 0.
            </remarks>
      <param name="contentType">The contentType to return references for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.IsPropertyDefinitionUsed(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Determines whether [is property definition used] [the specified property definition].
            </summary>
      <remarks>
            Default implementation calls GetPagesWithPropertyDefinition and checks if it returns Count &gt; 0.
            </remarks>
      <param name="propertyDefinition">The property definition.</param>
      <returns>
        <c>true</c> if property definition is used; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetDescendentReferences(EPiServer.Core.ContentReference)">
      <summary>
            Gets all the descendents for the current content (that is at all levels).
            The base class implementation will do recursive calls to GetChildrenReferences.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetUniqueUrlSegment(EPiServer.Core.IContent,EPiServer.Core.ContentReference)">
      <summary>
        <para>Ensures that a content has a unique URL segment (means it is unique among all its siblings on the same language).
            </para>
        <para>
            This method will make sure that the UrlSegment is unique.
            </para>
      </summary>
      <param name="changedContent">The changed content.</param>
      <param name="destinationLink">The destination link.</param>
      <returns>An unique urlsegment for all siblings on the language</returns>
      <remarks>
            Base class implementation will call GetChildren on destinationLink and check that no other sibling on the same
            language already has the same urlsegment. If so a unique segment is created.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ListDelayedPublish">
      <summary>
            Lists all content that are set to delayed publish.
            Base class implementation does not support this method but returns new Enumerable.Empty&lt;IContent&gt;.
            If delay publishing is to be supported this method should be overriden.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.Validate(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
      <summary>
            Validates a content item before it is to be saved.
            </summary>
      <param name="content">The content item about to be saved.</param>
      <param name="action">The type of save action that is being requested.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown if the validation find any issues with the content.</exception>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.Validate(EPiServer.Core.IContent,EPiServer.Validation.ContentSaveValidationContext)">
      <summary>
            Validates a content item before it is to be saved.
            </summary>
      <param name="content">The content item about to be saved.</param>
      <param name="saveValidationContext">The context for the validation..</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown if the validation find any issues with the content.</exception>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ThrowValidationException(System.Collections.Generic.ICollection{EPiServer.Validation.ValidationError})">
      <summary>
            Throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> populated with the provided validation errors
            if there are any severe enough.
            </summary>
      <param name="errors">Collection of errors found.</param>
      <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Thrown if the validation find any issues with the content.</exception>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ValidateForPublishing(EPiServer.Core.IContent)">
      <summary>
            Validates the content before its about to be published. 
            </summary>
      <param name="content">The content item that is to be published</param>
      <returns>A list of all errors that are found</returns>
      <remarks>
            The default implementation ensures in the case of a local content that
            there is a published version of the master language before publishing 
            the local language.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Move a content to another container within the provider instance. 
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="destinationLink">The destination link.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.DeleteLanguageBranch(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Deletes a language branch for the content.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.Delete(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Delete a content from storage..
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="forceDelete">if set to <c>true</c> [force delete].</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.DeleteChildren(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Deletes the children.
            If delete is to be supported this method needs to be overriden.        
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="forceDelete">if set to <c>true</c> [force delete].</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.MoveToWastebasket(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Moves to wastebasket.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="deletedBy">The user who deleted the content.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.Copy(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
      <summary>
            Copy a content to another container served by the same content provider.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="destinationLink">The destination link.</param>
      <param name="publishOnDestination">if set to <c>true</c> [publish on destination].</param>
      <param name="requiredSourceAccess">The required source access.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
      <summary>
            Save content to storage with specified action.
            </summary>
      <param name="content">The content.</param>
      <param name="action">The action.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.UpdateStatus(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,System.Nullable{System.DateTime})">
      <summary>
            Updates the status of the provided content item.
            </summary>
      <param name="content">The content to update.</param>
      <param name="action">The action.</param>
      <param name="delayPublishUntil">
      </param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.SetCacheSettings(EPiServer.Core.IContent,EPiServer.Core.CacheSettings)">
      <summary>
            Sets the cache settings for a content when it is added to cache.
            Override method to set e.g. control lifetime of content object in cache or to add additional cache dependency keys.
            </summary>
      <param name="content">The content that is about to be added to cache.</param>
      <param name="cacheSettings">The cache settings.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.SetCacheSettings(EPiServer.Core.ContentReference,System.String,System.Collections.Generic.IEnumerable{EPiServer.Core.MatchingSegmentResult},EPiServer.Core.CacheSettings)">
      <summary>
            Sets the cache settings for matched children url segments when it is added to cache.
            Override method to set e.g. control lifetime of content object in cache or to add additional cache dependency keys.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="childrenMatches">The children matches.</param>
      <param name="cacheSettings">The cache settings.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.SetCacheSettings(EPiServer.Core.ContentReference,System.Collections.Generic.IEnumerable{EPiServer.Core.GetChildrenReferenceResult},EPiServer.Core.CacheSettings)">
      <summary>
            Sets the cache settings for children listing when it is added to cache.
            Override method to set e.g. control lifetime of content object in cache or to add additional cache dependency keys.
            </summary>
      <param name="contentReference">
      </param>
      <param name="children">
      </param>
      <param name="cacheSettings">
      </param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.AddContentToCache(EPiServer.Core.IContent,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Adds the content to cache.
            </summary>
      <param name="content">The content.</param>
      <param name="extraCacheDependencies">Optional extra cache keys to tie the cached object to.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ConstructContentUri(System.Int32,EPiServer.Core.ContentReference,System.Guid)">
      <summary>
            Creates an URI given content type, ContentLink, ContentGuid
            </summary>
      <param name="contentTypeId">The content type id.</param>
      <param name="contentLink">The content link.</param>
      <param name="contentGuid">The content GUID.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.LoadContents(System.Collections.Generic.IList{EPiServer.Core.ContentReference},EPiServer.Core.ILanguageSelector)">
      <summary>
            The base class implementation will call <see cref="M:EPiServer.Core.ContentProvider.Load(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)" /> for each ContentReference. If overriden the implementation should return all requested contents.
            </summary>
      <param name="contentReferences">The content references.</param>
      <param name="selector">The selector.</param>
      <returns>The loaded list of content items (method should never return <c>null</c>)</returns>
      <remarks>
            A suggested implementation is to:
            <para>
                For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
                <paramref name="selector" /> should be ignored and that specific version should be returned.
            </para><para>
                For references that is not for a specific version call return contents in the language given by <see cref="P:EPiServer.Core.ILanguageSelector.Language" /> property. If
                <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> or null is passed in or if the content does not exist in the specified language then content in master language branch should be returned.
            </para></remarks>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.CreateContentResolveResult(EPiServer.DataAbstraction.ContentCoreData)">
      <summary>
            Creates the content resolve result.
            </summary>
      <param name="contentData">The content data.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.LoadChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector,System.Int32,System.Int32)">
      <summary>
             Retrieves the children for a specific content. 
             The base class implementation will check for the list of references and content types in the cache. If not found it will call 
             <see cref="M:EPiServer.Core.ContentProvider.GetChildrenReferences``1(EPiServer.Core.ContentReference,System.String,System.Int32,System.Int32)" />. It will then try to load the contents from cache. For those contents not found in cache it
             will call <see cref="M:EPiServer.Core.ContentProvider.LoadContents(System.Collections.Generic.IList{EPiServer.Core.ContentReference},EPiServer.Core.ILanguageSelector)" />.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">
      </param>
      <param name="selector">
      </param>
      <param name="startIndex">
      </param>
      <param name="maxRows">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.Load(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)">
      <summary>
            Read a single content from the storage. 
            The default implementation will check for the content in the cache. If it is not found there it will call into method <see cref="M:EPiServer.Core.ContentProvider.LoadContent(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)" /></summary>
      <param name="contentLink">The content link.</param>
      <param name="selector">The selector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetMatchingSegments(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Gets all matching segments that has a <see cref="P:EPiServer.Web.Routing.IRoutable.RouteSegment" />
            that matches <paramref name="urlSegment" />.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <returns>A list of all matching content instances.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ListMatchingSegments(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Lists references to all children content items that have matching routing/url segments.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <remarks>
            Default implementation will use <see cref="M:EPiServer.Core.ContentProvider.LoadChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector,System.Int32,System.Int32)" /> and <see cref="M:EPiServer.Core.ContentProvider.GetLanguageBranches(EPiServer.Core.ContentReference)" /> to
            find all matching segments.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.ProviderCapabilities">
      <summary>
            Gets the capabilities that this content provider instance support. 
            The base class implementation will during it's initialization read the passed in configuration values (Parse them to enum 
            <see cref="T:EPiServer.Core.ContentProviderCapabilities" />)
            and set the capabilities for the provider instance according to the passed in configuration values.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetChildrenReferences``1(EPiServer.Core.ContentReference,System.String,System.Int32,System.Int32)">
      <summary>
            Gets the children references.
            </summary>
      <remarks>
            The implementation will look in the cache if the listing is present, if so the list is returned from there.
            If not present it will call current providers method GetChildrenReferences.
            </remarks>
      <typeparam name="T">
      </typeparam>
      <param name="contentReference">
      </param>
      <param name="languageID">
      </param>
      <param name="startIndex">
      </param>
      <param name="maxRows">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.LoadBatched(System.Collections.Generic.IList{EPiServer.Core.ContentReference},EPiServer.Core.ILanguageSelector)">
      <summary>
            Gets all content items that is represented by the provided references
            in the language given by the provided language selector.
            </summary>
      <remarks>
        <para>
            For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
            <paramref name="selector" /> is ignored and that specific version is returned.
            </para>
        <para>
             If <paramref name="contentReferences" /> contain duplicate entries only one <see cref="T:EPiServer.Core.IContent" /> instance is returned for the duplicate entries.
            </para>
      </remarks>
      <param name="contentReferences">A list of references to content that should be fetched.</param>
      <param name="selector">The selector that provides the language to get the content in.</param>
      <returns>
            A list of content for the specifed references.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetScatteredContents(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Core.ILanguageSelector)">
      <summary>
            Gets the <see cref="T:EPiServer.Core.IContent" /> instances given passed in <paramref name="contentLinks" />.
            </summary>
      <remarks>
        <para>
            In <paramref name="contentLinks" /> contain duplicate entries only one <see cref="T:EPiServer.Core.IContent" /> instance is returned for the duplicate entries.
            </para>
        <para>
            If there is no <see cref="T:EPiServer.Core.IContent" /> that matches an entry in <paramref name="contentLinks" /> that entry is ignored.
            </para>
      </remarks>
      <param name="contentLinks">The content links.</param>
      <param name="selector">The selector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ClearProviderPagesFromCache">
      <summary>
            Remove all conteent served from this provider from the cache
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.AddChildrenListingToCache(EPiServer.Core.ContentReference,System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.String,System.String[])">
      <summary>
            Adds the children listing to cache.
            </summary>
      <param name="contentReference">The content reference.</param>
      <param name="children">The children.</param>
      <param name="cacheKey">The cache key.</param>
      <param name="dependencyCacheKeys">The dependency cache keys.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.AddChildrenListingToCache(EPiServer.Core.ContentReference,System.Collections.Generic.IList{EPiServer.Core.GetChildrenReferenceResult},System.String,System.String[])">
      <summary>
            Adds the children listing to cache.
            </summary>
      <param name="contentReference">
      </param>
      <param name="children">
      </param>
      <param name="cacheKey">
      </param>
      <param name="dependencyCacheKeys">
      </param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.AddSegmentListingToCache(EPiServer.Core.ContentReference,System.String,System.Collections.Generic.IList{EPiServer.Core.MatchingSegmentResult},System.String,System.String[])">
      <summary>
            Adds the matched listing to cache.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="matches">The matches.</param>
      <param name="cacheKey">The cache key.</param>
      <param name="dependencyCacheKeys">The dependency cache keys.</param>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.WastebasketName">
      <summary>
            Gets the name of the wastebasket.
            </summary>
      <value>
            The name of the wastebasket.
            </value>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.WastebasketReference">
      <summary>
            Gets the wastebasket reference.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetWasteBasket">
      <summary>
            Gets the waste basket.
            </summary>
      <value>
            The waste basket.
            </value>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.EPiServer#Web#IContentResolver#ResolveContent(System.Guid)">
      <summary>
            Tries to resolve a Content from a Guid identifier.
            </summary>
      <param name="contentGuid">The content GUID.</param>
      <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult" /> with the identifiers for the content or null if no content was matched.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.EPiServer#Web#IContentResolver#ResolveContent(EPiServer.Core.ContentReference)">
      <summary>
            Tries to resolve a Content from a <see cref="T:EPiServer.Core.ContentReference" />.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult" /> with the identifiers for the content or null if no content was matched.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ReadCapabilities(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Reads the capabilities.
            </summary>
      <param name="configParams">The config params.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.HasCapability(EPiServer.Core.ContentProviderCapabilities)">
      <summary>
            Determines whether the specified provider capabilities has capability.
            </summary>
      <param name="contentProviderCapabilities">The provider capabilities.</param>
      <returns>
        <c>true</c> if the specified provider capabilities has capability; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.GetSecurityDescriptor(EPiServer.Core.ContentReference)">
      <summary>
            Gets the specified content security descriptor object for the requested content link.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.SaveSecurityDescriptor(EPiServer.Core.ContentReference,EPiServer.Security.IContentSecurityDescriptor,EPiServer.Security.SecuritySaveType)">
      <summary>
            Saves the specified content security descriptor.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentSecurityDescriptor">The content security descriptor.</param>
      <param name="securitySaveType">Type of the security save.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.DeleteSecurityEntity(System.String,EPiServer.Security.SecurityEntityType)">
      <summary>
            Deletes the specified user or role name.
            </summary>
      <param name="userOrRoleName">Name of the user or role.</param>
      <param name="entityUserRole">The entity user role.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ResetCounters">
      <summary>
            Reset statistic counters
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.PageFetchDatabaseReads">
      <summary>
            Counts calls into the ContentProvider for content fetchings
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.ListingFetchDatabaseReads">
      <summary>
            Counts calls into the ContentProvider for the children fetching
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.PageFetchCount">
      <summary>
            Counts the total fetching into the database and cache for contents
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.ListingFetchCount">
      <summary>
            Counts the total fetching into the database and cache for children contents
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.PageFetchCacheHits">
      <summary>
            Counts calls into the ContentProviders cache for the Content fetchings
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.ListingFetchCacheHits">
      <summary>
            Counts calls into the ContentProviders cache for the children fetching
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.StatisticsCollectedSince">
      <summary>
            Returns the statistics last start datetime
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.ContentCoreDataLoader">
      <summary>
            Gets or sets the content core data loader.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.ContentTypeRepository">
      <summary>
            Gets the content type repository.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.ContentFactory">
      <summary>
            Gets the content factory.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.LanguageBranchRepository">
      <summary>
            Gets ILanguageBranchRepository
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProvider.FolderIDGenerator">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentProvider.AllocateUniqueContentFolderId(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentProvider.ResolveContentFolder(System.Int32)">
      <exclude />
    </member>
    <member name="T:EPiServer.Core.ContentProviderBuilder">
      <summary>
            Used to configure and build up <see cref="T:EPiServer.Core.ContentProvider" /> instances
            on the <see cref="T:EPiServer.Core.ContentOptions" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentProviderBuilder.#ctor(System.String,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentProviderBuilder" /> class.
            </summary>
      <param name="name">The name of the content provider</param>
      <param name="providerType">The type of the provider instance. Must implement <see cref="T:EPiServer.Core.ContentProvider" />.</param>
      <remarks>
            It's recommended to use the <see cref="M:EPiServer.Core.ContentProviderBuilder.Create``1(System.String)" /> method to initialize new instances
            as it will provide type support.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.ContentProviderBuilder.Name">
      <summary>
            Gets the name of the <see cref="T:EPiServer.Core.ContentProvider" />.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProviderBuilder.ProviderType">
      <summary>
            Gets the type of the <see cref="T:EPiServer.Core.ContentProvider" />.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentProviderBuilder.AutoCorrectInvalidName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets if an invalid provider name should be automatically corrected or if an exception should be thrown.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.ContentProviderBuilder.Options">
      <summary>
            Gets the Options instance. Exposed for test purposes.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentProviderBuilder.Configure``1(System.Action{``0})">
      <summary>
            Adds a configuration of the provider.
            </summary>
      <typeparam name="TProviderOptions">The options type required by the provider configured by this instance.</typeparam>
      <param name="configure">A method used to configure the options for this provider.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProviderBuilder.Build(EPiServer.ServiceLocation.IServiceLocator)">
      <summary>
            Builds a new <see cref="T:EPiServer.Core.ContentProvider" /> instance.
            </summary>
      <param name="serviceLocator">The service locator used to create provider instances.</param>
      <returns>A new <see cref="T:EPiServer.Core.ContentProvider" /> instance.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentProviderBuilder.Create``1(System.String)">
      <summary>
            Factory method for creating a new <see cref="T:EPiServer.Core.ContentProviderBuilder" /> instance.
            </summary>
      <typeparam name="TProvider">Type of the provider instance. Must implement <see cref="T:EPiServer.Core.ContentProvider" />.</typeparam>
      <param name="name">The name of the <see cref="T:EPiServer.Core.ContentProvider" />.</param>
      <returns>A new <see cref="T:EPiServer.Core.ContentProviderBuilder" /> instance.</returns>
    </member>
    <member name="T:EPiServer.Core.ContentProviderCapabilities">
      <summary>
            Specifies which capabilitites that a content provider instance supports. 
            The class <see cref="T:EPiServer.Core.ContentProvider" /> will during it's initialization read the passed in
            configaration values and see which capabilites attributes that are present and set the 
            capabilities for the page provider instance from those values.
            </summary>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.None">
      <summary>
            The provider supports only read of pages.
            </summary>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.Create">
      <summary>
            Supports creation of new pages
            </summary>
      <remarks>
            The ContentProvider class implementation will check if attribute "create" exist in configruation attributes
            and has value "true" if so it returns true else it returns false.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.Edit">
      <summary>
            Supports editing of existing pages
            </summary>
      <remarks>
            The ContentProvider class implementation will check if attribute "edit" exist in configruation attributes
            and has value "true" if so it returns true else it returns false.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.Delete">
      <summary>
            Supports deletion of pages
            </summary>
      <remarks>
            The ContentProvider class implementation will check if attribute "delete" exist in configruation attributes
            and has value "true" if so it returns true else it returns false.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.Move">
      <summary>
            Supports moving of pages internally within the pages served by the provider.
            To support moving of pages between different page providers the capability that has to supported is Create/&gt;.
            </summary>
      <remarks>
            The ContentProvider class implementation will check if attribute "move" exist in configruation attributes
            and has value "true" if so it returns true else it returns false.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.Copy">
      <summary>
            Supports copy of pages internally within the pages served by the provider.
            To support copy of pages between different page providers the capability that has to supported is Create/&gt;.
            </summary>
      <remarks>
            The ContentProvider class implementation will check if attribute "copy" exist in configruation attributes
            and has value "true" if so it returns true else it returns false.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.MultiLanguage">
      <summary>
             Gets a value indicating wether this page provider instance supports pages with multiple languages
            </summary>
      <remarks>
            The ContentProvider class implementation will check if attribute "multiLanguage" exist in configruation attributes
            and has value "true" if so it returns true else it returns false.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.Security">
      <summary>
             Gets a value indicating wether this page provider instance supports access checks
            </summary>
      <remarks>
            The ContentProvider class implementation will check if attribute "security" exist in configruation attributes
            and has value "true" if so it returns true else it returns false.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.Search">
      <summary>
            Supports search in page data served by the provider.
            </summary>
      <remarks>
            The ContentProvider class implementation will check if attribute "search" exist in configruation attributes
            and has value "true" if so it returns true else it returns false.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.PageFolder">
      <summary>
            States whether page provider stores resources in page folders.
            </summary>
    </member>
    <member name="F:EPiServer.Core.ContentProviderCapabilities.Wastebasket">
      <summary>
            Get a value indication wether this provider supports the wastebasket concept
            </summary>
    </member>
    <member name="T:EPiServer.Core.ContentProviderMapEventArgs">
      <summary>
            Event args for <see cref="T:EPiServer.Core.ContentProviderMap" /></summary>
    </member>
    <member name="T:EPiServer.Core.ContentProviderMap">
      <summary>
            Data class for storing content providers, use <see cref="T:EPiServer.Core.IContentProviderManager" /> to access the global instance of this class
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentProviderMap" /> class initialized with specified providers.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.#ctor(EPiServer.Web.Internal.PermanentContentLinkMapper)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.ContentProviderMap" /> class initialized with specified providers.
            </summary>
      <param name="pageLinkMapStore">The link mapper.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.#ctor(EPiServer.Web.Internal.PermanentContentLinkMapper,EPiServer.ServiceLocation.IServiceLocator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.ContentProviderMap" /> class initialized with specified providers.
            </summary>
      <param name="pageLinkMapStore">The link mapper.</param>
      <param name="serviceLocator">The service locator to use</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.GetDefaultProvider">
      <summary>
            Gets the default provider, that is the provider that is registered with key String.Empty.
            </summary>
      <returns>Default content provider</returns>
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.GetProvider(System.String)">
      <summary>
            Gets the content provider instance registered with given id.
            </summary>
      <param name="providerId">The provider id.</param>
      <returns>
            The content provider registered with the given id
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.GetProvider(EPiServer.Core.ContentReference)">
      <summary>
            Gets the content provider that serves the content specified by the given content reference
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.RemoveProvider(System.String)">
      <summary>
            Remove any loaded <see cref="T:EPiServer.Core.ContentProvider" /></summary>
      <param name="providerName">Name of the provider.</param>
      <returns>True if remove succeded</returns>
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.AddProvider(EPiServer.Core.ContentProvider)">
      <summary>
            Adds a content provider including entry points for the content provider to the map.
            </summary>
      <param name="provider">The content provider.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.Iterate(System.Action{EPiServer.Core.ContentProvider})">
      <summary>
            Method that let passed in delegate operate on each registered content provider
            </summary>
      <param name="contentProviderHandler">The content provider handler.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.Iterate(System.Func{EPiServer.Core.ContentProvider,System.Boolean})">
      <summary>
            Method that let passed in delegate operate on each registered content provider
            </summary>
      <param name="contentProviderFunction">The delegate function called for each provider. If function returns
            true the iteration is stopped.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProviderMap.IsEntryPoint(EPiServer.Core.ContentReference)">
      <summary>
            Determines whether the specified contentLink is registered as an entrypoint
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
        <c>true</c> if the specified contentLink is registered as a content provider; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.Core.ContentProviderMap.CustomProvidersExist">
      <summary>
            Gets a value indicating whether there exist other providers than Default provider
            </summary>
      <value>
        <c>true</c> if other providers than Default provider otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Core.ContentProviderNotFoundException">
      <summary>
            Thrown when a content provider cannot be found
            </summary>
      <remarks>
            This exception is commonly thrown when you are accessing a content provider that does 
            not exist using <see cref="T:EPiServer.IContentRepository" />. For debugging scenarios 
            you can use the <see cref="P:EPiServer.Core.ContentProviderNotFoundException.ContentLink" /> property for the source page of an exception. 
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentProviderNotFoundException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentProviderNotFoundException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentProviderNotFoundException.#ctor(System.String)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.ContentProviderNotFoundException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProviderNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.ContentProviderNotFoundException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProviderNotFoundException.#ctor(System.String,EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentProviderNotFoundException" /> class.
            </summary>
      <param name="pageProviderName">Name of the page provider.</param>
      <param name="contentLink">The page link.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProviderNotFoundException.#ctor(EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentProviderNotFoundException" /> class.
            </summary>
      <param name="contentLink">The page link.</param>
    </member>
    <member name="M:EPiServer.Core.ContentProviderNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentProviderNotFoundException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:EPiServer.Core.ContentProviderNotFoundException.ContentLink">
      <summary>
            Gets the content link.
            </summary>
      <value>The content link.</value>
    </member>
    <member name="T:EPiServer.Core.ContentReference">
      <summary>
            Contains information to reference <see cref="T:EPiServer.Core.ContentData" /> instances.
            </summary>
    </member>
    <member name="F:EPiServer.Core.ContentReference.EmptyReference">
      <summary>
            Returns an empty <see cref="T:EPiServer.Core.ContentReference" />.
            </summary>
    </member>
    <member name="F:EPiServer.Core.ContentReference.SelfReference">
      <summary>
            Returns a <see cref="T:EPiServer.Core.ContentReference" /> that references the current Content.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentReference.StartPage">
      <summary>
            Gets a <see cref="T:EPiServer.Core.PageReference" /> to the start page.
            <remarks>If start page is not configured, this property returns an empty PageReference. This property is null until the application has been initialized.</remarks></summary>
    </member>
    <member name="P:EPiServer.Core.ContentReference.RootPage">
      <summary>
            Gets a <see cref="T:EPiServer.Core.PageReference" /> to the root page.
            </summary>
      <value>The root page.</value>
      <remarks>This property is null until the application has been initialized.</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentReference.WasteBasket">
      <summary>
            Gets a <see cref="T:EPiServer.Core.PageReference" /> to the wastebasket page.
            </summary>
      <remarks>This property is null until the application has been initialized.</remarks>
    </member>
    <member name="P:EPiServer.Core.ContentReference.GlobalBlockFolder">
      <summary>
            Gets or sets the global block folder.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ContentReference.SiteBlockFolder">
      <summary>
            Gets or sets the site specific block folder.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentReference.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ContentReference" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentReference.#ctor(System.Int32)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.ContentReference" /> with content id.
            </summary>
      <param name="contentID">The content ID.</param>
    </member>
    <member name="M:EPiServer.Core.ContentReference.#ctor(System.Int32,System.Int32)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.ContentReference" /> with content id and working version.
            </summary>
      <param name="contentID">The content ID.</param>
      <param name="versionID">The version ID.</param>
    </member>
    <member name="M:EPiServer.Core.ContentReference.#ctor(System.Int32,System.Boolean)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.ContentReference" /> with content id and any available version. If no
            version is published the most recently saved will be loaded.
            </summary>
      <param name="contentID">The content id to set</param>
      <param name="getPublishedOrLatest">If the most recently saved should be loaded if no version is published.</param>
    </member>
    <member name="M:EPiServer.Core.ContentReference.#ctor(System.Int32,System.String)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.ContentReference" /> with content id and providerName.
            </summary>
      <param name="contentID">The content id to set</param>
      <param name="providerName">Name of the provider.</param>
    </member>
    <member name="M:EPiServer.Core.ContentReference.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.ContentReference" /> with content id, working version and providerName.
            </summary>
      <param name="contentID">The content id to set</param>
      <param name="versionID">The version to set</param>
      <param name="providerName">The name of the provider</param>
    </member>
    <member name="M:EPiServer.Core.ContentReference.#ctor(System.Int32,System.Int32,System.String,System.Boolean)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.ContentReference" /> with content id, working version and remote site.
            </summary>
      <param name="contentID">The content ID to set.</param>
      <param name="versionID">The version ID to set.</param>
      <param name="providerName">Name of the provider.</param>
      <param name="getPublishedOrLatest">This parameter is not used, see remarks</param>
    </member>
    <member name="M:EPiServer.Core.ContentReference.#ctor(System.String)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.ContentReference" /> from a string in the format
                contentID[_workID[_providerName]] or -
            throws EPiServerException on invalid argument
            </summary>
      <param name="complexReference">The string containing content information</param>
      <exception cref="T:EPiServer.Core.EPiServerException">
            Thrown if the string cannot be parsed as a valid ContentReference.
            </exception>
    </member>
    <member name="P:EPiServer.Core.ContentReference.ID">
      <summary>
            The id number of a <see cref="T:EPiServer.Core.ContentData" /> instance.
            </summary>
      <remarks>
            The content ID is a database assigned number and the only function is to provide a unique
            identification of a content instance within the current site.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.ContentReference.WorkID">
      <summary>
            The version id of a  <see cref="T:EPiServer.Core.ContentData" /> instance.
            </summary>
      <remarks>
            This is an internal representation of <see cref="T:EPiServer.Core.ContentData" /> versions. I e it is not a sequential version
            number for the content, but can contain any value. The only guarantee is that if content version A
            is created before content version B, then A.WorkID &lt; B.WorkID
            </remarks>
    </member>
    <member name="P:EPiServer.Core.ContentReference.ProviderName">
      <summary>
            A string that identifies a a provider that serves the content. For content served by default provider this
            value is null.
            </summary>
      <remarks>
            To see if the <b>ContentReference</b> is extern, use the <b>IsExternProvider</b> method rather than looking at the
            <b>ProviderName</b>.
            </remarks>
      <value>
        <b>True</b> if it is a extern reference.</value>
      <exception cref="T:System.NotSupportedException">
            Thrown if the instance is read-only.
            </exception>
    </member>
    <member name="P:EPiServer.Core.ContentReference.GetPublishedOrLatest">
      <summary>
            Indicates if the <see cref="T:EPiServer.Core.ContentReference" /> references a specific version or may be used to load the latest version.
            </summary>
      <returns>
        <c>true</c> if the latest should be loaded; otherwise, <c>false</c>.
            </returns>
      <remarks>
            This property only returns <c>true</c> if the <see cref="T:EPiServer.Core.ContentReference" /> object was created via the <see cref="M:EPiServer.Core.ContentReference.#ctor(System.Int32,System.Boolean)" /> 
            constructor. Typically, that constructor is used when you want to load the latest version a <see cref="T:EPiServer.Core.ContentData" /> regardless if it's 
            published or not.
            When GetPublishedOrLatest is set then the loading will not take fallback or replacement language settings into account.
            
            When a <see cref="T:EPiServer.Core.ContentReference" /> with GetPublishedOrLatest is set to <c>true</c> is passed to <see cref="T:EPiServer.IContentLoader" />
            the returned <see cref="T:EPiServer.Core.IContent" /> object will be, in order of preference:
            <list type="number"><item>The currently published version</item><item>The latest saved version</item></list>
            
            If GetPublishedOrLatest is set to <c>true</c>, any value assigned to <see cref="P:EPiServer.Core.ContentReference.WorkID" /> will be ignored.
            This setting is mainly used internally from edit of content and should be used with care since it might bypass cache.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.ContentReference.IsExternalProvider">
      <summary>
            Check if this reference is towards an external content provider.
            </summary>
      <returns>True if it is a content provider.</returns>
      <remarks>
            A ContentReference can point to an external provider as indicated by the <see cref="P:EPiServer.Core.ContentReference.ProviderName" /> property.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentReference.CreateReferenceWithoutVersion">
      <summary>
            Creates a reference to published content, that is a ContentReference with <see cref="P:EPiServer.Core.ContentReference.WorkID" />=0.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.CompareTo(EPiServer.Core.ContentReference)">
      <summary>
            Compares the instance to another provided <see cref="T:EPiServer.Core.ContentReference" />.
            </summary>
      <param name="other">The other <see cref="T:EPiServer.Core.ContentReference" /> instance to compare against.</param>
      <returns>
            Zero if both instances are considered equal, 
            Greater than zero if this instance is greater than the provided, 
            Less than zero if the provided instance is greater than this instance.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.CompareTo(System.Object)">
      <summary>
            Compares the instance to the given object.
            </summary>
      <param name="x">The object to compare against.</param>
      <returns>
            Zero if both instances are considered equal, 
            Greater than zero if this instance is greater than the provided, 
            Less than zero if the provided instance is greater than this instance.
            </returns>
      <exception cref="T:System.ArgumentException">
            Thrown if x is not of type ContentReference.
            </exception>
    </member>
    <member name="M:EPiServer.Core.ContentReference.Equals(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Indicates whether the current <see cref="T:EPiServer.Core.ContentReference" /> is equal to another <see cref="T:EPiServer.Core.ContentReference" />.
            </summary>
      <param name="other">A <see cref="T:EPiServer.Core.ContentReference" /> to compare with this object.</param>
      <param name="ignoreVersion">Indicates if version information should be excluded from the comparison.</param>
      <returns>
            true if the current object is considered equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.Equals(EPiServer.Core.ContentReference)">
      <summary>
            Indicates whether the current <see cref="T:EPiServer.Core.ContentReference" /> is equal to another <see cref="T:EPiServer.Core.ContentReference" />.
            </summary>
      <param name="other">A <see cref="T:EPiServer.Core.ContentReference" /> to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.Equals(System.Object)">
      <summary>
            Returns true if the objects o is equal with the instance of the ContentReference.
            </summary>
      <param name="o">The o.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            The return value can be be a string like "Digit[_Digit[_String]]" or "-"
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            The ContentReference format can be a string like "Digit[_Digit[_String]]", "-" or String.Empty
            </returns>
    </member>
    <member name="P:EPiServer.Core.ContentReference.IsReadOnly">
      <summary>
            Indicates if the <see cref="T:EPiServer.Core.ContentReference" /> is read-only.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentReference.MakeReadOnly">
      <summary>
            Changes the <see cref="T:EPiServer.Core.ContentReference" /> into a read-only object.
            </summary>
      <remarks>
            After calling this method, any attempt to modify this instance or any contained object
            will generate a <see cref="T:System.NotSupportedException" />. I e the semantics is "deep read-only".
            <para>
            Note! After setting an object to read-only it is not possible to revert back to read-write mode.
            You will have to call the CreateWritableClone method to get a copy that can be modified.
            </para></remarks>
    </member>
    <member name="M:EPiServer.Core.ContentReference.ThrowIfReadOnly">
      <summary>
            Utility method that, when called, throws a <see cref="T:System.NotSupportedException" /> indicating that the
            <see cref="T:EPiServer.Core.ContentReference" /> has been set as read-only.
            </summary>
      <remarks>
            This method is used internally by other <see cref="T:EPiServer.Core.ContentReference" /> methods to standardize the exception
            thrown when trying to modify a <see cref="T:EPiServer.Core.ContentReference" /> set as read-only.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentReference.CreateWritableClone">
      <summary>
            Creates a writable copy of the current <see cref="T:EPiServer.Core.ContentReference" /> instance.
            </summary>
      <returns>A writable copy of the current <see cref="T:EPiServer.Core.ContentReference" /> instance.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.ParseReference(System.String)">
      <summary>
            Create a new instance of type inheriting from <see cref="T:EPiServer.Core.ContentReference" /> from
            a string representation.
            </summary>
      <param name="complexReference">The string representation.</param>
      <returns>
            The created instance.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.CompareToIgnoreWorkID(EPiServer.Core.ContentReference)">
      <summary>
            Compares two ContentReference but ignores WorkID.
            </summary>
      <param name="contentReference">The content reference.</param>
      <returns>
            Will return <b>true</b> if ID and ProviderName are the same, otherwise <b>false</b>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.IsNullOrEmpty(EPiServer.Core.ContentReference)">
      <summary>
            Determines whether the specified content link is null or empty.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
        <c>true</c> if content link is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.TryParse(System.String,EPiServer.Core.ContentReference@)">
      <summary>
            Tries the parse.
            </summary>
      <param name="complexReference">The complex reference.</param>
      <param name="result">The result.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.Parse(System.String)">
      <summary>
            Parses the specified string to a <see cref="T:EPiServer.Core.ContentReference" /> instance.
            </summary>
      <param name="s">The string that should be parsed.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> instance if the string could be parsed; otherwise an exception in thrown.</returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.op_Equality(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>
            Returns true if x.ID == y.ID and x.WorkID == y.WorkID and x.ProviderName == y.ProviderName
            otherwise false
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReference.op_Inequality(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="T:EPiServer.Core.ContentReferenceComparer">
      <summary>
            Provides <see cref="T:EPiServer.Core.ContentReference" /> equality and comparer instances.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentReferenceComparer.Compare(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Compares two <see cref="T:EPiServer.Core.ContentReference" /> objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
      <param name="x">The first <see cref="T:EPiServer.Core.ContentReference" /> to compare.</param>
      <param name="y">The second <see cref="T:EPiServer.Core.ContentReference" /> to compare.</param>
      <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReferenceComparer.Equals(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Determines whether the two specified <see cref="T:EPiServer.Core.ContentReference" /> objects are considered equal.
            </summary>
      <param name="x">The first <see cref="T:EPiServer.Core.ContentReference" /> to compare.</param>
      <param name="y">The second <see cref="T:EPiServer.Core.ContentReference" /> to compare.</param>
      <returns>
            true if the specified <see cref="T:EPiServer.Core.ContentReference" /> objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReferenceComparer.GetHashCode(EPiServer.Core.ContentReference)">
      <summary>
            Returns a hash code for the specified <see cref="T:EPiServer.Core.ContentReference" /> instance.
            </summary>
      <param name="obj">The <see cref="T:EPiServer.Core.ContentReference" /> to get the hash code for.</param>
      <returns>
            A hash code for the provided <see cref="T:EPiServer.Core.ContentReference" /> instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="F:EPiServer.Core.ContentReferenceComparer.Default">
      <summary>
            Comparer that compares the identity, version and provider of two <see cref="T:EPiServer.Core.ContentReference" /> instances.
            </summary>
    </member>
    <member name="F:EPiServer.Core.ContentReferenceComparer.IgnoreVersion">
      <summary>
            Comparer that compares the identity and provider of two <see cref="T:EPiServer.Core.ContentReference" /> instances
            but ignores the version information provided by <see cref="P:EPiServer.Core.ContentReference.WorkID" />.
            </summary>
    </member>
    <member name="F:EPiServer.Core.ContentReferenceComparer.Complete">
      <summary>
            Comparer that compares all fields of two <see cref="T:EPiServer.Core.ContentReference" /> instances.
            </summary>
    </member>
    <member name="T:EPiServer.Core.ContentReferenceConverter`1">
      <summary>
            Type converter class for <see cref="T:EPiServer.Core.ContentReference" /> that handles convertion to and from strings.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentReferenceConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReferenceConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReferenceConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
    </member>
    <member name="M:EPiServer.Core.ContentReferenceConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
      <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
      <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
    </member>
    <member name="T:EPiServer.Core.ContentReferenceExtensions">
      <summary>
            Extenstions method 
            </summary>
      <summary>
            Extenstions method 
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentReferenceExtensions.ToReferenceWithoutVersion(EPiServer.Core.ContentReference)">
      <summary>
            If the current instance is references a version a new instance with will be created without version
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.ContentReferenceExtensions.ToPageReference(EPiServer.Core.ContentReference)">
      <summary>
            Converts the content link to Page Reference.
            </summary>
      <param name="contentLink">The content link.</param>
      <remarks>
            If the content link is not a PageRefernce then new PageReference object be returned.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ContentReferenceExtensions.ToReferenceWithoutVersion(EPiServer.Core.PageReference)">
      <summary>
            If the current instance is references a version a new instance with will be created without version
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.SystemContentRootNames">
      <summary>
            Consts for system root name
            </summary>
    </member>
    <member name="T:EPiServer.Core.ConvertedPageEventArgs">
      <summary>
            Event argument used in <see cref="T:EPiServer.Core.PageTypeConverter" /></summary>
    </member>
    <member name="M:EPiServer.Core.ConvertedPageEventArgs.#ctor(EPiServer.Core.PageReference,EPiServer.DataAbstraction.PageType,EPiServer.DataAbstraction.PageType,System.Boolean)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.ConvertedPageEventArgs" /></summary>
    </member>
    <member name="P:EPiServer.Core.ConvertedPageEventArgs.PageLink">
      <summary>
            The page which is converted
            </summary>
    </member>
    <member name="P:EPiServer.Core.ConvertedPageEventArgs.FromPageType">
      <summary>
            Specifies from which pagetype it is converted
            </summary>
    </member>
    <member name="P:EPiServer.Core.ConvertedPageEventArgs.ToPageType">
      <summary>
            Specifies to which pagetype it is converted
            </summary>
    </member>
    <member name="P:EPiServer.Core.ConvertedPageEventArgs.Recursive">
      <summary>
            Specifies if the convert operation is recursive for descendents of same pagetype
            </summary>
    </member>
    <member name="T:EPiServer.Core.DynamicPropertyBag">
      <summary>
            A bag for storing dynamic properties and make them quickly accessible based on language settings.
            </summary>
    </member>
    <member name="M:EPiServer.Core.DynamicPropertyBag.Add(EPiServer.DataAbstraction.DynamicProperty)">
      <summary>
            Adds the specified dynamic property.
            </summary>
      <param name="property">The property.</param>
      <remarks>
        <para>
            The LanguageBranch property is used to distinguish between multiple versions of the same dynamic property name.
            </para>
        <para>
            Note that you can only add dynamic properties defined on the same page to the same instance of a DynamicPropertyBag.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.DynamicPropertyBag.TryGetProperty(System.String,System.String,EPiServer.Core.PropertyData@)">
      <summary>
            Tries to retrieve a dynamic property.
            </summary>
      <param name="name">The name of the dynamic property.</param>
      <param name="languageBranch">The language branch that is requested.</param>
      <param name="property">The property.</param>
      <returns>True if the property was found, otherwise false.</returns>
    </member>
    <member name="T:EPiServer.Core.DynamicPropertyCache">
      <summary>
            Manages the dynamic property cache.
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Core.DynamicPropertyCache.DynamicPropertyFinder">
      <summary>
            Gets the current singleton instance of DynamicPropertyLookup.
            This property supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <value>The instance.</value>
    </member>
    <member name="M:EPiServer.Core.DynamicPropertyCache.Reset">
      <summary>
            Resets the singleton instance, causing it to be re-initalized on the next access.
            This method supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="T:EPiServer.Core.DynamicPropertyLookup">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.DynamicPropertyLookup.#ctor(EPiServer.DataAbstraction.DynamicPropertyCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.DynamicPropertyLookup" /> class.
            </summary>
      <param name="properties">The dynamic properties defined for this site.</param>
    </member>
    <member name="M:EPiServer.Core.DynamicPropertyLookup.#ctor(EPiServer.DataAbstraction.DynamicPropertyCollection,EPiServer.IContentLoader)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.DynamicPropertyLookup" /> class.
            </summary>
      <param name="properties">The dynamic properties defined for this site.</param>
      <param name="contentLoader">The content loader to use</param>
    </member>
    <member name="M:EPiServer.Core.DynamicPropertyLookup.FindDynamicProperty(System.String,EPiServer.Core.PropertyDataCollection)">
      <summary>
            Finds the dynamic property.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="properties">The properties of the page that requests the dynamic property value.</param>
      <returns>A PropertyData with the dynamic property information, or null if not found.</returns>
    </member>
    <member name="P:EPiServer.Core.DynamicPropertyLookup.DynamicPropertyNames">
      <summary>
            Gets a list of all dynamic property names.
            </summary>
      <value>The property names for all dynamic properties.</value>
    </member>
    <member name="T:EPiServer.Core.DynamicPropertyPage">
      <summary>
            Holds information about dynamic properties defined on a specific page.
            </summary>
    </member>
    <member name="M:EPiServer.Core.DynamicPropertyPage.#ctor(EPiServer.Core.PageReference,EPiServer.Core.PageReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.DynamicPropertyPage" /> class.
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="parent">The parent.</param>
    </member>
    <member name="P:EPiServer.Core.DynamicPropertyPage.PageLink">
      <summary>
            Gets the page that the settings are stored on.
            </summary>
      <value>The page that the settings are stored on.</value>
    </member>
    <member name="P:EPiServer.Core.DynamicPropertyPage.Parent">
      <summary>
            Gets the closest parent that has dynamic properties defined.
            </summary>
      <value>The closest parent that has dynamic properties defined.</value>
    </member>
    <member name="M:EPiServer.Core.DynamicPropertyPage.Add(EPiServer.DataAbstraction.DynamicProperty)">
      <summary>
            Adds a DynamicProperty to this page.
            </summary>
      <param name="property">A PropertyData with the property information.</param>
    </member>
    <member name="M:EPiServer.Core.DynamicPropertyPage.GetProperty(System.String,EPiServer.Core.PropertyDataCollection)">
      <summary>
            Gets the <see cref="T:EPiServer.Core.PropertyData" /> with the given name.
            </summary>
      <param name="name">The name.</param>
      <param name="properties">The properties for the current language.</param>
      <returns>The <see cref="T:EPiServer.Core.PropertyData" /> with the given name</returns>
      <remarks>The method checks if a property with the given name exist in either the language specific properties or the common properties.</remarks>
    </member>
    <member name="M:EPiServer.Core.DynamicPropertyPage.InitializeData">
      <summary>
            Initializes the inner PropertyDataCollectionFacade.
            </summary>
    </member>
    <member name="T:EPiServer.Core.EditTab">
      <summary>
            Defines the base set of tabs used when editing pages.
            </summary>
      <remarks>
            You can use any number above MaxSystemTab for custom tabs. Any property marked with None
            as OwnerTab will not show up as an editable property.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.EditTab.None">
      <summary>
            No tab at all.
            </summary>
      <remarks>Set this as the tab if you want to hide the property.</remarks>
    </member>
    <member name="F:EPiServer.Core.EditTab.MinSystemTab">
      <summary>
            The value of the first system tab.
            </summary>
    </member>
    <member name="F:EPiServer.Core.EditTab.Information">
      <summary>
            The first and main tab.
            </summary>
    </member>
    <member name="F:EPiServer.Core.EditTab.Advanced">
      <summary>
            A tab for more advanced settings.
            </summary>
    </member>
    <member name="F:EPiServer.Core.EditTab.Category">
      <summary>
            A tab where the built in page categories will be shown.
            </summary>
    </member>
    <member name="F:EPiServer.Core.EditTab.Link">
      <summary>
            A tab that is used to handle how links to this page shown be handled.
            </summary>
      <remarks>Used for internal links, external links, fetch data from etc.</remarks>
    </member>
    <member name="F:EPiServer.Core.EditTab.Scheduling">
      <summary>
            A tab that is used to handle time related matters such as publishing and creation.
            </summary>
    </member>
    <member name="F:EPiServer.Core.EditTab.MaxSystemTab">
      <summary>
            The value of the last system tab.
            </summary>
    </member>
    <member name="T:EPiServer.Core.EPiServerCancelException">
      <summary>
            An exception class that indicates that an action has been cancelled, for instance by an event handler.
            </summary>
    </member>
    <member name="M:EPiServer.Core.EPiServerCancelException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.EPiServerCancelException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.EPiServerCancelException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.EPiServerCancelException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Core.EPiServerCancelException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.EPiServerCancelException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Core.EPiServerCancelException.#ctor(System.String,EPiServer.PageEventArgs)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.EPiServerCancelException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="pageArgs">The <see cref="T:EPiServer.PageEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Core.EPiServerCancelException.#ctor(System.String,EPiServer.ContentEventArgs)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.EPiServerCancelException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="contentArgs">The <see cref="T:EPiServer.ContentEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Core.EPiServerCancelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.AccessDeniedException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:EPiServer.Core.EPiServerCancelException.ContentArgs">
      <summary>
            Gets the content event arguments that might contain information why the action was cancelled.
            </summary>
      <value>The content event arguments.</value>
    </member>
    <member name="T:EPiServer.Core.EPiServerException">
      <summary>
            Exception that is thrown by EPiServer when a non-fatal error occurs.
            </summary>
      <example>Example of throwing a exception with error message translated into different languages, 
            see <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for more information about adding custom language
            resources.
            <code lang="C#">
            throw new EPiServerException("My custom error","/customerror/genericfail");
            </code></example>
      <remarks>
        <para>All non-fatal exceptions in EPiServer is derived from this class.</para>
        <para>If an exception occurs while translating a message the default message will be displayed instead, 
            otherwise the actual cause of a exception could be hidden.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.EPiServerException.#ctor">
      <summary>
            Initializes a new instance
            </summary>
    </member>
    <member name="M:EPiServer.Core.EPiServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Core.EPiServerException.#ctor(System.String)">
      <summary>
            Initializes a new instance with a specified error message.
            </summary>
      <param name="message">Error message</param>
    </member>
    <member name="M:EPiServer.Core.EPiServerException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">Error message</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
    </member>
    <member name="M:EPiServer.Core.EPiServerException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance with a specified error message and a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
    </member>
    <member name="M:EPiServer.Core.EPiServerException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception. And a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
    </member>
    <member name="M:EPiServer.Core.EPiServerException.#ctor(System.String,System.String,System.String[])">
      <summary>
            Initializes a new instance with a specified error message and a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="list">Parameter list to substitute values in error text using <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
    </member>
    <member name="M:EPiServer.Core.EPiServerException.#ctor(System.String,System.String,System.Exception,System.String[])">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception. And a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
      <param name="list">Parameter list to substitute values in error text using <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
    </member>
    <member name="M:EPiServer.Core.EPiServerException.ChangeSettings(System.String,System.String,System.String[])">
      <summary>
            Provide derived classes a way to modify inner state of the exception.
            </summary>
      <param name="message">The error message for this exception</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="list">Parameter list to substitute values in error text using <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <remarks>This method is used internally by EPiServerException to store information about a thrown exception</remarks>
    </member>
    <member name="P:EPiServer.Core.EPiServerException.Message">
      <summary>
            Error message describing current exception
            </summary>
      <value>The actual error message which can be language dependent if a language key was passed to the exception</value>
    </member>
    <member name="T:EPiServer.Core.GetChildrenReferenceResult">
      <summary>
            A return model class used in custom implementations of Content Providers
            </summary>
    </member>
    <member name="P:EPiServer.Core.GetChildrenReferenceResult.ContentLink">
      <summary>
            The reference to the content
            </summary>
    </member>
    <member name="P:EPiServer.Core.GetChildrenReferenceResult.ModelType">
      <summary>
            Gets or sets the content type (used for filtering per type before loading content)
            </summary>
      <remarks>
            This is not guarantee to be the real content type as it was registered, for types that are not possible to load it might
            be a basetype as <see cref="T:EPiServer.Core.PageData" />, <see cref="T:EPiServer.Core.BlockData" /> or <see cref="T:EPiServer.Core.IContent" /></remarks>
    </member>
    <member name="P:EPiServer.Core.GetChildrenReferenceResult.IsLeafNode">
      <summary>
            If the content should be considered a leaf node (only used for performance reasons to avoid extra calls to GetChildrenReference)
            </summary>
      <remarks>
        <para>Setting this value to <c>true</c> will cause the cache to pre-populate a marker to avoid calling GetChildrenReferences for that item</para>
        <para>WARNING! This value is only valid when loaded directly from the data source directly (GetChildrenReferences), it may be not be correct if accessed after it has been added to the cache.</para>
      </remarks>
    </member>
    <member name="T:EPiServer.Core.Html.Internal.TagBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Internal class to avoid dependency to MVC to keep using the TagBuilder. The goal should likely be to move all classes using this to 
            the AspNet projects.
            This is a scaled down version of the MVC5 TagBuilder
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.ContentFragment">
      <summary>
            String fragment that represents a content placed in an XHTML string.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ContentFragment.#ctor(EPiServer.IContentLoader,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator,EPiServer.Web.DisplayOptions,EPiServer.Core.IPublishedStateAssessor,EPiServer.Web.IContextModeResolver,EPiServer.Security.IContentAccessEvaluator,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.ContentFragment" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ContentFragment.ContentData">
      <summary>
            Gets the current content data instance.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ContentFragment.Content">
      <summary>
            Gets the content.
            </summary>
      <value>
            The content.
            </value>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ContentFragment.ContentGuid">
      <summary>
            Gets or sets the unique identifier of the content referenced by the fragment.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ContentFragment.RenderSettings">
      <summary>
            Gets or sets the custom render settings for the fragment
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ContentFragment.DisplayOption">
      <summary>
            Gets the Display options selected for this fragment
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ContentFragment.ContentLink">
      <summary>
            Gets or sets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ContentFragment.GetContent">
      <summary>
            Gets the current content host instance.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ContentFragment.GetContent(System.Boolean)">
      <summary>
            Retrieves the current content instance with the ability to determine if master language fallback should be used.
            </summary>
      <param name="enableMasterLanguageFallback">Whether to use fallback for languageselector or not</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ContentFragment.Tag">
      <summary>
            Gets or sets the tag for the Content Fragment.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ContentFragment.InternalFormat">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ContentFragment.GetEditFormat">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ContentFragment.GetViewFormat">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ContentFragment.ReferencedPermanentLinkIds">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ContentFragment.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ContentFragment.GetSecurityDescriptor">
      <summary>
            Gets the security descriptor.
            </summary>
      <returns>
            An implementation of ISecurityDescriptor.
            </returns>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ContentFragment.ContentGroup">
      <summary>
            Gets the content group.
            </summary>
      <value>
            The content group.
            </value>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.EveryoneRoleSecurityDescriptor">
      <summary>
            Helps for the content fragment that be added wihout a security descriptor
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.EveryoneRoleSecurityDescriptor.HasAccess(System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>
            Determines whether the specified principal has the requested access.
            </summary>
      <param name="principal">The principal to authorize.</param>
      <param name="access">The requested access level.</param>
      <returns>
        <c>true</c> if the specified principal has access; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.EveryoneRoleSecurityDescriptor.GetAccessLevel(System.Security.Principal.IPrincipal)">
      <summary>
            Returns the access level for the specified principal.
            </summary>
      <param name="principal">The principal to check access against.</param>
      <returns>
            The access level.
            </returns>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.NoOneRoleSecurityDescriptor">
      <summary>
            Helps for the content fragment that be added wihout a security descriptor
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.NoOneRoleSecurityDescriptor.HasAccess(System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>
            Determines whether the specified principal has the requested access.
            </summary>
      <param name="principal">The principal to authorize.</param>
      <param name="access">The requested access level.</param>
      <returns>
        <c>true</c> if the specified principal has access; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.NoOneRoleSecurityDescriptor.GetAccessLevel(System.Security.Principal.IPrincipal)">
      <summary>
            Returns the access level for the specified principal.
            </summary>
      <param name="principal">The principal to check access against.</param>
      <returns>
            The access level.
            </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.PersonalizedContentSecurityDescriptor.#ctor(EPiServer.Security.IRoleSecurityDescriptor,EPiServer.Core.IPublishedStateAssessor,EPiServer.Security.IContentAccessEvaluator,EPiServer.Core.IContent,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.PersonalizedContentSecurityDescriptor" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.PersonalizedContentSecurityDescriptor.HasAccess(System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>
            Determines whether the specified principal has the requested access.
            </summary>
      <param name="principal">The principal to authorize.</param>
      <param name="access">The requested access level.</param>
      <returns>
        <c>true</c> if the specified principal has access; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Note that the access level is a bitmask, i e we simply check that all specified access types
            are granted to the principal.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.PersonalizedContentSecurityDescriptor.GetAccessLevel(System.Security.Principal.IPrincipal)">
      <summary>
            Returns the access level for the specified principal.
            </summary>
      <param name="principal">The principal to check access against.</param>
      <returns>
            The access level.
            </returns>
      <remarks>
            Use this method when you want to get the union of all access types granted to this principal. This is
            most likely only used for display purposes in the user interface. Code that checks access and performs
            different actions depending on the type of access granted should use the HasAccess method, since it
            does what you want and has the potential for being much faster.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.PersonalizedContentSecurityDescriptor.RoleIdentities">
      <summary>
            Gets or sets role identities
            </summary>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.FragmentHandlerHelper">
      <summary>
            Helper class for fragment handlers
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.FragmentHandlerHelper.GetGroups(EPiServer.HtmlParsing.ElementFragment)">
      <summary>
            Gets the visitor groups.
            </summary>
      <param name="element">The element.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.FragmentHandlerHelper.GetContentGroup(EPiServer.HtmlParsing.ElementFragment)">
      <summary>
            Gets the visitor content group.
            </summary>
      <param name="element">The element.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.FragmentHandlerHelper.AttributeWithFallback(EPiServer.HtmlParsing.ElementFragment,System.String,System.String)">
      <summary>
            Gets the attribute, with fallback to legacy
            </summary>
      <param name="element">The element.</param>
      <param name="dataName">The name.</param>
      <param name="legacyName">The legacy name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.FragmentHandlerHelper.AttributeValueWithFallback(EPiServer.HtmlParsing.ElementFragment,System.String,System.String,System.Boolean)">
      <summary>
            Gets the attribute, with fallback to legacy
            </summary>
      <param name="element">The element.</param>
      <param name="dataName">The name.</param>
      <param name="legacyName">The legacy name.</param>
      <param name="required">if set to <c>true</c> an exception will be thrown if no attribute is found.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.FragmentHandlerHelper.HtmlDecodeAttributeValue(System.String)">
      <summary>
            Helper method that reverts HttpUtility.HtmlAttributeEncode.
            </summary>
      <param name="value">The attribute value.</param>
      <returns>The decoded attribute value.</returns>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.FragmentParserContext">
      <summary>
            Represents the source data and context that is used when doing fragment parsing.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.FragmentParserContext.SourceFragments">
      <summary>
            Gets or sets a fragment enumerator for the source HTML.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.FragmentParserContext.ParserMode">
      <summary>
            Gets or sets the current parser mode to use.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.FragmentParserContext.EvaluateHash">
      <summary>
            Gets or sets a value indicating whether any hashes will be evaluated.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.FragmentParserContext.BufferedHtml">
      <summary>
            Gets or sets the buffered HTML used to create the resulting string fragment collection.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.FragmentParserContext.ResultFragments">
      <summary>
            Gets or sets a collection of the resulting string fragments.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.FragmentParserContext.FlushBufferedHtml">
      <summary>
            Writes the buffered HTML to the resulting fragments collection and clears the buffer.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.FragmentParserContext.Dispose">
      <summary>
            Disposes the <see cref="T:EPiServer.Core.Html.StringParsing.FragmentParserContext" /></summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.FragmentParserContext.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="cleanManaged">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.FragmentParserMode">
      <summary>
            The mode the parser should use.
            </summary>
    </member>
    <member name="F:EPiServer.Core.Html.StringParsing.FragmentParserMode.LeaveMappedLinks">
      <summary>
            Do not try to map standard links to permanent links.
            </summary>
    </member>
    <member name="F:EPiServer.Core.Html.StringParsing.FragmentParserMode.RemapLinks">
      <summary>
            Try to map links to permanent links.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.IContentGroup">
      <summary>
            Interface for getting content group
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.IContentGroup.ContentGroup">
      <summary>
            Gets the content group.
            </summary>
      <value>The content group.</value>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.IFragmentAttributeHandler">
      <summary>
            Handles attribute fragments.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.IFragmentAttributeHandler.ParseAttribute(EPiServer.Core.Html.StringParsing.FragmentParserContext,EPiServer.HtmlParsing.ElementFragment,EPiServer.HtmlParsing.AttributeFragment)">
      <summary>
            Parses the attribute of a fragment into a string fragment.
            </summary>
      <param name="context">The current parser context that contains the source and where any results should be written.</param>
      <param name="parentFragment">The element fragment containing the attribute.</param>
      <param name="attribute">The attribute that should be parsed.</param>
      <returns>
        <c>true</c> if the attribute was handled, otherwise <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.IFragmentElementHandler">
      <summary>
            Handles element fragments.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.IFragmentElementHandler.ParseElement(EPiServer.Core.Html.StringParsing.FragmentParserContext,EPiServer.HtmlParsing.ElementFragment)">
      <summary>
            Parses the provided element fragment into a string fragment and adds the result to the provided <paramref name="context" />.
            </summary>
      <param name="context">The current parser context that contains the source and where any results should be written.</param>
      <param name="element">The element that should be parsed.</param>
      <returns>
        <c>true</c> if the element was handled, otherwise <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.IFragmentParser">
      <summary>
            Defines the signature for a parser that parses content into fragments.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.IFragmentParser.Parse(System.String,EPiServer.Core.Html.StringParsing.FragmentParserMode,System.Boolean)">
      <summary>
            Parses the specified content into fragments.
            </summary>
      <param name="content">The content to parse</param>
      <param name="parserMode">Defines the mode for the parser.</param>
      <param name="evaluateHash">if set to <c>true</c> any found hashes should be evaluated.</param>
      <returns>A list of fragments</returns>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.ILinkAttributeMatch">
      <summary>
            Defines signature for deciding wheter a element attribute can contain a link.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ILinkAttributeMatch.IsLinkAttribute(EPiServer.HtmlParsing.ElementFragment,EPiServer.HtmlParsing.AttributeFragment)">
      <summary>
            Determines whether specified attribute on specified element can contain a link.
            </summary>
      <param name="elementFragment">The element fragment.</param>
      <param name="attributeFragment">The attribute fragment.</param>
      <returns>
        <c>true</c> if specified attribute can contain a link; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.INestedFragmentElementHandler">
      <summary>
            Handles nested element fragments
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.INestedFragmentElementHandler.NestedFragmentProcessor">
      <summary>
            Gets or sets a delegate to the fragment processor to use for nested elements.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.INestedStringFragment">
      <summary>
            States the representation of nested fragments in content. That is 
            a fragment can have an internal format (db) and an external format.
            </summary>
      <remarks>
             The implemented class should marked as Serializable or implement ISerializable interface
            </remarks>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.INestedStringFragment.Fragments">
      <summary>
            Gets the fragments.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.Internal.ContentFragmentHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Fragment element handler responsible for parsing a fragment element and if a content is found
            create a new <see cref="T:EPiServer.Core.Html.StringParsing.ContentFragment" /> that matches it.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.ContentFragmentHandler.#ctor(EPiServer.Core.Internal.ContentFragmentFactory,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGeneratorFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.Internal.ContentFragmentHandler" /> class.
            </summary>
      <param name="contentFragmentFactory">The content fragment factory.</param>
      <param name="securedFragmentMarkupGeneratorFactory">The secured fragment markup generator factory.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.ContentFragmentHandler.ParseElement(EPiServer.Core.Html.StringParsing.FragmentParserContext,EPiServer.HtmlParsing.ElementFragment)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.Internal.FragmentParser">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parses a html string to static and dynamic fragments. Dynamic fragments can be either
            permanent links or dynamic content. <br /></summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.FragmentParser.#ctor(EPiServer.Core.Html.StringParsing.IFragmentElementHandler[],EPiServer.Core.Html.StringParsing.IFragmentAttributeHandler[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.Internal.FragmentParser" /> class.
            </summary>
      <param name="fragmentElementHandlers">The fragment element handlers.</param>
      <param name="fragmentAttributeHandlers">The fragment attribute handlers.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.FragmentParser.Parse(System.String,EPiServer.Core.Html.StringParsing.FragmentParserMode,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class and its members are reserved for internal use and will be refectored to next release.
            </summary>
      <param name="html">The HTML.</param>
      <param name="parserMode">The parser mode to use.</param>
      <param name="evaluateHash">if set to <c>true</c> evaluate the hash code for dynamic content.</param>
      <returns>
            A list of <see cref="T:EPiServer.Core.Html.StringParsing.IStringFragment" />s.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.Internal.FragmentParserFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory that handles construction of default IFragmentParser instances.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.Internal.FragmentParserFactory.DefaultParserConstructor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the default parser constructor to use.
            </summary>
      <value>The default parser constructor.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.FragmentParserFactory.CreateDefaultParser">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets an instance of the registered default parser.
            </summary>
      <value>The default parser.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.Internal.ISecuredFragmentMarkupGeneratorFactoryExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.ISecuredFragmentMarkupGeneratorFactoryExtensions.CreateSecuredFragmentMarkupGenerator(EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGeneratorFactory,EPiServer.HtmlParsing.AttributeFragment,EPiServer.HtmlParsing.AttributeFragment)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the secured fragment markup generator.
            </summary>
      <param name="factory">The factory.</param>
      <param name="groupsInformation">The groups information.</param>
      <param name="contentGroupInformation">The content group information.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.Internal.LinkAttributeMatcher">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of ILinkAttributeMatch
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.LinkAttributeMatcher.IsLinkAttribute(EPiServer.HtmlParsing.ElementFragment,EPiServer.HtmlParsing.AttributeFragment)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether specified attribute on specified element can contain a link.
            </summary>
      <param name="elementFragment">The element fragment.</param>
      <param name="attributeFragment">The attribute fragment.</param>
      <returns>
        <c>true</c> if specified attribute can contain a link; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.Internal.PersonalizedContentFragmentHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles personalized content fragment
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.PersonalizedContentFragmentHandler.#ctor(EPiServer.Personalization.IPersonalizedContentFactory,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGeneratorFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.Internal.PersonalizedContentFragmentHandler" /> class.
            </summary>
      <param name="personalizedContentFactory">The personalized content factory.</param>
      <param name="securedFragmentMarkupGeneratorFactory">The secured fragment markup generator factory.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.Internal.PersonalizedContentFragmentHandler.NestedFragmentProcessor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.PersonalizedContentFragmentHandler.ParseElement(EPiServer.Core.Html.StringParsing.FragmentParserContext,EPiServer.HtmlParsing.ElementFragment)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.Internal.RoleBasedMarkupGeneratorFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Role based implementation of secured fragment markup generator factory
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.Internal.RoleBasedMarkupGenerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generates markup for fragments that are restricted for a list of visitor groups.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.Internal.RoleBasedMarkupGenerator.ContentGroup">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.Internal.RoleBasedMarkupGenerator.RoleSecurityDescriptor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.RoleBasedMarkupGenerator.GenerateCompressedGroupDisplayInformation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.RoleBasedMarkupGenerator.GenerateGroupDisplayInformation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.RoleBasedMarkupGenerator.GenerateGroupStorageInformation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.RoleSecurityDescriptor.#ctor(EPiServer.Security.IVirtualRoleRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.Internal.RoleSecurityDescriptor" /> class.
            </summary>
      <param name="virtualRoleRepository">The virtual role repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.RoleSecurityDescriptor.HasAccess(System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified principal is member of any of the supplied roles
            </summary>
      <param name="principal">The principal to authorize.</param>
      <param name="access">The requested access level.</param>
      <returns>
        <c>true</c> if the specified principal has access; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.RoleSecurityDescriptor.GetAccessLevel(System.Security.Principal.IPrincipal)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the access level for the specified principal.
            </summary>
      <param name="principal">The principal to check access against.</param>
      <returns>The access level.</returns>
      <remarks>
            This method will always return AccessLevel.Undefined
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.Internal.RoleSecurityDescriptor.RoleIdentities">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the identities.
            </summary>
      <value>The identities.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.Internal.UrlFragmentHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles permanent link attribute fragments
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.UrlFragmentHandler.#ctor(EPiServer.Core.Html.StringParsing.ILinkAttributeMatch)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.Internal.UrlFragmentHandler" /> class.
            </summary>
      <param name="linkAttributeMatcher">The link attribute matcher.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.UrlFragmentHandler.#ctor(EPiServer.Core.Html.StringParsing.ILinkAttributeMatch,EPiServer.Web.Routing.IUrlResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.Internal.UrlFragmentHandler" /> class.
            </summary>
      <param name="linkAttributeMatcher">The link attribute matcher.</param>
      <param name="urlResolver">The URL resolver.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.UrlFragmentHandler.ParseAttribute(EPiServer.Core.Html.StringParsing.FragmentParserContext,EPiServer.HtmlParsing.ElementFragment,EPiServer.HtmlParsing.AttributeFragment)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.UrlFragmentHandler.ParsePossibleLink(EPiServer.Core.Html.StringParsing.FragmentParserContext,EPiServer.HtmlParsing.AttributeFragment,System.String,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Evaluates a possible link
            </summary>
      <param name="context">The context.</param>
      <param name="attribute">The attribute.</param>
      <param name="attributeValue">The attribute value.</param>
      <param name="prefix">The prefix.</param>
      <param name="suffix">The suffix.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.UrlFragmentHandler.ExtractPermanentLink(EPiServer.Core.Html.StringParsing.FragmentParserContext,EPiServer.HtmlParsing.AttributeFragment,System.String,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extracts the permanent link.
            </summary>
      <param name="context">The context.</param>
      <param name="attribute">The attribute.</param>
      <param name="permanentLink">The permanent link.</param>
      <param name="prefix">The prefix.</param>
      <param name="suffix">The suffix.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator">
      <summary>
            Generates markup for a <see cref="T:EPiServer.Core.Html.StringParsing.IStringFragment" /> to indicate that it's restricted to a specified list of groups.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator.RoleSecurityDescriptor">
      <summary>
            Gets or sets the role security descriptor that has information on which groups the content should be restricted to.
            </summary>
      <value>The role security descriptor.</value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator.GenerateGroupDisplayInformation">
      <summary>
            Generates markup for an html editor to display the groups that the content is restricted to.
            </summary>
      <returns>Markup for an html editor to display the groups that the content is restricted to.</returns>
      <remarks>Used for block elements.</remarks>
      <seealso cref="M:EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator.GenerateCompressedGroupDisplayInformation" />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator.GenerateCompressedGroupDisplayInformation">
      <summary>
            Generates markup for an html editor to display information that the content is restricted to groups.
            </summary>
      <returns>Markup for an html editor to display information that the content is restricted to groups.</returns>
      <remarks>Used for inline elements.</remarks>
      <seealso cref="M:EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator.GenerateGroupDisplayInformation" />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator.GenerateGroupStorageInformation">
      <summary>
            Generates a string that can be used to store the groups that the content should be restricted to.
            </summary>
      <returns>A string that can be used to store the groups that the content should be restricted to.</returns>
      <remarks>This could be a comma separated string with group names or id:s.</remarks>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGeneratorFactory">
      <summary>
            Interface for creating an ISecuredFragmentMarkupGenerator
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGeneratorFactory.CreateSecuredFragmentMarkupGenerator">
      <summary>
            Creates the secured fragment markup generator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.IStringFragment">
      <summary>
            States the representation of fragments in content. That is 
            a fragment can have an internal format (db) and an external format.
            </summary>
      <remarks>
             The implemented class should marked as Serializable or implement ISerializable interface
            </remarks>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.IStringFragment.InternalFormat">
      <summary>
            Gets the internal format of the fragment, that is what is stored in db
            </summary>
      <value>The internal format.</value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.IStringFragment.GetEditFormat">
      <summary>
            Gets the format for edit mode
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.IStringFragment.GetViewFormat">
      <summary>
            Gets the format for view mode
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment">
      <summary>
            Represents a personalized content in a string.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment.#ctor(EPiServer.Personalization.IPersonalizedContentFactory,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment" /> class.
            </summary>
      <param name="personalizationFactory">The personalization factory.</param>
      <param name="securedFragmentMarkupGenerator">The secured fragment markup generator.</param>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment.Fragments">
      <summary>
            Gets or sets the inner fragments that contain the actual content.
            </summary>
      <value>The inner fragments.</value>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment.InternalFormat">
      <summary>
            Gets the internal format of the fragment through the factory
            </summary>
      <value>The internal format.</value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment.GetEditFormat">
      <summary>
            Gets the format for edit mode through the factory
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment.GetViewFormat">
      <summary>
            Gets the format for view mode through the factory
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment.ReferencedPermanentLinkIds">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this property.
            </summary>
      <value>
            An <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this property.
            </value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>
            Remaps permanent links according to the provided link mapping.
            </summary>
      <param name="idMap">The link mapping.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment.GetSecurityDescriptor">
      <summary>
            Gets the security descriptor.
            </summary>
      <returns>
            An implementation of ISecurityDescriptor.
            </returns>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment.ContentGroup">
      <summary>
            Gets or sets the content group.
            </summary>
      <value>The content group.</value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.PersonalizedContentFragment.GetRoles">
      <summary>
            Gets all used personalized content roles from fragments
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.StaticFragment">
      <summary>
            Represents a static string in content
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StaticFragment.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.StaticFragment" /> class.
            </summary>
      <param name="str">The static string</param>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.StaticFragment.InternalFormat">
      <summary>
            Gets the internal format of the fragment
            </summary>
      <remarks>For static fragment the output is same for all formats.</remarks>
      <value>The internal format.</value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StaticFragment.GetEditFormat">
      <summary>
            Gets the format for edit mode
            </summary>
      <remarks>For static fragment the output is same for all formats.</remarks>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StaticFragment.GetViewFormat">
      <summary>
            Gets the format for view mode
            </summary>
      <remarks>For static fragment the output is same for all formats.</remarks>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.StaticFragment.ReferencedPermanentLinkIds">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this string fragment.
            </summary>
      <remarks>
            Static fragments will treat all content as static with meaning no references are transfered.
            </remarks>
      <value>
            An <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this fragment.
            </value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StaticFragment.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>
            Remaps permanent links according to the provided link mapping.
            </summary>
      <remarks>Static fragment does not transfer any references.</remarks>
      <param name="idMap">The link mapping.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StaticFragment.WriteTo(System.IO.TextWriter)">
      <summary>
            Write static text to writer
            </summary>
      <param name="writer">The output</param>
      <remarks>This method allows streaming of big segments of static text</remarks>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.StringFragmentCollection">
      <summary>
            Container for string fragments
            </summary>
    </member>
    <member name="E:EPiServer.Core.Html.StringParsing.StringFragmentCollection.AddingFragment">
      <summary>
            Event which will be trigged before an fragment gets added.
            </summary>
    </member>
    <member name="E:EPiServer.Core.Html.StringParsing.StringFragmentCollection.ChangingFragment">
      <summary>
            Event which will be trigged before an fragment gets changed.
            </summary>
    </member>
    <member name="E:EPiServer.Core.Html.StringParsing.StringFragmentCollection.RemovedFragment">
      <summary>
            Raised before a string fragment is removed from the collection 
            </summary>
    </member>
    <member name="E:EPiServer.Core.Html.StringParsing.StringFragmentCollection.ClearedFragments">
      <summary>
            Raised before all string fragments are cleared from the collection.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.StringFragmentCollection" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.Html.StringParsing.IStringFragment})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.StringFragmentCollection" /> 
            class with the provided fragments.
            </summary>
      <param name="stringFragments">The string fragments.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.#ctor(System.Collections.Generic.IList{EPiServer.Core.Html.StringParsing.IStringFragment})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.StringFragmentCollection" /> class.
            </summary>
      <param name="stringFragments">The string fragments.</param>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.StringFragmentCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.GetFilteredFragments">
      <summary>
            Gets the string fragments for the current principal.
            </summary>
      <returns>
            A <see cref="T:EPiServer.Core.Html.StringParsing.StringFragmentCollection" /> with the fragments that the current principal should see.
            </returns>
      <remarks>This applies filtering for visitor group settings but but not access rights or filtering on publishing status.</remarks>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.GetFilteredFragments(System.Security.Principal.IPrincipal)">
      <summary>
            Gets the string fragments accessable for a given principal.
            </summary>
      <param name="principal">The principal.</param>
      <returns>
            A <see cref="T:EPiServer.Core.Html.StringParsing.StringFragmentCollection" /> with the fragments that the given principal should see.
            </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.ToReadOnly">
      <summary>
            Gets a read only version of the current collection.
            </summary>
      <returns>A read-only version of this collection.</returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.FilterAndMergeStringFragments(EPiServer.Core.Html.StringParsing.StringFragmentCollection.StringMode,System.Security.Principal.IPrincipal)">
      <summary>
            Creates a string based on the filtered string fragments and string rendering mode.
            </summary>
      <param name="mode">The string rendering mode.</param>
      <param name="principal">The principal.</param>
      <returns>A string with replaced links.</returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.MergeStringFragments(EPiServer.Core.Html.StringParsing.StringFragmentCollection.StringMode)">
      <summary>
            Creates a string based on the string fragments and string rendering mode.
            </summary>
      <param name="mode">The string rendering mode.</param>
      <returns>A string with replaced links.</returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.InsertItem(System.Int32,EPiServer.Core.Html.StringParsing.IStringFragment)">
      <summary>
            Inserts the item.
            Will call the event <see cref="E:EPiServer.Core.Html.StringParsing.StringFragmentCollection.AddingFragment" /> before the item gets added.
            </summary>
      <param name="index">The index.</param>
      <param name="item">The item.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.SetItem(System.Int32,EPiServer.Core.Html.StringParsing.IStringFragment)">
      <summary>
            Sets the item.
            Will call the event <see cref="E:EPiServer.Core.Html.StringParsing.StringFragmentCollection.ChangingFragment" /> before the item gets changed.
            </summary>
      <param name="index">The index.</param>
      <param name="item">The item.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.RemoveItem(System.Int32)">
      <summary>
            Removes the string fragment at the provided position. Will raise the <see cref="E:EPiServer.Core.Html.StringParsing.StringFragmentCollection.RemovedFragment" /> event once completed.
            </summary>
      <param name="index">The index of the fragment to remove.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentCollection.ClearItems">
      <summary>
            Clears all string fragments from the collection.
            Will raise the<see cref="E:EPiServer.Core.Html.StringParsing.StringFragmentCollection.ClearedFragments" /> event once completed.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.StringFragmentEventArgs">
      <summary>
            Event argument with <see cref="T:EPiServer.Core.Html.StringParsing.IStringFragment" /> property.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentEventArgs.#ctor(EPiServer.Core.Html.StringParsing.IStringFragment,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.StringFragmentEventArgs" /> class.
            </summary>
      <param name="stringFragment">The string fragment added to the collection.</param>
      <param name="newStartingIndex">The index where the <paramref name="stringFragment" /> has been inserted.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentEventArgs.#ctor(EPiServer.Core.Html.StringParsing.IStringFragment,System.Int32,EPiServer.Core.Html.StringParsing.IStringFragment,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.StringFragmentEventArgs" /> class.
            </summary>
      <param name="oldStringFragment">The old string fragment that has been removed or altered.</param>
      <param name="oldStartingIndex">Start index of the <paramref name="oldStringFragment" /> in the collection.</param>
      <param name="newStringFragment">The string fragment added to the collection or the new version of an altered fragment.</param>
      <param name="newStartingIndex">The index where the <paramref name="newStringFragment" /> has been inserted or altered.</param>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.StringFragmentEventArgs.NewStringFragment">
      <summary>
            Gets the string fragment.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.StringFragmentEventArgs.NewStartingIndex">
      <summary>
            Gets the index at which the change occurred.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.StringFragmentEventArgs.OldStringFragment">
      <summary>
            Gets the old string fragment.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.StringFragmentEventArgs.OldStartingIndex">
      <summary>
            Gets the index at which an item was removed or updated
            </summary>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.UrlFragment">
      <summary>
            Represents a link  in content
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.UrlFragment.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.UrlFragment" /> class.
            </summary>
      <param name="url">The unencoded url.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.UrlFragment.#ctor(System.String,EPiServer.Web.Routing.IUrlResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.UrlFragment" /> class.
            </summary>
      <param name="url">The unencoded url.</param>
      <param name="urlResolver">The URL resolver.</param>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.UrlFragment.InternalFormat">
      <summary>
            Gets the internal format of the link, that is what is stored in db
            </summary>
      <remarks>For a permanent link the internal format is a guid based link.</remarks>
      <value>The internal format.</value>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.UrlFragment.Url">
      <summary>
            Raw URL without any encoding applied
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.UrlFragment.GetEditFormat">
      <summary>
            Gets the link format for edit mode
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.UrlFragment.GetViewFormat">
      <summary>
            Gets the link format for view mode
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.UrlFragment.ReferencedPermanentLinkIds">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this fragment.
            </summary>
      <value>
            An <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this fragment.
            </value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.UrlFragment.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>
            Remaps permanent links according to the provided link mapping.
            </summary>
      <param name="idMap">The link mapping.</param>
    </member>
    <member name="T:EPiServer.Core.Html.WebStringHelper">
      <summary>
            Helper that removes all tags from specified string except tags marked as safe in 'EPiServer.Configuration.Settings.UISafeHtmlTags'&gt;
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.WebStringHelper.EncodeForWebString(System.String)">
      <summary>
            Encodes a string to be displayed on a web page.
            </summary>
      <param name="stringValue">The string value.</param>
      <returns>A string where all html tags except those defined in 'EPiServer.Configuration.Settings.UISafeHtmlTags' have been encoded and therefore will appear in the text instead of tags.</returns>
      <remarks>The character '&amp; will also be encoded to '&amp;amp;'.</remarks>
    </member>
    <member name="M:EPiServer.Core.Html.WebStringHelper.BuildRegularExpression(System.String[])">
      <summary>
            Creates a regular expression to be able to restore an array of html tags.
            </summary>
      <param name="safeTags">The html tags that you want to appear as tags instead of encoded text.</param>
      <returns>A regular expression to be able to restore an array of html tags.</returns>
    </member>
    <member name="T:EPiServer.Core.Internal.ContentFragmentFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory class for content fragment, which makes it possible to create a <see cref="T:EPiServer.Core.Html.StringParsing.ContentFragment" /> by a Guid.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentFragmentFactory.#ctor(EPiServer.IContentRepository,EPiServer.Web.DisplayOptions,EPiServer.Core.IPublishedStateAssessor,EPiServer.Security.IContentAccessEvaluator,EPiServer.Web.IPermanentLinkMapper,EPiServer.Web.IContextModeResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Internal.ContentFragmentFactory" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentFragmentFactory.CreateContentFragment(EPiServer.Core.ContentReference,System.Guid,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a content fragment using the provided content identifiers.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentGuid">The content GUID.</param>
      <param name="securedFragmentMarkupGenerator">The secured fragment markup generator.</param>
      <returns>
            The content fragment that was created.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentFragmentFactory.CreateContentFragment(EPiServer.Core.ContentReference,System.Guid,System.String,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a content fragment using the provided content identifiers.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentGuid">The content GUID.</param>
      <param name="tag">The tag for the Content Fragment</param>
      <param name="securedFragmentMarkupGenerator">The secured fragment markup generator.</param>
      <returns>
            The content fragment that was created.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentFragmentFactory.CreateContentFragment(EPiServer.Core.ContentReference,System.Guid,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a content fragment using the provided content identifiers.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentGuid">The content GUID.</param>
      <param name="securedFragmentMarkupGenerator">The secured fragment markup generator.</param>
      <param name="attributes">The custom attributes for the fragment.</param>
      <returns>
            The content fragment that was created.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentFragmentFactory.CreateContentFragment(EPiServer.Core.ContentReference,System.Guid,System.String,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a content fragment using the provided content identifiers.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentGuid">The content GUID.</param>
      <param name="tag">The tag for the Content Fragment</param>
      <param name="securedFragmentMarkupGenerator">The secured fragment markup generator.</param>
      <param name="attributes">The custom attributes for the fragment.</param>
      <returns>
            The content fragment that was created.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.BatchProgress">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents information on the progress of a asynchronous batch process.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.BatchProgress.Total">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the total number of items that is being processed.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.BatchProgress.Current">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the number of items in the process that currently has been processed.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.BatchPublisher">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles batch operations on content versions in relation to publishing.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.BatchPublisher.#ctor(EPiServer.Core.Internal.ContentRepository,EPiServer.Core.IContentProviderManager,EPiServer.Core.Internal.IBatchPublishSortingStrategy,EPiServer.Async.TaskExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructor for <see cref="T:EPiServer.Core.Internal.BatchPublisher" /></summary>
      <param name="contentRepository">The content repository.</param>
      <param name="providerManager">The provider manager used to check provider capabilities.</param>
      <param name="sortingStrategy">Object responsible for the sorting of content items before publishing them.</param>
      <param name="taskExecutor">The task executor responsible for running publishing tasks.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.BatchPublisher.Cancel(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sends a cancellation signal to a publishing task with the specified id.
            </summary>
      <param name="trackingTokenId">The tracking token id associated with the publishing task.</param>
      <returns>The Task that was cancelled or null if no task was found.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.BatchPublisher.PublishAsync(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Starts a task to publish the specified versions.
            </summary>
      <param name="versions">The versions to publish.</param>
      <returns>The task that performs the publish operation.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.BatchPublisher.PublishAsync(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Starts a task to publish the specified versions.
            </summary>
      <param name="versions">The versions to publish.</param>
      <param name="accessLevel">The access level to check.</param>
      <returns>The task that performs the publish operation.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.BatchPublisher.PublishAsync(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Nullable{System.DateTime})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Starts a task to publish the specified versions.
            </summary>
      <param name="versions">The versions to publish.</param>
      <param name="delayPublishUntil">
      </param>
      <returns>The task that performs the publish operation.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.BatchPublisher.PublishAsync(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Nullable{System.DateTime},EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Starts a task to publish the specified versions.
            </summary>
      <param name="versions">The versions to publish.</param>
      <param name="delayPublishUntil">
      </param>
      <param name="accessLevel">The access level to check.</param>
      <returns>The task that performs the publish operation.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.BatchPublisher.PublishAsync(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Nullable{System.DateTime},EPiServer.Security.AccessLevel,EPiServer.Async.TrackingToken)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Starts a task to publish the specified versions.
            </summary>
      <param name="versions">The versions to publish.</param>
      <param name="delayPublishUntil">
      </param>
      <param name="accessLevel">The access level to check.</param>
      <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
      <returns>The task that performs the publish operation.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.BatchPublisher.PublishAsync(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Nullable{System.DateTime},EPiServer.Security.AccessLevel,EPiServer.Async.TrackingToken,System.Threading.CancellationToken,System.IProgress{EPiServer.Core.Internal.BatchProgress})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Starts a task to publish the specified versions with the option to cancel the work before it's finished. Progress can be tracked 
            using the specified progress object.
            </summary>
      <param name="versions">The versions to publish.</param>
      <param name="delayPublishUntil">
      </param>
      <param name="accessLevel">The access level to check.</param>
      <param name="trackingToken">The tracking token that will be associated with the task so it can be tracked.</param>
      <param name="cancellationToken">The cancellation token that can be used to cancel the task before it completes.</param>
      <param name="progress">The status instance where progress will be reported on.</param>
      <returns>The task that performs the publish operation.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.BatchPublisher.CancelDelayedPublishing(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Security.AccessLevel,System.Threading.CancellationToken,System.IProgress{EPiServer.Core.Internal.BatchProgress})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Starts a task to cancel any delayed publishing setup for the specified versions.
            </summary>
      <param name="versions">The versions for which to cancel the delayed publishing.</param>
      <param name="accessLevel">The access level required to complete this task.</param>
      <param name="cancellationToken">The cancellation token used to signal if the task should be cancelled before completion.</param>
      <param name="progress">The instance upon which progress is reported to.</param>
      <returns>
            The task that performs the cancelling operation.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.CategoryRepositoryExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.CategoryRepositoryExtensions.GetCategoryName(EPiServer.DataAbstraction.CategoryRepository,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ChangeTracking">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.Core.IChangeTrackable" />.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ChangeTracking.Created">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the date and time when this content instance was created.
            </summary>
      <value>
      </value>
      <remarks>
        <b>Created</b> is maintained by the EPiServer infrastructure and you have no control over them.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ChangeTracking.CreatedBy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the username of the user that created this content instance.
            </summary>
      <value>
      </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ChangeTracking.Changed">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the date when this content instance was last marked as changed.
            </summary>
      <value>
      </value>
      <remarks>
            The changed date is only updated when property <see cref="P:EPiServer.Core.Internal.ChangeTracking.SetChangedOnPublish" /> is set to <c>true</c>.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ChangeTracking.SetChangedOnPublish">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets a value indicating whether the <see cref="P:EPiServer.Core.Internal.ChangeTracking.Changed" /> should be updated on publish.
            </summary>
      <value>
        <c>true</c> if <see cref="P:EPiServer.Core.Internal.ChangeTracking.Changed" /> should be updated; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ChangeTracking.ChangedBy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the username of the user that most recently changed this content instance.
            </summary>
      <value>
      </value>
      <remarks>
            For instance, if a Windows account was used to create the instance, expect a string
            being returned looking like 'DOMAIN\User Name'.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ChangeTracking.Saved">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the date and time when this content instance was last saved.
            </summary>
      <value>
      </value>
      <remarks>
            Saved is the sibling of <see cref="P:EPiServer.Core.Internal.ChangeTracking.Created" /> and is maintained by the EPiServer infrastructure.
            This means that you have no control over them.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ChangeTracking.DeletedBy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating who deleted this instance.
            </summary>
      <value>
            The deleted by.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ChangeTracking.Deleted">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating when this instance is deleted.
            </summary>
      <value>
            The deleted date.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ChangeTracking.CreateWritableClone">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the writable clone.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ChangeTracking.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the writable clone.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ChangeTracking.IsReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ChangeTracking.MakeReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Makes the read only.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ChangeTracking.ThrowIfReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Utility method that, when called, throws a <see cref="T:System.NotSupportedException" /> indicating that the
            <see cref="T:EPiServer.Core.Internal.ContentID" /> has been set as read-only.
            </summary>
      <remarks>
            This method is used internally by other <see cref="T:EPiServer.Core.Internal.ContentID" /> methods to standardize the exception
            thrown when trying to modify a <see cref="T:EPiServer.Core.Internal.ContentID" /> set as read-only.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ChangeTracking.IsModified">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ChangeTracking.ResetModified">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resets the modified flag on all the data contained on the instance.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ContentAccessChecker">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ContentCacheRemover">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Remove content from cache 
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ContentID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. ContentID class implements <see cref="T:EPiServer.Core.IContent" /> except <see cref="T:EPiServer.Core.IContentData" /> parts.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentID.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the name.
            </summary>
      <value>
            The name.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentID.ContentLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the content link. It used to hold references to content in the EPiServer system.
            </summary>
      <value>
            The content link.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentID.ParentLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the parent link. It used to hold references to the parent content in the EPiServer system.
            </summary>
      <value>
            The parent link.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentID.ContentGuid">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the content GUID.
            </summary>
      <value>
            The content GUID.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentID.ContentTypeID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the content type ID that this <see cref="T:EPiServer.Core.ContentData" /> is an instance of.
            </summary>
      <value>The content type ID.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentID.IsDeleted">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether this instance is deleted.
            </summary>
      <value>
        <c>true</c> if this instance is deleted; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentID.CreateWritableClone">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the writable clone.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentID.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the writable clone.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentID.IsReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentID.MakeReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Makes the read only.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentID.ThrowIfReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Utility method that, when called, throws a <see cref="T:System.NotSupportedException" /> indicating that the
            <see cref="T:EPiServer.Core.Internal.ContentID" /> has been set as read-only.
            </summary>
      <remarks>
            This method is used internally by other <see cref="T:EPiServer.Core.Internal.ContentID" /> methods to standardize the exception
            thrown when trying to modify a <see cref="T:EPiServer.Core.Internal.ContentID" /> set as read-only.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentID.IsModified">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentID.ResetModified">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resets the modified flag on all the data contained on the instance.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ContentInstanceCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Supporting API to content provider that deals with reading and inserting IContent into cache
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ContentLoader">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.Get``1(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided GUID.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The content identifier.</param>
      <returns>The requested content item, as the specified type.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentGuid" /> as id.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.Get``1(System.Guid,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the specific language of content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The content identifier.</param>
      <param name="language">The language.</param>
      <returns>
            The requested content item, as the specified type.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentGuid" /> as id.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.Get``1(System.Guid,EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided GUID 
            given by the provided context.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The content identifier.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            The requested content item, as the specified type.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentGuid" /> as id.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.Get``1(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <returns>The requested content item, as the specified type.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentLink" /> as id.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.Get``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the specific language of content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="language">The langauge </param>
      <returns>The requested content item, as the specified type.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentLink" /> as id.</exception>
      <remarks>
            If the <paramref name="contentLink" /> is a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the <paramref name="language" /> is ignored and that specific version is returned.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.Get``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference
            given by the provided context.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            The requested content, as the specified type, in the specified language.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentLink" /> as id.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetChildren``1(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the children of the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <returns>The children of the specifed parent, as the specified type.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetChildren``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the children of the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="language">The language.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the children of the content item represented by the provided reference
            given by the provided settings.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetChildren``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the children of the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="language">The language.</param>
      <param name="startIndex">The index of the first child to return.</param>
      <param name="maxRows">The max number of children to return.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <remarks>
            This is the overload of GetChildren that supports paging.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions,System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the children of the content item represented by the provided reference
            given by the provided context.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <param name="startIndex">The index of the first child to return.</param>
      <param name="maxRows">The max number of children to return.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <remarks>
            This is the overload of GetChildren that supports paging.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetDescendents(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets references to the descendents of the specified content.
            </summary>
      <param name="contentLink">A reference to the parent whose descendents should be returned.</param>
      <returns>A list of references to all the descendent of specified content.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetAncestors(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves all content items located above the specified content.
            </summary>
      <param name="contentLink">The reference to the item whose ancestors you want to retrieve.</param>
      <returns>
            A list of all items located above the specified reference.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all content items that is represented by the provided references given the language.
            </summary>
      <remarks>
        <para>
            For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
            <paramref name="language" /> is ignored and that specific version is returned.
            </para>
        <para>
             If <paramref name="contentLinks" /> contain duplicate entries only one <see cref="T:EPiServer.Core.IContent" /> instance is returned for the duplicate entries.
            </para>
      </remarks>
      <param name="contentLinks">A list of references to content that should be fetched.</param>
      <param name="language">The language.</param>
      <returns>
            A list of content for the specifed references.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all content items that is represented by the provided references
            given by the provided context.
            </summary>
      <remarks>
        <para>
            For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
            language on context is ignored and that specific version is returned.
            </para>
        <para>
             If <paramref name="contentLinks" /> contain duplicate entries only one <see cref="T:EPiServer.Core.IContent" /> instance is returned for the duplicate entries.
            </para>
      </remarks>
      <param name="contentLinks">A list of references to content that should be fetched.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            A list of content for the specifed references.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetBySegment(EPiServer.Core.ContentReference,System.String,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the child <see cref="T:EPiServer.Core.IContentData" /> instance that has a <see cref="P:EPiServer.Web.Routing.IRoutable.RouteSegment" />
            that matches <paramref name="urlSegment" />.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="language">The language</param>
      <returns>
            The content instance that matches <paramref name="urlSegment" /> or null if no match.
            </returns>
      <remarks>
            It is the passed in <paramref name="language" /> that is responsible to handle fallback and replacement settings for language.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.GetBySegment(EPiServer.Core.ContentReference,System.String,EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the child <see cref="T:EPiServer.Core.IContentData" /> instance that has a <see cref="P:EPiServer.Web.Routing.IRoutable.RouteSegment" />
            that matches <paramref name="urlSegment" />.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="settings">The settings to use.</param>
      <returns>
            The content instance that matches <paramref name="urlSegment" /> or null if no match.
            </returns>
      <remarks>
            It is the passed in <paramref name="settings" /> that is responsible to handle fallback and replacement settings for language.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.TryGet``1(EPiServer.Core.ContentReference,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.TryGet``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="language">The language.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <remarks>
            If the <paramref name="contentLink" /> is a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the <paramref name="language" /> is ignored and that specific version is returned.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.TryGet``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.TryGet``1(System.Guid,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The unique identifier for the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.TryGet``1(System.Guid,System.Globalization.CultureInfo,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The guid to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="language">The language.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentLoader.TryGet``1(System.Guid,EPiServer.Core.LoaderOptions,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The unique identifier for the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ContentProviderDependencyHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Internal class that provides a single access to all dependencies used by the abstract
            <see cref="T:EPiServer.Core.ContentProvider" /> class.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentProviderDependencyHelper.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Internal.ContentProviderDependencyHelper" /> class.
            Provided for Unit testing purpouses.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentProviderDependencyHelper.#ctor(EPiServer.Construction.IContentFactory,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository},EPiServer.Web.Internal.IUrlSegmentLocator,EPiServer.Web.IUrlSegmentGenerator,EPiServer.Web.IUrlSegmentCreator,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Core.Transfer.IContentCopyHandler,EPiServer.Validation.IContextValidationService,EPiServer.Core.IContentCacheKeyCreator,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentCoreDataLoader},EPiServer.Web.IVirtualPathResolver,EPiServer.Core.ContentOptions,EPiServer.Diagnostics.Internal.IPerformanceCounter,EPiServer.Web.IRequestHostResolver,EPiServer.Core.Internal.IContentInstanceCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Internal.ContentProviderDependencyHelper" /> class.
            </summary>
      <remarks>
            Do not call this constructor from production code as it may change between versions. 
            If required, request an instance from the service container.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.ContentCoreDataLoader">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.DataAbstraction.IContentCoreDataLoader" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.ContentTypeRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.DataAbstraction.IContentTypeRepository" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.ContentFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Construction.IContentFactory" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.RequestHostResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Web.IRequestHostResolver" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.LanguageBranchRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.DataAbstraction.ILanguageBranchRepository" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.ValidationService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Validation.IValidationService" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.UrlSegmentLocator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Web.Internal.IUrlSegmentLocator" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.UrlSegmentGenerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Web.IUrlSegmentGenerator" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.UrlSegmentCreator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Web.Internal.IUrlSegmentLocator" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.ContentCopyHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Core.Transfer.IContentCopyHandler" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.ContentCacheKeyCreator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Core.IContentCacheKeyCreator" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.VirtualPathResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Web.IVirtualPathResolver" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.CacheInstance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.ContentCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Core.Internal.ContentInstanceCache" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ContentProviderDependencyHelper.Options">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the <see cref="T:EPiServer.Core.ContentOptions" /> dependency.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.ContentProviderParameter.EntryPoint">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Const for key 'entryPoint' used to configure entry point for provider
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.ContentProviderParameter.IconPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Const for key 'iconPath' used to configure path to icon for provider used in content tree
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.ContentProviderParameter.Capabilities">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Const for key 'capabilities' used to configure capabilities for provider
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.ContentProviderParameter.WastebasketName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Const for key 'wastebasketName' used to name the wastebasket for provider
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ContentReferenceTypeHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that handles storage format of <see cref="T:EPiServer.Core.ContentReference" /> towards Dynamic Data Store.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentReferenceTypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns an <see cref="T:EPiServer.Core.ContentReference" /> instance from the database format.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="targetType">Type of the target.</param>
      <param name="ownerType">Type of the owner.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentReferenceTypeHandler.MapToDatabaseType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the database type.
            </summary>
      <param name="type">The type.</param>
      <returns>The type that is stored in database</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentReferenceTypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the propertyValue in the database format.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="ownerType">Type of the owner.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ContentRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Defines repository methods for <see cref="T:EPiServer.Core.IContent" /> objects. 
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetLanguageBranches``1(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves a collection of <see cref="T:EPiServer.Core.IContentData" /> objects for all languages of the provided content link.
            </summary>
      <param name="contentLink">The reference whose language branches you want to retrieve.</param>
      <returns>A collection of <see cref="T:EPiServer.Core.IContent" /> for all language branches.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetDefault``1(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown when user doesn't have access right to perform this action
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetDefault``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from the <paramref name="language" />.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <param name="language">The language of the created item.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown when user doesn't have access right to perform this action
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetDefault``1(EPiServer.Core.ContentReference,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from the language.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <param name="contentTypeID">The ID of the content type that the content item should be created as.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown when user doesn't have access right to perform this action
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetDefault``1(EPiServer.Core.ContentReference,System.Int32,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from the language.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <param name="contentTypeID">The ID of the content type that the content item should be created as.</param>
      <param name="language">The language of the created item.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesn't have access right to perform this action
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.CreateLanguageBranch``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new language branch for a content item in the specified language
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <remarks>Access checks are performed during Save. CreateLanguageBranch method returns not persisted in-memory instance.</remarks>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="contentLink">The link to the content to create a language branch for.</param>
      <param name="language">The language.</param>
      <returns>
            An <see cref="T:EPiServer.Core.IContent" /> object for the newly created content in the specified language.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Copy(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel,EPiServer.Security.AccessLevel,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a copy of a content and it's eventual children and adds the new content(s) under the specialized destination
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="source">The content that should be copied.</param>
      <param name="destination">The destination where the content will be copied as a child to.</param>
      <param name="requiredSourceAccess">The access rights required on the source content that is to be copied.</param>
      <param name="requiredDestinationAccess">The access rights required on the destination.</param>
      <param name="publishOnDestination">If the new content(s) should be published on the destination.</param>
      <returns>A reference to the new copy of the content.</returns>
      <remarks>
            If <paramref name="publishOnDestination" /> is <c>true</c> the new page will be published immediately at the destination.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Delete(EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes a content from the repository first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="forceDelete">If set to <c>true</c>, deletes the content even if it is being referenced by other content.</param>
      <param name="access">The required access level that the current user must have to be allowed to delete the content.</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown when user doesn't have access right to perform this action.
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.DeleteChildren(EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes all the children of a content from the repository,
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="forceDelete">If set to <c>true</c>, deletes child even if they are being referenced by other content items..</param>
      <param name="access">The required access level that the current user must have to be allowed to delete the child.</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown when user doesn't have access right to perform this action. Permission to all affected children are checked before any content is deleted.
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.DeleteLanguageBranch(EPiServer.Core.ContentReference,System.String,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the specified language branch for a content from the repository 
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The link to the page which will be deleted.</param>
      <param name="languageBranch">The language branch to delete.</param>
      <param name="access">The required access level that the current user must have on the page to be allowed to delete the language branch.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Moves a content from it's current location to another position in the content structure
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The content that should be moved.</param>
      <param name="destination">The destination where the content will be moved as a child to.</param>
      <param name="requiredSourceAccess">The minimal access rights required on the source content that is to be moved.</param>
      <param name="requiredDestinationAccess">The minimal access rights required on the destination.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the moved content.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.MoveToWastebasket(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Moves a page to the wastebasket.
            </summary>
      <param name="contentLink">The content that should be moved to the wastebasket.</param>
      <param name="deletedBy">The user who deleted the content.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves a content to the repository with the provided save action performed 
            first ensuring that the current user meets the minimum access rights requirements.
            </summary>
      <param name="content">An <see cref="T:EPiServer.Core.IContent" /> object containing all the data that should be saved.</param>
      <param name="action">The exact <see cref="T:EPiServer.DataAccess.SaveAction" /> that should be performed.</param>
      <param name="access">The minimum access level that the current user must have to the content.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the saved content.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Publish(EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Publishes a content item to the repository first ensuring that the current user meets the minimum access rights requirements.
            </summary>
      <param name="contentLink">A <see cref="T:EPiServer.Core.ContentReference" /> to the content item that should be published.</param>
      <param name="access">The minimum access level that the current user must have to the content.</param>
      <returns>
            A <see cref="T:EPiServer.Core.ContentReference" /> to the published content. This will be unchanged from the 
            provided <paramref name="contentLink" /> unless the content is a previously published version.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Publish(EPiServer.Core.ContentReference,System.Nullable{System.DateTime},EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Publishes a content item to the repository first ensuring that the current user meets the minimum access rights requirements.
            </summary>
      <param name="contentLink">A <see cref="T:EPiServer.Core.ContentReference" /> to the content item that should be published.</param>
      <param name="access">The minimum access level that the current user must have to the content.</param>
      <param name="delayPublishUntil">The actual publish operation can be delayed to a later date</param>
      <returns>
            A <see cref="T:EPiServer.Core.ContentReference" /> to the published content. This will be unchanged from the 
            provided <paramref name="contentLink" /> unless the content is a previously published version.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetReferencesToContent(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the reference information of the references to the specified content and optionally its descendants.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="includeDecendents">if set to <c>true</c> references to descendants are also checked.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.ListDelayedPublish">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all content that are set to delayed publish.
            </summary>
      <returns>
            All matching content Versions
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Get``1(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided GUID.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The content identifier.</param>
      <returns>The requested content item, as the specified type.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentGuid" /> as id.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Get``1(System.Guid,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the specific language of content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The content identifier.</param>
      <param name="language">The language.</param>
      <returns>
            The requested content item, as the specified type.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentGuid" /> as id.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Get``1(System.Guid,EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided GUID 
            given by the provided context.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The content identifier.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            The requested content item, as the specified type.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentGuid" /> as id.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Get``1(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <returns>The requested content item, as the specified type.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentLink" /> as id.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Get``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the specific language of content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="language">The language </param>
      <returns>The requested content item, as the specified type.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentLink" /> as id.</exception>
      <remarks>
            If the <paramref name="contentLink" /> is a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the <paramref name="language" /> is ignored and that specific version is returned.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.Get``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference
            given by the provided context.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            The requested content, as the specified type, in the specified language.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentLink" /> as id.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetChildren``1(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the children of the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <returns>The children of the specifed parent, as the specified type.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetChildren``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the children of the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="language">The language.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the children of the content item represented by the provided reference
            given by the provided context.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetChildren``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the children of the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="language">The language.</param>
      <param name="startIndex">The index of the first child to return.</param>
      <param name="maxRows">The max number of children to return.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <remarks>
            This is the overload of GetChildren that supports paging.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions,System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the children of the content item represented by the provided reference
            given by the provided context.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <param name="startIndex">The index of the first child to return.</param>
      <param name="maxRows">The max number of children to return.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <remarks>
            This is the overload of GetChildren that supports paging.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetDescendents(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets references to the descendents of the specified content.
            </summary>
      <param name="contentLink">A reference to the parent whose descendents should be returned.</param>
      <returns>A list of references to all the descendent of specified content.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetAncestors(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves all content items located above the specified content.
            </summary>
      <param name="contentLink">The reference to the item whose ancestors you want to retrieve.</param>
      <returns>
            A list of all items located above the specified reference.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all content items that is represented by the provided references given the language.
            </summary>
      <remarks>
        <para>
            For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
            <paramref name="language" /> is ignored and that specific version is returned.
            </para>
        <para>
             If <paramref name="contentLinks" /> contain duplicate entries only one <see cref="T:EPiServer.Core.IContent" /> instance is returned for the duplicate entries.
            </para>
      </remarks>
      <param name="contentLinks">A list of references to content that should be fetched.</param>
      <param name="language">The language.</param>
      <returns>
            A list of content for the specifed references.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all content items that is represented by the provided references
            given by the provided context.
            </summary>
      <remarks>
        <para>
            For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
            language on context is ignored and that specific version is returned.
            </para>
        <para>
             If <paramref name="contentLinks" /> contain duplicate entries only one <see cref="T:EPiServer.Core.IContent" /> instance is returned for the duplicate entries.
            </para>
      </remarks>
      <param name="contentLinks">A list of references to content that should be fetched.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            A list of content for the specifed references.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetBySegment(EPiServer.Core.ContentReference,System.String,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the child <see cref="T:EPiServer.Core.IContentData" /> instance that has a <see cref="P:EPiServer.Web.Routing.IRoutable.RouteSegment" />
            that matches <paramref name="urlSegment" />.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="language">The language</param>
      <returns>
            The content instance that matches <paramref name="urlSegment" /> or null if no match.
            </returns>
      <remarks>
            It is the passed in <paramref name="language" /> that is responsible to handle fallback and replacement settings for language.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.GetBySegment(EPiServer.Core.ContentReference,System.String,EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the child <see cref="T:EPiServer.Core.IContentData" /> instance that has a <see cref="P:EPiServer.Web.Routing.IRoutable.RouteSegment" />
            that matches <paramref name="urlSegment" />.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="settings">The settings to use.</param>
      <returns>
            The content instance that matches <paramref name="urlSegment" /> or null if no match.
            </returns>
      <remarks>
            It is the passed in <paramref name="settings" /> that is responsible to handle fallback and replacement settings for language.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.TryGet``1(EPiServer.Core.ContentReference,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.TryGet``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="language">The language.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <remarks>
            If the <paramref name="contentLink" /> is a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the <paramref name="language" /> is ignored and that specific version is returned.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.TryGet``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.TryGet``1(System.Guid,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The unique identifier for the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.TryGet``1(System.Guid,System.Globalization.CultureInfo,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentTGuid">The guid to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="language">The language.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentRepository.TryGet``1(System.Guid,EPiServer.Core.LoaderOptions,``0@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The unique identifier for the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ContentSoftLinkIndexer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parses and extracts soft links from content items. Used internally when content is published.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentSoftLinkIndexer.#ctor(EPiServer.Framework.TypeScanner.TypeRelater,System.Collections.Generic.IEnumerable{EPiServer.SpecializedProperties.IPropertySoftLinkIndexer})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Internal.ContentSoftLinkIndexer" /> class
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentSoftLinkIndexer.GetLinks(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extracts a list of soft links from a list of content items
            </summary>
      <param name="content">The list of content to index.</param>
      <exception cref="T:System.ArgumentException">Thrown when the content is null or the ContentLink is null or empty</exception>
      <remarks>For non-master languages only the links related to that language will be extracted</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentSoftLinkIndexer.IsIndexableProperty(EPiServer.Core.PropertyData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines if a specific property is softlink indexable
            </summary>
      <param name="property">The property to examine</param>
      <returns>true if property is softlink indexable else false</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.DefaultBatchPublishSortingStrategy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of the <see cref="T:EPiServer.Core.Internal.IBatchPublishSortingStrategy" /> used by the <see cref="T:EPiServer.Core.Internal.BatchPublisher" />
            that organizes content items according to their base content type, e.g. Media, Blocks, Pages.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.DefaultBatchPublishSortingStrategy.BaseTypeContentComparer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Organizes content in Media, Blocks, Other Content and Pages
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.DefaultContentEvents">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.DefaultContentLanguageAccessor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tracks all language settings on a site with support for resolving closest setting at runtime
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.Instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The global instance of ContentLanguageSettingsHandler that is used to access information about language settings
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.Clear">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears all currently loaded settings for this instance.
            </summary>
      <remarks>This can be used to force a reload of the settings tree.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.ClearCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears all currently loaded settings for this instance.
            </summary>
      <remarks>This can be used to force a reload of the settings tree.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.GetFallbackLanguages(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the fallback languages for the current content and language if any exists.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>A String[] with the names of the fallback languages.</returns>
      <remarks>If no fallback languages are defined for the current content and language an empty string array is returned.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.IsSettingsDefined(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether there exists language settings for the given content.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
        <c>true</c> if language settings exists; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.IsLanguageAllowed(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks if a language is available for a content
            </summary>
      <param name="contentLink">The content to check</param>
      <param name="languageBranch">The language to check</param>
      <returns>True if the language is allowed on the content</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.IsLanguageAllowedForCreation(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determins if a content is allowed in a specific language
            </summary>
      <param name="contentLink">The content to check</param>
      <param name="languageBranch">The language to check if it's allowed for the content</param>
      <returns>True if the language is allowed for the content</returns>
      <remarks>If no restrictions set on contents, the language must at least be part of the enabled languages for the site</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.GetDefaultAllowedLanguage(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Try finding the default language if allowed, otherwise fallback to the first allowed language found
            </summary>
      <param name="contentLink">The content to fetch language for</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.Get(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the settings for specified content link and language.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>Gets the affective language settings for the content and language or null if no settings exists.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.Get(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the settings for all languages for the specified content link.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>An ContentLanguageSetting[] with the language settings for the given content.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentLanguageSettingsHandler.MatchLanguageSettings(EPiServer.Core.IContent,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Matches a content instance against a requestedLanguage to see if the language version of the <paramref name="content" /> instance
            matches settings for replacement or fallback.
            </summary>
      <param name="content">The content instance to match settings against.</param>
      <param name="requestedLanguage">The language the content instance was requested for.</param>
      <returns>
        <see cref="F:EPiServer.Core.LanguageSelectionSource.Requested" /> if the language version for the content matches <paramref name="requestedLanguage" />.
            <see cref="F:EPiServer.Core.LanguageSelectionSource.Replacement" /> if the language version for the content matches the replacement setting.
            <see cref="F:EPiServer.Core.LanguageSelectionSource.Fallback" /> if the language version for the content matches the fallback setting.
            <see cref="F:EPiServer.Core.LanguageSelectionSource.ReplacementFallback" /> if the language version for the content matches the fallback setting when <paramref name="requestedLanguage" /> was replaced.
            <see cref="F:EPiServer.Core.LanguageSelectionSource.None" />if <paramref name="requestedLanguage" /> is null or empty or if language does not implement <see cref="T:EPiServer.Core.ILocalizable" /> 
            or if the language version for the content does not match either replacement or fallback setting.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.DefaultContentLanguageSettingsResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tracks all language settings on a site with support for resolving setting at runtime
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.DefaultContentProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles Content which stored in EPiServer
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.#ctor(EPiServer.Core.Internal.DefaultContentProviderDatabase,EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IPropertyDefinitionRepository},EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.IPageQuickSearch},EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.ContentAclDB},EPiServer.Security.IPrincipalAccessor,EPiServer.Core.ContentOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Internal.DefaultContentProvider" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.LoadContent(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Load content for given contentlink. Load content from repository 
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageSelector">The language selector.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.LoadContents(System.Collections.Generic.IList{EPiServer.Core.ContentReference},EPiServer.Core.ILanguageSelector)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Batch loads contents</summary>
      <remarks>
        <para>Versions and published contents are splitted into two separate operations but are returned in the order as they were requested.</para>
        <para>
                For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
                <paramref name="selector" /> is ignored and the specific version is returned.
            </para>
        <para>
                For references that is not for a specific version the content is returned in the language given by <paramref name="selector" /> 
                or master language if it does not exist in specified language.
            </para>
      </remarks>
      <param name="contentReferences">The content references.</param>
      <param name="selector">The selector.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.GetDescendentReferences(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all the descendents for the current page (that is at all levels).
            The base class implementation will do recursive calls to GetChildrenReferences.
            </summary>
      <param name="pageLink">The page link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.GetPagesWithPropertyDefinition(EPiServer.DataAbstraction.PropertyDefinition,System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the pages with instance of page definition.
            <para>
            This method is for example called before a page definition defined in code is deleted.
            </para></summary>
      <param name="pageDefinition">The page definition.</param>
      <param name="onlyNoneMasterLanguage">if set to <c>true</c> only none master langauge are taken into account.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions are taken into account.</param>
      <returns>
      </returns>
      <remarks>The default implementation returns empty list.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.IsPropertyDefinitionUsed(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether there is data store on specified propertyDefinition.
            </summary>
      <param name="propertyDefinition">The property definition.</param>
      <returns>
        <c>true</c> if property definition is used; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Default implementation calls GetPagesWithPropertyDefinition and checks if it returns Count &gt; 0.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.GetReferencesToLocalContent(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all references to the specified content.
            Override method to get all references to the given items and optionally references to all decendents.
            </summary>
      <param name="contentLink">The content links.</param>
      <param name="includeDecendents">if set to <c>true</c> references to decendents is also checked.</param>
      <returns>
            A list of items that hold some kind of reference to the specified content.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.GetReferencesToContentItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all references to the specified content iotems.
            Override method to get all references to the given items.
            </summary>
      <param name="contentLinks">The content links to check references for.</param>
      <returns>
            A list of items that hold some kind of reference to the specified content.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.ListContentOfContentType(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a list of references to content of specified <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            <para>
            This method is for example called before a content type defined in code is deleted.
            </para></summary>
      <param name="contentType">The contentType to return references for.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.IsContentTypeUsed(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Performs a check if specified <see cref="T:EPiServer.DataAbstraction.ContentType" /> is used.
            <para>
            This method is for example called before a content type defined in code is deleted.
            </para></summary>
      <param name="contentType">The contentType to return references for.</param>
      <returns>
      </returns>
      <remarks>
            Default implementation calls ListContentOfContentType and checks if it returns Count &gt; 0.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.ListDelayedPublish">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all content that are set to delayed publish.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.LoadChildrenReferencesAndTypes(EPiServer.Core.ContentReference,System.String,System.Boolean@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the children references and its type.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageID">The language ID.</param>
      <param name="languageSpecific">True if the list if unique for this language, for example the sort order.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.ListMatchingSegments(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists references to all children content items that have matching routing/url segments.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.DeleteChildren(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the children.
            </summary>
      <param name="contentReference">The content reference.</param>
      <param name="forceDelete">if set to <c>true</c> [force delete].</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Moves the specified content reference.
            </summary>
      <param name="contentReference">The content reference.</param>
      <param name="destinationLink">The destination link.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.DeleteLanguageBranch(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes a language branch for the content.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.Delete(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete a content from storage..
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="forceDelete">if set to <c>true</c> [force delete].</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.MoveToWastebasket(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Moves to wastebasket.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="deletedBy">The user who deleted the content.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save content to storage with specified action.
            </summary>
      <param name="content">The content.</param>
      <param name="action">The action.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.EPiServer#Core#IBlobUriResolver#ListVersionsForBlobUris(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inherit-doc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.ResolveContent(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to resolve a Content from a Guid identifier.
            </summary>
      <param name="contentGuid">The content GUID.</param>
      <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult" /> with the identifiers for the content or null if no content was matched.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.SetCacheSettings(EPiServer.Core.ContentReference,System.Collections.Generic.IEnumerable{EPiServer.Core.GetChildrenReferenceResult},EPiServer.Core.CacheSettings)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the cache settings for children listing when it is added to cache.
            Override method to set e.g. control lifetime of content object in cache or to add additional cache dependency keys.
            </summary>
      <param name="contentReference">
      </param>
      <param name="children">
      </param>
      <param name="cacheSettings">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.ResolveContent(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to resolve a Content from a <see cref="T:EPiServer.Core.ContentReference" />.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult" /> with the identifiers for the content or null if no content was matched.
            </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.DefaultContentProvider.VersionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the version repository.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.SaveSecurityDescriptor(EPiServer.Core.ContentReference,EPiServer.Security.IContentSecurityDescriptor,EPiServer.Security.SecuritySaveType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified content security descriptor.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentSecurityDescriptor">The content security descriptor.</param>
      <param name="securitySaveType">Type of the security save.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProvider.DeleteSecurityEntity(System.String,EPiServer.Security.SecurityEntityType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the specified user or role name.
            </summary>
      <param name="userOrRoleName">Name of the user or role.</param>
      <param name="entityUserRole">The entity user role.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.DefaultContentProvider.ContentAclDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content acl DB.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.DefaultContentProviderDatabase">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Abstraction for working with data access classes
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.Load(EPiServer.Core.ContentReference,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the content.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranchID">The language branch ID.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.LoadVersion(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the version.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.LoadVersion(EPiServer.Core.ContentReference,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the version.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranchID">The language branch ID.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.LoadLongString(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the long string.
            </summary>
      <param name="longStringGuid">The long string GUID.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.DeleteLanguage(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the language.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.Delete(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the specified content link.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="forceDelete">if set to <c>true</c> [force delete].</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.DeleteChildren(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the children.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="forceDelete">if set to <c>true</c> [force delete].</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.GetReferenceInformationForContent(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content of the reference information for.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="includeDecendents">if set to <c>true</c> references to descendents are included.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.Move(System.Int32,System.Int32,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Moves the specified content link.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="destinationLinkID">The destination link ID.</param>
      <param name="archive">if set to <c>true</c> [archive].</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Moves the specified content link.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="destinationLink">The destination link.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.MoveToWastebasket(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Moves to wastebasket.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="deletedBy">The user who delete the content.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified content.
            </summary>
      <param name="content">The content.</param>
      <param name="action">The action.</param>
      <param name="currentUser">The current user.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.Save(EPiServer.Core.IContent,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified content.
            </summary>
      <param name="content">The content.</param>
      <param name="currentUser">The current user.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.UpdateStatus(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,System.Nullable{System.DateTime},System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Updates the status of the specified content item.
            </summary>
      <param name="content">The content.</param>
      <param name="action">The action.</param>
      <param name="delayPublishUntil">
      </param>
      <param name="currentUser">The current user.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.ListContentOfContentType(EPiServer.DataAbstraction.ContentType,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists the contents of the content type.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="onlyPublished">if set to <c>true</c> [only published].</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.IsContentTypeUsed(EPiServer.DataAbstraction.ContentType,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks if a content type is used.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="onlyPublished">if set to <c>true</c> only published content is checked.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.ListAll(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.ListAll(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.ListAll">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.CountDescendants(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Counts the descendants.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.LoadChildrenReferencesAndTypes(System.Int32,System.String,EPiServer.Filters.FilterSortOrder@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. load content references and content types
            </summary>
      <param name="contentID">
      </param>
      <param name="languageID">
      </param>
      <param name="parentSortOrder">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.LoadSpecificContentInstances(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the specific content instances.
            </summary>
      <param name="contentLinks">The content links.</param>
      <param name="languageBranchID">The language branch ID.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.LoadSpecificContentVersions(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Batch loads specific versions of content.
            </summary>
      <remarks>
        <see cref="P:EPiServer.Core.ContentReference.WorkID" /> must be set on all versions otherwise <see cref="T:System.ArgumentException" /> is thrown.
            </remarks>
      <param name="contentLinks">The versions to load.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentProviderDatabase.ListMatchingSegments(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists references to all children content items that have matching routing/url segments.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.DefaultContentRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultContentRepository.TransferContent(EPiServer.Core.ContentProvider,EPiServer.Core.ContentProvider,EPiServer.Core.IContent,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Function to support move/copy between PageProviders. A move/copy between providers is to be seen as
            a create (which might keep GUID id in case of move)
            </summary>
      <remarks>The passed in page assumes to be writable and masterlanguage.
            The int based identifier (that is PageLink) will not be kept in Move/Copy operations since each
            provider needs to manage its own int based identifier. E.g. LocalPageProvider has automincrement in db.</remarks>
      <param name="sourceProvider">
      </param>
      <param name="destinationProvider">
      </param>
      <param name="content">The page to transfer</param>
      <param name="destinationLink">The destination link for the transfer</param>
      <returns>
            The created pagelink in the target page provider
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.TypeOfSearch">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Defines the type of search for FindPageWithCriteria.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.TypeOfSearch.Local">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Search only in the local page provider.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.TypeOfSearch.Partial">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Search only in the defined page providers.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.TypeOfSearch.All">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Search in all page providers.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultPublishedStateAssessor.IsPublished(EPiServer.Core.IContent,EPiServer.Core.PublishedStateCondition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.DefaultPublishedStateAssessor.IsPublishedCore(EPiServer.Core.IContent,EPiServer.Core.PublishedStateCondition,System.Collections.Generic.ISet{EPiServer.Core.ContentReference})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified <see cref="T:EPiServer.Core.IContent" /> instance currently is in a published state
            using the provided conditions.
            </summary>
      <param name="content">The content that should be assessed.</param>
      <param name="condition">The conditions of how the assessment should be done.</param>
      <param name="checkedContent">A set of already checked content for checking linked pages. Used to ensure that circular references are not followed.</param>
      <returns>
        <c>true</c> if the content item is published; otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">content</exception>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.DefaultStatusTransitionEvaluator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ExpressionHelpers">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.IBatchPublishSortingStrategy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Describes the strategy that decides what order content should be published by the <see cref="T:EPiServer.Core.Internal.BatchPublisher" /> service.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.IBatchPublishSortingStrategy.Sort(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sorts the specified content items in order of how they should be published.
            Items at the beginning of the returned enumerable will be published before
            items at the end.
            </summary>
      <param name="contentLinks">The content links.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.IContentCacheHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.IContentChildrenSorter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.IContentInstanceCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Supporting API to content provider that deals with reading and inserting IContent into cache
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.IContentVersionResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Used to resolve which version of a content instance that is to be updated
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.IContentVersionResolver.Resolve(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves which version that is to be updated for specified content given <paramref name="saveAction" /></summary>
      <param name="content">The content that is to be updated</param>
      <param name="saveAction">The save action specified</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.IDynamicPropertiesLoader">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.IDynamicPropertiesLoader.ListForPage(EPiServer.Core.PageReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ILazyProperty">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Describes a <see cref="T:EPiServer.Core.PropertyData" /> class with support for lazy loading of it's value.
            </summary>
      <remarks>
            The implementing of this interface in a property must be accompanied by support in the 
            data access backend to fully support lazy value loading.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ILazyProperty.AssignValueFactory(System.Func{System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Assigns a factory method that can provide a property with the value.
            </summary>
      <param name="valueFactory">The value factory method.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.IPerformLicenseCheck">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.IProviderLoadedPipeline">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Signature for component that can act on <see cref="T:EPiServer.Core.LoaderOptions" /> for loaded <see cref="T:EPiServer.Core.IContent" /> instances and for example replace items.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.IProviderLoadedPipeline.Pipe(EPiServer.Core.ContentReference,EPiServer.Core.IContent,EPiServer.Core.LoaderOptions,System.Func{EPiServer.Core.ContentReference,System.Globalization.CultureInfo,EPiServer.Core.IContent})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called after content has been loaded. Implementation can replace loaded instance.
            </summary>
      <param name="contentLink">The content reference used to load instance.</param>
      <param name="contentInstance">The loaded instance.</param>
      <param name="loaderOptions">The loader options.</param>
      <param name="loadingDelegate">A delegate to load instance for replacement</param>
      <returns>A potentially replaced <see cref="T:EPiServer.Core.IContent" /> instance.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.IProviderLoadedPipeline.Pipe(System.Collections.Generic.IList{EPiServer.Core.IContent},EPiServer.Core.LoaderOptions,System.Func{System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.Globalization.CultureInfo,System.Collections.Generic.IList{EPiServer.Core.IContent}})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called after content has been loaded. Implementation can replace loaded instances.
            </summary>
      <param name="contentInstances">The loaded instances.</param>
      <param name="loaderOptions">The loader options.</param>
      <param name="loadingDelegate">A delegate to load instance for replacement</param>
      <returns>A list including potentially replaced <see cref="T:EPiServer.Core.IContent" /> instances.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.IProviderLoadingPipeline">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Signature for component that can act on <see cref="T:EPiServer.Core.LoaderOptions" /> before <see cref="T:EPiServer.Core.IContent" /> instances are loaded from the provider and gives opportunity to replace items with other versions.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.IProviderLoadingPipeline.Pipe(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called before content is loaded from the provider. Implementation can replace reference with another version.
            </summary>
      <remarks>
            It is only supported to swap between versions of a content not between content.
            </remarks>
      <param name="contentLink">The reference that are about to be loaded.</param>
      <param name="culture">The culture about to be sent to the provider</param>
      <param name="loaderOptions">The loader options sent from the caller of the loader</param>
      <returns>A potentially replaced reference.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.IProviderLoadingPipeline.Pipe(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.Globalization.CultureInfo,EPiServer.Core.LoaderOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called before content is loaded from the provider. Implementation can replace references with other versions.
            </summary>
      <remarks>
            It is only supported to swap between versions of a content not between content.
            </remarks>
      <param name="contentLinks">The references that are about to be loaded.</param>
      <param name="culture">The culture about to be sent to the provider</param>
      <param name="loaderOptions">The loader options sent from the caller of the loader</param>
      <returns>A list including potentially replaced references.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.LanguageData">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.Core.ILocalizable" /></summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.LanguageData.Language">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the language for this  instance.
            </summary>
      <value>The language.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.LanguageData.MasterLanguage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the master language for this instance.
            </summary>
      <value>The master language.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.LanguageData.ExistingLanguages">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the existing languages.
            </summary>
      <value>The languages.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.LanguageData.CreateWritableClone">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a writable clone.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.LanguageData.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a writable clone.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.LanguageData.IsReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.LanguageData.MakeReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Makes the read only.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.LanguageData.ThrowIfReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Utility method that, when called, throws a <see cref="T:System.NotSupportedException" /> indicating that the
            <see cref="T:EPiServer.Core.Internal.LanguageData" /> has been set as read-only.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.LanguageData.IsModified">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.LanguageData.ResetModified">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resets the modified flag on all the data contained on the instance.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.LazyValueInitializer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class to initialize a value in multi-threaded scenarios without taking any locks
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.LazyValueInitializer.EnsureInitialized``1(``0@,System.Func{System.Object}@,System.Func{System.Object,``0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Assigns a reference and clears the factory
            </summary>
      <returns>
        <c>True</c> if the reference was changed</returns>
      <remarks>Be aware that the factory method may be called multiple times in a threading scenario but the reference will only be assigned by the elected winner.</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.MemoryBufferPool">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handle a pool of large memory buffers
            </summary>
      <remarks>
            The buffers will be at least 87040 bytes (&gt;85000 so as to go into the large
            object heap)
            </remarks>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.MemoryBufferPool.Counters">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Collection of performance counters
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.MemoryBufferPool.Counters.HighWaterMark">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The most number of buffers that we have had saved for re-use
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.MemoryBufferPool.Counters.BuffersAllocated">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The total numbers of buffers allocated
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.MemoryBufferPool.Counters.BuffersAllocatedFromPool">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The number of buffers that were re-used from the pool
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.MemoryBufferPool.Counters.WeakReferencesReclaimed">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The number of times a WeakReference was reclaimed by the system before we could re-use
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.MemoryBufferPool._performanceCounters">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The backing store for the <see cref="P:EPiServer.Core.Internal.MemoryBufferPool.PerformanceCounters" /> property.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.MemoryBufferPool.PerformanceCounters">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the collection of performance counters
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.MemoryBufferPool._bufferSize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This size of each buffer to allocate
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.MemoryBufferPool._defaultBufferSize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The default should be larger than the threshold for being placed into the large object heap
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.MemoryBufferPool._bufferPool">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The pool of potentially available buffers.
            </summary>
      <remarks>
            The idea of using a stack is that we will tend to re-use recently used ones, which increases
            the likelyhood of finding one quick, and also lets the garbage collector collect buffers beyond
            the high-water mark
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.MemoryBufferPool.#ctor(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Construct a pool. It is thread safe.
            </summary>
      <param name="bufferSize">The size of each buffer. May be rounded upwards - always check the buffer Lenth property</param>
      <remarks>
            The normal case is to have static field representing the pool so that many threads can share it.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.MemoryBufferPool.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Construct a pool with a default memory buffer size. It is thread safe.
            </summary>
      <remarks>
            The normal case is to have static field representing the pool so that many threads can share it.
            </remarks>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Internal.MemoryBufferPool._instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The singleton instance, created in the static constructor.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.MemoryBufferPool.Instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the singleton instance.
            It is thread-safe.
            </summary>
      <value>The instance.</value>
      <remarks>
            Whenever a MemoryBufferPool is required, it is recommended to use the singleton instance
            available here, as it allows for efficient sharing and re-use of buffers. Only if a pool
            requiring significantly different characterstics should a new pool be instantiated.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.MemoryBufferPool.Allocate">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a buffer. There is no guarantee of the size returned.
            </summary>
      <returns>A buffer. Check the Length property to know how large it is.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.MemoryBufferPool.ReleaseOne(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Release one single buffer - without locking! Must be done by caller.
            </summary>
      <param name="o">An object, presumed but not checked, to be a byte[]</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.MemoryBufferPool.Release(System.Byte[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Actively re-release a buffer. Do not use it afterwards - it may be re-used at any time.
            </summary>
      <param name="theBuffer">A buffer that you want re-used. It does not need to allocated by this manager.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.MemoryBufferPool.Release(System.Collections.ArrayList)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Acitvely re-release an ArrayList of buffers. Do not use these afterwards. The ArrayList is cleared.
            </summary>
      <param name="theBuffers">An ArrayList of byte[]'s. Cleared after call</param>
      <remarks>
            This method is to optimize for the case we have many buffers, since we'll do it all in one lock
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.NullContentVersionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An implementation of <see cref="T:EPiServer.Core.IContentVersionRepository" /> that does not support versions.
            This is the default implementation for <see cref="P:EPiServer.Core.ContentProvider.VersionRepository" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.NullContentVersionRepository.#ctor(EPiServer.Core.ContentProvider)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Internal.NullContentVersionRepository" /> class.
            </summary>
      <param name="provider">The provider.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.NullContentVersionRepository.Delete(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The implementation does not do anything since repository does not support versions
            </summary>
      <param name="contentLink">The content link.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.NullContentVersionRepository.SetCommonDraft(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the common draft.
            </summary>
      <param name="contentLink">The content link.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.NullContentVersionRepository.LoadCommonDraft(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the common draft.
            </summary>
      <param name="contentLink">The content link to load common draft for.</param>
      <param name="language">The language.</param>
      <returns>
            CommonDraft if it exist, otherwise Published, If no published exist the latest saved version is returned
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.NullContentVersionRepository.List(EPiServer.Core.VersionFilter,System.Int32,System.Int32,System.Int32@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.NullContentVersionRepository.List(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This implementation has no versioning support so it uses <see cref="M:EPiServer.Core.ContentProvider.GetLanguageBranches(EPiServer.Core.ContentReference)" /> to get content.
            If versioning is to be supported this method should be overriden.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="filterPublished">if set to <c>true</c> [filter published].</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.NullContentVersionRepository.LoadPublished(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This implementation has no versioning support so it uses <see cref="M:EPiServer.Core.ContentProvider.Load(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)" /> to get content.
            If versioning is to be supported this method should be overriden.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.ContentVersion" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.NullContentVersionRepository.LoadPublished(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This implementation has no versioning support so it uses <see cref="M:EPiServer.Core.ContentProvider.Load(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)" /> to get content.
            If versioning is to be supported this method should be overriden.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.ContentVersion" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.NullContentVersionRepository.Load(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This implementation has no versioning support so it uses <see cref="M:EPiServer.Core.ContentProvider.Load(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)" /> to get content.
            If versioning is to be supported this method should be overriden.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.ContentVersion" /></returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.NullLanguageSelector">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A language selector that will simply set selected language to the requested content language.
            </summary>
      <remarks>
            No checks of any kind will be performed by this language selector imlpementation. If may very well indicate a language that
            does not exist for the current page.
            <para>
            The purpose of this selector implementation is to speed up the language selection process when retrieving pages
            without the need for proper language information. Typically when iterating thru the page tree and finding the parents
            of a page.
            </para></remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.NullLanguageSelector.Instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets an instance of the NullLanguageSelector.
            </summary>
      <value>The instance.</value>
      <remarks>
            This class is immutable and to remove the need for creating multiple instances, simply reuse the instance returned by this property.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.NullProjectResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.OptionsBase`2">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Base class for options supporting fluent operations based on a specifiec option type
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.OptionsBase`2.Add``1(``0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a new option
            </summary>
      <remarks>It will throw if the item already exist, use <see cref="M:EPiServer.Core.Internal.OptionsBase`2.Set``1(``0)" /> to overwrite.</remarks>
      <typeparam name="T">The type of option</typeparam>
      <param name="option">The option instance</param>
      <returns>The option container</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.OptionsBase`2.Set``1(``0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets a new option
            </summary>
      <remarks>
            If an option alreay exist of same type it will be overwritten
            </remarks>
      <typeparam name="T">The type of option</typeparam>
      <param name="option">The option instance</param>
      <returns>The option container</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.OptionsBase`2.Setup``1(System.Action{``0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Setup a property on a option
            </summary>
      <remarks>
            If an option alreay exist of same type it will not be overwritten
            </remarks>
      <typeparam name="T">The type of option</typeparam>
      <param name="action">The action that configures the option</param>
      <returns>The option container</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.OptionsBase`2.Get``1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get an option of specified type or default(T) if option does not exist
            </summary>
      <typeparam name="T">The type of option</typeparam>
      <returns>The option of specified type or default(T) if option does not exist</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.OptionsBase`2.System#Collections#Generic#IEnumerable{TOptionType}#GetEnumerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.OptionsBase`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ProjectContentMap">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ProjectContentMap.Keys">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Exposed for test reasons, do not use!
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ProjectContentMap.Values">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Exposed for test reasons, do not use!
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ProjectContentMapFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory responsible to create a mapping dictionary containing all content items included in a set of projects.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ProjectContentMapFactory.Create(System.Collections.Generic.IEnumerable{System.Int32},System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a mapping dictionary for the the specified projects.
            </summary>
      <param name="projects">The projects.</param>
      <param name="language">The language.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.PropertyDataExtensions">
      <internal-api />
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Internal helper extensions useful when working with <see cref="T:EPiServer.Core.PropertyData" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.PropertyDataExtensions.GetContentLink(EPiServer.Core.PropertyData)">
      <internal-api />
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a reference to the page where this property is used on.
            </summary>
      <remarks>
                We will first see if we can find a PageLink property in the collection of properties this belongs too.
                If we can't, we will try to get one from the executing http handler.
                If neither is successful, we return an empty string.
            </remarks>
      <param name="propertyData">The object this method extends.</param>
      <returns>A reference to the page where this property is used on.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ProviderAwareContentVersionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.RequiredAccessResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Encapsulates logic deciding on what access right that is required to modify a <see cref="T:EPiServer.Core.IContent" /> instance.
            Keep internal to allow for future API changes.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.SimplifiedPublishedStateAssessor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.SimplifiedPublishedStateAssessor.IsPublished(EPiServer.Core.IContent,EPiServer.Core.PublishedStateCondition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified <see cref="T:EPiServer.Core.IContent" /> instance currently is in a published state
            using the provided conditions.
            </summary>
      <param name="content">The content that should be assessed.</param>
      <param name="condition">The conditions of how the assessment should be done.</param>
      <returns>
        <c>true</c> if the content item is published; otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">content</exception>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.XhtmlStringJsonConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.XhtmlStringJsonConverter.CanConvert(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">
      </param>
      <returns>
        <c>true</c> if the specified object type is assignable to XhtmlString; otherwise, <c>false</c>.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.XhtmlStringJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.XhtmlStringJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.XhtmlStringTypeHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that handles storage format of <see cref="T:EPiServer.Core.XhtmlString" /> towards Dynamic Data Store.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.XhtmlStringTypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns an <see cref="T:EPiServer.Core.XhtmlString" /> instance from the database format.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="targetType">Type of the target.</param>
      <param name="ownerType">Type of the owner.</param>
      <returns>A <see cref="T:EPiServer.Core.XhtmlString" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.XhtmlStringTypeHandler.MapToDatabaseType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the database type.
            </summary>
      <param name="type">The type.</param>
      <returns>The type that is stored in database</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.XhtmlStringTypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the propertyValue in the database format.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="ownerType">Type of the owner.</param>
      <returns>The propertyValue in the database format.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Internal.ContentStatusController">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentExtensions.IsModified(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the current content should be considered to have been modified.
            If the content implement <see cref="T:EPiServer.Core.IModifiedTrackable" /> the IsModified flag is checked;
            if not implemented, content will always be considered potentially modified.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentExtensions.Language(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the language of the content if it implements <see cref="T:EPiServer.Core.ILocale" />.
            Otherwise or if null <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> is returned.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.IBinaryStorable">
      <summary>
            Interface that defines a storage container and a pointer to the stored binary data
            </summary>
    </member>
    <member name="P:EPiServer.Core.IBinaryStorable.BinaryData">
      <summary>
            Binary data
            </summary>
    </member>
    <member name="P:EPiServer.Core.IBinaryStorable.BinaryDataContainer">
      <summary>
            A container to store binary data
            </summary>
    </member>
    <member name="T:EPiServer.Core.BlobUriReference">
      <summary>
            Represent a blob reference from a content version
            </summary>
    </member>
    <member name="P:EPiServer.Core.BlobUriReference.ContentVersion">
      <summary>
            The content version that has the blob reference
            </summary>
    </member>
    <member name="P:EPiServer.Core.BlobUriReference.BlobUri">
      <summary>
            The Uri for the blob that the content version references
            </summary>
    </member>
    <member name="T:EPiServer.Core.IBlobUriResolver">
      <summary>
            Can be implmented by a <see cref="T:EPiServer.Core.ContentProvider" /> that supports versioned content.
            When implemented can blobs that are no longer used (because the version that referenced the blob has been deleted) be deleted.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IBlobUriResolver.ListVersionsForBlobUris(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
            Should return all references to all versions that has a reference to specified blob uris.
            </summary>
      <param name="blobUris">The blob uris to check versions for</param>
      <returns>A list of versions referencing the uris</returns>
    </member>
    <member name="T:EPiServer.Core.ICategorizable">
      <summary>
            Interface that should be implemented by components that should be categorizable
            </summary>
    </member>
    <member name="P:EPiServer.Core.ICategorizable.Category">
      <summary>
            Gets a <see cref="T:EPiServer.Core.CategoryList" /> containing the categories that the instance belongs to.
            </summary>
      <returns>A <b>CategoryList</b> with the categories.</returns>
    </member>
    <member name="T:EPiServer.Core.IChangeTrackable">
      <summary>
            Defines the signature for a content that implements change tracking
            </summary>
    </member>
    <member name="P:EPiServer.Core.IChangeTrackable.Created">
      <summary>
            Gets the date and time when this content instance was created.
            </summary>
      <remarks>
        <b>Created</b> is maintained by the EPiServer infrastructure and you have no control over them.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.IChangeTrackable.CreatedBy">
      <summary>
            Gets the username of the user that created this content instance.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IChangeTrackable.Changed">
      <summary>
            Gets the date when this content instance was last marked as changed.
            </summary>
      <remarks>
            The changed date is only updated when property <see cref="P:EPiServer.Core.IChangeTrackable.SetChangedOnPublish" /> is set to <c>true</c>.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.IChangeTrackable.SetChangedOnPublish">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:EPiServer.Core.IChangeTrackable.Changed" /> should be updated on publish.
            </summary>
      <value>
        <c>true</c> if <see cref="P:EPiServer.Core.IChangeTrackable.Changed" /> should be updated; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.IChangeTrackable.ChangedBy">
      <summary>
            Gets the username of the user that most recently changed this content instance.
            </summary>
      <remarks>
            For instance, if a Windows account was used to create the instance, expect a string 
            being returned looking like 'DOMAIN\User Name'.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.IChangeTrackable.Saved">
      <summary>
            Gets the date and time when this content instance was last saved.
            </summary>
      <remarks>
            Saved is the sibling of <see cref="P:EPiServer.Core.IChangeTrackable.Created" /> and is maintained by the EPiServer infrastructure. 
            This means that you have no control over them. 
            </remarks>
    </member>
    <member name="P:EPiServer.Core.IChangeTrackable.DeletedBy">
      <summary>
            Gets or sets who deleted the content.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IChangeTrackable.Deleted">
      <summary>
            Gets or sets the deleted date.
            </summary>
      <remarks>
            Is null for content that has not been deleted.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.IContent">
      <summary>
            Interface that must be implemented by a component that is to be stored in the content repository.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContent.Name">
      <summary>
            Gets or sets the name of this <see cref="T:EPiServer.Core.IContentData" /> instance.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContent.ContentLink">
      <summary>
            Gets or sets a reference to this <see cref="T:EPiServer.Core.IContentData" /> instance.
            It is used as a identifier for this item within the EPiServer system.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContent.ParentLink">
      <summary>
            Gets or sets a link to the parent content item in the EPiServer system. 
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContent.ContentGuid">
      <summary>
            Gets or sets the unique identifier of this <see cref="T:EPiServer.Core.IContentData" /> instance.
            It is used as identifier of this item when it is transferred outside of the current system.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContent.ContentTypeID">
      <summary>
            Gets or sets the ID of the content type that describes this <see cref="T:EPiServer.Core.IContentData" /> instance.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContent.IsDeleted">
      <summary>
            Gets or sets a value indicating whether this instance is deleted.
            </summary>
    </member>
    <member name="T:EPiServer.Core.IContentAsset">
      <summary>
            Interface to mark a content type as a asset that is being owned by another content item
            </summary>
    </member>
    <member name="T:EPiServer.Core.IContentCacheKeyCreator">
      <summary>
            Handle generation of Cache key
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContentCacheKeyCreator.RootKeyName">
      <summary>
            Everything stored in the Content cache has a dependency on this key.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContentCacheKeyCreator.VersionKey">
      <summary>
            A global key that content cache updates with a new version number everytime
            a content or listing is removed from cache. Targeted for use with output caching
            and other caching mechanism that cannot rely on a single item or content in EPiServer.
            </summary>
      <remarks>Does not update when content versions are changed</remarks>
    </member>
    <member name="P:EPiServer.Core.IContentCacheKeyCreator.RemoteCacheUpdateLimit">
      <summary>
            Number of items that to prevent updating remote cache.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentCacheKeyCreator.CreateLanguageCacheKey(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Create the key used to store/retrieve a IContent object of a specific language from the cache.
            </summary>
      <param name="contentLink">A ContentReference object for the IContent to store/retrieve.</param>
      <param name="languageBranch">The language branch for which the key should be created. If languageBranch is null, a master language cache key is created</param>
      <returns>A string which is the cache key.</returns>
    </member>
    <member name="M:EPiServer.Core.IContentCacheKeyCreator.CreateChildrenCacheKey(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Create the key used to store/retrieve children from the cache for a specific language
            </summary>
      <param name="contentLink">The content that has the children.</param>
      <param name="languageID">The language for which the listing was made</param>
      <returns>A string which is the cache key.</returns>
    </member>
    <member name="M:EPiServer.Core.IContentCacheKeyCreator.CreateVersionCacheKey(EPiServer.Core.ContentReference)">
      <summary>
            Creates the cache key used to cache a specific version of a content.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IContentCacheKeyCreator.CreateMasterLanguageCacheKey(EPiServer.Core.ContentReference)">
      <summary>
            Create the key used to store/retrieve the IContent object that is Master Language
            </summary>
      <param name="contentLink">A ContentReference object for the IContent to store/retrieve.</param>
      <returns>A string which is the cache key.</returns>
    </member>
    <member name="M:EPiServer.Core.IContentCacheKeyCreator.CreateVersionCommonCacheKey(EPiServer.Core.ContentReference)">
      <summary>
            Creates the common cache key used to clear all cached versions for a given content item.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IContentCacheKeyCreator.CreateCommonCacheKey(EPiServer.Core.ContentReference)">
      <summary>
            Create the cache key used to relate the different languages of a Content to each other
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IContentCacheKeyCreator.CreateSegmentCacheKey(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Create the key used to store/retrieve matching url children segments for from the cache.
            </summary>
      <param name="parentLink">A ContentReference object for the IContent which child segments is to be matched.</param>
      <param name="urlSegment">The URL segment that is matched for.</param>
      <returns>
            A string which is the cache key.
            </returns>
    </member>
    <member name="M:EPiServer.Core.IContentCacheKeyCreator.ResolveCacheKey(System.String,System.Int32@)">
      <summary>
            Resolves the cache key into a content reference.
            </summary>
      <param name="cacheKey">The cache key.</param>
      <param name="contentLinkID">The content link ID.</param>
      <returns>The cache key prefic of the cache key.</returns>
    </member>
    <member name="T:EPiServer.Core.IContentCacheListingRemover">
      <summary>
            Remove contents listing from cache 
            This interface supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentCacheListingRemover.RemoveListing(EPiServer.Core.ContentReference)">
      <summary>
            Remove listing of contents from cache
            </summary>
      <param name="contentLink">The content to remove listing from cache</param>
    </member>
    <member name="M:EPiServer.Core.IContentCacheListingRemover.RemoveDescendents(EPiServer.Core.ContentReference)">
      <summary>
            Remove all cached contents that are direct or indirect children.
            </summary>
      <param name="contentLink">The content that defines the root node of the subtree.</param>
      <remarks>
            Note that the contentlink is not removed from cache by this method.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.IContentCacheListingRemover.RemoveSegment(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Remove segment cache for specified parent and urlsegment.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
    </member>
    <member name="T:EPiServer.Core.IContentCacheVersion">
      <summary>
            Get and change the version of the cache.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContentCacheVersion.Version">
      <summary>
            The current version of the cache, this value is always updated when a Remove request is issued.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentCacheVersion.UpdateVersion">
      <summary>
            Update Version key
            </summary>
    </member>
    <member name="T:EPiServer.Core.IContentData">
      <summary>
            Describes an object where you can access it's properties through a <see cref="T:EPiServer.Core.PropertyDataCollection" />.
            </summary>
      <remarks>
        <para>The collection of properties is only required to contain custom properties and can therefor be empty.</para>
        <para>Meta data properties on any object is detected through interfaces such as <see cref="T:EPiServer.Core.IContent" /></para>
      </remarks>
    </member>
    <member name="P:EPiServer.Core.IContentData.Property">
      <summary>
            Gets a collection of all content properties in the <see cref="T:EPiServer.Core.IContentData" />.
            </summary>
    </member>
    <member name="T:EPiServer.Core.IContentEvents">
      <summary>
            Defines the events raised when working with content using the <see cref="T:EPiServer.IContentRepository" />.
            </summary>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.LoadingChildren">
      <summary>
            Occurs when a list of child content are about to be loaded using the GetChildren method.
            </summary>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.LoadedChildren">
      <summary>
            Occurs when a list of child content has been loaded using the GetChildren method.
            </summary>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.FailedLoadingChildren">
      <summary>
            Occurs when a content list failed for some reason.
            Occurs when an exception was raised while a content list was loaded using the GetChildren method.
            </summary>
      <remarks>
            This event is raised if a LoadingChildrem is NOT followed by a LoadedChildren, i e FailedLoadingChildren is 
            called instead of LoadedChildren. This is typically used if you need to clean up something that was
            initiated by LoadingChildren.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.LoadingContent">
      <summary>
            Occurs when a content item are about to be loaded from the repository.
            </summary>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.LoadedContent">
      <summary>
            Occurs when a content item has been loaded from the repository.
            </summary>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.FailedLoadingContent">
      <summary>
            Occurs when an exception was raised while a content item was loaded from the repository.
            </summary>
      <remarks>
            This event is raised if a LoadingContent is NOT followed by a LoadedContent, i e FailedLoadingContent is 
            called instead of LoadedContent. This is typically used if you need to clean up something that was
            initiated by LoadingContent.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.LoadingDefaultContent">
      <summary>
            Occurs when a new content item is about to be created and initalized through the GetDefaultContent method.
            </summary>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.LoadedDefaultContent">
      <summary>
            Occurs when a new content item has been created and initalized through the GetDefaultContent method.
            </summary>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.PublishingContent">
      <summary>
            Occurs when a content item or a version of a content item is requested to be published.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.PublishedContent">
      <summary>
            Occurs when a content item or a version of a content item has been published.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavedContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.CheckingInContent">
      <summary>
            Occurs when a version of a content item is about to be checked in.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.CheckedInContent">
      <summary>
            Occurs when a version of a content item has been checked in.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavedContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.RequestingApproval">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Occurs when a version of a content item is about to be put in <see cref="F:EPiServer.Core.VersionStatus.AwaitingApproval" /> state.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.RequestedApproval">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Occurs when a version of a content item has been transitioned to <see cref="F:EPiServer.Core.VersionStatus.AwaitingApproval" /> state.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.RejectingContent">
      <summary>
            Occurs when a version of a content item is about to be rejected.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.RejectedContent">
      <summary>
            Occurs when a version of a content item has been rejected.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.CheckingOutContent">
      <summary>
            Occurs when a version of a content item is about to be checked out.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.CheckedOutContent">
      <summary>
            Occurs when a version of a content item has been checked out.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.SchedulingContent">
      <summary>
            Occurs when a version of a content item is about to be scheduled to be published.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.ScheduledContent">
      <summary>
            Occurs when a version of a content item has been scheduled to be published.
            </summary>
      <remarks>
            This event will be raised after the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.DeletingContent">
      <summary>
            Occurs when a content item is about to be deleted permanently.
            </summary>
      <remarks>
            Note that this event is not raised when a content item is about to be moved to the wastebasket.
            At that point only the <see cref="E:EPiServer.Core.IContentEvents.MovingContent" /> event is raised.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.DeletedContent">
      <summary>
            Occurs when a content item has been deleted from the wastebasket.
            </summary>
      <remarks>
            Note that this event is not raised when a content item is moved to the wastebasket.
            At that point only the <see cref="E:EPiServer.Core.IContentEvents.MovedContent" /> event is raised.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.CreatingContentLanguage">
      <summary>
            Occurs when a new language branch of a content item is about to be created.
            </summary>
      <remarks>
            This event will be raised before the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event and a status
            specific event such as <see cref="E:EPiServer.Core.IContentEvents.PublishingContent" /> or <see cref="E:EPiServer.Core.IContentEvents.CheckingInContent" />.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.CreatedContentLanguage">
      <summary>
            Occurs when a new language branch of a content item has been created.
            </summary>
      <remarks>
            This event will be raised before the <see cref="E:EPiServer.Core.IContentEvents.SavedContent" /> event and a status
            specific event such as <see cref="E:EPiServer.Core.IContentEvents.PublishedContent" /> or <see cref="E:EPiServer.Core.IContentEvents.CheckedInContent" />.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.DeletingContentLanguage">
      <summary>
            Occurs when a language branch of a content item is about to be deleted.
            </summary>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.DeletedContentLanguage">
      <summary>
            Occurs when a language branch of a content item has been deleted.
            </summary>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.MovingContent">
      <summary>
            Occurs when a content item is about  to be moved from one location to another.
            </summary>
      <remarks>
            Note that this event is also raised when a content item is about to be moved to the wastebasket.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.MovedContent">
      <summary>
            Occurs when a content item has been moved from one location to another.
            </summary>
      <remarks>
            Note that this event is also raised when a content item is moved to the wastebasket.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.CreatingContent">
      <summary>
            Occurs when a new content item is about to be saved to the repository.
            </summary>
      <remarks>
            This event will be raised before the <see cref="E:EPiServer.Core.IContentEvents.SavingContent" /> event and a status
            specific event such as <see cref="E:EPiServer.Core.IContentEvents.PublishingContent" /> or <see cref="E:EPiServer.Core.IContentEvents.CheckingInContent" />.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.CreatedContent">
      <summary>
            Occurs when a new content item has been saved to the repository.
            </summary>
      <remarks>
            This event will be raised before the <see cref="E:EPiServer.Core.IContentEvents.SavedContent" /> event and a status
            specific event such as <see cref="E:EPiServer.Core.IContentEvents.PublishedContent" /> or <see cref="E:EPiServer.Core.IContentEvents.CheckedInContent" />.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.SavingContent">
      <summary>
            Occurs when an existing content item is about to be saved to the repository.
            </summary>
      <remarks>
            This event will be raised in along with a status specific event such as <see cref="E:EPiServer.Core.IContentEvents.PublishingContent" />,
            <see cref="E:EPiServer.Core.IContentEvents.RejectingContent" /> or <see cref="E:EPiServer.Core.IContentEvents.SchedulingContent" />.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.SavedContent">
      <summary>
            Occurs when an existing content item has been saved to the repository.
            </summary>
      <remarks>
            This event will be raised in along with a status specific event such as <see cref="E:EPiServer.Core.IContentEvents.PublishedContent" />,
            <see cref="E:EPiServer.Core.IContentEvents.RejectedContent" /> or <see cref="E:EPiServer.Core.IContentEvents.ScheduledContent" />.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.DeletingContentVersion">
      <summary>
            Occurs when a content item version is about to be deleted permanently.
            </summary>
    </member>
    <member name="E:EPiServer.Core.IContentEvents.DeletedContentVersion">
      <summary>
            Occurs when a content item version has been deleted.
            </summary>
    </member>
    <member name="T:EPiServer.Core.IContentExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Core.IContent" /> with some convenient methods.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentExtensions.GetPropertyName``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Gets the property name from the expression.
            </summary>
      <typeparam name="TContent">The content type.</typeparam>
      <param name="content">The content containing the property definition.</param>
      <param name="expression">The expression to get the property name. The expression needs to be a member expression or a unary expression.</param>
      <returns>Name of the property</returns>
    </member>
    <member name="M:EPiServer.Core.IContentExtensions.GetTargetFrame(EPiServer.Core.IContent)">
      <summary>
            Get the target frame for <see cref="T:EPiServer.Core.PageData" /> to be used in links to pages
            </summary>
      <param name="content">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IContentExtensions.GetForceCurrentVersionSaveAction(EPiServer.Core.IContent)">
      <summary>
            Get <see cref="T:EPiServer.DataAccess.SaveAction" /> required to patch content without changing either status or creating a new version. Also bypasses validation.
            </summary>
      <param name="content">The content</param>
      <returns>The <see cref="T:EPiServer.DataAccess.SaveAction" /></returns>
    </member>
    <member name="T:EPiServer.Core.IContentImage">
      <summary>
            Base interface for image content.
            </summary>
    </member>
    <member name="T:EPiServer.Core.IContentLanguageAccessor">
      <summary>
            Get or set the current language preference for content
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContentLanguageAccessor.Language">
      <summary>
            Preferred language
            </summary>
    </member>
    <member name="T:EPiServer.Core.IContentLanguageSettingsHandler">
      <summary>
            Tracks all language settings on a site with support for resolving closest setting at runtime
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentLanguageSettingsHandler.Get(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Gets the settings for specified content link and language.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>Gets the affective language settings for the content and language or null if no settings exists.</returns>
    </member>
    <member name="M:EPiServer.Core.IContentLanguageSettingsHandler.Get(EPiServer.Core.ContentReference)">
      <summary>
            Gets the settings for all languages for the specified content link.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>A ContentLanguageSetting[] with the language settings for the given content.</returns>
    </member>
    <member name="M:EPiServer.Core.IContentLanguageSettingsHandler.GetDefaultAllowedLanguage(EPiServer.Core.ContentReference)">
      <summary>
            Try finding the default language if allowed, otherwise fallback to the first allowed language found
            </summary>
      <param name="contentLink">The content to fetch language for</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IContentLanguageSettingsHandler.GetFallbackLanguages(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Gets the fallback languages for the current content and language if any exists.
            </summary>
      <param name="conentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>A String[] with the names of the fallback languages.</returns>
      <remarks>If no fallback languages are defined for the current content and language an empty string array is returned.</remarks>
    </member>
    <member name="M:EPiServer.Core.IContentLanguageSettingsHandler.IsLanguageAllowed(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Checks if a language is available for a content
            </summary>
      <param name="contentLink">The content to check</param>
      <param name="languageBranch">The language to check</param>
      <returns>True if the language is allowed on the content</returns>
    </member>
    <member name="M:EPiServer.Core.IContentLanguageSettingsHandler.IsLanguageAllowedForCreation(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Determins if a content is allowed in a specific language
            </summary>
      <param name="contentLink">The content to check</param>
      <param name="languageBranch">The language to check if it's allowed for the content</param>
      <returns>True if the language is allowed for the content</returns>
      <remarks>If no restrictions set on pages, the language must at least be part of the enabled languages for the site</remarks>
    </member>
    <member name="M:EPiServer.Core.IContentLanguageSettingsHandler.IsSettingsDefined(EPiServer.Core.ContentReference)">
      <summary>
            Determines whether there exists language settings for the given content.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
        <c>true</c> if language settings exists; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.IContentLanguageSettingsHandler.MatchLanguageSettings(EPiServer.Core.IContent,System.String)">
      <summary>
            Matches a content instance against a requestedLanguage to see if the language version of the <paramref name="content" /> instance
            matches settings for replacement or fallback.
            </summary>
      <param name="content">The content instance to match settings against.</param>
      <param name="requestedLanguage">The language the content instance was requested for.</param>
      <returns>
        <see cref="F:EPiServer.Core.LanguageSelectionSource.Requested" /> if the language version for the content matches <paramref name="requestedLanguage" />.
            <see cref="F:EPiServer.Core.LanguageSelectionSource.Replacement" /> if the language version for the content matches the replacement setting.
            <see cref="F:EPiServer.Core.LanguageSelectionSource.Fallback" /> if the language version for the content matches the fallback setting.
            <see cref="F:EPiServer.Core.LanguageSelectionSource.ReplacementFallback" /> if the language version for the content matches the fallback setting when <paramref name="requestedLanguage" /> was replaced.
            <see cref="F:EPiServer.Core.LanguageSelectionSource.None" />if <paramref name="requestedLanguage" /> is null or empty or if language does not implement <see cref="T:EPiServer.Core.ILocalizable" /> 
            or if the language version for the content does not match either replacement or fallback setting.
            </returns>
    </member>
    <member name="T:EPiServer.Core.IContentLanguageSettingsResolver">
      <summary>
            Resolve the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSetting" /> for the contentLlink.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentLanguageSettingsResolver.Resolve(EPiServer.Core.ContentReference)">
      <summary>
             Resolve the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSetting" /> for the contentLlink.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>Gets the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSetting" /> for the contentLlink.</returns>
    </member>
    <member name="T:EPiServer.Core.IContentLockEvaluator">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Signature for component that can lock updates of content versions. Called during validation of content before content updates.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentLockEvaluator.IsLocked(EPiServer.Core.ContentReference)">
      <summary>
            Called to determine if a content version is considered locked for updates or state transitions.
            </summary>
      <param name="contentLink">A reference to the content instance</param>
      <returns>Information about the lock or null if content version is not locked</returns>
    </member>
    <member name="T:EPiServer.Core.IContentMedia">
      <summary>
            Interface that all content based files should implement
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContentMedia.Thumbnail">
      <summary>
            Gets or sets the generated thumbnail for this media.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IContentMedia.MimeType">
      <summary>
            Gets the MIME type of this media content.
            </summary>
    </member>
    <member name="T:EPiServer.Core.IContentModelUsage">
      <summary>
            Defines signatures for the component that handles usage information about content models.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentModelUsage.IsContentTypeUsed(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Performs a check if specified <see cref="T:EPiServer.DataAbstraction.ContentType" /> is used.
            <para>
            This method is for example called before a content type defined in code is deleted.
            </para></summary>
      <param name="contentType">The contentType to return references for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IContentModelUsage.ListContentOfContentType(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Gets a list of references to contents of specified <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            <para>
            This method is for example called before a content type defined in code is deleted.
            </para></summary>
      <param name="contentType">The contentType to return references for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IContentModelUsage.ListContentWithPropertyDefinition(EPiServer.DataAbstraction.PropertyDefinition,System.Boolean,System.Boolean)">
      <summary>
            Gets the contents with instance of content definition.
            <para>
            This method is for example called before a content definition defined in code is deleted.
            </para></summary>
      <param name="propertyDefinition">The property definition.</param>
      <param name="onlyNoneMasterLanguage">if set to <c>true</c> only none master langauge are taken into account.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions are taken into account.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IContentModelUsage.IsPropertyDefinitionUsed(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Performs a check if specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> is used.
            <para>
            This method is for example called before a property definition type defined in code is deleted.
            </para></summary>
      <param name="propertyDefinition">The property definition.</param>
      <returns>
        <c>true</c> if property definition is used; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Core.IContentProviderManager">
      <summary>
            Defines signatures a the component managing Content providers, see <see cref="T:EPiServer.Core.ContentProvider" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentProviderManager.GetProvider(System.String)">
      <summary>
            Gets the content provider for a provider name.
            </summary>
      <param name="providerName">Name of the provider.</param>
      <returns>
            The page provider as an <see cref="T:EPiServer.Core.ContentProvider" />.
            </returns>
    </member>
    <member name="M:EPiServer.Core.IContentProviderManager.IsCapabilitySupported(EPiServer.Core.ContentReference,EPiServer.Core.ContentProviderCapabilities)">
      <summary>
            Determines whether the content provider serving the specified content has the specified capability.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="capability">The capability.</param>
      <returns>
        <c>true</c> if the provider supprots the specified capability; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.Core.IContentProviderManager.ProviderMap">
      <summary>
            Gets the mapping of Content providers.
            </summary>
      <value>The provider map.</value>
    </member>
    <member name="M:EPiServer.Core.IContentProviderManager.HasEntryPointChild(EPiServer.Core.ContentReference)">
      <summary>
            Check if this content reference is or has entry point as child.
            </summary>
      <param name="contentLink">
      </param>
      <returns>true if content itself or some of it's descendants is an entry point to a content provider</returns>
    </member>
    <member name="M:EPiServer.Core.IContentProviderManager.IsWastebasket(EPiServer.Core.ContentReference)">
      <summary>
            Determines whether the specified content link is wastebasket for any content provider
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
        <c>true</c> if the specified content link is wastebasket; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Core.ContentProviderManagerExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Core.IContentProviderManager" /> with convinent methods.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ContentProviderManagerExtensions.GetProvider(EPiServer.Core.IContentProviderManager,EPiServer.Core.ContentReference)">
      <summary>
            Gets the provider where a specific content is stored.
            </summary>
      <param name="contentProviderManager">The content provider manager.</param>
      <param name="contentLink">The reference to find the provider for.</param>
      <returns>
            The page store as an <see cref="T:EPiServer.Core.ContentProvider" />.
            </returns>
    </member>
    <member name="T:EPiServer.Core.IContentVersionRepository">
      <summary>
            Definies signature for <see cref="T:EPiServer.DataAbstraction.ContentVersion" /> repository.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepository.Delete(EPiServer.Core.ContentReference)">
      <summary>
            Delete a single version of a Content
            </summary>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepository.SetCommonDraft(EPiServer.Core.ContentReference)">
      <summary>
            Sets the specified version as common draft.
            </summary>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepository.LoadPublished(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Loads the published version a page with current language selection if the languageBranch is null otherwise
            loads the published version a page for a specific language
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.ContentVersion" /></returns>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepository.LoadPublished(EPiServer.Core.ContentReference)">
      <summary>
            Loads the published version
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.ContentVersion" /></returns>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepository.Load(EPiServer.Core.ContentReference)">
      <summary>
            Loads the version.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.ContentVersion" /></returns>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepository.LoadCommonDraft(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Loads the common draft.
            </summary>
      <param name="contentLink">The content link to load common draft for.</param>
      <param name="language">The language.</param>
      <returns>
            CommonDraft if it exist, otherwise Published, If no published exist the latest saved version is returned
            </returns>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepository.List(EPiServer.Core.VersionFilter,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Lists all versions that matches the filter
            </summary>
      <param name="filter">The filter used</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="totalCount">The total amount of matched versions</param>
      <returns>A list of versions, if no versions where matched an empty list will be returned</returns>
    </member>
    <member name="T:EPiServer.Core.IContentVersionRepositoryEx">
      <summary>
             Signature for extension interface that can be implemented by <see cref="T:EPiServer.Core.IContentVersionRepository" />
             implementations to support listing of obsolete versions.
             </summary>
      <remarks>
             The intention is that this interface will be merged into <see cref="T:EPiServer.Core.IContentVersionRepository" />
             in next major release
            </remarks>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepositoryEx.ListObsolete(System.Int32,System.Int32@)">
      <summary>
            List versions that are obsolete and ready for deletion.
            </summary>
      <param name="maxRows">Max number of rows to return</param>
      <param name="totalCount">total number of obsolete versions that exist</param>
      <returns>A list of obsolete versions</returns>
    </member>
    <member name="T:EPiServer.Core.IContentVersionRepositoryExtensions">
      <summary>
            Convenient methods for <see cref="T:EPiServer.Core.IContentVersionRepository" /></summary>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepositoryExtensions.ListDelayedPublish(EPiServer.Core.IContentVersionRepository)">
      <summary>
             Lists all content references that are set to delayed publish.
            </summary>
      <param name="contentVersionRepository">The version repository that is being extended</param>
      <returns>
            All matching content Versions
            </returns>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepositoryExtensions.List(EPiServer.Core.IContentVersionRepository,EPiServer.Core.ContentReference,System.String)">
      <summary>
            Lists all versions for a page current language selection if the languageBranch is null otherwise
            lists all versions for a page for a specific language
            </summary>
      <param name="contentVersionRepository">The version repository that is being extended</param>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch</param>
      <returns>
            All matching versions
            </returns>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepositoryExtensions.ListPublished(EPiServer.Core.IContentVersionRepository,EPiServer.Core.ContentReference)">
      <summary>
            Lists the published versions for a content
            </summary>
      <param name="contentVersionRepository">The version repository that is being extended</param>
      <param name="contentLink">The content link.</param>
      <returns>
            All published versions for the content
            </returns>
    </member>
    <member name="M:EPiServer.Core.IContentVersionRepositoryExtensions.List(EPiServer.Core.IContentVersionRepository,EPiServer.Core.ContentReference)">
      <summary>
            Lists all versions
            </summary>
      <param name="contentVersionRepository">The version repository that is being extended</param>
      <param name="contentLink">The content link.</param>
      <returns>
            All matching versions
            </returns>
    </member>
    <member name="T:EPiServer.Core.IContentVideo">
      <summary>
            Base interface for video content.
            </summary>
    </member>
    <member name="T:EPiServer.Core.IDynamicPropertyLookup">
      <summary>
            Find dynamic property values for a specific page.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IDynamicPropertyLookup.FindDynamicProperty(System.String,EPiServer.Core.PropertyDataCollection)">
      <summary>
            Finds the dynamic property.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="properties">The properties of the page that requests the dynamic property value.</param>
      <returns>A PropertyData with the dynamic property information, or null if not found.</returns>
    </member>
    <member name="T:EPiServer.Core.IInitializableContent">
      <summary>
            Interface that can be implemented by <see cref="T:EPiServer.Core.IContentData" /> instances that want to be called during initialization
            of new instances.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IInitializableContent.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Sets the default property values on the content data instance.
            </summary>
      <param name="contentType">Type of the content.</param>
      <example>
        <code source="../CodeSamples/EPiServer/Core/PageDataSamples.aspx.cs" region="DefaultValues" />
      </example>
    </member>
    <member name="T:EPiServer.Core.ILanguageSelector">
      <summary>
            Interface to support language selection on multilingual content.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ILanguageSelector.Language">
      <summary>
            Specifies for which language content should be fetched. 
            If set to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />, content will be loaded from the master language branch.
            </summary>
    </member>
    <member name="T:EPiServer.Core.ILocale">
      <summary>
            Defines the signature for a component that exist in a specific Locale (typically a <see cref="T:EPiServer.Core.ContentData" /> instance).
            </summary>
    </member>
    <member name="P:EPiServer.Core.ILocale.Language">
      <summary>
            Gets or sets the language for this instance (typically a <see cref="T:EPiServer.Core.ContentData" /> instance).
            </summary>
      <value>The language.</value>
    </member>
    <member name="T:EPiServer.Core.ILocalizable">
      <summary>
            Defines the signature for a component that has a <see cref="T:EPiServer.Core.ContentData" /> in multiple languages.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ILocalizable.ExistingLanguages">
      <summary>
            Gets or sets the existing languages for the <see cref="T:EPiServer.Core.ContentData" /></summary>
    </member>
    <member name="P:EPiServer.Core.ILocalizable.MasterLanguage">
      <summary>
            Gets or sets the master language for this <see cref="T:EPiServer.Core.ContentData" /> instance.
            </summary>
      <value>The master language.</value>
    </member>
    <member name="T:EPiServer.Core.ImageData">
      <summary>
            Base class for content types which should be handled as images by the system.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ImageData.Thumbnail">
      <summary>
            Gets or sets the generated thumbnail for this media.
            </summary>
    </member>
    <member name="T:EPiServer.Core.IModifiedTrackable">
      <summary>
            Defines signature for component that tracks modifications on instance.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IModifiedTrackable.IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.IModifiedTrackable.ResetModified">
      <summary>
            Resets the modified flag on all the data contained on the instance.
            </summary>
    </member>
    <member name="T:EPiServer.Core.InconsistentDataException">
      <summary>
            The exception that is thrown when delayed loading of a long string value fails.
            </summary>
    </member>
    <member name="M:EPiServer.Core.InconsistentDataException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.InconsistentDataException" /> class with a specified error message. 
            </summary>
    </member>
    <member name="M:EPiServer.Core.InconsistentDataException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.InconsistentDataException" /> class with a specified error message. 
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:EPiServer.Core.InconsistentDataException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.InconsistentDataException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Core.InconsistentDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.InconsistentDataException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:EPiServer.Core.InconsistentDataException.PageLink">
      <summary>
            Gets or sets the PageReference associated with the exception.
            </summary>
      <value>
            A <see cref="T:EPiServer.Core.PageReference" /> referencing the page which contains the property that caused the exception.
            </value>
    </member>
    <member name="T:EPiServer.Core.IndexingInformation">
      <summary>
            Describes the latest full indexing of the site content.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IndexingInformation.ExecutionDate">
      <summary>
            Gets or sets when the latest full indexing was executed.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IndexingInformation.ResetIndex">
      <summary>
            Gets or sets a value indicating whether the index was reset when the indexing was perfomed.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IndexingInformation.Id">
      <summary>
            Gets or sets the id. Required since this class is persisted in the dynamic data store.
            </summary>
    </member>
    <member name="T:EPiServer.Core.InvalidLongstringValueException">
      <summary>
            Exception throw by <see cref="T:EPiServer.Core.PropertyData" /> derived objects when assigned a invalid value.
            </summary>
      <remarks>
        <para>Will translate error message to current language, default message is: "{actualValue}" is not a valid value for "{name}".</para>
        <para>
          <see cref="T:EPiServer.Core.InvalidPropertyValueException" /> and <see cref="T:EPiServer.Core.RequiredPropertyValueException" /> are the two main exceptions that EPiServer.UI.WebControls.PropertyDataForm catches to display friendly and language dependent error messages.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.InvalidLongstringValueException.#ctor">
      <summary>
            Initializes a new instance
            </summary>
    </member>
    <member name="M:EPiServer.Core.InvalidLongstringValueException.#ctor(System.String)">
      <summary>
            Initializes a new instance
            </summary>
      <param name="message">Message</param>
    </member>
    <member name="M:EPiServer.Core.InvalidLongstringValueException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.InvalidLongstringValueException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Core.InvalidLongstringValueException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance with a specified name and a actual value
            </summary>
      <param name="name">Source property name/type of exception</param>
      <param name="actualValue">The value that was assigned</param>
    </member>
    <member name="M:EPiServer.Core.InvalidLongstringValueException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified name, actual value and inner exception that was the cause of the exception.
            </summary>
      <param name="name">Source property name/type of exception</param>
      <param name="actualValue">The value that was assigned</param>
      <param name="innerException">The inner exception that was the cause of the exception</param>
    </member>
    <member name="M:EPiServer.Core.InvalidLongstringValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.InvalidLongstringValueException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Core.InvalidLongstringValueException.ChangeDisplayName(System.String)">
      <summary>
            Tries to set the error message to a translated exception message.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="P:EPiServer.Core.InvalidLongstringValueException.ActualValue">
      <summary>
            String representation of the value that caused the exception
            </summary>
      <value>Value that caused the exception</value>
    </member>
    <member name="T:EPiServer.Core.InvalidPropertyValueException">
      <summary>
            Exception throw by <see cref="T:EPiServer.Core.PropertyData" /> derived objects when assigned a invalid value.
            </summary>
      <remarks>
        <para>Will translate error message to current language, default message is: "{actualValue}" is not a valid value for "{name}".</para>
        <para>
          <see cref="T:EPiServer.Core.InvalidPropertyValueException" /> and <see cref="T:EPiServer.Core.RequiredPropertyValueException" /> are the two main exceptions that EPiServer.UI.WebControls.PropertyDataForm catches to display friendly and language dependent error messages.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.InvalidPropertyValueException.#ctor">
      <summary>
            Initializes a new instance with a specified name and a actual value
            </summary>
    </member>
    <member name="M:EPiServer.Core.InvalidPropertyValueException.#ctor(System.String)">
      <summary>
            Initializes a new instance with a specified name and a actual value
            </summary>
      <param name="message">Source property name/type of exception</param>
    </member>
    <member name="M:EPiServer.Core.InvalidPropertyValueException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.InvalidPropertyValueException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Core.InvalidPropertyValueException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance with a specified name and a actual value
            </summary>
      <param name="name">Source property name/type of exception</param>
      <param name="actualValue">The value that was assigned</param>
    </member>
    <member name="M:EPiServer.Core.InvalidPropertyValueException.#ctor(System.String,System.String,System.String,System.String[])">
      <summary>
            Initializes a new instance with a specified name and a actual value
            </summary>
      <param name="actualValue">The value that was assigned</param>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="list">Parameter list to substitute values in error text using <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
    </member>
    <member name="M:EPiServer.Core.InvalidPropertyValueException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified name, actual value and inner exception that was the cause of the exception.
            </summary>
      <param name="name">Source property name/type of exception</param>
      <param name="actualValue">The value that was assigned</param>
      <param name="innerException">The inner exception that was the cause of the exception</param>
    </member>
    <member name="M:EPiServer.Core.InvalidPropertyValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.InvalidPropertyValueException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Core.InvalidPropertyValueException.ChangeDisplayName(System.String)">
      <summary>
            Tries to set the error message to a translated exception message.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="P:EPiServer.Core.InvalidPropertyValueException.ActualValue">
      <summary>
            Gets a string representation of the value that caused the exception.
            </summary>
      <value>Value that caused the exception.</value>
    </member>
    <member name="T:EPiServer.Core.IPageCriteriaQueryable">
      <summary>
            Provides query capabilitites for pages.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IPageCriteriaQueryable.FindAllPagesWithCriteria(EPiServer.Core.ContentReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>
            Search for pages that fulfil specific criteria. Will not filter on access.
            </summary>
      <param name="contentLink">The root content for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <param name="languageBranch">Only search for pages on specific language branch</param>
      <param name="selector">A language selector used to determine the language of pages to return</param>
      <returns>
            A collection of pages that fulfil the criteras, will be empty if no match is found.
            </returns>
    </member>
    <member name="M:EPiServer.Core.IPageCriteriaQueryable.FindPagesWithCriteria(EPiServer.Core.ContentReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>
            Search for pages that fulfil specific criteria
            </summary>
      <param name="contentLink">The root content for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <param name="languageBranch">Only search for pages on specific language branch</param>
      <param name="selector">A language selector used to determine the language of pages to return</param>
      <returns>
            A collection of pages that fulfil the criteras, will be empty if no match is found.
            </returns>
    </member>
    <member name="T:EPiServer.Core.IPageCriteriaQueryService">
      <summary>
            Defines signatures for querying for pages using <see cref="T:EPiServer.PropertyCriteriaCollection" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IPageCriteriaQueryService.FindAllPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>
            Search for pages that fulfil specific criteria. Will not filter on access.
            </summary>
      <param name="pageLink">The root page for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <param name="languageBranch">Only search for pages on specific language branch</param>
      <param name="selector">A language selector used to determine the language of pages to return</param>
      <returns>
            A collection of pages that fulfil the criteras, will be empty if no match is found.
            </returns>
    </member>
    <member name="M:EPiServer.Core.IPageCriteriaQueryService.FindPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>
            Search for pages that fulfil specific criteria
            </summary>
      <param name="pageLink">The root page for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <param name="languageBranch">Only search for pages on specific language branch</param>
      <param name="selector">A language selector used to determine the language of pages to return</param>
      <returns>
            A collection of pages that fulfil the criteras, will be empty if no match is found.
            </returns>
    </member>
    <member name="T:EPiServer.Core.PageCriteriaQueryServiceExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Core.IPageCriteriaQueryService" /> with convinent methods.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageCriteriaQueryServiceExtensions.FindPagesWithCriteria(EPiServer.Core.IPageCriteriaQueryService,EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection,System.String)">
      <summary>
            Search for pages that fulfil a specific criterias
            </summary>
      <param name="queryService">The <see cref="T:EPiServer.Core.IPageCriteriaQueryService" /> instance to extend</param>
      <param name="pageLink">The root page for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <param name="languageBranch">Only search for pages on specific language branch</param>
      <returns>A collection of pages that fulfil the criteras, will be empty if no match is found.</returns>
    </member>
    <member name="M:EPiServer.Core.PageCriteriaQueryServiceExtensions.FindPagesWithCriteria(EPiServer.Core.IPageCriteriaQueryService,EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection)">
      <summary>
            Search for pages that fulfil a specific criterias
            </summary>
      <param name="queryService">The <see cref="T:EPiServer.Core.IPageCriteriaQueryService" /> instance to extend</param>
      <param name="pageLink">The root page for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <returns>A collection of pages that fulfil the criteras, will be empty if no match is found.</returns>
    </member>
    <member name="M:EPiServer.Core.PageCriteriaQueryServiceExtensions.FindPagesWithName(EPiServer.Core.IPageCriteriaQueryService,EPiServer.Core.PageReference,System.String,System.String)">
      <summary>
            Finds all pages that matches the page name in the provided language.
            </summary>
      <param name="queryService">The service that is being extended</param>
      <param name="pageLink">The root page for which the search will be performed</param>
      <param name="pageName">Name of the page.</param>
      <param name="languageBranch">Restrict searching to pages in this language branch.</param>
      <remarks>
            The page name is matched with starting and trailing wildcards, i e searching for pageName "abc" will
            for example match pages named "abc", "123abc456" or "abc1234".
            </remarks>
    </member>
    <member name="T:EPiServer.Core.IProjectResolver">
      <summary>
            Get currently active projects
            </summary>
    </member>
    <member name="M:EPiServer.Core.IProjectResolver.GetCurrentProjects">
      <summary>
            Get a list of currently active projects
            </summary>
      <returns>A list of active projects or an empty list if no projects are active</returns>
    </member>
    <member name="T:EPiServer.Core.IPropertyException">
      <summary>
            All friendly exceptions from <see cref="T:EPiServer.Core.PropertyData" /> should support this interface
            </summary>
    </member>
    <member name="M:EPiServer.Core.IPropertyException.ChangeDisplayName(System.String)">
      <summary>
            Change the name of originating error source after an exception occurred, for example another name for a property.
            </summary>
      <param name="displayName">The new name to be used</param>
      <remarks>Properties will by default throw their own data type as originator because validation is often done in static methods on postbacks.</remarks>
      <example>
            Change name of source after catching an exception
            <code source="../CodeSamples/EPiServer/Core/IpropertyExceptionSamples.cs" region="CatchException" lang="cs" /></example>
    </member>
    <member name="T:EPiServer.Core.IPropertyPreferLoadData">
      <summary>
            Implemented by properties that prefers to be initialized through LoadData instead of ParseToSelf
            </summary>
    </member>
    <member name="T:EPiServer.Core.IPublishedStateAssessor">
      <summary>
            Describes an object that can be used to assess if a content item currently is in a published state.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IPublishedStateAssessor.IsPublished(EPiServer.Core.IContent,EPiServer.Core.PublishedStateCondition)">
      <summary>
            Determines whether the specified <see cref="T:EPiServer.Core.IContent" /> instance currently is in a published state
            using the provided conditions.
            </summary>
      <param name="content">The content instance that should be assessed.</param>
      <param name="condition">The conditions of how the assessment should be done.</param>
      <returns>
        <c>true</c> if the content item is published; otherwise <c>false</c>.</returns>
    </member>
    <member name="T:EPiServer.Core.IRawContent">
      <summary>
            Interface that must be implemented by a component that is to be spart of export / import.
            </summary>
    </member>
    <member name="T:EPiServer.Core.IResourceable">
      <summary>
            Definies signature for component that handles resources for a <see cref="T:EPiServer.Core.IContentData" /> instance.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IResourceable.ContentAssetsID">
      <summary>
            Gets or sets the content assets ID.
            </summary>
    </member>
    <member name="T:EPiServer.Core.IStatusTransitionEvaluator">
      <summary>
            Component that will evaluate which status a <see cref="T:EPiServer.Core.IContent" /> item
            should transition to when a specific <see cref="T:EPiServer.DataAccess.SaveAction" /> is 
            provided to the <see cref="M:EPiServer.IContentRepository.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,EPiServer.Security.AccessLevel)" />
            method.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IStatusTransitionEvaluator.Evaluate(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
      <summary>
            Evaluates which status a content item in it's current state should 
            transition to if the provided action is taken.
            </summary>
      <param name="content">The content item that should be evaluated.</param>
      <param name="action">The suggested action to take.</param>
      <returns>
            A <see cref="T:EPiServer.Core.StatusTransition" /> object indicating which type of transition that should be made.
            If the the provided action isn't valid, <see cref="F:EPiServer.Core.StatusTransition.Invalid" /> will be returned.
            </returns>
    </member>
    <member name="T:EPiServer.Core.IVersionable">
      <summary>
            Defines signature for <see cref="T:EPiServer.Core.ContentData" /> instance that supports versions.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IVersionable.Status">
      <summary>
            Gets or sets the version status of this item.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IVersionable.IsPendingPublish">
      <summary>
            Gets or sets a value indicating whether this item is in pending publish state.
            </summary>
      <value>
        <c>true</c> if this instance is in pending publish state; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.IVersionable.StartPublish">
      <summary>
            Gets or sets the start publish date for this item.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IVersionable.StopPublish">
      <summary>
            Gets or sets the stop publish date for this item.
            </summary>
    </member>
    <member name="T:EPiServer.Core.LanguageBehaviour">
      <summary>
            Specifies how languages should be handled during loading of <see cref="T:EPiServer.Core.IContent" />.
            </summary>
    </member>
    <member name="F:EPiServer.Core.LanguageBehaviour.NoFallback">
      <summary>
            Loads the <see cref="T:EPiServer.Core.IContent" /> in the requested language. No consideration is taken to fallback or replacement settings.
            </summary>
    </member>
    <member name="F:EPiServer.Core.LanguageBehaviour.Fallback">
      <summary>
            Loads the <see cref="T:EPiServer.Core.IContent" /> in the requested language. If the <see cref="T:EPiServer.Core.IContent" /> instance does not exist or is not 
            published in the requested language then language settings is taken into consideration to see if it should load the <see cref="T:EPiServer.Core.IContent" />
            instance in another language.
            </summary>
    </member>
    <member name="F:EPiServer.Core.LanguageBehaviour.FallbackWithMaster">
      <summary>
            Works as <see cref="F:EPiServer.Core.LanguageBehaviour.Fallback" /> but with an additional fallback to master language.
            </summary>
    </member>
    <member name="T:EPiServer.Core.LanguageSelectionSource">
      <summary>
            Indicates the source of a language selection. See <see cref="M:EPiServer.Core.IContentLanguageSettingsHandler.MatchLanguageSettings(EPiServer.Core.IContent,System.String)" />.
            </summary>
    </member>
    <member name="F:EPiServer.Core.LanguageSelectionSource.Unknown">
      <summary>
            Default value. Indicates that no language selection source have yet been determined.
            </summary>
    </member>
    <member name="F:EPiServer.Core.LanguageSelectionSource.Requested">
      <summary>
            Indicates that the requested language matches the content language
            </summary>
    </member>
    <member name="F:EPiServer.Core.LanguageSelectionSource.Master">
      <summary>
            Indicates that the Master language was selected either becase that no specific language
            was requested to the <see cref="T:EPiServer.Core.LanguageSelector" /> or that the requested language or any
            language in the fallback chain was published.
            </summary>
    </member>
    <member name="F:EPiServer.Core.LanguageSelectionSource.Replacement">
      <summary>
            Indicates that there was a replacement language specified for the requested language 
            </summary>
    </member>
    <member name="F:EPiServer.Core.LanguageSelectionSource.Fallback">
      <summary>
            Indicates that there was no published version of the requested language but a fallback language was found
            </summary>
    </member>
    <member name="F:EPiServer.Core.LanguageSelectionSource.ReplacementFallback">
      <summary>
            Indicates that there was a replacement language specified for the requested language
            but that no published version of the replacement language was found but a fallback language was found.
            </summary>
    </member>
    <member name="F:EPiServer.Core.LanguageSelectionSource.None">
      <summary>
            Indicates that it was not possible to determine the cause of the language selection.
            </summary>
    </member>
    <member name="T:EPiServer.Core.LanguageSelector">
      <summary>
            Default implementation of language selection on multilingual pages, see static method AutoDetect for default behaviour
            </summary>
      <remarks>This class is not thread-safe, it should not be cached or stored in static member variables - always create a new instance of this class by for example calling AutoDetect or using the constructor with a language branch.</remarks>
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.LanguageSelector" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.#ctor(System.String)">
      <summary>
            Default constructor for a pre-defined language
            </summary>
      <param name="languageBranch">The language branch.</param>
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.#ctor(System.String,EPiServer.Core.IContentLanguageSettingsHandler)">
      <summary>
            Constructor for a pre-defined language that takes in external dependency
            </summary>
      <remarks>
            This is mainly to be used in unit tests. When <see cref="T:EPiServer.Core.IContentLanguageSettingsHandler" />
            is not specified <see cref="P:EPiServer.Core.ContentLanguageSettingsHandler.Instance" /> will be used.
            </remarks>
      <param name="languageBranch">The language branch.</param>
      <param name="languageSettingsHandler">The language settings handler.</param>
    </member>
    <member name="P:EPiServer.Core.LanguageSelector.LanguageBranch">
      <summary>
            Setting the LanguageBranch to a value is equal to creating the object with the parameterized constructor.
            </summary>
      <remarks>Autodetect and Fallback to master will be set to false</remarks>
    </member>
    <member name="P:EPiServer.Core.LanguageSelector.SelectionSource">
      <summary>
            Gets what selection source was used when selecting the language.
            </summary>
    </member>
    <member name="P:EPiServer.Core.LanguageSelector.FallbackToMaster">
      <summary>
            Indicates whether the returned pages language will fall back to the master language 
            if the requested language doesn't exist.
            </summary>
    </member>
    <member name="P:EPiServer.Core.LanguageSelector.AutoSelect">
      <summary>
            Indicates whether the language returned is automatically selected from the pages language configuration.
            </summary>
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.MasterLanguage">
      <summary>
            Creates a language selector that always selects the master language of a page
            </summary>
      <returns>A language selector object</returns>
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.AutoDetect">
      <summary>
            Creates a language selector that reads current language selection and enables replacement and fallback language handling.
            </summary>
      <returns>A language selector object</returns>
      <remarks>Using AutoDetect without parameters will result in no master language fallback handling.</remarks>
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.AutoDetect(System.Boolean)">
      <summary>
            Creates a language selector that reads current language selection and enables fallback languages
            </summary>
      <param name="enableMasterLanguageFallback">Enable master language as a last resort for fallback instead of filtering a page</param>
      <returns>A language selector object</returns>
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.Fallback(System.String,System.Boolean)">
      <summary>
            Creates a language selector with a custom language selection and enables fallback languages
            </summary>
      <param name="preferredLanguageBranch">The prefered language branch (overrides user choice)</param>
      <param name="enableMasterLanguageFallback">Enable master language as a last resort for fallback instead of filtering a page</param>
      <returns>A language selector object</returns>
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.AddXmlSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>
            Supports creating a CMS 5 compatible WSDL schema for <see cref="T:EPiServer.Core.LanguageSelector" /> via <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /></summary>
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.LanguageSelector.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Core.LanguageSelectorFactory">
      <summary>
            Creates language selectors for different scenarios.
            </summary>
    </member>
    <member name="M:EPiServer.Core.LanguageSelectorFactory.Fallback(System.String,System.Boolean)">
      <summary>
            Creates a language selector with a custom language selection and enables fallback languages
            </summary>
      <param name="preferredLanguageBranch">The prefered language branch (overrides user choice)</param>
      <param name="enableMasterLanguageFallback">Enable master language as a last resort for fallback instead of filtering a page</param>
      <returns>A language selector object</returns>
    </member>
    <member name="M:EPiServer.Core.LanguageSelectorFactory.AutoDetect">
      <summary>
            Creates a language selector that reads current language selection and enables fallback languages
            </summary>
      <returns>A language selector object</returns>
    </member>
    <member name="M:EPiServer.Core.LanguageSelectorFactory.AutoDetect(System.Boolean)">
      <summary>
            Creates a language selector that reads current language selection and enables fallback languages
            </summary>
      <param name="enableMasterLanguageFallback">Enable master language as a last resort for fallback instead of filtering a page</param>
      <returns>A language selector object</returns>
    </member>
    <member name="M:EPiServer.Core.LanguageSelectorFactory.MasterLanguage">
      <summary>
            Creates a language selector that always selects the master language of a page
            </summary>
      <returns>A language selector object</returns>
    </member>
    <member name="M:EPiServer.Core.LanguageSelectorFactory.Create(System.String)">
      <summary>
            Creates an <see cref="T:EPiServer.Core.ILanguageSelector" /> for the specified language branch.
            </summary>
      <param name="languageBranch">The prefered language branch (overrides user choice)</param>
      <returns>A new <see cref="T:EPiServer.Core.ILanguageSelector" /> for the specified language branch.</returns>
    </member>
    <member name="T:EPiServer.Core.Licensing">
      <summary>
            Class that handles all EPiServer related licensing
            </summary>
      <remarks>
            Use <see cref="M:EPiServer.Core.Licensing.IsValidLicense" /> to determine if this installation has a valid license. 
            This might be useful if some of your functions cannot operate when the 
            restrictions are enforced when a non-valid license is in used. For example 
            <b>DataFactory</b> may throw exceptions if you are running a scheduled job without a 
            license. Otherwise error messages will be appended to output. 
            </remarks>
    </member>
    <member name="M:EPiServer.Core.Licensing.SkipLicenseCheck">
      <summary>
            Check for cases when licenses should not be validated.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Licensing.Test">
      <summary>
            Test license. Will write errors to response stream if <b>HttpContent</b> is 
            available; otherwise throw error.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Licensing.IsCommercialLicense">
      <summary>
            Determines if current used license is a commercial license
            </summary>
    </member>
    <member name="M:EPiServer.Core.Licensing.GetErrorMessage">
      <summary>
            Get message returned by license check
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Licensing.IsValidLicense">
      <summary>
            Checks if this instance of EPiServer is using a valid license in the case where a license is required.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Licensing.IsLicenseFileValid">
      <summary>
            Checks if this instance of EPiServer is using a valid license.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.Licensing.LicenseNumber">
      <summary>
            Get License number for the running instance
            </summary>
      <returns>An integer that is the license number.</returns>
    </member>
    <member name="P:EPiServer.Core.Licensing.IsFileBased">
      <summary>
            Indicates if the license information is from file or not.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Licensing.LicenseMetaData(System.String)">
      <summary>
            Get the selected license metadata string
            </summary>
      <param name="key">The license metadata tag</param>
      <returns>A string with the metadata value</returns>
    </member>
    <member name="M:EPiServer.Core.Licensing.LicenseMetaDataUnsafe(System.String)">
      <summary>
            Get the selected license metadata string.
            </summary>
      <param name="key">The license metadata tag.</param>
      <returns>A string with the metadata value</returns>
      <exception cref="T:EPiServer.Licensing.LicenseException">License file could not be loaded.</exception>
    </member>
    <member name="T:EPiServer.Core.LinkType">
      <summary>
            Linkage type for pages
            </summary>
    </member>
    <member name="F:EPiServer.Core.LinkType.Normal">
      <summary>
            Normal URL, for example "/templates/page.aspx?id=30"
            </summary>
    </member>
    <member name="F:EPiServer.Core.LinkType.Shortcut">
      <summary>
            URL points to a page different than the current
            </summary>
    </member>
    <member name="F:EPiServer.Core.LinkType.External">
      <summary>
            URL points to a external resource, for example "/docs/EPiServer.doc"
            </summary>
    </member>
    <member name="F:EPiServer.Core.LinkType.Inactive">
      <summary>
            URL is inactive, "#"
            </summary>
    </member>
    <member name="F:EPiServer.Core.LinkType.FetchData">
      <summary>
            URL points to a page that will fetch data from another page
            </summary>
    </member>
    <member name="F:EPiServer.Core.LinkType.Image">
      <summary>
            URL points to a image
            </summary>
    </member>
    <member name="T:EPiServer.Core.LinkTypeList">
      <summary>
            Helper class for links.
            </summary>
    </member>
    <member name="M:EPiServer.Core.LinkTypeList.TranslatedWarningString(EPiServer.Core.PageShortcutType)">
      <summary>
            Gets a translated string with information about the link type.
            </summary>
      <param name="shortcutType">Type of the shortcut.</param>
      <returns>A translated string with information about the link type.</returns>
      <remarks>This can be used to indicate that a page is an external link or fetches data etc.</remarks>
    </member>
    <member name="T:EPiServer.Core.LoaderOption">
      <summary>
            Base class for types that can be part of <see cref="T:EPiServer.Core.LoaderOptions" /> to specify options for loading of <see cref="T:EPiServer.Core.IContent" /> instances.
            </summary>
    </member>
    <member name="T:EPiServer.Core.LanguageLoaderOption">
      <summary>
            Specifies settings for language handling during loading.
            </summary>
    </member>
    <member name="M:EPiServer.Core.LanguageLoaderOption.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.LanguageLoaderOption" /></summary>
    </member>
    <member name="P:EPiServer.Core.LanguageLoaderOption.FallbackBehaviour">
      <summary>
            Specifies which behaviour regarding fallback/replacement languages that should be used when loading content. 
            </summary>
    </member>
    <member name="P:EPiServer.Core.LanguageLoaderOption.Language">
      <summary>
            Gets or sets the language branch that should be used when loading content.
            </summary>
      <remarks>
            If not set or set to <c>null</c>, the preferred language branch will be retrieved from the current context.<br />
            If set to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />, content will be loaded from the master language branch.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.LanguageLoaderOption.MasterLanguage">
      <summary>
            Returns an instance of <see cref="T:EPiServer.Core.LanguageLoaderOption" /> that specifies to load master langauge version for a <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <returns>A loader option</returns>
    </member>
    <member name="M:EPiServer.Core.LanguageLoaderOption.Fallback(System.Globalization.CultureInfo)">
      <summary>
            Returns an instance of <see cref="T:EPiServer.Core.LanguageLoaderOption" /> specified to load a langauge version for a <see cref="T:EPiServer.Core.IContent" /> instance with fallback option if
            for example language version is not published.
            </summary>
      <param name="language">The language version to load</param>
      <returns>A loader option</returns>
    </member>
    <member name="M:EPiServer.Core.LanguageLoaderOption.FallbackWithMaster(System.Globalization.CultureInfo)">
      <summary>
            Returns an instance of <see cref="T:EPiServer.Core.LanguageLoaderOption" /> specified to load a langauge version for a <see cref="T:EPiServer.Core.IContent" /> instance with fallback option if
            for example language version is not published. If no other fallback is found it fallbacks to master langauge version.
            </summary>
      <param name="language">The language version to load</param>
      <returns>A loader option</returns>
    </member>
    <member name="M:EPiServer.Core.LanguageLoaderOption.Specific(System.Globalization.CultureInfo)">
      <summary>
            Returns an instance of <see cref="T:EPiServer.Core.LanguageLoaderOption" /> specified to load a specific langauge version for a <see cref="T:EPiServer.Core.IContent" /> instance with no fallback option.
            </summary>
      <param name="language">The language version to load</param>
      <returns>A loader option</returns>
    </member>
    <member name="T:EPiServer.Core.ProjectLoaderOption">
      <summary>
            Specifies settings for project handling during loading of content.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ProjectLoaderOption.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.ProjectLoaderOption" /></summary>
    </member>
    <member name="P:EPiServer.Core.ProjectLoaderOption.ProjectIds">
      <summary>
            Specifies which projects that should be handled during loading of content.
            </summary>
    </member>
    <member name="T:EPiServer.Core.LoaderOptions">
      <summary>
            Specifies the options to use when loading content.
            </summary>
    </member>
    <member name="T:EPiServer.Core.MatchingSegmentResult">
      <summary>
            Represent a result from method <see cref="M:EPiServer.Core.ContentProvider.ListMatchingSegments(EPiServer.Core.ContentReference,System.String)" />.
            </summary>
    </member>
    <member name="P:EPiServer.Core.MatchingSegmentResult.Language">
      <summary>
            Gets or sets the language for the match.
            </summary>
      <value>
            The language.
            </value>
    </member>
    <member name="P:EPiServer.Core.MatchingSegmentResult.ContentLink">
      <summary>
            Gets or sets the content link for the match.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="T:EPiServer.Core.MediaData">
      <summary>
            Base class for content based media implementations.
            </summary>
    </member>
    <member name="F:EPiServer.Core.MediaData.ChangedByID">
      <summary>
            The query parameter that is added to <see cref="P:EPiServer.Core.MediaData.BinaryData" /> identifier to mark which version that changed the instance.
            </summary>
    </member>
    <member name="P:EPiServer.Core.MediaData.RouteSegment">
      <summary>
            Gets or sets the Route segment.
            </summary>
      <value>The Route segment.</value>
    </member>
    <member name="M:EPiServer.Core.MediaData.ResetModified">
      <summary>
            Resets the modified flag on all the properties in the <see cref="P:EPiServer.Core.IContentData.Property" /> collection.
            </summary>
    </member>
    <member name="P:EPiServer.Core.MediaData.IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.MediaData.Thumbnail">
      <summary>
            Gets or sets the generated thumbnail for this media.
            </summary>
    </member>
    <member name="P:EPiServer.Core.MediaData.BinaryData">
      <summary>
            The binary data associated with this file
            </summary>
      <remarks>Setting this value to <c>null</c> will de-reference the file from the blob, meaning the container will not be deleted when the file is deleted.</remarks>
    </member>
    <member name="P:EPiServer.Core.MediaData.BinaryDataContainer">
      <summary>
            The container used to store binaries for this content item
            </summary>
    </member>
    <member name="P:EPiServer.Core.MediaData.MimeType">
      <summary>
            Gets the MIME type of this media content.
            </summary>
      <remarks>
            If <see cref="P:EPiServer.Core.MediaData.BinaryData" /> is <c>null</c> then <c>null</c> is returned.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.MediaData.Language">
      <summary>
            Gets or sets the language for this media instance.
            </summary>
      <value>
            The language.
            </value>
    </member>
    <member name="T:EPiServer.Core.OutOfRangePropertyValueException">
      <summary>
            Exception throw by <see cref="T:EPiServer.Core.PropertyData" /> derived objects when assigned a out of range value.
            </summary>
      <remarks>
        <para>Will translate error message to current language, default message is: "You must enter a value between {minval} and {maxval} for "{name}"".</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.OutOfRangePropertyValueException.#ctor">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.OutOfRangePropertyValueException" /></summary>
    </member>
    <member name="M:EPiServer.Core.OutOfRangePropertyValueException.#ctor(System.String)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.OutOfRangePropertyValueException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:EPiServer.Core.OutOfRangePropertyValueException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.OutOfRangePropertyValueException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Core.OutOfRangePropertyValueException.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance with a specified name, minvalue and maxvalue
            </summary>
      <param name="name">Source property name/type of exception</param>
      <param name="minVal">Minimum value for range</param>
      <param name="maxVal">Maximum value for range</param>
    </member>
    <member name="M:EPiServer.Core.OutOfRangePropertyValueException.#ctor(System.String,System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified name, minvalue, maxvalue and inner exception that was the cause of the exception.
            </summary>
      <param name="name">Source property name/type of exception</param>
      <param name="minVal">Minimum value for range</param>
      <param name="maxVal">Maximum value for range</param>
      <param name="innerException">The inner exception that was the cause of the exception</param>
    </member>
    <member name="M:EPiServer.Core.OutOfRangePropertyValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.OutOfRangePropertyValueException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Core.OutOfRangePropertyValueException.ChangeDisplayName(System.String)">
      <summary>
            Tries to set the error message to a translated exception message.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="T:EPiServer.Core.PageData">
      <summary>
            Represents the content and meta data about a specific page.
            </summary>
      <remarks>
        <para>
            The <c>PageData</c> class contains content and meta data about a specific page. This includes the 
            name of the page (<see cref="P:EPiServer.Core.IContent.Name" />), reference (<see cred="IContent.ContentLink" />) and URL (<see cref="P:EPiServer.Core.PageData.LinkURL" />). 
            </para>
        <para>
          <c>PageData</c> is in many respects synonymous with the web page that it is holding properties 
            for. One example of this is the <see cref="P:EPiServer.Core.PageData.Changed" /> property, which holds last date and time 
            the <b>PageData</b> object, in other words the web page, was changed.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.PageData.#ctor(EPiServer.Security.AccessControlList,EPiServer.Core.PropertyDataCollection)">
      <summary>
            Creates an empty <b>PageData</b> object for the given <see cref="T:EPiServer.Security.AccessControlList" /> and <see cref="T:EPiServer.Core.PropertyDataCollection" />.
            </summary>
      <param name="acl">Access control list</param>
      <param name="coll">Property data collection</param>
    </member>
    <member name="M:EPiServer.Core.PageData.#ctor">
      <summary>
            Creates an empty PageData object.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageData.#ctor(EPiServer.Core.PageReference)">
      <summary>
            Creates an empty PageData object for the given PageReference.
            </summary>
      <param name="pageLink">The PageReference for this page.</param>
    </member>
    <member name="M:EPiServer.Core.PageData.#ctor(EPiServer.Core.PageData)">
      <summary>
            Constructor that creates a new instance by shallow copying the state from another instance.
            </summary>
      <param name="copy">
      </param>
    </member>
    <member name="P:EPiServer.Core.PageData.ContentLink">
      <summary>
            Gets or sets the content link. It used to hold references to content in the EPiServer system.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.EPiServer#Core#IContent#ParentLink">
      <summary>
            Gets or sets the parent link. It used to hold references to the parent content in the EPiServer system.
            </summary>
      <value>
            The parent link.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.PageLink">
      <summary>
            Gets or sets the unique <see cref="T:EPiServer.Core.PageReference" /> identifier of the current page.
            </summary>
      <remarks>
            The use of <b>PageLink</b> is derived from the way in which EPiServer is structured. 
            Pages are nothing more than an instance of an EPiServer page type and a collection 
            of property settings stored in the database. Individual pages are identified by the 
            pkID column in the database table tblPage and transforming this into a URL, you get 
            something looking like "templates/emailpagecontainer.aspx?id=n?", where "n" is the 
            previously mentioned pkID and thus the unique page identifier.
            </remarks>
      <example>
        <para>
            The following example demonstrates the usage of <b>PageLink</b> in HTML.
            </para>
        <para>
            As <b>PageLink</b> is guaranteed to be unique among all pages in a certain EPiServer instances, 
            it is used in the following example to create unique IDs and names for HTML check boxes. 
            The code is used to present the visitor with a selection of pages and allows them to select 
            one or more for further processing.
            </para>
        <code source="../CodeSamples/EPiServer/Core/PageDataSamples.aspx" region="PageLink" lang="aspnet" />
      </example>
    </member>
    <member name="P:EPiServer.Core.PageData.ParentLink">
      <summary>
            Gets or sets a reference to the page that is the closest parent of this page.
            </summary>
      <remarks>
            Parent and childhood is determined by placement in the page tree.
            </remarks>
      <example>
        <para>
            In the following code example <b>ParentLink</b> is used twice. First make sure it 
            contains a non-empty <b>PageReference</b> and secondly to retrieve the sibling of the 
            current page.
            </para>
        <code source="../CodeSamples/EPiServer/Core/PageDataSamples.aspx.cs" region="CSParentLink" />
        <para>
            The following code example demonstrates the usage of <b>ParentLink</b>. The example results 
            in the name of the parent page being displayed.
            </para>
        <code source="../CodeSamples/EPiServer/Core/PageDataSamples.aspx" region="ASPNETParentLink" lang="aspnet" />
      </example>
    </member>
    <member name="P:EPiServer.Core.PageData.ArchiveLink">
      <summary>
            Gets or sets a reference to a page where the page will be archived to when the <see cref="P:EPiServer.Core.PageData.StopPublish" /> data has passed.
            </summary>
      <returns>
            A <b>PageReference</b> that indicates where to archive this page when the <b>StopPublish</b> date has passed. 
            </returns>
      <remarks>
            Note that the scheduled job "Archive pages" must run for the page to be archived. 
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.Category">
      <summary>
            Gets a <see cref="T:EPiServer.Core.CategoryList" /> containing the categories that this page belongs to.
            </summary>
      <returns>A <b>CategoryList</b> with the categories.</returns>
      <remarks>
        <para>
            This is used to determine which categories that the page belongs to, it should not 
            be confused with a property of type <b>PropertyCategory</b> defined on the page type. 
            </para>
        <para>
            If there is no "PageCategory" property, a <c>null</c> object will be returned.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.PageName">
      <summary>
            Gets or sets the display name of page.
            </summary>
      <remarks>
            Not many page settings are under absolute editor control, but <b>PageName</b> is one of them. 
            PageName is a descriptive name given the page in Edit mode. <b>PageName</b> can be used to great 
            benefit in many cases, such as templated controls.
            </remarks>
      <example>
        <para>
            The following example demonstrates the usage of <b>PageName</b> and <b>LinkURL</b>. The HTML code below 
            produces two HTML table rows for every news item page displayed. The first row displays the 
            content of the property <b>PageStartPublish</b> and the second row is an HTML anchor tag, where 
            <b>PageData.LinkURL</b> is the relative URL for the page and <b>PageData.PageName</b> is used as a new headline. 
            Note that <b>PageData.Item</b> is used twice in this HTML code, as the two attributes <b>PageStartPublish</b> 
            and <b>MainIntro</b> are accessed using the indexer for the <b>PageData</b> property.
            </para>
        <code source="../CodeSamples/EPiServer/Core/PageDataSamples.aspx" region="PageName" lang="aspnet" />
      </example>
    </member>
    <member name="P:EPiServer.Core.PageData.LinkURL">
      <summary>
            Gets or sets the URL to this page.
            </summary>
      <remarks>
        <para>
            The <b>LinkURL</b> string property contains root-relative path and query of the URL for the page, 
            in other words to get an absolute URL, prepend <b>LinkURL</b> with the appropriate scheme and host.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.TargetFrameName">
      <summary>
            Get the specified target frame for links to this page
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.LinkType">
      <summary>
            Gets or sets the type of URL that should be used for this page.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.StaticLinkURL">
      <summary>
            Gets or sets the URL to this page as stored in the database.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.URLSegment">
      <summary>
            Gets or sets the segment that represents this page in an URL.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.ExternalURL">
      <summary>
            Gets or sets the page's external URL.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.WorkPageID">
      <summary>
            Gets or sets the identifier of the current version of this page.
            </summary>
      <returns>An integer representing the version ID.</returns>
      <remarks>
            Note that the current implementation of WorkPageID will be strictly increasing with later versions, but you should 
            avoid relying on this aspect and just treat WorkPageID as an opaque identity without any implied semantics.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.PendingArchive">
      <summary>
            Gets a value indicating if this page is pending archiving and should be moved to its archive folder.
            </summary>
      <returns>
        <b>True</b> if the page should be archived now.</returns>
      <remarks>
            This is a utility property that checks if the page has an archive folder and 
            its <see cref="P:EPiServer.Core.PageData.StopPublish" /> date has passed. 
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.PageTypeName">
      <summary>
            Gets or sets the name of the <see cref="T:EPiServer.DataAbstraction.PageType" /> used to create this page.
            </summary>
      <returns>A string with the name.</returns>
      <remarks>
            This is the page type name as entered in Admin mode. It will not be translated in any way. 
            <b>PageTypeName</b> is the same as column Name in the database table tblPageType.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.IsDeleted">
      <summary>
            Gets a value indicating if the page has been deleted. It is marked as deleted if it resides in the wastebasket.
            </summary>
      <returns>
        <c>true</c> if the page is in the wastebasket, otherwise <c>false</c></returns>
      <remarks>
            Since a deletion of a page moves the page to wastebasket rather than 
            deleting it directly, you can use this property to check if the page is deleted 
            or if it is live. 
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.DeletedBy">
      <summary>
            Gets a value indicating who deleted the page.
            </summary>
      <value>
            Deleted by.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.Deleted">
      <summary>
            Gets a value indicating when the page has been deleted.
            </summary>
      <value>
            Date of deletion.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.VisibleInMenu">
      <summary>
            Gets or sets a value indicating whether this page should be visible in menus and tree structures.
            </summary>
      <remarks>
        <para>
            Setting <b>VisibleInMenu</b> to <b>false</b> is way to hide a page so that it will 
            not be displayed in conjunction with other sibling items in the tree, which 
            would otherwise happen automatically. It is typically filtered by, or close to, the presentation layer.
            </para>
        <para>
          <b>VisibleInMenu</b> is stored in the column VisibleInMenu in database table tblContent.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.PendingPublish">
      <summary>
            Gets a value indicating if this page is pending publishing.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.ACL">
      <summary>
            Gets the list of access permissions of this page. 
            This <see cref="T:EPiServer.Security.AccessControlList" /> describes what access certain users and roles has to this page.
            </summary>
      <remarks>
        <para>
            ACL holds the Access Control List for a <b>PageData</b> object. Since <b>PageData</b> has the attribute 
            Property which is a <b>PropertyDataCollection</b>, <b>ACL</b> effectively controls access to the web page. 
            Keep in mind that the Access Control List applies to all of the <b>PageData</b> object and its 
            attributes. It is not possible to have different access permissions for different properties.
            </para>
        <para>
            The Acccess Control List is comprised of an Access Control Entry, ACE, array and is accessed by 
            calling the method ACL.ToRawACEArray.
            </para>
      </remarks>
      <example>
        <para>
            The following code example demonstrates the usage of <b>ToRawACEArray</b> to enumerate the 
            Access Control Entries. The example enumerates the <see cref="T:EPiServer.Security.RawACE" /> objects, 
            which together form the Access Control List and check if one of them is the Create permission.
            </para>
        <code source="../CodeSamples/EPiServer/Core/PageDataSamples.aspx.cs" region="AclEnumerate" />
        <para>
            The following code example demonstrates the usage of <b>QueryDistinctAccess</b> to check specific 
            access for the current user.
            </para>
        <code source="../CodeSamples/EPiServer/Core/PageDataSamples.aspx.cs" region="AclAccess" />
      </example>
    </member>
    <member name="P:EPiServer.Core.PageData.IsMasterLanguageBranch">
      <summary>
            Gets a value indicating if the current page is the master language branch.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.ChildSortOrder">
      <summary>
            Gets a value indicating the sort order used for children to this content
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.SortIndex">
      <summary>
            Gets a value indicating the sort index used when content is sorted by <see cref="F:EPiServer.Filters.FilterSortOrder.Index" /></summary>
    </member>
    <member name="M:EPiServer.Core.PageData.InitializeData(System.Collections.Generic.IList{System.String})">
      <summary>
            Initializes the page with available page languages.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageData.Copy">
      <summary>
            Creates a deep copy of the current object, as opposed to a shallow copy.
            </summary>
      <returns>A new <b>PageData</b>.</returns>
      <remarks>
        <para>
            In most cases you will probably want to use the new <see cref="M:EPiServer.Core.PageData.CreateWritableClone" /> method instead,
            since copying a read-only instance will return a new read-only instance.
            </para>
        <para>
            This method performs a deep copy and the copy should therefore have no 
            references to the original <b>PageData</b> instance. This is to say that you can 
            freely modify the copy without altering the original.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.PageData.ShallowCopy(EPiServer.Core.PageData)">
      <summary>
            Shallow copies the state of the passed PageData instance.
            </summary>
      <param name="copy">The instance to copy state from.</param>
    </member>
    <member name="M:EPiServer.Core.PageData.CheckPublishedStatus(EPiServer.Core.PagePublishedStatus)">
      <summary>
            Indicates whether the page should be displayed based on publish date.
            </summary>
      <param name="status">The type of publish status to check against.</param>
      <returns>
        <b>True</b> if the page should be displayed.</returns>
      <remarks>
            Used internally to filter pages in listings. You should usually not need to refer to this method directly.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PageData.SetDefaultValues(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Sets the default property values on the page data.
            </summary>
      <param name="contentType">The type of content.</param>
      <example>
        <code source="../CodeSamples/EPiServer/Core/PageDataSamples.aspx.cs" region="DefaultValues" />
      </example>
    </member>
    <member name="M:EPiServer.Core.PageData.CreateWritableClone">
      <summary>
            Creates a writable clone of this object.
            </summary>
      <returns>A writable <see cref="T:EPiServer.Core.PageData" /> object.</returns>
    </member>
    <member name="M:EPiServer.Core.PageData.CreateWriteableCloneImplementation">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PageData.MakeReadOnly">
      <summary>
            Protects from modifying this object.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageData.GetSecurityDescriptor">
      <summary>
            Gets the security descriptor.
            </summary>
      <returns>
            An implementation of ISecurityDescriptor.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PageData.GetContentSecurityDescriptor">
      <summary>
            Gets the security descriptor.
            </summary>
      <returns>
            An implementation of ISecurityDescriptor.
            </returns>
    </member>
    <member name="P:EPiServer.Core.PageData.Name">
      <summary>
            Gets or sets the name of the page.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.ContentGuid">
      <summary>
            Gets or sets the content GUID.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.ContentTypeID">
      <summary>
            Gets or sets the content type ID that this <see cref="T:EPiServer.Core.ContentData" /> is an instance of.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.ExistingLanguages">
      <summary>
            Gets or sets the existing langauges for this instance.
            </summary>
      <value>The existing langauges.</value>
    </member>
    <member name="P:EPiServer.Core.PageData.Language">
      <summary>
            Gets or sets the language for this instance.
            </summary>
      <value>The language.</value>
    </member>
    <member name="P:EPiServer.Core.PageData.MasterLanguage">
      <summary>
            Gets or sets the master language for this instance.
            </summary>
      <value>The master language.</value>
    </member>
    <member name="P:EPiServer.Core.PageData.Status">
      <summary>
            Gets the editing status of the current version.
            </summary>
      <value>The status.</value>
    </member>
    <member name="P:EPiServer.Core.PageData.IsPendingPublish">
      <summary>
            Gets or sets a value indicating whether this instance is in pending publish state.
            </summary>
      <value>
        <c>True</c> if this instance is in pending publish state; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.StartPublish">
      <summary>
            Gets the date and time when this page will be published.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.StopPublish">
      <summary>
            Gets or sets the date and time when this page will stop to be published.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.ContentAssetsID">
      <summary>
            Gets or sets the content folder ID.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.SetChangedOnPublish">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:EPiServer.Core.PageData.Changed" /> should be updated on publish.
            </summary>
      <value>
        <c>True</c> if <see cref="P:EPiServer.Core.PageData.Changed" /> should be updated, otherwise <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.Created">
      <summary>
            Gets the date and time when this content instance was created.
            </summary>
      <value>
      </value>
      <remarks>
        <b>Created</b> is maintained by the EPiServer infrastructure and you have no control over them.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.CreatedBy">
      <summary>
            Gets the username of the user that created this content instance.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:EPiServer.Core.PageData.Changed">
      <summary>
            Gets the date when this page was last marked as changed.
            </summary>
      <remarks>
            The changed date is only updated when property <c>PageChangedOnPublish</c> is set to <c>true</c>.
            </remarks>
      <example>
            The following code example demonstrates the usage of <c>Changed</c>.
            <code>
            string changedDateTime = CurrentPage.Changed.ToString( "r" ); 
            </code></example>
    </member>
    <member name="P:EPiServer.Core.PageData.ChangedBy">
      <summary>
            Gets the username of the user that most recently changed this page.
            </summary>
      <remarks>
            For instance, if a Windows account was used to create the page, expect a string 
            being returned looking like 'DOMAIN\User Name'.
            </remarks>
      <example>
            The following code example demonstrates the usage of <b>ChangedBy</b>.
            <code source="../CodeSamples/EPiServer/Core/PageDataSamples.aspx" region="ChangedBy" lang="aspnet" /></example>
    </member>
    <member name="P:EPiServer.Core.PageData.Saved">
      <summary>
            Gets the date and time when this page was last saved.
            </summary>
      <remarks>
            Saved is the sibling of <see cref="P:EPiServer.Core.PageData.Created" /> and is maintained by the EPiServer infrastructure. 
            This means that you have no control over them. 
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.EPiServer#Web#Routing#IRoutable#RouteSegment">
      <summary>
            Gets or sets the Route segment.
            </summary>
      <value>The Route segment.</value>
    </member>
    <member name="P:EPiServer.Core.PageData.EPiServer#Core#Transfer#IExportable#ShouldBeImplicitlyExported">
      <summary>
            Gets a value indicating whether this instance should be implicitly added to export package when referenced
            by some entity that is exported.
            </summary>
      <value>
        <c>True</c> if the instance should implicity be added to export package when referenced, otherwise <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.ShouldBeImplicitlyExported">
      <summary>
            Gets a value indicating whether this instance should be implicitly added to export package when referenced
            by some entity that is exported.
            </summary>
      <remarks>
            Default implementation returns false.
            </remarks>
      <value>
        <c>True</c> if the instance should implicity be added to export package when referenced, otherwise <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.IsModified">
      <summary>
            Gets or sets a value indicating whether this instance has been modified after loading.
            </summary>
      <remarks>
            The setter will only work to reset the modified state (that is, setting it to <c>false</c>).
            Avoid using the setter altogether and use ResetModified() instead.
            </remarks>
      <value>
        <c>True</c> if this instance has been modified, otherwise <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.EPiServer#Core#IModifiedTrackable#IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>True</c> if this instance has been modified, otherwise <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.PageData.EPiServer#Core#IModifiedTrackable#ResetModified">
      <summary>
            Resets the modified flag on all the properties in the <see cref="P:EPiServer.Core.ContentData.Property" /> collection.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageData.#ctor(EPiServer.Core.RawPage)">
      <summary>
            Creates an empty <b>PageData</b> object for the given <b>RawPage</b>.  
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.PageGuid">
      <summary>
            Gets or sets the unique <see cref="T:System.Guid" /> based identifier for the page. 
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageData.PageTypeID">
      <summary>
            Gets or sets the id of the <see cref="T:EPiServer.DataAbstraction.PageType" /> used to create this page.
            </summary>
      <remarks>
            PageTypeID is the same as column fkPageTypeID in the database table tblPage.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PageData.PageLanguages">
      <summary>
            Gets the available languages for the page.
            </summary>
      <value>The page languages.</value>
    </member>
    <member name="P:EPiServer.Core.PageData.LanguageID">
      <summary>
            Gets or sets the ID of the language branch of this page.
            </summary>
      <value>
            The language branch ID or an empty string if not set.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.LanguageBranch">
      <summary>
            Gets or sets the ID of the language branch of this page.
            </summary>
      <value>
            The language branch ID or null if not set.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.MasterLanguageBranch">
      <summary>
            Gets or sets the ID of the master language branch for this page.
            </summary>
      <value>
            The language branch ID or null if not set.
            </value>
    </member>
    <member name="P:EPiServer.Core.PageData.PageFolderID">
      <summary>
            Gets the identifier for the document folder associated with this page.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageData.PopulateDynamicProperties">
      <summary>
            This method is not used by the framework anymore and has been deprecated.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageData.ToRawPage">
      <summary>
            Returns the current instance converted to a RawPage object.
            </summary>
      <returns>A <b>RawPage</b>.</returns>
      <remarks>
            Used primarily by the DataFactory Web Service to transfer <b>PageData</b> 
            instances to web service clients.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.PageDataCollection">
      <summary>
            A collection of <b>PageData</b> objects.
            </summary>
      <remarks>
        <para>
            Control authors might need to fill this kind of collection from code. Mostly you'll 
            work on collections retrieved by a <b>GetChildren</b>(...) call or from a Web control. 
            </para>
        <para>
            The <b>GetChildren</b>(...) method defined on the <b>IPageSource</b> interface returns a 
            <b>PageDataCollection</b>. The <b>IPageSource</b> interface is 
            implemented by many classes like <b>PageBase</b> (and descendants), <b>DataFactory</b>, 
            <b>PageControlBase</b> (which most Web controls inherit from) and more.
            </para>
        <para>
            PageDataCollection is often used together with other EPiServer classes, see the following HowTo 
            articles which demonstrate some ways in which it can be used: 
            <a href="http://sdk.episerver.com/library/cms5/Developers%20Guide/How%20To/Search%20for%20pages%20created%20recently.htm">Search for pages created recently</a>
            and 
            <a href="http://sdk.episerver.com/library/cms5/Developers%20Guide/How%20To/Search%20for%20pages%20based%20on%20page%20type%20property.htm">Search for pages based on page type property.</a></para>
      </remarks>
      <example>
            The following code example demonstrates the usage of <b>PageDataCollection</b>.
            <code source="../CodeSamples/EPiServer/Core/PageDataCollectionSamples.cs" region="PageDataCollection1" /></example>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageDataCollection" /> class that is empty and has the default initial capacity.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageDataCollection" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the collection can initally store.</param>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.PageData})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageDataCollection" /> class that contains elements copied from the 
            specified collection and has sufficient capacity to accomodate the number of elements copied.
            </summary>
      <param name="collection">The page collection whose elements are copied to the new list.</param>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Find(EPiServer.Core.PageReference)">
      <summary>
            Find page reference in collection
            </summary>
      <param name="page">The reference to find</param>
      <returns>Returns -1 when reference not found</returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Find(EPiServer.Core.PageReference,System.String)">
      <summary>
            Find page reference in collection with a specific language branch
            </summary>
      <param name="page">The reference to find</param>
      <param name="languageBranch">The language branch to search for</param>
      <returns>Returns -1 when reference not found</returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Exists(EPiServer.Core.PageReference)">
      <summary>
            Check if page with reference exists in collection
            </summary>
      <param name="page">The reference to find</param>
      <returns>Returns <b>false</b> when reference not found</returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Exists(EPiServer.Core.PageReference,System.String)">
      <summary>
            Check if page with reference exists in collection
            </summary>
      <param name="page">The reference to find</param>
      <param name="languageBranch">The language branch to search for</param>
      <returns>Returns <b>false</b> when reference not found</returns>
    </member>
    <member name="P:EPiServer.Core.PageDataCollection.Item(System.Int32)">
      <summary>
            Access PageData objects using index
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Retrive enumerator
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Clear">
      <summary>
            Remove all items in list
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Insert(System.Int32,EPiServer.Core.PageData)">
      <summary>
            Insert new page at given position
            </summary>
      <param name="index">Index to insert page</param>
      <param name="page">Page to insert</param>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.RemoveAt(System.Int32)">
      <summary>
            Remove page from collection
            </summary>
      <param name="index">Remove at index</param>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Remove multiple pages from collection
            </summary>
      <param name="index">Start removing at index</param>
      <param name="count">Number of pages to remove</param>
    </member>
    <member name="P:EPiServer.Core.PageDataCollection.Count">
      <summary>
            Number of pages in collection
            </summary>
      <returns>Returns the number of pages in the collection.</returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Sort(System.Collections.Generic.IComparer{EPiServer.Core.PageData})">
      <summary>
            Sorts all the elements in the collection
            </summary>
      <param name="comparer">
      </param>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.ShallowCopy">
      <summary>
            Make a shallow copy of collection
            </summary>
      <returns>Copied collection</returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Copy">
      <summary>
            Make a deep copy of collection
            </summary>
      <returns>Copied collection</returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Add(System.Collections.Generic.IEnumerable{EPiServer.Core.PageData})">
      <summary>
            Add a range of pages from another collection.
            </summary>
      <param name="pages">The collection whos elements should be added to the end of the current instance.</param>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Add(EPiServer.Core.PageDataCollection)">
      <summary>
            Add a range of pages from another <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <param name="pages">The collection whos elements should be added to the end of the current instance.</param>
    </member>
    <member name="P:EPiServer.Core.PageDataCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the internal collection.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageDataCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access is synchronized (thread-safe).
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements to an <b>Array</b>, starting at a particular <b>Array</b> index.
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.CopyTo(EPiServer.Core.PageData[],System.Int32)">
      <summary>
            Copies the elements to an PageData Array, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional PageData Array that is the destination of the elements copied.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Add(EPiServer.Core.PageData)">
      <summary>
            Add new page to collection
            </summary>
      <param name="page">Page to add</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Contains(EPiServer.Core.PageData)">
      <summary>
            Determines whether an PageData is in the Collection. 
            </summary>
      <param name="item">The PageData to locate in the List. The value can be a null reference.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.PageDataCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the ICollection is read-only (defalut value is false).
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Remove(EPiServer.Core.PageData)">
      <summary>
            Removes the first occurrence of a specific page from the PageDataCollection. 
            </summary>
      <param name="page">The page to remove from the PageDataCollection.</param>
      <returns>true if page was successfully removed from the PageDataCollection; otherwise, false. This method also returns false if page is not found in the collection. </returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.GetEnumerator">
      <summary>
            Returns enumerator for this collection
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.IndexOf(EPiServer.Core.PageData)">
      <summary>
            Determines the index of a specific item in the <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <param name="item">The <see cref="T:EPiServer.Core.PageData" /> item to locate in the <see cref="T:EPiServer.Core.PageDataCollection" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Add(System.Object)">
      <summary>
            Adds an item, which must be of type <see cref="T:EPiServer.Core.PageData" />, to the <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:EPiServer.Core.PageDataCollection" />.</param>
      <returns>
            The position into which the new element was inserted.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Contains(System.Object)">
      <summary>
            Determines whether the <see cref="T:EPiServer.Core.PageDataCollection" /> contains a specific value.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:EPiServer.Core.PageDataCollection" />.</param>
      <returns>
            true if the <see cref="T:System.Object" /> is found in the <see cref="T:EPiServer.Core.PageDataCollection" />; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.IndexOf(System.Object)">
      <summary>
            Determines the index of a specific item in the <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:EPiServer.Core.PageDataCollection" />.</param>
      <returns>
            The index of <paramref name="value" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Insert(System.Int32,System.Object)">
      <summary>
            Inserts an item, which must be of type <see cref="T:EPiServer.Core.PageData" />, in the <see cref="T:EPiServer.Core.PageDataCollection" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:EPiServer.Core.PageData" /> instance to insert into the <see cref="T:EPiServer.Core.PageDataCollection" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:EPiServer.Core.PageDataCollection" />. </exception>
    </member>
    <member name="P:EPiServer.Core.PageDataCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the <see cref="T:EPiServer.Core.PageDataCollection" /> has a fixed size.
            </summary>
      <value>Always false for <see cref="T:EPiServer.Core.PageDataCollection" />.</value>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.Remove(System.Object)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:EPiServer.Core.PageDataCollection" />.</param>
    </member>
    <member name="P:EPiServer.Core.PageDataCollection.System#Collections#IList#Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.PageData" /> instance at the specified index.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.RawPage})">
      <summary>
            Create and copy PageData elements array of RawPage objects.
            </summary>
      <param name="rawPages">A collection of <see cref="T:EPiServer.Core.RawPage" /> objects that are used to populate the <see cref="T:EPiServer.Core.PageDataCollection" />.</param>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.#ctor(System.Collections.IEnumerable)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageDataCollection" /> class that contains elements copied from the 
            specified collection and has sufficient capacity to accomodate the number of elements copied.
            </summary>
      <remarks>
            Supports any <see cref="T:System.Collections.IEnumerable">enumerable</see> that contains <see cref="T:EPiServer.Core.PageData" /> or <see cref="T:EPiServer.Core.RawPage" /><para>
            Note that in the case of an <see cref="T:System.Collections.IEnumerable">enumerable</see> with <see cref="T:EPiServer.Core.PageData" /> instances, 
            this constructor will reference the same instance of the PageData objects as the original enumerable, 
            but for <see cref="T:EPiServer.Core.RawPage" /> instances it will create new PageData objects.
            </para></remarks>
    </member>
    <member name="M:EPiServer.Core.PageDataCollection.ToRawPageArray">
      <summary>
            Returns array of <see cref="T:EPiServer.Core.RawPage" /> elements
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.PagePublishedStatus">
      <summary>
            Determine the level of filtering that should be applied by the FilterPublish filter.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PagePublishedStatus.Ignore">
      <summary>
            Always include page, regardless of pending publish or publish dates. Useful for system
            level functions, but not applicable for user level listings.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PagePublishedStatus.PublishedIgnoreDates">
      <summary>
            Include page if it has been published, but ignore publish dates. Do not use unless you
            know what you are doing.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PagePublishedStatus.PublishedIgnoreStopPublish">
      <summary>
            Include page if it has been published and current time is past its start publish date. May
            be useful for news archives etc. where you want the information to be permanently visible.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PagePublishedStatus.Published">
      <summary>
            Include page if it has been published and current time is between start publish and stop publish.
            This is the normal case.
            </summary>
    </member>
    <member name="T:EPiServer.Core.PageReference">
      <summary>
            Holds references to pages in the EPiServer system.
            </summary>
      <remarks>
            Instead of using raw integer IDs, the ID is packaged in a <b>PageReference</b> structure. 
            A page can have several versions and even be located on another physical server. 
            This information is also stored inside the structure.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.PageReference.SelfReference">
      <summary>
            Returns a <see cref="T:EPiServer.Core.PageReference" /> that references the current page.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PageReference.EmptyReference">
      <summary>
            Returns an empty <see cref="T:EPiServer.Core.PageReference" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageReference.#ctor(EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageReference" /> class from a <see cref="T:EPiServer.Core.ContentReference" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageReference.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageReference" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageReference.#ctor(System.Int32)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.PageReference" /> with page id.
            </summary>
      <param name="pageID">The Page ID to set</param>
    </member>
    <member name="M:EPiServer.Core.PageReference.#ctor(System.Int32,System.Int32)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.PageReference" /> with page id and working version.
            </summary>
      <param name="pageID">The page id to set</param>
      <param name="workPageID">The work id to set</param>
    </member>
    <member name="M:EPiServer.Core.PageReference.#ctor(System.Int32,System.Boolean)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.PageReference" /> with page id and any available version. If no
            version is published the most recently saved will be loaded.
            </summary>
      <param name="pageID">The page id to set</param>
      <param name="anyVersion">This parameter is not used, see remarks</param>
    </member>
    <member name="M:EPiServer.Core.PageReference.#ctor(System.Int32,System.String)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.PageReference" /> with page id and remote site.
            </summary>
      <param name="pageID">The page id to set</param>
      <param name="remoteSite">The name of the remote site</param>
    </member>
    <member name="M:EPiServer.Core.PageReference.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.PageReference" /> with page id, working version and remote site.
            </summary>
      <param name="pageID">The page id to set</param>
      <param name="workPageID">The version to set</param>
      <param name="remoteSite">The name of the remote site</param>
    </member>
    <member name="M:EPiServer.Core.PageReference.#ctor(System.Int32,System.Int32,System.String,System.Boolean)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.PageReference" /> with page id, working version and remote site.
            </summary>
      <param name="pageID">The page id to set</param>
      <param name="workPageID">The version to set</param>
      <param name="remoteSite">The name of the remote site</param>
      <param name="anyVersion">This parameter is not used, see remarks</param>
    </member>
    <member name="M:EPiServer.Core.PageReference.#ctor(System.String)">
      <summary>
            Initialize a new <see cref="T:EPiServer.Core.PageReference" /> from a string in the format
                pageID[_workID[_remoteSite]] or -
            throws EPiServerException on invalid argument
            </summary>
      <param name="complexReference">The string containing page information</param>
      <exception cref="T:EPiServer.Core.EPiServerException">
            Thrown if the string cannot be parsed as a valid PageReference.
            </exception>
    </member>
    <member name="M:EPiServer.Core.PageReference.TryParse(System.String,EPiServer.Core.PageReference@)">
      <summary>
            Create a new <see cref="T:EPiServer.Core.PageReference" /> from a string in the format
                pageID[_workID[_remoteSite]] 
            </summary>
      <param name="complexReference">The string containing page information.</param>
      <param name="result">The PageReference created from the string.</param>
      <returns>True if parsing was successful.</returns>
    </member>
    <member name="M:EPiServer.Core.PageReference.Parse(System.String)">
      <summary>
            Parse and return a <see cref="T:EPiServer.Core.PageReference" /> from a string.
            </summary>
      <param name="s">The string, in the format  pageID[_workID[_remoteSite]].</param>
      <returns>The PageReference, or PageReference.EmptyReference if it's invalid</returns>
      <exception cref="T:EPiServer.Core.EPiServerException">If string is not parsable as a pagereference</exception>
    </member>
    <member name="M:EPiServer.Core.PageReference.ParseUrl(System.String)">
      <summary>
            Parse a url for <b>PageLink</b>. It is assumed that the url is root-relative,
            i.e. starts with a "/".
            </summary>
      <remarks>
            In order to successfully parse a FURL with <b>ParserUrl</b>, first convert the FURL to an
            internal url - use the <b>UrlRewriteProvider.ConvertToInternal</b> method.
            </remarks>
      <param name="url">Url to parse, assumed to start with "/"</param>
      <returns>A <b>PageReference</b> or <b>PageReference.EmptyReference</b> if it's not a valid reference</returns>
    </member>
    <member name="M:EPiServer.Core.PageReference.IsNullOrEmpty(EPiServer.Core.PageReference)">
      <summary>
            Determines whether the specified page link is null or empty.
            </summary>
      <param name="pageLink">The page link.</param>
      <returns>
        <c>true</c> if pege link is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PageReference.IsValue(EPiServer.Core.PageReference)">
      <summary>
            Determines whether the passed <see cref="T:EPiServer.Core.PageReference" /> is initiated with a value.
            </summary>
      <param name="pageLink">The <see cref="T:EPiServer.Core.PageReference" /> object to be checked.</param>
      <returns>
        <c>true</c> if the passed <see cref="T:EPiServer.Core.PageReference" /> is not <c>null</c> and does not equal <see cref="F:EPiServer.Core.PageReference.EmptyReference" /> 
            or <see cref="F:EPiServer.Core.PageReference.SelfReference" />; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PageReference.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.PageReference.CreateWritableClone">
      <summary>
            Create a copy of the current object instance that is writable.
            </summary>
      <returns>A new copy of the object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.RedirectPageReference">
      <summary>
            A page reference that indicates that a redirection should occour.
            </summary>
    </member>
    <member name="M:EPiServer.Core.RedirectPageReference.#ctor(EPiServer.Core.PageReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.RedirectPageReference" /> class.
            </summary>
      <param name="pageLink">The page link.</param>
    </member>
    <member name="T:EPiServer.Core.PageReferenceTypeHandler">
      <summary>
            Class that handles storage format of <see cref="T:EPiServer.Core.PageReference" /> towards Dynamic Data Store.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageReferenceTypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
      <summary>
            Returns an <see cref="T:EPiServer.Core.PageReference" /> instance from the database format.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="targetType">Type of the target.</param>
      <param name="ownerType">Type of the owner.</param>
      <returns>A <see cref="T:EPiServer.Core.PageReference" /> instance</returns>
    </member>
    <member name="M:EPiServer.Core.PageReferenceTypeHandler.MapToDatabaseType(System.Type)">
      <summary>
            Returns the database type.
            </summary>
      <param name="type">The type.</param>
      <returns>The type that is stored in database</returns>
    </member>
    <member name="M:EPiServer.Core.PageReferenceTypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
      <summary>
            Returns the propertyValue in the database format.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="ownerType">Type of the owner.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.PageShortcutType">
      <summary>
            Type of page link.
            </summary>
      <remarks>
            Determines how a link to a page is rendered as well as how the page behaves when it is loaded.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.PageShortcutType.Normal">
      <summary>
            A normal link. Links to the page will simply show the page itself.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PageShortcutType.Shortcut">
      <summary>
            The page points to a page different than the current, acting as an internal shortcut.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PageShortcutType.External">
      <summary>
            The page points to an external url, e.g http://world.episerver.com/
            </summary>
    </member>
    <member name="F:EPiServer.Core.PageShortcutType.Inactive">
      <summary>
            The page is inactive.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PageShortcutType.FetchData">
      <summary>
            The page fetches data from from another page for properties that are empty.
            </summary>
    </member>
    <member name="T:EPiServer.Core.PageTypeConverter">
      <summary>
            Converts page type for pages
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageTypeConverter.Convert(EPiServer.Core.PageReference,EPiServer.DataAbstraction.PageType,EPiServer.DataAbstraction.PageType,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Boolean,System.Boolean)">
      <summary>
            Convert a page to a new page type
            </summary>
      <param name="pageLink">The link to the page which will be conversion will start</param>
      <param name="fromPageType">The page type to convert from</param>
      <param name="toPageType">Type page type to convert to</param>
      <param name="propertyTypeMap">"from"-"to" mappings of properties
            , the mapped properties has
            to be on the same base form</param>
      <param name="recursive">if set to <c>true</c> the conversion will be performed for all subpages as well</param>
      <param name="isTest">if set to <c>true</c> the conversion will not actually be performed bur rather a test run to see effect will be performed</param>
      <returns>
      </returns>
    </member>
    <member name="E:EPiServer.Core.PageTypeConverter.PagesConverted">
      <summary>
            Raised when pages are converted from one pagetype to another.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageTypeConverter.Convert(EPiServer.Core.PageReference,EPiServer.DataAbstraction.PageType,EPiServer.DataAbstraction.PageType,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Boolean,System.Boolean,EPiServer.IContentRepository)">
      <summary>
            Convert a page to a new page type
            </summary>
      <param name="pageLink">The link to the page which will be conversion will start</param>
      <param name="fromPageType">The page type to convert from</param>
      <param name="toPageType">Type page type to convert to</param>
      <param name="propertyTypeMap">"from"-"to" mappings of properties
            , the mapped properties has
            to be on the same base form</param>
      <param name="recursive">if set to <c>true</c> the conversion will be performed for all subpages as well</param>
      <param name="isTest">if set to <c>true</c> the conversion will not actually be performed bur rather a test run to see effect will be performed</param>
      <param name="contentRepository">The <see cref="T:EPiServer.IContentRepository" /> instance to work with</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.PropertyBoolean">
      <summary>
            Property representing a Boolean value.
            </summary>
      <remarks>
            A boolean value can be either <c>false</c>, <c>true</c> or <c>null</c>. Default value is <c>null</c>.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyBoolean.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyBoolean" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyBoolean.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyBoolean" /> class.
            </summary>
      <param name="boolValue">The initial value of the property.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyBoolean.Boolean">
      <summary>
            Gets or sets the actual value for this property as a <see cref="T:System.Boolean" />.
            </summary>
      <value>The actual value for this property as a <see cref="T:System.Boolean" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyBoolean.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyBoolean.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
      <value>The value of the property.</value>
      <remarks>Value returns null if the property has no value defined.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyBoolean.Type">
      <summary>
            Property type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.
            </summary>
      <value>The type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyBoolean.Parse(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyBoolean" /> with the given value, ie reversed ToString().
            </summary>
      <param name="value">The string value to parse.</param>
      <returns>A a new instance of <see cref="T:EPiServer.Core.PropertyBoolean" /> with the given value.</returns>
      <remarks>Throws a <see cref="T:EPiServer.Core.InvalidPropertyValueException" /> if the value can not be parsed as a <see cref="T:System.Boolean" />.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyBoolean.ParseToObject(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyBoolean" /> with the given value, ie reversed ToString().
            </summary>
      <param name="value">The string value to parse.</param>
      <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyBoolean" /> with the given value.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertyBoolean.ParseToSelf(System.String)">
      <summary>
            Sets the value of the property from a string representation.
            </summary>
      <param name="value">The string value to parse.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyBoolean.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the property value.
            </summary>
      <value>The <see cref="T:System.Type" /> of the property value.</value>
    </member>
    <member name="T:EPiServer.Core.PropertyCategory">
      <summary>
            A property representing a category list.
            </summary>
      <remarks>
        <para>
            If you wish to change values of this class, you normally want to access the 
            <see cref="P:EPiServer.Core.PropertyCategory.Category" /> property. The <see cref="P:EPiServer.Core.PropertyCategory.Value" /> property will return a
            <see cref="T:EPiServer.Core.CategoryList" /> if it is not set to null. 
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyCategory" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.#ctor(EPiServer.Core.CategoryList)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyCategory" /> class.
            </summary>
      <param name="categories">The initial value.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyCategory.Category">
      <summary>
            The typed value accessor.
            </summary>
      <value>The value for the property as a <see cref="T:EPiServer.Core.CategoryList" />.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyCategory.IsModified">
      <summary>
            Check if property has been modified.
            </summary>
      <value>
        <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyCategory.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
      <value>The value of the property.</value>
      <remarks>Value returns null if the property has no value defined.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyCategory.Type">
      <summary>
            Get the <see cref="T:EPiServer.Core.PropertyDataType" /> for this property.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyCategory.IsNull">
      <summary>
            Check for null property (no value has been set).
            </summary>
      <value>
        <c>true</c> if this property is null; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.Parse(System.String)">
      <summary>
            Create a new <see cref="T:EPiServer.Core.PropertyCategory" /> from a string representation of categories.
            </summary>
      <param name="str">The string to create a PropertyCategory from.</param>
      <returns>The new PropertyCategory object.</returns>
      <remarks>The string should be in the form of a comma-separated string, i e "1,12,34".</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyCategory.CategoryNames">
      <summary>
            Gets or sets the categories as a string array containing the names of the categories.
            </summary>
      <value>The categories as a string array containing the names of the categories.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.ParseToObject(System.String)">
      <summary>
            Read property data from a string representation, ie reversed ToString().
            </summary>
      <param name="value">The string to parse.</param>
      <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyData" />.
            </returns>
      <remarks>The string should be in the form of a comma-separated string, i e "1,12,34".</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.ParseToSelf(System.String)">
      <summary>
            Sets the value of the property from a string representation.
            </summary>
      <param name="value">The string value to parse.</param>
      <remarks>The string should be in the form of a comma-separated string, i e "1,12,34".</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.CreateWritableClone">
      <summary>
            Creates a writable clone of the property.
            </summary>
      <returns>A writable copy of the property.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.GetAvailableCategories">
      <summary>
            Get the categories that are used to create the category list, which is done in CreateChildControls.
            By default all categories are fetched. Override this function to define your own category list.
            </summary>
      <returns>A category collection that implements IList. Internally the collection is created by
            EPiServer.DataAbstraction.Category.GetRoot().GetList().</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.Copy">
      <summary>
            Creates a copy of this object.
            </summary>
      <returns>A <see cref="T:EPiServer.Core.PropertyCategory" /> object.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.ToString">
      <summary>
             Gets the property's value as a string.
             </summary>
      <remarks>The string will be in the form of a comma-separated string, i e "1,12,34".</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.ToWebString">
      <summary>
            Get the web string representation of the property's value, on properties that do not
            use the editor this string will not contain any markup characters.
            </summary>
      <returns>
            A string where all html tags except those defined in 'EPiServer.Configuration.Settings.UISafeHtmlTags' have been encoded and therefore will appear in the text instead of tags.
            </returns>
    </member>
    <member name="P:EPiServer.Core.PropertyCategory.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the property value.
            </summary>
      <value>The <see cref="T:System.Type" /> of the property value.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyCategory.MakeReadOnly">
      <summary>
            Sets internal <see cref="T:EPiServer.Core.CategoryList" /> to read-only as well as calling the base class
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyCategory.LanguageBranch">
      <summary>Gets or sets the language branch that this object belongs to.</summary>
      <value>The language branch.</value>
      <remarks>
                This is a special case property that is only set/used when a PropertyCategory is used as a dynamic property. This property is needed because 
                the traditional "Parent" discovery method for language branch does not work in that case.
                
                This property also solves a "chicken-or-egg" problem that we used to have when we created a DynamicProperty object wrapping a PropertyCategory:
                1. We must pass in the PropertyCategory value the DynamicProperty constructor.
                2. We must know the language branch to load the value.
                3. Once created, the DynamicProperty object knows the language branch.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.PropertyContentReference">
      <summary>
            Property representing a link to a content item.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyContentReference" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyContentReference" /> class.
            </summary>
      <param name="contentID">The content ID.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyContentReference" /> class.
            </summary>
      <param name="contentID">The content ID.</param>
      <param name="providerName">Name of the provider.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyContentReference" /> class.
            </summary>
      <param name="contentID">The content ID.</param>
      <param name="workID">The work ID.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyContentReference" /> class.
            </summary>
      <param name="contentID">The content ID.</param>
      <param name="workID">The work ID.</param>
      <param name="providerName">Name of the provider.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.#ctor(EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyContentReference" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyContentReference" /> class.
            </summary>
      <param name="contentGuid">The page GUID.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.LinkMapper">
      <summary>
            Gets or sets the link mapper.
            </summary>
      <value>
            The link mapper.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.ContentLink">
      <summary>
            Gets or sets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.ID">
      <summary>
            Gets or sets the ID for this content reference.
            </summary>
      <value>
            The ID for this content reference.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.WorkID">
      <summary>
            Gets or sets the work ID for this content reference.
            </summary>
      <value>
            The work ID for this content reference.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.ProviderName">
      <summary>
            Gets or sets the provider name for this content reference.
            </summary>
      <value>The provider name for this content reference.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.GuidValue">
      <summary>
            Gets or sets the GUID value.
            </summary>
      <value>
            The GUID value.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.IsSelfReference">
      <summary>
            Gets a value indicating whether this instance is self reference.
            </summary>
      <value>
        <c>true</c> if this instance is self reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.Value">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.Type">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.PropertyValueType">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyContentReference.IsNull">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.Copy">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.ParseToObject(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.ParseToSelf(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.MakeReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.SetDefaultValue">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyContentReference.EnsureType(EPiServer.Core.ContentReference)">
      <summary>
            Ensure that the type is of correct type.
            </summary>
      <param name="contentLink">The instance.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> or inherited type.</returns>
    </member>
    <member name="T:EPiServer.Core.SetPropertyValueDelegate">
      <summary>
            A delegate that is responsible to set the actual value for a specific property type.
            </summary>
    </member>
    <member name="T:EPiServer.Core.PropertyData">
      <summary>
            Abstract class that all content properties inherit from.
            </summary>
      <remarks>
        <para>
            You can make your own properties and use them just as the built-in EPiServer 
            properties. This is done by using <see cref="T:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute" /> 
            to automatically register the property data type.
            </para>
      </remarks>
      <summary>
            Abstract class that all properties inherit from.
            </summary>
      <remarks>
        <para>
            You can make your own properties and use them just as the built-in EPiServer 
            properties. This is done by using <see cref="T:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute" /> 
            to automatically register the property data type.
            </para>
      </remarks>
      <example>
            This property type will automatically be registered with EPiServer.
            <code source="../CodeSamples/EPiServer/Core/PropertyDataSamples.cs" region="RegisterProp" /></example>
    </member>
    <member name="M:EPiServer.Core.PropertyData.#ctor">
      <summary>
            Initializes new instance
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyData.#ctor(System.Boolean)">
      <summary>
            Initializes new instance
            </summary>
      <param name="isNull">Defines if the property has a value or not. Used by inherited classes constructors.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyData.Locate">
      <summary>
            Gets the object used to resolve services part of the public API.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyData.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
      <value>The value of the property or null if the property has no value defined.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyData.Copy">
      <summary>
            Creates a copy of this object.
            </summary>
      <returns>A PropertyData object.</returns>
    </member>
    <member name="P:EPiServer.Core.PropertyData.Parent">
      <summary>
            Gets or sets the parent of this instance.
            </summary>
      <value>The parent.</value>
      <remarks>
            A PropertyData instance usually belongs to a <see cref="T:EPiServer.Core.PropertyDataCollection" /> which itself usually belongs to a <see cref="T:EPiServer.Core.PageData" />.
            This property is a back-link to the container PageDataCollection.
            <para>
            Note that null is a valid value for Parent.
            </para></remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyData.Name">
      <summary>
            The name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyData.Type">
      <summary>
            Property type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.
            </summary>
      <value>The type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyData.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the property value.
            </summary>
      <value>The <see cref="T:System.Type" /> of the property value.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyData.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyData.ParseToSelf(System.String)">
      <summary>
            Sets the value of the property from a string representation.
            </summary>
      <param name="value">The string value to parse.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyData.PropertyDefinitionID">
      <summary>
            Property definition for property, i e the content type specific identity of this property.
            </summary>
      <value>The identity (<see cref="T:System.Int32" />) of this property definition.</value>
      <remarks>This property is only valid if <b>IsMetaData</b> is false.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyData.IsMetaData">
      <summary>
            Test if this property represents metadata or content type information.
            </summary>
      <value>True if this property is meta data.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyData.IsPropertyData">
      <summary>
            If this property is a standard page property.
            </summary>
      <value>
        <c>true</c> if this instance is property data; otherwise, <c>false</c>.
            </value>
      <remarks>
            This simply determines that it is not a dynamic property and not meta data.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyData.IsDynamicProperty">
      <summary>
            Test if this property has been set by a dynamic property.
            </summary>
      <value>
        <c>true</c> if this property is a dynamic property; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertyData.IsLanguageSpecific">
      <summary>
            Test if this property is specific to a language in multilanguage configuration
            </summary>
      <value>
        <c>true</c> if this instance is language specific; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertyData.DisplayEditUI">
      <summary>
            If the property should display an edit user interface.
            </summary>
      <value>
        <c>true</c> if this property should display an edit user interface; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyData.OwnerTab">
      <summary>
            Which tab (i.e. edit mode group) the property belongs to.
            </summary>
      <remarks>
            Used to group properties for editing purposes. See <see cref="T:EPiServer.Core.EditTab" /> 
            for a list of predifined tabs. If this value is set to a non-existing tab the property 
            will not be rendered in EPiServers edit mode. 
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyData.FieldOrder">
      <summary>
            Which sort order is used when loading and displaying property data objects
            </summary>
      <remarks>
            Used to sort properties for editing purposes.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyData.IsModified">
      <summary>
            Check if property has been modified.
            </summary>
      <value>
        <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertyData.IsRequired">
      <summary>
            Check if the property value is required.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyData.IsNull">
      <summary>
            Check for null property (no value has been set).
            </summary>
      <value>
        <c>true</c> if this property is null; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyData.Modified">
      <summary>
            Make the property appear as modified.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyData.ModifiedNoCheck">
      <summary>
            Sets the property as modified without first checking if the property is set to read only.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyData.Clear">
      <summary>
            Clear value and set as null/undefined.
            </summary>
      <remarks>
            If the property is a required property, calling the <b>Clear</b> method will 
            throw a <b>RequiredPropertyValueException</b> exception. Check <b>IsRequired</b> to 
            see if this a required property.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyData.ClearNoCheck">
      <summary>
            Clears the value without first checking if the property is set to read only.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyData.SetPropertyValue(System.Object,EPiServer.Core.SetPropertyValueDelegate)">
      <summary>
            Sets the property value.
            </summary>
      <param name="value">The value to set. Null will clear the value.</param>
      <param name="doSet">The <see cref="T:EPiServer.Core.SetPropertyValueDelegate" /> that is responsible to set the value to the specific type.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyData.ToString">
      <summary>
            Get the property's values display string.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyData.ToString(System.Globalization.CultureInfo)">
      <summary>
            Get the property's values display string.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyData.ToWebString">
      <summary>
            Get the web string representation of the property's value, on properties that do not
            use the editor this string will not contain any markup characters.
            </summary>
      <returns>A string where all html tags except those defined in 'EPiServer.Configuration.Settings.UISafeHtmlTags' have been encoded and therefore will appear in the text instead of tags.</returns>
      <remarks>The character '&amp; will also be encoded to '&amp;amp;'.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyData.EncodeForWebString(System.String)">
      <summary>
            Encodes a string to be displayed on a web page.
            </summary>
      <param name="stringValue">The string value.</param>
      <returns>A string where all html tags except those defined in 'EPiServer.Configuration.Settings.UISafeHtmlTags' have been encoded and therefore will appear in the text instead of tags.</returns>
      <remarks>The character '&amp; will also be encoded to '&amp;amp;'.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyData.IsEmptyValue(System.Object)">
      <summary>
            Called to determine if current value is considered empty.
            </summary>
      <remarks>Default implementation returns true for <see cref="F:System.String.Empty" /></remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyData.BuildRegularExpression(System.String[])">
      <summary>
            Creates a regular expression to be able to restore an array of html tags.
            </summary>
      <param name="safeTags">The html tags that you want to appear as tags instead of encoded text.</param>
      <returns>A regular expression to be able to restore an array of html tags.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyData.InitializeData(EPiServer.Core.PropertyDataCollection)">
      <summary>
            Initialize any internal data. Called after loading the property's value but before setting it to read only.
            </summary>
      <param name="properties">Current property collection.</param>
      <remarks>Put any database communication in this method.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyData.SaveData(EPiServer.Core.PropertyDataCollection)">
      <summary>
            Return any internal data that will be stored to the database. "Serialize".
            </summary>
      <param name="properties">Current property collection.</param>
      <returns>The "serializable" value of the property.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyData.LoadData(System.Object)">
      <summary>
            Sets the internal representation from what is stored in the database. "Deserialize".
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyData.QualifyAsNullString(System.String)">
      <summary>
            Help method to test if a string should be considered as a null value.
            </summary>
      <param name="stringToCheck">The string to check.</param>
      <remarks>Same as String.IsNullOrEmpty.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyData.Translate(System.String)">
      <summary>
            Translate the given key.
            </summary>
      <param name="key">The string to translate.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyData.MakeReadOnly">
      <summary>
            Convert this property to ReadOnly
            </summary>
      <remarks>
            Implementors should override this method when exposing complex objects that should be read-only as well.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyData.IsReadOnly">
      <summary>
            Gets and sets the read-only property.
            </summary>
      <value>
        <c>true</c> if this property is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.PropertyData.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates writable clone of this object.
            </summary>
      <returns>Writable clone object.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyData.CreateWritableClone">
      <summary>
            Creates a writable clone of the property.
            </summary>
      <returns>A writable copy of the property.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyData.ThrowIfReadOnly">
      <summary>
            Checks if the property is read-only
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyData.ToRawString">
      <summary>
            Gets the string representation of the "raw" data as it is represented externally in the database
            and in export packages.
            </summary>
      <returns>An external string representation of the property value.</returns>
      <remarks>
            The internal data format is an storage detail and is not guaranteed to follow semantic versioning.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyData.ToRawProperty">
      <summary>
            Converts the current instance to a raw property.
            </summary>
      <returns>The initialized <see cref="T:EPiServer.Core.RawProperty" />.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyData.CreatePropertyDataObject(EPiServer.Core.RawProperty)">
      <summary>
            Creates a <see cref="T:EPiServer.Core.PropertyData" /> object from a <see cref="T:EPiServer.Core.RawProperty" />.
            </summary>
      <param name="rawProp">The source to create the new property from.</param>
      <returns>A new <see cref="T:EPiServer.Core.PropertyData" /> object.</returns>
    </member>
    <member name="T:EPiServer.Core.PropertyData.TranslateUri">
      <summary>
            Wrapper for URI string.
            </summary>
      <param name="url">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.PropertyData.PropertyDataFactory">
      <summary>
            This property should only be used in obsoleted methods.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyData.PageDefinitionID">
      <summary>
            Property definition for property, i e the page type specific identity of this property.
            </summary>
      <value>The identity (<see cref="T:System.Int32" />) of this property definition.</value>
      <remarks>This property is only valid if <b>IsMetaData</b> is false.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertyData.CreatePropertyDataObject(EPiServer.Core.PropertyDataType)">
      <summary>
            Create the default <see cref="T:EPiServer.Core.PropertyData" /> object for given base type.
            </summary>
      <param name="propType">The <see cref="T:EPiServer.Core.PropertyDataType" /> that you want to create a property for.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertyData.CreatePropertyDataObject(System.String,System.String)">
      <summary>
            Creates the property data object from the given typename and assembly, if the type is not found in the assembly fallback on
            a type matching the typeName in any loaded assembly.
            </summary>
      <param name="assemblyName">Name of the assembly.</param>
      <param name="typeName">Name of the type.</param>
      <returns>A loaded PropertyData object.</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.PropertyData.SettingsContainer">
      <summary>
            Gets the settings container which have all settings objects stored for this property.
            </summary>
      <value>The settings container.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyData.SettingsID">
      <summary>
            Gets or sets the settings ID used to load the settings container.
            </summary>
      <value>The settings ID.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyData.LocalizationService">
      <summary>
            Gets or sets the <see cref="P:EPiServer.Core.PropertyData.LocalizationService" /> used by the current <see cref="T:EPiServer.Core.PropertyData" /> instance
            to retrieve localized texts.
            </summary>
      <value>
            The current <see cref="P:EPiServer.Core.PropertyData.LocalizationService" /> used internally.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertyData.UseLegacyValueType">
      <summary>
            For internal use, do not use.
            Sets whether some property classes should behave in a legacy way when returning their value.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyData.ParseToObject(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyData" /> with the given value, ie reversed ToString().
            </summary>
      <param name="value">The string value to parse.</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.PropertyData" /> with the given value.</returns>
    </member>
    <member name="T:EPiServer.Core.PropertyDataCollection">
      <summary>
            Collection of PropertyData objects.
            </summary>
      <remarks>
        <b>Notes to inheritors</b> If you override the indexers of this class, make sure that the Count property and Exists method match your implementation since they are used to indicate the boundaries of the collection.
            </remarks>
      <summary>
            Collection of PropertyData objects.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyDataCollection" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyDataCollection" /> class.
            </summary>
      <param name="capacity">The initial capacity of the collection.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyDataCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:PropertyDataCollection" />.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyDataCollection.OwnerLink">
      <summary>
            Gets or sets the link to the <see cref="T:EPiServer.Core.IContent" /> instance that owns the collection
            </summary>
      <value>The owner link.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyDataCollection.LanguageBranch">
      <summary>
            Gets or sets the language of the <see cref="T:EPiServer.Core.IContent" /> instance that owns the collection
            </summary>
      <value>The owner link.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyDataCollection.Item(System.Int32)">
      <summary>
            Gets or sets a property by index.
            </summary>
      <remarks>
            When overridden in a derived class, make sure that the Count implementation is syncronized with the override of this method.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyDataCollection.Item(System.String)">
      <summary>
            Gets or sets a property by name.
            </summary>
      <remarks>
            If property object does not have its Name specified it will be set when added to the collection. You cannot add a property with a different name than the collection name.
            When overridden in a derived class, make sure that the Exists implementation is syncronized with the override of this method.
            <para>
            Note! If IsReadOnly is true the indexer getter will use the GetHandler delegate to fetch data. It may return objects not present in the property collection (typically dynamic properties and fetch-data-from).
            </para></remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyDataCollection.Keys">
      <summary>
            Gets a read-only collection of all the property names that is currently in the <see cref="T:PropertyDataCollection" />.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyDataCollection.IsDataInitialized">
      <summary>
            Gets or sets a value indicating whether InitializeData has been called for this instance.
            </summary>
      <value>
        <c>true</c> if this instance has been initialized; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.Get(System.String)">
      <summary>
            Gets the property specified by name.
            </summary>
      <param name="name">The name of the property.</param>
      <returns>The corresponding PropertyData object.</returns>
      <remarks>
            This method will only return data actually stored in the collection instance. The default indexer
            may return data not in the collection (typically dynamic properties and fetch-data-from).
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.TryGetPropertyValue``1(System.String,``0@)">
      <summary>
            Attempts to get the value of a property by the specified name and type. 
            </summary>
      <param name="name">The name of the property to retrieve.</param>
      <param name="value">The value of the property if the retrieval succeeded. If the retrieval failed it will be set to the default value of the specified type.</param>
      <typeparam name="TPropertyValue">The value type of the named property.</typeparam>
      <returns>
        <c>true</c> if the retrieval succeeded, otherwise false.</returns>
      <remarks>
            The property with the specified <paramref name="name" /> must exist, have a value type that matches or inherits <typeparamref name="TPropertyValue" />
            and have a value set for the attempt to be considered successful.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.GetPropertyValue``1(System.String)">
      <summary>
            Gets the value of a property by the specified name and type.
            </summary>
      <param name="name">The name of the property to retrieve.</param>
      <typeparam name="TPropertyValue">The value type of the named property.</typeparam>
      <exception cref="T:System.InvalidOperationException">Thrown when a property with the specified name or type could not be found.</exception>
      <returns>The value of the specified property.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.Set(System.String,EPiServer.Core.PropertyData)">
      <summary>
            Sets the property with the specified name.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The PropertyData object to set.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.Add(EPiServer.Core.PropertyData)">
      <summary>
            Add new property to the collection.
            </summary>
      <param name="value">The <see cref="T:EPiServer.Core.PropertyData" /> to add</param>
      <remarks>
            Uses the Name property from ProperyData as a key when adding PropertyData to the collection. Will fail if the key already exists.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.Add(System.String,EPiServer.Core.PropertyData)">
      <summary>
            Adds a new property.
            </summary>
      <param name="name">Name of property</param>
      <param name="value">PropertyData to add</param>
      <remarks>Will fail if the key already exists.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.Clear">
      <summary>
            Removes all items from the <see cref="T:PropertyDataCollection" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.Remove(System.String)">
      <summary>
            Removes the item with the specified name from the <see cref="T:PropertyDataCollection" />.
            </summary>
      <param name="name">The name of the property to remove.</param>
      <returns>
        <c>true</c> if a property with the provided name was found and it was removed; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the property at the specified location from the <see cref="T:PropertyDataCollection" />.
            </summary>
      <param name="index">The index of the property to remove.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.Contains(System.String)">
      <summary>
            Determines whether the <see cref="T:PropertyDataCollection" /> contains a property with the specified name.
            </summary>
      <param name="name">The name of the property to check for.</param>
      <returns>
        <c>true</c> if the property exists in the collection; otherwise <c>false</c>.</returns>
      <remarks>
            This method will only check properties actually stored in the collection instance.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.InitializeData">
      <summary>
            Used by classes derived from PropertyData to initialize themselves with additional
            information.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>A PropertyDataCollection.</returns>
      <remarks>
            This method returns a deep copy of the collection.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.ShallowCopy">
      <summary>
            Copies this instance.
            </summary>
      <returns>A PropertyDataCollection.</returns>
      <remarks>
            This method returns a shallow copy of the collection. I e the PropertyDataCollection returned is
            a new object, but the PropertyData objects in the collection are the same in the old and new
            PropertyDataCollection.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection of PropertyData objects.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator{EPiServer.Core.PropertyData}"></see> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.MakeReadOnly">
      <summary>
            Change the object instance into a read-only object.
            </summary>
      <remarks>
            After calling this method, any attempt to change the object instance or any contained object
            will generate a <see cref="T:System.NotSupportedException" />. I e the semantics is "deep read-only".
            <para>
            Note! After setting an object to read-only it is not possible to revert back to read-write mode.
            You will have to call the CreateWritableClone method to get a copy that can be modified.
            </para></remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyDataCollection.IsReadOnly">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance is read-only.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> instance is read-only; otherwise, false.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.CreateWritableClone">
      <summary>
            Create a copy of the current object instance that is writable.
            </summary>
      <returns>A new copy of the object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.ThrowIfReadOnly">
      <summary>
            Throws an <see cref="T:System.NotSupportedException" /> if the collection is set to read only.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.AddNoCheck(EPiServer.Core.PropertyData)">
      <summary>
            Use for performance if no check for existing property is needed
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.Merge(EPiServer.Core.PropertyDataCollection,EPiServer.Core.PropertyDataCollection)">
      <summary>
            Merge two collection and keeping the correct fieldorder of the properties
            </summary>
      <param name="prop1">First collection</param>
      <param name="prop2">Second collection</param>
      <returns>A new <see cref="T:EPiServer.Core.PropertyDataCollection" /> with all the properties from both collections.</returns>
    </member>
    <member name="P:EPiServer.Core.PropertyDataCollection.GetHandler">
      <summary>
            Gets or sets the handler for this property
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.#ctor(System.Collections.Generic.ICollection{EPiServer.Core.RawProperty})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyDataCollection" /> class.
            </summary>
      <param name="properties">The properties.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyDataCollection.ToRawPropertyArray">
      <summary>
            Convert the collection to an array of RawProperty objects.
            </summary>
      <returns>A RawProperty array.</returns>
    </member>
    <member name="T:EPiServer.Core.PropertyDataExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.Core.PropertyData" /></summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataExtensions.TranslateDisplayName(EPiServer.Core.PropertyData)">
      <summary>
            Translates the display name to the current language.
            </summary>
      <returns>The translated display name.</returns>
      <remarks>If no translation is found the EditCaption defined in the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> will be used.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDataExtensions.TranslateDescription(EPiServer.Core.PropertyData)">
      <summary>
            Translates the description to the current language.
            </summary>
      <returns>The translated description</returns>
      <remarks>If no translation is found the help text defined in the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> will be used.</remarks>
    </member>
    <member name="T:EPiServer.Core.PropertyDataType">
      <summary>
            Enumeration that defines the different basic types of properties.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.Boolean">
      <summary>
            True or false.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.Number">
      <summary>
            An integer.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.FloatNumber">
      <summary>
            A double.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.PageType">
      <summary>
            A page type.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.PageReference">
      <summary>
            A link to a page.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.Date">
      <summary>
            A datetime value.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.String">
      <summary>
            A string up to 255 characters.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.LongString">
      <summary>
            A string character of non-specified length.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.Category">
      <summary>
            A selection of categories.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.LinkCollection">
      <summary>
            A collection of links.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.ContentReference">
      <summary>
            A link to a content item.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.Block">
      <summary>
            A data type that references a block definition.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PropertyDataType.Json">
      <summary>
            A data type that is stored as a JSON serialized string.
            </summary>
    </member>
    <member name="T:EPiServer.Core.PropertyDate">
      <summary>
            Property representing a <see cref="T:System.DateTime" /> value.
            </summary>
      <remarks>
            This class will render a date selector when put in edit mode using the 
            EPiServer.Web.WebControls.Property webcontrol. 
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyDate.MinValue">
      <summary>
            Gets the lowest value that can be saved.
            </summary>
      <value>The lowest value that can be saved.</value>
      <remarks>The lowest value is currently 1753-01-01.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyDate.MaxValue">
      <summary>
            Gets the highest value that can be saved.
            </summary>
      <value>The highest value that can be saved.</value>
      <remarks>The highest value is currently 9999-12-31.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDate.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyDate" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDate.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyDate" /> class.
            </summary>
      <param name="date">The initial value.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyDate.Date">
      <summary>
            Gets or sets the value as a nullable <see cref="T:System.DateTime" />.
            </summary>
      <value>The value as a nullable <see cref="T:System.DateTime" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyDate.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyDate.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
      <value>The value of the property.</value>
      <remarks>Value returns null if the property has no value defined.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyDate.Type">
      <summary>
            Property type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.
            </summary>
      <value>The type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyDate.Parse(System.String)">
      <summary>
            Creates a <see cref="T:EPiServer.Core.PropertyDate" /> from a string. 
            </summary>
      <param name="value">The string to create a <see cref="T:EPiServer.Core.PropertyDate" /> from.</param>
      <returns>A <see cref="T:EPiServer.Core.PropertyDate" />.</returns>
      <remarks>
            If the string is null or Empty an empty <see cref="T:EPiServer.Core.PropertyDate" /> is returned. If the string cannot 
            be parsed as a <see cref="T:System.DateTime" /> an <see cref="T:EPiServer.Core.InvalidPropertyValueException" /> is thrown. 
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDate.ParseToObject(System.String)">
      <summary>
            A wrapper for <see cref="T:System.String" /> to return a generic <see cref="T:EPiServer.Core.PropertyData" /> object. 
            </summary>
      <param name="value">The string to create a <see cref="T:EPiServer.Core.PropertyDate" /> from.</param>
      <returns>A <see cref="T:EPiServer.Core.PropertyDate" />.</returns>
      <remarks>
            If the string is null or Empty an empty <see cref="T:EPiServer.Core.PropertyDate" /> is returned. If the string cannot 
            be parsed as a <see cref="T:System.DateTime" /> an <see cref="T:EPiServer.Core.InvalidPropertyValueException" /> is thrown. 
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDate.ParseToSelf(System.String)">
      <summary>
            Sets the value of the property to the parsed value. 
            </summary>
      <param name="value">The string to create a <see cref="T:EPiServer.Core.PropertyDate" /> from.</param>
      <returns>A <see cref="T:EPiServer.Core.PropertyDate" />.</returns>
      <remarks>
            If the string is null or Empty an empty <see cref="T:EPiServer.Core.PropertyDate" /> is returned. If the string cannot 
            be parsed as a <see cref="T:System.DateTime" /> an <see cref="T:EPiServer.Core.InvalidPropertyValueException" /> is thrown. 
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyDate.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the property value.
            </summary>
      <value>The <see cref="T:System.Type" /> of the property value.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyDate.IsValidDate(System.DateTime)">
      <summary>
            Determines whether [is valid date] [the specified date].
            </summary>
      <param name="date">The date.</param>
      <returns>
        <c>true</c> if [is valid date] [the specified date]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Core.PropertyFloatNumber">
      <summary>
            A property representing a floating point numeric value.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyFloatNumber.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyFloatNumber" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyFloatNumber.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyFloatNumber" /> class.
            </summary>
      <param name="numberValue">The number value.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyFloatNumber.FloatNumber">
      <summary>
            Get or sets the value of the property typed as a <see cref="T:System.Double" />.
            </summary>
      <value>The value of the property typed as a <see cref="T:System.Double" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyFloatNumber.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyFloatNumber.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
      <value>The value of the property.</value>
      <remarks>Value returns null if the property has no value defined.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyFloatNumber.Type">
      <summary>
            Get the data type for this property.
            </summary>
      <value>Returns <see cref="F:EPiServer.Core.PropertyDataType.FloatNumber" />.</value>
      <remarks>
            The recommended practice is to use typeof() constructs instead of relying on this property.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyFloatNumber.Parse(System.String)">
      <summary>
            Create a new instance of <see cref="T:EPiServer.Core.PropertyFloatNumber" /> from a string.
            </summary>
      <param name="value">The string to create a <see cref="T:EPiServer.Core.PropertyFloatNumber" /> from.</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.PropertyFloatNumber" />.</returns>
      <remarks>
            If the string is null or Empty an empty <see cref="T:EPiServer.Core.PropertyFloatNumber" /> is returned. If the string cannot be
            parsed as a floating point number an <see cref="T:EPiServer.Core.InvalidPropertyValueException" /> is thrown.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyFloatNumber.ParseToObject(System.String)">
      <summary>
            A wrapper for <see cref="M:EPiServer.Core.PropertyFloatNumber.Parse(System.String)" /> to return a generic PropertyData object.
            </summary>
      <param name="value">The value for the new <see cref="T:EPiServer.Core.PropertyFloatNumber" />.</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.PropertyFloatNumber" />.</returns>
      <remarks>
            If the string is null or Empty an empty <see cref="T:EPiServer.Core.PropertyFloatNumber" /> is returned. If the string cannot be
            parsed as a floating point number an <see cref="T:EPiServer.Core.InvalidPropertyValueException" /> is thrown.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyFloatNumber.ParseToSelf(System.String)">
      <summary>
            Replace the internal floating point number with the parsed value.
            </summary>
      <param name="value">The string to parse into this object.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyFloatNumber.ToString">
      <summary>
            Get the property's display string.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyFloatNumber.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the property value.
            </summary>
      <value>The <see cref="T:System.Type" /> of the property value.</value>
    </member>
    <member name="T:EPiServer.Core.GetPropertyDelegate">
      <summary>
            The delegate that will be used when fetching properties from a <see cref="T:EPiServer.Core.PropertyDataCollection" />.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="properties">The <see cref="T:EPiServer.Core.PropertyDataCollection" />.</param>
      <returns>The property with the given name from the <see cref="T:EPiServer.Core.PropertyDataCollection" />.</returns>
      <remarks>It's possible to write your own <see cref="T:EPiServer.Core.GetPropertyDelegate" /> and specify that is should be used
            by setting the GetHandler property of the <see cref="T:EPiServer.Core.PropertyDataCollection" />.</remarks>
    </member>
    <member name="T:EPiServer.Core.PropertyGetHandler">
      <summary>
            A class that has the functionality that is used when getting a property for a page.
            This is the logic that is used to enable the funtion fetch data from other pages (if fetch data from is specified).
            It's also responsible to fetch dynamic properties.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyGetHandler.SimplePropertyHandler(System.String,EPiServer.Core.PropertyDataCollection)">
      <summary>
            A simple property get handler that only looks in the <see cref="T:EPiServer.Core.PropertyDataCollection" />.
            </summary>
      <param name="name">The name of the property that you want to fetch.</param>
      <param name="properties">The <see cref="T:EPiServer.Core.PropertyDataCollection" />.</param>
      <returns>The property with the given name from the <see cref="T:EPiServer.Core.PropertyDataCollection" />.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyGetHandler.DefaultPropertyHandler(System.String,EPiServer.Core.PropertyDataCollection)">
      <summary>
            The default property get handler.
            </summary>
      <param name="name">The name of the property that you want to fetch.</param>
      <param name="properties">The <see cref="T:EPiServer.Core.PropertyDataCollection" /> that should be looked in first.</param>
      <returns>The property with the given name.</returns>
      <remarks>The property will be searched for in the following order: The <see cref="T:EPiServer.Core.PropertyDataCollection" />, fetch data from, dynamic properties.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyGetHandler.PropertyHandlerWithDynamicProperties(System.String,EPiServer.Core.PropertyDataCollection)">
      <summary>
            The default property get handler.
            </summary>
      <param name="name">The name of the property that you want to fetch.</param>
      <param name="properties">The <see cref="T:EPiServer.Core.PropertyDataCollection" /> that should be looked in first.</param>
      <returns>The property with the given name.</returns>
      <remarks>The property will be searched for in the following order: The <see cref="T:EPiServer.Core.PropertyDataCollection" />, fetch data from, dynamic properties.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyGetHandler.FetchDataFrom(System.String,EPiServer.Core.PropertyDataCollection)">
      <summary>
            Used to fetch properties from another page if this has been defined.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="properties">The <see cref="T:EPiServer.Core.PropertyDataCollection" />.</param>
      <returns>The <see cref="T:EPiServer.Core.PropertyData" /> from the fetch data page.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyGetHandler.GetPropertyFromPage(EPiServer.Core.ContentReference,System.String,System.String,EPiServer.IContentRepository)">
      <summary>
            Get property with a specific name from a page.
            </summary>
      <param name="fetchPageLink">Page to get the property from</param>
      <param name="languageBranch">the lagnuage to use. String.Empty or null will get the page without language</param>
      <param name="propertyName">The name of the property to get</param>
      <param name="contentRepository">The page repository.</param>
      <returns>The propertydata of the property</returns>
    </member>
    <member name="T:EPiServer.Core.PropertyJson">
      <summary>
            Base class used for properties of any custom type intended to be 
            persisted as a serialized object.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyJson.Type">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Core.DefaultPropertyJson">
      <summary>
            Property used as default instance for properties with type <see cref="F:EPiServer.Core.PropertyDataType.Json" />.
            This is needed to load properties if a previous property type has been removed and for 
            converting default value strings(!). 
            </summary>
    </member>
    <member name="T:EPiServer.Core.PropertyList">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.PropertyList`1">
      <summary>
            Base class intended to be used for list properties with custom item types. 
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyList`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyList`1" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyList`1" /> class with the provided list.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyList`1.Value">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyList`1.IsNull">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyList`1.PropertyValueType">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyList`1.IsModified">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyList`1.List">
      <summary>
            Gets or sets the list value of this property.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyList`1.HasLazyValue">
      <summary>
            Gets a value indicating if an existing value has been loaded. 
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyList`1.StringRepresentationSeparator">
      <summary>
            Gets the separator char that should be used when creating the string representation
            of this list.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyList`1.MakeReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyList`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyList`1.ParseToSelf(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyList`1.CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyList`1.Copy">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyList`1.SetDefaultValue">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyList`1.ParseItem(System.String)">
      <summary>
            Parses a string into an item of the list item type <typeparamref name="T" />. String is checked for null or empty values before called.
            </summary>
      <param name="value">The string value that should be parsed.</param>
      <returns>
      </returns>
      <remarks>
            This method should mirror the output of the ToString method of the type. Used for default value handling.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyList`1.ItemComparer">
      <summary>
            Gets the comparer that should be used to verify if items in the list unchanged after list has been altered.
            Replace if specific comparison is needed.
            </summary>
    </member>
    <member name="T:EPiServer.Core.PropertyLongString">
      <summary>
            A property representing a string value of undetermined length.
            </summary>
      <summary>
            A property representing a string value of undetermined length.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyLongString" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyLongString" /> class.
            </summary>
      <param name="value">The value for the new <see cref="T:EPiServer.Core.PropertyLongString" />.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.IsEmptyValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyLongString.Value">
      <summary>
            The value of the property.
            </summary>
      <value>The value of the property.</value>
      <remarks>Value returns null if the property has no value defined.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyLongString.IsNull">
      <summary>
            Check for null property (no value has been set).
            </summary>
      <value>
        <c>true</c> if this property is null; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyLongString.Type">
      <summary>
            Property type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.
            </summary>
      <value>The type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyLongString.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> for this property.
            </summary>
      <value>The <see cref="T:System.Type" /> of the property value.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyLongString.HasLazyValue">
      <summary>
            Gets a value indicating if an existing value has been loaded. 
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.Parse(System.String)">
      <summary>
            Create a new <see cref="T:EPiServer.Core.PropertyLongString" /> with the value passed to the method.
            </summary>
      <param name="value">The value for the new <see cref="T:EPiServer.Core.PropertyLongString" />.</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.PropertyLongString" /> with the value passed to the method.</returns>
      <remarks>As <see cref="T:EPiServer.Core.PropertyLongString" /> stores its value as a string no parsing is necessary.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.ParseToObject(System.String)">
      <summary>
            Create a new <see cref="T:EPiServer.Core.PropertyLongString" /> with the value passed to the method.
            </summary>
      <param name="value">The value for the new <see cref="T:EPiServer.Core.PropertyLongString" />.</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.PropertyLongString" /> with the value passed to the method.</returns>
      <remarks>As <see cref="T:EPiServer.Core.PropertyLongString" /> stores its value as a string no parsing is necessary.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.ParseToSelf(System.String)">
      <summary>
             Parses a string and assigns it to the value of this instance.
            </summary>
      <param name="value">The new value for the property.</param>
      <remarks>As <see cref="T:EPiServer.Core.PropertyLongString" /> stores its value as a string no parsing is necessary.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyLongString.LongString">
      <summary>
            Gets or sets the value of the property typed as a <see cref="T:System.String" />.
            </summary>
      <value>The value of the property typed as a <see cref="T:System.String" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.InitializeLazyValue``1(``0@,System.Func{System.Object,``0})">
      <summary>
            Retrieves that lazy value and clears the <see cref="P:EPiServer.Core.PropertyLongString.HasLazyValue" /> flag.
            </summary>
      <param name="reference">A reference to the field that will store the final value</param>
      <param name="init">An optional initialization method (for example if the lazy value does not match the type of the local field)</param>
      <returns>
        <c>True</c> if the reference was changed</returns>
      <remarks>
        <para>This method should only be used when a deriving class wish to store the value into a local field. The <see cref="P:EPiServer.Core.PropertyLongString.LongString" /> property must be overridden in this scenario
            to avoid the <see cref="T:EPiServer.Core.PropertyLongString" /> also reads the lazy value.</para>
        <para>Be aware that the factory method may be called multiple times in a threading scenario but the reference will only be assigned by the elected winner.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.AssignValueFactory(System.Func{System.Object})">
      <summary>
            Assigns a callback method to load a lazy load value.
            </summary>
      <param name="valueFactory">The callback</param>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.EPiServer#Core#Internal#ILazyProperty#AssignValueFactory(System.Func{System.Object})">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyLongString.PageLink">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.PageReference" /> to the current page.
            </summary>
      <value>The <see cref="T:EPiServer.Core.PageReference" /> to the current page.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyLongString.FolderID">
      <summary>
            Gets the folder ID for the current page.
            </summary>
      <value>The folder ID for the current page.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyLongString.UseLongStringLegacyControl">
      <summary>
            Gets or sets a value indicating use of long string legacy control "EPiServer.Web.PropertyControls.PropertyLongStringControl".
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.GetDelayedLoadedString(System.Boolean)">
      <summary>
            Gets the delayed loaded string.
            </summary>
      <param name="storeLocally">if set to <c>true</c> store the fetched value on this instance so that it does not have to be loaded again.</param>
      <returns>The delayed loaded string.</returns>
      <remarks>This is used to avoid loading lange string properties on the initial loading of the page.
            Instead the value is loaded the first time it is accessed.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyLongString.ReadAdditionalDatabaseInformation(System.Data.IDataRecord)">
      <summary>
            Reads additional database information from the provided <see cref="T:System.Data.IDataRecord" />.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyLongString.IsLongStringLoaded">
      <summary>
            Checks if the longstring has been loaded.
            </summary>
      <value>
        <c>true</c> if the longstring has been loaded.; otherwise, <c>false</c>.
            </value>
      <remarks>If delayed loading is activated for long strings the actual value for the property might not be 
            loaded at the same time as the rest of the data for the page.</remarks>
    </member>
    <member name="T:EPiServer.Core.PropertyMultipleValue">
      <summary>
            Property that stores multiple values in a comma delimited string.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyMultipleValue.IsValueActive(System.String)">
      <summary>
            Determines whether the specified value is active for the property.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <c>true</c> if the specified value is active for the property.; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.Core.PropertyMultipleValue.MaxLength">
      <summary>
            Gets or sets the max length of the string.
            </summary>
      <value>The max length of the string.</value>
      <remarks>Default value is 450.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyMultipleValue.String">
      <summary>
            Get or sets the value as a comma delimited string.
            </summary>
      <value>The value as a comma delimited string.</value>
      <example>A valid value can look like this: "value1,value2,value9".</example>
    </member>
    <member name="T:EPiServer.Core.PropertyNumber">
      <summary>
            Property representing a numeric value.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyNumber.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyNumber" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyNumber.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyNumber" /> class.
            </summary>
      <param name="numberValue">The number value.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyNumber.Number">
      <summary>
            Gets or sets the value of the property as an <see cref="T:System.Int32" />.
            </summary>
      <value>The value of the property as an <see cref="T:System.Int32" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyNumber.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyNumber.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
      <value>The value of the property.</value>
      <remarks>Value returns null if the property has no value defined.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyNumber.Type">
      <summary>
            Gets the property type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.
            </summary>
      <value>The PropertyDataType as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyNumber.Parse(System.String)">
      <summary>
            Parses the specified string.
            </summary>
      <param name="str">The string to parse.</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.PropertyNumber" /> with the value of the string parameter.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyNumber.ParseToObject(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyNumber" /> with the given value, ie reversed ToString().
            </summary>
      <param name="value">The string value to parse.</param>
      <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyNumber" /> with the given value.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertyNumber.ParseToSelf(System.String)">
      <summary>
            Sets the value of the property from a string representation.
            </summary>
      <param name="value">The string value to parse.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyNumber.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the property value.
            </summary>
      <value>The type of the property value.</value>
    </member>
    <member name="T:EPiServer.Core.PropertyPageReference">
      <summary>
            Property representing a link to a page.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyPageReference" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyPageReference" /> class.
            </summary>
      <param name="pageID">The page ID.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyPageReference" /> class.
            </summary>
      <param name="pageID">The page ID.</param>
      <param name="providerName">Name of the provider.</param>
      <remarks>Only used for remote page references.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyPageReference" /> class.
            </summary>
      <param name="pageID">The page ID.</param>
      <param name="workID">The work ID for the page version.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyPageReference" /> class.
            </summary>
      <param name="pageID">The page ID.</param>
      <param name="workID">The work ID of the page version.</param>
      <param name="providerName">Name of the provider.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.#ctor(EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyPageReference" /> class.
            </summary>
      <param name="contentLink">The page link.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyPageReference" /> class.
            </summary>
      <param name="pageGuid">The guid based identifier for the page</param>
    </member>
    <member name="P:EPiServer.Core.PropertyPageReference.PageLink">
      <summary>
            Gets or sets the page link.
            </summary>
      <value>The page link.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyPageReference.ContentLink">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyPageReference.Type">
      <summary>
            Property type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.
            </summary>
      <value>The type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.Parse(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyPageReference" /> with the value specified.
            </summary>
      <param name="value">The page link as a string.</param>
      <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyPageReference" /> with the value specified.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.Parse(System.String,EPiServer.Web.IPermanentLinkMapper)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyPageReference" /> with the value specified.
            </summary>
      <param name="value">The page link as a string.</param>
      <param name="permanentLinkMapper">The permanent link mapper.</param>
      <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyPageReference" /> with the value specified.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.ParseToObject(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyPageReference" /> with the given value, ie reversed ToString().
            </summary>
      <param name="value">The string value to parse.</param>
      <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyPageReference" /> with the given value.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.ParseToSelf(System.String)">
      <summary>
            Sets the value of the property from a string representation.
            </summary>
      <param name="value">The string value to parse.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyPageReference.IsSelfReference">
      <summary>
            Gets a value indicating whether this property is a self reference.
            </summary>
      <value>
        <c>true</c> if this property is a self reference; otherwise, <c>false</c>.
            </value>
      <remarks>Only used when creating new pages when there is no known Page ID, must manually be reset.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyPageReference.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the property value.
            </summary>
      <value>The <see cref="T:System.Type" /> of the property value.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyPageReference.EnsureType(EPiServer.Core.ContentReference)">
      <summary>
            Ensures that the type is a <see cref="T:EPiServer.Core.PageReference" />.
            </summary>
      <param name="contentLink">The <paramref name="contentLink" /> or a corresponding <see cref="T:EPiServer.Core.PageReference" /> if passed in value was a <see cref="T:EPiServer.Core.ContentReference" />.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.PropertyPageType">
      <summary>
            A property that specifies a page type.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyPageType.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyPageType" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyPageType.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyPageType" /> class.
            </summary>
      <param name="pageTypeID">The page type ID.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyPageType.PageTypeID">
      <summary>
            Gets or sets the ID of the page type.
            </summary>
      <value>The ID of the page type.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyPageType.PageTypeName">
      <summary>
            Gets or sets the name of the page type.
            </summary>
      <value>The name of the page type.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyPageType.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyPageType.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
      <value>The value of the property.</value>
      <remarks>Value returns null if the property has no value defined.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyPageType.Type">
      <summary>
            Property type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.
            </summary>
      <value>The type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyPageType.Parse(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyPageType" /> with the specified value.
            </summary>
      <param name="value">The value.</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.PropertyPageType" /> with the specified value.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyPageType.ParseToObject(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyPageType" /> with the given value, ie reversed ToString().
            </summary>
      <param name="value">The string value to parse.</param>
      <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyPageType" /> with the given value.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertyPageType.ParseToSelf(System.String)">
      <summary>
            Sets the value of the property from a string representation.
            </summary>
      <param name="value">The string value to parse.</param>
    </member>
    <member name="P:EPiServer.Core.PropertyPageType.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the property value.
            </summary>
      <value>The <see cref="T:System.Type" /> of the property value.</value>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.CodeDefinedPropertySettingsWrapper">
      <summary>
            Used to wrap a setting that is defined by code.
            </summary>
      <remarks>This class supports the EPiServer infrastructure and is not intended to be used directly from your code.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.CodeDefinedPropertySettingsWrapper.#ctor(EPiServer.Core.PropertySettings.PropertySettings)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.CodeDefinedPropertySettingsWrapper" /> class.
            </summary>
      <param name="settings">The settings.</param>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.CodeDefinedPropertySettingsWrapper.CodeDefinedSettings">
      <summary>
            Gets the class responsible for getting the settings.
            </summary>
      <value>
            The settings.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.CodeDefinedPropertySettingsWrapper.PropertySettings">
      <summary>
            Gets or sets the actual property settings object.
            </summary>
      <value>
            The property settings.
            </value>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.CodeDefinedPropertySettingsWrapper.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>
            A deep copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.Internal.DefaultPropertyDataSettingsHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extension methods for <see cref="T:EPiServer.Core.PropertyData" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.DefaultPropertyDataSettingsHelper.GetSettingsContainer(EPiServer.Core.PropertyData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the settings container which have all settings objects stored for this property.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.DefaultPropertyDataSettingsHelper.GetSettingsID(EPiServer.Core.PropertyData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the settings ID used to load the settings container.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.DefaultPropertySettingsResolver.GetSettingsWrapper(System.Guid,System.Type,EPiServer.DataAnnotations.PropertySettingsAttribute)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the property setting wrapper for a given property and the attributes defined on the property.
            </summary>
      <param name="settingsID">The settings identifier.</param>
      <param name="settingsType">Type of the settings.</param>
      <param name="propertySettingsAttribute">The property settings attribute.</param>
      <returns>
            The <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> for a given type and model property.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Acts as the link between the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> and data storage.
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.PropertySettingSaved">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> has been saved, i.e. created or updated.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.OnPropertySettingSaved(EPiServer.Core.PropertySettings.PropertySettingsRepositoryEventArg)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Raises the <see cref="E:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.PropertySettingSaved" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsRepositoryEventArg" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.PropertySettings.PropertySettings},EPiServer.Data.Dynamic.DynamicDataStoreFactory,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.TryGetContainer(System.Guid,EPiServer.Core.PropertySettings.PropertySettingsContainer@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to get a <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" />.
            </summary>
      <param name="id">The id of the propertySettingsContainer.</param>
      <param name="propertySettingsContainer">The propertySetting to get.</param>
      <returns>true if successful.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.TryGetWrapper(System.Guid,EPiServer.Core.PropertySettings.PropertySettingsWrapper@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to get a <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" />.
            </summary>
      <param name="id">The id of the PropertySettingsWrapper.</param>
      <param name="propertySettingsWrapper">The PropertySettingsWrapper to get.</param>
      <returns>true if successful.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.GetGlobals(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a list of <see cref="T:EPiServer.Core.PropertySettings.PropertySettings" /> for a specified Type where IsGlobal is true.
            </summary>
      <param name="propertyType">Type of the property.</param>
      <returns>List of global settings for a type</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.SaveGlobal(EPiServer.Core.PropertySettings.PropertySettingsWrapper)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the global adding or replacing it in the globals collection.
            </summary>
      <param name="global">The global settings instance to save.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.GetDefault(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the default <see cref="T:EPiServer.Core.PropertySettings.PropertySettings" />.
            </summary>
      <param name="propertyType">Type of the property.</param>
      <returns>true if successful.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.SetDefault(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets which <see cref="T:EPiServer.Core.PropertySettings.PropertySettings" /> that is the default.
            </summary>
      <param name="id">The id of the propertySetting.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.Save(EPiServer.Core.PropertySettings.PropertySettingsContainer)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" />.
            </summary>
      <param name="container">The <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> to save.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.Save(EPiServer.Core.PropertySettings.PropertySettingsWrapper)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" />.
            </summary>
      <param name="wrapper">The <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> to save.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.Delete(EPiServer.Core.PropertySettings.PropertySettingsContainer)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the specified <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" />.
            </summary>
      <param name="propertySetting">The <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> to delete.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.Delete(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the specified <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" />.
            </summary>
      <param name="id">The <see cref="T:System.Guid" /> of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> to delete.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.DeleteGlobal(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the specified <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" />.
            </summary>
      <param name="id">The id of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> to delete.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.ClearCache(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> and <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> cache data.
            </summary>
      <param name="id">The <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> guid.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.DeleteStore">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertySettings.Internal.PropertySettingsRepository.ClearCache(EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes all property settings from the provided cache.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.PropertySettings.IPropertyDataSettingsHelper">
      <summary>
            Helper class to extract settings from <see cref="T:EPiServer.Core.PropertyData" /></summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertyDataSettingsHelper.GetSettingsContainer(EPiServer.Core.PropertyData)">
      <summary>
            Gets the settings container which have all settings objects stored for this property.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertyDataSettingsHelper.GetSettingsID(EPiServer.Core.PropertyData)">
      <summary>
            Gets or sets the settings ID used to load the settings container.
            </summary>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.IPropertySettings">
      <summary>
            Interface to support using settings for Properties and PropertyControls
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.IPropertySettings.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettings.GetDefaultValues">
      <summary>
            Gets the default value.
            </summary>
      <returns>Programmatically determined default values</returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettings.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>A copy of this instance.</returns>
      <remarks>If the settings contains object references it is up to the implementation of the copy method to copy the referenced objects as well.</remarks>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.IPropertySettingsRepository">
      <summary>
            Acts as the link between the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> and data storage.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsRepository.TryGetContainer(System.Guid,EPiServer.Core.PropertySettings.PropertySettingsContainer@)">
      <summary>
            Tries to get a <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" />.
            </summary>
      <param name="id">The id of the propertySetting.</param>
      <param name="propertySettingsContainer">The propertySettingsContainer to get.</param>
      <returns>true if successful.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsRepository.TryGetWrapper(System.Guid,EPiServer.Core.PropertySettings.PropertySettingsWrapper@)">
      <summary>
            Tries to get a <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" />.
            </summary>
      <param name="id">The id of the propertySettingsWrapper.</param>
      <param name="propertySettingsWrapper">The PropertySettingsWrapper to get.</param>
      <returns>true if successful.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsRepository.GetGlobals(System.Type)">
      <summary>
            Gets a list of <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> for a specified Type.
            </summary>
      <param name="settingsType">Type of the property setting.</param>
      <returns>List of global settings for a type</returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsRepository.GetDefault(System.Type)">
      <summary>
            Gets the default <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" />.
            </summary>
      <param name="propertyType">Type of the property.</param>
      <returns>true if successful.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsRepository.SetDefault(System.Guid)">
      <summary>
            Sets which <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> that is the default.
            </summary>
      <param name="id">The id of the propertySetting.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsRepository.Save(EPiServer.Core.PropertySettings.PropertySettingsContainer)">
      <summary>
            Saves the specified <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" />.
            </summary>
      <param name="propertySetting">The <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> to save.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsRepository.SaveGlobal(EPiServer.Core.PropertySettings.PropertySettingsWrapper)">
      <summary>
            Saves the global adding or replacing it in the globals collection.
            </summary>
      <param name="global">The global settings instance to save.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsRepository.Delete(EPiServer.Core.PropertySettings.PropertySettingsContainer)">
      <summary>
            Deletes the specified <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" />.
            </summary>
      <param name="propertySetting">The <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> to delete.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsRepository.Delete(System.Guid)">
      <summary>
            Deletes the specified <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" />.
            </summary>
      <param name="id">The <see cref="T:System.Guid" /> of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> to delete.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsRepository.DeleteGlobal(System.Guid)">
      <summary>
            Deletes the specified global <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" />.
            </summary>
      <param name="id">The id of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> to delete.</param>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettings">
      <summary>
            Used to define a specific set of settings for a property, for instance the tools that should be available for an html editor.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettings.ID">
      <summary>
            Gets the identifier for this specific settings.
            </summary>
      <value>
            The identifier.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettings.DisplayName">
      <summary>
            Gets the display name. Used in the admin UI to distinguish between global settings.
            </summary>
      <value>The display name.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettings.Description">
      <summary>
            Gets the description. Used in the admin UI to distinguish between global settings.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettings.IsDefault">
      <summary>
            Gets or sets a value indicating whether this instance is the default setting for the instances <see cref="T:System.Type" />.
            </summary>
      <value>
        <c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
      <remarks>
        <para>The order of importance used when a property setting is resolved is:</para>
        <list type="number">
          <item>Specific settings for property definition as defined in the UI.</item>
          <item>Specific settings from code (attribute on the model property).</item>
          <item>User defined property settings marked as default in the UI.</item>
          <item>A <see cref="T:EPiServer.Core.PropertySettings.PropertySettings" /> instance with the correct settings type marked as <see cref="P:EPiServer.Core.PropertySettings.PropertySettings.IsDefault" />.</item>
          <item>Default settings from the actual settings class.</item>
        </list>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettings.GetPropertySettings">
      <summary>
            Gets the property settings.
            </summary>
      <returns>The property settings</returns>
      <remarks>This will be called each time an editor is instantiated which makes it possible to customize the return value, for instance for different roles.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettings.GetSettingsInternal">
      <summary>
            Used to actually return the settings object from a base class.
            </summary>
      <returns>The actual settings object used for a property.</returns>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettings.SettingsType">
      <summary>
            Gets the type of the settings.
            </summary>
      <value>
            The type of the settings.
            </value>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettings`1">
      <summary>
            Used to define a specific set of settings for a property, for instance the tools that should be available for an html editor.
            </summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettings`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettings`1" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettings`1.GetPropertySettings">
      <summary>
            Gets the property settings.
            </summary>
      <returns>The property settings</returns>
      <remarks>This will be called each time an editor is instantiated which makes it possible to customize the return value, for instance for different roles.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettings`1.GetSettingsInternal">
      <summary>
            Used to actually return the settings object from a base class.
            </summary>
      <returns>
            The actual settings object used for a property.
            </returns>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettings`1.SettingsType">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettingsAttribute">
      <summary>
            Attibute to specify a settings object for Properties and PropertyControls.
            </summary>
      <remarks>
        <para>
            Use this attibute to specify properties or property controls that need to store settings on the page definition level.
            </para>
      </remarks>
      <example>
        <para>
            Simple example of marking a property control with a settings attibute:
            </para>
        <code source="../CodeSamples/EPiServer/PropertySettings/PropertySettingsSample.cs" region="PropertySettings" lang="cs" />
        <para>
            You can then use it together with a EPiServer.Core.PropertySettings.PropertySettingsUIAttribute:
            </para>
        <code source="../CodeSamples/EPiServer/PropertySettings/PropertySettingsSample.cs" region="PropertySettingsUI" lang="cs" />
      </example>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsAttribute" /> class.
            </summary>
      <param name="settingsType">Type of settings entity to use.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsAttribute.#ctor(System.Type,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsAttribute" /> class.
            </summary>
      <param name="settingsType">Type of settings entity to use.</param>
      <param name="useGlobals">if set to <c>true</c> enable multiple global settings to choose from in the admin UI.</param>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsAttribute.SettingsType">
      <summary>
            Gets or sets the type of  settings entity.
            </summary>
      <value>The type of the settings.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsAttribute.UseGlobals">
      <summary>
            Gets or sets a value indicating whether to enable multiple global settings to choose from in the admin UI.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsAttribute.TryGetAttribute(System.Type,EPiServer.Core.PropertySettings.PropertySettingsAttribute@)">
      <summary>
            Tries to get a <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsAttribute" /> from a type.
            </summary>
      <param name="type">The type.</param>
      <param name="attribute">The attribute to set if succesfull.</param>
      <returns>
        <c>true</c> if an attribute was found.</returns>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettingsBase">
      <summary>
            Base functionality for property settings implementing clone functionality.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsBase.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsBase.GetDefaultValues">
      <summary>
            Gets the default value.
            </summary>
      <returns>
            Programmatically determined default values
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsBase.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>A copy of this instance.</returns>
      <remarks>Default implementation only does a memberwise clone and set the id to <see cref="M:System.Guid.NewGuid" />. If the settings contains object references it is up to the 
            implementation to create an override of the copy method and copy the referenced objects as well.</remarks>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettingsContainer">
      <summary>
            Used as aggregate root for the settings objects for a property or propertyControl
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsContainer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsContainer.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsContainer" /> class.
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsContainer.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsContainer.PropertyControl">
      <summary>
            Gets or sets the property control used when rendering a control for a property.
            </summary>
      <value>The property control.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsContainer.PropertyControlTypeName">
      <summary>
            Gets the assembly qualified name of the property control type.
            Used for data storage
            </summary>
      <value>The name of the property control type.</value>
      <remarks>This should be set to the FullName property of the Type class.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsContainer.Settings">
      <summary>
            Gets a dictionary of settings for all associated types.
            </summary>
      <value>The settings.</value>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsContainer.AddSettings(EPiServer.Core.PropertySettings.PropertySettingsWrapper)">
      <summary>
            Adds settings to the collection.
            </summary>
      <param name="settings">The settings object to add.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsContainer.RemoveSettings(System.Type)">
      <summary>
            Removes any existing settings with the specified type.
            </summary>
      <param name="settingsType">Type of the settings.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsContainer.RemoveSettings(EPiServer.Core.PropertySettings.PropertySettingsWrapper)">
      <summary>
            Removes the settings.
            </summary>
      <param name="settings">The settings wrapper.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsContainer.RemoveSettings(System.Guid)">
      <summary>
            Removes the settings with the given id.
            </summary>
      <param name="id">The id.</param>
      <returns>True if the settings was found and removed; otherwise false.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsContainer.GetSetting(System.Type)">
      <summary>
            Gets a settings instance of a specified type.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsContainer.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>A copy of this instance.</returns>
      <remarks>The copy does a deep copy of local settings while global settings reuse the same objects. The copy it not saved to the database.</remarks>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettingsGlobals">
      <summary>
            Holds a reference to all global settings objects
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsGlobals.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsGlobals" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsGlobals.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsGlobals.Globals">
      <summary>
            Gets or sets the collection of globals.
            </summary>
      <value>The globals collection.</value>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsRepositoryEventArg.#ctor(System.Guid,EPiServer.DataAbstraction.RepositoryEventType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsRepositoryEventArg" /> class.
            </summary>
      <param name="id">The id of the item affected by the event.</param>
      <param name="eventType">Type of the event that is being raised.</param>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsRepositoryEventArg.ID">
      <summary>
            Gets the ID of the item affected by the repository event.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsRepositoryEventArg.EventType">
      <summary>
            Gets the type of the event that was raised.
            </summary>
      <value>
            The type of the event.
            </value>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettingsResolver">
      <summary>
            Resolves <see cref="T:EPiServer.Core.PropertySettings.IPropertySettings" /> from a property on <see cref="T:EPiServer.Core.IContentData" /></summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsResolver.GetSettings(System.Type,System.Type,System.String)">
      <summary>
            Resolve settings for a property
            </summary>
      <param name="settingsType">The type of settings</param>
      <param name="modelType">The content type to read from the settings for</param>
      <param name="propertyName">The property name to read settings for</param>
      <returns>The settings or <c>null</c> if no settings was found</returns>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper">
      <summary>
            Wrapper class that adds common properties like Id and DisplayName for <see cref="T:EPiServer.Core.PropertySettings.IPropertySettings" /> objects.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsWrapper.#ctor(System.String,System.String,System.Boolean,System.Boolean,EPiServer.Core.PropertySettings.IPropertySettings)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> class.
            </summary>
      <param name="displayName">The display name.</param>
      <param name="description">The description.</param>
      <param name="isDefault">if set to <c>true</c> it is the default instance for the type.</param>
      <param name="isGlobal">if set to <c>true</c> it is a isGlobal instance available for all properties using this type.</param>
      <param name="propertySettings">The property settings.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsWrapper.#ctor(System.Guid,System.String,System.String,System.Boolean,System.Boolean,EPiServer.Core.PropertySettings.IPropertySettings)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="displayName">The display name.</param>
      <param name="description">The description.</param>
      <param name="isDefault">if set to <c>true</c> it is the default instance for the type.</param>
      <param name="isGlobal">if set to <c>true</c> it is a global instance available for all properties using this type.</param>
      <param name="propertySettings">The property settings.</param>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsWrapper.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsWrapper.TypeFullName">
      <summary>
            Gets or sets the full name of the type for the actual settings.
            </summary>
      <value>The full name of the type of the actual settings.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsWrapper.DisplayName">
      <summary>
            Gets the display name. Used in the admin UI to distinguish between global settings
            </summary>
      <value>The display name.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsWrapper.Description">
      <summary>
            Gets the description. Used in the admin UI to distinguish between global settings
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsWrapper.IsDefault">
      <summary>
            Gets or sets a value indicating whether this instance is the default setting for the instances <see cref="T:System.Type" />.
            </summary>
      <value>
        <c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsWrapper.IsGlobal">
      <summary>
            Gets or sets a value indicating whether this instance is a global setting for the instances <see cref="T:System.Type" />.
            </summary>
      <value>
        <c>true</c> if this instance is a global setting; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsWrapper.PropertySettings">
      <summary>
            Gets or sets the actual property settings object.
            </summary>
      <value>The property settings.</value>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsWrapper.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>A deep copy of this instance.</returns>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsWrapper.DefinedByCode">
      <summary>
            Indicates if this settings wrapper is defined by code or not.
            </summary>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper.WrapperComparer">
      <summary>
            Used to compare two <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsWrapper" /> objects.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsWrapper.WrapperComparer.Equals(EPiServer.Core.PropertySettings.PropertySettingsWrapper,EPiServer.Core.PropertySettings.PropertySettingsWrapper)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsWrapper.WrapperComparer.GetHashCode(EPiServer.Core.PropertySettings.PropertySettingsWrapper)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.
            </exception>
    </member>
    <member name="T:EPiServer.Core.PropertyString">
      <summary>
            A property representing a string value less than 255 characters.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyString.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyString" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyString.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyString" /> class.
            </summary>
      <param name="stringValue">The string value.</param>
    </member>
    <member name="M:EPiServer.Core.PropertyString.IsEmptyValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyString.MaxLength">
      <summary>
            Gets or sets the max length of the string.
            </summary>
      <value>The max length of the string.</value>
      <remarks>Default value is 255.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyString.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyString.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
      <value>The value of the property.</value>
      <remarks>Value returns null if the property has no value defined.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyString.String">
      <summary>
            Gets or sets the string value.
            </summary>
      <value>The string value.</value>
    </member>
    <member name="P:EPiServer.Core.PropertyString.IsNull">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.PropertyString.Type">
      <summary>
            Property type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.
            </summary>
      <value>The type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.</value>
    </member>
    <member name="M:EPiServer.Core.PropertyString.Parse(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyString" /> with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.PropertyString" /> with the given value.</returns>
      <remarks>No parsing is needed as the property is stored as a string.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyString.ParseToObject(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.PropertyString" /> with the given value, ie reversed ToString().
            </summary>
      <param name="value">The string value.</param>
      <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyString" /> with the given value.
            </returns>
      <remarks>No parsing is needed as the property is stored as a string.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyString.ParseToSelf(System.String)">
      <summary>
            Sets the value of the property from a string representation.
            </summary>
      <param name="value">The string value to parse.</param>
      <remarks>No parsing is needed as the property is stored as a string.</remarks>
    </member>
    <member name="P:EPiServer.Core.PropertyString.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the property value.
            </summary>
      <value>The <see cref="T:System.Type" /> of the property value.</value>
    </member>
    <member name="M:EPiServer.Core.PublishedStateAssessor.IsPublished(EPiServer.Core.IContent)">
      <summary>
            Determines whether the specified <see cref="T:EPiServer.Core.IContent" /> instance currently is in a published state.
            </summary>
      <param name="content">The content instance that should be assessed.</param>
      <returns>
        <c>true</c> if the content item is published; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Core.PublishedStateAssessor.IsPublished(EPiServer.Core.IContent,EPiServer.Core.PagePublishedStatus)">
      <summary>
            Determines whether the specified <see cref="T:EPiServer.Core.IContent" /> instance currently is in a published state
            using the provided conditions.
            </summary>
      <param name="content">The content instance that should be assessed.</param>
      <param name="condition">The conditions of how the assessment should be done.</param>
      <returns>
        <c>true</c> if the content item is published; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Core.PublishedStateAssessor.IsPublished(EPiServer.Core.IContent,EPiServer.Core.PublishedStateCondition)">
      <summary>
            Determines whether the specified <see cref="T:EPiServer.Core.IContent" /> instance currently is in a published state
            using the provided conditions.
            </summary>
      <param name="content">The content instance that should be assessed.</param>
      <param name="condition">The conditions of how the assessment should be done.</param>
      <returns>
        <c>true</c> if the content item is published; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Core.PublishedStateAssessor.ConvertCondition(EPiServer.Core.PagePublishedStatus)">
      <summary>
            Converts a <see cref="T:EPiServer.Core.PagePublishedStatus" /> condition to the <see cref="T:EPiServer.Core.PublishedStateCondition" /> equivalent.
            </summary>
    </member>
    <member name="T:EPiServer.Core.PublishedStateAssessorExtensions">
      <summary>
            Extension methods for the <see cref="T:EPiServer.Core.IPublishedStateAssessor" /> interface
            </summary>
    </member>
    <member name="M:EPiServer.Core.PublishedStateAssessorExtensions.IsPublished(EPiServer.Core.IPublishedStateAssessor,EPiServer.Core.IContent)">
      <summary>
            Determines whether the specified <see cref="T:EPiServer.Core.IContent" /> instance currently is in a published state.
            </summary>
      <param name="assessor">The assessor that does the assessment.</param>
      <param name="content">The content instance that should be assessed.</param>
      <returns>
        <c>true</c> if the content item is published; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PublishedStateAssessorExtensions.IsPublished(EPiServer.Core.IPublishedStateAssessor,EPiServer.Core.IContent,EPiServer.Core.PagePublishedStatus)">
      <summary>
            Determines whether the specified <see cref="T:EPiServer.Core.IContent" /> instance currently is in a published state.
            </summary>
      <param name="assessor">The assessor that does the assessment.</param>
      <param name="content">The content instance that should be assessed.</param>
      <param name="condition">The conditions of how the assessment should be done.</param>
      <returns>
        <c>true</c> if the content item is published; otherwise <c>false</c>.
            </returns>
      <remarks>
            This method is primarily here for legacy reason and it is encouraged to use the <see cref="M:EPiServer.Core.IPublishedStateAssessor.IsPublished(EPiServer.Core.IContent,EPiServer.Core.PublishedStateCondition)" /> overload instead.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.PublishedStateCondition">
      <summary>
            Describes the different conditions on which the published state of a <see cref="T:EPiServer.Core.IContent" />
            item can be assessed.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PublishedStateCondition.None">
      <summary>
            No specific conditions is used and all different assessments are carried out.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PublishedStateCondition.IgnoreStartPublish">
      <summary>
            The content item should be assessed without checking the start publish date of the content item.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PublishedStateCondition.IgnoreStopPublish">
      <summary>
            The content item should be assessed without checking the stop publish date of the content item.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PublishedStateCondition.IgnorePublishDates">
      <summary>
            The content item should be assessed without checking the any of the publish dates of the content item.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PublishedStateCondition.IgnoreDeleted">
      <summary>
            The content item should be assessed without checking if the content item is placed in the recycle bin.
            </summary>
    </member>
    <member name="F:EPiServer.Core.PublishedStateCondition.IgnoreLinkedContentState">
      <summary>
            The content item should be assessed without assessing the published state of any linked content, i.e. fetched data.
            </summary>
    </member>
    <member name="T:EPiServer.Core.RawContent">
      <summary>
            Raw data contained in a Content.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawContent.ACL">
      <summary>
            The access settings for the content.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawContent.Property">
      <summary>
            An array containing the properties of the page.
            </summary>
    </member>
    <member name="T:EPiServer.Core.RawContentInfo">
      <summary>
            Holds a Rawcontent including language, security information about the page.
            </summary>
    </member>
    <member name="M:EPiServer.Core.RawContentInfo.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.RawContent,System.String,System.Collections.Generic.IList{System.String},EPiServer.Security.ISecurityDescriptor)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.RawContentInfo" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Core.RawContentInfo.RawContent">
      <summary>
            Gets the Rawcontent instance
            </summary>
      <value>The raw page.</value>
    </member>
    <member name="P:EPiServer.Core.RawContentInfo.MasterLanguage">
      <summary>
            Gets the master language for the content.
            </summary>
      <value>The master language.</value>
    </member>
    <member name="P:EPiServer.Core.RawContentInfo.Languages">
      <summary>
            Gets a list of all languages the content exist on.
            </summary>
      <value>The langauges.</value>
    </member>
    <member name="P:EPiServer.Core.RawContentInfo.SecurityDescriptor">
      <summary>
            Gets the security descriptor corresponding to the content or null if content is not securable
            </summary>
      <value>The descriptor</value>
    </member>
    <member name="P:EPiServer.Core.RawContentInfo.LanguageBranch">
      <summary>
            Gets the current language branch
            </summary>
      <value>The language branch</value>
    </member>
    <member name="P:EPiServer.Core.RawContentInfo.ContentLink">
      <summary>
            Gets the content link for the RawContent
            </summary>
      <value>The content link.</value>
    </member>
    <member name="P:EPiServer.Core.RawContentInfo.ContentGuid">
      <summary>
            Gets the guid based identifier for the RawContent
            </summary>
      <value>The cotent GUID.</value>
    </member>
    <member name="P:EPiServer.Core.RawContentInfo.ContentTypeName">
      <summary>
            Gets the name of the content type.
            </summary>
      <value>The name of the content type.</value>
    </member>
    <member name="P:EPiServer.Core.RawContentInfo.Name">
      <summary>
            Gets the name of the content instance.
            </summary>
      <value>The name of the content instance.</value>
    </member>
    <member name="T:EPiServer.Core.RawPage">
      <summary>
            Raw data contained in a PageData.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawPage.PageObjects">
      <summary>
            An array of page objects for the page.
            </summary>
    </member>
    <member name="T:EPiServer.Core.RawProperty">
      <summary>
            Raw data contained in a <see cref="T:EPiServer.Core.PropertyData" />.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.PageDefinitionID">
      <summary>
            The id of the property definition for the page.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.PropertyDefinitionID">
      <summary>
            The id of the property definition for the page.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.OwnerTab">
      <summary>
            The tab that the property should appear on.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.IsModified">
      <summary>
            If the property has been modified.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.IsNull">
      <summary>
            Is the value of the property is null/undefined.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.IsRequired">
      <summary>
            If the value for this property is required.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.IsPropertyData">
      <summary>
            If this property is a standard page property.
            </summary>
      <remarks>This simply determines that it is not a dynamic property and not meta data.</remarks>
    </member>
    <member name="F:EPiServer.Core.RawProperty.IsDynamicProperty">
      <summary>
            If this is a dynamic property.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.IsLanguageSpecific">
      <summary>
            If this property is language specific.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.Type">
      <summary>
            The base type of the property as defined in <see cref="T:EPiServer.Core.PropertyDataType" />.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.Name">
      <summary>
            The name of the property.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.DisplayName">
      <summary>
            The name that will be displayed to the user (may be translated).
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.Description">
      <summary>
            The description of the property.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.LanguageKey">
      <summary>
            The language key for the property.
            </summary>
      <remarks>Used to get translated values for name and description.</remarks>
    </member>
    <member name="F:EPiServer.Core.RawProperty.TypeName">
      <summary>
            The type name of the property definition.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.AssemblyName">
      <summary>
            The name for the assembly that the definition of the property is contained in.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.Value">
      <summary>
            The value for the property.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.BlockTypeReference">
      <summary>
            The reference to a block type.
            </summary>
      <remarks>
            For properties defined on <see cref="T:EPiServer.DataAbstraction.PageType" /> this value is null. 
            For properties that are of type Block corresponding to a <see cref="T:EPiServer.DataAbstraction.BlockType" /> this will be the reference to the
            <see cref="T:EPiServer.DataAbstraction.BlockType" />.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.RawProperty.BlockProperties">
      <summary>
            The properties for a property of type <see cref="T:EPiServer.SpecializedProperties.IPropertyBlock" />.
            </summary>
      <remarks>
            For properties defined on <see cref="T:EPiServer.DataAbstraction.PageType" /> this value is null. 
            For properties that are defined on a <see cref="T:EPiServer.DataAbstraction.BlockType" /> this wil be the properties for the block.
            </remarks>
      <summary>
            An array containing the properties of the block.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawProperty.CustomData">
      <summary>
            An array of <see cref="T:EPiServer.Core.RawNameAndXml" /> to be able to store additional information.
            </summary>
    </member>
    <member name="T:EPiServer.Core.RawNameAndXml">
      <summary>
            Container for handling custom xml serialization
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawNameAndXml.Name">
      <summary>
            The name of the data stored.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawNameAndXml.Xml">
      <summary>
            The value of the data.
            </summary>
    </member>
    <member name="T:EPiServer.Core.ReadOnlyStringList">
      <summary>
            A read-only collection of string with case insensitive comparisons.
            The items are stored as upper invariant case.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.#ctor(System.Collections.Generic.IList{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.ReadOnlyStringList" /> class.
            </summary>
      <param name="items">The items.</param>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.IndexOf(System.String)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.Insert(System.Int32,System.String)">
      <summary>
            Not a valid operation on a readonly list. Will throw InvalidOperationException;
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.RemoveAt(System.Int32)">
      <summary>
            Not a valid operation on a readonly list. Will throw InvalidOperationException;
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:EPiServer.Core.ReadOnlyStringList.Item(System.Int32)">
      <summary>
            Gets or the <see cref="T:System.String" /> at the specified index.
            Set is not a valid operation on a readonly list. Will throw InvalidOperationException;
            </summary>
      <value>
      </value>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.Add(System.String)">
      <summary>
            Not a valid operation on a readonly list. Will throw InvalidOperationException;
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.Clear">
      <summary>
            Not a valid operation on a readonly list. Will throw InvalidOperationException;
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.Contains(System.String)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            The compairson will be performed on upper invariant case.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.CopyTo(System.String[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:EPiServer.Core.ReadOnlyStringList.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <value>
      </value>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:EPiServer.Core.ReadOnlyStringList.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.Remove(System.String)">
      <summary>
            Not a valid operation on a readonly list. Will throw InvalidOperationException;
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.Core.ReadOnlyStringList.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:EPiServer.Core.RequiredPropertyValueException">
      <summary>
            Exception thrown by <see cref="T:EPiServer.Core.PropertyData" /> derived objects when assigned a null value where value is required.
            </summary>
      <remarks>
        <para>Will translate error message to current language, default message is: "{propertyName}" cannot be empty.</para>
        <para>Exception is thrown by <see cref="M:EPiServer.Core.PropertyData.Clear" /> when trying to null a property where a value is required.</para>
        <para>
          <see cref="T:EPiServer.Core.InvalidPropertyValueException" /> and <see cref="T:EPiServer.Core.RequiredPropertyValueException" /> are the two main exceptions that EPiServer.UI.WebControls.PropertyDataForm catches to display friendly and language dependent error messages.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.RequiredPropertyValueException.#ctor(System.String)">
      <summary>
            Initializes a new instance with a specified property name.
            </summary>
      <param name="propertyName">Name of property causing the exception</param>
    </member>
    <member name="M:EPiServer.Core.RequiredPropertyValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.RequiredPropertyValueException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Core.RequiredPropertyValueException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.RequiredPropertyValueException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Core.RequiredPropertyValueException.ChangeDisplayName(System.String)">
      <summary>
            Tries to set the error message to a translated exception message.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.GeneratedUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The result for an url generation created by <see cref="M:EPiServer.Core.Routing.Internal.IContentUrlGenerator.Generate(EPiServer.Core.ContentReference,EPiServer.Core.Routing.Internal.UrlGeneratorOptions)" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.GeneratedUrl.#ctor(System.Uri)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructs a new instace
            </summary>
      <param name="url">The url that was generated</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.GeneratedUrl.Url">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the url that was generated
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.GeneratedUrl.ToString">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.IContentUrlGenerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Signature for component that is used to generate urls to content instances.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.IContentUrlGenerator.Generate(EPiServer.Core.ContentReference,EPiServer.Core.Routing.Internal.UrlGeneratorOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generates an url for a content instance or null if no url could be constructed.
            </summary>
      <param name="contentLink">A reference for the content for which to generate an url</param>
      <param name="options">Options that can be used to specify how the url should be generated, for example for which language version</param>
      <returns>A result containing the generated url or null if no url could be generated</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.ContentUrlGeneratorExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extension methods for <see cref="T:EPiServer.Core.Routing.Internal.IContentUrlGenerator" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.ContentUrlGeneratorExtensions.Generate(EPiServer.Core.Routing.Internal.IContentUrlGenerator,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generates an url for a content instance.
            </summary>
      <remarks>
            Language will be determined from request context.
            </remarks>
      <param name="generateUrl">The url generator that is extended</param>
      <param name="contentLink">A reference for the content for which the url is to be generated</param>
      <returns>The generated url or null if no url could be generated</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.ContentUrlGeneratorExtensions.Generate(EPiServer.Core.Routing.Internal.IContentUrlGenerator,EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generates an url for a content instance in the specified language
            </summary>
      <param name="generateUrl">The url generator that is extended</param>
      <param name="contentLink">A reference for the content for which the url is to be generated</param>
      <param name="language">The language version to generate an url for</param>
      <returns>The generated url or null if no url could be generated</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.IContentUrlGeneratorEvents">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies events that are raised during url generation using <see cref="T:EPiServer.Core.Routing.Internal.IContentUrlGenerator" /></summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Core.Routing.Internal.IContentUrlGeneratorEvents.GeneratingUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Raised before an url is generated. 
            </summary>
      <remarks>
        <para>
            If an event handler sets the url on <see cref="P:EPiServer.Core.Routing.Internal.UrlGeneratorEventArgs.Context" /> and assign <see cref="P:EPiServer.Core.Routing.Internal.UrlGeneratorEventArgs.State" /> to <see cref="F:EPiServer.Core.Routing.Internal.PipelineState.Done" /> then that url will be used.
            </para>
            An event handler can set <see cref="P:EPiServer.Core.Routing.Internal.UrlGeneratorEventArgs.State" /> to <see cref="F:EPiServer.Core.Routing.Internal.PipelineState.Abort" /> to prevent an url from being generated.
            </remarks>
      <exclude />
    </member>
    <member name="E:EPiServer.Core.Routing.Internal.IContentUrlGeneratorEvents.GeneratedUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Raised after an url has been generated. 
            </summary>
      <remarks>
        <para>
            An event handler can modify the generated url through <see cref="P:EPiServer.Core.Routing.Internal.UrlGeneratorEventArgs.Context" /></para>
            An event handler can set <see cref="P:EPiServer.Core.Routing.Internal.UrlGeneratorEventArgs.State" /> to <see cref="F:EPiServer.Core.Routing.Internal.PipelineState.Abort" /> to prevent an url from being generated.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.ContentUrlGeneratorEvents">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Base class for <see cref="T:EPiServer.Core.Routing.Internal.IContentUrlGeneratorEvents" /> implementations
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Core.Routing.Internal.ContentUrlGeneratorEvents.GeneratingUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="E:EPiServer.Core.Routing.Internal.ContentUrlGeneratorEvents.GeneratedUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.ContentUrlGeneratorEvents.OnGeneratingUrl(EPiServer.Core.Routing.Internal.UrlGeneratorEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Call to raise <see cref="E:EPiServer.Core.Routing.Internal.ContentUrlGeneratorEvents.GeneratingUrl" /> event
            </summary>
      <param name="args">The event argument</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.ContentUrlGeneratorEvents.OnGeneratedUrl(EPiServer.Core.Routing.Internal.UrlGeneratorEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Call to raise <see cref="E:EPiServer.Core.Routing.Internal.ContentUrlGeneratorEvents.GeneratedUrl" /> event
            </summary>
      <param name="args">The event argument</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.IContentUrlResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Signature for component that is used to resolve a content instance from an url
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.IContentUrlResolver.Resolve(System.Uri,EPiServer.Core.Routing.Internal.UrlResolverOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves a content instance from an url.
            </summary>
      <param name="url">The url to resolve a content instance from</param>
      <param name="options">Options that can be used to specify how the url should be resolved</param>
      <returns>A result containing a reference to the resolved content or null if no content could be resolved</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.IContentUrlResolverEvents">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies events that are raised during url resolving using <see cref="T:EPiServer.Core.Routing.Internal.IContentUrlResolver" /></summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Core.Routing.Internal.IContentUrlResolverEvents.ResolvingUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Raised before an url is resolved. 
            </summary>
      <remarks>
        <para>
            If an event handler sets content and language and <see cref="P:EPiServer.Core.Routing.Internal.UrlResolverEventArgs.State" /> to <see cref="F:EPiServer.Core.Routing.Internal.PipelineState.Done" /> then that content will be used.
            </para>
            An event handler can set <see cref="P:EPiServer.Core.Routing.Internal.UrlResolverEventArgs.State" /> to <see cref="F:EPiServer.Core.Routing.Internal.PipelineState.Abort" /> to prevent an url from being resolved.
            </remarks>
      <exclude />
    </member>
    <member name="E:EPiServer.Core.Routing.Internal.IContentUrlResolverEvents.ResolvedUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Raised after an url has been resolved. 
            </summary>
      <remarks>
        <para>
            An event handler can modify for example the resolved content reference through <see cref="P:EPiServer.Core.Routing.Internal.UrlResolverEventArgs.Context" /></para>
            An event handler can set <see cref="P:EPiServer.Core.Routing.Internal.UrlResolverEventArgs.State" /> to <see cref="F:EPiServer.Core.Routing.Internal.PipelineState.Abort" /> to prevent content from being resolved.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.ContentUrlResolverEvents">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Base class for <see cref="T:EPiServer.Core.Routing.Internal.IContentUrlResolverEvents" /> implementations
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Core.Routing.Internal.ContentUrlResolverEvents.ResolvingUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="E:EPiServer.Core.Routing.Internal.ContentUrlResolverEvents.ResolvedUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.ContentUrlResolverEvents.OnResolvingUrl(EPiServer.Core.Routing.Internal.UrlResolverEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Call to raise <see cref="E:EPiServer.Core.Routing.Internal.ContentUrlResolverEvents.ResolvingUrl" /> event
            </summary>
      <param name="args">The event argument</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.ContentUrlResolverEvents.OnResolvedUrl(EPiServer.Core.Routing.Internal.UrlResolverEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Call to raise <see cref="E:EPiServer.Core.Routing.Internal.ContentUrlResolverEvents.ResolvedUrl" /> event
            </summary>
      <param name="args">The event argument</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.PipelineState">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies the different state a pipeline component can return
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Routing.Internal.PipelineState.Continue">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies that next step in the pipelins should be called
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Routing.Internal.PipelineState.Done">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies that the pipeline processing is done and no further steps will be called
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Routing.Internal.PipelineState.Abort">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Aborts the pipeline processing
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.ResolvedContent">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The result for an url resolving returned by <see cref="M:EPiServer.Core.Routing.Internal.IContentUrlResolver.Resolve(System.Uri,EPiServer.Core.Routing.Internal.UrlResolverOptions)" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.ResolvedContent.#ctor(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Globalization.CultureInfo,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance
            </summary>
      <param name="contentLink">The content refernce that was resolved</param>
      <param name="contentLanguage">The language version for the content that was resolved</param>
      <param name="requestedLanguage">The language that was resolved from the url</param>
      <param name="remainingPath">The remaining path in the url after the resolving</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.ResolvedContent.ContentLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The content refernce that was resolved
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.ResolvedContent.ContentLanguage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The language version for the content that was resolved
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.ResolvedContent.RequestedLanguage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The language that was resolved from the url
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.ResolvedContent.RemainingPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The remaining path in the url after the resolving
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.UrlGeneratorEventArgs">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Event args used from <see cref="T:EPiServer.Core.Routing.Internal.IContentUrlGeneratorEvents" /></summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.UrlGeneratorEventArgs.Context">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The context for the url generation
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.UrlGeneratorEventArgs.State">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The current state for the processing pipeline
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.IUrlGeneratorOption">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Marker interface for components that acts as options for url generation
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.UrlGeneratorOptions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Container class for option instances during url generation
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extension methods for <see cref="T:EPiServer.Core.Routing.Internal.UrlGeneratorOptions" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions.SetCurrentHost(EPiServer.Core.Routing.Internal.UrlGeneratorOptions,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets a host option that will be used as "current host", used for example for generating relative URL's
            </summary>
      <param name="options">The options container that is extended</param>
      <param name="host">The host to set</param>
      <returns>The options container</returns>
      <remarks>This option overrides any automatic detection of the current host.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions.SetLanguage(EPiServer.Core.Routing.Internal.UrlGeneratorOptions,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets a language option that will determine the language of the link to generate
            </summary>
      <param name="options">The options container that is extended</param>
      <param name="language">The language to set</param>
      <returns>The options container</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions.SetContextMode(EPiServer.Core.Routing.Internal.UrlGeneratorOptions,EPiServer.Web.ContextMode)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets a context mode option that determines the format of the generated link
            </summary>
      <param name="options">The options container that is extended</param>
      <param name="mode">The context mode to set</param>
      <returns>The options container</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions.SetForceAbsoluteUrl(EPiServer.Core.Routing.Internal.UrlGeneratorOptions,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets an option that forces absolute URLs
            </summary>
      <param name="options">The options container that is extended</param>
      <param name="value">The value to set</param>
      <returns>The options container</returns>
      <remarks>It is not possible to generate absolute URL's for content outside a site unless there is a current host (use <see cref="M:SetCurrentHost" /> for rendering outside a web request) </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions.SetForceCanonicalUrl(EPiServer.Core.Routing.Internal.UrlGeneratorOptions,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets an option that forces the use of the canonical URL
            </summary>
      <param name="options">The options container that is extended</param>
      <param name="value">Specifies if the url should be generated as a canonical url</param>
      <returns>The options container</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions.GetCurrentHost(EPiServer.Core.Routing.Internal.UrlGeneratorOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the host option that will be used as current host, used for example for generating relative URL's
            </summary>
      <param name="options">The options container that is extended</param>
      <returns>The host option or null if it does not exist</returns>
      <remarks>This option overrides any automatic detection of the current host.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions.GetLanguage(EPiServer.Core.Routing.Internal.UrlGeneratorOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the language option that will determine the language of the link to generate
            </summary>
      <param name="options">The options container that is extended</param>
      <returns>The language option or null if it does not exist</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions.GetContextMode(EPiServer.Core.Routing.Internal.UrlGeneratorOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a context mode option that determines the format of the generated link
            </summary>
      <param name="options">The options container that is extended</param>
      <returns>The context mode option or null if it does not exist</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions.GetForceAbsoluteUrl(EPiServer.Core.Routing.Internal.UrlGeneratorOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets an option that forces absolute URLs
            </summary>
      <param name="options">The options container that is extended</param>
      <returns>The value or false if not specified</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlGeneratorOptionsExtensions.GetForceCanonicalUrl(EPiServer.Core.Routing.Internal.UrlGeneratorOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets an option that forces absolute URLs
            </summary>
      <param name="options">The options container that is extended</param>
      <returns>The value or <c>false</c> if not specified</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.UrlResolverEventArgs">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Event args used from <see cref="T:EPiServer.Core.Routing.Internal.IContentUrlResolverEvents" /></summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.UrlResolverEventArgs.Context">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The context for the url resolving
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.UrlResolverEventArgs.State">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The current state for the processing pipeline
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.IUrlResolverOption">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Marker interface for components that acts as options for url resolving
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.UrlResolverOptions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Container class for option instances during url resolving
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.UrlResolverOptionsExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extension methods for <see cref="T:EPiServer.Core.Routing.Internal.UrlResolverOptions" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlResolverOptionsExtensions.SetDefaultHost(EPiServer.Core.Routing.Internal.UrlResolverOptions,EPiServer.Web.HostDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets a host option that will be used as default for relative URL's
            </summary>
      <param name="options">The options container that is extended</param>
      <param name="host">The host to set</param>
      <returns>The options container</returns>
      <remarks>The resolver defaults to the current HTTP request if no default host is specified</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlResolverOptionsExtensions.SetFallbackToWildcardHost(EPiServer.Core.Routing.Internal.UrlResolverOptions,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets an option if wildcard host should be used as fallback after trying to find a matching host and site
            </summary>
      <param name="options">The options container that is extended</param>
      <param name="fallbackToWildcard">The wildcard option to set</param>
      <returns>The options container</returns>
      <remarks>If no wilcard host exists this setting has no effect on the URL resolver</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlResolverOptionsExtensions.GetDefaultHost(EPiServer.Core.Routing.Internal.UrlResolverOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the host option that will be used as default for relative URL's
            </summary>
      <param name="options">The options container that is extended</param>
      <returns>The host option or null if it does not exist</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.UrlResolverOptionsExtensions.GetFallbackToWildcardHost(EPiServer.Core.Routing.Internal.UrlResolverOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets an option if wildcard host should be used as fallback after trying to find a matching host and site
            </summary>
      <param name="options">The options container that is extended</param>
      <returns>The wildcard host option or <c>false</c> if it does not exist</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.ContextModeUrlGeneratorOption">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Option used to specify for which <see cref="T:EPiServer.Web.ContextMode" /> the url should be generated for.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.ContextModeUrlGeneratorOption.Mode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The context mode to generate an url for
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Internal.ContextModeUrlGeneratorOption.CreateOption(EPiServer.Web.ContextMode)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new option instance
            </summary>
      <param name="mode">the mode for which the option should be created</param>
      <returns>An option instance</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.HostUrlGeneratorOption">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Option used to specify which host that will be used as fallback when no host can be determined from the content
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.HostUrlGeneratorOption.CurrentHost">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the host to use during URL generation
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.HostUrlGeneratorOption.ForceAbsoluteUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets a value indicating if the URL should always be generated as an absolute URL.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.HostUrlGeneratorOption.ForceCanonicalUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets a value indicating if the URL should always be generated using the canonical host.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.HostUrlResolverOption">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Option used to specify what host that will be used as fallback when no site can be determined from the URL
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.HostUrlResolverOption.FallbackToWildcard">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies if a fallback should be performed to wildcard host
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.HostUrlResolverOption.DefaultHost">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The default host to use during url resolving of relative URLs
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Internal.LanguageUrlGeneratorOption">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Option used to specify for which language the url should be generated for.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Internal.LanguageUrlGeneratorOption.Language">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The language that the url should be generated for
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Pipeline.Internal.IUrlGeneratorPipelineProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Responsible for lifetime and creation of the pipeline responsible for url generation
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Pipeline.Internal.IUrlGeneratorPipelineProvider.GetPipeline(EPiServer.Core.ContentReference,EPiServer.Core.Routing.Internal.UrlGeneratorOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the pipeline used to generate the url.
            </summary>
      <param name="contentLink">The content link for which to create an url</param>
      <param name="options">Options that can specify how the url should be generated</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Pipeline.Internal.IUrlGeneratorPipelineStep">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Defines the signature fo a component that is used to generate a part of an url.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Pipeline.Internal.IUrlGeneratorPipelineStep.Generate(EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext,EPiServer.Core.Routing.Internal.UrlGeneratorOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Can modify the url to be generated through <see cref="P:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext.Url" /></summary>
      <param name="context">The context used for the url generation</param>
      <param name="options">Options that can specify how the url should be generated</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Pipeline.Internal.IUrlResolverPipelineProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Responsible for lifetime and creation of the pipeline responsible for content resolving from url.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Pipeline.Internal.IUrlResolverPipelineProvider.GetPipeline(System.Uri,EPiServer.Core.Routing.Internal.UrlResolverOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the pipeline used to resolve urls.
            </summary>
      <param name="url">The url that is being resolved</param>
      <param name="options">Options that can specify how the url should be resolved</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Pipeline.Internal.IUrlResolverPipelineStep">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Defines the signature for a component that is used to resolve a part of an url.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Pipeline.Internal.IUrlResolverPipelineStep.Resolve(EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext,EPiServer.Core.Routing.Internal.UrlResolverOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Can resolve part of the <see cref="T:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext" /></summary>
      <param name="context">The context used for the url resolving</param>
      <param name="options">Options that can specify how the url should be resolved</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Pipeline.Internal.SegmentPair">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class that can be used from <see cref="T:EPiServer.Core.Routing.Pipeline.Internal.IUrlResolverPipelineStep" /> implementations to get the next segment in the url.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.SegmentPair.Next">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The next value.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.SegmentPair.Remaining">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The remaining URL that is yet to be resolved.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The context that is used during url generation. Different <see cref="T:EPiServer.Core.Routing.Pipeline.Internal.IUrlGeneratorPipelineStep" /> instances in the pipeline
            can update the <see cref="P:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext.Url" /> depending on <see cref="T:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext" /> and <see cref="T:EPiServer.Core.Routing.Internal.UrlGeneratorOptions" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext.#ctor(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new context instance
            </summary>
      <param name="contentLink">The contentlink for which an url is to be generated</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext.Url">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The Url that is being generated
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext.ContentLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A reference to the content item for which an url is generated
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext.Language">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The language version of the content that is linked
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext.Host">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The host that the content is served under or null if the host could not be resolved.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext.CurrentHost">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The host that current request is served under or null if the host could not be resolved.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext.RouteValues">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Custom values that can be used to pass data between different steps in the pipeline.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Pipeline.Internal.GenerateUrlContextExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extension methods for <see cref="T:EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Pipeline.Internal.GenerateUrlContextExtensions.AppendSegment(EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Appends a segment to the Url that is being generated
            </summary>
      <param name="context">The context that is extended</param>
      <param name="segment">The segment to append to the url</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The context that is used during url resolving. Different <see cref="T:EPiServer.Core.Routing.Pipeline.Internal.IUrlResolverPipelineStep" /> instances in the pipeline
            can update the context depending on <see cref="T:EPiServer.Core.Routing.Internal.UrlResolverOptions" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext.#ctor(System.Uri)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new context instance
            </summary>
      <param name="url">The url that is being resolved</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext.Url">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The Url that is being resolved
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext.ContentLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The ContentLink that the url has been resolved to or null if not yet resolved
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext.ContentLanguage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The language version for the content that the url has been resolved to or null if not yet resolved
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext.RequestedLanguage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The language that was resolved from the url or null if not yet resolved
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext.RemainingPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The part of the url that have not yet been consumed
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext.RouteValues">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Custom values that can be used to pass data between different steps in the pipeline.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext.HostDefinition">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The host that has been resolved from the url or null if not yet resolved
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContextExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extends <see cref="T:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContextExtensions.GetNextRemainingSegment(EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parses the remaing path of the url and returns next unresolved segment
            </summary>
      <param name="context">The context that is being extended</param>
      <param name="remainingPath">The remaining path to use, if null is passed in <see cref="P:EPiServer.Core.Routing.Pipeline.Internal.UrlResolverContext.RemainingPath" /> is used</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Routing.Pipeline.Internal.IUrlGeneratorHostResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Defines a component that will decide what host to use when generating a URL to a content item.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Routing.Pipeline.Internal.IUrlGeneratorHostResolver.Resolve(EPiServer.Core.Routing.Pipeline.Internal.UrlGeneratorContext,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves the host that should be used in the given context.
            </summary>
      <param name="context">The context for which the host should be resolved</param>
      <param name="canonical">If true indicates that the canonical host should be preferred over the current host.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.ServiceLocationHelperExtensions">
      <summary>  
            Makes EPiServer.Core services part of the public API.  
            </summary>
    </member>
    <member name="M:EPiServer.Core.ServiceLocationHelperExtensions.ContentEvents(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="T:EPiServer.Core.IContentEvents" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="T:EPiServer.Core.IContentEvents" /> service.</returns>
    </member>
    <member name="M:EPiServer.Core.ServiceLocationHelperExtensions.PageCriteriaQueryService(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary> 
            Resolves the <see cref="T:EPiServer.Core.IPageCriteriaQueryService" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="T:EPiServer.Core.IPageCriteriaQueryService" /> service.</returns>
    </member>
    <member name="T:EPiServer.Core.StandardContentBase">
      <summary>
            Class that should be used as the base class for standard IContent implementations. It implements most of the behavioural interfaces.
            </summary>
      <remarks>
        <see cref="T:EPiServer.Web.Routing.IRoutable" /> should be implemented to support direct routing to instances.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.StandardContentBase.ExistingLanguages">
      <summary>
            Gets or sets the existing langauges for the <see cref="T:EPiServer.Core.ContentData" /></summary>
      <value>The existing langauges.</value>
    </member>
    <member name="P:EPiServer.Core.StandardContentBase.Language">
      <summary>
            Gets or sets the language for this instance.
            </summary>
      <value>The language.</value>
    </member>
    <member name="P:EPiServer.Core.StandardContentBase.MasterLanguage">
      <summary>
            Gets or sets the master language for this instance.
            </summary>
      <value>The master language.</value>
    </member>
    <member name="P:EPiServer.Core.StandardContentBase.ContentAssetsID">
      <summary>
            Gets or sets the content resource ID.
            </summary>
    </member>
    <member name="P:EPiServer.Core.StandardContentBase.IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Core.StandardContentBase.ResetModified">
      <summary>
            Resets the modified flag on all the properties in the <see cref="P:EPiServer.Core.IContentData.Property" /> collection.
            </summary>
    </member>
    <member name="M:EPiServer.Core.StandardContentBase.CreateWriteableCloneImplementation">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.StandardContentBase.MakeReadOnly">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Core.StatusTransition">
      <summary>
            Represents the transition of a <see cref="T:EPiServer.Core.IContent" /> item from one <see cref="T:EPiServer.Core.VersionStatus" /> to another.
            </summary>
    </member>
    <member name="F:EPiServer.Core.StatusTransition.Invalid">
      <summary>
            Gets a <see cref="T:EPiServer.Core.StatusTransition" /> that represents an invalid transition.
            </summary>
    </member>
    <member name="M:EPiServer.Core.StatusTransition.#ctor(EPiServer.Core.VersionStatus,EPiServer.Core.VersionStatus,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.StatusTransition" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Core.StatusTransition.CurrentStatus">
      <summary>
            Gets the current <see cref="T:EPiServer.Core.VersionStatus" /> of the content item.
            </summary>
      <remarks>
            For content that does not implement <see cref="T:EPiServer.Core.IVersionable" /> and therefore
            doesn't have a Status, this property will always be <see cref="F:EPiServer.Core.VersionStatus.Published" /> 
            for existing content items and in the case of a new items, 
            <see cref="F:EPiServer.Core.VersionStatus.NotCreated" />. 
            </remarks>
    </member>
    <member name="P:EPiServer.Core.StatusTransition.NextStatus">
      <summary>
            Gets the <see cref="T:EPiServer.Core.VersionStatus" /> that the content item will transition to.
            </summary>
      <remarks>
            For content that does not implement <see cref="T:EPiServer.Core.IVersionable" /> and therefore
            doesn't have a Status, this property will always be <see cref="F:EPiServer.Core.VersionStatus.Published" />. 
            </remarks>
    </member>
    <member name="P:EPiServer.Core.StatusTransition.CreateNewVersion">
      <summary>
            Gets a value indicating if a new content version should be created as a part of 
            the transition.
            </summary>
      <remarks>
            For content not implementing <see cref="T:EPiServer.Core.IVersionable" />, this property 
            will always be <c>false</c> unless the content item is new, in which case it
            will be <c>true</c>. 
            </remarks>
    </member>
    <member name="M:EPiServer.Core.StatusTransition.IsStatusChange">
      <summary>
            Gets an value indicating if the transition represents a change of the <see cref="T:EPiServer.Core.VersionStatus" />.
            </summary>
      <returns>
        <c>true</c> if <see cref="P:EPiServer.Core.StatusTransition.NextStatus" /> is different from the <see cref="P:EPiServer.Core.StatusTransition.CurrentStatus" /> status.</returns>
    </member>
    <member name="P:EPiServer.Core.StatusTransition.VersionedContent">
      <summary>
            Gets an value indicating if the transition represents a transition for an content item implementing <see cref="T:EPiServer.Core.IVersionable" /></summary>
    </member>
    <member name="M:EPiServer.Core.StatusTransition.ToString">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.StatusTransition.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.StatusTransition.Equals(EPiServer.Core.StatusTransition)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.StatusTransition.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.StatusTransition.op_Equality(EPiServer.Core.StatusTransition,EPiServer.Core.StatusTransition)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.StatusTransition.op_Inequality(EPiServer.Core.StatusTransition,EPiServer.Core.StatusTransition)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.StatusTransition.Unversioned(System.Boolean)">
      <summary>
            Gets a <see cref="T:EPiServer.Core.StatusTransition" /> that represents the standard transition for an Unversioned content item.
            </summary>
      <param name="isNewContent">Value indicating if the unversioned content never been saved before</param>
    </member>
    <member name="T:EPiServer.Core.StatusTransitionEvaluatorExtensions">
      <summary>
            Extension methods for the <see cref="T:EPiServer.Core.IStatusTransitionEvaluator" /> interface.
            </summary>
    </member>
    <member name="M:EPiServer.Core.StatusTransitionEvaluatorExtensions.IsNewVersionRequired(EPiServer.Core.IStatusTransitionEvaluator,EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
      <summary>
            Evaluates if it will be required to create a new version if the provided action 
            is taken on a content item.
            </summary>
      <param name="evaluator">The evaluator that will evaluate the transition.</param>
      <param name="content">The content item that should be evaluated.</param>
      <param name="action">The suggested action to take.</param>
      <returns>
        <c>true</c> if the action requires a new version to be created; othewise <c>false</c>.</returns>
      <remarks>The return value will be <c>false</c> if the the provided action isn't valid.</remarks>
    </member>
    <member name="T:EPiServer.Core.ThumbnailHelper">
      <summary>
            Helper methods when working with thumbnails
            </summary>
    </member>
    <member name="P:EPiServer.Core.ThumbnailHelper.ThumbnailExtension">
      <summary>
            The extension for thumbnails which is '.png'
            </summary>
    </member>
    <member name="M:EPiServer.Core.ThumbnailHelper.CreateThumbnailUri(System.Uri,System.String)">
      <summary>
            Constructs a thumbnail uri from a blob uri
            </summary>
      <param name="blobUri">The source uri to the source blob / image</param>
      <param name="propertyName">The name of the property of the thumbnail</param>
      <returns>An uri to the thumbnail</returns>
    </member>
    <member name="T:EPiServer.Core.Transfer.ContentTransferContext">
      <summary>
            Base class for context used in import/export.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.ContentTransferContext.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.FileTransfer">
      <summary>
            Gets the file transfer object, that holds the functionality to transfer files..
            </summary>
      <value>The file transfer object.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.Log">
      <summary>
            Gets the log handler for the transfer functionality.
            </summary>
      <value>The log handler.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.IncludeImplicitContentDependencies">
      <summary>
            Gets or sets a value indicating whether to implicitly include referenced content items.
            </summary>
      <value>
        <c>true</c> if referenced items should be implicitly included; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.IncludeImplicitContentTypeDependencies">
      <summary>
            Gets or sets a value indicating whether to implicitly include referenced content types.
            </summary>
      <value>
        <c>true</c> if referenced content types should be implicitly included; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.ExcludeFiles">
      <summary>
            Gets or sets a value indicating whether to exclude refered files.
            </summary>
      <value>
        <c>true</c> if files should be excluded; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.ContentTypes">
      <summary>
            The content types to export.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.ImplicitContents">
      <summary>
            Gets the contents that have been implicitly added to package.
            </summary>
      <remarks>
            The typical case for an implicitly added content is when a page references a global block. In that case
            the global block is implicitly added to the export package.
            </remarks>
      <value>The implicit contents.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.DestinationRoot">
      <summary>
            The destination root where new content items should be created.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.SaveAction">
      <summary>
            Gets or sets the action that should be used when importing content.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.LinkGuidMap">
      <summary>
            Gets the look up table between incoming content Guids (page / files) and outgoing links.
            </summary>
      <value>The map old GUID new link.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.SourceRoots">
      <summary>
            Gets the source roots for the transfered content.
            </summary>
      <value>The source roots for the transfered content.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.KeepIdentity">
      <summary>
            Allow content to be synchronized during import operation.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.ContentLanguages">
      <summary>
            Gets the content languages to transfer, if no list of languages is in the list all languages is transfered.
            </summary>
      <value>The content languages to be transfered.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.ForceNewIdentitiesOnExport">
      <summary>
            Gets or sets a value indicating whether to force new content identifiers for the mirrored content.
            </summary>
      <value>
        <c>true</c> if new identies should be forced; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.ContentTypesMap">
      <summary>
            Gets the look up table between incoming content type names and existing content type GUIDs.
            </summary>
      <value>The map content type name from package and existing content type GUID.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ContentTransferContext.TransferType">
      <summary>
            Gets or sets the type for the transfer operation.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.ExportSource">
      <summary>
            The export source is used to represent a page to be copied.
            </summary>
    </member>
    <member name="F:EPiServer.Core.Transfer.ExportSource.RecursiveLevelInfinity">
      <summary>
            The whole structure is included.
            </summary>
    </member>
    <member name="F:EPiServer.Core.Transfer.ExportSource.NonRecursive">
      <summary>
            Only the page is included in the package, non recursive.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.ExportSource.#ctor(EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.ExportSource" /> class with recursive set to true and recursive level set to infinity.
            </summary>
      <param name="contentLink">The source root.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.ExportSource.#ctor(EPiServer.Core.ContentReference,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.ExportSource" /> class.
            </summary>
      <param name="contentLink">The source root.</param>
      <param name="recursionLevel">The recusion level.</param>
    </member>
    <member name="P:EPiServer.Core.Transfer.ExportSource.ContentLink">
      <summary>
            Gets or sets the content source to export from.
            </summary>
      <value>The source root.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ExportSource.RecursiveLevel">
      <summary>
            Gets or sets the maximum recursion depth (RecursiveLevelInfinity or -1 for infinite).
            </summary>
      <value>The recursive level.</value>
    </member>
    <member name="T:EPiServer.Core.Transfer.ExportTransformPropertyEventArgs">
      <summary>
            Event argument used when exporting property. Event handlers can be used to handle the data transfrom from site format to export format.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.ExportTransformPropertyEventArgs.#ctor(EPiServer.Core.Transfer.TransferExportOptions,EPiServer.Core.RawProperty,EPiServer.Core.PropertyData,EPiServer.Core.RawContent,EPiServer.Core.IContent)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.Transfer.ExportTransformPropertyEventArgs" /></summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ExportTransformPropertyEventArgs.Options">
      <summary>
            The options that is used during export.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.IContentCopyHandler.Copy(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel,System.Boolean)">
      <summary>
            Copy content to another container syncronously.
            </summary>
      <param name="contentLink">The link to the content data to copy.</param>
      <param name="destinationLink">The container where the content data will be copied.</param>
      <param name="requiredSourceAccess">The required source access to check access against</param>
      <param name="publishOnDestination">If the new content data should be published on the destination.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.Transfer.IContentExporter">
      <summary>
            Signture for component that export content items.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.IContentExporter.Export(EPiServer.Core.IContent,EPiServer.Security.AccessLevel,EPiServer.Core.Transfer.IContentTransferContext,EPiServer.Core.Transfer.TransferExportOptions)">
      <summary>
            Exports the specified content.
            </summary>
      <param name="content">The content item that is to be exported</param>
      <param name="requiredSourceAccess">The required source access.</param>
      <param name="context">The context for the export</param>
      <param name="options">Options specified for the export</param>
      <returns>An ITransferContentData to represent a content to be transferred.</returns>
    </member>
    <member name="T:EPiServer.Core.Transfer.IContentImporter">
      <summary>
            Signature for component that imports content
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.IContentImporter.Import(EPiServer.Core.Transfer.ITransferContentData,EPiServer.Security.AccessLevel,EPiServer.Core.Transfer.IContentTransferContext,EPiServer.Core.Transfer.TransferImportOptions)">
      <summary>
            Imports the specified content.
            </summary>
      <param name="content">The content.</param>
      <param name="requiredDestinationAccess">The required destination access.</param>
      <param name="context">The context for the import</param>
      <param name="options">Options specified for the import</param>
      <returns>
            A content reference for the imported content.
            </returns>
    </member>
    <member name="T:EPiServer.Core.Transfer.IContentTransferContext">
      <summary>
            Context for transfer of contents
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.IncludeImplicitContentDependencies">
      <summary>
            Gets a value indicating whether to implicitly include referenced global contents.
            </summary>
      <value>
        <c>true</c> if referenced global contents should be implicitly included; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.IncludeImplicitContentTypeDependencies">
      <summary>
            Gets a value indicating whether to implicitly include referenced global content types.
            </summary>
      <value>
        <c>true</c> if referenced global content types should be implicitly included; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.ContentTypes">
      <summary>
            Gets the content types.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.ImplicitContents">
      <summary>
            Gets the implicit contents.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.CopiedContentLink">
      <summary>
            Gets or sets the the content link used as root of the copied contents.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.Log">
      <summary>
            Gets the logger for the context.
            </summary>
      <value>The logger.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.DestinationRoot">
      <summary>
            Gets or sets the destination root for the transfer.
            </summary>
      <value>The destination root.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.IgnoreHierarchy">
      <summary>
            Gets a value indicating if the page hierarchy shoud be ignored for the destination pages (all pages will be stored below the destination root).
            </summary>
      <value>
        <c>true</c> if the page hierarchy should be ]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.SaveAction">
      <summary>
            Gets the save action for the copied pages.
            </summary>
      <value>The save action for the copy pages</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.LinkGuidMap">
      <summary>
            Gets the lookup table between page old and new Guids.
            </summary>
      <value>The map old GUID new link.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.SourceRoots">
      <summary>
            Gets the roots to tranfer pages from.
            </summary>
      <value>A list of source roots.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.FileTransfer">
      <summary>
            Gets the file transfer functionality.
            </summary>
      <value>The object used to transfer files.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.KeepIdentity">
      <summary>
            Set to true if a copy, import or export operation should retain the Guid of the pages.
            Set to false to always create a new page at the destination.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.IContentTransferContext.Abort">
      <summary>
            Aborts the transfer.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.IsAborting">
      <summary>
            Gets a value indicating whether the transfer is aborting.
            </summary>
      <value>
        <c>true</c> if the transfer is aborting; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.IsDone">
      <summary>
            Gets a value indicating whether the transfer is done.
            </summary>
      <value>
        <c>true</c> if the transfer is done; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.ContentLanguages">
      <summary>
            Gets the  content languages to transfer, if no list of languages is in the list all languages is transfered.
            </summary>
      <value>The languages to be transfered.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.ForceNewIdentitiesOnExport">
      <summary>
            Gets or sets a value indicating whether to force new page identifiers for the mirrored pages.
            </summary>
      <value>
        <c>true</c> if [force new identities]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.ContentTypesMap">
      <summary>
            Gets the look up table between incoming content type names and existing content type GUIDs.
            </summary>
      <value>The map for content type name from package and existing content type GUID.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransferContext.TransferType">
      <summary>
            Gets or sets the type of the transfer.
            </summary>
      <value>The type of the transfer.</value>
    </member>
    <member name="M:EPiServer.Core.Transfer.IContentTransferContext.OnImportProperty(EPiServer.Core.Transfer.TransformPropertyEventArgs)">
      <summary>
            Raises the event to import a property.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Core.Transfer.TransformPropertyEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.IContentTransferContext.OnExportProperty(EPiServer.Core.Transfer.TransformPropertyEventArgs)">
      <summary>
            Raises the event to export a property.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Core.Transfer.TransformPropertyEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Core.Transfer.IDependentContentTransfer">
      <summary>
            Interface that handles dependent content in export
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.IExportable">
      <summary>
            Defines the signature for a component that controls how it should be handled during export.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.IExportable.ShouldBeImplicitlyExported">
      <summary>
            Gets a value indicating whether this instance should be implicitly added to export package when referenced 
            by some entity that is exported.
            </summary>
      <value>
        <c>true</c> if instance should implicity be added to export package when referenced; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Core.Transfer.IFileTransfer">
      <summary>
            The base interface for handling files with the transfer functionality. 
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.IFileTransfer.TryAddBlob(EPiServer.Framework.Blobs.Blob)">
      <summary>
            Adds a <see cref="T:EPiServer.Framework.Blobs.Blob" /> instance to the package.
            </summary>
      <param name="blob">The BLOB.</param>
      <returns>true if the blob was added else false.</returns>
    </member>
    <member name="M:EPiServer.Core.Transfer.IFileTransfer.TryAddFile(System.String,System.String@)">
      <summary>
            Tries to add the file to the package.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="addedFilePath">The added file path.</param>
      <returns>true if the file was added else false.</returns>
    </member>
    <member name="P:EPiServer.Core.Transfer.IFileTransfer.Files">
      <summary>
            Returns a list of all files. 
            </summary>
      <value>The files to be transferred.</value>
    </member>
    <member name="M:EPiServer.Core.Transfer.IFileTransfer.Export">
      <summary>
            Exports all files to an IFileTransferObject.
            </summary>
      <returns>A file transfer object</returns>
    </member>
    <member name="M:EPiServer.Core.Transfer.IFileTransfer.Import(EPiServer.Core.Transfer.IFileTransferObject)">
      <summary>
            Imports a file transfer object.
            </summary>
      <param name="metaData">The file transfer object to import.</param>
      <returns>A file transfer object, if null is returned no data is imported.</returns>
    </member>
    <member name="P:EPiServer.Core.Transfer.IFileTransfer.TransferContext">
      <summary>
            Gets or sets the transfer context.
            </summary>
      <value>
            The transfer context.
            </value>
    </member>
    <member name="T:EPiServer.Core.Transfer.IFileTransferObject">
      <summary>
            A holder for files to be transferred.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.IFileTransferObject.Url">
      <summary>
            Gets or sets the URL for the file
            </summary>
      <value>The URL.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IFileTransferObject.PermanentLinkVirtualPath">
      <summary>
            Gets the permanent link virtual path
            </summary>
      <value>The permanent link virtual path</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IFileTransferObject.ProviderName">
      <summary>
            Gets or sets the name of the provider for the transfered file.
            </summary>
      <value>The name of the provider.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IFileTransferObject.ProviderRelativePath">
      <summary>
            Gets or sets the provider relative path for the transfered file.
            </summary>
      <value>The provider relative path.</value>
    </member>
    <member name="M:EPiServer.Core.Transfer.IFileTransferObject.OpenRead">
      <summary>
            Opens the read stream for this file.
            </summary>
      <returns>A read stream.</returns>
    </member>
    <member name="M:EPiServer.Core.Transfer.IFileTransferObject.OpenWrite(EPiServer.Core.Transfer.IContentTransferContext)">
      <summary>
            Opens a write stream for the file.
            </summary>
      <param name="context">The context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Transfer.IFileTransferObject.CheckIn(System.String)">
      <summary>
            Check in the file.
            </summary>
      <param name="commment">The commment.</param>
    </member>
    <member name="P:EPiServer.Core.Transfer.IFileTransferObject.ProviderRelativeUnifiedPath">
      <summary>
            Gets or sets the unified path to the UnifiedPath (reltive the specified provider) that ACL is specified on
            </summary>
      <value>The unified path.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.IFileTransferObject.RawACL">
      <summary>
            The ACL for the file
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.IImplicitContentExporter">
      <summary>
            Adds content to the implicitly exported list.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.IImplicitContentExporter.ExportDependentContent(EPiServer.Core.IContent,EPiServer.Core.Transfer.IContentTransferContext)">
      <summary>
            Add content to the list of implicitly exported content.
            </summary>
      <param name="content">The content that should be added to the implicitly exported content</param>
      <param name="transferContext">The current transfer context.</param>
    </member>
    <member name="T:EPiServer.Core.Transfer.ImportTransformPropertyEventArgs">
      <summary>
            Event argument used when importing property. Event handlers can be used to handle the data transfrom from import format to site format.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.ImportTransformPropertyEventArgs.#ctor(EPiServer.Core.Transfer.TransferImportOptions,EPiServer.Core.RawProperty,EPiServer.Core.PropertyData,EPiServer.Core.RawContent,EPiServer.Core.IContent)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Core.Transfer.ImportTransformPropertyEventArgs" /></summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ImportTransformPropertyEventArgs.Options">
      <summary>
            The options that where used during import.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.BinaryStorablePropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The transfer object for <see cref="T:EPiServer.Framework.Blobs.Blob" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject" /> class.
            </summary>
      <remarks>
            This is used at import side from XmlSerializer.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.#ctor(EPiServer.Framework.Blobs.IBlobFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject" /> class.
            </summary>
      <param name="blobFactory">The BLOB factory.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.Url">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.PermanentLinkVirtualPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.ProviderRelativeUnifiedPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.RawACL">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.ProviderName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.ProviderRelativePath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.OpenRead">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.OpenWrite(EPiServer.Core.Transfer.IContentTransferContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BinaryStorableTransferObject.CheckIn(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.BlobTransfer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. <see cref="T:EPiServer.Core.Transfer.IFileTransfer" /> implemenation that takes care of Export/Import of <see cref="T:EPiServer.Framework.Blobs.Blob" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BlobTransfer.#ctor(EPiServer.Web.IPermanentLinkMapper,EPiServer.IContentRepository,EPiServer.Framework.Blobs.IBlobFactory,EPiServer.Core.Transfer.IImplicitContentExporter)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.BlobTransfer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BlobTransfer.TryAddBlob(EPiServer.Framework.Blobs.Blob)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a <see cref="T:EPiServer.Framework.Blobs.Blob" /> instance to the package.
            </summary>
      <param name="blob">The BLOB.</param>
      <returns>
            true if the blob was added else false.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BlobTransfer.TryAddFile(System.String,System.String@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to add the file to the package.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="addedFilePath">The added file path.</param>
      <returns>true if the file was added else false.</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.BlobTransfer.Files">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns a list of all files.
            </summary>
      <value>The files to be transferred.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BlobTransfer.Export">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Exports all files to IFileTransferObject instances.
            </summary>
      <returns>A file transfer object</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BlobTransfer.Import(EPiServer.Core.Transfer.IFileTransferObject)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Imports a file transfer object.
            </summary>
      <param name="metaData">The file transfer object to import.</param>
      <returns>
            A file transfer object, if null is returned no data is imported.
            </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.BlobTransfer.TransferContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the transfer context.
            </summary>
      <value>The transfer context.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.BlockPropertyTypeResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves a <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> from an imported <see cref="T:EPiServer.DataAbstraction.BlockTypeReference" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BlockPropertyTypeResolver.#ctor(EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.DataAbstraction.IContentTypeRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.BlockPropertyTypeResolver" /> class.
            </summary>
      <param name="propertyDefinitionTypeRepository">The property definition type repository.</param>
      <param name="contentTypeRepository">The content type repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BlockPropertyTypeResolver.GetBlockPropertyDefinitionType(EPiServer.DataAbstraction.BlockTypeReference,System.String,System.String,System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.BlockType})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the type of the block property definition that corresponds to an imported <see cref="T:EPiServer.DataAbstraction.BlockTypeReference" />.
            </summary>
      <param name="importedReference">The imported reference.</param>
      <param name="propertyTypeName">Name of the property type.</param>
      <param name="propertyAssemblyName">Name of the property assembly.</param>
      <param name="importedBlockTypes">The imported block types.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.CategorizablePropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ChangeTrackablePropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ContentAssetPropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ContentMediaPropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ContentNameTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ContentPropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ContentRoot">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ContentRootResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.BlockTypeTransferObject">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Transfer object used to serialize <see cref="T:EPiServer.DataAbstraction.BlockType" /> into import/export package.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BlockTypeTransferObject.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.BlockTypeTransferObject" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BlockTypeTransferObject.#ctor(EPiServer.DataAbstraction.BlockType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.BlockTypeTransferObject" /> class.
            </summary>
      <param name="blockType">Type of the block.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.BlockTypeTransferObject.CreateInstance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the instance.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Transfer object used to serialize <see cref="T:EPiServer.DataAbstraction.ContentType" /> into import/export package.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.#ctor(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject" /> class.
            </summary>
      <param name="contentType">Type of the content.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.ID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the unique identifier for this content type instance.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.GUID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the globally unique identifier for this content type instance.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.VersionString">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the version of this content type instance.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.Created">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the created date of this content type instance.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.Saved">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the save date of this content type instance.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.SavedBy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the saved by of this content type instance.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the name of this content type instance.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.DisplayName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the diplay name of this content type instance.
            </summary>
      <remarks>
            This is the name for the content type in UI. When accessing the content type programatically <see cref="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.Name" /> should be used.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.Description">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the description of this content type instance.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.Base">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the base for this content type instance.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.IsAvailable">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets if the <see cref="T:EPiServer.DataAbstraction.ContentType" /> should be available in edit mode.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.SortOrder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the default sort index based on other types
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.PropertyDefinitions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionCollection" /> containing all property definitions used by this content type.
            </summary>
      <remarks>
                The contents of this collection will not be persisted when the page or block that uses it is saved.
                If you want to work with property definitions, use the <see cref="T:EPiServer.DataAbstraction.IPropertyDefinitionRepository" />.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.ModelTypeString">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the type name of the model used to represent this type
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.DefaultWebFormTemplateString">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the type name of the model used to represent this type
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.DefaultMvcControllerString">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the type name of the mvc controller used to represent this type
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.DefaultMvcPartialView">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the name of the mvc partial view used to represent this type
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.ToContentType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Toes the type of the content.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.ContentTypeTransferObject.CreateInstance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the instance.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.DefaultContentExporter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.DefaultContentImporter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.DefaultImplicitContentExporter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.DefaultPropertyExporter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.DefaultRawContentRetriever">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles creation of <see cref="T:EPiServer.Core.RawContent" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.DefaultRawContentRetriever.CreateRawContentInfo(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the RawContentInfo corresponding to the referenced content
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>A RawPageInfo instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.DefaultRawContentRetriever.CreateRawContentInfo(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the raw content info.
            </summary>
      <param name="content">The content.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.DefaultRawContentRetriever.CreateRawContent(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a <see cref="T:EPiServer.Core.RawContent" /> from an <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <param name="content">The content.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.DefaultRawPropertyRetriever">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ExportableLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The import and export uses the class to do following:
            It creates exportimporthandlermap.xml file which contains type handler information
            In the export side: Create a specific xml file for each handler and the export handle writes custom data to it.
            In the import side: The import handler be called with the exported data.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer.ExportImportMode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies in which mode the transfer is executing.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer.ExportImportMode.None">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Not executing in a specified mode.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer.ExportImportMode.Export">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executing as part of export.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer.ExportImportMode.Import">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executing as part of import.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer.ExportImportMode.ExportAndImport">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Execute as part of both import and export.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer.#ctor(System.IO.Packaging.ZipPackage,EPiServer.Core.Transfer.IContentTransferContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer.Export">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Exports custom data. 
            Create a exportimporthandlermap.xml which contains map information about file path (uri) and exportimport handler type.
            For each export/import handler creates a file which the handler writes/reads data to/from.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer.Import">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Import custom data
            Call import on the transferhandlers if there is a handler on the context 
            which match the typeinfo call import on it otherwise create an instance of the type
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.ExportImportHandledTransfer.Dispose">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ZipPackageHanlder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create and delete zip file for export /import file
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.FileTransferObject">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The file transfer object is used to store files included in the transfer process.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.FileTransferObject.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.FileTransferObject" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.FileTransferObject.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.FileTransferObject" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.FileTransferObject.#ctor(System.String,EPiServer.IContentRepository,EPiServer.Web.IPermanentLinkMapper,EPiServer.Core.ContentAssetHelper,EPiServer.Framework.Blobs.IBlobFactory,EPiServer.DataAbstraction.IContentSecurityRepository,EPiServer.Core.ContentMediaResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.FileTransferObject" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.Url">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the URL for the file.
            </summary>
      <remarks>
            This property should not be used, instead should <see cref="P:EPiServer.Core.Transfer.Internal.FileTransferObject.ProviderRelativePath" /> be used.
            </remarks>
      <exception cref="T:EPiServer.Core.EPiServerException">Is thrown from both getter and setter.</exception>
      <value>The URL.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.ProviderName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the name of the provider for the transfered file.
            </summary>
      <value>The name of the provider.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.ProviderRelativePath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the provider relative path for the transfered file.
            </summary>
      <value>The provider relative path.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.PageGuid">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the page identity if the file is a page folder file.
            </summary>
      <value>The page identity of the page that this file contains.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.Changed">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the changed time for the file.
            </summary>
      <value>The date when the file was last updated.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.ForceNewFileObject">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets a value indicating whether the file should be created with a new identity.
            </summary>
      <value>
        <c>true</c> if the file should be created with a new identity; otherwise, <c>false</c>.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.PermanentLinkVirtualPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the virtual path in the permanent link format for the file.
            </summary>
      <value>The permanent link virtual path</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.ProviderRelativeUnifiedPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the UnifiedPath (relative the specified provider) that ACL is specified on
            </summary>
      <value>The unified path.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.RawACL">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the ACL for the file.
            </summary>
      <value>
      </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.SummaryKeys">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the summary keys for file metadata.
            </summary>
      <value>The summary keys.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.FileTransferObject.SummaryValues">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the summary values for file metadata.
            </summary>
      <value>The summary values.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.FileTransferObject.FillSummary(EPiServer.Core.IContentMedia,EPiServer.Core.Transfer.IContentTransferContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Fills the summary with information from this instance.
            </summary>
      <param name="media">The summary object to fill with data.</param>
      <param name="context">The context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.FileTransferObject.OpenRead">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Opens a stream for reading this file.
            </summary>
      <returns>A read stream.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.FileTransferObject.OpenWrite(EPiServer.Core.Transfer.IContentTransferContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Opens a stream for writing to this file.
            </summary>
      <param name="context">The transfer context.</param>
      <returns>A write stream.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.FileTransferObject.CheckinIfVersionedFile">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks if transferred file is versioned, if so and if the file is checked out the file is checked in.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.FileTransferObject.IsPageFolderForPage(EPiServer.Core.PageData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the file belong to page folder.
            </summary>
      <param name="page">The page.</param>
      <returns>
        <c>true</c> if the file is belong to page folder otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.IInterfacePropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Defines the signature for a component that is registered to handle export and import of properties for a specific interface.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.InterfacePropertyTransform`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ImportedContentData">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Holds RawContents and organize them by language and help function to read properties from master content properties and stc.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.IPropertyExporter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.IPropertyImporter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Signature for component that import properties
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.IRawContentRetriever">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Used to get a data transfer format for an <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.IRawContentRetriever.CreateRawContentInfo(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an <see cref="T:EPiServer.Core.RawContentInfo" /> instance from an <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <param name="content">The <see cref="T:EPiServer.Core.IContent" /> instance to get an raw representation for</param>
      <returns>An <see cref="T:EPiServer.Core.RawContentInfo" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.IRawContentRetriever.CreateRawContentInfo(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an <see cref="T:EPiServer.Core.RawContentInfo" /> corresponding to the referenced content.
            </summary>
      <remarks>
            If <paramref name="languageBranch" /> is null the master language for the content instance is used.
            </remarks>
      <param name="contentLink">The content link to get raw representation for</param>
      <param name="languageBranch">The language branch to get raw representation for. If null is given master language is used</param>
      <returns>An <see cref="T:EPiServer.Core.RawContentInfo" /> instance</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.IRawPropertyRetriever">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.LocalizablePropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.MediaFileTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.MultiplexingFileTransfer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. <see cref="T:EPiServer.Core.Transfer.IFileTransfer" /> implementation that encapsulates other <see cref="T:EPiServer.Core.Transfer.IFileTransfer" /> instances and delegates the calls.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.MultiplexingFileTransfer.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.Transfer.IFileTransfer})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.MultiplexingFileTransfer" /> class.
            </summary>
      <param name="fileTransfers">The file transfers.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.MultiplexingFileTransfer.TryAddBlob(EPiServer.Framework.Blobs.Blob)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a <see cref="T:EPiServer.Framework.Blobs.Blob" /> instance to the package.
            </summary>
      <param name="blob">The BLOB.</param>
      <returns>
            true if the blob was added else false.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.MultiplexingFileTransfer.TryAddFile(System.String,System.String@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to add the file to the package.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="addedFilePath">The added file path.</param>
      <returns>true if the file was added else false.</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.MultiplexingFileTransfer.Files">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns a list of all files.
            </summary>
      <value>The files to be transferred.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.MultiplexingFileTransfer.Export">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Exports all files to an IFileTransferObject.
            </summary>
      <returns>A file transfer object</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.MultiplexingFileTransfer.Import(EPiServer.Core.Transfer.IFileTransferObject)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Imports a file transfer object.
            </summary>
      <param name="metaData">The file transfer object to import.</param>
      <returns>
            A file transfer object, if null is returned no data is imported.
            </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.MultiplexingFileTransfer.TransferContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the transfer context.
            </summary>
      <value>The transfer context.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PageTypeTransferObject">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Transfer object used to serialize <see cref="T:EPiServer.DataAbstraction.PageType" /> into import/export package.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.PageTypeTransferObject.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.PageTypeTransferObject" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.PageTypeTransferObject.#ctor(EPiServer.DataAbstraction.PageType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.Internal.PageTypeTransferObject" /> class.
            </summary>
      <param name="pageType">Type of the page.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.PageTypeTransferObject.TemplatePath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the template path.
            </summary>
      <value>The template path.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.PageTypeTransferObject.Defaults">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the defaults.
            </summary>
      <value>The defaults.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.PageTypeTransferObject.ACL">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the ACL.
            </summary>
      <value>The ACL.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.PageTypeTransferObject.ToContentType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Toes the type of the content.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.PageTypeTransferObject.CreateInstance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the instance.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyBlobTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyBlockTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyCategoryTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyContentAreaTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyContentReferenceListTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyContentReferenceTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Transfer the <see cref="T:EPiServer.Core.PropertyContentReference" /> property for the transfer functionality.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Transfer.Internal.PropertyContentReferenceTransform.HandleUnmappedProperties(System.Collections.Generic.ICollection{System.Guid},EPiServer.IContentRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will check if there are any stored properties of type PropertyContentReference that has LinkGuid filed set
            but not PageLink field. For those that has that and LinkGuid matches a page in importedPages the property
            is resaved to update PageLink.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyDateTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyFrameTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyGuidTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyJsonTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyPageTypeTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyTransform`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyUrlTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.PropertyXhtmlTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Transform a <see cref="T:EPiServer.SpecializedProperties.PropertyXhtmlString" /> property for the transfer functionality.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ResourceablePropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.RoutablePropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.TransferContentData">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Content holder for the transfer functionality. 
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.TransferContentData.RawContentData">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the master language for the page.
            </summary>
      <value>The raw page data for the master language.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.TransferContentData.RawLanguageData">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the list of language data for the page.
            </summary>
      <value>A list of raw pages.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.TransferContentData.LanguageSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the language settings.
            </summary>
      <value>
            The language settings.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.TransferContentData.ContentLanguageSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the list language settings for the page to transfer.
            </summary>
      <value>The language settings.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.TransferContentData.DynamicProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the dynamic properties for the page to transfer.
            </summary>
      <value>The dynamic properties.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.TransferPageData">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Page holder for the transfer functionality. 
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.TransferPageData.RawPageData">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the master language for the page.
            </summary>
      <value>The raw page data for the master language.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.TransferPageData.RawLanguageData">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the list of language data for the page.
            </summary>
      <value>A list of raw pages.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.TransferPageData.LanguageSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the list language settings for the page to transfer.
            </summary>
      <value>The language settings.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.TransferPageData.ContentLanguageSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the content language settings.
            </summary>
      <value>
            The content language settings.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.Internal.TransferPageData.DynamicProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the dynamic properties for the page to transfer.
            </summary>
      <value>The dynamic properties.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.VersionablePropertyTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.Internal.ContentTransfer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Transfer.IPropertyTransform">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Interface to implement when a <see cref="T:EPiServer.Core.PropertyData" /> value need to be transformed during export and/or import.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.IPropertyTransform.TransformForExport(EPiServer.Core.PropertyData,EPiServer.Core.RawProperty,EPiServer.Core.Transfer.PropertyExportContext)">
      <summary>
            Maps values of the source <see cref="T:EPiServer.Core.PropertyData" /> object to the 
            provided <see cref="T:EPiServer.Core.RawProperty" /> output during export.
            </summary>
      <param name="source">The source property that is being exported.</param>
      <param name="output">The raw property that will be added to the export package.</param>
      <param name="context">The context in which the property is being exported.</param>
      <returns>true if the property has been handled; otherwise false</returns>
    </member>
    <member name="M:EPiServer.Core.Transfer.IPropertyTransform.TransformForImport(EPiServer.Core.RawProperty,EPiServer.Core.PropertyData,EPiServer.Core.Transfer.PropertyImportContext)">
      <summary>
            Maps values of the source <see cref="T:EPiServer.Core.RawProperty" /> object to the 
            provided <see cref="T:EPiServer.Core.PropertyData" /> output during import.
            </summary>
      <param name="source">The raw source property that is being imported.</param>
      <param name="output">The property which value is being imported.</param>
      <param name="context">The context in which the property is being imported.</param>
      <returns>true if the property has been handled; otherwise false</returns>
    </member>
    <member name="T:EPiServer.Core.Transfer.IReferenceMap">
      <summary>
            IReference mapper is an interface to implement for properties with references to be able to replace all references 
            when transfering the property.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.IReferenceMap.ReferencedPermanentLinkIds">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this property.
            </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this property.</value>
    </member>
    <member name="M:EPiServer.Core.Transfer.IReferenceMap.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>
            Remaps permanent links according to the provided link mapping.
            </summary>
      <param name="idMap">The link mapping.</param>
    </member>
    <member name="T:EPiServer.Core.Transfer.ITransferContentData">
      <summary>
            Represents the transfer format of Content .
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.TypeOfTransfer">
      <summary>
            Type of transfer Operation
            </summary>
    </member>
    <member name="F:EPiServer.Core.Transfer.TypeOfTransfer.Unspecified">
      <summary>
            Normal and neutral operation
            </summary>
    </member>
    <member name="F:EPiServer.Core.Transfer.TypeOfTransfer.Importing">
      <summary>
            Normal Importing operation
            </summary>
    </member>
    <member name="F:EPiServer.Core.Transfer.TypeOfTransfer.Exporting">
      <summary>
            Normal Exporting operation
            </summary>
    </member>
    <member name="F:EPiServer.Core.Transfer.TypeOfTransfer.MirroringImporting">
      <summary>
            Mirroring Importing operation
            </summary>
    </member>
    <member name="F:EPiServer.Core.Transfer.TypeOfTransfer.MirroringExporting">
      <summary>
            Mirroring Exporting operation
            </summary>
    </member>
    <member name="F:EPiServer.Core.Transfer.TypeOfTransfer.Copying">
      <summary>
            Normal Copy/Paste operation
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.ITransferHandlerContext">
      <summary>
            Specifies the current operation
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ITransferHandlerContext.TransferType">
      <summary>
            Gets or sets the type of the transfer.
            </summary>
      <value>The type of the transfer.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ITransferHandlerContext.TransferHandlers">
      <summary>
            Gets the transfer handlers.
            </summary>
      <value>The transfer handlers.</value>
    </member>
    <member name="T:EPiServer.Core.Transfer.ITransferLogger">
      <summary>
            Contains log information about an export or import execution
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.ITransferLogger.Error(System.String,System.Exception,System.Object[])">
      <summary>
            Logs an error message.
            </summary>
      <param name="errormsg">The error message</param>
      <param name="e">The generated exception message</param>
      <param name="args">Optional arguments.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.ITransferLogger.Warning(System.String,System.Object[])">
      <summary>
            Logs a warning message.
            </summary>
      <param name="warning">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="P:EPiServer.Core.Transfer.ITransferLogger.Errors">
      <summary>
            A collection of errors that has been captured during execution.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ITransferLogger.Status">
      <summary>
            A collection of warnings that has been added by calls to the LogWarning method.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ITransferLogger.Warnings">
      <summary>
            A collection of warnings that has been captured during execution.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.ITransferLogger.GetInformationLog(EPiServer.Util.StatusInfo.StatusInfoAction)">
      <summary>
            Gets log messages about a specific action
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.ITransferPageData">
      <summary>
            Represents the transfer format of a PageData instance.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.ITransferPageData.RawPageData">
      <summary>
            Gets or sets the RawPage for the master language version.
            </summary>
      <value>The raw page data.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ITransferPageData.RawLanguageData">
      <summary>
            Gets the list of RawPage instances for none master languages for the page.
            </summary>
      <value>The raw language data.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ITransferPageData.LanguageSettings">
      <summary>
            Gets or sets the language settings for the page.
            </summary>
      <value>The language settings.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.ITransferPageData.DynamicProperties">
      <summary>
            Gets or sets the dynamic properties for the page.
            </summary>
      <value>The dynamic properties.</value>
    </member>
    <member name="T:EPiServer.Core.Transfer.PropertyExportContext">
      <summary>
            Holds the context when transforming properties for Export.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.PropertyExportContext.TransferContext">
      <summary>
            Gets or sets the context of the whole transfer.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.PropertyExportContext.TransferOptions">
      <summary>
            Gets or sets the options defined for the whole transfer.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.PropertyExportContext.Source">
      <summary>
            Gets or sets the source content currently being exported. 
            </summary>
      <remarks>
            This item is always the referable content item and not necessarily the 
            item containing the property currently being exported.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.Transfer.PropertyExportContext.Output">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.RawContent" /> output currently being constructed.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.PropertyImportContext">
      <summary>
            Holds the context when transforming properties for Export.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.PropertyImportContext.TransferContext">
      <summary>
            Gets or sets the context of the whole transfer.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.PropertyImportContext.TransferOptions">
      <summary>
            Gets or sets the options defined for the whole transfer.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.PropertyImportContext.Source">
      <summary>
            Gets or sets the source content currently being imported. 
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.PropertyImportContext.Output">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.IContent" /> output currently being constructed
            during the import.
            </summary>
      <remarks>
            This item is always the referable content item and not necessarily the 
            item containing the property currently being imported.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.Transfer.RegisterTransferHandler">
      <summary>
            Help to register custom transfer handler in the case of Exporting/mportin/PageTransfering. (e.g DynamicDataTransferHandlerregister)
            </summary>
    </member>
    <member name="E:EPiServer.Core.Transfer.RegisterTransferHandler.RegisterTransferHandlers">
      <summary>
            Occurs when register transfer handlers.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.RegisterTransferHandlerEventArgs">
      <summary>
            Occurs when a module try to transfering data. 
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.RegisterTransferHandlerEventArgs.#ctor(System.Collections.Generic.List{EPiServer.Core.Transfer.TransferHandlerBase},EPiServer.Core.Transfer.TypeOfTransfer)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.RegisterTransferHandlerEventArgs" /> class.
            </summary>
      <param name="handlers">The handlers.</param>
      <param name="transferType">Type of the transfer.</param>
    </member>
    <member name="P:EPiServer.Core.Transfer.RegisterTransferHandlerEventArgs.RegisteredHandlers">
      <summary>
            Gets the registered handlers.
            </summary>
      <value>The registered handlers.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.RegisterTransferHandlerEventArgs.TransferType">
      <summary>
            Gets the type of transfer.
            </summary>
      <value>The type of the transfer.</value>
    </member>
    <member name="T:EPiServer.Core.Transfer.TransferExportOptions">
      <summary>
            Specifies options used during export
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferExportOptions.AutoCloseStream">
      <summary>
            Specifies if the stream should be automatically closed after import
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferExportOptions.RequiredSourceAccess">
      <summary>
            Specifies the required access level for content exporting.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferExportOptions.ExcludeFiles">
      <summary>
            Gets or sets a value indicating whether to exclude referenced files.
            </summary>
      <value>
        <c>true</c> if files should be excluded; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferExportOptions.IsTest">
      <summary>
            If the current export should be started in test mode.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferExportOptions.IncludeReferencedContentTypes">
      <summary>
            Specifies if referenced content types should be exported.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferExportOptions.ExportPropertySettings">
      <summary>
            Specifies if proerpty settings should be included in the export package
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferExportOptions.TransferType">
      <summary>
            Specifies which type of export it should be executed as.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.TransferHandlerBase">
      <summary>
            Base class to handle and transfer custom data
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferHandlerBase.ConentLanguageTransfering(EPiServer.Core.RawContent)">
      <summary>
            Give possibility to custom handler to cache or prepare data before the Write method be called.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferHandlerBase.ContentTypesTransfering(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ContentType},System.Boolean)">
      <summary>
            If the transferPropertySettings parameter set to true then PropertySettings for each property definition on block types be transfered.
            </summary>
      <param name="blockTypes">The block types.</param>
      <param name="transferPropertySettings">if set to <c>true</c> [transfer property settings].</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferHandlerBase.DynamicPropertiesTransfering(System.Collections.Generic.IList{EPiServer.DataAbstraction.PropertyDefinition},System.Boolean)">
      <summary>
            If the transferPropertySettings parameter set to true then PropertySettings for each property definition is transfered.
            </summary>
      <param name="propertyDefinitions">The property definitions.</param>
      <param name="transferPropertySettings">if set to <c>true</c> [transfer property settings].</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferHandlerBase.Write(System.IO.Stream)">
      <summary>
            Writes the specified writer. 
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferHandlerBase.Read(System.IO.Stream)">
      <summary>
            Reads the specified reader.
            </summary>
      <param name="reader">The reader.</param>
    </member>
    <member name="T:EPiServer.Core.Transfer.TransferImportOptions">
      <summary>
            Specifies options used during import.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferImportOptions.SaveAction">
      <summary>
            Gets or sets the action that should be used when importing content.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferImportOptions.KeepIdentity">
      <summary>
            Gets or sets if identities for imported items should be preserved.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferImportOptions.IsTest">
      <summary>
            Specifies if the import should be executed in test mode. It will then process package without doing any actual import.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferImportOptions.ContentLanguages">
      <summary>
            Specifies the content languages to transfer, if no list of languages is in the list all languages is transfered.
            </summary>
      <value>The languages to be transfered.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferImportOptions.AutoCloseStream">
      <summary>
            Specifies if the stream should be automatically closed after import
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferImportOptions.TransferType">
      <summary>
            Specifies which type of import it should be executed as.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferImportOptions.SelectedLanguage">
      <summary>
            Specifies the content language to be imported, if no language is defined then all languages are imported.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferImportOptions.ValidateDestination">
      <summary>
            Specifies if the content destination should be validated. This then validates that if the export package is created from a root such as
            global asset folder then the import destination must be under the same root.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferImportOptions.EnsureContentNameUniqueness">
      <summary>
            Specifies if names of imported content items should be ensured to be unique.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferImportOptions.ContentTypeSaveOptions">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Gets or sets the content type save options.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.TransferLogger">
      <summary>
            Contains logging logic for import/export processing.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferLogger.#ctor(EPiServer.Core.Transfer.ITransferHandlerContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.TransferLogger" /> class.
            </summary>
      <param name="transferContext">The transfer context.</param>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferLogger.TransferContext">
      <summary>
            Gets or sets the transfer context for the import/export.
            </summary>
      <value>The transfer context.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferLogger.Errors">
      <summary>
            A collection of errors that has been added by calls to the LogError method.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferLogger.Warnings">
      <summary>
            A collection of warnings that has been added by calls to the LogWarning method.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferLogger.Context">
      <summary>
            Set a context or prefix used for logging.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferLogger.CountHandledFiles">
      <summary>
            Gets or sets the number of handled files.
            </summary>
      <value>The number of handled files.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferLogger.Status">
      <summary>
            Gets the status for the export/import process.
            </summary>
      <value>The status.</value>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferLogger.Error(System.String,System.Exception,System.Object[])">
      <summary>
            Log a error message.
            </summary>
      <param name="errormsg">The error message</param>
      <param name="e">The generated exception message</param>
      <param name="args">Optional arguments.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferLogger.Warning(System.String,System.Object[])">
      <summary>
            Log a warning message.
            </summary>
      <param name="warning">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferLogger.Warning(System.String,System.Exception,System.Object[])">
      <summary>
            Log warning and exception 
            </summary>
      <param name="warning">
      </param>
      <param name="e">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferLogger.Progress(System.String,System.Object[])">
      <summary>
            Log a debug message about the progress.
            </summary>
      <param name="logmsg">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferLogger.GetPages(EPiServer.Util.StatusInfo.StatusInfoAction)">
      <summary>
            Gets a copy of all imported pages.
            </summary>
      <value>The number of imported pages.</value>
      <param name="infoAction">The action type</param>
      <remarks>This is a thread safe lazy strong typed version of the backing data EPiServer.Util.StatusInfo.importedPagesId "/&gt; </remarks>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferLogger.AddPage(System.Guid,EPiServer.Util.StatusInfo.StatusInfoAction)">
      <summary>
            Adds an identifier for an imported page to the log.
            </summary>
      <param name="id">The page GUID.</param>
      <param name="infoAction">The action type</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferLogger.GetCreatedPrototypes">
      <summary>
            Gets a copy of the created prototypes, this function are going to return all pages that is or has been a prototype.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferLogger.AddPagePrototype(System.Guid)">
      <summary>
            Adds a identifier for a page prototype.
            </summary>
      <param name="id">The identifier for the prototype.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransferLogger.GetInformationLog(EPiServer.Util.StatusInfo.StatusInfoAction)">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Core.Transfer.TransferLogger.MergedFolders">
      <summary>
            Gets a list of all folders that have been merged during import
            </summary>
    </member>
    <member name="T:EPiServer.Core.Transfer.TransformPropertyEventArgs">
      <summary>
            Event argument used at import or export of a property.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransformPropertyEventArgs.#ctor(EPiServer.Core.RawProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.TransformPropertyEventArgs" /> class.
            </summary>
      <param name="sourceProperty">The source property.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransformPropertyEventArgs.#ctor(EPiServer.Core.RawProperty,EPiServer.Core.PropertyData)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.TransformPropertyEventArgs" /> class.
            </summary>
      <param name="sourceProperty">The source property.</param>
      <param name="destinationProperty">The destination property.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransformPropertyEventArgs.#ctor(EPiServer.Core.RawProperty,EPiServer.Core.PropertyData,EPiServer.Core.RawContent)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.TransformPropertyEventArgs" /> class.
            </summary>
      <param name="sourceProperty">The source property.</param>
      <param name="destinationProperty">The destination property.</param>
      <param name="contextContent">Content of the context.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.TransformPropertyEventArgs.#ctor(EPiServer.Core.RawProperty,EPiServer.Core.PropertyData,EPiServer.Core.RawContent,EPiServer.Core.IContent)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Transfer.TransformPropertyEventArgs" /> class.
            </summary>
      <param name="sourceProperty">The source property.</param>
      <param name="destinationProperty">The destination property.</param>
      <param name="contextContent">The raw format of the content that is being exported/imported.</param>
      <param name="content">The raw format of the content that is being exported/imported</param>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransformPropertyEventArgs.PropertyDestination">
      <summary>
            Gets or sets the property destination.
            </summary>
      <remarks>
            This is what is set during import when a PageData instance is created and populated.
            </remarks>
      <value>The property destination.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransformPropertyEventArgs.PropertySource">
      <summary>
            Gets or sets the property source.
            </summary>
      <remarks>This is the value in the export package</remarks>
      <value>The property source.</value>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransformPropertyEventArgs.ContextContent">
      <summary>
             The raw format of the content that is being exported/imported
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransformPropertyEventArgs.TransferredContent">
      <summary>
            The content that is being exported/imported
            </summary>
    </member>
    <member name="P:EPiServer.Core.Transfer.TransformPropertyEventArgs.IsHandled">
      <summary>
            Gets or sets a value indicating whether the property transfer has been handled.
            </summary>
      <value>
        <c>true</c> if this instance is handled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Core.Transfer.IContentTransfer">
      <summary>
            The base interface for transferring contents. 
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.IContentTransfer.Export(EPiServer.Core.RawContentInfo,EPiServer.Security.AccessLevel)">
      <summary>
            Exports the specified content.
            </summary>
      <param name="page">The content.</param>
      <param name="requiredSourceAccess">The required source access.</param>
      <returns>An ITransferContentData to represent a content to be transferred.</returns>
    </member>
    <member name="M:EPiServer.Core.Transfer.IContentTransfer.Import(EPiServer.Core.Transfer.ITransferContentData,EPiServer.Security.AccessLevel)">
      <summary>
            Imports the specified content.
            </summary>
      <param name="content">The content.</param>
      <param name="requiredDestinationAccess">The required destination access.</param>
      <returns>
            A content referense for the copied content.
            </returns>
    </member>
    <member name="M:EPiServer.Core.Transfer.IContentTransfer.ImportProperties(EPiServer.Core.IContent,EPiServer.Core.RawContent)">
      <summary>
            Imports all properties from <paramref name="importedContent" /> to <paramref name="newContent" /></summary>
      <param name="newContent">The page to import properties from.</param>
      <param name="importedContent">The imported page.</param>
    </member>
    <member name="M:EPiServer.Core.Transfer.IContentTransfer.ImportProperty(EPiServer.Core.RawContent,EPiServer.Core.RawProperty,EPiServer.Core.PropertyData)">
      <summary>
            Imports a specific property.
            </summary>
      <param name="rawContent">Content of the raw.</param>
      <param name="importedProp">The imported prop.</param>
      <param name="newProperty">The new property.</param>
    </member>
    <member name="P:EPiServer.Core.Transfer.IContentTransfer.ContentTransferContext">
      <summary>
            Gets the transfer context.
            </summary>
      <value>
            The transfer context.
            </value>
    </member>
    <member name="T:EPiServer.Core.Transfer.IInterfaceHandledImport">
      <summary>
            Defines the signature for a component that is registered to handle import of properties for a specific interface.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Transfer.IInterfaceHandledImport.ImportProperty(EPiServer.Core.Transfer.IContentTransfer,EPiServer.Core.RawContent,EPiServer.Core.IContent,EPiServer.Core.RawProperty)">
      <summary>
            Imports a property, that is fetches the imported value from <paramref name="importedProperty" /> and assigns it to <paramref name="content" />.
            </summary>
      <param name="currentTranfer">The current tranfer.</param>
      <param name="rawContent">Content of the raw.</param>
      <param name="content">The content.</param>
      <param name="importedProperty">The imported property.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.TypeMismatchException">
      <summary>
            Represents errors that occur when an object is not of the required <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.TypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Core.TypeMismatchException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.TypeMismatchException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.TypeMismatchException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.TypeMismatchException" /> class with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:EPiServer.Core.TypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.TypeMismatchException" /> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The inner exception that is the cause of the current exception.</param>
    </member>
    <member name="T:EPiServer.Core.VersionFilter">
      <summary>
            Filter class used in <see cref="T:EPiServer.Core.IContentVersionRepository" /> List to filter which versions to retreive.
            </summary>
    </member>
    <member name="P:EPiServer.Core.VersionFilter.Statuses">
      <summary>
            Specifies that only versions of certain statuses should be returned
            </summary>
    </member>
    <member name="P:EPiServer.Core.VersionFilter.ContentLink">
      <summary>
            Specifies that only versions for a specific content instance is to be returned
            </summary>
    </member>
    <member name="P:EPiServer.Core.VersionFilter.ChangedBy">
      <summary>
            Specifies that only versions changes by specified users should be returned
            </summary>
    </member>
    <member name="P:EPiServer.Core.VersionFilter.Languages">
      <summary>
            Specifies that only versions of specified language should be returned
            </summary>
    </member>
    <member name="P:EPiServer.Core.VersionFilter.ExcludeDeleted">
      <summary>
            Specifies if versions for deleted content items should be excluded
            </summary>
      <remarks>Default value is false</remarks>
    </member>
    <member name="T:EPiServer.Core.VersionStatus">
      <summary>
            The different states for a content item.
            </summary>
    </member>
    <member name="F:EPiServer.Core.VersionStatus.NotCreated">
      <summary>
            The item or language has not been created.
            </summary>
    </member>
    <member name="F:EPiServer.Core.VersionStatus.Rejected">
      <summary>
            The version was rejected rather than published, and returned to the writer.
            </summary>
    </member>
    <member name="F:EPiServer.Core.VersionStatus.CheckedOut">
      <summary>
            The version is currently in progress.
            </summary>
    </member>
    <member name="F:EPiServer.Core.VersionStatus.CheckedIn">
      <summary>
            A writer has checked in the version and waits for the version to be approved and published.
            </summary>
    </member>
    <member name="F:EPiServer.Core.VersionStatus.Published">
      <summary>
            The currently published version.
            </summary>
    </member>
    <member name="F:EPiServer.Core.VersionStatus.PreviouslyPublished">
      <summary>
            This version has been published previously but is now replaced by a more recent version.
            </summary>
    </member>
    <member name="F:EPiServer.Core.VersionStatus.DelayedPublish">
      <summary>
            This version will be automatically published when the current time has passed the Start Publish date.
            </summary>
    </member>
    <member name="F:EPiServer.Core.VersionStatus.AwaitingApproval">
      <summary>
            NOTE: This is a pre-release status that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            The version is awaiting approval
            </summary>
    </member>
    <member name="T:EPiServer.Core.VideoData">
      <summary>
            Base class for content types which should be handled as videos by the system.
            </summary>
    </member>
    <member name="T:EPiServer.Core.Weekday">
      <summary>
                The different days of the week.
            </summary>
      <remarks>
                The difference between this enum and <see cref="T:System.DayOfWeek" /> is that this is a flags enum.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.Weekday.None">
      <summary>
                No day selected
            </summary>
    </member>
    <member name="F:EPiServer.Core.Weekday.Monday">
      <summary>
                Monday
            </summary>
    </member>
    <member name="F:EPiServer.Core.Weekday.Tuesday">
      <summary>
                Tuesday
            </summary>
    </member>
    <member name="F:EPiServer.Core.Weekday.Wednesday">
      <summary>
                Wednesday
            </summary>
    </member>
    <member name="F:EPiServer.Core.Weekday.Thursday">
      <summary>
                Thursday
            </summary>
    </member>
    <member name="F:EPiServer.Core.Weekday.Friday">
      <summary>
                Friday
            </summary>
    </member>
    <member name="F:EPiServer.Core.Weekday.Saturday">
      <summary>
                Saturday
            </summary>
    </member>
    <member name="F:EPiServer.Core.Weekday.Sunday">
      <summary>
                Sunday
            </summary>
    </member>
    <member name="T:EPiServer.Core.XhtmlString">
      <summary>
            A xhtml string value. This class is a container for string fragments.
            </summary>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.XhtmlString" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.XhtmlString" /> class.
            </summary>
      <param name="unparsedString">The unparsed xhtml string.</param>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.XhtmlString" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.#ctor(System.String,System.Boolean,EPiServer.Core.Html.StringParsing.IFragmentParser,EPiServer.Security.IPrincipalAccessor)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.XhtmlString" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.XhtmlString" /> class.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The serialization context.</param>
    </member>
    <member name="P:EPiServer.Core.XhtmlString.Fragments">
      <summary>
            Gets a collection of string fragments that this instance consists of.
            </summary>
    </member>
    <member name="P:EPiServer.Core.XhtmlString.FragmentParser">
      <summary>
            Gets or sets the fragment parser that should be used by the current instance.
            </summary>
      <remarks>
            The fragment parser is mainly exposed for testing purposes.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.XhtmlString.ParserMode">
      <summary>
            Gets or sets the parser mode that should be used by the current instance.
            </summary>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.ToHtmlString">
      <summary>
            Returns an HTML-encoded string.
            </summary>
      <returns>
            An HTML-encoded string.
            </returns>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.ToHtmlString(System.Security.Principal.IPrincipal)">
      <summary>
            Returns an HTML-encoded string as a selected principal.
            </summary>
      <param name="principal">The principal to use when receiving the string.</param>
      <returns>
            An HTML-encoded string.
            </returns>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.ToEditString">
      <summary>
            Gets the string representation of the current instance in edit mode.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.ToInternalString">
      <summary>
            Gets the internal string representation of the current instance.
            </summary>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.Copy">
      <summary>
            Creates a deep copy of this instance.
            </summary>
      <returns>A copy of the current instance.</returns>
    </member>
    <member name="P:EPiServer.Core.XhtmlString.IsEmpty">
      <summary>
            Gets a value indicating if this instance has any fragments.
            </summary>
      <returns>
        <c>true</c> if this instance has any fragments; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.CreateStringFragments(System.String)">
      <summary>
            Creates a collection containing string fragments from the unparsed string.
            </summary>
      <param name="unparsedString">The unparsed XHTML string.</param>
      <returns>A new <see cref="T:EPiServer.Core.Html.StringParsing.StringFragmentCollection" /> containing fragments from the provided string.</returns>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.CreateWriteableCloneImplementation">
      <summary>
            Creates a writable deep clone of the current object.
            </summary>
      <returns>A writable copy of the current instance.</returns>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.CreateWritableClone">
      <summary>
            Creates a writable clone of this instance.
            </summary>
      <remarks>Override <see cref="M:EPiServer.Core.XhtmlString.CreateWriteableCloneImplementation" /> to change the clone.</remarks>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates a writable clone of this instance.
            </summary>
      <remarks>Override <see cref="M:EPiServer.Core.XhtmlString.CreateWriteableCloneImplementation" /> to change the clone.</remarks>
    </member>
    <member name="P:EPiServer.Core.XhtmlString.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
    </member>
    <member name="M:EPiServer.Core.XhtmlString.MakeReadOnly">
      <summary>
            Makes this instance read only.
            </summary>
      <remarks>It will also make its <see cref="P:EPiServer.Core.XhtmlString.Fragments" /> readonly.</remarks>
    </member>
    <member name="P:EPiServer.Core.XhtmlString.IsModified">
      <summary>
            Gets or sets a value indicating whether this instance is modified.
            </summary>
      <value>
        <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Core.XhtmlStringConverter">
      <summary>
            Type converter class for <see cref="T:EPiServer.Core.XhtmlString" /> that handles convertion to and from strings.
            </summary>
    </member>
    <member name="M:EPiServer.Core.XhtmlStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Core.XhtmlStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Core.XhtmlStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
    </member>
    <member name="M:EPiServer.Core.XhtmlStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
      <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
    </member>
    <member name="T:EPiServer.Core.ILegacyResourceable">
      <summary>
            Definies signature for component that handles resources for a <see cref="T:EPiServer.Core.IContentData" /> instance.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ILegacyResourceable.ContentFolderID">
      <summary>
            Gets or sets the content folder ID.
            </summary>
      <value>The content folder ID.</value>
    </member>
    <member name="T:EPiServer.Core.IPropertyLoadDataHandler">
      <summary>
            Implemented by properties that wish to handle their own data loading.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IPropertyLoadDataHandler.Load(System.String,System.Data.IDataRecord)">
      <summary>
            Loads the data for a property.
            </summary>
      <param name="key">The name of the property.</param>
      <param name="row">The <see cref="T:System.Data.IDataRecord" /> that contains the data for the property.</param>
    </member>
    <member name="T:EPiServer.Core.ReadAndCacheObject`1">
      <exclude />
    </member>
    <member name="T:EPiServer.Core.OptimisticCache`1">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.OptimisticCache`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.OptimisticCache`1" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.OptimisticCache`1.TryRead(System.String,`0@)">
      <summary>
            Tries to read an object from the cache.
            </summary>
      <param name="cacheKey">The cache key.</param>
      <param name="item">The item from the cache.</param>
      <returns>True if the item was in the cache, false otherwise.</returns>
    </member>
    <member name="M:EPiServer.Core.OptimisticCache`1.Read(System.String,EPiServer.Core.ReadAndCacheObject{`0})">
      <summary>
            Reads object from the cache based on the specified cache key.
            </summary>
      <param name="cacheKey">The cache key.</param>
      <param name="readAndCacheObject">The "read and cache object" implementation to call if the object was not found in the cache.</param>
      <returns>The requested object.</returns>
    </member>
    <member name="T:EPiServer.Core.PageDataEnumerableExtensions">
      <summary>
            Contains extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" /></summary>
    </member>
    <member name="M:EPiServer.Core.PageDataEnumerableExtensions.ToRawPageArray(System.Collections.Generic.IEnumerable{EPiServer.Core.PageData})">
      <summary>
            Creates an array of <see cref="T:EPiServer.Core.RawPage" /> objects from all the <see cref="T:EPiServer.Core.PageData" /> objects in the enumerable.
            </summary>
      <param name="pages">The collection of pages to create the array of <see cref="T:EPiServer.Core.RawPage" /> objects from.</param>
      <returns>An array of <see cref="T:EPiServer.Core.RawPage" /> elements.</returns>
    </member>
    <member name="T:EPiServer.Core.PageNotFoundException">
      <summary>
            Thrown when a page cannot be found
            </summary>
      <remarks>
            This exception is commonly thrown when you are accessing a page that does 
            not exist using <see cref="T:EPiServer.IContentLoader" />. For debugging scenarios 
            you can use the <see cref="P:EPiServer.Core.PageNotFoundException.PageLink" /> property for the source page of an exception. 
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PageNotFoundException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageNotFoundException" /> class for a given page that was not found.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.PageNotFoundException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.Core.PageNotFoundException.#ctor(EPiServer.Core.PageReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageNotFoundException" /> class for a given page that was not found.
            </summary>
      <param name="pageLink">The page link.</param>
    </member>
    <member name="M:EPiServer.Core.PageNotFoundException.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageNotFoundException" /> class for a given page GUID that was not found.
            </summary>
      <param name="pageGuid">The page GUID.</param>
    </member>
    <member name="M:EPiServer.Core.PageNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageNotFoundException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Core.PageNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageNotFoundException" /> class for a given url that was not found.
            </summary>
      <param name="pageUrl">The page URL.</param>
    </member>
    <member name="P:EPiServer.Core.PageNotFoundException.PageUrl">
      <summary>
            Gets the page URL.
            </summary>
      <value>The page URL.</value>
    </member>
    <member name="P:EPiServer.Core.PageNotFoundException.PageLink">
      <summary>
            Gets the page link.
            </summary>
      <value>The page link.</value>
    </member>
    <member name="P:EPiServer.Core.PageNotFoundException.PageGuid">
      <summary>
            Gets the page GUID.
            </summary>
      <value>The page GUID.</value>
    </member>
    <member name="T:EPiServer.Core.PageObject">
      <summary>
            A metadata object for a EPiServer CMS Page Object
            </summary>
    </member>
    <member name="T:EPiServer.Core.PageObject.OwnerOption">
      <summary>
            The ownership a page object has
            </summary>
    </member>
    <member name="F:EPiServer.Core.PageObject.OwnerOption.Page">
      <summary>
            The page object is owned by the page. All versions/languages of a page will share the same page object
            </summary>
    </member>
    <member name="F:EPiServer.Core.PageObject.OwnerOption.PageLanguageBranch">
      <summary>
            The page object is owned by the page language branch. All versions of a page with the same page langauge will share the same page object
            </summary>
    </member>
    <member name="F:EPiServer.Core.PageObject.OwnerOption.PageVersion">
      <summary>
            The page object is owned by the page version. Each version of a page will get its own copy of the page object. 
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageObject.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.Id">
      <summary>
            The id of this object
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.Name">
      <summary>
            The name of the page object
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.PageGuid">
      <summary>
            The guid of the page this object belongs to
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.WorkPageId">
      <summary>
            The work page id this object belongs to. This will be 0 if the <see cref="P:EPiServer.Core.PageObject.Owner" /> is not <see cref="F:EPiServer.Core.PageObject.OwnerOption.PageVersion" /></summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.PageLanguageBranch">
      <summary>
            The page language branch this object belongs to. This will be null if the <see cref="P:EPiServer.Core.PageObject.Owner" /> is not <see cref="P:EPiServer.Core.PageObject.PageLanguageBranch" /></summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.Owner">
      <summary>
            The owner of this page object
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.ObjectId">
      <summary>
            The <see cref="T:EPiServer.Data.Identity" /> of the page object value item
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.StoreName">
      <summary>
            The name of the store the object value item is stored in
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.Value">
      <summary>
            The item value of the page object. 
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.MetaDataModified">
      <summary>
            Indicates if the metadata of this instance has been changed
            </summary>
    </member>
    <member name="P:EPiServer.Core.PageObject.ValueAccessed">
      <summary>
            Indicates if the <see cref="P:EPiServer.Core.PageObject.Value" /> property of this instance has been accessed
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageObject.ToRawPageObject">
      <summary>
            Convert this instance to a <see cref="T:EPiServer.Core.RawPageObject" /></summary>
      <returns>A raw page object instance</returns>
    </member>
    <member name="P:EPiServer.Core.PageObject.Importing">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Core.PageObject" /> is in context of importing data.
            </summary>
      <remarks>
            This is when page is saved to determine whether object is to be saved. During importing the page and the 
            PageObjects are imported at different occasions, meaning objects are saved separately later on.
            </remarks>
      <value>
        <c>true</c> if importing; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:EPiServer.Core.PageResolveResult">
      <summary>
            Holds the returned result from a page mapping from Guid to PageReference or vice versa.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageResolveResult.#ctor(System.Guid,EPiServer.Core.PageReference,System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageResolveResult" /> class.
            </summary>
      <param name="pageGuid">The page GUID.</param>
      <param name="pageLink">The page link.</param>
      <param name="pageUri">The page URI.</param>
    </member>
    <member name="P:EPiServer.Core.PageResolveResult.PageGuid">
      <summary>
            Gets the page GUID.
            </summary>
      <value>The page GUID.</value>
    </member>
    <member name="P:EPiServer.Core.PageResolveResult.PageLink">
      <summary>
            Gets the page link.
            </summary>
      <value>The page link.</value>
    </member>
    <member name="P:EPiServer.Core.PageResolveResult.PageUri">
      <summary>
            Gets the page URI.
            </summary>
      <remarks>
            It is expected that this Uri is in the "classic"/internal format. E.g. '/templates/Page.Aspx?id=23' or
            '/templates/Page.Aspx?id=23_remotesite' (when page is delivered from external system).
            The Uri is typically constructed by taking the path from the page type and then add the querystring id from
            the PageReference.
            </remarks>
      <value>The page URI.</value>
    </member>
    <member name="P:EPiServer.Core.PageResolveResult.NoMatch">
      <summary>
            Represents a non-matched result
            </summary>
    </member>
    <member name="T:EPiServer.Core.RawPageObject">
      <summary>
            A raw representation of page objects.
            </summary>
      <remarks>Used for instance for mirroring and import/export.</remarks>
    </member>
    <member name="F:EPiServer.Core.RawPageObject.ObjectExternalId">
      <summary>
            The id of the object.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawPageObject.StoreName">
      <summary>
            The name of the store for the item.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawPageObject.Name">
      <summary>
            The name of the item.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RawPageObject.Owner">
      <summary>
            Used to identity the ownership for this page object.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActionType">
      <summary>
            Definition of a type of an <see cref="T:EPiServer.DataAbstraction.Activities.ActionType" /> associated with an <see cref="P:EPiServer.DataAbstraction.Activities.ActionType.ActivityType" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActionType.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ActionType" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActionType.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ActionType" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActionType.Id">
      <summary>
            Gets the id of this <see cref="T:EPiServer.DataAbstraction.Activities.ActionType" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActionType.Name">
      <summary>
            Gets the name associated with this <see cref="T:EPiServer.DataAbstraction.Activities.ActionType" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActionType.LanguagePath">
      <summary>
            Gets the language path to use to get the localized name of this <see cref="T:EPiServer.DataAbstraction.Activities.ActionType" /> from the <see cref="T:EPiServer.Framework.Localization.LocalizationService" />.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Activity">
      <summary>
            Represents an activity recorded in the activity log. It can be a content related activity like a publish operation, a project related activity
            like an item added to the project or a manually added message.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Activity.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> class.
            </summary>
      <param name="activityType">String that represents the type of this activity.</param>
      <param name="action">Integer representing the type action that this activity represents.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Activity.#ctor(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> class.
            </summary>
      <param name="activityType">String that represents the type of this activity.</param>
      <param name="action">Integer representing the type action that this activity represents.</param>
      <param name="extendedData">Extended data associated with this activity</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Activity.#ctor(System.String,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> class.
            </summary>
      <param name="activityType">Type of the activity.</param>
      <param name="action">The action.</param>
      <param name="changedBy">The changed by.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.Activity.ActivityType">
      <summary>
            Gets the type of this <see cref="T:EPiServer.DataAbstraction.Activities.Activity" />. System related types are specified in <see cref="T:EPiServer.DataAbstraction.Activities.ActivityType" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.Activity.Action">
      <summary>
            Gets an integer that represents the type of action that this <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> describes.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.Activity.ID">
      <summary>
            Gets the identity of this <see cref="T:EPiServer.DataAbstraction.Activities.Activity" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.Activity.ChangedBy">
      <summary>
            Gets the username of the user that caused the action that this <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> has recorded.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.Activity.Created">
      <summary>
            Gets the date and time when this <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> was created.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.Activity.RelatedItem">
      <summary>
            Gets or sets the item this <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> is related to. 
            </summary>
      <remarks>
            For content activities like publish it will be the content version. For project items like "item added to project" it
            will be project. For messages it will dependend on the type of message.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.Activity.ExtendedData">
      <summary>
            Gets a collection of extended data associated with this <see cref="T:EPiServer.DataAbstraction.Activities.Activity" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.Activity.RawData">
      <summary>
            Gets or sets a string representing extended information about this <see cref="T:EPiServer.DataAbstraction.Activities.Activity" />. This is the raw format of the data as it is persisted in storage. 
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityComment">
      <summary>
            A comment added to an <see cref="T:EPiServer.DataAbstraction.Activities.Activity" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityComment.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" /> class.
            </summary>
      <param name="activityID">The identifier of the activity this comment is related to.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityComment.#ctor(System.Int64,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" /> class.
            </summary>
      <param name="activityID">The identifier of the activity this comment is related to.</param>
      <param name="message">The comment message.</param>
      <param name="author">The author of the comment.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityComment.ID">
      <summary>
            Gets the identifier for this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityComment.ActivityID">
      <summary>
            Gets or sets the identifier of the <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> that this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" /> is related to.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityComment.Author">
      <summary>
            Gets or sets the author of this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityComment.Created">
      <summary>
            Gets the date and time when this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" /> was created.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityComment.LastUpdated">
      <summary>
            Gets the date and time when this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" /> was last updated.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityComment.Message">
      <summary>
            Gets or sets the message of this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" />.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityCommentEventArgs">
      <summary>
            Base class for event arguments related to <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" /> instances. 
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityCommentEventArgs.#ctor(EPiServer.DataAbstraction.Activities.ActivityComment)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Activities.ActivityCommentEventArgs" /></summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityCommentEventArgs.Comment">
      <summary>
            The comment.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityCommentRepository">
      <summary>
            Repository to manage comments related to activities.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.CommentCreated">
      <summary>
            Occurs when a new comment on an <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> is added to the activity log.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.CommentUpdated">
      <summary>
            Occurs when an existing comment on an <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> is changed to the activity log.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.CommentDeleted">
      <summary>
            Occurs when a comment on an <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> is deleted from the activity log.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.ListAsync(System.Int64)">
      <summary>
            Lists all comments related to a specific <see cref="T:EPiServer.DataAbstraction.Activities.Activity" />.
            </summary>
      <param name="activityID">The id of the activity.</param>
      <returns>A list of comments related to the provided activity.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.ListAsync(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
            Lists all comments related to a list of <see cref="T:EPiServer.DataAbstraction.Activities.Activity" />.
            </summary>
      <param name="activityIDs">The ids of the activities.</param>
      <returns>A list of comments related to the provided activities.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.LoadAsync(System.Int64)">
      <summary>
            Load the comment with given id.
            </summary>
      <param name="id">The id for the comment to load.</param>
      <returns>The comment.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.SaveAsync(EPiServer.DataAbstraction.Activities.ActivityComment)">
      <summary>
            Saves a new or existing comment.
            </summary>
      <param name="comment">The comment to save.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.DeleteAsync(System.Int64)">
      <summary>
            Deletes an existing comment.
            </summary>
      <param name="id">The id of the comment</param>
      <returns>True if the comment was deleted else false.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.OnCommentCreated(EPiServer.DataAbstraction.Activities.CommentCreatedEventArgs)">
      <summary>
            Called to raise event <see cref="E:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.CommentCreated" /></summary>
      <param name="e">The event argument</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.OnCommentUpdated(EPiServer.DataAbstraction.Activities.CommentUpdatedEventArgs)">
      <summary>
            Called to raise event <see cref="E:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.CommentUpdated" /></summary>
      <param name="e">The event argument</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.OnCommentDeleted(EPiServer.DataAbstraction.Activities.CommentDeletedEventArgs)">
      <summary>
            Called to raise event <see cref="E:EPiServer.DataAbstraction.Activities.ActivityCommentRepository.CommentDeleted" /></summary>
      <param name="e">The event argument</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityCreatedEventArgs">
      <summary>
            Event argument used for <see cref="E:EPiServer.DataAbstraction.Activities.IActivityEvents.ActivityCreated" /> and <see cref="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityCreated" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityCreatedEventArgs.#ctor(EPiServer.DataAbstraction.Activities.Activity,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Activities.ActivityCreatedEventArgs" /></summary>
      <param name="activity">The created activity.</param>
      <param name="associations">All associated items</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityDeletedEventArgs">
      <summary>
            Event argument used for <see cref="E:EPiServer.DataAbstraction.Activities.IActivityEvents.ActivityCreated" /> and <see cref="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityDeleted" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityDeletedEventArgs.#ctor(System.Int64,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Activities.ActivityDeletedEventArgs" /></summary>
      <param name="activityId">The id of the activity that was deleted.</param>
      <param name="associations">The associations for the deleted item.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityDeletedEventArgs.ActivityID">
      <summary>
            The id of the deleted activity.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityDeletedEventArgs.Associations">
      <summary>
            All items associated with the activity.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityEventArgs">
      <summary>
            Base class for activity related event arguments. 
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityEventArgs.#ctor(EPiServer.DataAbstraction.Activities.Activity,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Activities.ActivityEventArgs" /></summary>
      <param name="activity">The related activity.</param>
      <param name="associations">All associated items</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityEventArgs.Activity">
      <summary>
            The related activity.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityEventArgs.Associations">
      <summary>
            All items associated with the activity.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityOptions">
      <summary>
            Contains various options that can be used to configure how activities should be handled within CMS
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityOptions.ArchiveRetentionPeriod">
      <summary>
            Gets or sets the number of months that activities should remain archived before they are deleted.
            </summary>
      <remarks>
            The default value is 12 months. A value of zero (0) indicates that activities should be deleted immediately.
            A negative value indicates that the archive should be kept indefinitely (not recommended).
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityOptions.TrackContentSaveEvents">
      <summary>
            Gets or sets if Content Save events should be tracked and logged as an activity.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityOptions.IsArchivingEnabled">
      <summary>
            Gets an value indicating if archiving of activities should be enabled.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityOrder">
      <summary>
            The different types of ordering that an <see cref="T:EPiServer.DataAbstraction.Activities.ActivityQuery" /> can request.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ActivityOrder.LatestFirst">
      <summary>
            Indicates that the most recent activities recorded should be returned first, i.e. newest to oldest
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ActivityOrder.AsRecorded">
      <summary>
            Indicates that activities should be returned in the order that they were recorded, i.e. oldest to newest
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityQuery">
      <summary>
            Class containing query information for retrieving activities using the <see cref="T:EPiServer.DataAbstraction.Activities.IActivityQueryService" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityQuery.FromActivity">
      <summary>
            Gets or set the id of the activity from which processing should start.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityQuery.CreatedAfter">
      <summary>
            If set, only activities newer than given date will be returned.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityQuery.CreatedBefore">
      <summary>
            If set, only activities older than given date will be returned.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityQuery.ActivityType">
      <summary>
            If set, only activities with a matching activity type will be returned.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityQuery.Action">
      <summary>
            If set, only activities with a matching action will be returned.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityQuery.ChangedBy">
      <summary>
            If set, only activities changed by specified user will be returned.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityQuery.MaxResults">
      <summary>
            Gets or sets the max number of activities returned. Default value is 100.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityQuery.Order">
      <summary>
            Gets or sets the order in which the activities should be returned. Default is <see cref="F:EPiServer.DataAbstraction.Activities.ActivityOrder.LatestFirst" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityQuery.IncludeArchived">
      <summary>
            Gets or sets if activities moved to the archive should be returned.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityQuery.IncludeDeleted">
      <summary>
            Gets or sets if activities marked as deleted should be returned.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityType">
      <summary>
            Definition of a type of Activity and it's available action types.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ActivityType.Content">
      <summary>
            A content related activity
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ActivityType.File">
      <summary>
            A UnifiedFile related activity
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ActivityType.Directory">
      <summary>
            A UnifiedDirectory related activity
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ActivityType.Message">
      <summary>
            A message
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ActivityType.Project">
      <summary>
            A project related activity
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ActivityType.ContentApproval">
      <summary>
            An content approval related activity
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ActivityType.ContentType">
      <summary>
            An content type related activity.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityType.#ctor(System.String,System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.Activities.ActionType})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityType" /> class with name and actions.
            </summary>
      <param name="name">The name of the activity type.</param>
      <param name="actionTypes">The action types that should be available for this activity type.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityType.Name">
      <summary>
            Gets the name of this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityType" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityType.ActionTypes">
      <summary>
            Gets a list of available <see cref="T:EPiServer.DataAbstraction.Activities.ActionType" /> for this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityType" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityType.LanguagePath">
      <summary>
            Gets the language path to use to get the localized name of this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityType" /> from the <see cref="T:EPiServer.Framework.Localization.LocalizationService" />.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityUpdatedEventArgs">
      <summary>
            Event argument used for <see cref="E:EPiServer.DataAbstraction.Activities.IActivityEvents.ActivityCreated" /> and <see cref="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityUpdated" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityUpdatedEventArgs.#ctor(EPiServer.DataAbstraction.Activities.Activity,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Activities.ActivityUpdatedEventArgs" /></summary>
      <param name="activity">The updated activity.</param>
      <param name="associations">All associated items.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ApprovalActionType">
      <summary>
            The types of action a <see cref="T:EPiServer.DataAbstraction.Activities.ApprovalActivity" /> can record.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ApprovalActionType.Unknown">
      <summary>
            Approval type is unknown
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ApprovalActionType.Approve">
      <summary>
            A approval action
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ApprovalActionType.Reject">
      <summary>
            A reject action
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ApprovalActionType.ApproveStep">
      <summary>
            A step approval action
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ApprovalActionType.RejectStep">
      <summary>
            A step approval action
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ApprovalActionType.CommentStep">
      <summary>
            A step comment action
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ApprovalActivity">
      <summary>
            An activity related to <see cref="T:EPiServer.Approvals.Approval" /> events in the system.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ApprovalActivity.#ctor(System.String,EPiServer.DataAbstraction.Activities.ApprovalActionType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ApprovalActivity" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ApprovalActivity.#ctor(System.String,EPiServer.DataAbstraction.Activities.ApprovalActionType,System.Uri,System.Int32,System.Int32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ApprovalActivity" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ApprovalActivity.ActionType">
      <summary>
            Gets the approval activity action type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ApprovalActivity.ApprovalReference">
      <summary>
            Gets the reference of the approval refered to by this activity.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ApprovalActivity.ApprovalID">
      <summary>
            Gets the indentity of the approval refered to by this activity.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ApprovalActivity.DefinitionVersionID">
      <summary>
            Gets the version indentity of the approval definition refered to by this activity.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ApprovalActivity.Comment">
      <summary>
            Gets the comment that was added to the approval refered to by this activity.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ApprovalStepActivity">
      <summary>
            An activity related to <see cref="T:EPiServer.Approvals.Approval" /> steps in the system.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ApprovalStepActivity.#ctor(System.String,EPiServer.DataAbstraction.Activities.ApprovalActionType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ApprovalStepActivity" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ApprovalStepActivity.#ctor(System.String,EPiServer.DataAbstraction.Activities.ApprovalActionType,System.Uri,System.Int32,System.Int32,System.String,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ApprovalStepActivity" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ApprovalStepActivity.StepIndex">
      <summary>
            Gets the step index of the approval step refered to by this activity.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.CommentCreatedEventArgs">
      <summary>
            Event argument for events raised when a new <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" /> has been created.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.CommentCreatedEventArgs.#ctor(EPiServer.DataAbstraction.Activities.ActivityComment)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.CommentCreatedEventArgs" /> class.
            </summary>
      <param name="comment">The comment that has been created.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.CommentDeletedEventArgs">
      <summary>
            Event argument for events raised when an <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" /> has been deleted.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.CommentDeletedEventArgs.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.CommentDeletedEventArgs" /> class.
            </summary>
      <param name="commentId">The id of the comment that was deleted.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.CommentDeletedEventArgs.CommentID">
      <summary>
            The Id of the comment that was deleted.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.CommentUpdatedEventArgs">
      <summary>
            Event argument for events raised when an <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment" /> has been updated.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.CommentUpdatedEventArgs.#ctor(EPiServer.DataAbstraction.Activities.ActivityComment)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.CommentUpdatedEventArgs" /> class.
            </summary>
      <param name="comment">The comment that has been updated.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentActionType">
      <summary>
            The types of action a <see cref="T:EPiServer.DataAbstraction.Activities.ContentActivity" /> can record.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.Undefined">
      <summary>
            No action defined
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.CheckIn">
      <summary>
            Content item checked-in
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.Publish">
      <summary>
            Content item published
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.Delete">
      <summary>
            Content item deleted
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.Save">
      <summary>
            Content item saved
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.Move">
      <summary>
            Content item moved
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.Create">
      <summary>
            Content item created
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.DeleteLanguage">
      <summary>
            Content item language deleted
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.DeleteChildren">
      <summary>
            Content item children deleted
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.DeletedItems">
      <summary>
            The deleted items, this will contain all effected items and is used with Delete and DeleteChildren.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.Rejected">
      <summary>
            Content item rejected
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.DelayedPublish">
      <summary>
            Content item was scheduled for publish
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentActionType.RequestApproval">
      <summary>
            Content item was requested for approval
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentActivity">
      <summary>
            An activity related to content changes made in the system.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentActivity.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentActivity" /> class.
            </summary>
      <param name="contentLink">The content reference of the content that the activity is related to.</param>
      <param name="contentGuid">The unique identifier of the content that the activity is related to.</param>
      <param name="contentTypeId">The content type of the content that the activity is related to.</param>
      <param name="name">The name of the content that the activity is related to.</param>
      <param name="changedBy">The username of the user responsible for the change recorded by the activity.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentActivity.#ctor(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Guid,System.Int32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentActivity" /> class.
            </summary>
      <param name="contentLink">The content reference of the content that the activity is related to.</param>
      <param name="language">The language of the content that the activity is related to.</param>
      <param name="contentGuid">The unique identifier of the content that the activity is related to.</param>
      <param name="contentTypeId">The content type of the content that the activity is related to.</param>
      <param name="name">The name of the content that the activity is related to.</param>
      <param name="changedBy">The username of the user responsible for the change recorded by the activity.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentActivity.#ctor(EPiServer.DataAbstraction.Activities.ContentActionType,EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentActivity" /> class.
            </summary>
      <param name="contentAction">The content action that has taken place.</param>
      <param name="contentLink">The content reference of the content that the activity is related to.</param>
      <param name="contentGuid">The unique identifier of the content that the activity is related to.</param>
      <param name="contentTypeId">The content type of the content that the activity is related to.</param>
      <param name="name">The name of the content that the activity is related to.</param>
      <param name="changedBy">The username of the user responsible for the change recorded by the activity.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentActivity.#ctor(EPiServer.DataAbstraction.Activities.ContentActionType,EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Guid,System.Int32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentActivity" /> class.
            </summary>
      <param name="contentAction">The content action that has taken place.</param>
      <param name="contentLink">The content reference of the content that the activity is related to.</param>
      <param name="language">The language of the content that the activity is related to.</param>
      <param name="contentGuid">The unique identifier of the content that the activity is related to.</param>
      <param name="contentTypeId">The content type of the content that the activity is related to.</param>
      <param name="name">The name of the content that the activity is related to.</param>
      <param name="changedBy">The username of the user responsible for the change recorded by the activity.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentActivity.ActionType">
      <summary>
            Returns which type of action this activity instance corresponds to.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentActivity.ContentLink">
      <summary>
            The <see cref="T:EPiServer.Core.ContentReference" /> of the related content
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentActivity.Language">
      <summary>
            Gets the language of the related content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentActivity.ContentGuid">
      <summary>
            Gets the unique identifier of the related content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentActivity.ContentTypeId">
      <summary>
            Gets the content type identifier of the related content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentActivity.Name">
      <summary>
            Gets the name of the related content.
            </summary>
      <remarks>
            This is the name when the activity was recorded and may be different from the current name of the content.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentActivity.RelatedItem">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentActivityFeed">
      <summary>
            A feed to read activities related to a content. Can be used to retrieve content activities.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentActivityFeed.Instance">
      <summary>
            Gets the currently configured instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentActivityFeed" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentActivityFeed.LoadActivityAsync(System.Int64)">
      <summary>
            Loads a single <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> together with related comments.
            </summary>
      <param name="activityId">The identity of the activity</param>
      <returns>An activity</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentActivityFeed.ListActivitiesAsync(EPiServer.Core.ContentReference)">
      <summary>
            List all <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instances for a content version.
            </summary>
      <param name="contentLink">The content to get activities for</param>
      <returns>A list of activities related to the content version</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentActivityFeed.ListActivitiesAsync(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Int64,System.Int32)">
      <summary>
            List a paged set of <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instances for a set of content versions.
            </summary>
      <param name="contentLinks">The content to get activities for</param>
      <param name="startIndex">The index for where only activities with a lower index will be returned. If no startIndex is given it will return the latest activities.</param>
      <param name="maxCount">The maximum number of activities to return.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentActivityFeed.ListActivitiesAsync(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>
            List all <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instances for a set of content versions.
            </summary>
      <param name="contentLinks">The content to get activities for</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentApprovalActivity">
      <summary>
            An activity related to <see cref="T:EPiServer.Approvals.ContentApprovals.ContentApproval" /> events in the system.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentApprovalActivity.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentApprovalActivity" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentApprovalActivity.#ctor(EPiServer.DataAbstraction.Activities.ApprovalActionType,EPiServer.Core.ContentReference,System.Uri,System.Int32,System.Int32,System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentApprovalActivity" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentApprovalActivity.ContentLink">
      <summary>
            Gets the <see cref="T:EPiServer.Core.ContentReference" /> of the content that the approval refered to by this activity is related to.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentApprovalActivity.Forced">
      <summary>
            Gets a flag specifying if the decision was forced.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentApprovalActivity.RelatedItem">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentApprovalStepActivity">
      <summary>
            An activity related to <see cref="T:EPiServer.Approvals.ContentApprovals.ContentApproval" /> steps in the system.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentApprovalStepActivity.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentApprovalStepActivity" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentApprovalStepActivity.#ctor(EPiServer.DataAbstraction.Activities.ApprovalActionType,EPiServer.Core.ContentReference,System.Uri,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentApprovalStepActivity" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentApprovalStepActivity.StepIndex">
      <summary>
            Gets the step index of the approval step refered to by this activity.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentDeleteActivity">
      <summary>
            An activity related to when content has been deleted.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentDeleteActivity.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,EPiServer.Core.ContentPath,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentDeleteActivity" /> class.
            </summary>
      <param name="contentLink">The content reference of the content that was deleted.</param>
      <param name="contentGuid">The unique identifier of the content that was deleted.</param>
      <param name="contentTypeId">The content type of the content that was deleted.</param>
      <param name="name">The name of the content that was deleted.</param>
      <param name="contentPath">The content path of the content that was deleted.</param>
      <param name="deletedBy">The username of the user responsible for deleting the content.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentDeleteActivity.#ctor(EPiServer.DataAbstraction.Activities.ContentActionType,EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,EPiServer.Core.ContentPath,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentDeleteActivity" /> class.
            </summary>
      <param name="contentAction">The content action of the recorded activity.</param>
      <param name="contentLink">The content reference of the content that was deleted.</param>
      <param name="contentGuid">The unique identifier of the content that was deleted.</param>
      <param name="contentTypeId">The content type of the content that was deleted.</param>
      <param name="name">The name of the content that was deleted.</param>
      <param name="contentPath">The content path of the content that was deleted.</param>
      <param name="deletedBy">The username of the user responsible for deleting the content.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentDeleteActivity.ContentPath">
      <summary>
            Gets the <see cref="T:EPiServer.Core.ContentPath" /> of the deleted content item.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentDeleteChildrenActivity">
      <summary>
            An activity related to when the children of a content item has been deleted.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentDeleteChildrenActivity.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,EPiServer.Core.ContentPath,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentDeleteChildrenActivity" /> class.
            </summary>
      <param name="contentLink">The content reference of the content that was deleted.</param>
      <param name="contentGuid">The unique identifier of the content that was deleted.</param>
      <param name="contentTypeId">The content type of the content that was deleted.</param>
      <param name="name">The name of the content that was deleted.</param>
      <param name="contentPath">The content path of the content that was deleted.</param>
      <param name="deletedBy">The username of the user responsible for deleting the content.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentDeletedItemsActivity">
      <summary>
            An activity recording all deleted content items.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentDeletedItemsActivity.IdentitiesKey">
      <summary>
            The identities key
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentDeletedItemsActivity.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentDeletedItemsActivity" /> class.
            </summary>
      <param name="contentLink">The content reference of the content that was deleted.</param>
      <param name="contentGuid">The unique identifier of the content that was deleted.</param>
      <param name="contentTypeId">The content type of the content that was deleted.</param>
      <param name="name">The name of the content that was deleted.</param>
      <param name="deletedBy">The username of the user responsible for deleting the content.</param>
      <param name="deletedIdentities">A list of all deleted identities.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentDeletedItemsActivity.DeletedIdentities">
      <summary>
            Gets a list of the deleted identities.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentDeleteLanguageActivity">
      <summary>
            An activity related to when a language a content item has been deleted.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentDeleteLanguageActivity.#ctor(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Guid,System.Int32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentDeleteLanguageActivity" /> class.
            </summary>
      <param name="contentLink">The content reference of the content that had a language version deleted.</param>
      <param name="language">The language that was deleted.</param>
      <param name="contentGuid">The unique identifier of the content that had a language version deleted.</param>
      <param name="contentTypeId">The content type of the content that had a language version deleted.</param>
      <param name="name">The name of the content that had a language version deleted.</param>
      <param name="deletedBy">The username of the user responsible for deleting the language version.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentMessageActivity">
      <summary>
            A message saved in the activity log that is related to a content instance.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentMessageActivity.#ctor(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentMessageActivity" /> class.
            </summary>
      <param name="contentLink">A reference to the content which the message relates to</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentMessageActivity.#ctor(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentMessageActivity" /> class.
            </summary>
      <param name="contentLink">A reference to the content that this message relates to</param>
      <param name="language">The language version of the content that this message relates to.</param>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentMessageActivity.#ctor(EPiServer.Core.ContentReference,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentMessageActivity" /> class.
            </summary>
      <param name="contentLink">A reference to the content that this message relates to</param>
      <param name="message">The message.</param>
      <param name="property">The property that this message is related to.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentMessageActivity.#ctor(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.String,System.String)">
      <summary>
            Creates a new instance of ContentActivityMessage
            </summary>
      <param name="contentLink">A reference to the content that this message relates to</param>
      <param name="language">The language version of the content that this message relates to.</param>
      <param name="message">The message.</param>
      <param name="property">The property that this message is related to.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentMessageActivity.ContentLink">
      <summary>
            Gets a reference to the content that the message is related to.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentMessageActivity.Language">
      <summary>
            Gets the language version for the content for which the message relates to.
            </summary>
      <remarks>
            This property will return <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> if 
            this message isn't related to any specific language version.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentMessageActivity.Property">
      <summary>
            Gets the name of the content instance property which the message relates to.
            </summary>
      <remarks>
            This is null if the message is not related to a specific property.
            </remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentMoveActivity">
      <summary>
            An activity related to when a content item has been moved.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentMoveActivity.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,EPiServer.Core.ContentReference,System.Guid,EPiServer.Core.ContentReference,System.Guid,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentMoveActivity" /> class.
            </summary>
      <param name="contentLink">The content reference of the content that the activity is related to.</param>
      <param name="contentGuid">The unique identifier of the content that the activity is related to.</param>
      <param name="contentTypeId">The content type of the content that the activity is related to.</param>
      <param name="name">The name of the content that the activity is related to.</param>
      <param name="oldParent">The content reference of the parent before the move.</param>
      <param name="oldParentGuid">The unique identifier of the parent before the move.</param>
      <param name="newParent">The content reference of new parent after the move.</param>
      <param name="newParentGuid">The unique identifier of the new parent after the move.</param>
      <param name="movedBy">The username of the user responsible for the content move.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentMoveActivity.OldParent">
      <summary>
            Gets the <see cref="T:EPiServer.Core.ContentReference" /> of the parent before the move of the content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentMoveActivity.OldParentGuid">
      <summary>
            Gets the unique identifier of the parent before the move of the content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentMoveActivity.NewParent">
      <summary>
            Gets the <see cref="T:EPiServer.Core.ContentReference" /> of the new parent after the move of the content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentMoveActivity.NewParentGuid">
      <summary>
            Gets the unique identifier of the new parent after the move of the content.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentPublishActivity">
      <summary>
            An activity related to when a content item has been published.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentPublishActivity.#ctor(EPiServer.DataAbstraction.Activities.ContentActionType,EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Guid,System.Int32,System.String,System.String,System.Nullable{EPiServer.Core.VersionStatus})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Activities.ContentPublishActivity" /></summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentPublishActivity.PreviousStatus">
      <summary>
            Gets the previous status for the content item.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentTypeActionType">
      <summary>
            The types of action a <see cref="T:EPiServer.DataAbstraction.Activities.ContentTypeActivity" /> can record.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentTypeActionType.Undefined">
      <summary>
            No action defined
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentTypeActionType.Create">
      <summary>
            Content type created
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentTypeActionType.Save">
      <summary>
            Content type modified
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ContentTypeActionType.Delete">
      <summary>
            Content type deleted
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentTypeActivity">
      <summary>
            An activity related to content type changes made in the system.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentTypeActivity.#ctor(EPiServer.DataAbstraction.Activities.ContentTypeActionType,System.Int32,System.Guid,System.String,System.String,System.Nullable{System.DateTime})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentTypeActivity" /> class.
            </summary>
      <param name="contentTypeAction">The content type action that has taken place.</param>
      <param name="contentTypeId">The content type id.</param>
      <param name="contentTypeGuid">The content type guid.</param>
      <param name="name">The content type name.</param>
      <param name="savedBy">The user that change the content type.</param>
      <param name="saved">The time the content type was saved.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentTypeActivity.Name">
      <summary>
            Gets and sets the name of the related content type.
            </summary>
      <remarks>
            This is the name when the activity was recorded and may be different from the current name of the content type.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentTypeActivity.ContentTypeGuid">
      <summary>
            Gets and sets the guid of the related content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentTypeActivity.ContentTypeId">
      <summary>
            Gets and sets the id of the related content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentTypeActivity.Saved">
      <summary>
            Gets and sets the saved time of the related content type.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.IActivityEvents">
      <summary>
            Defines the events raised when working with activities.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.IActivityEvents.ActivityCreated">
      <summary>
            Occurs when a new <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> has been created.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.IActivityEvents.ActivityDeleted">
      <summary>
            Occurs when an existing <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> has been updated.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.IActivityEvents.ActivityUpdated">
      <summary>
            Occurs when an existing <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> has been deleted.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.IActivityQueryService">
      <summary>
            Interface for querying recorded Activities.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.IActivityQueryService.ListActivitiesAsync(EPiServer.DataAbstraction.Activities.ActivityQuery)">
      <summary>
            Lists all activities matching the provided <paramref name="query" />.
            </summary>
      <param name="query">The query specifying which activities to get.</param>
      <returns>The matching activities.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.IActivityRepository">
      <summary>
            Repository for managing persistance of <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.IActivityRepository.DeleteAsync(System.Int64)">
      <summary>
            Deletes an <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> from the log.
            </summary>
      <param name="id">The identifier of the activity.</param>
      <returns>True if an activity was found and it was successfully deleted; otherwise false</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.IActivityRepository.LoadAsync(System.Int64)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> with the provided identifier.
            </summary>
      <param name="id">The identifier of the activity.</param>
      <returns>An <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instance or null if not found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.IActivityRepository.SaveAsync(EPiServer.DataAbstraction.Activities.Activity)">
      <summary>
            Saves an <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> to the log.
            </summary>
      <param name="activity">The activity that should be saved.</param>
      <returns>The identifier of the saved activity.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.IActivityTracker">
      <summary>
            Describes a module that tracks changes in the system with the intent of 
            logging the changes to the activity log.
            </summary>
      <remarks>
            When the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> is started and stopped it will call 
            the <see cref="M:EPiServer.DataAbstraction.Activities.IActivityTracker.Start" /> and <see cref="M:EPiServer.DataAbstraction.Activities.IActivityTracker.Stop" /> methods of each registered tracker.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.IActivityTracker.Start">
      <summary>
            Starts the change tracking done by this instance.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.IActivityTracker.Stop">
      <summary>
            Stops all change tracking done by this instance.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.IActivityTypeProvider">
      <summary>
            Provider of available <see cref="T:EPiServer.DataAbstraction.Activities.ActivityType" /> in this solution.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.IActivityTypeProvider.List">
      <summary>
            List all registered activity types
            </summary>
      <returns>A list of activity types.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.IActivityTypeProvider.Get(System.String)">
      <summary>
            Get the registered activity type with the provided name
            </summary>
      <returns>An activity type if found; otherwise null.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.ActivityQueryService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.ActivityRaw">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.ActivityTruncateJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Archive activities and truncate archive
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.ActivityTruncateJob.Execute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes old activities from storage.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.AggregatedActivityTracker">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.AggregatedTruncateRestriction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provides the combined restriction values of all currently registered <see cref="T:EPiServer.DataAbstraction.Activities.ITruncateRestriction" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.ContentActivityTracker">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.ContentTypeActivityTracker">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.IActivityAssociater">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Signature for component that associates external items with an <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instance.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.IActivityAssociater.GetAssociations(EPiServer.DataAbstraction.Activities.Activity)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns external identities that should be associated with <paramref name="activity" />.
            </summary>
      <param name="activity">The activity to get associations for.</param>
      <returns>A list of associated identities.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.IActivityAssociationRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Repository for managing <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> associations.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.IActivityAssociationRepository.AssociateAsync(System.Uri,System.Int64)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Associates an activity with provided URI.
            </summary>
      <param name="associatedUri">The associated URI.</param>
      <param name="activityId">The identifier of the activity.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.IActivityAssociationRepository.ListAssociationsAsync(System.Int64)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists the associations asynchronous.
            </summary>
      <param name="activityId">The identifier of the activity.</param>
      <returns>A list of all associations</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.IActivityAssociationRepository.RemoveAssociationsAsync(System.Uri)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes all associations to a given activity.
            </summary>
      <remarks>
            For example if a project is deleted this is called with ActivityFeed.CreateProjectUri(projectId).
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.IActivityAssociationRepository.RemoveAssociationAsync(System.Uri,System.Int64)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes a specific association from an activity.
            </summary>
      <param name="associatedItem">The association that should be removed.</param>
      <param name="activityId">The identifier of the activity.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.IActivityAssociationRepository.RemoveAssociationsAsync(System.Uri,System.Uri)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes all associations between associatedItem and relatedItem.
            </summary>
      <remarks>
            For example if a content version is removed from a project this is called with ActivityFeed.CreateProjectUri(projectId) and ActivityFeed.CreateContentUri
            which will remove all associations between the project and the version.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.IActivityFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Describes a factory class responsible for creating <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instances for a given activity type and action.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.IActivityFactory.Create(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instance for the specified activity type and action. 
            If the factory does not handle the provided activity type, null must be returned.
            </summary>
      <returns>A new activity instance or null if not handled.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.IActivityTruncater">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.IActivityTruncater.TruncateAsync">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes or archives old activities from the activity log taking values returned from any <see cref="T:EPiServer.DataAbstraction.Activities.ITruncateRestriction" /> implementations into consideration.
            </summary>
      <returns>An integer indicating how many activities that was removed from the activity log.</returns>
      <remarks>
            This method does not guarantee that all potential items have been truncated after completion. 
            Run multiple times and check the return value for an indication if the log has been truncated to the full extent.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.IActivityTruncater.TruncateArchiveAsync">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Truncates the activity archive for all activities older that a given date.
            </summary>
      <returns>An integer indicating how many activities that was removed from the activity archive.</returns>
      <remarks>
            This method does not guarantee that all potential items have been truncated after completion. 
            Run multiple times and check the return value for an indication if the log has been truncated to the full extent.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.IActivityTypeRegistry">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.Internal.IActivityTypeRegistry.Register(EPiServer.DataAbstraction.Activities.ActivityType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Register an activity type and all available actions.
            </summary>
      <param name="activityType">The activity type to register</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.Internal.OneMonthTruncateRestriction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default truncation restriction of one month in calendar time.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ITruncateRestriction">
      <summary>
            Provides a restriction for the truncation of old activities.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ITruncateRestriction.ActivityId">
      <summary>
            Gets the id of the last <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> that should be preserved when old activities are being truncated.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ITruncateRestriction.ActivityDate">
      <summary>
            Gets the date and time of the last activity that should be preserved when truncating old activities.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.MessageType">
      <summary>
            The type of message.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.MessageType.Undefined">
      <summary>
            No type defined
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.MessageType.Project">
      <summary>
            A project related message
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.MessageType.Content">
      <summary>
            A content related message
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.MessageActivity">
      <summary>
            A message saved in the activity log.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.MessageActivity.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.MessageActivity" /> class.
            </summary>
      <param name="message">The message that should be recorded.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.MessageActivity.MessageType">
      <summary>
            Gets the type of message.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.MessageActivity.Message">
      <summary>
            Gets or sets the message content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.MessageActivity.LastUpdated">
      <summary>
            Gets the date and time when this <see cref="T:EPiServer.DataAbstraction.Activities.MessageActivity" /> was last updated.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.MessageActivityRepository">
      <summary>
            Repository to manage <see cref="T:EPiServer.DataAbstraction.Activities.MessageActivity" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.MessageActivityRepository.LoadAsync(System.Int64)">
      <summary>
            Loads a single <see cref="T:EPiServer.DataAbstraction.Activities.MessageActivity" /> together with related comments.
            </summary>
      <param name="id">The id of the message activity</param>
      <returns>The message with the provided id if found; otherwise null</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.MessageActivityRepository.SaveAsync(EPiServer.DataAbstraction.Activities.MessageActivity)">
      <summary>
            Saves a new or updates an existing <see cref="T:EPiServer.DataAbstraction.Activities.MessageActivity" /> to the activity log. 
            </summary>
      <param name="message">The message to save</param>
      <returns>The id of the created or updated message</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.MessageActivityRepository.DeleteAsync(System.Int64)">
      <summary>
            Deletes a message from the activity log.
            </summary>
      <param name="id">The id of the message to delete.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.PagedActivityResult">
      <summary>
            Represents a paged result set for activities.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.PagedActivityResult.#ctor(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.Activities.Activity},System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.PagedActivityResult" /> class.
            </summary>
      <param name="activities">The activities.</param>
      <param name="totalCount">The total count.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectActivity">
      <summary>
            Base class for activities related to projects changes.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivity.#ctor(EPiServer.DataAbstraction.Activities.ProjectActionType,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ProjectActivity" /> class.
            </summary>
      <param name="action">The action that has taken place.</param>
      <param name="projectId">The project identifier.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectActivity.ActionType">
      <summary>
            Returns which type of action this activity instance corresponds to.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectActivity.ProjectId">
      <summary>
            Gets the project id for the related project.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectActionType">
      <summary>
            The different action types for project related changes.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ProjectActionType.Undefined">
      <summary>
            No action defined
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ProjectActionType.Saved">
      <summary>
            Logged when project is saved.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ProjectActionType.Deleted">
      <summary>
            Logged when project is deleted.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ProjectActionType.ItemAdded">
      <summary>
            Item added
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.ProjectActionType.ItemRemoved">
      <summary>
            Item removed
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectActivityCreatedEventArgs">
      <summary>
            Event argument used for <see cref="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityCreated" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityCreatedEventArgs.#ctor(EPiServer.DataAbstraction.Activities.Activity,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Activities.ProjectActivityCreatedEventArgs" /></summary>
      <param name="activity">The created activity.</param>
      <param name="projectIds">All associated projects</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectActivityDeletedEventArgs">
      <summary>
            Event argument used for <see cref="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityDeleted" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityDeletedEventArgs.#ctor(System.Int64,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Activities.ProjectActivityDeletedEventArgs" /></summary>
      <param name="activityId">The id of the activity that was deleted.</param>
      <param name="projectIds">The associated projects for the deleted item.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectActivityDeletedEventArgs.ActivityID">
      <summary>
            The id of the deleted activity.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectActivityDeletedEventArgs.ProjectIds">
      <summary>
            The id for all assoicated projects.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectActivityEventArgs">
      <summary>
            Base class for project related activity event arguments. 
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityEventArgs.#ctor(EPiServer.DataAbstraction.Activities.Activity,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Activities.ProjectActivityEventArgs" /></summary>
      <param name="activity">The related activity.</param>
      <param name="projectIds">All associated projects</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectActivityEventArgs.Activity">
      <summary>
            The related activity.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectActivityEventArgs.ProjectIds">
      <summary>
            The id for all assoicated projects.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectActivityFeed">
      <summary>
            A feed to read activities related to a project. Can be used to retrieve project activities or to subscribe to changes.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.Instance">
      <summary>
            Gets the currently configured instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ProjectActivityFeed" />.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityCreated">
      <summary>
            Occurs when a new <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> is added to the activity log.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityUpdated">
      <summary>
            Occurs when an existing <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> in the activity log is updated.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityDeleted">
      <summary>
            Occurs when an <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> is marked for deletion in the activity log.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.LoadActivityAsync(System.Int64)">
      <summary>
            Loads a single <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> together with related comments.
            </summary>
      <param name="activityId">The identity of the activity</param>
      <returns>An activity</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ListActivitiesAsync(EPiServer.Core.ContentReference,System.Int32)">
      <summary>
            List all <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instances for a content version that is related to a project.
            </summary>
      <remarks>
            Will only return content related activities that has occured after the version was added to the project.
            </remarks>
      <param name="contentLink">The content to get project related activities for</param>
      <param name="projectId">The related project</param>
      <returns>A list of activities related to the content version and project</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ListActivitiesAsync(System.Int32,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Int64,System.Int32)">
      <summary>
            List a paged set of <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instances for a set of content versions that is related to a project.
            </summary>
      <remarks>
            Will only return content related activities that has occured after the version was added to the project.
            </remarks>
      <param name="projectId">The related project</param>
      <param name="contentLinks">The content to get project related activities for</param>
      <param name="startIndex">The index for where only activities with a lower index will be returned. If no startIndex is given it will return the latest activities.</param>
      <param name="maxCount">The maximum number of activities to return.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ListActivitiesAsync(System.Int32,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>
            List all <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instances for a set of content versions that is related to a project.
            </summary>
      <remarks>
            Will only return content related activities that has occured after the version was added to the project.
            </remarks>
      <param name="projectId">The related project</param>
      <param name="contentLinks">The content to get project related activities for</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ListActivitiesAsync(System.Int32)">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instances related to the specified <see cref="T:EPiServer.DataAbstraction.Project" /></summary>
      <param name="projectId">The identity of the project to load activities for.</param>
      <returns>All activities related to the project.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ListActivitiesAsync(System.Int32,System.Int64,System.Int32)">
      <summary>
            Lists a paged set of <see cref="T:EPiServer.DataAbstraction.Activities.Activity" /> instances related to the specified <see cref="T:EPiServer.DataAbstraction.Project" />.
            </summary>
      <remarks>
            To get the latest activities set startIndex to 0 or long.MaxValue. In the next paged set as "index of last entry in previous set" - 1.
            </remarks>
      <param name="projectId">The identity of the project to load activities for.</param>
      <param name="startIndex">The index for where only activities with a lower index will be returned. If no startIndex is given it will return the latest activities.</param>
      <param name="maxCount">The maximum number of activities to return.</param>
      <returns>All activities related to the project.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ListRelatedProjectsAsync(System.Int64)">
      <summary>
            List all projects related to the provided <see cref="T:EPiServer.DataAbstraction.Activities.Activity" />.
            </summary>
      <remarks>
            Can be used for example from an event handler to <see cref="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityCreated" /> to determine if the created activity is related to a project.
            </remarks>
      <param name="activityId">The identity of the activity.</param>
      <returns>A list of related project ids</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.OnActivityCreated(EPiServer.DataAbstraction.Activities.ProjectActivityCreatedEventArgs)">
      <summary>
            Called to raise event <see cref="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityCreated" /></summary>
      <param name="e">The event argument</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.OnActivityUpdated(EPiServer.DataAbstraction.Activities.ProjectActivityUpdatedEventArgs)">
      <summary>
            Called to raise event <see cref="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityUpdated" /></summary>
      <param name="e">The event argument</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.OnActivityDeleted(EPiServer.DataAbstraction.Activities.ProjectActivityDeletedEventArgs)">
      <summary>
            Called to raise event <see cref="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityDeleted" /></summary>
      <param name="e">The event argument</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectActivityUpdatedEventArgs">
      <summary>
            Event argument used for <see cref="E:EPiServer.DataAbstraction.Activities.ProjectActivityFeed.ActivityUpdated" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectActivityUpdatedEventArgs.#ctor(EPiServer.DataAbstraction.Activities.Activity,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Activities.ProjectActivityUpdatedEventArgs" /></summary>
      <param name="activity">The updated activity.</param>
      <param name="projectIds">All associated projects.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectAddContentActivity">
      <summary>
            An activity entry that will be added to the activity log when a content version is added to a project.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectAddContentActivity.#ctor(System.Int32,EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ProjectAddContentActivity" /> class.
            </summary>
      <param name="projectId">The project identifier where content was added to.</param>
      <param name="contentLink">The content reference of the content that was added to the project.</param>
      <param name="language">The language of the content that was added to the project.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectContentActivity">
      <summary>
            An activity entry that will be added to the activity log when a content related activity happens in a project.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectContentActivity.#ctor(EPiServer.DataAbstraction.Activities.ProjectActionType,System.Int32,EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ProjectContentActivity" /> class.
            </summary>
      <param name="action">The action that has taken place.</param>
      <param name="projectId">The project identifier where content was related to.</param>
      <param name="contentLink">The content reference of the content that was added to the project.</param>
      <param name="language">The language of the content that was added to the project.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectContentActivity.ContentLink">
      <summary>
            Gets a reference to the related content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectContentActivity.Language">
      <summary>
            Gets the language version for the related content instance.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectDeleteActivity">
      <summary>
            An activity entry that will be added to the activity log when a project is deleted.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectDeleteActivity.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ProjectDeleteActivity" /> class.
            </summary>
      <param name="projectId">The project identifier.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectMessageActivity">
      <summary>
            A message saved in the activity log that is related to a project.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectMessageActivity.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ProjectMessageActivity" /> class.
            </summary>
      <param name="projectId">The project identifier.</param>
      <param name="message">The message that should be recorded.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectMessageActivity.ProjectId">
      <summary>
            Gets the identifier of the related project.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectRemoveContentActivity">
      <summary>
            An activity entry that will be added to the activity log when a content version is removed from a project.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectRemoveContentActivity.#ctor(System.Int32,EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ProjectRemoveContentActivity" /> class.
            </summary>
      <param name="projectId">The project identifier from where the content was removed from.</param>
      <param name="contentLink">The content reference of the content that was removed from the project.</param>
      <param name="language">The language of the content that was removed from the project.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ProjectUpdateActivity">
      <summary>
            An activity entry that will be added to the activity log when a project name and/or status is updated.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ProjectUpdateActivity.#ctor(System.Int32,EPiServer.DataAbstraction.ProjectStatus,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ProjectUpdateActivity" /> class.
            </summary>
      <param name="projectId">The project identifier.</param>
      <param name="status">The status of the project after the update.</param>
      <param name="name">The name of the project after the update.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectUpdateActivity.Status">
      <summary>
            Gets the status of the project after the update.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ProjectUpdateActivity.Name">
      <summary>
            Gets the name of the project after the update.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService">
      <summary>
            Service class for managing the lifecycle of the activity log.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityTrackingService.Instance">
      <summary>
            Gets the currently configured service instance.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.ActivityTrackingService.Started">
      <summary>
            Occurs when this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> is started.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.ActivityTrackingService.Stopped">
      <summary>
            Occurs when this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> is stopped.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.Activities.ActivityTrackingService.ModeChanged">
      <summary>
            Occurs when the <see cref="P:EPiServer.DataAbstraction.Activities.ActivityTrackingService.Disabled" /> of this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> is updated.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityTrackingService.IsRunning">
      <summary>
            Gets a value indicating whether the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> service is currently running.
            </summary>
      <value>
        <c>true</c> if this service is running; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ActivityTrackingService.Disabled">
      <summary>
            Gets or sets the a value indicating if this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> has been disabled.
            </summary>
      <remarks>
        <para>
                If not disabled the service will start automatically at system startup.
            </para>
        <para>
                Disabling the service does not automatically stop the service. To stop the service, call the <see cref="M:EPiServer.DataAbstraction.Activities.ActivityTrackingService.Stop" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityTrackingService.Start">
      <summary>
            Starts the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> unless it's disabled and 
            enables all registered <see cref="T:EPiServer.DataAbstraction.Activities.IActivityTracker" /> services.
            </summary>
      <remarks>
            The tracking service will be started on all instances if there are multiple servers in the solution.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityTrackingService.Stop">
      <summary>
            Stops the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> and disables all registered <see cref="T:EPiServer.DataAbstraction.Activities.IActivityTracker" /> services.
            </summary>
      <remarks>
            The tracking service will be stopped on all instances if there are multiple servers in the solution.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityTrackingService.OnStarted">
      <summary>
            Called when when the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> is started.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityTrackingService.OnStopped">
      <summary>
            Called when when the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> is stopped.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ActivityTrackingService.OnModeChanged">
      <summary>
            Called when when the <see cref="P:EPiServer.DataAbstraction.Activities.ActivityTrackingService.Disabled" /> of the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityTrackingService" /> is changed.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.ContentCheckInActivity">
      <summary>
            An activity related to when content has been checked in.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.ContentCheckInActivity.#ctor(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Guid,System.Int32,System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.ContentCheckInActivity" /> class.
            </summary>
      <param name="contentLink">The content reference of the content that was checked in.</param>
      <param name="language">The language of the content that the check in is related to.</param>
      <param name="contentGuid">The unique identifier of the content that was checked in.</param>
      <param name="contentTypeId">The content type of the content that was checked in.</param>
      <param name="name">The name of the content that was checked in.</param>
      <param name="checkedInBy">The username of the user responsible for checking in the content.</param>
      <param name="delayPublish">Indicates if the check in was a delay publish action.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.ContentCheckInActivity.DelayPublish">
      <summary>
            Gets an indication if the check in was a delayed publish action.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.DirectoryActionType">
      <summary>
            The types of action a file change log can have
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.DirectoryActionType.Undefined">
      <summary>
            No action defined
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.DirectoryActionType.Add">
      <summary>
            Directory added
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.DirectoryActionType.Move">
      <summary>
            Directory moved
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.DirectoryActionType.Copy">
      <summary>
            Directory copied
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.DirectoryActionType.Delete">
      <summary>
            Directory deleted
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.DirectoryActivity">
      <summary>
            An EPiServer CMS directory change log
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.DirectoryActivity.#ctor(EPiServer.DataAbstraction.Activities.DirectoryActionType,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.DirectoryActivity" /> class.
            </summary>
      <param name="directoryAction">The action taken on the directory</param>
      <param name="virtualPath">The virtual path of the affected directory</param>
      <param name="changedBy">The user who performed the action</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.DirectoryActivity.DirectoryAction">
      <summary>
            Gets the action that was taken on the directory.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.DirectoryActivity.VirtualPath">
      <summary>
            The virtual path of the affected directory
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.DirectoryLocationActivity">
      <summary>
            An EPiServer CMS directory location change log. Used for directory gets moved
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.DirectoryLocationActivity.#ctor(EPiServer.DataAbstraction.Activities.DirectoryActionType,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.DirectoryLocationActivity" /> class.
            </summary>
      <param name="directoryAction">The action taken on the directory</param>
      <param name="virtualPath">The virtual path of the affected directory</param>
      <param name="newVirtualPath">The new virtual path of the affected directory</param>
      <param name="changedBy">The user who performed the action</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.DirectoryLocationActivity.NewVirtualPath">
      <summary>
            Gets the new virtual path of the affected directory
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.FileActionType">
      <summary>
            The types of action a file change log can have
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.FileActionType.Undefined">
      <summary>
            No action defined
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.FileActionType.Add">
      <summary>
            File added
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.FileActionType.ContentChange">
      <summary>
            File content changes
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.FileActionType.Move">
      <summary>
            File moved
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.FileActionType.Copy">
      <summary>
            File copied
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.FileActionType.CheckOut">
      <summary>
            File check-out
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.FileActionType.CheckIn">
      <summary>
            File checked-in
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.FileActionType.UndoCheckOut">
      <summary>
            File check-out undone
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Activities.FileActionType.Delete">
      <summary>
            File deleted
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.FileActivity">
      <summary>
            An EPiServer CMS file change log
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.FileActivity.#ctor(EPiServer.DataAbstraction.Activities.FileActionType,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.FileActivity" /> class.
            </summary>
      <param name="fileAction">The action taken on the file</param>
      <param name="virtualPath">The virtual path of the affected file</param>
      <param name="changedBy">The user who performed the action</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.FileActivity.FileAction">
      <summary>
            Gets the action that was taken on the file.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.FileActivity.VirtualPath">
      <summary>
            Gets the virtual path of the affected file
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Activities.FileLocationActivity">
      <summary>
            An EPiServer CMS file location change log
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Activities.FileLocationActivity.#ctor(EPiServer.DataAbstraction.Activities.FileActionType,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Activities.FileLocationActivity" /> class.
            </summary>
      <param name="fileAction">The action taken on the file</param>
      <param name="virtualPath">The virtual path of the affected file</param>
      <param name="newVirtualPath">The new virtual path of the affected file</param>
      <param name="changedBy">The user who performed the action</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Activities.FileLocationActivity.NewVirtualPath">
      <summary>
            Get the new virtual path of the affected file
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.AlreadyInUseException">
      <summary>
            Thrown by data abstraction layer classes when parameter is already in use
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.AlreadyInUseException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.AlreadyInUseException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.AlreadyInUseException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.AlreadyInUseException" /> class.
            </summary>
      <param name="error">Description of the error.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.AlreadyInUseException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.AlreadyInUseException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.AlreadyInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.AlreadyInUseException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.Availability">
      <summary>
            Sets the availability for the content type
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Availability.Undefined">
      <summary>
            The setting is not defined
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Availability.None">
      <summary>
            No content types are available.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Availability.All">
      <summary>
            All content types are available.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.Availability.Specific">
      <summary>
            A specfic set of content types are available.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.AvailableSetting">
      <summary>
            Represents the settings for which pages of type <see cref="T:EPiServer.DataAbstraction.ContentType" /> that are allowed under a <see cref="T:EPiServer.DataAbstraction.ContentType" /></summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.AvailableSetting.AllowedContentTypeNames">
      <summary>
            Gets the settings for which <see cref="T:EPiServer.DataAbstraction.PageType" /> that are allowed under a specific <see cref="T:EPiServer.DataAbstraction.PageType" /></summary>
      <remarks>
            It this list is empty and <see cref="P:EPiServer.DataAbstraction.AvailableSetting.Availability" /> is Undefined it means no settings is defined which means
            all content types are available.
            </remarks>
      <value>The allowed content types.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.AvailableSetting.Availability">
      <summary>
            Gets or sets the settings for if No pages are available under an instance of <see cref="T:EPiServer.DataAbstraction.PageType" /></summary>
      <value>The none available setting.</value>
    </member>
    <member name="M:EPiServer.DataAbstraction.AvailableSetting.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType">
      <summary>
            Represents a property definition type for a property of type Block.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockPropertyDefinitionType.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.BlockPropertyDefinitionType.DataType">
      <summary>
            The <see cref="T:EPiServer.Core.PropertyDataType" /> used by this type.
            </summary>
      <remarks>The setter is only available for internal techical reasons. It should never be set to anything except Block.</remarks>
      <value>Will always be <see cref="F:EPiServer.Core.PropertyDataType.Block" />.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.BlockPropertyDefinitionType.BlockType">
      <summary>
            Gets or sets the reference to the <see cref="T:EPiServer.DataAbstraction.BlockTypeReference" /> type of the block.
            </summary>
      <value>The type of the block.</value>
    </member>
    <member name="T:EPiServer.DataAbstraction.BlockType">
      <summary>
            Represents the definition of a block. Used to create instances of <see cref="T:EPiServer.Core.BlockData" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockType.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.BlockType" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockType.#ctor(System.Int32,System.Guid,System.String,System.String,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.BlockType" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="guid">The GUID based identifier.</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="isAvailable">if set to <c>true</c> it will be available in edit mode.</param>
      <param name="sortOrder">The sort order.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockType.CreateWritableClone">
      <summary>Creates a writable clone of this object.</summary>
      <returns>A clone of this object that is writable.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.BlockTypeReference">
      <summary>
            Represents a reference to a <see cref="T:EPiServer.DataAbstraction.BlockType" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.BlockTypeReference.GUID">
      <summary>
            Gets or sets the Guid based block type id.
            </summary>
      <remarks>This id corresponds to property GUID on <see cref="T:EPiServer.DataAbstraction.BlockType" /></remarks>
      <value>The block type id.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.BlockTypeReference.Name">
      <summary>
            Gets or sets the name of the <see cref="T:EPiServer.DataAbstraction.BlockType" /> that this type corresponds to.
            </summary>
      <value>The name of the block type.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.BlockTypeReference.ModelTypeString">
      <summary>
            Gets or sets the string representation Type from corresponding <see cref="T:EPiServer.DataAbstraction.BlockType" />  that this type corresponds to.
            </summary>
      <value>The name of the block type type.</value>
    </member>
    <member name="T:EPiServer.DataAbstraction.CancelPropertyDefinitionTypeEventArgs">
      <summary>
            Event args used when for property definition events
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.CancelPropertyDefinitionTypeEventArgs.#ctor(EPiServer.DataAbstraction.PropertyDefinitionType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.CancelPropertyDefinitionTypeEventArgs" /> class.
            </summary>
      <param name="propertyDefinitionType">Type of the property definition.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.CancelPropertyDefinitionTypeEventArgs.PropertyDefinitionType">
      <summary>
            Gets the <see cref="P:EPiServer.DataAbstraction.CancelPropertyDefinitionTypeEventArgs.PropertyDefinitionType" /> that the event is raised for.
            </summary>
      <value>The type of the property definition.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.CancelPropertyDefinitionTypeEventArgs.CancelReason">
      <summary>
            Gets or sets the cancel reason.
            </summary>
      <value>The cancel reason.</value>
    </member>
    <member name="T:EPiServer.DataAbstraction.Category">
      <summary>
            Represents category information that can be associated with <see cref="T:EPiServer.Core.IContent" /> instances.
            </summary>
      <remarks>
        <para>
            Categories are organized in a hierarchical data structure. Each Category instance has a <see cref="P:EPiServer.DataAbstraction.Category.Parent" /> 
            and a <see cref="P:EPiServer.DataAbstraction.Category.Categories" /> property that can be used to traverse this hierarchy.<br />
            You can use one of the <see cref="M:EPiServer.DataAbstraction.Category.FindChild(System.String)" /> or <see cref="M:EPiServer.DataAbstraction.Category.FindChild(System.Int32)" /> methods to find 
            a specific child or descendent category either by <see cref="P:EPiServer.DataAbstraction.Category.Name" /> or <see cref="P:EPiServer.DataAbstraction.Category.ID" />.
            </para>
      </remarks>
    </member>
    <member name="F:EPiServer.DataAbstraction.Category.RootName">
      <summary>
            Name of the root category.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Category.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Category" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Category.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Category" /> class.
            </summary>
      <param name="name">The name of the category.</param>
      <param name="description">A description of the category.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Category.#ctor(EPiServer.DataAbstraction.Category,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Category" /> class.
            </summary>
      <param name="parent">The parent of the category.</param>
      <param name="name">The name of the category.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.ID">
      <summary>
            Gets or sets the id of this <see cref="T:EPiServer.DataAbstraction.Category" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.Parent">
      <summary>
            Gets or sets the parent category.
            This property will be <c>null</c> for the root category.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.GUID">
      <summary>
            Gets or sets the unique identifier of this <see cref="T:EPiServer.DataAbstraction.Category" /></summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.Name">
      <summary>
            Gets or sets the name of this <see cref="T:EPiServer.DataAbstraction.Category" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.Description">
      <summary>
            Gets or sets the long description of this <see cref="T:EPiServer.DataAbstraction.Category" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.LocalizedDescription">
      <summary>
            Gets a localized description of this <see cref="T:EPiServer.DataAbstraction.Category" /> using the <see cref="P:EPiServer.DataAbstraction.Category.LocalizationService" />.
            If no localized value is found, the <see cref="P:EPiServer.DataAbstraction.Category.Description" /> will be used.
            </summary>
      <remarks>
        <para>
                The description field is html encoded if used.
            </para>
        <para>
                The category description should be localized under the path '/categories/category[@name="MyCategory"]/description'
                where 'MyCategory' is the name of the current category.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.SortOrder">
      <summary>
            Gets or sets the index for sorting categories on the same branch
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.Indent">
      <summary>
            Gets or sets the indent of this <see cref="T:EPiServer.DataAbstraction.Category" />.
            The indent of the root category is 0.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.Available">
      <summary>
            Gets or sets a value indicating if this <see cref="T:EPiServer.DataAbstraction.Category" /> should be available in edit mode.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.Selectable">
      <summary>
            Gets or sets a value indicating if this <see cref="T:EPiServer.DataAbstraction.Category" /> should be selectable in edit mode
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.Categories">
      <summary>
            Gets or sets a list of all child categories of this <see cref="T:EPiServer.DataAbstraction.Category" />.
            </summary>
      <remarks>
            Note that changes to this collection or to any category contained in this collection
            must be saved individually by calling the <see cref="M:EPiServer.DataAbstraction.CategoryRepository.Save(EPiServer.DataAbstraction.Category)" /> method. 
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.Category.FindChild(System.Int32)">
      <summary>
            Recursive search for a category in all descendant children
            </summary>
      <param name="id">The id number for the category to find</param>
      <returns>The found category or null of the category could not be found</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Category.FindChild(System.String)">
      <summary>
            Recursive search for a category in all descendant children
            </summary>
      <param name="name">The name number for the category to find</param>
      <returns>The found category or null of the category could not be found</returns>
      <remarks>The search is not case-sensitive (uses OrdinalIgnoreCase).</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>
            States that IListSource.GetList will not return a collection of collections
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Category.GetList">
      <summary>
            Gets a list of all descendant categories. 
            </summary>
      <remarks>
            Implements IListSource which provides the functionality so a category tree can be databound
            as a flat list.        
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.Category.MakeReadOnly">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.Category.CreateWritableClone">
      <summary>
            Creates a writable copy of the current and all descendant categories. 
            </summary>
      <returns>
            A writable copy of the current <see cref="T:EPiServer.DataAbstraction.Category" />.
            </returns>
      <remarks>
            The cloning is a deep-copy except for the <see cref="P:EPiServer.DataAbstraction.Category.Parent" /> property that is preserved
            on the returned <see cref="T:EPiServer.DataAbstraction.Category" />. The writable status of the parent instance will not be changed.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.Category.ThrowIfReadOnly">
      <summary>
            Throws an exception if the current instance is read-only.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Category.IsModified">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.Category.ResetModified">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAbstraction.CategoryCollection">
      <summary>
            Represents a collection of <see cref="T:EPiServer.DataAbstraction.Category" /> instances.
            </summary>
      <remarks>
            You can use this class to iterate through categories from a given level, or 
            add and delete categories. See the Category class for more information. 
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.CategoryCollection" /> class without an owner.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.#ctor(EPiServer.DataAbstraction.Category)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.CategoryCollection" /> class.
            </summary>
      <param name="parent">The parent category that the categories in this collection will be children of.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.CategoryCollection.Items">
      <summary>
            Gets direct access to a list of the contained categories.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.CategoryCollection.Count">
      <summary>
            Gets the number of categories contained in the <see cref="T:CategoryCollection" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.CategoryCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:CategoryCollection" /> is read-only.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.CategoryCollection.Item(System.Int32)">
      <summary>
            Gets or sets the category at the specified index.
            </summary>
      <param name="index">The index of the <see cref="T:EPiServer.DataAbstraction.Category" /> to access.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.Category" /> at the provided index.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.Add(EPiServer.DataAbstraction.Category)">
      <summary>
            Adds a category to the <see cref="T:CategoryCollection" />.
            </summary>
      <param name="item">The category to add to the <see cref="T:CategoryCollection" />.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.AddRange(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.Category})">
      <summary>
            Adds a range of categories to the <see cref="T:CategoryCollection" />.
            </summary>
      <param name="items">The categories to add.</param>
      <exception cref="T:System.ArgumentNullException">items</exception>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.Clear">
      <summary>
            Removes all categories from the <see cref="T:CategoryCollection" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.Contains(EPiServer.DataAbstraction.Category)">
      <summary>
            Determines whether the <see cref="T:CategoryCollection" /> contains a specific category.
            </summary>
      <param name="item">The category to locate in the <see cref="T:CategoryCollection" />.</param>
      <returns>
            true if the <paramref name="item" /> is found in the <see cref="T:CategoryCollection" />; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.IndexOf(EPiServer.DataAbstraction.Category)">
      <summary>
            Determines the index of a specific category in the <see cref="T:CategoryCollection" />.
            </summary>
      <param name="item">The category to locate in the <see cref="T:CategoryCollection" />.</param>
      <returns>
            The index of the <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.Insert(System.Int32,EPiServer.DataAbstraction.Category)">
      <summary>
            Inserts an item to the <see cref="T:CategoryCollection" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:CategoryCollection" />.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.Remove(EPiServer.DataAbstraction.Category)">
      <summary>
            Removes the first occurrence of a specific category from the <see cref="T:CategoryCollection" />.
            </summary>
      <param name="item">The category to remove from the <see cref="T:CategoryCollection" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:CategoryCollection" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:CategoryCollection" />.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the category at the specified index in the <see cref="T:CategoryCollection" />.
            </summary>
      <param name="index">The zero-based index of the category to remove.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through all the categories in the collection.
            </summary>
      <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.MakeReadOnly">
      <inherit />
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.CreateWritableClone">
      <inherit />
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryCollection.ThrowIfReadOnly">
      <summary>
            Throws an exception if the <see cref="T:CategoryCollection" /> is read only.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.CategoryEventArgs">
      <summary>
            Contains event arguments for events raised by <see cref="T:EPiServer.DataAbstraction.ICategoryEvents" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryEventArgs.#ctor(EPiServer.DataAbstraction.Category)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.CategoryEventArgs" /> class.
            </summary>
      <param name="category">The <see cref="T:EPiServer.DataAbstraction.Category" /> instance that was changed.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.CategoryEventArgs.Category">
      <summary>
            Get the <see cref="T:EPiServer.DataAbstraction.Category" /> that was changed. 
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryRepository.GetRoot">
      <summary>
            Get the category tree starting at the root
            </summary>
      <returns>The root category</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryRepository.Get(System.Int32)">
      <summary>
            Recursive search for a category with the provided id starting at the root.
            </summary>
      <param name="id">The id of the <see cref="T:EPiServer.DataAbstraction.Category" /> to retrieve</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.Category" /> with the provided id if found: otherwise null.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryRepository.Get(System.String)">
      <summary>
            Recursive search for a <see cref="T:EPiServer.DataAbstraction.Category" /> with the provided name starting at the root. 
            </summary>
      <param name="name">The name of the <see cref="T:EPiServer.DataAbstraction.Category" /> to retrieve.</param>
      <returns>The first <see cref="T:EPiServer.DataAbstraction.Category" /> with the provided name if found; otherwise null.</returns>
      <remarks>
            Search is not case-sensitive (uses OrdinalIgnoreCase).
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryRepository.Save(EPiServer.DataAbstraction.Category)">
      <summary>
            Save changes made to the current <see cref="T:EPiServer.DataAbstraction.Category" /> instance. 
            </summary>
      <remarks>
            This method will only save changes to the current category. 
            Any added or modified child categories must be saved individually.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.CategoryRepository.Delete(EPiServer.DataAbstraction.Category)">
      <summary>
            Delete the current category and all descendant categories.
            </summary>
      <remarks>
            You will have to reload the parent category to get an updated view of the
            category tree.
            </remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.CircularReferenceException">
      <summary>
            Exception class thrown when an invalid circular reference is detected.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.CircularReferenceException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.CircularReferenceException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.CircularReferenceException.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.CircularReferenceException" /> class.
            </summary>
      <param name="type">The type that contained the circular reference.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.CircularReferenceException.#ctor(System.Type,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.CircularReferenceException" /> class
            with a specified error message.
            </summary>
      <param name="type">The type that contained the circular reference.</param>
      <param name="message">The message that describes the error</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.CircularReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.CircularReferenceException" /> class
            with serialized data.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.CircularReferenceException.Type">
      <summary>
            Gets the <see cref="P:EPiServer.DataAbstraction.CircularReferenceException.Type" /> that contained the circular reference.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ConflictingResourceException">
      <summary>
            Exception class thrown when trying to create or save an item and a conflicting resource already exist.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ConflictingResourceException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ConflictingResourceException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ConflictingResourceException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ConflictingResourceException" /> class
            with a specified error message.
            </summary>
      <param name="message">The message that describes the error</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ConflictingResourceException.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ConflictingResourceException" /> class
            with an indication of a specific member that caused the conflict.
            </summary>
      <param name="member">The name of the member that caused the conflict.</param>
      <param name="value">The value of the member that caused the conflict.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ConflictingResourceException.#ctor(System.String,System.Object,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ConflictingResourceException" /> class
            with an indication of a specific member that caused the conflict and a specified error message.
            </summary>
      <param name="member">The name of the member that caused the conflict.</param>
      <param name="value">The value of the member that caused the conflict.</param>
      <param name="message">The message that describes the error</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ConflictingResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ConflictingResourceException" /> class
            with serialized data.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ConflictingResourceException.Member">
      <summary>
            Gets the name of the <see cref="P:EPiServer.DataAbstraction.ConflictingResourceException.Member" /> that caused the conflict.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ConflictingResourceException.Value">
      <summary>
            Gets the value of the <see cref="P:EPiServer.DataAbstraction.ConflictingResourceException.Member" /> that caused the conflict.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentCoreData">
      <summary>
            Class for representing content in a light weight fashion. This class only contains the meta properties for content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.ContentReference">
      <summary>
            Gets or sets the unique identifier (<see cref="P:EPiServer.DataAbstraction.ContentCoreData.ContentReference" />) for the content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.ContentTypeID">
      <summary>
            Gets or sets the content type identifier for the content (see <see cref="P:EPiServer.DataAbstraction.ContentType.ID" />).
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.ParentID">
      <summary>
            Gets or sets the ID number specifying the parent content.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.ContentGuid">
      <summary>
            Gets or sets the unique guid based identifier for the content. 
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.LinkUrl">
      <summary>
            Gets or sets the link URL. The URL is epxressed as a locally valid root-relative
            http path and query, including the appropriate ID. This is stored in the database, but
            can actually be derived from ID and ContentTypeID.
            </summary>
      <value>The link URL.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.Deleted">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.DataAbstraction.ContentCoreData" /> is deleted.
            </summary>
      <value>
        <c>true</c> if deleted; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.PendingPublish">
      <summary>
            Gets or sets a value indicating whether the content is pending publish.
            </summary>
      <value>
        <c>true</c> if content is pending publish; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.Created">
      <summary>
            Gets or sets the time when the content was created.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.Changed">
      <summary>
            Gets or sets the time when the content was last changed.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.Saved">
      <summary>
            Gets or sets the time when the content was last save.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.StartPublish">
      <summary>
            Gets or sets the time when the content will be published.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.StopPublish">
      <summary>
            Gets or sets the time when the content will stop to be published. 
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.ExternalFolderID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.ContentAssetsID">
      <summary>
            Gets or sets the content assets id
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.ContentLinkGuid">
      <summary>
            Gets or sets the guid based content link.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.AutomaticLink">
      <summary>
            Gets or sets a value indicating whether [automatic link].
            </summary>
      <value>
        <c>true</c> if [automatic link]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.FetchData">
      <summary>
            Gets or sets a value indicating whether this content is fetching data another content.
            </summary>
      <value>
        <c>true</c> if data is fetched from another content; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentCoreData.MasterLanguageBranchID">
      <summary>
            Gets or sets the ID number for the master language branch.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentLanguageSetting">
      <summary>
            Defined language setting per content in EPiServer similar to dynamic properties
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSetting.IsActive">
      <summary>
            Gets or sets a value indicating whether this language is active.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSetting.LanguageBranch">
      <summary>
            For the language branch this setting has been defined
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSetting.ReplacementLanguageBranch">
      <summary>
            The default language if a language selection has not been done
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSetting.LanguageBranchFallback">
      <summary>
            A list of fallback languages when a language is missing
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs">
      <summary>
            Event args for <see cref="T:EPiServer.DataAbstraction.ContentLanguageSetting" />.
            </summary>
      <remarks>Used when <see cref="T:EPiServer.DataAbstraction.ContentLanguageSetting" /> are saved and deleted.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs.#ctor(EPiServer.DataAbstraction.ContentLanguageSetting)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs.#ctor(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs.#ctor(EPiServer.Core.ContentReference,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
      <param name="replacementLanguage">The replacement language.</param>
      <param name="fallbackLanguage">The fallback language.</param>
      <param name="active">
        <c>true</c> if the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSetting" /> are active.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs.ContentLink">
      <summary>
            Gets the content link.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs.Language">
      <summary>
            Gets the language.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs.ReplacementLanguage">
      <summary>
            Gets the replacement language.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs.FallbackLanguage">
      <summary>
            Gets the fallback language.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSettingEventArgs.Active">
      <summary>
            Gets a value indicating whether the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSetting" /> is active.
            </summary>
      <value>
        <c>true</c> if active; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs">
      <summary>
            Event arguments used in <see cref="E:EPiServer.DataAbstraction.ContentLanguageSettingRepository.ContentLanguageSettingSaving" /> and <see cref="E:EPiServer.DataAbstraction.ContentLanguageSettingRepository.ContentLanguageSettingDeleting" /> events
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs.#ctor(EPiServer.DataAbstraction.ContentLanguageSetting)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs.#ctor(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs.#ctor(EPiServer.Core.ContentReference,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
      <param name="replacementLanguage">The replacement language.</param>
      <param name="fallbackLanguage">The fallback language.</param>
      <param name="active">
        <c>true</c> if the <see cref="T:EPiServer.DataAbstraction.ContentLanguageSetting" /> are active.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs.CancelAction">
      <summary>
            Set value to abort the current event handling
            </summary>
      <remarks>Changing this value may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs.CancelReason">
      <summary>
            Gets or sets the reason for cancel.
            </summary>
      <value>The cancel reason.</value>
      <remarks>
            If the cancellation results in an EPiServerCancelAction, this string will be used as the message in the exception.
            </remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentLanguageSettingRepository">
      <summary>
            Repository for defined language setting per content in EPiServer similar to dynamic properties
            </summary>
      <remarks>To find a language setting at runtime use <see cref="T:EPiServer.Core.IContentLanguageSettingsHandler" /> instead since it has sophisticated support for caching and find the closest setting defined.</remarks>
    </member>
    <member name="E:EPiServer.DataAbstraction.ContentLanguageSettingRepository.ContentLanguageSettingSaving">
      <summary>
            Trigged when content language setting are about to be saved.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ContentLanguageSettingRepository.ContentLanguageSettingSaved">
      <summary>
            Trigged when content language setting have been saved.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ContentLanguageSettingRepository.ContentLanguageSettingDeleting">
      <summary>
            Trigged when content language setting are about to be deleted.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ContentLanguageSettingRepository.ContentLanguageSettingDeleted">
      <summary>
            Trigged when content language setting have been deleted.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingRepository.Save(EPiServer.DataAbstraction.ContentLanguageSetting)">
      <summary>
            Save changes for the content and language branch
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingRepository.Delete(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Delete settings for the content and language branch
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingRepository.Load(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Load settings for a content and language
            </summary>
      <param name="contentLink">The content link</param>
      <param name="language">The language</param>
      <returns>The setting or <c>null</c> if no setting was found</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingRepository.Load(EPiServer.Core.ContentReference)">
      <summary>
            Load all settings all languages on a content
            </summary>
      <param name="contentLink">The page to load settings for</param>
      <returns>Returns array of PageLanguageSettings, empty array if no settings has been defined</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingRepository.List">
      <summary>
            Load the complete language settings tree
            </summary>
      <returns>A list of all language settings</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingRepository.OnSaving(EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs)">
      <summary>
            Raises <see cref="E:EPiServer.DataAbstraction.ContentLanguageSettingRepository.ContentLanguageSettingSaving" /></summary>
      <param name="eventArgs">
      </param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingRepository.OnSaved(EPiServer.DataAbstraction.ContentLanguageSettingEventArgs)">
      <summary>
            Raises <see cref="E:EPiServer.DataAbstraction.ContentLanguageSettingRepository.ContentLanguageSettingSaved" /></summary>
      <param name="eventArgs">
      </param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingRepository.OnDeleting(EPiServer.DataAbstraction.ContentLanguageSettingCancellableEventArgs)">
      <summary>
            Raises <see cref="E:EPiServer.DataAbstraction.ContentLanguageSettingRepository.ContentLanguageSettingDeleting" /></summary>
      <param name="eventArgs">
      </param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentLanguageSettingRepository.OnDeleted(EPiServer.DataAbstraction.ContentLanguageSettingEventArgs)">
      <summary>
            Raises <see cref="E:EPiServer.DataAbstraction.ContentLanguageSettingRepository.ContentLanguageSettingDeleted" /></summary>
      <param name="eventArgs">
      </param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentReportQuery">
      <summary>
            Define a common report query
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.Root">
      <summary>
            Root content
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.Language">
      <summary>
            The language
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.SortColumn">
      <summary>
            The sorting creteria
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.SortDirection">
      <summary>
            The sort direction, 0 ascending, 1 descending
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.PageSize">
      <summary>
            The page size
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.PageNumber">
      <summary>
            The page number
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.StartDate">
      <summary>
            Start date
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.EndDate">
      <summary>
            End date
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.ChangeBy">
      <summary>
            changed by
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.PublishedBy">
      <summary>
            published by
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentReportQuery.IsReadyToPublish">
      <summary>
            Ready to publish
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentReportSortColumn">
      <summary>
            The sort criteria
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentRootRepository">
      <summary>
            Repository for content roots.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentRootRepository.Load(System.String)">
      <summary>
            Load the content root for the rootname.
            </summary>
      <param name="rootName">the root name</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentRootRepository.Save(System.String,EPiServer.Core.ContentReference)">
      <summary>
            Save a content root. 
            </summary>
      <param name="rootName">The root name</param>
      <param name="contentRoot">The content root</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentRootRepository.Delete(System.String)">
      <summary>
            Delete a content root
            </summary>
      <param name="rootName">The root name</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentRootRepository.List">
      <summary>
            list of all content roots.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentRootRepository.Clear">
      <summary>
            Clear all roots.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentRootService">
      <summary>
            Service registry for content roots. 
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentRootService.Register``1(System.String,System.Guid,EPiServer.Core.ContentReference)">
      <summary>
            Register a content root for the root name with specific <paramref name="contentRootId" />. A Content of type T is created as a content root with the <paramref name="contentRootId" />.
            </summary>
      <typeparam name="T">The type of root content</typeparam>
      <param name="rootName">The root name</param>
      <param name="contentRootId">The content root id</param>
      <param name="parent">The partent of root</param>
      <exception cref="T:System.NotSupportedException">If the rootname is already registered with another contentRootId.</exception>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentRootService.Unregister(System.String)">
      <summary>
            Un-register the content root.
            </summary>
      <param name="rootName">The root name</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentRootService.Get(System.String)">
      <summary>
            Get the root content for the root name.
            </summary>
      <param name="rootName">
      </param>
      <returns>The content root</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentRootService.List">
      <summary>
            List of content roots.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentType">
      <summary>
            Basic type information and comparison between types
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.#ctor(System.Int32,System.Guid,System.String,System.String,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="guid">The GUID based identifier.</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="isAvailable">if set to <c>true</c> it will be available in edit mode.</param>
      <param name="sortOrder">The sort order.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.#ctor(System.Int32,System.Guid,System.String,System.String,System.Boolean,System.Int32,EPiServer.DataAbstraction.ContentTypeBase)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="guid">The GUID based identifier.</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="isAvailable">if set to <c>true</c> it will be available in edit mode.</param>
      <param name="sortOrder">The sort order.</param>
      <param name="contentTypeBase">The base for the content type</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.ID">
      <summary>
            Gets or sets the unique identifier for this content type instance.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.GUID">
      <summary>
            Gets or sets the globally unique identifier for this content type instance.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.Created">
      <summary>
            Gets the date this content type instance was created.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.Saved">
      <summary>
            Gets the date this content type instance was saved.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.SavedBy">
      <summary>
            Gets who saved this content type instance.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.Name">
      <summary>
            Gets or sets the name of this content type instance.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.Base">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Gets or sets the base for this content type instance (e.g. page or block or etc).
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.Version">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Gets or sets the version of the content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.DisplayName">
      <summary>
            Gets or sets the diplay name of this content type instance.
            </summary>
      <remarks>
            This is the name for the content type in UI. When accessing the content type programatically <see cref="P:EPiServer.DataAbstraction.ContentType.Name" /> should be used.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.GroupName">
      <summary>
            Gets or sets the group name of this content type instance.
            </summary>
      <remarks>
            This is added in brackets to the DisplayName in UI. Group names are not stored in the database, the value is only assigned from the typed model.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.FullName">
      <summary>
            Gets the full name formed by group name between brackets and Name
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.Description">
      <summary>
            Gets or sets the description of this content type instance.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.IsAvailable">
      <summary>
            Gets or sets if the <see cref="T:EPiServer.DataAbstraction.ContentType" /> should be available in edit mode.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.SortOrder">
      <summary>
            Gets or sets the default sort index based on other types
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.ACL">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Security.AccessControlList">Access Control List (list of access permissions)</see> for this content type.
            </summary>
      <remarks>
        <para>
            The implementation for content types currently only respects the Create permission setting.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.PropertyDefinitions">
      <summary>
                Gets a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionCollection" /> containing all property definitions used by this content type.
            </summary>
      <remarks>
                The contents of this collection will not be persisted when the page or block that uses it is saved.
                If you want to work with property definitions, use the <see cref="T:EPiServer.DataAbstraction.IPropertyDefinitionRepository" />.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.ModelType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the model used to represent this type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.ModelTypeString">
      <summary>
            Gets or sets the string format of the model type.
            </summary>
      <value>The model type string.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.LocalizationService">
      <summary>
            The localization service used to resolve <see cref="P:EPiServer.DataAbstraction.ContentType.LocalizedName" /> and <see cref="P:EPiServer.DataAbstraction.ContentType.LocalizedDescription" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.DefaultWebFormTemplate">
      <summary>
            Gets or sets the Type of the "TemplateModel" that should be used as the default template used for web requests.
            </summary>
      <remarks>
        <para>
            The value can either be a webform or a user control.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.DefaultMvcController">
      <summary>
            Gets or sets the Type of the "TemplateModel" that should be used as the default template used for web requests.
            </summary>
      <remarks>
        <para>
            The value is a MVC controller.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.DefaultMvcPartialView">
      <summary>
            Gets or sets the Name of the MVC partial view "TemplateModel" that should be used as the default used for web requests.
            </summary>
      <remarks>
        <para>
            The value is the name of a MVC partial view.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.IsNew">
      <summary>
            Gets a value indicating whether this content type has been saved to the database.
            </summary>
      <value>
        <c>true</c> if this content type is new, i.e. not saved to the database; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.LocalizedName">
      <summary>
            Gets the name of this content type localized to the current language.
            If no localized name exist the standard <see cref="P:EPiServer.DataAbstraction.ContentType.Name" /> will be returned.
            </summary>
      <remarks>
        <para>
            To localize the content type name it should be located at the language path
            "/contenttypes/[YourContentTypeName]/name", where YourContentTypeName matches
            the <see cref="P:EPiServer.DataAbstraction.ContentType.Name" /> of the content type.<br /></para>
        <para>
            To localize the content type name it should be located at the language path
            "/contenttypes/[YourContentTypeName]/name", where YourContentTypeName matches
            the <see cref="P:EPiServer.DataAbstraction.ContentType.Name" /> of the content type.<br /></para>
        <para>
            If the content type is part of a group, it can also be located at the language path
            "/contenttypes/[YourGroupName]/[YourContentTypeName]/name", where YourGroupName matches
            the <see cref="P:EPiServer.DataAbstraction.ContentType.GroupName" /> of the content type.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.LocalizedGroupName">
      <summary>
            Gets the localized group name.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.LocalizedFullName">
      <summary>
            Gets the localized name of the content type including the group name if set.
            </summary>
      <remarks>This combines <see cref="P:EPiServer.DataAbstraction.ContentType.GroupName" /> and <see cref="P:EPiServer.DataAbstraction.ContentType.Name" /> in this format "[GroupName] Name".</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.LocalizedDescription">
      <summary>
            Gets the description of this content type localized to current language. 
            If no localized description exist the standard <see cref="P:EPiServer.DataAbstraction.ContentType.Description" /> will be returned.
            </summary>
      <remarks>
        <para>
            To localize the content type description it should be located at the language path
            "/contenttypes/[YourContentTypeName]/description", where YourContentTypeName matches
            the <see cref="P:EPiServer.DataAbstraction.ContentType.Name" /> of the content type.
            </para>
        <para>
            If the content type is part of a group, it can also be located at the language path
            "/contenttypes/[YourGroupName]/[YourContentTypeName]/description", where YourGroupName matches
            the <see cref="P:EPiServer.DataAbstraction.ContentType.GroupName" /> of the content type.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.NameLocalizationFormat">
      <summary>
            Gets the name localization format.
            </summary>
      <remarks>
            The format that is used when localizing the <see cref="P:EPiServer.DataAbstraction.ContentType.Name" /> in <see cref="P:EPiServer.DataAbstraction.ContentType.LocalizedName" />.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.GroupNameLocalizationFormat">
      <summary>
            Gets the group name localization format.
            </summary>
      <remarks>
            The format that is used when localizing the <see cref="P:EPiServer.DataAbstraction.ContentType.GroupName" /> in <see cref="P:EPiServer.DataAbstraction.ContentType.LocalizedFullName" />.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.DescriptionLocalizationFormat">
      <summary>
            Gets the description localization format.
            </summary>
      <remarks>
            The format that is used when localizing the <see cref="P:EPiServer.DataAbstraction.ContentType.Description" /> in <see cref="P:EPiServer.DataAbstraction.ContentType.LocalizedDescription" />.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.ResetContentType">
      <summary>
            Resets data that can be set from model.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.NullableSortOrder">
      <summary>
            Gets or sets the nullable sort order.
            </summary>
      <value>The nullable sort order.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.NullableIsAvailable">
      <summary>
            Gets or sets the nullable is available.
            </summary>
      <value>The nullable is available.</value>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.Equals(System.Object)">
      <summary>
            Determines whether this instance of <c>ContentType</c> and a specified object, which must also be a <c>ContentType</c> object, have the same value.
            </summary>
      <param name="obj">An object.</param>
      <returns>
        <c>true</c> if obj is a ContentType and its value is the same as this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.GetHashCode">
      <summary>
            Returns the hash code for this ContentType.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.op_Equality(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.ContentType)">
      <summary>
            Determines whether two specified <c>ContentType</c> objects have the same value.
            </summary>
      <param name="x">A <c>ContentType</c> or a null reference.</param>
      <param name="y">A <c>ContentType</c> or a null reference.</param>
      <returns>
        <c>true</c> if the value of x is the same as the value of y; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.op_Inequality(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.ContentType)">
      <summary>
            Determines whether two specified <c>ContentType</c> objects have different values.
            </summary>
      <param name="x">A <c>ContentType</c> or a null reference.</param>
      <param name="y">A <c>ContentType</c> or a null reference.</param>
      <returns>
        <c>true</c> if the value of x is different from the value of y; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.CreateWritableClone">
      <summary>Creates a writable clone of this object.</summary>
      <returns>A clone of this object that is writable.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.CreateWritableCloneImplementation">
      <summary>The method called by IReadOnly.CreateWritableClone.</summary>
      <returns>A clone of this object that is writable.</returns>
      <remarks>
        <para>
                    This method is called by <see cref="M:EPiServer.DataAbstraction.ContentType.CreateWritableClone" />. If you are inheriting, directly or indirectly, from 
                    <see cref="T:EPiServer.DataAbstraction.ContentType" /> you should override this method to make sure that all reference type members of your class are cloned.
                </para>
        <para>
                    Your override of this method <strong>must</strong> create the clone by calling <c>base.CreateWritableCloneImplementation()</c>. This ensures that all
                    classes in the inheritance chain can create clones as necessary. Also, by calling the base implementation the values of all value 
                    type members are copied as <see cref="T:EPiServer.DataAbstraction.ContentType" />'s implementation of this method calls <see cref="M:System.Object.MemberwiseClone" />.
                </para>
      </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentType.IsReadOnly">
      <summary>Gets a value indicating if current instance is read-only.</summary>
      <value>
        <c>true</c> if this instance is read-only; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.MakeReadOnly">
      <summary>Makes the current instance and all it's properties read-only.</summary>
      <remarks>After calling this method the <see cref="P:EPiServer.DataAbstraction.ContentType.IsReadOnly" /> property will return <c>true</c>.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentType.ThrowIfReadOnly">
      <summary>Throws an exception if the current instance is read-only.</summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentTypeAvailabilityService">
      <summary>
            Abstract class for avalibale content types that has both filtering by access on <see cref="T:EPiServer.DataAbstraction.ContentType" /> and <see cref="T:EPiServer.DataAbstraction.GroupDefinition" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeAvailabilityService.GetSetting(System.String)">
      <summary>
            Gets the current settings for available content types for a <see cref="T:EPiServer.DataAbstraction.ContentType" /> given by name <paramref name="contentTypeName" />.
            </summary>
      <param name="contentTypeName">Name of the content type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeAvailabilityService.IsAllowed(System.String,System.String)">
      <summary>
            Determines whether a <see cref="T:EPiServer.Core.IContent" /> of the ContentType named <paramref name="childContentTypeName" /> is allowed to be created under a Content of
            the ContentType named <paramref name="parentContentTypeName" />.
            </summary>
      <param name="parentContentTypeName">The name of the parent ContentType.</param>
      <param name="childContentTypeName">The name of child ContentType.</param>
      <returns>
        <c>true</c> if the specified content type is allowed; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeAvailabilityService.ListAvailable(System.String,System.Security.Principal.IPrincipal)">
      <summary>
            Lists all available <see cref="T:EPiServer.DataAbstraction.ContentType" /> that can be created under a content instance of type <paramref name="contentTypeName" />.
            </summary>
      <param name="contentTypeName">
      </param>
      <param name="user">
      </param>
      <returns>
      </returns>
      <remarks>The list is filtered due to the <paramref name="user" />, <see cref="T:EPiServer.Security.IContentSecurable" /> but not <see cref="T:EPiServer.DataAnnotations.RequiredAccessAttribute" /> on the <see cref="T:EPiServer.DataAnnotations.GroupDefinitionsAttribute" /></remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeAvailabilityService.ListAvailable(EPiServer.Core.IContent,System.Boolean,System.Security.Principal.IPrincipal)">
      <summary>
            Lists all available <see cref="T:EPiServer.DataAbstraction.ContentType" /> that can be created under a content instance of content <paramref name="content" />.
            </summary>
      <param name="content">
      </param>
      <param name="contentFolder">If true then list all available <see cref="T:EPiServer.DataAbstraction.ContentType" /> that can be created under <see cref="T:EPiServer.Core.ContentFolder" /> otherwise list all avalible <see cref="T:EPiServer.DataAbstraction.ContentType" /> under content type of the content</param>
      <param name="user">
      </param>
      <returns>
      </returns>
      <remarks>The list is filtered due to the <paramref name="user" />, <see cref="T:EPiServer.Security.IContentSecurable" /> and <see cref="T:EPiServer.DataAnnotations.RequiredAccessAttribute" /> on the <see cref="T:EPiServer.DataAnnotations.GroupDefinitionsAttribute" /></remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentTypeBase">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Constants mapped to <see cref="P:EPiServer.DataAbstraction.ContentType.Base" /></summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeBase.Undefined">
      <summary>
            Represents an undefined content type base.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeBase.Page">
      <summary>
            The base for Page content types.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeBase.Block">
      <summary>
            The base for Block content types.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeBase.Folder">
      <summary>
            The base for Folder content types.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeBase.Media">
      <summary>
            The base for Media content types.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeBase.Image">
      <summary>
            The base for Image content types.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeBase.Video">
      <summary>
            The base for Video content types.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeBase.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentTypeBase" /> structure.
            </summary>
      <param name="value">The string value of the content type base.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeBase.op_Equality(EPiServer.DataAbstraction.ContentTypeBase,EPiServer.DataAbstraction.ContentTypeBase)">
      <summary>
            Determines if two <see cref="T:EPiServer.DataAbstraction.ContentTypeBase" /> values are the same.
            </summary>
      <param name="left">The first <see cref="T:EPiServer.DataAbstraction.ContentTypeBase" /> to compare.</param>
      <param name="right">The second <see cref="T:EPiServer.DataAbstraction.ContentTypeBase" /> to compare.</param>
      <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeBase.op_Inequality(EPiServer.DataAbstraction.ContentTypeBase,EPiServer.DataAbstraction.ContentTypeBase)">
      <summary>
            Determines if two <see cref="T:EPiServer.DataAbstraction.ContentTypeBase" /> values are different.
            </summary>
      <param name="left">The first <see cref="T:EPiServer.DataAbstraction.ContentTypeBase" /> to compare.</param>
      <param name="right">The second <see cref="T:EPiServer.DataAbstraction.ContentTypeBase" /> to compare.</param>
      <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeBase.op_Explicit(System.String)~EPiServer.DataAbstraction.ContentTypeBase">
      <summary>
            Converts a string to a <see cref="T:EPiServer.DataAbstraction.ContentTypeBase" />.
            </summary>
      <param name="value">The string value to convert.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeBase.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeBase.Equals(EPiServer.DataAbstraction.ContentTypeBase)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeBase.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeBase.ToString">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentTypeDifference">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Represents the difference between two versions of a content type
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeDifference.Empty">
      <summary>
            An empty instance of <see cref="T:EPiServer.DataAbstraction.ContentTypeDifference" /> that indicates that
            there is no difference between the content types that was compared.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeDifference.#ctor(EPiServer.DataAbstraction.VersionComponent,System.String)">
      <param name="versionComponent">The version component that indicates the level of difference between the two content types.</param>
      <param name="reason">The reason for the difference that this instance represents.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeDifference.VersionComponent">
      <summary>
            Gets a value that's indicating the level of difference between the two content types.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeDifference.Reason">
      <summary>
            Gets the reason for the difference that this instance represents.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeDifference.IsValid">
      <summary>
            Gets a value indicating if the difference between the two content types is a valid change.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeDifference.Invalid(System.String)">
      <summary>
            Creates a new <see cref="T:EPiServer.DataAbstraction.ContentTypeDifference" /> instance that represents an invalid difference.
            </summary>
      <param name="reason">The reason for the invalid difference that this instance represents.</param>
      <returns>A new <see cref="T:EPiServer.DataAbstraction.ContentTypeDifference" /> instance.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentTypeEventArgs">
      <summary>
            Class to pass event arguments from <see cref="T:EPiServer.DataAbstraction.ContentType" /> events.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeEventArgs.#ctor(System.Int32,System.Guid,System.Boolean)">
      <inheritdoc cref="M:EPiServer.DataAbstraction.ContentTypeEventArgs.#ctor(System.Int32,System.Guid,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeEventArgs.#ctor(System.Int32,System.Guid,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentTypeEventArgs" /> class.
            </summary>
      <param name="contentTypeID">The ID of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event.</param>
      <param name="contentTypeGUID">The GUID of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event.</param>
      <param name="isBlockType">If set to <c>true</c> indicates that the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event is a <see cref="T:EPiServer.DataAbstraction.BlockType" /></param>
      <param name="isNewContentType">If set to <c>true</c> indicates that the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event is new.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeEventArgs.#ctor(System.Int32,System.Guid,System.Boolean,System.Boolean,System.String,System.Nullable{System.DateTime},System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentTypeEventArgs" /> class.
            </summary>
      <param name="contentTypeID">The ID of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event.</param>
      <param name="contentTypeGUID">The GUID of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event.</param>
      <param name="isBlockType">If set to <c>true</c> indicates that the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event is a <see cref="T:EPiServer.DataAbstraction.BlockType" /></param>
      <param name="isNewContentType">If set to <c>true</c> indicates that the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event is new.</param>
      <param name="name">The name of the  <see cref="T:EPiServer.DataAbstraction.ContentType" />.</param>
      <param name="saved">The time the  <see cref="T:EPiServer.DataAbstraction.ContentType" /> was saved.</param>
      <param name="savedBy">The user saved the  <see cref="T:EPiServer.DataAbstraction.ContentType" />.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeEventArgs.ContentTypeID">
      <summary>
            Gets the ID of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeEventArgs.ContentTypeGUID">
      <summary>
            Gets the GUID of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeEventArgs.IsNewContentType">
      <summary>
            Gets a value indicating whether the <see cref="T:EPiServer.DataAbstraction.ContentType" /> just been created.
            </summary>
      <value>
        <c>true</c> if the content type is a new page type; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeEventArgs.IsBlockType">
      <summary>
            Gets a value indicating whether the <see cref="T:EPiServer.DataAbstraction.ContentType" /> affected by the event is a <see cref="T:EPiServer.DataAbstraction.BlockType" />.
            </summary>
      <value>
        <c>true</c> if the content type is a <see cref="T:EPiServer.DataAbstraction.BlockType" />; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeEventArgs.Name">
      <summary>
            Gets the Name of the <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeEventArgs.SavedBy">
      <summary>
            Gets the user that saved the <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeEventArgs.Saved">
      <summary>
            Gets the time when the <see cref="T:EPiServer.DataAbstraction.ContentType" /> was saved.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentTypeFields">
      <summary>
            Fields that can exist on a content type.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.None">
      <summary>
            No fields.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.Name">
      <summary>
            The name field.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.Description">
      <summary>
            The description field.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.DisplayTemplates">
      <summary>
            The display template field.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.SortOrder">
      <summary>
            The sort order field.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.DisplayName">
      <summary>
            The display name field.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.AvailableInEditMode">
      <summary>
            The available in edit mode field.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.ACL">
      <summary>
            The access control list.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.DefaultValues">
      <summary>
            The default values setting.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.AvailablePageTypes">
      <summary>
            The available page type setting.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ContentTypeFields.All">
      <summary>
            All fields.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentTypeModelRepository">
      <summary>
            A Repository for <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" /> that corresponds to registered <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ContentTypeModelRepository.ModelChanged">
      <summary>
            Occurs when the repository has a change in a model instance.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeModelRepository.Register(System.Type,EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>
            Registers <paramref name="model" /> that corresponds to <paramref name="modelType" />.
            </summary>
      <param name="modelType">Type of the model.</param>
      <param name="model">The model.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeModelRepository.GetPropertyModel(System.Int32,EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Gets the property model that corresponds to a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> on the <see cref="T:EPiServer.DataAbstraction.ContentType" /> with given id.
            </summary>
      <param name="contentTypeId">The content type id.</param>
      <param name="propertyDefinition">The property definition.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeModelRepository.RegisterContentType(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Registers the <see cref="P:EPiServer.DataAbstraction.ContentType.ModelType" /> for a <see cref="T:EPiServer.DataAbstraction.ContentType" /> if it is not null. 
            </summary>
      <param name="contentType">Type of the content.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeModelRepository.GetContentTypeModel(System.Type)">
      <summary>
            Gets the content type model that corresponds to a model type that is defined on <see cref="P:EPiServer.DataAbstraction.ContentType.ModelType" />.
            </summary>
      <param name="modelType">Type of the model.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeModelRepository.List">
      <summary>
            Lists all registered <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" /></summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeModelRepository.OnModelChanged(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Method to raise <see cref="E:EPiServer.DataAbstraction.ContentTypeModelRepository.ModelChanged" /> event.
            </summary>
      <param name="contentType">Type of the content.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentTypeRepository">
      <summary>
            Repository for the <see cref="T:EPiServer.DataAbstraction.ContentType" /> data structure.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ContentTypeRepository.ContentTypeDeleted">
      <summary>
            Occurs when a <see cref="T:EPiServer.DataAbstraction.ContentType" /> has been deleted.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ContentTypeRepository.ContentTypeSaved">
      <summary>
            Occurs when a <see cref="T:EPiServer.DataAbstraction.ContentType" /> has been saved, i.e. created or updated.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Save(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Saves the specified <see cref="T:EPiServer.DataAbstraction.ContentType" /> to the data repository.
            </summary>
      <param name="contentType">Type content type to save.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Load(System.Int32)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the specified id from the data repository.
            </summary>
      <param name="id">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> id.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given id or null if none could be  found.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Load(System.String)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the specified name from the data repository.
            </summary>
      <param name="name">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> name.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given name or null if none could be  found.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Load(System.Guid)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the specified <see cref="T:System.Guid" /> from the data repository.
            </summary>
      <param name="guid">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> GUID.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given <see cref="T:System.Guid" /> or null if none could be  found.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Load(System.Type)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the underlying <see cref="T:System.Type" /> from the data repository.
            </summary>
      <param name="modelType">The underlying <see cref="T:System.Type" /> of the <see cref="T:EPiServer.DataAbstraction.ContentType" />.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given <see cref="T:System.Type" /> or null if none could be found.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Copy(System.Int32)">
      <summary>
            Creates a copy of the specified content type in the data repository and returns it.
            </summary>
      <param name="id">The id of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> to be copied.</param>
      <returns>The copy of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given id.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Copy(System.Type)">
      <summary>
            Creates a copy of the specified content type in the data repository and returns it.
            </summary>
      <param name="modelType">The underlying <see cref="T:System.Type" /> of the <see cref="T:EPiServer.DataAbstraction.ContentType" />.</param>
      <returns>The copy of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given type.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Copy(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Creates a copy of the specified content type in the data repository and returns it.
            </summary>
      <param name="contentType">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> to be copied.</param>
      <returns>The copy of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that was provided.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Delete(System.Int32)">
      <summary>
            Deletes a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the given id from the data repository.
            </summary>
      <param name="id">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> id.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Delete(System.Type)">
      <summary>
            Deletes a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the underlying <see cref="T:System.Type" /> from the data repository.
            </summary>
      <param name="modelType">The underlying <see cref="T:System.Type" /> of the <see cref="T:EPiServer.DataAbstraction.ContentType" />.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Delete(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Deletes a <see cref="T:EPiServer.DataAbstraction.ContentType" /> from the data repository.
            </summary>
      <param name="contentType">The content type that is to be deleted.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.List">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.ContentType" />s in the data repository.
            </summary>
      <returns>
            Enumeration of <see cref="T:EPiServer.DataAbstraction.ContentType" />s.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.OnContentTypeDeleted(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.ContentTypeEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.DataAbstraction.ContentTypeRepository.ContentTypeDeleted" /> event.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="args">The <see cref="T:EPiServer.DataAbstraction.ContentTypeEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.OnContentTypeSaved(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.ContentTypeEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.DataAbstraction.ContentTypeRepository.ContentTypeSaved" /> event.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="args">The <see cref="T:EPiServer.DataAbstraction.ContentTypeEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepository.Save(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ContentType},EPiServer.DataAbstraction.ContentTypeSaveOptions)">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Save list of <see cref="T:EPiServer.DataAbstraction.ContentType" /> with respect to <see cref="T:EPiServer.DataAbstraction.ContentTypeSaveOptions" /></summary>
      <param name="contentTypes">The content types.</param>
      <param name="options">The content type save options.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentTypeRepositoryExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.DataAbstraction.IContentTypeRepository" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepositoryExtensions.Load``1(EPiServer.DataAbstraction.IContentTypeRepository)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that corresponds to specific model type.
            </summary>
      <typeparam name="T">The model type</typeparam>
      <param name="repository">The repository.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentTypeRepositoryExtensions.Delete``1(EPiServer.DataAbstraction.IContentTypeRepository)">
      <summary>
            Deletes the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that corresponds to specific model type.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="repository">The repository.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentTypeSaveOptions">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Describes the type of action to perform when saving a content type item.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeSaveOptions.AllowedUpgrades">
      <summary>
            Gets or sets what kind of upgrade is allowed according to semantic versioning. E.g. <see cref="F:EPiServer.DataAbstraction.VersionComponent.Major" /> means it is allowed to upgrade to a new major version.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeSaveOptions.AllowedDowngrades">
      <summary>
            Gets or sets what kind of downgrade is allowed according to semantic versioning. E.g. <see cref="F:EPiServer.DataAbstraction.VersionComponent.Major" /> means it is allowed to downgrade to an old major version.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentTypeSaveOptions.AutoIncrementVersion">
      <summary>
            Gets or sets a value indicating whether the version of the content type should be automatically incremented.
            </summary>
      <remarks>Any assigned content type version will be ignored and overwritten.</remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentUsage">
      <summary>
            Represents a Content including language.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentUsage.ContentLink">
      <summary>
            Gets or sets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentUsage.LanguageBranch">
      <summary>
            Gets or sets the language branch for the page in use.
            </summary>
      <value>The language branch.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentUsage.Name">
      <summary>
            Gets or sets the name of the page in use.
            </summary>
      <value>The name.</value>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentVersion">
      <summary>
            A specific version of a <see cref="T:EPiServer.Core.ContentData" /> object.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentVersion.#ctor(EPiServer.Core.ContentReference,System.String,EPiServer.Core.VersionStatus,System.DateTime,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentVersion" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="name">The name.</param>
      <param name="workStatus">The work status.</param>
      <param name="saved">The saved.</param>
      <param name="savedBy">The saved by.</param>
      <param name="statusChangedBy">The status changed by.</param>
      <param name="masterVersionID">The master version ID.</param>
      <param name="languageBranch">The language branch.</param>
      <param name="isMasterLanguageBranch">Set to <c>true</c> if this version is for the master language branch.</param>
      <param name="isCommonDraft">Set to <c>true</c> if this version is the common draft for the content.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.ContentLink">
      <summary>
            Gets or sets the the link to the content this version belongs to.
            </summary>
      <value>The ID.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.Name">
      <summary>
            Gets or sets the name for the content version
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.Status">
      <summary>
            Gets or sets the status for the content version
            </summary>
      <value>The status.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.Saved">
      <summary>
            Gets or sets the saved time for the content version
            </summary>
      <value>The saved.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.SavedBy">
      <summary>
            Gets or sets the person who saved the content version
            </summary>
      <value>The saved by.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.StatusChangedBy">
      <summary>
            Gets or sets the person who changed the content version
            </summary>
      <value>The status changed by.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.MasterVersionID">
      <summary>
            Gets or sets the master version ID.
            </summary>
      <value>The master version ID.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.LanguageBranch">
      <summary>
            Gets or sets the language branch for the content version
            </summary>
      <value>The language branch.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.IsMasterLanguageBranch">
      <summary>
            Gets or sets a value indicating whether this content version is the master language branch.
            </summary>
      <value>
        <c>true</c> if this instance is master language branch; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.IsCommonDraft">
      <summary>
            Gets or sets a value indicating whether this instance is common draft.
            </summary>
      <value>
        <c>true</c> if this instance is common draft; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.DelayPublishUntil">
      <summary>
            Gets or sets the date when this version should be published when set as delay published.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentVersion.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
      <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentVersion.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentVersion.op_Equality(EPiServer.DataAbstraction.ContentVersion,EPiServer.DataAbstraction.ContentVersion)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>
            true if content versions are equal; otherwise false
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentVersion.op_Inequality(EPiServer.DataAbstraction.ContentVersion,EPiServer.DataAbstraction.ContentVersion)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>
            true if content versions are not equal; otherwise false
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentVersion.CreateWritableClone">
      <summary>
            Creates the a writable clone of this object.
            </summary>
      <returns>A writable clone of this object</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentVersion.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates the a writable clone of this object.
            </summary>
      <returns>A writable clone of this object</returns>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentVersion.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentVersion.MakeReadOnly">
      <summary>
            Makes this instance read only.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentVersion.ThrowIfReadOnly">
      <summary>
            Throws an exception if this instance read only.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.DataAbstractionException">
      <summary>
            Thrown by data abstraction layer classes on generic errors
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.DataAbstractionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.DataAbstractionException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.DataAbstractionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.DataAbstractionException" /> class.
            </summary>
      <param name="error">Description of the error.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DataAbstractionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.DataAbstraction.DataAbstractionException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DataAbstractionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.DataAbstractionException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.DataAbstractionException.Parameters">
      <summary>
            Get exception parameters
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.DynamicProperty">
      <summary>
            Read and edit dynamic properties.
            </summary>
      <remarks>
            EPiServer.DataAbstraction.DynamicProperty is a non-cached API for administrative purposes 
            and should not be used on normal templates that are not for administrative purposes. Using 
            this API on your templates will significally impact performance. The recommendation is always 
            to read dynamic properties on PageData objects returned from the global instance of the DataFactory 
            class, EPiServer.DataFactory.Instance.
            </remarks>
      <example>
            Example that changes the value of dynamic property "MetaKeywords" on the current page.
            <code source="../CodeSamples/EPiServer/DataAbstraction/DataAbstractionSamples.cs" region="ChangeDynProp" lang="cs" />
            Examples that outputs some debug information for the current page
            <code source="../CodeSamples/EPiServer/DataAbstraction/DataAbstractionSamples.cs" region="OutputDebug" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicProperty.#ctor">
      <summary>
            Create a new dynamic property based on a PropertyData object.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicProperty.#ctor(EPiServer.Core.PageReference,EPiServer.Core.PageReference,EPiServer.Core.PropertyData)">
      <summary>
            Create a new dynamic property based on tree information
            </summary>
      <param name="pageLink">The page where the property is defined.</param>
      <param name="parentLink">The closest parent that contains dynamic property definitions.</param>
      <param name="propertyValue">The actual value of the dynamic property.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicProperty.#ctor(EPiServer.Core.PageReference,EPiServer.Core.PropertyData,EPiServer.DataAbstraction.DynamicPropertyStatus,EPiServer.Core.PageReference,System.String)">
      <summary>
            Create a new dynamic property based on a page and inheritance information
            </summary>
      <param name="pageLink">The page where the property is defined.</param>
      <param name="propertyValue">The actual value of the dynamic property.</param>
      <param name="status">Information about where this property is set</param>
      <param name="inheritedPageLink">The page from where the inherited value origins.</param>
      <param name="inheritedValue">The textual presentation of the inherited value</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicProperty.#ctor(EPiServer.Core.PageReference,EPiServer.Core.PropertyData,EPiServer.DataAbstraction.DynamicPropertyStatus,EPiServer.Core.PageReference,System.String,System.String)">
      <summary>
            Create a new dynamic property based on a page and inheritance information
            </summary>
      <param name="pageLink">The page where the property is defined.</param>
      <param name="propertyValue">The actual value of the dynamic property.</param>
      <param name="status">Information about where this property is set</param>
      <param name="inheritedPageLink">The page from where the inherited value origins.</param>
      <param name="inheritedValue">The textual presentation of the inherited value</param>
      <param name="languageBranch">The specific language branch if the property is language specific</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicProperty.PropertyValue">
      <summary>
            The actual value of the dynamic property.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicProperty.RawPropertyValue">
      <summary>
            The value of the dynamic property in raw format, only used for serialization.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicProperty.PageLink">
      <summary>
            The page where the dynamic property is defined.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicProperty.ParentLink">
      <summary>
            The closest parent that contains dynamic property definitions.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicProperty.ListForPage(EPiServer.Core.PageReference)">
      <summary>
            List all dynamic properties that can be set for a specific page
            </summary>
      <param name="pageLink">The page to read dynamic properties from</param>
      <returns>A collection of dynamic properties</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicProperty.Load(EPiServer.Core.PageReference,System.String)">
      <summary>
            Load a dynamic property by name and page
            </summary>
      <param name="pageLink">The page to read dynamic properties from</param>
      <param name="propertyName">The property name</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicProperty.Save">
      <summary>
            Save changes to a dynamic property
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicProperty.SaveCollection(EPiServer.Core.PageReference,EPiServer.DataAbstraction.DynamicPropertyCollection)">
      <summary>
            Save a collection of dynamic properties in one batch
            </summary>
      <param name="pageLink">The page to save dynamic properties for</param>
      <param name="props">The collection of dynamic properties to save</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicProperty.TranslateDisplayName">
      <summary>
            Translates the name of the dynamic property.
            </summary>
      <returns>The translated name of the dynamic property.</returns>
      <remarks>This method is needed as we add the language branch to the property name to get unique keys in the PropertyDataCollection.</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicProperty.Override">
      <summary>
            If value should override new definitions of this property further down in the tree structure.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicProperty.InheritedValue">
      <summary>
            The inherited value of the dynamic property, primaraly user for GUI display
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicProperty.InheritedPageLink">
      <summary>
            The page where the interited value originates
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicProperty.Status">
      <summary>
            Status of property as listed for a specific page
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicProperty.LanguageBranch">
      <summary>
            Gets or sets the specific language branch if the property is language specific.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.DynamicPropertyCollection">
      <summary>
            Represents a collection of <see cref="T:EPiServer.DataAbstraction.DynamicProperty" /> classes.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.DynamicPropertyCollection" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.#ctor(EPiServer.DataAbstraction.DynamicProperty[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.DynamicPropertyCollection" /> class.
            </summary>
      <param name="props">Array of objects to populate the newly initialized instance with.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.#ctor(EPiServer.DataAbstraction.ILanguageBranchRepository)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.DynamicPropertyCollection" /> class.
            </summary>
      <param name="languageBranchRepository">The language branch repository.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicPropertyCollection.Item(System.Int32)">
      <summary>
            Gets or sets the DynamicProperty associated with the specified index.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.DynamicPropertyCollection.Item(System.String)">
      <summary>
            Gets or sets the DynamicProperty associated with the specified index.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.Add(EPiServer.DataAbstraction.DynamicProperty)">
      <summary>
            Adds a DynamicProperty to the end of the collection.
            </summary>
      <param name="property">The DynamicProperty to be added to the end of the collection.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.AddRange(EPiServer.DataAbstraction.DynamicPropertyCollection)">
      <summary>
            Adds an collection of objects to the end of the collection.
            </summary>
      <param name="properties">The DynamicPropertyCollection to be added to the end of the collection.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.Contains(EPiServer.DataAbstraction.DynamicProperty)">
      <summary>
            Determines whether the collection contains a specific element.
            </summary>
      <param name="property">The DynamicProperty to locate in the CollectionBase.</param>
      <returns>
        <b>True</b> if the collection contains the specified value; otherwise, <b>false</b>.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.Remove(EPiServer.DataAbstraction.DynamicProperty)">
      <summary>
            Removes the first occurrence of a specific DynamicProperty from the collection.
            </summary>
      <param name="property">The DynamicProperty to remove from the collection.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.IndexOf(EPiServer.DataAbstraction.DynamicProperty)">
      <summary>
            Searches for the specified DynamicProperty and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
      <param name="property">The DynamicProperty to locate in the CollectionBase.</param>
      <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.Insert(System.Int32,EPiServer.DataAbstraction.DynamicProperty)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="property">The DynamicProperty to insert.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.CopyTo(EPiServer.DataAbstraction.DynamicProperty[],System.Int32)">
      <summary>
            Copies the entire collection to a one-dimensional array, starting at the specified index of the target array.
            </summary>
      <param name="properties">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.ToPropertyDataCollection">
      <summary>
            Casts <see cref="T:EPiServer.DataAbstraction.DynamicPropertyCollection" /> to <see cref="T:EPiServer.Core.PropertyDataCollection" />.
            </summary>
      <returns>A <see cref="T:EPiServer.Core.PropertyDataCollection" /></returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.DynamicPropertyCollection.RemoveInaccessibleLanguagesForUser(System.Security.Principal.IPrincipal)">
      <summary>
            Removes the language specific properties that are inaccessible for the user.
            </summary>
      <param name="user">The user.</param>
      <remarks>
            Based on the access rights for languages, the properties that are of a language not 
            enabled for the given user will be removed from the collection.
            </remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.DynamicPropertyStatus">
      <summary>
            Defines different status that a dynamic property can have on a single page
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.DynamicPropertyStatus.None">
      <summary>
            Unknown
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.DynamicPropertyStatus.Undefined">
      <summary>
            The dynamic property has no definition on this page or any of its parents, i e completely undefined.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.DynamicPropertyStatus.Defined">
      <summary>
            The dynamic property is defined on this page.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.DynamicPropertyStatus.Inherited">
      <summary>
            The dynamic property is defined on one of the parents of this page and the value is inherited by this page.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Frame">
      <summary>
            Read and edit frame information
            </summary>
      <remarks>EPiServer has at least 2 system frames, "_blank" and "_top". More frames can be
            added using the administration mode and then selected by the editor.</remarks>
      <example>Example that demonstrates listing all available frames
            <code source="../CodeSamples/EPiServer/DataAbstraction/FrameSamples.cs" region="ListFrames" lang="cs" />
            Example that creates a new frame
            <code source="../CodeSamples/EPiServer/DataAbstraction/FrameSamples.cs" region="CreateNewFrame" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.#ctor">
      <summary>
            Initializes a new instance of the <c>Frame</c> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <c>Frame</c> class.
            </summary>
      <param name="frameName">The name of the <c>Frame</c>.</param>
      <param name="frameDescription">A description of the <c>Frame</c>.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.#ctor(System.Int32,System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <c>Frame</c> class.
            </summary>
      <param name="frameID">The ID of the <c>Frame</c>.</param>
      <param name="frameName">The name of the <c>Frame</c>.</param>
      <param name="frameDescription">A description of the <c>Frame</c>.</param>
      <param name="systemFrame">
        <c>true</c> if the frame is a system frame; otherwise, <c>false</c>.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Frame.ID">
      <summary>
            The frame unique identifier
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Frame.Name">
      <summary>
            Actual frame name, for example "_blank"
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Frame.Description">
      <summary>
            The display description for the frame
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Frame.LocalizedDescription">
      <summary>
            The localized display description for the frame
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Frame.IsSystemFrame">
      <summary>
            If this is a non-deletable system frame
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.Load(System.Int32)">
      <summary>
            Load a frame by id
            </summary>
      <param name="id">The id of the frame</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.Load(System.String)">
      <summary>
            Load a frame by name
            </summary>
      <param name="name">The name of the frame</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.List">
      <summary>
            Retrieves a frame list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.Save">
      <summary>
            Saves frame information or creates a new frame
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.Delete">
      <summary>
            Deletes the current frame
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.Equals(System.Object)">
      <summary>
            Determines whether this instance of <c>Frame</c> and a specified object, which must also be a <c>Frame</c> object, have the same value.
            </summary>
      <param name="obj">An object.</param>
      <returns>
        <c>true</c> if obj is a Frame and its value is the same as this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.GetHashCode">
      <summary>
            Returns the hash code for this frame.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.op_Equality(EPiServer.DataAbstraction.Frame,EPiServer.DataAbstraction.Frame)">
      <summary>
            Determines whether two specified <c>Frame</c> objects have the same value.
            </summary>
      <param name="x">A <c>Frame</c> or a null reference.</param>
      <param name="y">A <c>Frame</c> or a null reference.</param>
      <returns>
        <c>true</c> if the value of x is the same as the value of y; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.Frame.op_Inequality(EPiServer.DataAbstraction.Frame,EPiServer.DataAbstraction.Frame)">
      <summary>
            Determines whether two specified <c>Frame</c> objects have different values.
            </summary>
      <param name="x">A <c>Frame</c> or a null reference.</param>
      <param name="y">A <c>Frame</c> or a null reference.</param>
      <returns>
        <c>true</c> if the value of x is different from the value of y; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.FrameCollection">
      <summary>
            Represents a collection of Frame classes.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.GroupDefinition">
      <summary>
            The <see cref="T:EPiServer.DataAbstraction.GroupDefinition" /> class used by <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> and <see cref="T:EPiServer.DataAbstraction.ContentType" /> for grouping of items.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.GroupDefinition.#ctor(System.String,System.String,EPiServer.Security.AccessLevel,System.Int32)">
      <summary>
            Create a instance of <see cref="T:EPiServer.DataAbstraction.GroupDefinition" /></summary>
      <param name="name">The name of group</param>
      <param name="displayName">The display name of group</param>
      <param name="requiredAccess">The required access</param>
      <param name="order">The order of group usually used for sorting</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.GroupDefinition.Name">
      <summary>
            The name of the group
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.GroupDefinition.DisplayName">
      <summary>
            The displayName  of the group
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.GroupDefinition.RequiredAccess">
      <summary>
            The required accessLevel of the group
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.GroupDefinition.Order">
      <summary>
            The order of the group
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.GroupDefinitionRepository">
      <summary>
            This class contains <see cref="T:EPiServer.DataAbstraction.GroupDefinition" /> from code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.GroupDefinitionRepository.Load(System.String)">
      <summary>
            Load a group Definition
            </summary>
      <param name="name">The name of <see cref="T:EPiServer.DataAbstraction.GroupDefinition" /></param>
      <returns>A Group Definition or null if not found</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.GroupDefinitionRepository.Save(EPiServer.DataAbstraction.GroupDefinition)">
      <summary>
            Stores or updates a specified <see cref="T:EPiServer.DataAbstraction.GroupDefinition" /> in the repository.
            </summary>
      <param name="groupDefinition">The group definition.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.GroupDefinitionRepository.Delete(EPiServer.DataAbstraction.GroupDefinition)">
      <summary>
            Deletes a <see cref="T:EPiServer.DataAbstraction.GroupDefinition" /></summary>
      <param name="groupDefinition">The <see cref="T:EPiServer.DataAbstraction.GroupDefinition" /> that will be deleted</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.GroupDefinitionRepository.List">
      <summary>
            List all defined <see cref="T:EPiServer.DataAbstraction.GroupDefinition" /> from code
            </summary>
      <returns>A collection of Group Definition</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IAdministrationSettingsService">
      <summary>
            Handles administration settings for content types and properties.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAdministrationSettingsService.GetAttribute(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Get administration settings attribute if specified on property or just default values
            </summary>
      <param name="propertyDefinition">The property definition</param>
      <returns>Administration settings</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAdministrationSettingsService.GetAttribute(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Get administration settings attribute if specified on content type or just default values
            </summary>
      <param name="contentType">The content type</param>
      <returns>Administration settings</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAdministrationSettingsService.GetEnabledFields(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Gets the settings indicating what fields that should enabled/disabled when administrating the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </summary>
      <param name="propertyDefinition">The property definition to get the enabled field for.</param>
      <returns>The fields that should be available for administration.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAdministrationSettingsService.GetEnabledFields(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Gets the settings indicating what fields that should enabled/disabled when administrating the specified <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <param name="contentType">The content type the fields are regarding.</param>
      <returns>The fields that should be available for administration.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IAvailableSettingsRepository">
      <summary>
            Defines the signature for a component that acts as a repository for <see cref="T:EPiServer.DataAbstraction.AvailableSetting" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAvailableSettingsRepository.RegisterSetting(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.AvailableSetting)">
      <summary>
            Sets available content types settings for a page type.
            </summary>
      <param name="contentType">Type of the page.</param>
      <param name="setting">The setting.</param>
      <remarks>
            The runtime settings on <see cref="T:EPiServer.DataAbstraction.ContentTypeAvailabilityService" /> will be the merged result from settings specified on the content type and on the model.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAvailableSettingsRepository.GetSetting(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Gets the settings registered for the <see cref="T:EPiServer.DataAbstraction.PageType" /> in database.
            </summary>
      <remarks>
            The runtime settings on <see cref="T:EPiServer.DataAbstraction.ContentTypeAvailabilityService" /> will be the merged result from settings specified on the content type and on the model.
            </remarks>
      <param name="contentType">Type of the page.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAvailableSettingsRepository.ClearSetting(System.String)">
      <summary>
            Clears all settings defined for the page type.
            </summary>
      <remarks>
            Any other calls on the same session will be ignored if ClearAllSettings is called.
            </remarks>
      <param name="contentTypeName">Name of the page type.</param>
      <returns>
      </returns>
    </member>
    <member name="E:EPiServer.DataAbstraction.IAvailableSettingsRepository.SettingsChanged">
      <summary>
            Occurs when a setting has been changed.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAvailableSettingsRepository.ListSettings">
      <summary>
            Lists the registered settings.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IBackingTypeResolver">
      <summary>
            Resolves the base type from a specified type, by matching the type against types registered in <see cref="T:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository" />.
            </summary>
      <remarks>A list of default backing types can be found in the SDK in chapter "Property types".</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.IBackingTypeResolver.Resolve(System.Type)">
      <summary>
            Resolves backing type for a specified type
            </summary>
      <param name="type">Type to get default backing type for</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ICachedRepository">
      <summary>
            Defines methods for clearing a cached repository.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ICachedRepository.ClearCache">
      <summary>
            Clears all the cached data from the repository.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ICategoryEvents">
      <summary>
            Service that will raise events when a <see cref="T:EPiServer.DataAbstraction.Category" /> is changed.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ICategoryEvents.CategoryCreated">
      <summary>
            Occurs when a new <see cref="T:EPiServer.DataAbstraction.Category" /> is added.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ICategoryEvents.CategoryUpdated">
      <summary>
            Occurs when an existing <see cref="T:EPiServer.DataAbstraction.Category" /> is updated.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ICategoryEvents.CategoryDeleted">
      <summary>
            Occurs when an existing <see cref="T:EPiServer.DataAbstraction.Category" /> is deleted.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.IContentCoreDataLoader">
      <summary>
            Defines signature for component that loads <see cref="T:EPiServer.DataAbstraction.ContentCoreData" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentCoreDataLoader.Load(System.Int32)">
      <summary>
            Loads <see cref="T:EPiServer.DataAbstraction.ContentCoreData" /> for content with specified ID.
            </summary>
      <param name="contentID">The content ID.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentCoreDataLoader.Load(System.Guid)">
      <summary>
            Loads <see cref="T:EPiServer.DataAbstraction.ContentCoreData" /> for content with specified guid based identifier ID.
             </summary>
      <param name="guid">The GUID.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IContentReportQueryService">
      <summary>
            Defines methods for reporting of content 
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentReportQueryService.Get(EPiServer.DataAbstraction.ContentReportQuery,System.Int32@)">
      <summary>
            Gets content references according to query.
            </summary>
      <param name="query">The query</param>
      <param name="totalRows">The total number of matching rows.</param>
      <returns>A sorted collection of pages matching the filter criterias.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IContentSecurityRepository">
      <summary>
            A repository for Security info for IContent object
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSecurityRepository.Get(EPiServer.Core.ContentReference)">
      <summary>
            Gets the specified content security descriptor object for the requested content link.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSecurityRepository.Save(EPiServer.Core.ContentReference,EPiServer.Security.IContentSecurityDescriptor,EPiServer.Security.SecuritySaveType)">
      <summary>
            Saves the specified content security descriptor.
            </summary>
      <param name="ContentLink">The content link.</param>
      <param name="contentSecurityDescriptor">The content security descriptor.</param>
      <param name="securitySaveType">Type of the security save.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSecurityRepository.Delete(System.String,EPiServer.Security.SecurityEntityType)">
      <summary>
            Deletes the specified user or role name.
            </summary>
      <param name="userOrRoleName">Name of the user or role.</param>
      <param name="entityUserRole">The entity user role.</param>
    </member>
    <member name="E:EPiServer.DataAbstraction.IContentSecurityRepository.ContentSecuritySaved">
      <summary>
            Occurs when access rights for content item/items is changed
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.IContentSecurityRepository.ContentSecuritySaving">
      <summary>
            Occurs before access rights for content item/items is changed
            </summary>
      <remarks>
            An event handler can cancel the operation by setting <see cref="P:EPiServer.DataAbstraction.ContentSecurityCancellableEventArgs.CancelAction" /> to true 
            and giving an explanation in <see cref="P:EPiServer.DataAbstraction.ContentSecurityCancellableEventArgs.CancelReason" />.
            </remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentSecurityEventArg">
      <summary>
            Argument used in <see cref="E:EPiServer.DataAbstraction.IContentSecurityRepository.ContentSecuritySaved" /> event.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentSecurityEventArg.#ctor(EPiServer.Core.ContentReference,EPiServer.Security.IContentSecurityDescriptor,EPiServer.Security.SecuritySaveType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentSecurityEventArg" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentSecurityDescriptor">The content security descriptor.</param>
      <param name="securitySaveType">Type of the security save.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentSecurityEventArg.SecuritySaveType">
      <summary>
            Gets or sets the type of the security save.
            </summary>
      <value>
            The type of the security save.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentSecurityEventArg.ContentSecurityDescriptor">
      <summary>
            Gets or sets the content security descriptor.
            </summary>
      <value>
            The content security descriptor.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentSecurityEventArg.ContentLink">
      <summary>
            Gets or sets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentSecurityCancellableEventArgs">
      <summary>
            Argument used in <see cref="E:EPiServer.DataAbstraction.IContentSecurityRepository.ContentSecuritySaving" /> event.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentSecurityCancellableEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Security.IContentSecurityDescriptor,EPiServer.Security.SecuritySaveType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentSecurityCancellableEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentSecurityDescriptor">The content security descriptor.</param>
      <param name="securitySaveType">Type of the security save.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentSecurityCancellableEventArgs.CancelAction">
      <summary>
            Set value to abort the current event handling
            </summary>
      <remarks>Changing this value may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ContentSecurityCancellableEventArgs.CancelReason">
      <summary>
            Gets or sets the reason for cancel.
            </summary>
      <value>The cancel reason.</value>
      <remarks>
            If the cancellation results in an EPiServerCancelAction, this string will be used as the message in the exception.
            </remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.IContentSoftLinkRepository">
      <summary>
            Repository for working with <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkRepository.Load(System.String)">
      <summary>
            Loads the links that reference the file specified with a path.
            </summary>
      <param name="path">The path.</param>
      <returns>A collection of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances that will contain information about all links that point to the file specified in <paramref name="path" />.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkRepository.Load(EPiServer.Core.ContentReference)">
      <summary>
            Loads the links that are being referenced by an content item.
            </summary>
      <param name="contentLink">The content item</param>
      <returns>A list of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkRepository.Load(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Loads the links that are being referenced by or references an content item.
            </summary>
      <param name="contentLink">The content item</param>
      <param name="reversed">If when check should be performed on links pointing to an item instead</param>
      <returns>A list of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkRepository.Load(System.String,System.Boolean)">
      <summary>
            Loads the links that reference the file specified with a path.
            </summary>
      <param name="path">The path.</param>
      <param name="exactMatch">if set to <c>true</c> an exact match is required. If set to <c>false</c> only the beginning of the path needs to match.</param>
      <returns>A collection of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances that will contain information about all links that point to the file specified in <paramref name="path" />.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkRepository.Load(System.Guid,System.Boolean)">
      <summary>
            Loads the links that are being referenced by or references an content item.
            </summary>
      <param name="contentGuid">The content item</param>
      <param name="reversed">If when check should be performed on links pointing to an item instead</param>
      <returns>A list of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkRepository.Save(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Collections.Generic.IList{EPiServer.DataAbstraction.SoftLink},System.Boolean)">
      <summary>
            Saves all the specified <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances with the same owner page link.
            </summary>
      <param name="ownerContent">The owner content link.</param>
      <param name="ownerLanguage">The language, specify null to re-save links for all languages</param>
      <param name="links">The collection of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances.</param>
      <param name="appendOnly">If links should be appended to the existing links</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkRepository.Delete(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Delete all softlink references for <paramref name="ownerContent" /> with specific <paramref name="language" />.
            </summary>
      <param name="ownerContent">The content reference</param>
      <param name="language">The language</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.IContentSoftLinkStatusService">
      <summary>
            Repository for working with the status of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkStatusService.GetBrokenLinks(EPiServer.Core.ContentReference,System.Int32,System.Int32)">
      <summary>
            Gets broken links from the database
            </summary>
      <param name="root">The root item.</param>
      <param name="skipCount">The skip count.</param>
      <param name="maxResults">The max results.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkStatusService.GetBrokenLinksCount(EPiServer.Core.ContentReference)">
      <summary>
            Gets total number of broken links from the database
            </summary>
      <param name="root">The root item.</param>
      <returns>Number of broken link</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkStatusService.GetUncheckedLinks(System.DateTime,System.TimeSpan,System.Int32)">
      <summary>
            Get Unchecked links from the database
            </summary>
      <param name="lastCheckedDate">Date when the links were last checked</param>
      <param name="ignoreWorkingLinksInterval">The time back in history where we don't want to recheck working links.</param>
      <param name="maxNumberOfLinks">Maximum number of links that should be returnd</param>
      <returns>
            Links that has not been checked prior to the start date
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentSoftLinkStatusService.SaveLinkStatus(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.SoftLink})">
      <summary>
            Save softlink status
            </summary>
      <param name="links">A list of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances </param>
    </member>
    <member name="T:EPiServer.DataAbstraction.IContentTypeAnalyzer">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Used to analyze and find changes between two content types
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeAnalyzer.Analyze(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.ContentType)">
      <summary>
            Analyze two content types. 
            </summary>
      <param name="contentType">The content type</param>
      <param name="other">The content type</param>
      <returns>List of changes between two content types.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IContentTypeRepository">
      <summary>
            Defines methods for interacting with a data repository where <see cref="T:EPiServer.DataAbstraction.ContentType" />s are persisted.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.IContentTypeRepository`1">
      <summary>
            Defines methods for interacting with a data repository where a type of class <see cref="T:EPiServer.DataAbstraction.ContentType" />s are persisted.
            </summary>
      <typeparam name="T">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that is handled by this repository.</typeparam>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Save(`0)">
      <summary>
            Saves the specified <see cref="T:EPiServer.DataAbstraction.ContentType" /> to the data repository.
            </summary>
      <param name="contentType">Type of the content.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Load(System.Int32)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the specified id from the data repository.
            </summary>
      <param name="id">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> id.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given id or null if none could be found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Load(System.String)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the specified name from the data repository.
            </summary>
      <param name="name">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> name.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given name or null if none could be found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Load(System.Guid)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the specified <see cref="T:System.Guid" /> from the data repository.
            </summary>
      <param name="guid">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> GUID.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given <see cref="T:System.Guid" /> or null if none could be found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Load(System.Type)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the underlying <see cref="T:System.Type" /> from the data repository.
            </summary>
      <param name="modelType">The underlying model <see cref="T:System.Type" /> of the <see cref="T:EPiServer.DataAbstraction.ContentType" />.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given <see cref="T:System.Type" /> or null if none could be found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Copy(System.Int32)">
      <summary>
            Creates a copy of the specified content type in the data repository and returns it.
            </summary>
      <param name="id">The id of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> to be copied.</param>
      <returns>The copy of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given id.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Copy(System.Type)">
      <summary>
            Creates a copy of the specified content type in the data repository and returns it.
            </summary>
      <param name="modelType">The underlying model <see cref="T:System.Type" /> of the <see cref="T:EPiServer.DataAbstraction.ContentType" />.</param>
      <returns>The copy of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given type.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Copy(`0)">
      <summary>
            Creates a copy of the specified content type in the data repository and returns it.
            </summary>
      <param name="contentType">Type of the content.</param>
      <returns>
            The copy of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that was provided.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Delete(System.Int32)">
      <summary>
            Deletes a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the given id from the data repository.
            </summary>
      <param name="id">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> id.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Delete(System.Type)">
      <summary>
            Deletes a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the underlying <see cref="T:System.Type" /> from the data repository.
            </summary>
      <param name="modelType">The underlying <see cref="T:System.Type" /> of the <see cref="T:EPiServer.DataAbstraction.ContentType" />.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.Delete(`0)">
      <summary>
            Deletes a <see cref="T:EPiServer.DataAbstraction.ContentType" /> from the data repository.
            </summary>
      <param name="contentType">Type of the content.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IContentTypeRepository`1.List">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.ContentType" />s in the data repository.
            </summary>
      <returns>Enumeration of <see cref="T:EPiServer.DataAbstraction.ContentType" />s.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.MappedIdentity">
      <summary>
            Information of an mapped identity.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MappedIdentity.UriScheme">
      <summary>
            The Uri scheme to use when working with <see cref="T:EPiServer.DataAbstraction.IdentityMappingService" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MappedIdentity.DefaultProvider">
      <summary>
            The provider (host) to use in <see cref="P:EPiServer.DataAbstraction.MappedIdentity.ExternalIdentifier" /> if you want to map to a <see cref="P:EPiServer.DataAbstraction.MappedIdentity.ContentLink" /> served by the default <see cref="T:EPiServer.Core.ContentProvider" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.MappedIdentity.ConstructExternalIdentifier(System.String)">
      <summary>
            Constructs an external identifier based on the default provider and a provider unique path
            </summary>
      <param name="providerUniquePath">An unique identifier within the provider. It must only contain characters valid in an Uri</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.MappedIdentity.ConstructExternalIdentifier(System.String,System.String)">
      <summary>
            Constructs an external identifier based on a custom provider and a provider unique path
            </summary>
      <param name="provider">The provider</param>
      <param name="providerUniquePath">An unique identifier within the provider. It must only contain characters valid in an Uri</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.DataAbstraction.MappedIdentity.ExternalIdentifier">
      <summary>
            Gets the external identity for a mapped item.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.MappedIdentity.ContentGuid">
      <summary>
            Gets the unique identifier generated for <see cref="P:EPiServer.DataAbstraction.MappedIdentity.ExternalIdentifier" />. 
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.MappedIdentity.ContentLink">
      <summary>
            Gets the <see cref="T:EPiServer.Core.ContentReference" /> generated for <see cref="P:EPiServer.DataAbstraction.MappedIdentity.ExternalIdentifier" />. 
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.MappedIdentity.Equals(EPiServer.DataAbstraction.MappedIdentity)">
      <summary>
            Indicates whether the current <see cref="T:EPiServer.DataAbstraction.MappedIdentity" /> instance is equal to another <see cref="T:EPiServer.DataAbstraction.MappedIdentity" /> instance.
            </summary>
      <param name="other">A <see cref="T:EPiServer.DataAbstraction.MappedIdentity" /> instance to compare with this instance.</param>
      <returns>
            true if the current instance is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IdentityMappingService">
      <summary>
            A service that supports mapping external identities to CMS specific identities.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.MapContent(System.Uri,EPiServer.Core.IContent)">
      <summary>
            Method to associate/register a mapping from an externalIdentifier to a content instance.
            </summary>
      <param name="externalIdentifier">The external identifier to associate with the <paramref name="content" />.</param>
      <param name="content">The <see cref="T:EPiServer.Core.IContent" /> instance that is to be associated with the <paramref name="externalIdentifier" /></param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.List(System.Collections.Generic.IEnumerable{System.Uri},System.Boolean)">
      <summary>
            Returns a list of mapped identities. If <paramref name="createMissingMappings" /> is true
            entries will be created for missing mappings.
            </summary>
      <param name="externalIdentifiers">The external identifiers to list or create mappings for.</param>
      <param name="createMissingMappings">If true mappings are created for entries that does not have a mapping.</param>
      <returns>A list of mapped identities.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.List(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>
            Returns a list of mapped identities. 
            </summary>
      <param name="contentLinks">The content links to list mappings for.</param>
      <returns>A list of mapped identities.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.List(System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>
            Returns a list of mapped identities. 
            </summary>
      <param name="contentGuids">The content guids to list mappings for.</param>
      <returns>A list of mapped identities.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.List(System.String)">
      <summary>
            Lists all mapped identities associated with specified provider.
            </summary>
      <param name="provider">The name of the provider.</param>
      <returns>A list of mapped identities.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.ListProviders">
      <summary>
            Lists all providers that mappings have been created for.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.Delete(System.Uri)">
      <summary>
            Deletes the identity mapping that is associated with <paramref name="externalIdentifier" /></summary>
      <param name="externalIdentifier">
      </param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.Delete(System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>
            Deletes the identity mappings on a list of contents 
            </summary>
      <param name="contentGuids">
      </param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.List(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
            Returns a list of mapped identities. 
            </summary>
      <remarks>
            This method will not create entries for missing mappings.
            </remarks>
      <param name="externalIdentifiers">The external ids to list mappings for.</param>
      <returns>A list of mapped identities.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.Get(System.Uri)">
      <summary>
            Returns a mapping for the externalIdentity or null if it does not have a mapping.
            </summary>
      <remarks>
            This method will not create an entry for a missing mapping.
            </remarks>
      <param name="externalIdentifier">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.Get(System.Uri,System.Boolean)">
      <summary>
            Returns a mapping for the externalIdentity or null if it does not have a mapping and <paramref name="createMissingMapping" /> is false.
            </summary>
      <param name="externalIdentifier">The identity to get or create a mapping for.</param>
      <param name="createMissingMapping">If true a mapping is created for the <paramref name="externalIdentifier" /> if it does not have a mapping.</param>
      <returns>The mapped identity or null if it does not exist and <paramref name="createMissingMapping" /> is false.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.Get(EPiServer.Core.ContentReference)">
      <summary>
            Returns a mapping for the contentLink or null if it does not have a mapping.
            </summary>
      <param name="contentLink">The content link to get mapping for.</param>
      <returns>The mapped identity or null if it does not exist.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.Get(System.Guid)">
      <summary>
            Returns a mapping for the contentGuid or null if it does not have a mapping.
            </summary>
      <param name="contentGuid">The content link to get mapping for.</param>
      <returns>The mapped identity or null if it does not exist.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.EPiServer#Web#IContentResolver#ResolveContent(System.Guid)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.IdentityMappingService.EPiServer#Web#IContentResolver#ResolveContent(EPiServer.Core.ContentReference)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAbstraction.IFrameRepository">
      <summary>
            Repository for working with <see cref="T:EPiServer.DataAbstraction.Frame" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IFrameRepository.Delete(System.Int32)">
      <summary>
            Deletes the <see cref="T:EPiServer.DataAbstraction.Frame" /> with the provided identifier.
            </summary>
      <param name="id">The id of the frame that should be deleted.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IFrameRepository.List">
      <summary>
            Gets a list of all frames that has been defined.
            </summary>
      <returns>A list of all <see cref="T:EPiServer.DataAbstraction.Frame" /> types.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IFrameRepository.Load(System.String)">
      <summary>
            Load a frame by it's name.
            </summary>
      <param name="name">The name of the frame to load.</param>
      <returns>A <see cref="T:EPiServer.DataAbstraction.Frame" /> instance or null if no match was found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IFrameRepository.Load(System.Int32)">
      <summary>
            Load a frame by it's identifier
            </summary>
      <param name="id">The identifier of the frame to load.</param>
      <returns>A <see cref="T:EPiServer.DataAbstraction.Frame" /> instance or null if no match was found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IFrameRepository.Save(EPiServer.DataAbstraction.Frame)">
      <summary>
            Updates or adds the provided <see cref="T:EPiServer.DataAbstraction.Frame" />.
            </summary>
      <param name="frame">The frame that should be saved.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ILanguageBranchContentQueryable">
      <summary>
            Component that will list all content items of a certain language
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchContentQueryable.List(System.Globalization.CultureInfo)">
      <summary>
            Provides a list of all content items for the provided language.
            </summary>
      <param name="language">The language that should be queried</param>
      <returns>A list with references to all content items for the given language.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.ILanguageBranchRepository">
      <summary>
            Defines the signature for a component that acts as a repository for <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchRepository.Load(System.Globalization.CultureInfo)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> for the specified culture.
            </summary>
      <param name="culture">The culture.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchRepository.Load(System.Int32)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> with the specified identifier.
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchRepository.ListAll">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> instances that are defined.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchRepository.ListEnabled">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> instances that are defined and enabled.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchRepository.LoadFirstEnabledBranch">
      <summary>
            Loads the first <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> that is Enabled.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchRepository.Delete(System.Int32)">
      <summary>
            Deletes the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> with specified id.
            </summary>
      <param name="languageBranchId">The language branch id.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchRepository.Save(EPiServer.DataAbstraction.LanguageBranch)">
      <summary>
            Saves the specified <see cref="T:EPiServer.DataAbstraction.LanguageBranch" />.
            </summary>
      <param name="languageBranch">The language branch.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ILanguageBranchRepositoryExtensions">
      <summary>
            Contains extension methods for <see cref="T:EPiServer.DataAbstraction.ILanguageBranchRepository" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchRepositoryExtensions.Load(EPiServer.DataAbstraction.ILanguageBranchRepository,System.String)">
      <summary>
            Loads the specified language branch with specified culture name.
            </summary>
      <remarks>
            Unlike <see cref="M:EPiServer.DataAbstraction.ILanguageBranchRepository.Load(System.Globalization.CultureInfo)" /> this method does not throw exception for invalid language codes. 
            Instead null is returned.
            </remarks>
      <param name="languageBranchRepository">The language branch repository.</param>
      <param name="cultureName">The name of the culture, e.g. "en"</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchRepositoryExtensions.Enable(EPiServer.DataAbstraction.ILanguageBranchRepository,System.Globalization.CultureInfo)">
      <summary>
            Enables a language branch.
            </summary>
      <param name="languageBranchRepository">The language branch repository.</param>
      <param name="language">The language branch to enable</param>
      <returns>True if the language branch was disabled and had to be enabled; False if it was already enabled.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ILanguageBranchRepositoryExtensions.Disable(EPiServer.DataAbstraction.ILanguageBranchRepository,System.Globalization.CultureInfo)">
      <summary>
            Disables a language branch.
            </summary>
      <param name="languageBranchRepository">The language branch repository.</param>
      <param name="language">The language branch to disable</param>
      <returns>True if the language branch was enabled and had to be disabled; False if the branch wasn't enabled.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.AvailableSettingsRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.DataAbstraction.IAvailableSettingsRepository" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.AvailableSettingsRepository.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository},EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.AvailableSettingsRepository" /> class.
            </summary>
      <param name="contentTypeRepositoryAccessor">The content type repository accessor.</param>
      <param name="modelRepository">The model repository.</param>
      <exclude />
    </member>
    <member name="E:EPiServer.DataAbstraction.Internal.AvailableSettingsRepository.SettingsChanged">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a setting has been changed.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.AvailableSettingsRepository.RegisterSetting(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.AvailableSetting)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets available content types settings for a page type.
            </summary>
      <param name="contentType">Type of the page.</param>
      <param name="setting">The setting.</param>
      <remarks>
            The runtime settings on <see cref="T:EPiServer.DataAbstraction.ContentTypeAvailabilityService" /> will be the merged result from settings specified on the content type and on the model.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.AvailableSettingsRepository.GetSetting(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the settings registered for the <see cref="T:EPiServer.DataAbstraction.PageType" /> in database.
            </summary>
      <param name="contentType">Type of the page.</param>
      <returns>
      </returns>
      <remarks>
            The runtime settings on <see cref="T:EPiServer.DataAbstraction.ContentTypeAvailabilityService" /> will be the merged result from settings specified on the content type and on the model.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.AvailableSettingsRepository.ClearSetting(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears all settings defined for the content type.
            </summary>
      <param name="contentTypeName">Name of the content type.</param>
      <remarks>
            Any other calls on the same session will be ignored if ClearAllSettings is called.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.AvailableSettingsRepository.ListSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists the registered settings.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.BackingTypeResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves the base type from a specified type, by matching the type against types registered in <see cref="T:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.BackingTypeResolver.#ctor(EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.Construction.IPropertyDataFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.BackingTypeResolver" /> class.
            </summary>
      <param name="propertyDefinitionTypeRepository">The property definition type repository.</param>
      <param name="propertyDataFactory">The property data factory.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.BackingTypeResolver.GetBackingType(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the type of the backing.
            </summary>
      <param name="propertyDefinitionModel">The property definition model.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.BackingTypeResolver.GetDefaultBackingType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the base type for a specified type
            </summary>
      <param name="type">Type to get the base type for.</param>
      <returns>
            The base type
            </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.BackingTypeResolver.Int32">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. PropertyData type for an int32.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.BackingTypeResolver.Double">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. PropertyData type for a double.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.BackingTypeResolver.String">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. PropertyData type for a string
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.BackingTypeResolver.Boolean">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. PropertyData type for a boolean.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.BackingTypeResolver.DateTime">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. PropertyData type for a date time.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.BackingTypeResolver.TimeSpan">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. PropertyData type for a time span.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.BackingTypeResolver.XhtmlString">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. PropertyData type for a XHtml string
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.BackingTypeResolver.PageType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. PropertyData type for a page type
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.BackingTypeResolver.XForm">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. PropertyData type for a XForm
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.BackingTypeResolver.Url">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. PropertyData type for an URL.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.ContentTypeVersionStatus">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.Converter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper functions for common converter scenarios
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.Converter.ToSystemNull(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts from <c>System.DBNull</c> to <c>null</c>.
            </summary>
      <param name="val">The object to convert.</param>
      <returns>
        <c>null</c> if <c>val</c> is <c>System.DBNull</c>, otherwise <c>val</c> unchanged.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.Converter.ToStringNull(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to cast to a string.
            </summary>
      <param name="val">The object to cast.</param>
      <returns>
        <c>val</c> cast to a string if it is a string, otherwise <c>null</c>.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.Converter.ToStringEmpty(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns String.Empty if parameter is anything else than of type <see cref="T:System.String" />. 
            </summary>
      <param name="val">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.Converter.ToIntZero(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns 0 if parameter is anything else than of type <see cref="T:System.Int32" />, also supports 
            converting of False to 0 and True to 1. 
            </summary>
      <param name="val">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultAdministrationSettingsService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles administration settings for content types and properties.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultAdministrationSettingsService.GetEnabledFields(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the settings indicating what fields that should enabled/disabled when administrating the specified <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <param name="contentType">The content type the fields are regarding.</param>
      <returns>The fields that should be available for administration.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultAdministrationSettingsService.GetEnabledFields(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the settings indicating what fields that should enabled/disabled when administrating the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </summary>
      <param name="propertyDefinition">The property definition to get the enabled field for.</param>
      <returns>The fields that should be available for administration.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultAdministrationSettingsService.GetAttribute(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get administration settings if content type is found or just default values
            </summary>
      <param name="propertyDefinition">The property definition</param>
      <returns>Administration settings</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultAdministrationSettingsService.GetAttribute(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get administration settings if content type is found or just default values
            </summary>
      <param name="contentType">The content type</param>
      <returns>Administration settings</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultContentLanguageSettingRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Repository for defined language setting per content in EPiServer similar to dynamic properties
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentRootRepository.Load(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentRootRepository.Save(System.String,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentRootRepository.Delete(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentRootRepository.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentRootRepository.Clear">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentRootService.#ctor(EPiServer.DataAbstraction.ContentRootRepository,EPiServer.IContentRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.DefaultContentRootService" /> class.
            </summary>
      <param name="contentRootRepository">The content root Repository</param>
      <param name="contentRepository">The content Repository</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentRootService.Register``1(System.String,System.Guid,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentRootService.Unregister(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentRootService.Get(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentRootService.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Repository for working with <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.#ctor(EPiServer.Web.IPermanentLinkMapper,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.ContentSoftLinkDB})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository" /> class.
            </summary>
      <param name="permanentLinkMapper">The permanent link mapper that should be used by this instance and any loaded links.</param>
      <param name="softLinkDataAccess">An accessor method that retrieves the soft link data access instance that should be used by this instance.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.Load(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the links that are being referenced by an content item.
            </summary>
      <param name="contentLink">The content item</param>
      <returns>A list of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.Load(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the links that are being referenced by or references an content item.
            </summary>
      <param name="contentLink">The content item</param>
      <param name="reversed">If when check should be performed on links pointing to an item instead</param>
      <returns>A list of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.Load(System.Guid,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the links that are being referenced by or references an content item.
            </summary>
      <param name="contentGuid">The unique id of the content item.</param>
      <param name="reversed">If when check should be performed on links pointing to an item instead</param>
      <returns>A list of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.Load(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the links that reference the file specified with a path.
            </summary>
      <param name="path">The path.</param>
      <returns>A collection of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances that will contain information about all links that point to the file specified in <paramref name="path" />.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.Load(System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the links that reference the file specified with a path.
            </summary>
      <param name="path">The path.</param>
      <param name="exactMatch">if set to <c>true</c> an exact match is required. If set to <c>false</c> only the beginning of the path needs to match.</param>
      <returns>A collection of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances that will contain information about all links that point to the file specified in <paramref name="path" />.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.Save(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Collections.Generic.IList{EPiServer.DataAbstraction.SoftLink})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves all the specified <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances with the same owner page link.
            </summary>
      <param name="ownerContent">The owner content link.</param>
      <param name="ownerLanguage">The language, specify null to re-save links for all languages</param>
      <param name="links">The collection of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.Save(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Collections.Generic.IList{EPiServer.DataAbstraction.SoftLink},System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves all the specified <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances with the same owner page link.
            </summary>
      <param name="ownerContent">The owner content link.</param>
      <param name="ownerLanguage">The language, specify null to re-save links for all languages</param>
      <param name="links">The collection of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances.</param>
      <param name="appendOnly">If links should be appended to the existing links</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.GetUncheckedLinks(System.DateTime,System.TimeSpan,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get Unchecked links from the database
            </summary>
      <param name="lastCheckedDate">Date when the links were last checked</param>
      <param name="ignoreWorkingLinksInterval">The time back in history where we don't want to recheck working links.</param>
      <param name="maxNumberOfLinks">Maximum number of links that should be returnd</param>
      <returns>
            Links that has not been checked prior to the start date
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.GetBrokenLinks(EPiServer.Core.ContentReference,System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets broken links from the database
            </summary>
      <param name="root">The root item.</param>
      <param name="skipCount">The skip count.</param>
      <param name="maxResults">The max results.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.GetBrokenLinksCount(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets total number of broken links from the database
            </summary>
      <param name="root">The root item.</param>
      <returns>Number of broken link</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.SaveLinkStatus(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.SoftLink})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save softlink status
            </summary>
      <param name="links">A list of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances </param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentSoftLinkRepository.Delete(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete all softlink references for <paramref name="ownerContent" /> with specific <paramref name="language" />.
            </summary>
      <param name="ownerContent">The content reference</param>
      <param name="language">The language</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultContentTypeAvailablilityService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeAvailablilityService.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository},EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository,EPiServer.DataAbstraction.IAvailableSettingsRepository,EPiServer.DataAbstraction.GroupDefinitionRepository,EPiServer.IContentLoader,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.DefaultContentTypeAvailablilityService" /> class.
            </summary>
      <param name="contentTypeRepositoryAccessor">The content type repository accessor.</param>
      <param name="modelRepository">The model repository.</param>
      <param name="typeSettingsRepository">The type settings repository.</param>
      <param name="groupDefinitionRepository">The group definition repository</param>
      <param name="cache">The cache dependency</param>
      <param name="contentLoader">The contentloader</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeAvailablilityService.GetSetting(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeAvailablilityService.IsAllowed(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeAvailablilityService.ListAvailable(System.String,System.Security.Principal.IPrincipal)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeAvailablilityService.ListAvailable(EPiServer.Core.IContent,System.Boolean,System.Security.Principal.IPrincipal)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeAvailablilityService.Initialize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executes the static initilization for this class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeAvailablilityService.Uninitialize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Reverts anything done by the static initialization.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultContentTypeBaseResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultContentTypeComparer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeComparer.ClassifySemanticVersionChanges(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.#ctor(EPiServer.DataAbstraction.ContentTypeModelRepository,EPiServer.DataAccess.Internal.ContentTypeDB,EPiServer.DataAbstraction.RuntimeModel.Internal.ModelMerger,EPiServer.DataAbstraction.ITabDefinitionRepository,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.DataAbstraction.ITypeReferenceAnalyzer,EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseResolver,EPiServer.DataAbstraction.Internal.IContentTypeVersionEvaluator,EPiServer.DataAbstraction.Internal.IContentTypeComparer)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository" /> class.
            </summary>
      <param name="modelRepository">The model repository.</param>
      <param name="contentTypeDataAccess">The page type data access object to be used by this instance.</param>
      <param name="modelMerger">The model merger that should be used by this instance.</param>
      <param name="tabDefinitionRepository">The tab definition repository that should be used by this instance.</param>
      <param name="propertyDefinitionTypeRepository">The property definition type repository that should be used by this instance.</param>
      <param name="circularReferenceValidator">The circular reference validator that should be used by this instance.</param>
      <param name="propertyDefinitionRepository">The property definition repository that should be used by this instance.</param>
      <param name="cacheInstance">The synchronized object instance cache that should be used by this instance.</param>
      <param name="contentTypeBaseResolver">The content type base resolver.</param>
      <param name="contentTypeVersionEvaluator">The Content type version evaluator</param>
      <param name="contentTypeComparer">The content type comparer</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.Save(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified content type to the data repository.</summary>
      <param name="contentType">The content type to save.</param>
      <remarks>This member supports the EPiServer infrastructure and is not intended to be used directly from your code.</remarks>
      <exception cref="T:System.NotSupportedException">
        <paramref name="contentType" /> is marked as read only.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.Load(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the specified id from the data repository.
            </summary>
      <param name="id">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> id.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given id or null if none could be  found.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.Load(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the specified name from the data repository.
            </summary>
      <param name="name">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> name.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given name or null if none could be  found.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.Load(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the specified <see cref="T:System.Guid" /> from the data repository.
            </summary>
      <param name="guid">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> GUID.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given <see cref="T:System.Guid" /> or null if none could be  found.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.Load(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads a <see cref="T:EPiServer.DataAbstraction.ContentType" /> with the underlying <see cref="T:System.Type" /> from the data repository.
            </summary>
      <param name="modelType">The underlying <see cref="T:System.Type" /> of the <see cref="T:EPiServer.DataAbstraction.ContentType" />.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.ContentType" /> that matches the given <see cref="T:System.Type" /> or null if none could be found.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all <see cref="T:EPiServer.DataAbstraction.ContentType" />s in the data repository.
            </summary>
      <returns>
            Enumeration of <see cref="T:EPiServer.DataAbstraction.ContentType" />s.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.Copy(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a copy of the specified content type in the data repository and returns it.
            </summary>
      <param name="contentType">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> to be copied.</param>
      <returns>
            The copy of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that was provided.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.Delete(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes a <see cref="T:EPiServer.DataAbstraction.ContentType" /> from the data repository.
            </summary>
      <param name="contentType">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.ClearCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the local content type cache.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.Save(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ContentType},EPiServer.DataAbstraction.ContentTypeSaveOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save list of <see cref="T:EPiServer.DataAbstraction.ContentType" /> with respect to <see cref="T:EPiServer.DataAbstraction.ContentTypeSaveOptions" /></summary>
      <param name="contentTypes">The content types.</param>
      <param name="options">The content type save options.</param>
      <exception cref="T:EPiServer.DataAbstraction.VersionValidationException">Throws the exception when version transition is not valid.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.Initialize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executes the static initilization for this class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.Uninitialize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Reverts anything done by the static initialization.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentTypeRepository.EPiServer#DataAbstraction#ICachedRepository#ClearCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears all the cached data from the repository.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultContentTypeVersionEvaluator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository.ClearCache(System.Object,EPiServer.ContentEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Remove the item as specified by <see cref="P:EPiServer.ContentEventArgs.ContentLink" /> from cache.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository.ClearCache(System.Object,EPiServer.DeleteContentEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Remove the deleted item and any children from local and remote cache
            </summary>
      <remarks>
            If the number of deleted children is more than <see cref="P:EPiServer.Core.IContentCacheKeyCreator.RemoteCacheUpdateLimit" /> any remote cache is cleared.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository.Delete(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete a single version of a Content
            </summary>
      <param name="contentLink">The content link.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository.LoadPublished(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the published version a page with current language selection if the languageBranch is null otherwise
            loads the published version a page for a specific language
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.ContentVersion" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository.LoadPublished(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the published version
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.ContentVersion" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository.Load(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the version.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.ContentVersion" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository.List(EPiServer.Core.VersionFilter,System.Int32,System.Int32,System.Int32@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository.LoadCommonDraft(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the common draft.
            </summary>
      <param name="contentLink">The content link to load common draft for.</param>
      <param name="language">The language.</param>
      <returns>
            CommonDraft if it exist, otherwise Published, If no published exist the latest saved version is returned
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository.SetCommonDraft(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the specified version as common draft.
            </summary>
      <param name="contentLink">The content link.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository.DeleteVersionByDataAccess(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the version from Respository.
            </summary>
      <param name="contentLink">The content link.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultGroupDefinitionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class contains <see cref="T:EPiServer.DataAbstraction.GroupDefinition" /> from code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultGroupDefinitionRepository.Load(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultGroupDefinitionRepository.Save(EPiServer.DataAbstraction.GroupDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultGroupDefinitionRepository.Delete(EPiServer.DataAbstraction.GroupDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultGroupDefinitionRepository.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of ParentRestore repository, save, delete and get old parent info from and to DDS
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository.#ctor(EPiServer.Data.Dynamic.DynamicDataStoreFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository" /> class.
            </summary>
      <param name="storeFactory">The store factory.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository.SaveParentLink(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the parent link.
            </summary>
      <param name="sourceLink">The source link.</param>
      <param name="parentLink">The parent link.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository.GetParentLink(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the parent link.
            </summary>
      <param name="sourceLink">The source link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository.DeleteParentLink(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the parent link.
            </summary>
      <param name="sourceLink">The source link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository.Find(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds the specified source link.
            </summary>
      <param name="sourceLink">The source link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository.StoreFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the store factory.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository.StoreName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the name of the store.
            </summary>
      <value>
            The name of the store.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultParentRestoreRepository.EnsureStore">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Ensures the store.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.ParentRestoreEntity">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.ParentRestoreEntity.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.ParentRestoreEntity" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.ParentRestoreEntity.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.ParentRestoreEntity" /> class.
            </summary>
      <param name="sourceLink">The source link.</param>
      <param name="parentLink">The parent link.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.ParentRestoreEntity.SourceLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the source link.
            </summary>
      <value>
            The source link.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.ParentRestoreEntity.ParentLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the parent link.
            </summary>
      <value>
            The parent link.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.ParentRestoreEntity.Id">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the id.
            </summary>
      <value>
            The id.
            </value>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultPermissionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Permissions for functions used by EPiServer
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.#ctor(EPiServer.DataAbstraction.ContentTypeModelRepository,EPiServer.DataAbstraction.ITabDefinitionRepository,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.PropertyDefinitionDB},EPiServer.DataAbstraction.RuntimeModel.Internal.ModelMerger,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository" /> class.
            </summary>
      <param name="modelRepository">The model repository.</param>
      <param name="tabDefinitionRepository">The tab definition repository.</param>
      <param name="pageDefinitionDataAccessor">The page definition data accessor.</param>
      <param name="modelMerger">The model merger.</param>
      <param name="cache">The cache</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.Save(EPiServer.DataAbstraction.PropertyDefinition,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> to the data repository.
            </summary>
      <param name="propertyDefinition">The property definition to save.</param>
      <param name="forceCacheClear">Flag to determine if cache should be cleared regardless if anything is changed.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="propertyDefinition" /> is marked as read only.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.Load(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Load a definition based on its identifier.
            </summary>
      <param name="propertyDefinitionID">The property definition identifier.</param>
      <returns>The definition if found or <c>null</c>.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.List(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s in the data repository for a specific content type id.
            </summary>
      <param name="contentTypeID">The content type id.</param>
      <returns>
            Enumeration of <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s on specified content type.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.Delete(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> from the data repository.
            </summary>
      <param name="propertyDefinition">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> to delete.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.GetUsage(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves information about the usage of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </summary>
      <param name="propertyDefinitionID">The property definition ID.</param>
      <param name="onlyNoneMasterLanguage">if set to <c>true</c> only none master langauge are taken into account.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions will be checked.</param>
      <param name="isDynamic">if set to <c>true</c> only dynamic properties will be considered.</param>
      <returns>
            List of <see cref="T:EPiServer.DataAbstraction.ContentUsage" /> which contains information on what pages uses
            the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.CheckUsage(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves information about the usage of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </summary>
      <param name="propertyDefinitionID">The property definition ID.</param>
      <param name="onlyLanguageSpecific">if set to <c>true</c> only language specific usage is retrieved.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions will be checked.</param>
      <param name="isDynamic">if set to <c>true</c> only dynamic properties will be considered.</param>
      <returns>
            List of <see cref="T:EPiServer.DataAbstraction.ContentUsage" /> which contains information on what content uses
            the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.ExistsPropertyDefinitionWithContentType(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether there is any property definition of the specified content type.
            </summary>
      <param name="contentTypeID">The content type ID.</param>
      <remarks>
            An example would be if there is a content type that has a property definition of a block with the specified id (contentTypeID)
            </remarks>
      <returns>
        <c>true</c> if there is a property definition of the specified type; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.ClearCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears all the cached data from the repository.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.Initialize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executes the static initilization for this class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.Uninitialize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Reverts anything done by the static initialization.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.ClearCache(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the cache manager for the specified property definition.
            </summary>
      <param name="propertyDefinition">The property definition which cache will be cleared.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultPropertyDefinitionRepository.ClearCacheCompletely">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the entire PropertyDefinitions cache.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultScheduledJobRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get, list, save and delete scheduled jobs
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultScheduledJobRepository.Get(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a job by id
            </summary>
      <param name="id">The id of the job</param>
      <returns>The job, or null if not found</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultScheduledJobRepository.Get(System.String,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a job by method, type name and assembly
            </summary>
      <param name="method">The method to call.</param>
      <param name="typeName">Name of the class where method lives.</param>
      <param name="assemblyName">Name of the assembly where the class is defined.</param>
      <returns>A ScheduledJob instance if a matching job is found, otherwise null.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultScheduledJobRepository.LoadLog(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads log information for the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.
            </summary>
      <returns>A <see cref="T:System.Data.DataTable" /> containing log data where each row represents a log event.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultScheduledJobRepository.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves a list of all available jobs
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultScheduledJobRepository.Save(EPiServer.DataAbstraction.ScheduledJob)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves job information or creates a new job
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultScheduledJobRepository.Delete(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes a job by id
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.IContentTypeComparer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.IContentTypeComparer.ClassifySemanticVersionChanges(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Classifies the changes/difference between the provided <paramref name="contentType" /> and <paramref name="other" />. 
            </summary>
      <param name="contentType">The content type to compare.</param>
      <param name="other">The content type to compare with.</param>
      <returns>
            Returns the semantic difference between <paramref name="contentType" /> and <paramref name="other" />,
            e.g. a breaking change between the two provided content types returns <see cref="F:EPiServer.DataAbstraction.VersionComponent.Major" />.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.IContentTypeVersionEvaluator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.IScheduledJobEventsRaiser">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.LanguageBranchRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.DataAbstraction.ILanguageBranchRepository" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.LanguageBranchRepository.#ctor(EPiServer.DataAccess.Internal.LanguageBranchDB,EPiServer.Framework.Localization.LocalizationService,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.LanguageBranchRepository" /> class.
            </summary>
      <param name="languageBranchDataAccess">The language branch data access.</param>
      <param name="localizationService">The localization service.</param>
      <param name="cacheInstance">The cache.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.LanguageBranchRepository.Load(System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> for the specified culture.
            </summary>
      <param name="culture">The culture.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.LanguageBranchRepository.Load(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> with the specified identifier.
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.LanguageBranchRepository.ListAll">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> instances that are defined.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.LanguageBranchRepository.ListEnabled">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> instances that are defined and enabled.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.LanguageBranchRepository.LoadFirstEnabledBranch">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the first <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> that is Enabled.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.LanguageBranchRepository.Delete(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> with specified id.
            </summary>
      <param name="languageBranchId">The language branch id.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.LanguageBranchRepository.Save(EPiServer.DataAbstraction.LanguageBranch)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified <see cref="T:EPiServer.DataAbstraction.LanguageBranch" />.
            </summary>
      <param name="languageBranch">The language branch.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.ProjectMember">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Defines a member of a project
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.ProjectMember.ID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The identity of the project item
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.ProjectMember.ProjectID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The identity of the project
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.ProjectMember.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The name of the member, such as user name
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.ProjectMember.MemberType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The type of the member, such as role or user
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.ProjectMember.CreateWritableClone">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.ProjectMember.MakeReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.Internal.ProjectMember.IsReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.ProjectMember.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.ProjectMemberType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Defines the type of member in a project
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Repository for the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> data structure.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.PropertyDefinitionTypeDB},EPiServer.Framework.Localization.LocalizationService,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository" /> class.
            </summary>
      <param name="dataAccess">The data access accessor that should be used by the current instance.</param>
      <param name="localizationService">The localization service that should be used by the current instance.</param>
      <param name="cacheInstance">The cache that should be used by the current instance.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.Save(EPiServer.DataAbstraction.PropertyDefinitionType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> to the data repository.
            </summary>
      <param name="propertyDefinitionType">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> that should be saved.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.Load(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> with the specified id from the data repository.
            </summary>
      <param name="id">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> id.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> that matches the given id or null if no match could be found.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.Load(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> with the specified <see cref="T:System.Guid" /> from the data repository.
            </summary>
      <returns>The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> that matches the given type and assembly or null if no match could be found.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.Load(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> with the underlying <see cref="T:System.Type" /> from the data repository.
            </summary>
      <param name="definitionType">The underlying <see cref="T:System.Type" /> of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> that matches the given <see cref="T:System.Type" /> or null if no match could be found.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.LoadByBlockType(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads a <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> that corresponds to the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with given id from the data repository.
            </summary>
      <param name="blockTypeId">The block type id.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> that matches the given <paramref name="blockTypeId" /> or null if no match could be found.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.LoadByBlockType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads a <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> that corresponds to the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with given model type from the data repository.
            </summary>
      <param name="blockTypeModel">The block type model.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> that matches the given <paramref name="blockTypeModel" /> or null if no match could be found.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.Delete(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> with the supplied id from the data repository.
            </summary>
      <param name="id">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> id.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.Delete(EPiServer.DataAbstraction.PropertyDefinitionType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the suppied <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> from the data repository.
            </summary>
      <param name="propertyDefinitionType">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> that should be deleted.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />s in the data repository.
            </summary>
      <returns>Enumeration of <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />s.</returns>
      <exclude />
    </member>
    <member name="E:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.PropertyDefinitionTypeDeleted">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> has been deleted.
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.PropertyDefinitionTypeSaving">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> is about to be saved.
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.PropertyDefinitionTypeSaved">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> has been saved, i.e. created or updated.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.OnPropertyDefinitionTypeSaving(EPiServer.DataAbstraction.CancelPropertyDefinitionTypeEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Raises the <see cref="E:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.PropertyDefinitionTypeSaving" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.DataAbstraction.CancelPropertyDefinitionTypeEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.OnPropertyDefinitionTypeDeleted(EPiServer.DataAbstraction.RepositoryEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Raises the <see cref="E:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.PropertyDefinitionTypeDeleted" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.DataAbstraction.RepositoryEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.OnPropertyDefinitionTypeSaved(EPiServer.DataAbstraction.RepositoryEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Raises the <see cref="E:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.PropertyDefinitionTypeSaved" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.DataAbstraction.RepositoryEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.EPiServer#DataAbstraction#ICachedRepository#ClearCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clear all items from the cache.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.PropertyDefinitionTypeRepository.ClearCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clear all items from the cache.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.SearchPages">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provides different ways of searching for pages.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.#ctor(EPiServer.IContentRepository,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.ContentListDB},EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.PropertySearchDB},EPiServer.Security.IContentAccessEvaluator,EPiServer.Security.IPrincipalAccessor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.SearchPages" /> class.
            </summary>
      <remarks>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.FindAllPagesWithCriteria(EPiServer.Core.ContentReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds the pages that fulfill the criterias.
            </summary>
      <param name="contentLink">Search below this content.</param>
      <param name="criterias">The criterias to match.</param>
      <param name="languageBranch">Only search for pages on specific language branch.</param>
      <param name="selector">Select how to handle language fallback if needed.</param>
      <remarks>
            The collection is filtered by access level and the user should have at least read rights for the published pages.
            </remarks>
      <returns>
            A collection of pages that fulfil the criterias.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.FindPagesWithCriteria(EPiServer.Core.ContentReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds the pages that fulfill the criterias.
            </summary>
      <param name="contentLink">Search below this content.</param>
      <param name="criterias">The criterias to match.</param>
      <param name="languageBranch">Only search for pages on specific language branch.</param>
      <param name="selector">Select how to handle language fallback if needed.</param>
      <remarks>
            The collection is filtered by access level and the user should have at least read rights for the published pages.
            </remarks>
      <returns>
            A collection of pages that fulfil the criterias.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.FindPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds the pages that fulfill the criterias.
            </summary>
      <param name="pageLink">Search below this page.</param>
      <param name="criterias">The criterias to match.</param>
      <param name="languageBranch">Only search for pages on specific language branch.</param>
      <param name="selector">Select how to handle language fallback if needed.</param>
      <remarks>
            The collection is filtered by access level and the user should have at least read rights for the published pages.
            </remarks>
      <returns>
            A collection of pages that fulfil the criterias.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.FindAllPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds all pages with criteria.
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="criterias">The criterias.</param>
      <param name="languageBranch">The language branch.</param>
      <param name="selector">The selector.</param>
      <returns>
            A collection of pages that fulfil the criterias.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.FindPages(EPiServer.Core.PageReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds pages of a specific language branch.
            </summary>
      <param name="pageLink">A page link that specifies the parent page. If <paramref name="pageLink" /> is <c>null</c> all pages regardless of parent will be considered.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>A collection of pages.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.FindPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds the pages that fulfill the criterias.
            </summary>
      <param name="pageLink">Search below this page.</param>
      <param name="criterias">The criterias to match.</param>
      <returns>A collection of pages that fulfil the criterias.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.FindPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds the pages that fulfill the criterias.
            </summary>
      <param name="pageLink">Search below this page.</param>
      <param name="criterias">The criterias to match.</param>
      <param name="languageBranch">Only search for pages on specific language branch.</param>
      <returns>A collection of pages that fulfil the criterias.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.FindByName(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds the first page that matches the page name.
            </summary>
      <param name="pageName">Name of the page.</param>
      <returns>A PageReference to the first matching page.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.FindByName(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds the first page that matches the page name.
            </summary>
      <param name="pageName">Name of the page.</param>
      <param name="languageBranch">Restrict searching to pages in this language branch.</param>
      <returns>
            A PageReference to the first matching page.
            </returns>
      <remarks>
            The page name is matched with starting and trailing wildcards, i e searching for pageName "abc" will
            for example match pages named "abc", "123abc456" or "abc1234".
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SearchPages.FindPages(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds all pages of a specific language branch.
            </summary>
      <param name="languageBranch">The language branch.</param>
      <returns>A collection of pages.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.SiteConfigurationRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Contains static access to global site configuration key values.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.DataAbstraction.Internal.SiteConfigurationRepository.UniqueIdKey">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents the key used to store a Unique ID for a site in the site configuration.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.DataAbstraction.Internal.SiteConfigurationRepository.WebConfigKey">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents the key used to store Web.Config for a site in the site configuration.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SiteConfigurationRepository.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.SiteConfigDB})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.SiteConfigurationRepository" /> class.
            </summary>
      <param name="dataAccess">The data access.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SiteConfigurationRepository.GetValue(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the configuration value associated with the provided site and key.
            </summary>
      <param name="siteId">The id of the site that the value is associated with.</param>
      <param name="key">The key that the value is associated with.</param>
      <returns>
            Configuration string if found; otherwise <c>null</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SiteConfigurationRepository.GetValues(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a dictionary with all the configuration value associated with the provided key
            where the key of the returned dictionary is the site id.
            </summary>
      <param name="key">The key that the value is associated with.</param>
      <returns>
            A dictionary with the site and configuration value.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SiteConfigurationRepository.SetValue(System.String,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the configuration value and associates it with the provided site and key.
            </summary>
      <param name="siteId">The id of the site that the value should be associated with.</param>
      <param name="key">The key that the value should be associated with.</param>
      <param name="value">The value that should be associated with the provided site and key.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SiteConfigurationRepository.DeleteValue(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the configuration value associated with the provided site and key.
            </summary>
      <param name="siteId">The id of the site that the value should be associated with.</param>
      <param name="key">The key that the value should be associated with.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SiteConfigurationRepository.GetInstance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets an instance of the currently configurated <see cref="T:EPiServer.DataAbstraction.ISiteConfigurationRepository" />.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.SoftLinkFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SoftLinkFactory.#ctor(EPiServer.Web.IPermanentLinkMapper)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.SoftLinkFactory" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.SoftLinkFactory.Create(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a <see cref="T:EPiServer.DataAbstraction.SoftLink" /> for the specified owner content.
            </summary>
      <param name="owner">The owner content where the link is present.</param>
      <returns>A <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instance initialized for the provided owner content.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.TabDefinitionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A repository for the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.TabInfoDB},EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.TabDefinitionRepository" /> class.
            </summary>
      <param name="dataAccess">The data access.</param>
      <param name="cacheInstance">The cache.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.TabInfoDB},EPiServer.DataAbstraction.GroupDefinitionRepository,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.TabDefinitionRepository" /> class.
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.TabDefinitionDeleted">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> has been deleted.
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.TabDefinitionSaved">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> has been saved, i.e. created or updated.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.Load(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Load a tab based on identifier
            </summary>
      <param name="id">The tab identifier</param>
      <returns>A tab or null if not found</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.Load(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Load a tab based on name
            </summary>
      <param name="name">The tab name</param>
      <returns>A tab or null if not found</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. List all defined tabs
            </summary>
      <returns>A collection of types</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.Merge(EPiServer.DataAbstraction.TabDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Merge the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> from Db and Code.
            </summary>
      <param name="tabDefinition">tabDefinition</param>
      <returns>The merged <see cref="T:EPiServer.DataAbstraction.TabDefinition" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.Save(EPiServer.DataAbstraction.TabDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Stores or updates a specified tab definition in the repository.
            </summary>
      <param name="tabDefinition">The tab definition that will be deleted</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.Delete(EPiServer.DataAbstraction.TabDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes a tab definition
            </summary>
      <param name="tabDefinition">The tab definition that will be deleted</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.Delete(EPiServer.DataAbstraction.TabDefinition,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes a tab definition and replaces any references to this tab with the specified tab.
            </summary>
      <param name="tabDefinition">The tab definition that should be persisted.</param>
      <param name="replaceWithTabDefinition">Replace existing references with tab</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.GetDependentPropertyNames(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. List all dependent properties for a specified tab
            </summary>
      <param name="tabId">The key for the tab</param>
      <returns>A list of all property names found on the specified tab</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.OnTabDefinitionSaved(System.EventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Raises the <see cref="E:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.TabDefinitionSaved" /> event.
            </summary>
      <param name="args">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.OnTabDefinitionDeleted(System.EventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Raises the <see cref="E:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.TabDefinitionDeleted" /> event.
            </summary>
      <param name="args">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TabDefinitionRepository.ClearCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clear cache.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.TypeReferenceAnalyzer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Analyses a type looking for properties of a specified type.
            </summary>
      <remarks>
        <para>
            Recursively goes through the public properties of a type and searches for those of a specified typed.
            Will throw exception if a circular reference is encountered.
            </para>
        <para>Only properties with a public get and set accessor will be validated.</para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.TypeReferenceAnalyzer.Analyze``1(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Analyze a type for occurrances of a specified base type
            </summary>
      <remarks>
        <para>Analyze a type looking for properties of a specified type. Will do so recursivly using reflection on public properties with getter and setter.</para>
        <para>Validates if any property of a specific type creates a circular reference. Will throw an exception in that case.</para>
      </remarks>
      <typeparam name="T">The public properties have to inherit from this type to be considered a match.</typeparam>
      <param name="type">The type to analyze.</param>
      <exception cref="T:System.InvalidOperationException">If circular references are found</exception>
      <returns>
            The types found matching the <typeparamref name="T" /> parameter. Ordered with the deepest matches first.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.UniqueSequence">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generates a unique sequence of numbers stored in the database
            </summary>
      <remarks>This class is stateless so two instances refering to the same sequence name will work the same as one instance of the class</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.UniqueSequence.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default constructor defining the name of the sequence
            </summary>
      <param name="name">The name of the sequence</param>
      <remarks>New sequence names will automatically create a new sequence starting at one(1)</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.UniqueSequence.Next">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Move sequence forward one step
            </summary>
      <returns>The next number in the sequence</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.UniqueSequence.Next(System.Int64)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Move sequence forwards with specified number of steps
            </summary>
      <param name="numberOfSteps">The numer of steps with a minimum of one(1)</param>
      <returns>The last number in the sequence where the starting number in the sequence is returnValue-(numberOfSteps-1)</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.VersionExtensions.Increment(System.Version,EPiServer.DataAbstraction.VersionComponent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Increment <see cref="T:System.Version" /> according to <paramref name="versionComponent" />. 
            </summary>
      <param name="version">The version</param>
      <param name="versionComponent">The version component</param>
      <returns>
      </returns>
      <remarks>Increment version according to version component and reset other lower component than version component.
            E.g. for a verion "1.3" with version component <see cref="F:EPiServer.DataAbstraction.VersionComponent.Major" /> it increments to "2.0", or
            for a version "3.1.2"  with version component <see cref="F:EPiServer.DataAbstraction.VersionComponent.Minor" /> it increments to "3.2.0"</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.InvalidContentTypeBaseException">
      <summary>
            Exception class thrown when an invalid model type was found.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.InvalidContentTypeBaseException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.InvalidModelTypeException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.InvalidContentTypeBaseException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.InvalidModelTypeException" /> class
            with a specified error message.
            </summary>
      <param name="message">The message that describes the error</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.InvalidContentTypeBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.InvalidModelTypeException" /> class
            with serialized data.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.InvalidModelTypeException">
      <summary>
            Exception class thrown when an invalid model type was found.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.InvalidModelTypeException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.InvalidModelTypeException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.InvalidModelTypeException.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.InvalidModelTypeException" /> class.
            </summary>
      <param name="modelType">The model type that was invalid.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.InvalidModelTypeException.#ctor(System.Type,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.InvalidModelTypeException" /> class
            with a specified error message.
            </summary>
      <param name="modelType">The model type that was invalid.</param>
      <param name="message">The message that describes the error</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.InvalidModelTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.InvalidModelTypeException" /> class
            with serialized data.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.InvalidModelTypeException.ModelType">
      <summary>
            Gets the <see cref="P:EPiServer.DataAbstraction.InvalidModelTypeException.ModelType" /> that contained the circular reference.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.IParentRestoreRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Interface for restore IContent from wastebasket to original place
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.IParentRestoreRepository.SaveParentLink(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Saves the parent link.
            </summary>
      <param name="sourceLink">The source link.</param>
      <param name="parentLink">The parent link.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IParentRestoreRepository.DeleteParentLink(EPiServer.Core.ContentReference)">
      <summary>
            Deletes the parent link.
            </summary>
      <param name="sourceLink">The source link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IParentRestoreRepository.GetParentLink(EPiServer.Core.ContentReference)">
      <summary>
            Gets the parent link.
            </summary>
      <param name="sourceLink">The source link.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IPropertyDefinitionRepository">
      <summary>
            Defines methods for interacting with a data repository where <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s are persisted.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionRepository.Load(System.Int32)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> with the specified id from the data repository.
            </summary>
      <param name="propertyDefinitionID">The Id of the definition to load.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> that matches the given id or <c>null</c> if noone could be found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionRepository.Save(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Saves the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> to the data repository.
            </summary>
      <param name="propertyDefinition">The page definition to save.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionRepository.Delete(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Deletes a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> from the data repository.
            </summary>
      <param name="propertyDefinition">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> to delete.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionRepository.List(System.Int32)">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s in the data repository for a specific page type id.
            </summary>
      <param name="pageTypeID">The page type id.</param>
      <returns>Enumeration of <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s on specified page type.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionRepository.ListDynamic">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s in the data repository that are dynamic properties.
            </summary>
      <returns>A list of <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s that are dynamic properties.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionRepository.GetUsage(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Retrieves information about the usage of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </summary>
      <param name="propertyDefinitionID">The page definition ID.</param>
      <param name="onlyNoneMasterLanguage">if set to <c>true</c> only none master langauge are taken into account.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions will be checked.</param>
      <param name="isDynamic">if set to <c>true</c> only dynamic properties will be considered.</param>
      <returns>
            List of <see cref="T:EPiServer.DataAbstraction.ContentUsage" /> which contains information on what pages uses
            the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionRepository.CheckUsage(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Retrieves information if the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> is used.
            </summary>
      <param name="propertyDefinitionID">The page definition ID.</param>
      <param name="onlyNoneMasterLanguage">if set to <c>true</c> only none master langauge are taken into account.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions will be checked.</param>
      <param name="isDynamic">if set to <c>true</c> only dynamic properties will be considered.</param>
      <returns>
            true if there is data stored for definition otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionRepository.ExistsPropertyDefinitionWithContentType(System.Guid)">
      <summary>
            Determines whether there is any property definition of the specified content type.
            </summary>
      <param name="contentTypeID">The content type ID.</param>
      <remarks>
            An example would be if there is a content type that has a property definition of a block with the specified id (contentTypeID)
            </remarks>
      <returns>
        <c>true</c> if there is a property definition of the specified type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository">
      <summary>
            Defines methods for interacting with a data repository where <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />s are persisted.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository.Save(EPiServer.DataAbstraction.PropertyDefinitionType)">
      <summary>
            Saves the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> to the data repository.
            </summary>
      <param name="propertyDefinitionType">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> to save.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository.Load(System.Int32)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> with the specified id from the data repository.
            </summary>
      <param name="id">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> id.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> that matches the given id or null if no match could be found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository.Load(System.String,System.String)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> with the specified <see cref="T:System.Guid" /> from the data repository.
            </summary>
      <returns>The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> that matches the given type and assembly or null if no match could be found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository.Load(System.Type)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> with the underlying <see cref="T:System.Type" /> from the data repository.
            </summary>
      <param name="type">The underlying <see cref="T:System.Type" /> of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> that matches the given <see cref="T:System.Type" /> or null if no match could be found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository.LoadByBlockType(System.Guid)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> that corresponds to the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with given id from the data repository.
            </summary>
      <param name="blockTypeId">The block type id.</param>
      <returns>The <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> that matches the given <paramref name="blockTypeId" /> or null if no match could be found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository.LoadByBlockType(System.Type)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> that corresponds to the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with given model type from the data repository.
            </summary>
      <param name="blockTypeModel">The block type model.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> that matches the given <paramref name="blockTypeModel" /> or null if no match could be found.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository.Delete(System.Int32)">
      <summary>
            Deletes the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> with the supplied id from the data repository.
            </summary>
      <param name="id">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> id.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository.Delete(EPiServer.DataAbstraction.PropertyDefinitionType)">
      <summary>
            Deletes the suppied <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> from the data repository.
            </summary>
      <param name="propertyDefinitionType">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> to delete.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository.List">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />s in the data repository.
            </summary>
      <returns>Enumeration of <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />s.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IScheduledJobEvents">
      <summary>
            Defines the events exposed for <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /></summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.IScheduledJobEvents.Saved">
      <summary>
            Raised when a <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> has been saved
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.IScheduledJobEvents.Deleted">
      <summary>
            Raised when a <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> have been deleted
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.IScheduledJobEvents.Executed">
      <summary>
            Raised when a <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> have been executed
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.IScheduledJobRepository">
      <summary>
            Get, list, save and delete scheduled jobs
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobRepository.Delete(System.Guid)">
      <summary>
            Deletes a job by id
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobRepository.Get(System.Guid)">
      <summary>
            Get a job by id
            </summary>
      <param name="id">The id of the job</param>
      <returns>The job, or null if not found</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobRepository.Get(System.String,System.String,System.String)">
      <summary>
            Get a job by method, type name and assembly
            </summary>
      <param name="method">The method to call.</param>
      <param name="typeName">Name of the class where method lives.</param>
      <param name="assemblyName">Name of the assembly where the class is defined.</param>
      <returns>A ScheduledJob instance if a matching job is found, otherwise null.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobRepository.List">
      <summary>
            Retrieves a list of all available jobs
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobRepository.Save(EPiServer.DataAbstraction.ScheduledJob)">
      <summary>
            Saves job information or creates a new job
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ISiteConfigurationRepository">
      <summary>
            Describes methods for storing, retrieving and deleting configuration values associated with a specific site.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ISiteConfigurationRepository.GetValue(System.String,System.String)">
      <summary>
            Gets the configuration value associated with the provided site and key.
            </summary>
      <param name="siteId">The id of the site that the value is associated with.</param>
      <param name="key">The key that the value is associated with.</param>
      <returns>Configuration string if found; otherwise <c>null</c>.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ISiteConfigurationRepository.GetValues(System.String)">
      <summary>
            Gets a dictionary with all the configuration value associated with the provided key
            where the key of the returned dictionary is the site id.
            </summary>
      <param name="key">The key that the value is associated with.</param>
      <returns>A dictionary with the site and configuration value.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ISiteConfigurationRepository.SetValue(System.String,System.String,System.String)">
      <summary>
            Sets the configuration value and associates it with the provided site and key.
            </summary>
      <param name="siteId">The id of the site that the value should be associated with.</param>
      <param name="key">The key that the value should be associated with.</param>
      <param name="value">The value that should be associated with the provided site and key.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ISiteConfigurationRepository.DeleteValue(System.String,System.String)">
      <summary>
            Deletes the configuration value associated with the provided site and key.
            </summary>
      <param name="siteId">The id of the site that the value should be associated with.</param>
      <param name="key">The key that the value should be associated with.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ITabDefinitionRepository">
      <summary>
            Defines methods for interacting with a data repository where <see cref="T:EPiServer.DataAbstraction.TabDefinition" />s are persisted.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITabDefinitionRepository.Load(System.Int32)">
      <summary>
            Load a tab based on identifier
            </summary>
      <param name="id">The tab identifier</param>
      <returns>A tab or null if not found</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITabDefinitionRepository.Load(System.String)">
      <summary>
            Load a tab based on name
            </summary>
      <param name="name">The tab name</param>
      <returns>A tab or null if not found</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITabDefinitionRepository.List">
      <summary>
            List all defined tabs
            </summary>
      <returns>A collection of types</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITabDefinitionRepository.Save(EPiServer.DataAbstraction.TabDefinition)">
      <summary>
            Stores or updates a specified tab definition in the repository.
            </summary>
      <param name="tabDefinition">The tab definition that should be persisted.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITabDefinitionRepository.Delete(EPiServer.DataAbstraction.TabDefinition)">
      <summary>
            Deletes a tab definition
            </summary>
      <param name="tabDefinition">The tab definition that will be deleted</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITabDefinitionRepository.Delete(EPiServer.DataAbstraction.TabDefinition,System.Int32)">
      <summary>
            Deletes a tab definition
            </summary>
      <param name="tabDefinition">The tab definition that will be deleted</param>
      <param name="replaceWithTabDefinition">Replace existing references with tab</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITabDefinitionRepository.GetDependentPropertyNames(System.Int32)">
      <summary>
            List all dependent properties for a specified tab
            </summary>
      <param name="tabId">The key for the tab</param>
      <returns>A list of all property names found on the specified tab</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.ITypeReferenceAnalyzer">
      <summary>
            Analyzes types for type usages.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITypeReferenceAnalyzer.Analyze``1(System.Type)">
      <summary>
            Analyze a type for occurrances of a specified base type
            </summary>
      <remarks>
        <para>Analyze a type looking for properties of a specified type. Will do so recursivly using reflection on public properties with getter and setter.</para>
        <para>Validates if any property of a specific type creates a circular reference. Will throw an exception in that case.</para>
      </remarks>
      <typeparam name="T">The public properties have to inherit from this type to be considered a match.</typeparam>
      <param name="type">The type to analyze.</param>
      <exception cref="T:System.InvalidOperationException">If circular references are found</exception>
      <returns>
            The types found matching the <typeparamref name="T" /> parameter. Ordered with the deepest matches first.
            </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.LanguageBranch">
      <summary>
            Represents a language that can be used in globalized solutions.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.LanguageBranch.CacheKey">
      <summary>
            String used as cache key for language branches.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.LanguageBranch.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.LanguageBranch.#ctor(System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> class.
            </summary>
      <param name="culture">The culture of the language branch.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.LanguageBranch.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> class.
            </summary>
      <param name="languageID">The language of the branch.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.ID">
      <summary>
            Gets or sets the unique identifier of this language branch.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.Culture">
      <summary>
            Gets or sets the culture for this language branch.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.LanguageID">
      <summary>
            Gets the language name of the current branch, for example "en"
            </summary>
      <remarks>
            Note that this is the Name property of a CultureInfo object.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.Name">
      <summary>
            Gets or sets the display name of this language.
            </summary>
      <remarks>
            Unless explicitly set, this property returns the NativeName of the <see cref="P:EPiServer.DataAbstraction.LanguageBranch.Culture" /> property.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.SortIndex">
      <summary>
            Gets or sets the sort index used when listing language branches.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.URLSegment">
      <summary>
            Gets or sets a custom string that should be used in URL segments.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.RawIconPath">
      <summary>
            Gets or sets the raw flag icon path.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.ResolvedIconPath">
      <summary>
            Gets the icon path.
            </summary>
      <remarks>
            Use this property to get path to Flag outside admin/edit. 
            Uses UriSupport.ResolveUrlBySettings to resolve path to flag.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.Enabled">
      <summary>
            Gets or sets a value indicating if this language branch is enabled.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.ACL">
      <summary>
            Gets or sets the AccessControlList for this language.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.LanguageBranch.QueryEditAccessRights(System.Security.Principal.IPrincipal)">
      <summary>
            Queries if the user has edit access rights to the language branch.
            </summary>
      <param name="user">The user.</param>
      <returns>
            True if the user has edit access to the language; otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.LanguageBranch.ValidateLanguageEdititingAccessRights(System.Security.Principal.IPrincipal)">
      <summary>
            Validates that the user has access rights to edit the page in the given language.
            </summary>
      <param name="user">The user.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.LanguageBranch.CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.LanguageBranch.MakeReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.LanguageBranch.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> class.
            </summary>
      <param name="languageID">The language ID.</param>
      <param name="name">The name of the language.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.LanguageBranch.#ctor(System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> class.
            </summary>
      <param name="id">The internal numeric ID.</param>
      <param name="languageID">The language ID.</param>
      <param name="name">The name of the language.</param>
      <param name="sortIndex">Index to sort on.</param>
      <param name="rawIconPath">The raw icon path.</param>
      <param name="urlSegment">The URL segment that identifies the language when used in a URL.</param>
      <param name="enabled">if set to <c>true</c> the language is enabled.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.CurrentUrlSegment">
      <summary>
            Gets the URL segment string to use when creating or verifying Friendly URL:s
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.LanguageBranch.LanguageBranchRepository">
      <summary>
            Convenient method to get the instance of <see cref="T:EPiServer.DataAbstraction.ILanguageBranchRepository" /> that is registered in <see cref="T:EPiServer.ServiceLocation.ServiceLocator" />.
            </summary>
      <value>The language branch repository.</value>
    </member>
    <member name="T:EPiServer.DataAbstraction.LanguageBranchCollection">
      <summary>
            Represents a collection of LanguageBranch classes.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.MetaDataProperties">
      <summary>
            Defines the names for the meta data properties used in <see cref="T:EPiServer.Core.PageData" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.IdentityData">
      <summary>
            Metadata that specifies properties that are page unique, used
            to exclude some properties on import
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.IgnoreOnImportData">
      <summary>
            Metadata that specifies properties that should be ignored when doing an import.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.InformationData">
      <summary>
            Meta data that relates to page information
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.MetaDataProperties.All">
      <summary>
            A list of all existing meta data properties for content.
            </summary>
      <remarks>
            Not all content types have all meta data present.
            </remarks>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageTypeName">
      <summary>
            Property containing the name of the page type of the page. 
            Of type <see cref="T:EPiServer.Core.PropertyString" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageTypeID">
      <summary>
            Property containing the identifier of the page type of the page. 
            Of type <see cref="T:EPiServer.Core.PropertyPageType" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageName">
      <summary>
            Property containing the name of the page. 
            <see cref="T:EPiServer.Core.PropertyString" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageLink">
      <summary>
            Property containing the identifier of the page. 
            Of type <see cref="T:EPiServer.Core.PropertyContentReference" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageParentLink">
      <summary>
            Property containing a link to the parent page of the page. 
            Of type <see cref="T:EPiServer.Core.PropertyContentReference" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PagePendingPublish">
      <summary>
            Property indicating if the page is pending publishing
            Of type <see cref="T:EPiServer.Core.PropertyBoolean" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageWorkStatus">
      <summary>
            Property containing the editing status of the page.
            Of type <see cref="T:EPiServer.Core.PropertyNumber" /> representing a <see cref="T:EPiServer.Core.VersionStatus" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageFolderID">
      <summary>
            Property containing the unique folder name in the page folder provider.
            Of type <see cref="T:EPiServer.Core.PropertyNumber" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageContentAssetsID">
      <summary>
            Property containing the unique assets folder.
            Of type <see cref="T:EPiServer.Core.PropertyString" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageContentOwnerID">
      <summary>
            Property containing the owner id for a <see cref="T:EPiServer.Core.IContentAsset" />.
            Of type <see cref="T:EPiServer.Core.PropertyString" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageDeleted">
      <summary>
            Property indicating if the page is currently placed in the wastebasket. 
            Of type <see cref="T:EPiServer.Core.PropertyBoolean" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageDeletedBy">
      <summary>
            Property indicating who delete the page. 
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageDeletedDate">
      <summary>
            Property indicating when the page is placed in the wastebasket. 
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageSaved">
      <summary>
            Property containing the date when the page was last saved.
            Of type <see cref="T:EPiServer.Core.PropertyDate" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageChanged">
      <summary>
            Property containing the date when the page was last marked as changed.
            Of type <see cref="T:EPiServer.Core.PropertyDate" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageCreatedBy">
      <summary>
            Property containing the username of the user that created the page.
            Of type <see cref="T:EPiServer.Core.PropertyString" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageChangedBy">
      <summary>
            Property containing the username of the user that last changed the page.
            Of type <see cref="T:EPiServer.Core.PropertyString" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageMasterLanguageBranch">
      <summary>
            Property containing the master language branch of the page.
            Of type <see cref="T:EPiServer.Core.PropertyString" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageLanguageBranch">
      <summary>
            Property containing the language branch identifier for page.
            Of type <see cref="T:EPiServer.Core.PropertyString" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageGUID">
      <summary>
            Property containing the unique identifier of the page.
            Of type <see cref="T:EPiServer.Core.PropertyString" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageVisibleInMenu">
      <summary>
            Property indicating if the page should be visible in menus.
            Of type <see cref="T:EPiServer.Core.PropertyBoolean" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageURLSegment">
      <summary>
            Property containing the segment that represents the page in an URL.
            Of type <see cref="T:EPiServer.Core.PropertyString" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageChildOrderRule">
      <summary>
            Property containing the type of sorting that should be used for child pages.
            Of type <see cref="T:EPiServer.Core.PropertyNumber" /> representing a <see cref="T:EPiServer.Filters.FilterSortOrder" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageExternalURL">
      <summary>
            Property containing a simple URL of the page. 
            Of type <see cref="T:EPiServer.SpecializedProperties.PropertyVirtualLink" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PagePeerOrder">
      <summary>
            Property containing the sorting index of the page.
            Of type <see cref="T:EPiServer.Core.PropertyNumber" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageCategory">
      <summary>
            Property containing the categories associated with the page.
            Of type <see cref="T:EPiServer.Core.PropertyCategory" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageStartPublish">
      <summary>
            Property containing the date when the page should be published. 
            Of type <see cref="T:EPiServer.Core.PropertyDate" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageStopPublish">
      <summary>
            Property containing the date at which time the page should stop being published. 
            Of type <see cref="T:EPiServer.Core.PropertyDate" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageCreated">
      <summary>
            Property containing the date when the page was created. 
            Of type <see cref="T:EPiServer.Core.PropertyDate" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageArchiveLink">
      <summary>
            Property containing a link a page where the page will be archived. 
            Of type <see cref="T:EPiServer.Core.PropertyContentReference" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageShortcutType">
      <summary>
            Property containing the type of link behaviour that should be used for the page. 
            Of type <see cref="T:EPiServer.Core.PropertyNumber" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageShortcutLink">
      <summary>
            Property containing a page where the page is linked to, as defined by PageShortcutType. 
            Of type <see cref="T:EPiServer.Core.PropertyContentReference" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageTargetFrame">
      <summary>
            Property containing the frame that this page should be displayed in.
            Of type <see cref="T:EPiServer.SpecializedProperties.PropertyFrame" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageLinkURL">
      <summary>
            Property containing the URL to the page. 
            Of type <see cref="T:EPiServer.SpecializedProperties.PropertyUrl" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.PageChangedOnPublish">
      <summary>
            Property indicating if the changed date should be updated when the page is published.
            Of type <see cref="T:EPiServer.Core.PropertyBoolean" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.BinaryData">
      <summary>
            Property holding binary data of type <see cref="T:EPiServer.Framework.Blobs.Blob" /> for <see cref="T:EPiServer.Core.IBinaryStorable" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.MetaDataProperties.Thumbnail">
      <summary>
            Property holding binary data of type <see cref="T:EPiServer.Framework.Blobs.Blob" /> for <see cref="T:EPiServer.Core.IContentMedia" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.MetaDataProperties.GetInterfaceForPageDataMetaDataProperty(System.String)">
      <summary>
            Gets the interface that exposes the specified property on a the <see cref="T:EPiServer.Core.PageData" /> implementation.
            </summary>
      <param name="metaDataPropertyName">Name of the property.</param>
      <returns>The interface that exposes the specified property, or null if none exists.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.MetaDataProperties.GetTabForPropertyName(System.String)">
      <summary>
            Gets the the edit tab for the specified property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The edit tab for the property. The default tab is <see cref="F:EPiServer.Core.EditTab.Information" />.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.MetaDataProperties.GetPageDataPropertyName(System.String)">
      <summary>
            Gets the name of the backing <see cref="T:EPiServer.Core.PropertyData" /> on a <see cref="T:EPiServer.Core.PageData" /> for a specific property exposed through an interface. 
            <remarks>
            Example: IContent.Name would return PageName.
            </remarks></summary>
      <param name="propertyName">The name of the property on an interface.</param>
      <returns>The name of the backing property data</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.MetaDataProperties.GetLanguageSpecificSetting(System.String)">
      <summary>
            Gets value for IsLanguageSpecific for the specified property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>
        <c>true</c> if that property is language specific, otherwise <c>false</c></returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.MetaDataProperties.GetFieldOrder(System.String)">
      <summary>
            Gets value for FieldOrder for the specified property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The field order for that property, or 0 if not found.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.Migration.ContentTypeChange">
      <summary>
            Contains information about name chages for a specific content type and its properties.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.ContentTypeChange.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Migration.ContentTypeChange" /> class.
            </summary>
      <param name="contentTypeName">Name of the content type.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Migration.ContentTypeChange.Name">
      <summary>
            Gets the name of the content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Migration.ContentTypeChange.OldName">
      <summary>
            Gets the old name if the content type has changed its name.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Migration.ContentTypeChange.PropertyChanges">
      <summary>
            Gets the property changes.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.ContentTypeChange.UsedToBeNamed(System.String)">
      <summary>
            Specifies what the content type used to be named.
            </summary>
      <param name="oldName">The old name.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.ContentTypeChange.Property(System.String)">
      <summary>
            Registers a new property change for this content type.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The created property change.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.Migration.MigrationStep">
      <summary>
            Contains information about name changes in <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <example>
            An example showing how to rename both a content type as well as a property on that content type.
            <code source="../CodeSamples/EPiServer/DataAbstraction/Migration/MigrationStepExample.cs" region="MigrationExample" lang="cs" /></example>
      <remarks>
        <para>
                    There is no versioning handling in a migration step. It is intended to be a very specific class for specific databases. 
                    It is safe to remove the migration step implementation after the changes described in it have been commited to the database.
                </para>
      </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.MigrationStep.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Migration.MigrationStep" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Migration.MigrationStep.Changes">
      <summary>
            Gets the changes for content types added in <see cref="M:EPiServer.DataAbstraction.Migration.MigrationStep.AddChanges" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.MigrationStep.AddChanges">
      <summary>
            Override this method and use it to populate the <see cref="M:MigrationStep.Changes" /> list.
            </summary>
      <remarks>Use the <see cref="M:EPiServer.DataAbstraction.Migration.MigrationStep.ContentType(System.String)" /> method to register changes.</remarks>
      <example>
            An example showing how to rename both a content type as well as a property on that content type.
            <code source="../CodeSamples/EPiServer/DataAbstraction/Migration/MigrationStepExample.cs" region="MigrationExample" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.MigrationStep.ContentType(System.String)">
      <summary>
            Registers a change of a content type or returns an existing one.
            </summary>
      <param name="contentTypeName">Name of the content type.</param>
      <returns>The created or existing content type change.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.Migration.MigrationStepRepository">
      <summary>
            Contains all changes to contenttypes that has been recorded with implementations of the <see cref="T:EPiServer.DataAbstraction.Migration.MigrationStep" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.MigrationStepRepository.#ctor(EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Migration.MigrationStepRepository" /> class.
            </summary>
      <param name="typeScannerLookup">The type scanner lookup.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.MigrationStepRepository.Create(EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
      <summary>
            Creates the global instance of the <see cref="T:EPiServer.DataAbstraction.Migration.MigrationStepRepository" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Migration.MigrationStepRepository.Changes">
      <summary>
            Gets all changes from all concrete classes inheriting from <see cref="T:EPiServer.DataAbstraction.Migration.MigrationStep" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.MigrationStepRepository.GetMigrationSteps">
      <summary>
            Gets the migration steps.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.MigrationStepRepository.GetMigrationStepTypes">
      <summary>
            Gets all concrete types that inherit from <see cref="T:EPiServer.DataAbstraction.Migration.MigrationStep" />.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.Migration.PropertyChange">
      <summary>
            Contains information about name chages for a specific property on a content type.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.PropertyChange.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Migration.PropertyChange" /> class.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.Migration.PropertyChange.Name">
      <summary>
            Gets the name of the property.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Migration.PropertyChange.OldName">
      <summary>
            Gets the old name of the property.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Migration.PropertyChange.UsedToBeNamed(System.String)">
      <summary>
            Specifies what the property used to be named.
            </summary>
      <param name="oldName">The old name.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ModelRepositoryEventArgs">
      <summary>
            Provides data for an event raised from a model repository.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ModelRepositoryEventArgs.#ctor(System.Type,EPiServer.DataAbstraction.RepositoryEventType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RepositoryEventArgs" /> class.
            </summary>
      <param name="type">The type.</param>
      <param name="eventType">Type of the event that is being raised.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ModelRepositoryEventArgs.ModelType">
      <summary>
            Gets the ID of the item affected by the repository event.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ModelRepositoryEventArgs.EventType">
      <summary>
            Gets the type of the event that was raised.
            </summary>
      <value>
            The type of the event.
            </value>
    </member>
    <member name="T:EPiServer.DataAbstraction.PageLanguageSetting">
      <summary>
            Defined language setting per page in EPiServer, this class is only used for serialization compatibility and has been replaced with <see cref="T:EPiServer.DataAbstraction.ContentLanguageSetting" /></summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageLanguageSetting.DefinedOnPage">
      <summary>
            For the page this setting has been defined on.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageLanguageSetting.IsActive">
      <summary>
            Gets or sets a value indicating whether this language is active.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageLanguageSetting.LanguageBranch">
      <summary>
            For the language branch this setting has been defined.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageLanguageSetting.ReplacementLanguageBranch">
      <summary>
            The default language if a language selection has not been done.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageLanguageSetting.LanguageBranchFallback">
      <summary>
            A list of fallback languages when a language is missing.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.PageType">
      <summary>
            Read and save page type information
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageType.#ctor">
      <summary>
            Initializes a new instance of the <c>PageTypeDefault</c> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageType.#ctor(System.Int32,System.Guid,System.String,System.String,System.String,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PageType" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="guid">The GUID based identifier</param>
      <param name="name">The name.</param>
      <param name="description">The description.</param>
      <param name="fileName">Name of the file.</param>
      <param name="isAvailable">if set to <c>true</c> [is available].</param>
      <param name="sortOrder">The sort order.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageType.FileName">
      <summary>
            RootRelative url to the actual template file (i.e. something starting with "/").
            If the backing path from the database is relative (i.e. not starting with "/"),
            it will be interpreted as relative to the (possibly relocated) UI-folder before
            being returned as a root-relative path.
            If the name begins with a magic placeholder (i.e. {EPsUploadDir} or {EPsRootDir})
            it is returned unchanged.
            If the path has not been set null is returned.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageType.FileNameForSite(EPiServer.Web.SiteDefinition)">
      <summary>
            Get the absolute path for the web form template path.
            </summary>
      <param name="siteDef">Site settings</param>
      <returns>The absolute path for the file</returns>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageType.ExportableFileName">
      <summary>
            Gets the filename in an exportable format which is a application relative path "~"
            </summary>
      <value>The name of the exportable file.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageType.Defaults">
      <summary>
            Gets or sets the default values for meta data
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageType.ResetContentType">
      <summary>
            Resets data that can be set from model.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageType.CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.PageType.MakeReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.PageType.CreateWritableCloneImplementation">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAbstraction.PageTypeDefault">
      <summary>
            Default meta data for a page type.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeDefault.#ctor">
      <summary>
            Initializes a new instance of the <c>PageTypeDefault</c> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeDefault.#ctor(System.String,System.TimeSpan,System.TimeSpan,System.Boolean,System.Int32,EPiServer.Filters.FilterSortOrder,EPiServer.Core.PageReference,System.Int32)">
      <summary>
            Initializes a new instance of the <c>PageTypeDefault</c> class.
            </summary>
      <param name="defaultPageName">The default page name to use for a page type.</param>
      <param name="startPublishOffset">The default offset to add to the current date for a start publish date.</param>
      <param name="stopPublishOffset">The default offset to add to the current date for a stop publish date.</param>
      <param name="visibleInManu">Determines if pages of the page type should be visible in the menu default.</param>
      <param name="peerOrder">The default sort index.</param>
      <param name="childOrderRule">The default sort order.</param>
      <param name="archivePageLink">The default archive page.</param>
      <param name="defaultFrameID">The ID of the default frame.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.ArchivePageLink">
      <summary>
            The default archive page
            </summary>
      <remarks>
            Will return PageReference.EmptyReference if not defined.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.FrameLoader">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the frame loader to use.
            </summary>
      <remarks>
            Should not be changed other than during unit tests. The default implementation uses <see cref="M:EPiServer.DataAbstraction.IFrameRepository.Load(System.Int32)" />.
            </remarks>
      <value>The frame loader.</value>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.HasValues">
      <summary>
            Gets a value that indicates if the any values have been set on the <c>PageTypeDefault</c> instance.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.DefaultPageName">
      <summary>
            Default page name to use for a page type.
            </summary>
      <remarks>
            Will return null if no name is set.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.StartPublishOffset">
      <summary>
            Default offset to add to current date for a start publish date.
            </summary>
      <remarks>
            Will return TimeSpan.Zero if no offset is defined.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.StopPublishOffset">
      <summary>
            Default offset to add to current date for a stop publish date.
            </summary>
      <remarks>
            Will return TimeSpan.Zero if no offset is defined.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.VisibleInMenu">
      <summary>
            If visible in menu should be set by default
            </summary>
      <remarks>
            Will return True by default, since this is the default value given to the VisibleInMenu property on a page.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.PeerOrder">
      <summary>
            The default sort index
            </summary>
      <remarks>
            Will return -1 if not defined.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.ChildOrderRule">
      <summary>
            The default sort order.
            </summary>
      <remarks>
            Will return FilterSortOrder.None if not defined.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.ArchiveContentLink">
      <summary>
            The default archive content
            </summary>
      <remarks>
            Will return ContentReference.EmptyReference if not defined.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.DefaultFrame">
      <summary>
            The default frame.
            </summary>
      <remarks>
            Will return a Frame object with ID = 0 if not defined.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeDefault.CreateWritableClone">
      <summary>Creates a writable clone of this object.</summary>
      <returns>A clone of this object that is writable.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeDefault.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>Creates a writable clone of this object.</summary>
      <returns>A clone of this object that is writable.</returns>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeDefault.IsReadOnly">
      <summary>Gets a value indicating if current instance is read-only.</summary>
      <value>
        <c>true</c> if this instance is read-only; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeDefault.MakeReadOnly">
      <summary>Makes the current instance and all it's properties read-only.</summary>
      <remarks>After calling this method the <see cref="P:EPiServer.DataAbstraction.PageTypeDefault.IsReadOnly" /> property will return <c>true</c>.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeDefault.ThrowIfReadOnly">
      <summary>Throws an exception if the current instance is read-only.</summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.PermissionRepository">
      <summary>
            Repository for permissions to functions
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PermissionRepository.GetPermissions(EPiServer.Security.PermissionType)">
      <summary>
            Gets all roles/users that have the specified permission type
            </summary>
      <param name="type">The permission type</param>
      <returns>A list of roles/users assigned to a permission type</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PermissionRepository.SavePermissions(EPiServer.Security.PermissionType,System.Collections.Generic.IEnumerable{EPiServer.Security.SecurityEntity})">
      <summary>
            Save roles/users for the specified permission type
            </summary>
      <param name="type">The permission type</param>
      <param name="entities">The list or roles/users for the permission type</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PermissionRepository.DeletePermissions(EPiServer.Security.SecurityEntity)">
      <summary>
            Clears all permissions for a given user/role
            </summary>
      <param name="entity">The user/role</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.PermissionTypeRepository">
      <summary>
            A in-memory repository of all registered permission types
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PermissionTypeRepository.Register(EPiServer.Security.PermissionType)">
      <summary>
            Register a permission type
            </summary>
      <param name="type">The permission type</param>
      <returns>true if the type was registered successfully; false if type already exists.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PermissionTypeRepository.Unregister(EPiServer.Security.PermissionType)">
      <summary>
            Register a permission type
            </summary>
      <param name="type">The permission type</param>
      <returns>true if the type was unregistered successfully; false if type was not found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PermissionTypeRepository.List">
      <summary>
            List all registered permission types
            </summary>
      <returns>A list of permission types</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.Project">
      <summary>
            A project is a collection of content items
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Project.ID">
      <summary>
            The identity of the project
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Project.IsPublic">
      <summary>
            Public projects can be viewed and edited by everyone
            </summary>
      <remarks>By default <c>true</c></remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.Project.Name">
      <summary>
            The name of the project
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Project.Created">
      <summary>
            When the project was created
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Project.CreatedBy">
      <summary>
            Who created the project
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Project.Status">
      <summary>
            Status of the project, supports the "old" project gadget
            </summary>
      <remarks>We do not recommend that you use ProjectStatus since it is being phased out</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.Project.DelayPublishUntil">
      <summary>
            Gets or sets the delay publish until.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.Project.PublishingTrackingToken">
      <summary>
            A token that can be used to track a a publish in progress
            </summary>
      <remarks>Take into consideration that tracking tokens are periodically cleaned up.</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.Project.Members">
      <summary>
            Users that are granted access
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.Project.ThrowIfReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.Project.MakeReadOnly">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.DataAbstraction.Project.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.Project.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.Project.CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAbstraction.ProjectEventArgs">
      <summary>
            Class to pass event arguments from <see cref="P:EPiServer.DataAbstraction.ProjectEventArgs.Project" /> events.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ProjectItem">
      <summary>
            A project item is content that is linked to a project
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectItem.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectItem.#ctor(System.Int32,EPiServer.Core.IContent)">
      <summary>
            Constructor for a referenced content
            </summary>
      <param name="projectId">Id of the project</param>
      <param name="content">Referenced content</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ProjectItem.ID">
      <summary>
            The identity of the project item
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ProjectItem.ProjectID">
      <summary>
            The identity of the project
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ProjectItem.Language">
      <summary>
            The language of the linked content
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ProjectItem.ContentLink">
      <summary>
            The linked content item
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ProjectItem.Category">
      <summary>
            The category of the content
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectItem.CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectItem.MakeReadOnly">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.DataAbstraction.ProjectItem.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectItem.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAbstraction.ProjectItemCategories">
      <summary>
            CMS defined categories for project items
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ProjectItemCategories.Media">
      <summary>
            Category for <see cref="T:EPiServer.Core.MediaData" /></summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ProjectItemCategories.Pages">
      <summary>
            Category for <see cref="T:EPiServer.Core.PageData" /></summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ProjectItemCategories.Blocks">
      <summary>
            Category for <see cref="T:EPiServer.Core.BlockData" /></summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ProjectItemsEventArgs">
      <summary>
            Class to pass event arguments from <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> events.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ProjectPublisher">
      <summary>
            Component for publishing <see cref="T:EPiServer.Core.IContent" /> versions associated with <see cref="T:EPiServer.DataAbstraction.Project" /> and <see cref="T:EPiServer.DataAbstraction.ProjectItem" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectPublisher.PublishAsync(EPiServer.DataAbstraction.Project)">
      <summary>
            Publishes the specified <see cref="T:EPiServer.DataAbstraction.Project" /> and all content items referenced by a <see cref="T:EPiServer.DataAbstraction.Project" />,
            ensuring that the current user has at least <see cref="F:EPiServer.Security.AccessLevel.Publish" /> access to all content items.
            </summary>
      <param name="project">The project to publish</param>
      <returns>A task that runs the publishing process or a completed task if there was nothing to do</returns>
      <remarks>Published and previously published content will be ignored since they are considered already published.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectPublisher.PublishAsync(EPiServer.DataAbstraction.Project,EPiServer.Security.AccessLevel)">
      <summary>
            Publishes the specified <see cref="T:EPiServer.DataAbstraction.Project" /> and all content items referenced by a <see cref="T:EPiServer.DataAbstraction.Project" />.
            </summary>
      <param name="project">The project to publish</param>
      <param name="access">Required access level needed for each individual content item.</param>
      <returns>A task that runs the publishing process or a completed task if there was nothing to do</returns>
      <remarks>Published and previously published content will be ignored since they are considered already published.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectPublisher.PublishAsync(EPiServer.DataAbstraction.Project,System.Nullable{System.DateTime})">
      <summary>
            Schedules the specified <see cref="T:EPiServer.DataAbstraction.Project" /> and all content items referenced by a <see cref="T:EPiServer.DataAbstraction.Project" />
            for publication at the given date. Publishing will be immediate if parameter <paramref name="delayPublishUntil" /> is null.
            </summary>
      <param name="project">The project to publish</param>
      <param name="delayPublishUntil">The point in time when the project and it's items should be published.</param>
      <returns>A task that runs the publishing process or a completed task if there was nothing to do</returns>
      <remarks>Published and previously published content will be ignored since they are considered already published.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectPublisher.PublishAsync(EPiServer.DataAbstraction.Project,System.Nullable{System.DateTime},EPiServer.Security.AccessLevel)">
      <summary>
            Schedules the specified <see cref="T:EPiServer.DataAbstraction.Project" /> and all content items referenced by a <see cref="T:EPiServer.DataAbstraction.Project" />
            for publication at the given date. Publishing will be immediate if parameter <paramref name="delayPublishUntil" /> is null.
            </summary>
      <param name="project">The project to publish</param>
      <param name="delayPublishUntil">The point in time when the project and it's items should be published.</param>
      <param name="access">Required access level needed for each individual content item.</param>
      <returns>The task that runs the publishing process or a completed task if there was nothing to do</returns>
      <remarks>Published and previously published content will be ignored since they are considered already published.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectPublisher.PublishAsync(EPiServer.DataAbstraction.Project,System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ProjectItem},System.Nullable{System.DateTime},EPiServer.Security.AccessLevel)">
      <summary>
            Schedules the specified <see cref="T:EPiServer.DataAbstraction.Project" /> and the specified list of <see cref="T:EPiServer.DataAbstraction.ProjectItem" />
            for publication at the given date. Publishing will be immediate if parameter <paramref name="delayPublishUntil" /> is null.
            </summary>
      <param name="project">The project to publish</param>
      <param name="projectItems">The items to publish (if value is <c>null</c> all not previously published content in the project will be published)</param>
      <param name="delayPublishUntil">The point in time when the project and it's items should be published.</param>
      <param name="access">Required access level needed for each individual content item.</param>
      <returns>The task that runs the publishing process or a completed task if there was nothing to do</returns>
      <remarks>No filtering or other validation will be done of the content, the project items should be ready to publish.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectPublisher.ReactivateAsync(EPiServer.DataAbstraction.Project)">
      <summary>
            Reactivates the specified <see cref="T:EPiServer.DataAbstraction.Project" /> and all content items referenced by a <see cref="T:EPiServer.DataAbstraction.Project" />
            and resets the status to <see cref="F:EPiServer.DataAbstraction.ProjectStatus.Active" />.
            </summary>
      <param name="project">The project to reactivate</param>
      <returns>The task that runs the reactivation process or a completed task if there was nothing to do</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectPublisher.ReactivateAsync(EPiServer.DataAbstraction.Project,EPiServer.Security.AccessLevel)">
      <summary>
            Reactivates the specified <see cref="T:EPiServer.DataAbstraction.Project" /> and all content items referenced by a <see cref="T:EPiServer.DataAbstraction.Project" />
            and resets the status to <see cref="F:EPiServer.DataAbstraction.ProjectStatus.Active" />.
            </summary>
      <param name="project">The project to reactivate</param>
      <param name="access">Required access level needed for each individual content item.</param>
      <returns>The task that runs the reactivation process or a completed task if there was nothing to do</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.ProjectRepository">
      <summary>
            Repository for loading and save <see cref="T:EPiServer.DataAbstraction.Project" /> and <see cref="T:EPiServer.DataAbstraction.ProjectItem" /></summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ProjectRepository.ProjectDeleted">
      <summary>
            Occurs when a <see cref="T:EPiServer.DataAbstraction.Project" /> has been deleted.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ProjectRepository.ProjectSaved">
      <summary>
            Occurs when a <see cref="T:EPiServer.DataAbstraction.Project" /> has been saved, i.e. created or updated.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ProjectRepository.ProjectItemsDeleted">
      <summary>
            Occurs when list of <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> has been deleted.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.ProjectRepository.ProjectItemsSaved">
      <summary>
            Occurs when list of <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> has been saved, i.e. created or updated.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.Get(System.Int32)">
      <summary>
            Gets a <see cref="T:EPiServer.DataAbstraction.Project" /> by it's identifier
            </summary>
      <param name="id">The id of the project to be retrieved</param>
      <returns>The project or <c>null</c> if it was not found</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.Save(EPiServer.DataAbstraction.Project)">
      <summary>
            Creates or saves a <see cref="T:EPiServer.DataAbstraction.Project" /></summary>
      <param name="project">The project to save</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.Delete(System.Int32)">
      <summary>
            Deletes the <see cref="T:EPiServer.DataAbstraction.Project" /> with the specified identifyer
            </summary>
      <param name="id">The identifier of the project that should be deleted.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.List">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.Project">Projects</see> in the repository.
            </summary>
      <returns>A list of projects, if no projects was found an empty list will be returned</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.List(System.Int32,System.Int32,System.Int32@)">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.Project">Projects</see> in the repository.
            </summary>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="totalCount">The total amount of projects</param>
      <returns>A list of projects, if no projects was found an empty list will be returned</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.List(System.Nullable{EPiServer.DataAbstraction.ProjectStatus},System.Int32,System.Int32,System.Int32@)">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.Project">Projects</see> in the repository with the specified status.
            </summary>
      <param name="status">The status of projects to get or null to get all projects regardless of status.</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="totalCount">The total amount of projects</param>
      <returns>A list of projects, if no projects was found an empty list will be returned</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.GetItem(System.Int32)">
      <summary>
            Load a single project item
            </summary>
      <param name="id">The project item id</param>
      <returns>The project item or if no project item was found <c>null</c></returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.ListItems(System.Int32)">
      <summary>
            Gets all <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> that are linked to a project
            </summary>
      <param name="id">The project id</param>
      <returns>A list of project items, if no project items was found an empty list will be returned</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.GetItems(System.Int32)">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.ListItems(System.Int32,System.String,System.Globalization.CultureInfo,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Gets all <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> that are linked to a project
            </summary>
      <param name="id">The project id</param>
      <param name="category">The category of the items to return (optional)</param>
      <param name="language">The language of the items to return (optional)</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="totalCount">The total number of items in the set</param>
      <returns>A list of project items, if no project items was found an empty list will be returned</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.ListItems(System.Int32,System.Globalization.CultureInfo,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Gets all <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> that are linked to a project
            </summary>
      <param name="id">The project id</param>
      <param name="language">The language of the items to return (optional)</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="totalCount">The total number of items in the set</param>
      <returns>A list of project items, if no project items was found an empty list will be returned</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.GetItems(System.Int32,System.String,System.Globalization.CultureInfo,System.Int32,System.Int32,System.Int32@)">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>
            Gets all <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> that matches the provided <see cref="T:EPiServer.Core.ContentReference" /> list.
            </summary>
      <param name="contentReferences">
      </param>
      <returns>Items of <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> that matches the <see cref="T:EPiServer.Core.ContentReference" /> list.</returns>
      <remarks>
            The result of the GetItems or the number of items may be different from <see cref="T:EPiServer.Core.ContentReference" />. If the <see cref="T:EPiServer.Core.ContentReference" /> has no WorkID then returns all <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> that match the <see cref="T:EPiServer.Core.ContentReference" /></remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.SaveItems(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ProjectItem})">
      <summary>
            Saves a list of <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> to a project
            </summary>
      <param name="projectItems">A list of project items</param>
      <remarks>Projects that are in status <see cref="F:EPiServer.DataAbstraction.ProjectStatus.Published" /> will automatically get status <see cref="F:EPiServer.DataAbstraction.ProjectStatus.Active" /></remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.DeleteItems(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Deletes the <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> with the provided identifiers from a project.
            </summary>
      <param name="projectItems">A list of project item identity</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.OnProjectSaved(EPiServer.DataAbstraction.ProjectEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.DataAbstraction.ProjectRepository.ProjectSaved" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.DataAbstraction.ProjectEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.OnProjectDeleted(EPiServer.DataAbstraction.ProjectEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.DataAbstraction.ProjectRepository.ProjectDeleted" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.DataAbstraction.ProjectEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.OnProjectItemsSaved(EPiServer.DataAbstraction.ProjectItemsEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.DataAbstraction.ProjectRepository.ProjectItemsSaved" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.DataAbstraction.ProjectItemsEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ProjectRepository.OnProjectItemsDeleted(EPiServer.DataAbstraction.ProjectItemsEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.DataAbstraction.ProjectRepository.ProjectItemsDeleted" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.DataAbstraction.ProjectItemsEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ProjectStatus">
      <summary>
            Defines the status of project, supports the "old" project gadget
            </summary>
      <remarks>We do not recommend that you use ProjectStatus since it is being phased out.</remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.PropertyDefinition">
      <summary>
            Represents the meta data definitions of a <see cref="T:EPiServer.Core.PropertyData">Property</see>.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.LocalizationService">
      <summary>
            Gets or sets the <see cref="P:EPiServer.DataAbstraction.PropertyDefinition.LocalizationService" /> used by the current <see cref="T:EPiServer.Core.PropertyData" /> instance
            to retrieve localized texts.
            </summary>
      <value>
            The current <see cref="P:EPiServer.DataAbstraction.PropertyDefinition.LocalizationService" /> used internally.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.IsDynamicProperty">
      <summary>
            Gets a value indicating if this definition is a dynamic property definition.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.ID">
      <summary>
            Gets or sets the unique identifier for this property definition.
            </summary>
      <remarks>Set value to 0 to create new definition</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.ContentTypeID">
      <summary>
            Gets or sets the ID of the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that this property definition is a part of.
            </summary>
      <remarks>This value should be 0 for dynamic property definitions.</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.PageTypeID">
      <summary>
            Gets or sets the ID of the <see cref="T:EPiServer.DataAbstraction.PageType" /> that this property definition is a part of.
            </summary>
      <remarks>This value should be 0 for dynamic property definitions.</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.Name">
      <summary>
            Gets or sets the short name of the property definition used in code.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.Type">
      <summary>
            Gets or sets the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> that handles this property definition.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.Required">
      <summary>
            Gets or sets a value indicating if a property of this <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> is required to have a value.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.Tab">
      <summary>
            Gets or sets the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> group where this <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> belongs to.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.TemplateHint">
      <summary>
            Gets or sets the template hint that will be used when resolving render.
            </summary>
      <value>The template hint.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.Searchable">
      <summary>
            Gets or sets a value indicating whether a property of this <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> should be searchable.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.DefaultValueType">
      <summary>
            Default value handling
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.DefaultValue">
      <summary>
            The default value
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.EditCaption">
      <summary>
            Gets or sets the display name that should be used when editing a property of this <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.HelpText">
      <summary>
            Gets or sets the text that should be used as help when editing a property of this <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.FieldOrder">
      <summary>
            Gets or sets the field order used for ordering the properties in edit mode (read-only).
            </summary>
      <remarks>This field is read-only, use the MoveUp/MoveDown methods to resort</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.DisplayEditUI">
      <summary>
            If properties of this definition should display an edit user interface.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.LanguageSpecific">
      <summary>
            If properties of this definition should be specific for each language 
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.SettingsID">
      <summary>
            Gets or sets the ID of the settings container object.
            </summary>
      <value>The settings container ID.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.ExistsOnModel">
      <summary>Gets or sets a value indicating whether this instance exists on a model class.</summary>
      <value>
        <c>true</c> if this instance exists on a model class; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.Copy">
      <summary>
            Copies the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> instance.
            </summary>
      <returns>A copy </returns>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.NullableIsAvailable">
      <summary>
            Gets or sets the nullable is available.
            </summary>
      <value>The nullable is available.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.NullableRequired">
      <summary>
            Gets or sets the nullable required.
            </summary>
      <value>The nullable required.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.NullableSearchable">
      <summary>
            Gets or sets the nullable searchable.
            </summary>
      <value>The nullable searchable.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.CultureSpecificValue">
      <summary>
            Gets or sets the culture specific value.
            </summary>
      <value>The culture specific enum value.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.NullableFieldOrder">
      <summary>
            Gets or sets the nullable field order.
            </summary>
      <value>The nullable field order.</value>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.ResetPropertyDefinition">
      <summary>
            Resets data that can be set from model.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.TranslateDisplayName">
      <summary>
            Translates the display name to the current language.
            </summary>
      <returns>The translated display name.</returns>
      <remarks>If no translation is found the edit caption defined in the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> will be used.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.TranslateDescription">
      <summary>
            Translates the description to the current language.
            </summary>
      <returns>The translated description</returns>
      <remarks>If no translation is found the HelpText defined in the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> will be used.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.TranslateDisplayName(System.String,System.String)">
      <summary>
            Translates the display name to the current language.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="pageTypeName">Name of the page type.</param>
      <returns>The translated display name; or null if no translation was found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.TranslateDisplayName(System.String,System.String,EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Translates the display name to the current language.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="pageTypeName">Name of the page type.</param>
      <param name="localizationService">The localization service to use for the translation.</param>
      <returns>
            The translated display name; or null if no translation was found.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.TranslateDescription(System.String,System.String)">
      <summary>
            Translates the description to the current language.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="pageTypeName">Name of the page type.</param>
      <returns>The translated description; or null if no translation was found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.TranslateDescription(System.String,System.String,EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Translates the description to the current language.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="pageTypeName">Name of the page type.</param>
      <param name="localizationService">The localization service to use for the translation.</param>
      <returns>The translated description; or null if no translation was found.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.CreateWritableClone">
      <summary>Creates a writable clone of this object.</summary>
      <returns>A clone of this object that is writable.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>Creates a writable clone of this object.</summary>
      <returns>A clone of this object that is writable.</returns>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinition.IsReadOnly">
      <summary>Gets a value indicating if current instance is read-only.</summary>
      <value>
        <c>true</c> if this instance is read-only; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.MakeReadOnly">
      <summary>Makes the current instance and all it's properties read-only.</summary>
      <remarks>After calling this method the <see cref="P:EPiServer.DataAbstraction.PropertyDefinition.IsReadOnly" /> property will return <c>true</c>.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinition.ThrowIfReadOnly">
      <summary>Throws an exception if the current instance is read-only.</summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.DefaultValueType">
      <summary>
            Default value types for page definitions
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.DefaultValueType.None">
      <summary>
            No default value given
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.DefaultValueType.Inherit">
      <summary>
            Inherit default value from parent at create time
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.DefaultValueType.Value">
      <summary>
            Set default value to constant as defined for the property
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.PropertyDefinitionCollection">
      <summary>
                Represents a list of <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> objects.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.IndexOf(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
                Determines the index of a specific item in the list.
            </summary>
      <param name="item">The object to locate in the list.</param>
      <returns>The index of item if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.Insert(System.Int32,EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Inserts an item to the list at the specified index.
            </summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert into the list.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.RemoveAt(System.Int32)">
      <summary>
                Removes the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionCollection.Item(System.Int32)">
      <summary>
                Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.Add(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
                Adds an item to the list.
            </summary>
      <param name="item">The object to add to the list.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.Clear">
      <summary>
                Removes all items from the list.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.Contains(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
                Determines whether the list contains a specific value.
            </summary>
      <param name="item">The object to locate in the list.</param>
      <returns>
        <c>true</c> if item is found in the list; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.CopyTo(EPiServer.DataAbstraction.PropertyDefinition[],System.Int32)">
      <summary>
                Copies the elements of the list to an <see cref="T:System.Array" />, 
                starting at a particular array index.
            </summary>
      <param name="array">
                The one-dimensional System.Array that is the destination of the elements
                copied from the list. The System.Array must have zero-based indexing.
            </param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionCollection.Count">
      <summary>
                Gets the number of elements contained in the list.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.Remove(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
                Removes the first occurrence of a specific object from the list.
            </summary>
      <param name="item">The object to remove from the list.</param>
      <returns>
        <c>true</c> if item was successfully removed from the list; otherwise, <c>false</c>. 
                This method also returns <c>false</c> if item is not found in the original list.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.GetEnumerator">
      <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.CreateWritableClone">
      <summary>Creates a writable clone of this object.</summary>
      <returns>A clone of this object that is writable.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>Creates a writable clone of this object.</summary>
      <returns>A clone of this object that is writable.</returns>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionCollection.IsReadOnly">
      <summary>Gets a value indicating if current instance is read-only.</summary>
      <value>
        <c>true</c> if this instance is read-only; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.MakeReadOnly">
      <summary>Makes the current instance and all it's properties read-only.</summary>
      <remarks>After calling this method the <see cref="P:EPiServer.DataAbstraction.PropertyDefinitionCollection.IsReadOnly" /> property will return <c>true</c>.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionCollection.ThrowIfReadOnly">
      <summary>Throws an exception if the current instance is read-only.</summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.PropertyDefinitionFields">
      <summary>
            Fields on a property definition.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.None">
      <summary>
            No fields.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.Type">
      <summary>
            The property definition type.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.Name">
      <summary>
            The name of the property definition.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.PropertySettingsControl">
      <summary>
            The property settings control for the property definition.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.DefaultValue">
      <summary>
            The default value setting.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.Required">
      <summary>
            The required setting.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.Searchable">
      <summary>
            The searchable setting.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.LanguageSpecific">
      <summary>
            The language specific setting.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.DisplayEditUI">
      <summary>
            The display in edit mode setting.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.EditCaption">
      <summary>
            The edit caption.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.HelpText">
      <summary>
            The help text.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.Tab">
      <summary>
            The tab definition the property definition resides on.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.FieldOrder">
      <summary>
            The field order
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.PropertyDefinitionFields.All">
      <summary>
            All fields.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.PropertyDefinitionRepository">
      <summary>
            Repository for the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> data structure.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.PropertyDefinitionRepository.PropertyDefinitionDeleted">
      <summary>
            Occurs when a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> has been deleted.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.PropertyDefinitionRepository.PropertyDefinitionSaved">
      <summary>
            Occurs when a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> has been saved, i.e. created or updated.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.Load(System.Int32)">
      <summary>
            Loads a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> with the specified id from the data repository.
            </summary>
      <param name="propertyDefinitionID">The Id of the definition to load.</param>
      <returns>
            The <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> that matches the given id or <c>null</c> if noone could be found.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.Save(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Saves the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> to the data repository.
            </summary>
      <param name="propertyDefinition">The property definition to save.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.Save(EPiServer.DataAbstraction.PropertyDefinition,System.Boolean)">
      <summary>
            Saves the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> to the data repository.
            </summary>
      <param name="propertyDefinition">The property definition to save.</param>
      <param name="forceCacheClear">Flag to determine if cache should be cleared regardless if anything is changed.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.Delete(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Deletes a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> from the data repository.
            </summary>
      <param name="propertyDefinition">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> to delete.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.List(System.Int32)">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s in the data repository for a specific page type id.
            </summary>
      <param name="pageTypeID">The page type id.</param>
      <returns>
            Enumeration of <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s on specified page type.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.ListDynamic">
      <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s in the data repository that are dynamic properties.
            </summary>
      <returns>
            A list of <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />s that are dynamic properties.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.OnPropertyDefinitionSaved(System.EventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.DataAbstraction.PropertyDefinitionRepository.PropertyDefinitionSaved" /> event.
            </summary>
      <param name="args">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.OnPropertyDefinitionDeleted(System.EventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.DataAbstraction.PropertyDefinitionRepository.PropertyDefinitionDeleted" /> event.
            </summary>
      <param name="args">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.GetUsage(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Retrieves information about the usage of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </summary>
      <param name="propertyDefinitionID">The property definition ID.</param>
      <param name="onlyLanguageSpecific">if set to <c>true</c> only language specific usage is retrieved.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions will be checked.</param>
      <param name="isDynamic">if set to <c>true</c> only dynamic properties will be considered.</param>
      <returns>
            List of <see cref="T:EPiServer.DataAbstraction.ContentUsage" /> which contains information on what content uses
            the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.CheckUsage(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Checks the usage.
            </summary>
      <param name="propertyDefinitionID">The property definition ID.</param>
      <param name="onlyLanguageSpecific">if set to <c>true</c> [only language specific].</param>
      <param name="onlyPublished">if set to <c>true</c> [only published].</param>
      <param name="isDynamic">if set to <c>true</c> [is dynamic].</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionRepository.ExistsPropertyDefinitionWithContentType(System.Guid)">
      <summary>
            Determines whether there is any property definition of the specified content type.
            </summary>
      <param name="contentTypeID">The content type ID.</param>
      <remarks>
            An example would be if there is a page type that has a property definition of a block with the specified id (contentTypeID)
            </remarks>
      <returns>
        <c>true</c> if there is a property definition of the specified type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.PropertyDefinitionType">
      <summary>
            Read and save property definition types, used by property definitions to
            specify which type that handles a specific property.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionType.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionType.#ctor(System.Int32,EPiServer.Core.PropertyDataType,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> class and sets some default properties.
            </summary>
      <param name="id">The unique identifier of type.</param>
      <param name="type">The actual data type used by this type</param>
      <param name="name">The name of the data type</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionType.#ctor(System.Int32,EPiServer.Core.PropertyDataType,System.String,System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> class and sets some default properties.
            </summary>
      <param name="id">The unique identifier of type.</param>
      <param name="type">The actual data type used by this type</param>
      <param name="name">The name of the data type</param>
      <param name="typeName">The full class name used to create a instance of this type</param>
      <param name="assemblyName">The assembly used to create a instance of this type</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionType.ID">
      <summary>
            The unique identifier of type
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionType.GUID">
      <summary>
            Gets or sets the optional globally unique identifier for this property definition type instance.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionType.DataType">
      <summary>
            The actual data type used by this type
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionType.Name">
      <summary>
            The name of the data type
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionType.LocalizedName">
      <summary>
            The localized name of the data type
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionType.TypeName">
      <summary>
            The full class name used to create a instance of this type
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionType.AssemblyName">
      <summary>
            The assembly used to create a instance of this type
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionType.DefinitionType">
      <summary>
            Gets the <see cref="T:System.Type" /> for the definition type.
            </summary>
      <value>The definition type.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionType.LocalizationService">
      <summary>
            Gets or sets the localization service that should be used by this instance.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PropertyDefinitionType.ContentTypeRepository">
      <summary>
            Gets or sets the content type repository that should be used by this instance.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionType.IsSystemType">
      <summary>
            Determines whether this page definition type is a built in system type.
            </summary>
      <returns>
        <c>true</c> if this page definition type is a built in system type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PropertyDefinitionType.ResolvePropertyDataType(EPiServer.Core.PropertyDataType)">
      <summary>
            Resolves the given <see cref="T:EPiServer.Core.PropertyDataType" /> to a <see cref="T:System.Type" />.
            </summary>
      <param name="dataType">The data type to resolve into a Type.</param>
      <returns>
            A <see cref="T:System.Type" /> that matches the provided type.
            </returns>
      <remarks>
            If the <paramref name="dataType" /> is a <see cref="F:EPiServer.Core.PropertyDataType.Block" /> a 
            property with an untyped <see cref="T:EPiServer.Core.BlockData" /> will be returned.
            </remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.ReferenceInformation">
      <summary>
            Represents a Content reference including language.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ReferenceInformation.OwnerID">
      <summary>
            Gets or sets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ReferenceInformation.OwnerName">
      <summary>
            Gets or sets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ReferenceInformation.OwnerLanguage">
      <summary>
            Gets or sets the language branch for the page in use.
            </summary>
      <value>
            The language branch.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ReferenceInformation.ReferencedID">
      <summary>
            Gets or sets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ReferenceInformation.ReferencedName">
      <summary>
            Gets or sets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ReferenceInformation.ReferencedLanguage">
      <summary>
            Gets or sets the language branch for the page in use.
            </summary>
      <value>
            The language branch.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.ReferenceInformation.ReferenceType">
      <summary>
            Gets or sets the type of the reference.
            </summary>
      <value>
            The type of the reference.
            </value>
    </member>
    <member name="M:EPiServer.DataAbstraction.ReferenceInformation.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ReferenceInformation.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ReferenceInformation.CreateReferenceInformation(System.Data.DataTable,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Web.IPermanentLinkMapper)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ReferenceInformation" /> class.
            </summary>
      <param name="data">The data.</param>
      <param name="languageBranchRepository">The language branch repository.</param>
      <param name="permanentLinkMapper">The permanent link mapper.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RepositoryEventArgs">
      <summary>
            Provides data for an event raised from a repository.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RepositoryEventArgs.#ctor(System.Int32,EPiServer.DataAbstraction.RepositoryEventType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RepositoryEventArgs" /> class.
            </summary>
      <param name="id">The id of the item affected by the event.</param>
      <param name="eventType">Type of the event that is being raised.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.RepositoryEventArgs.ID">
      <summary>
            Gets the ID of the item affected by the repository event.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RepositoryEventArgs.EventType">
      <summary>
            Gets the type of the event that was raised.
            </summary>
      <value>
            The type of the event.
            </value>
    </member>
    <member name="T:EPiServer.DataAbstraction.RepositoryEventType">
      <summary>
            Contains flags that determine the source of a repository event.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor">
      <summary>
            The ModelTypeInterceptor class implements <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor" /> interface. 
            This class is a runtime proxy which intercept interceptable properties (AutoGenerate, public, virtual and contains both getter and setter accessor)
            </summary>
      <remarks>When used with model types this class is scoped singleton per model type for performance reasons</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor.#ctor(EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor" /> class.
            </summary>
      <param name="contentDataInterceptorHandler">The content data interceptor handler.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
      <summary>
            Intercepts the specified invocation.
            </summary>
      <param name="invocation">The invocation.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor.HandleGetterAccessor(Castle.DynamicProxy.IInvocation,EPiServer.Core.PropertyData)">
      <summary>
            Handles the getter accessor.
            </summary>
      <param name="invocation">The invocation.</param>
      <param name="propertyData">The property data.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor.HandleSetterAccessor(Castle.DynamicProxy.IInvocation,EPiServer.Core.PropertyData)">
      <summary>
            Handles the setter accessor.
            </summary>
      <param name="invocation">The invocation.</param>
      <param name="propertyData">The property data.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler">
      <summary>
            This class is a concrete implementation of <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler" />
            which uses the the Castle.Windsor.WindsorContainer to register runtime proxy for the model types.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.#ctor(EPiServer.Construction.ConstructorParameterResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler" /> class.
            </summary>
      <param name="constructorResolver">The constructor resolver.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.#ctor(Castle.Windsor.IWindsorContainer,EPiServer.Construction.ConstructorParameterResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler" /> class.
            </summary>
      <param name="container">The container which implements the Castle.Windsor.IWindsorContainer interface.</param>
      <param name="constructorResolver">The constructor resolver.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.RegisterInterceptor(System.Collections.Generic.IEnumerable{System.Type},EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor)">
      <summary>
            Registers an interceptor for a collection of <see cref="T:System.Type" />.
            </summary>
      <param name="modelTypes">The model types.</param>
      <param name="interceptor">The interceptor.</param>
      <remarks>Interceptors are scoped as singleton per modeltype for performance reasons</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.RegisterInterceptor(System.Type,EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor)">
      <summary>
            Registers an interceptor for a specific <see cref="T:System.Type" />.
            </summary>
      <param name="modelType">Type of the model.</param>
      <param name="interceptor">The interceptor.</param>
      <remarks>Interceptors are scoped as singleton per modeltype for performance reasons</remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.ContentDataActivator">
      <summary>
            Gets an instance of <see cref="T:EPiServer.DataAbstraction.RuntimeModel.IContentDataActivator" />.
            </summary>
      <returns>An instance of <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor" />.</returns>
      <remarks>The <see cref="T:EPiServer.DataAbstraction.RuntimeModel.IContentDataActivator" /> uses the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor" /> registered to instansiate <see cref="T:EPiServer.Core.ContentData" /> objects.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.GetContentDataActivator">
      <summary>
            Gets the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.IContentDataActivator" /> registered in the current <see cref="T:EPiServer.ServiceLocation.ServiceLocator" />.
            </summary>
      <returns>The current <see cref="T:EPiServer.DataAbstraction.RuntimeModel.IContentDataActivator" />.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.RegisterPropertyInterceptor">
      <summary>
            Registers the property interceptor.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.SetPropertyInterceptor(System.Type,EPiServer.DataAbstraction.RuntimeModel.IPropertyDataInterceptor)">
      <summary>
            Sets the property interceptor.
            </summary>
      <param name="propertyType">Type of the property.</param>
      <param name="propertyInterceptor">The property interceptor.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.GetPropertyInterceptor(System.Type)">
      <summary>
            Tries the get property interceptor.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.RegisterDefaultPropertyAccessor">
      <summary>
            Registers the default property accessor.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler.For``1">
      <summary>
            Registers a custom accessor for a <see cref="T:EPiServer.Core.PropertyData" /> type.
            </summary>
      <typeparam name="TPropertyData">The type of the property data.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension">
      <summary>
            Class that can be subclassed to add logis during content scanning/registration
            </summary>
      <remarks>
            To be part of synchronization/scanning subclass should be registered in IOC container with ServiceConfiguration attribute.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension.ModelScanner">
      <summary>
            Gets or sets the model scanner.
            </summary>
      <remarks>This is set in runtime to the executing scanner.</remarks>
      <value>The model scanner.</value>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension.ResolveDependentContentTypes(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>
            Should return other content types that specified content type is dependent on.
            The returned list should be ordered so deepest dependency is returned first.
            </summary>
      <param name="model">The model to examine</param>
      <returns>An ordered list of dependencies</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension.AssignValuesToModel(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>
            Override to assign valuse to model before it is registered as <see cref="T:EPiServer.DataAbstraction.ContentType" /></summary>
      <param name="typeModel">The type model.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension.AssignValuesFromModel(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>
            Override to modify the values added by default.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="contentModel">The content model.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension.Validate(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel})">
      <summary>
            Override to add custom validation.
            </summary>
      <param name="typeModels">The type models.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension.AssignAvailableTypes(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>
            Override to assigns available types to availiable type service.
            </summary>
      <param name="contentypeModel">The contentype model.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension.AssignValuesToProperties(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>
            Override to modify the properties model done by default assigner.
            </summary>
      <param name="contentTypeModel">The content type model.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension.ShouldIgnoreProperty(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel,System.Reflection.PropertyInfo)">
      <summary>
            Override to determine if a backing property <see cref="T:EPiServer.Core.PropertyData" /> should be created for .net property.
            </summary>
      <param name="contentTypeModel">The content type model.</param>
      <param name="property">The property.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel">
      <summary>
            Model object for a <see cref="T:EPiServer.DataAbstraction.ContentType" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.AvailableInEditMode">
      <summary>
            Gets or sets an indication if this page type should be available for editors in edit mode.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.ModelType">
      <summary>
            Gets or sets the type of content data this model represents. Must derive from <see cref="T:EPiServer.Core.ContentData" /></summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.Guid">
      <summary>
            Gets or sets the guid that identifies the content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.Name">
      <summary>
            Gets or sets the name of this content type. Should not be updated by a user.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.DisplayName">
      <summary>
            Gets or sets the display name of this content type. This is the name that will appear in any UI.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.Base">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Gets or sets the base of content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.Description">
      <summary>
            Gets or sets the description of this content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.Order">
      <summary>
            Gets or sets the sort order of this content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.GroupName">
      <summary>
            Gets or sets the group name of this content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.ExistingContentType">
      <summary>
            Gets or sets the existing content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.PropertyDefinitionModels">
      <summary>
            Gets or sets a map of property definitions, MainBody would be one example, for this content type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.ACL">
      <summary>
            Gets or sets access rights.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.AvailableContentTypes">
      <summary>
            Gets or sets the available page types attribute.
            </summary>
      <value>The available page types.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.State">
      <summary>
            Gets the state of the Model corresponding to the matching <see cref="T:EPiServer.Core.ContentData" /></summary>
      <value>The state.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.Attributes">
      <summary>
            Gets the attributes on the model.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.IsInSynch(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Determines whether this model instance is in synch with given <see cref="T:EPiServer.DataAbstraction.ContentType" /></summary>
      <param name="contentType">The <see cref="T:EPiServer.DataAbstraction.ContentType" /> to compare against.</param>
      <returns>
        <c>true</c> if the model and the <see cref="T:EPiServer.DataAbstraction.ContentType" /> is in synch; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository">
      <summary>
            Defines the signature for a component that acts as repository for available page types settings defined on models.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository.RegisterSetting(System.Type,EPiServer.DataAbstraction.RuntimeModel.IContentTypeAvailableModelSetting)">
      <summary>
            Sets available page types settings for a model that corresponds to a <see cref="T:EPiServer.DataAbstraction.PageType" />.
            </summary>
      <param name="model">The model.</param>
      <param name="modelSetting">The model setting.</param>
      <remarks>
            The runtime settings on <see cref="T:EPiServer.DataAbstraction.ContentTypeAvailabilityService" /> will be the merged result from settings specified on the content type and on the model.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository.GetSetting(System.Type)">
      <summary>
            Gets the available page types settings registered for a model as it was registered.
            </summary>
      <param name="model">The model.</param>
      <returns>
      </returns>
      <remarks>
            The runtime settings on <see cref="T:EPiServer.DataAbstraction.ContentTypeAvailabilityService" /> will be the merged result from settings specified on the content type and on the model.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository.GetRuntimeSetting(System.Type)">
      <summary>
            Gets the available page types settings registered for a model as the result when possible several models have been registered.
            </summary>
      <param name="model">The model.</param>
      <returns>
      </returns>
    </member>
    <member name="E:EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository.SettingsChanged">
      <summary>
            Occurs when a setting has been changed.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository.ListRuntimeSettings">
      <summary>
            Lists all registered model settings.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IContentDataActivator">
      <summary>
            Describes the methods needed to resolve a <see cref="T:EPiServer.Core.IContentData" /> type from a type parameter. 
            </summary>
      <remarks>
            This interface is used by <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler" />.
            </remarks>
      <example>
            The following code example demonstrates how to implement IModelTypeResolver. 
            <code source="../CodeSamples/EPiServer/DataAbstraction/AutoMapping/LoggableModelTypeResolver.cs" region="TypeResolver" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentDataActivator.Create``1">
      <summary>
            Resolves a <see cref="T:EPiServer.Core.ContentData" /> instance from the specified type T passed to this instance.
            </summary>
      <typeparam name="T">Type of <see cref="T:EPiServer.Core.IContentData" /> that should be resolved.</typeparam>
      <returns>A new instance of type <typeparamref name="T" />.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentDataActivator.Create(System.Type)">
      <summary>
            Resolves a <see cref="T:EPiServer.Core.IContentData" /> instance from the specified model type.
            </summary>
      <param name="modelType">Type of <see cref="T:EPiServer.Core.IContentData" /> that should be resolved.</param>
      <returns>A new instance of the specified type.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IContentTypeAvailableModelSetting">
      <summary>
            Defines the signature for a component that is used to hold available page types settings for a model.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.IContentTypeAvailableModelSetting.Availability">
      <summary>
            Gets wether none <see cref="T:EPiServer.DataAbstraction.PageType" /> should be available to create under the <see cref="T:EPiServer.DataAbstraction.PageType" /> that has this attribute set.
            </summary>
      <value>
        <c>true</c> if no <see cref="T:EPiServer.DataAbstraction.PageType" /> is available; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.IContentTypeAvailableModelSetting.Exclude">
      <summary>
            Gets the typed pages that are not available under an instance of a page of corresponding <see cref="T:EPiServer.DataAbstraction.PageType" />.
            </summary>
      <value>The available page types.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.IContentTypeAvailableModelSetting.ExcludeOn">
      <summary>
            Will exclude the typed page from the list of available <see cref="T:EPiServer.DataAbstraction.PageType" /> for the specified typed pages.
            </summary>
      <value>The available page types.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.IContentTypeAvailableModelSetting.Include">
      <summary>
            Gets the typed pages that are available under an instance of a page of corresponding <see cref="T:EPiServer.DataAbstraction.PageType" />.
            </summary>
      <value>The available page types.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.IContentTypeAvailableModelSetting.IncludeOn">
      <summary>
            Will make the typed page available as child under the specified typed pages.
            </summary>
      <value>The available page types.</value>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseProvider">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Interface for content type base. 
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseProvider.ContentTypeBases">
      <summary>
            Supported content type bases.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseProvider.Resolve(EPiServer.DataAbstraction.ContentTypeBase)">
      <summary>
            Resolve type from content type base.
            </summary>
      <param name="contentTypeBase">The content type base.</param>
      <returns>Returns the model type that handles the content type base.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseResolver">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Interface for registering content type base 
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseResolver.Resolve(System.Type)">
      <summary>
            Resolve content type base from type.
            </summary>
      <param name="Type">The type.</param>
      <returns>Returns content type base if it exists for the type otherwise null.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseResolver.Resolve(EPiServer.DataAbstraction.ContentTypeBase)">
      <summary>
            Resolve type from content type base.
            </summary>
      <param name="contentTypeBase">The content type base.</param>
      <returns>Returns type if it exists for the content type base otherwise null.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelAssigner">
      <summary>
            Assign values to a <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelAssigner.AssignValues(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>
            Assigns values to <paramref name="contentTypeModel" />.
            </summary>
      <param name="contentTypeModel">The content type model, which will be populated with values.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelAssigner.AssignValuesToPropertyDefinition(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,System.Reflection.PropertyInfo,EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>
            Assigns values to <paramref name="propertyDefinitionModel" /> from attributes defined on <paramref name="property" /></summary>
      <param name="propertyDefinitionModel">The property definition model, which will be populated with values.</param>
      <param name="property">The property to use when scanning for attributes.</param>
      <param name="parentModel">The content type model, in which the property contains.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelFilter">
      <summary>
            Filter the models to register.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelRegistrator">
      <summary>
            Component that will register a list of content type models
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelRegistrator.RegisterTypes(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel},System.Boolean,System.Boolean)">
      <summary>
            Analyzes all models and registers the content types and their property definitions.
            </summary>
      <param name="typeModels">List of all content type models that should be registered.</param>
      <param name="deleteUnusedContentTypes">If set to <c>true</c> any content types that are no longer used are deleted.</param>
      <param name="deleteUnusedPropertyDefinitions">If set to <c>true</c> any property definitions on that are no longer used are removed from the content type.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelScanner.RegisterModels">
      <summary>
            Registers the models.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelScanner.Sync(System.Boolean)">
      <summary>
            Creates <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" />s from the relevant types stored in the IScannedTypeRepository.
            </summary>
      <param name="forceCommit">if set to <c>true</c> then stores in repository.</param>
      <returns>
            A list of started tasks.
            </returns>
      <remarks>
            The registration is complete when all returned task are completed.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelScanner.ContentTypes">
      <summary>
            Gets content types in the system.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelScanner.GetProperties(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>
            Gets properties on the <paramref name="modelType" />.
            </summary>
      <param name="modelType">The model to get properties from.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelScannerEvents">
      <summary>
            Specifies events for ContentTypeModelScanner
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelScannerEvents.SynchronizationStarted">
      <summary>
            Occurs when a content types synchronization is started.
            </summary>
    </member>
    <member name="E:EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelScannerEvents.SynchronizationCompleted">
      <summary>
            Occurs when a content types synchronization is completed.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.AvailableModelSettingsRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.AvailableModelSettingsRepository.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IContentTypeRepository})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.AvailableModelSettingsRepository" /> class.
            </summary>
      <param name="contentTypeRepository">The content type repository.</param>
      <exclude />
    </member>
    <member name="E:EPiServer.DataAbstraction.RuntimeModel.Internal.AvailableModelSettingsRepository.SettingsChanged">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when a setting has been changed.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.AvailableModelSettingsRepository.RegisterSetting(System.Type,EPiServer.DataAbstraction.RuntimeModel.IContentTypeAvailableModelSetting)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets available page types settings for a model that corresponds to a <see cref="T:EPiServer.DataAbstraction.PageType" />.
            </summary>
      <param name="model">The model.</param>
      <param name="modelSetting">The model setting.</param>
      <remarks>
            The runtime settings on <see cref="T:EPiServer.DataAbstraction.ContentTypeAvailabilityService" /> will be the merged result from settings specified on the content type and on the model.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.AvailableModelSettingsRepository.GetSetting(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the available page types settings registered for a model as it was registered.
            </summary>
      <param name="model">The model.</param>
      <returns>
      </returns>
      <remarks>
            The runtime settings on <see cref="T:EPiServer.DataAbstraction.ContentTypeAvailabilityService" /> will be the merged result from settings specified on the content type and on the model.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.AvailableModelSettingsRepository.GetRuntimeSetting(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the available page types settings registered for a model as the result when possible several models have been registered.
            </summary>
      <param name="model">The model.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.AvailableModelSettingsRepository.ListRuntimeSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all registered model settings.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.BlockScannerExtension">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extends content registration with block specific extensions.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.BlockScannerExtension.#ctor(EPiServer.DataAbstraction.ITypeReferenceAnalyzer)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.BlockScannerExtension" /> class.
            </summary>
      <param name="circularReferenceValidator">The circular reference validator.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.BlockScannerExtension.ResolveDependentContentTypes(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.BlockScannerExtension.Validate(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Override to add custom validation.
            </summary>
      <param name="typeModels">The type models.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentDataActivator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Concrete implementation of <see cref="T:EPiServer.DataAbstraction.RuntimeModel.IContentDataActivator" /> which uses IWindsorContainer to resolve runtime proxy for the model types.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentDataActivator.#ctor(Castle.Windsor.IWindsorContainer,EPiServer.Construction.ConstructorParameterResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentDataActivator" /> class.
            </summary>
      <param name="container">The container.</param>
      <param name="constructorResolver">The constructor resolver.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentDataActivator.Create``1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolve the runtime proxy. If there is no runtime proxy for the model type then it returns null.
            </summary>
      <typeparam name="T">Type of <see cref="T:EPiServer.Core.ContentData" /> to resolve.</typeparam>
      <returns>Returns the runtime proxy from WindsorContainer if the T can be resolved otherwise returns null.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentDataActivator.Create(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolve the runtime proxy. If there is no runtime proxy for the model type then it returns null.
            </summary>
      <param name="contentDataType">Type of <see cref="T:EPiServer.Core.IContentData" /> to resolve.</param>
      <returns>
            Returns the runtime proxy from WindsorContainer if the contentDataType can be resolved otherwise returns null.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Thrown if the provided type does not inherit from IContentData.</exception>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentDataAttributeScanningAssigner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Scans attributes on a <see cref="T:EPiServer.Core.ContentData" /> type, and it's properties to assign values to an <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" /> instence, and it's properties.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentDataAttributeScanningAssigner.AssignValues(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Assigns values to <paramref name="contentTypeModel" /> from attributes defined on <see cref="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.ModelType" /></summary>
      <param name="contentTypeModel">The content type model, which will be populated with values.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentDataAttributeScanningAssigner.AssignValuesToPropertyDefinition(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,System.Reflection.PropertyInfo,EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Assigns values to <paramref name="propertyDefinitionModel" /> from attributes defined on <paramref name="property" /></summary>
      <param name="propertyDefinitionModel">The property definition model, which will be populated with values.</param>
      <param name="property">The property to use when scanning for attributes.</param>
      <param name="parentModel">The content type model, in which the property contains.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentDataInterceptorHook">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Makes sure the proxy does not override methods that should not be proxied, for perf reasons
            </summary>
      <remarks>
            Pure function, is a function that for given set of inputs always returns the same output. In case of proxy generation hook, it means that two equal (as specified by overridden Equals/GetHashCode methods) proxy generation hooks will for given type to proxy return the same values from their methods, and when asked again about the same type will again return the same values/throw the same exceptions.
            http://docs.castleproject.org/Tools.Make-proxy-generation-hooks-purely-functional.ashx
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentMixin">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that implements IContent interfaces and is used as a mixin component when creating IContent proxies 
            for types that implements <see cref="T:EPiServer.Core.IContentData" /> but not <see cref="T:EPiServer.Core.IContent" />.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentMixin.MixinInstance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the mixin instance.
            </summary>
      <value>The mixin instance.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelOptions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Contains various options that can be used to configure how the content model should be handled during synchronization.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelOptions.EnableModelSyncCommit">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set to false to disable the commit phase when synchronizing typed models. Content types will not be updated automatically.
            </summary>
      <remarks>The default value is true</remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelOptions.EnableSemanticVersioning">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set to true to enable semantic versioning of models.
            </summary>
      <remarks>The default value is false</remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelOptions.AlwaysUseModelName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies if the Model name of the class always should be the name of the content type
            </summary>
      <remarks>The default value is false</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates a model derived by <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelValidator.#ctor(EPiServer.DataAbstraction.IContentTypeRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelValidator" /> class.
            </summary>
      <param name="typeRepository">The content type repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelValidator.Validate(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified content type models.
            </summary>
      <param name="typeModels">The type models.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelValidator.ThrowSynchronizationException(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Throws a synchronization exception.
            </summary>
      <param name="msg">The error message.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeAvailableModelSetting">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Holds the runtime settings for available page types for a model.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeAvailableModelSetting.Include">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The runtime merged result of Included types.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeAvailableModelSetting.IncludeOn">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The runtime merged result of IncludedOn types.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeAvailableModelSetting.ExcludeOn">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The runtime merged result of IncludedOn types.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeAvailableModelSetting.Exclude">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The runtime merged result of Excluded types.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeAvailableModelSetting.Availability">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets wether none <see cref="T:EPiServer.DataAbstraction.PageType" /> should be available to create under the <see cref="T:EPiServer.DataAbstraction.PageType" /> that has this attribute set.
            </summary>
      <value>
        <c>true</c> if no <see cref="T:EPiServer.DataAbstraction.PageType" /> is available; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Synchronizes <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" />s defined in code with <see cref="T:EPiServer.DataAbstraction.ContentType" />s stored in the repository.
            </summary>
      <remarks>
                Model synchronization is automatically performed by this class at site initialization. Please see the examples section 
                for instructions on how you can manually synchronize a content model. 
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister.#ctor(EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer,EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer,EPiServer.IContentLoader,EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister" /> class.
            </summary>
      <param name="typeSynchronizer">The type synchronizer that should be used by this instance.</param>
      <param name="propertyDefinitionSynchronizer">The property definition synchronizer that should be used by this instance.</param>
      <param name="contentLoader">The content loader.</param>
      <param name="contentModelOptions">The content model options.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister.RunSynchronously">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. If methods should run without parallellism
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister.TypeModels">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the type models that will be used in the Analyze and Commit operations.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister.AnalyzeTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the type models properties that will be used in the Analyze of type models properties
            </summary>
      <summary>Compares the models in <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" /> to the ContentTypes in the repository.</summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister.AnalyzeProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Compares the model's properties to the repository ones
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister.CommitTypes(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Commits any changes detected in the Analyze operation to the repository.
            </summary>
      <param name="deleteUnusedTypes">if set to <c>true</c> any types that are no longer used are deleted.</param>
      <exception cref="T:EPiServer.DataAbstraction.AlreadyInUseException">
            A definition without an ID, and with a name that already existing definition, tries to be saved.
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister.CommitProperties(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Commits the type models' properties changes detected in the Analyze operation to the repository.
            </summary>
      <param name="deleteUnusedTypes">if set to <c>true</c> any types that are no longer used are deleted.</param>
      <exception cref="T:EPiServer.DataAbstraction.AlreadyInUseException">
            A definition without an ID, and with a name that already existing definition, tries to be saved.
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister.Validate(EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelValidator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The Validate method checks the contenttypemodels guid and its modeltype.
            If the guid for the contenttypemodel is not assigned or is empty then it passes validation.
            If two contenttypes has same guid with different modeltype then SynchronizationException be thrown
            the validation checks on both contenttypemodels in memory and against repository.
            </summary>
      <exception cref="T:EPiServer.DataAbstraction.RuntimeModel.SynchronizationException">
            If two or more contenttypes has same guid with different modeltype then SynchronizationException be thrown.
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister.EnsureContentTypeVersionUpToDate">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Ensures that if there was changes to a content type or its properties, then the assembly version must be updated to reflect which code version that was used to update the database.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister.EPiServer#DataAbstraction#RuntimeModel#IContentTypeModelRegistrator#RegisterTypes(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel},System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister" /> and feeds it the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" />s stored in the IScannedTypeRepository.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.#ctor(EPiServer.Framework.TypeScanner.ITypeScannerLookup,EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister,EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelValidator,EPiServer.DataAbstraction.ContentTypeModelRepository,EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelAssigner,EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptorHandler,EPiServer.DataAbstraction.RuntimeModel.ContentDataInterceptor,System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelFilter},System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension},EPiServer.DataAbstraction.RuntimeModel.IAvailableModelSettingsRepository,EPiServer.DataAbstraction.RuntimeModel.Internal.IContentTypeModelScannerEventsRaiser)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.IgnoredTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the types that are ignored during scanning.
            </summary>
      <remarks>
            By default this is system types like <see cref="T:EPiServer.Core.PageData" /> and <see cref="T:EPiServer.Core.BlockData" /></remarks>
      <value>The ignored types.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.RunSynchronously">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. If methods should run without parallellism
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.RegisterModels">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers the models with the repositories.
            </summary>
      <remarks>
            The registration is complete when all returned task are completed.
            </remarks>
      <returns>A list of started tasks.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.Sync(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" />s from the relevant types stored in the IScannedTypeRepository and passes them to the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelRegister" />.
            </summary>
      <param name="commitChanges">if set to <c>true</c> then stores in repository.</param>
      <returns>A list of started tasks.</returns>
      <remarks>
            The registration is complete when all returned task are completed.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.ContentTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets content types in the system.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.GetProperties(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets properties on the <paramref name="modelType" />.
            </summary>
      <param name="modelType">The model to get properties from.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.AddModel(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a model with the specified type.
            </summary>
      <param name="type">The type.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.EagerCompileProxies">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a task that compiles proxies for all types that has automatic getters/setters.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.CreateModel(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a model.
            </summary>
      <param name="type">The type to create the model from.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.AssignValuesToModel(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a type model and adds it to the collection of types.
            </summary>
      <param name="typeModel">The type model.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.AssignAvailableTypes(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Register settings for which types that should be available under a specific type.
            </summary>
      <param name="typeModel">The type model.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.AssignValuesToProperties(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Assigns values to <paramref name="modelType" />.
            </summary>
      <param name="modelType">Type of the model.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.Register(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers the specified type model.
            </summary>
      <param name="typeModel">The type model.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeModelScanner.DeleteUnusedContentTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether unused content types should be deleted
            </summary>
      <remarks>
            returns true.
            </remarks>
      <value>
        <c>true</c> if unused content types should be deleted; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles synchronization between <see cref="T:EPiServer.DataAbstraction.ContentType" /> and <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer" /> class.
            </summary>
      <remarks>This constructor is available to make the class mockable in tests.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer.#ctor(EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Core.IContentModelUsage,EPiServer.DataAbstraction.Migration.MigrationStepRepository,System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.ContentScannerExtension},EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer" /> class.
            </summary>
      <param name="propertyDefinitionSynchronizer">The property definition synchronizer.</param>
      <param name="contentTypeRepository">The content type repository.</param>
      <param name="contentModelUsage">The content model usage.</param>
      <param name="migrationStepRepository">The migration step repository.</param>
      <param name="registerExtensions">The register extensions.</param>
      <param name="contentTypeBaseResolver">The content type base resolver</param>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer.ContentTypeRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content type repository.
            </summary>
      <value>The content type repository.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer.CreateType(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new <see cref="T:EPiServer.DataAbstraction.ContentType" /> from a model.
            </summary>
      <param name="contentModel">The content model.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer.AssignValuesFromModel(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Assigns values from a model.
            </summary>
      <param name="contentType">Type content type, which will be populatetd with values.</param>
      <param name="contentModel">The content model to get values from.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer.UpdateType(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Updates a <see cref="T:EPiServer.DataAbstraction.ContentType" /> from the model.
            </summary>
      <param name="model">The content type model.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer.ListUnusedTypes(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists the <see cref="T:EPiServer.DataAbstraction.ContentType" /> generated from models that are registered in database but does not have a corresponding model anymore.
            </summary>
      <param name="typeModels">The content type models.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer.GetType(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a <see cref="T:EPiServer.DataAbstraction.ContentType" /> that corresponds to a model.
            </summary>
      <param name="contentTypeModel">The content type model.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ContentTypeSynchronizer.Delete(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the specified content type.
            </summary>
      <param name="contentType">Type of the content.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.CultureSpecificValues">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Values representing the different ways the a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> can be marked as culture specific.
            </summary>
      <remarks>
        <para>This is needed because the the column LanguageSpecific in tblPageDefinition cannot be <c>null</c>.</para>
        <para>It is now stored as an int in the database that matches these values.</para>
      </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.CustomContentScannerExtension">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implemenation that will remove all properties that are part of metadata interfaces such as e.g. <see cref="T:EPiServer.Core.IContent" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.CustomContentScannerExtension.ShouldIgnoreProperty(EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel,System.Reflection.PropertyInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Override to determine if a backing property <see cref="T:EPiServer.Core.PropertyData" /> should be created for .net property.
            </summary>
      <param name="contentTypeModel">The content type model.</param>
      <param name="property">The property.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.DefaultContentTypeBaseProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.DataAbstraction.RuntimeModel.Internal.DefaultContentTypeBaseProvider._contentTypeBases">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Supported content type bases.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.GroupDefinitionScanner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class collects all types that marked with <see cref="T:EPiServer.DataAnnotations.GroupDefinitionsAttribute" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.GroupDefinitionScanner.#ctor(EPiServer.Framework.TypeScanner.ITypeScannerLookup,EPiServer.DataAbstraction.GroupDefinitionRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.GroupDefinitionScanner" /> class.
            </summary>
      <param name="typeScannerLookup">The scanned type repository.</param>
      <param name="groupDefinitionRepository">The group Definition repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.GroupDefinitionScanner.Register">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Register all typed group definitions into <see cref="T:EPiServer.DataAbstraction.GroupDefinitionRepository" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.GroupDefinitionScanner.ScannedGroupDefinitions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Collects all fields that match the group definition criteria. 
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.GroupDefinitionScanner.ScannedGroupDefinitionTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a list of all types matching the basic requirements (the type has <see cref="T:EPiServer.DataAnnotations.GroupDefinitionsAttribute" />.
            </summary>
      <returns>A list of non-abstract types that decorated <see cref="T:EPiServer.DataAnnotations.GroupDefinitionsAttribute" />.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.IContentMixin">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Interface that is implemented by component that act as a mixin for <see cref="T:EPiServer.Core.IContent" />
            on a block.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.IContentMixin.MixinInstance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the mixin instance.
            </summary>
      <value>The mixin instance.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.IContentTypeModelScannerEventsRaiser">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ModelMerger">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles merging of values defined on models/code for <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> and <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ModelMerger.#ctor(EPiServer.Core.IContentModelUsage,EPiServer.DataAbstraction.RuntimeModel.Internal.ContentModelOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ModelMerger" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ModelMerger.MergePropertySettings(EPiServer.DataAbstraction.PropertyDefinition,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,EPiServer.DataAbstraction.ITabDefinitionRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Merges the model settings from <paramref name="model" /> into the version of <paramref name="propertyDefinition" />.
            </summary>
      <remarks>
            Only settings on <paramref name="propertyDefinition" /> that does not have a value will have it's value merged from <paramref name="model" />.
            </remarks>
      <param name="propertyDefinition">The property definition.</param>
      <param name="model">The model.</param>
      <param name="tabDefinitionRepository">The tab definition repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ModelMerger.RemovePropertyModelSettings(EPiServer.DataAbstraction.PropertyDefinition,EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes all values from <paramref name="propertyDefinition" /> that have values that corresponds with values on <paramref name="model" />.
            </summary>
      <param name="propertyDefinition">The property definition.</param>
      <param name="model">The model.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ModelMerger.MergeModelSettings(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Merges the model settings from <paramref name="model" /> into the version of <paramref name="contentType" />.
            </summary>
      <remarks>
            Only seetings on <paramref name="contentType" /> that does not have a value will have it's value merged from <paramref name="model" />.
            </remarks>
      <param name="contentType">Type of the content.</param>
      <param name="model">The model.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ModelMerger.RemoveModelSettings(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes all values from <paramref name="contentType" /> that have values that corresponds with values on <paramref name="model" />.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="model">The model.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles synchronization of <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> from model to database.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer" /> class.
            </summary>
      <remarks>
            This constructor is available to make the class mockable in tests.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer.#ctor(EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.DataAbstraction.ITabDefinitionRepository,EPiServer.Core.IContentModelUsage,EPiServer.DataAbstraction.IBackingTypeResolver,EPiServer.DataAbstraction.Migration.MigrationStepRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer" /> class.
            </summary>
      <param name="propertyDefinitionRepository">The property definition repository.</param>
      <param name="propertyDefinitionTypeRepository">The property definition type repository.</param>
      <param name="tabDefinitionRepository">The tab definition repository.</param>
      <param name="contentModelUsage">The page model usage.</param>
      <param name="backingTypeResolver">Resolves the base type from a specified type.</param>
      <param name="migrationStepRepository">The migration step repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer.GetDefinition(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the matching property definition from the specified property definition model and content type model.
            </summary>
      <param name="propertyDefinitionModel">The property definition model.</param>
      <param name="contentTypeModel">The content type model.</param>
      <remarks>
        <para>
          <see cref="P:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel.ExistingContentType" /> from <paramref name="contentTypeModel" /> will be used to find the correct property definition.
                </para>
        <para>
                    It will first try to get any changes from any specified <see cref="T:EPiServer.DataAbstraction.Migration.MigrationStep" /> and try to match on <see cref="P:EPiServer.DataAbstraction.Migration.PropertyChange.OldName" />.
                    If nothing is found, it will match on <see cref="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.Name" /> from <paramref name="propertyDefinitionModel" />.
                </para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer.CreatePropertyDefinition(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a page definition from a model.
            </summary>
      <param name="model">The model.</param>
      <param name="contentTypeID">The page type ID.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer.UpdatePropertyDefinition(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Updates a property definition.
            </summary>
      <param name="model">The property definition model to update to.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer.Delete(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the specified page definition.
            </summary>
      <param name="propertyDefinition">The property definition.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer.GetPagesWithPropertyDefinition(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a list of all existing contents that uses the content definition.
            </summary>
      <param name="propertyDefinition">The property definition.</param>
      <returns>
            A list of all content that uses the content definition.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer.IsPropertyDefinitionUsed(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks if there is data stored for a property definition.
            </summary>
      <param name="propertyDefinition">The property definition.</param>
      <returns>
            true if there is data stored for definition otherwise false.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer.ExistsPropertyDefinitionWithContentType(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether there is any property definition of the specified content type.
            </summary>
      <param name="contentTypeID">The content type ID.</param>
      <remarks>
            An example would be if there is a page type that has a property definition of a block with the specified id (contentTypeID)
            </remarks>
      <returns>
        <c>true</c> if there is a property definition of the specified type; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.PropertyDefinitionSynchronizer.ResolveType(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves the property definition type for the specified model.
            </summary>
      <param name="model">The model to resolve.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.SharedBlockInterceptor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Interceptor used for shared blocks.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.Internal.SharedBlockInterceptor.InterceptedMethods">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the name of the methods that the inteceptor handles.
            </summary>
      <value>
            The intercepted methods.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.SharedBlockInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Intercepts the specified invocation.
            </summary>
      <param name="invocation">The invocation.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IPropertyDataInterceptor">
      <summary>
            Used for custom property interceptor
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IPropertyDataInterceptor.GetValue(EPiServer.Core.PropertyData,System.Type)">
      <summary>
            Gets the value.
            </summary>
      <param name="propertyData">The property data.</param>
      <param name="returnType">Type of the return.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IPropertyDataInterceptor.SetValue(EPiServer.Core.PropertyData,System.Type,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="propertyData">The property data.</param>
      <param name="valueType">Type of the value.</param>
      <param name="value">The value.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IPropertyDefinitionTypeResolver">
      <summary>
            Component that can resolve the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> from it's runtime <see cref="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IPropertyDefinitionTypeResolver.ResolveType(EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel)">
      <summary>
            Resolves the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> for the specified <see cref="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel" />.
            </summary>
      <param name="model">The model to resolve the type for.</param>
      <returns>A <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /> that matches the model.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.ModelAttributeCollection">
      <summary>
            Attributes on models. This class are used by the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.ContentTypeModel" /> and <see cref="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel" /> to add the class attributes to the models.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ModelAttributeCollection.AddAttribute(System.Attribute)">
      <summary>
            Adds an attribute to the attribute list.
            </summary>
      <param name="attribute">The attribute.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ModelAttributeCollection.GetAllAttributes``1">
      <summary>
            Gets all attributes of type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The attribute type.</typeparam>
      <returns>
            All attribute of type <typeparamref name="T" />. If no attributes are found ot the type, an empty list will be returned.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ModelAttributeCollection.GetSingleAttribute``1">
      <summary>
            Gets the attribute of the type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The attribute type.</typeparam>
      <returns>
            The attribute of type <typeparamref name="T" />. If there are no attribute of the type, <c>null</c> will be returned.
            </returns>
      <exception cref="T:System.InvalidOperationException">If more than one attribute of the type <typeparamref name="T" /> are found.</exception>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ModelAttributeCollection.TryGetSingleAttribute``1(``0@)">
      <summary>
            Tries to get the attribute of the type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The attribute type.</typeparam>
      <param name="attribute">The returned attribute.</param>
      <returns>
        <c>True</c> if one, and only one, attribute was found, otherwice <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ModelAttributeCollection.AttributeExist``1">
      <summary>
            Returns <c>true</c> if the <typeparamref name="T" />. exist on the model, otherwise <c>false</c>.
            </summary>
      <typeparam name="T">The attribute type to look for.</typeparam>
      <returns>
        <c>True</c> if the attribute exist, otherwise <c>false</c>.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.PermissionTypeScanner">
      <summary>
            Scans for all types decorated with <see cref="T:EPiServer.DataAnnotations.PermissionTypesAttribute" /> and registers public static properties of type <see cref="T:EPiServer.Security.PermissionType" />
            on those against <see cref="T:EPiServer.DataAbstraction.PermissionTypeRepository" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.PermissionTypeScanner.ScanAndRegisterAsync">
      <summary>
            Returns a started task where the scanning and registration occurs.
            </summary>
      <returns>A waitable task.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDataInterceptor`1">
      <summary>
            Used to handle how values should be retrevied and written to a PropertyData type.
            </summary>
      <typeparam name="TPropertyData">
      </typeparam>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.PropertyDataInterceptor`1.Use``1(System.Func{`0,System.Object},System.Action{`0,System.Object})">
      <summary>
            Specifies which get and set accessors that should be used when accessing a <see cref="T:EPiServer.Core.PropertyData" /> type.
            </summary>
      <typeparam name="TModelValue">The type of model value that the accessors should handle.</typeparam>
      <param name="getAccessor">The get accessor.</param>
      <param name="setAccessor">The set accessor.</param>
      <returns>This instance.</returns>
      <remarks>This can be used to register several <typeparamref name="TModelValue" /> to the same type of <see cref="T:EPiServer.Core.PropertyData" />.</remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel">
      <summary>
            Represents a model of a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> generated from attributes on a property, 
            typically on a typed page.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.Name">
      <summary>
            Gets or set the name of the property on the model.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.Type">
      <summary>
            Gets or sets the type of the property on the model.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.BackingType">
      <summary>
            Gets or sets the backing type which should inherit from <see cref="T:EPiServer.Core.PropertyData" />.
            </summary>
      <value>The type of the backing <see cref="T:EPiServer.Core.PropertyData" /></value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.Order">
      <summary>
            Gets or sets the sort order for the generated <see cref="P:EPiServer.DataAbstraction.PropertyDefinition.FieldOrder" /></summary>
      <remarks>
        <para>This value is extracted from <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /></para>
        <para>If the nullable does not have a value it means that the attribute was not set.</para>
      </remarks>
      <value>The order.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.TabName">
      <summary>
            Gets or sets the name of the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> that the property will be 
            </summary>
      <remarks>This value is extracted from <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /></remarks>
      <value>The name of the tab.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.Description">
      <summary>
            Gets or sets the description for the generated <see cref="P:EPiServer.DataAbstraction.PropertyDefinition.HelpText" /></summary>
      <remarks>This value is extracted from <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /></remarks>
      <value>The description.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.DisplayName">
      <summary>
            Gets or sets the description for the generated <see cref="P:EPiServer.DataAbstraction.PropertyDefinition.EditCaption" /></summary>
      <remarks>This value is extracted from <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /></remarks>
      <value>The display name.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.CultureSpecific">
      <summary>
            Gets or sets the if the generated <see cref="P:EPiServer.DataAbstraction.PropertyDefinition.LanguageSpecific" /> should be set.
            </summary>
      <remarks>
        <para>This value is extracted from <see cref="T:EPiServer.DataAnnotations.CultureSpecificAttribute" /></para>
        <para>If the nullable does not have a value it means that the attribute was not set.</para>
      </remarks>
      <value>If <see cref="T:EPiServer.DataAbstraction.PropertyDefinition"></see> should be culture specific</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.Required">
      <summary>
            Gets or sets the if the generated <see cref="P:EPiServer.DataAbstraction.PropertyDefinition.Required" /> should be set.
            </summary>
      <remarks>
        <para>This value is extracted from <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /></para>
        <para>If the nullable does not have a value it means that the attribute was not set.</para>
      </remarks>
      <value>If <see cref="T:EPiServer.DataAbstraction.PropertyDefinition"></see> should be culture specific</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.Searchable">
      <summary>
            Gets or sets the if the generated <see cref="P:EPiServer.DataAbstraction.PropertyDefinition.Searchable" /> should be set.
            </summary>
      <remarks>
        <para>This value is extracted from <see cref="T:EPiServer.DataAnnotations.SearchableAttribute" /></para>
        <para>If the nullable does not have a value it means that the attribute was not set.</para>
      </remarks>
      <value>If property instances of <see cref="T:EPiServer.DataAbstraction.PropertyDefinition"></see> should be searchable</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.AvailableInEditMode">
      <summary>
            Gets or sets the if the generated <see cref="P:EPiServer.DataAbstraction.PropertyDefinition.DisplayEditUI" /> should be set.
            </summary>
      <remarks>
        <para>This value is extracted from <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit" /></para>
        <para>If the nullable does not have a value it means that the attribute was not set.</para>
      </remarks>
      <value>If <see cref="T:EPiServer.DataAbstraction.PropertyDefinition"></see> should be available in edit mode</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.TemplateHint">
      <summary>
            Gets or sets the template hint that will be used when resolving render.
            </summary>
      <value>The template hint.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.State">
      <summary>
            Gets the state of the Model corresponding to the matching <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /></summary>
      <value>The state.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.Attributes">
      <summary>
            Gets the attributes on the model.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.ShouldChangeType">
      <summary>
            Gets or sets a value indicating whether the property definition model should change its underlying datatype.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.PropertyDefinitionModel.IsInSynch(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Determines whether the specified property definition is in synch with this instance.
            </summary>
      <param name="propertyDefinition">The property definition.</param>
      <returns>
        <c>true</c> if the specified property definition is in synch with this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.SynchronizationException">
      <summary>
            Represents errors that occur during Content Type synchronization
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.SynchronizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.SynchronizationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.SynchronizationException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.SynchronizationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.SynchronizationException" /> class with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.SynchronizationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.SynchronizationException" /> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The inner exception that is the cause of the current exception.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.SynchronizationStatus">
      <summary>
            Specifies the state after comparison between previously stored settings for an entity and current entity.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.RuntimeModel.SynchronizationStatus.NotAnalyzed">
      <summary>
            The comparison has not yet been performed.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.RuntimeModel.SynchronizationStatus.New">
      <summary>
            The setting for the entity has not been stored previously.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.RuntimeModel.SynchronizationStatus.Deleted">
      <summary>
            There is no entity with stored settings.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.RuntimeModel.SynchronizationStatus.InSynch">
      <summary>
            The stored entity settings is the same as the current entity.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.RuntimeModel.SynchronizationStatus.Conflict">
      <summary>
            The stored entity settings has a conflict with state on current entity.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.RuntimeModel.SynchronizationStatus.EarlierVersion">
      <summary>
            The stored entity settings has a newer version that the current entity based on Major and Minor.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ScheduledMethod">
      <summary>
            Method to call on job execution
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ScheduledIntervalType">
      <summary>
            Scheduling intervals
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledIntervalType.None">
      <summary>
            Represents an undefined schedule interval
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledIntervalType.Years">
      <summary>
            Specifies that scheduled interval unit is years.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledIntervalType.Months">
      <summary>
            Specifies that scheduled interval unit is months.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledIntervalType.Weeks">
      <summary>
            Specifies that scheduled interval unit is weeks.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledIntervalType.Days">
      <summary>
            Specifies that scheduled interval unit is days.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledIntervalType.Hours">
      <summary>
            Specifies that scheduled interval unit is hours.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledIntervalType.Minutes">
      <summary>
            Specifies that scheduled interval unit is minutes.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledIntervalType.Seconds">
      <summary>
            Specifies that scheduled interval unit is seconds.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ScheduledJob">
      <summary>
            Read, edit and execute scheduled jobs
            </summary>
      <remarks>
        <para>The best way to create a custom scheduled job is to use the <see cref="T:EPiServer.PlugIn.ScheduledPlugInAttribute" /> as it will automatically generate a settings page in admin mode.</para>
        <para>All dates exposed by ScheduledJob are in local time, but they will be saved to the database as UTC dates.</para>
      </remarks>
      <example>
        <para>
            Example that demonstrates listing all available jobs.
            </para>
        <code source="../CodeSamples/EPiServer/DataAbstraction/ScheduledJobSamples.cs" region="ListJobs" />
      </example>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.#ctor(System.String,EPiServer.DataAbstraction.ScheduledMethod)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> class.
            </summary>
      <param name="jobName">The name of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.</param>
      <param name="method">The method to execute when the scheduled job runs.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.#ctor(System.Guid,System.String,System.Boolean,System.DateTime,System.DateTime,System.Boolean,System.String,EPiServer.DataAbstraction.ScheduledIntervalType,System.Int32,System.String,System.Boolean,System.String,System.String,System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> class.
            </summary>
      <param name="id">The id of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.</param>
      <param name="name">The name of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.</param>
      <param name="enabled">if set to <c>true</c> the scheduled job is enabled.</param>
      <param name="lastExec">A <see cref="T:System.DateTime" /> for last execution, <see cref="F:System.DateTime.MinValue" /> is identical with no last execution date.</param>
      <param name="nextExec">A <see cref="T:System.DateTime" /> for next execution, <see cref="F:System.DateTime.MinValue" /> is identical with no next execution date.</param>
      <param name="lastFailed">if set to <c>true</c> the last execution failed.</param>
      <param name="lastText">Informational message on last execution if any.</param>
      <param name="datePart">The interval unit.</param>
      <param name="interval">The interval.</param>
      <param name="methodName">Name of the method.</param>
      <param name="isStatic">if set to <c>true</c> the method to be executed (specified by <paramref name="methodName" />) is static.</param>
      <param name="typeName">Name of the type.</param>
      <param name="assemblyName">Name of the assembly.</param>
      <param name="data">The data.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.#ctor(System.Guid,System.String,System.Boolean,System.DateTime,System.DateTime,System.DateTime,System.Boolean,System.String,EPiServer.DataAbstraction.ScheduledIntervalType,System.Int32,System.String,System.Boolean,System.String,System.String,System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> class.
            </summary>
      <param name="id">The id of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.</param>
      <param name="name">The name of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.</param>
      <param name="enabled">if set to <c>true</c> the scheduled job is enabled.</param>
      <param name="lastExec">A <see cref="T:System.DateTime" /> for last execution, <see cref="F:System.DateTime.MinValue" /> is identical with no last execution date.</param>
      <param name="nextExec">A <see cref="T:System.DateTime" /> for next execution, <see cref="F:System.DateTime.MinValue" /> is identical with no next execution date.</param>
      <param name="nextExecUTC">A <see cref="T:System.DateTime" /> (UTC) of the next scheduled execution.</param>
      <param name="lastFailed">if set to <c>true</c> the last execution failed.</param>
      <param name="lastText">Informational message on last execution if any.</param>
      <param name="datePart">The interval unit.</param>
      <param name="interval">The interval.</param>
      <param name="methodName">Name of the method.</param>
      <param name="isStatic">if set to <c>true</c> the method to be executed (specified by <paramref name="methodName" />) is static.</param>
      <param name="typeName">Name of the type.</param>
      <param name="assemblyName">Name of the assembly.</param>
      <param name="data">The data.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.#ctor(System.Guid,System.String,System.Boolean,System.DateTime,System.DateTime,System.DateTime,System.Boolean,System.String,EPiServer.DataAbstraction.ScheduledIntervalType,System.Int32,System.String,System.Boolean,System.String,System.String,System.Byte[],System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> class.
            </summary>
      <param name="id">The id of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.</param>
      <param name="name">The name of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.</param>
      <param name="enabled">if set to <c>true</c> the scheduled job is enabled.</param>
      <param name="lastExec">A <see cref="T:System.DateTime" /> for last execution, <see cref="F:System.DateTime.MinValue" /> is identical with no last execution date.</param>
      <param name="nextExec">A <see cref="T:System.DateTime" /> for next execution, <see cref="F:System.DateTime.MinValue" /> is identical with no next execution date.</param>
      <param name="nextExecUTC">A <see cref="T:System.DateTime" /> (UTC) of the next sceduled execution.</param>
      <param name="lastFailed">if set to <c>true</c> the last execution failed.</param>
      <param name="lastText">Informational message on last exection if any.</param>
      <param name="datePart">The interval unit.</param>
      <param name="interval">The interval.</param>
      <param name="methodName">Name of the method.</param>
      <param name="isStatic">if set to <c>true</c> the method to be executed (specified by <paramref name="methodName" />) is static.</param>
      <param name="typeName">Name of the type.</param>
      <param name="assemblyName">Name of the assembly.</param>
      <param name="data">The data.</param>
      <param name="pingTime">The ping sleep.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.ID">
      <summary>
            Gets or sets the unique identifier of the job.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.Name">
      <summary>
            Gets or sets a name of the job
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.IsEnabled">
      <summary>
            Gets or sets and indication if job is enabled for scheduling
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.NextExecution">
      <summary>
            Gets or sets the date of the next execution.
            </summary>
      <remarks>
            A value of <see cref="F:System.DateTime.MinValue" /> is regarded as no next execution date is set.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.NextExecutionUTC">
      <summary>
            Gets the original read-only UTC date for next execution
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.LastExecution">
      <summary>
            Gets or sets the date of the last execution. 
            </summary>
      <remarks>
            A value of <see cref="F:System.DateTime.MinValue" /> indicates that the job has not been executed.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.LastExecutionMessage">
      <summary>
            Gets or sets an informational message on last exection if any
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.HasLastExecutionFailed">
      <summary>
            Gets or sets and indiciation if the last execution failed
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.MethodName">
      <summary>
            Gets or sets the name of the method to be called on execution.
            </summary>
      <remarks>
            For a method with the following signature
            <code>public static string Execute()</code>
            the name should simply be Execute
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.IsStaticMethod">
      <summary>
            Gets or sets if the method is static (and does not contain instance data)
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.IntervalType">
      <summary>
            Gets or sets the interval type
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.IntervalLength">
      <summary>
            Gets or sets the length of intervals between execution
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.TypeName">
      <summary>
            Gets or sets the full name of the type that holds the method to execute.
            </summary>
      <remarks>
            For the following class definition
            <code>
            namespace Example
            {
            	public class MyJob
            	...
            </code>
            the TypeName should be "Example.MyJob"
            </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.AssemblyName">
      <summary>
            Gets or sets the name of the assembly that holds the type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.InstanceData">
      <summary>
            Get the raw serialized class if method isnt static
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.IsRunning">
      <summary>
            Gets or sets the running state of the job
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.PingTime">
      <summary>
            Gets or sets the ping time of the job.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.SecondsAfterLastPing">
      <summary>
            Gets the ping time.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.CurrentStatusMessage">
      <summary>
            Gets or sets the current status message for the job
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.IsStoppable">
      <summary>
            Gets if the job is stoppable
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.Restartable">
      <summary>
            Indicates if the Job is restartable
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.LastExecutionAttempt">
      <summary>
            Last execution attempt
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.LastExecutionStatus">
      <summary>
            Gets or sets the last execution status
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJob.IsServiceOnline">
      <summary>
            If the scheduler service is online
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.SetServicePingDate">
      <summary>
            Do not call this method from code, it is called by the service
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.IsJobRunning(System.Guid)">
      <summary>
            Get the running state for a job
            </summary>
      <param name="scheduledJobId">Job to check running state for</param>
      <returns>True if it running, otherwise false</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.ListRunningJobs">
      <summary>
            Retrieves a list of all running jobs
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.Execute(System.Boolean)">
      <summary>
            Execute the current job manually and add interval to NextExecute date
            </summary>
      <param name="startThread">If job should be started in a new thread</param>
      <remarks>The job will not execute if another process has already started the job and updated NextExecution.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.Execute(System.Boolean,System.DateTime)">
      <summary>
            Execute the current job manually and add interval to NextExecute date
            </summary>
      <param name="startThread">If job should be started in a new thread</param>
      <param name="validateUtcDate">Validate date with current UTC date</param>
      <remarks>The job will not execute if another process has already started the job and updated NextExecution.</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.ExecuteManually">
      <summary>
            Force the job to execute and only update NextExecute date if it is set to a passed date.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.Stop">
      <summary>
            Tries to stop the job if its running
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.op_Equality(EPiServer.DataAbstraction.ScheduledJob,EPiServer.DataAbstraction.ScheduledJob)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ScheduledJob.op_Inequality(EPiServer.DataAbstraction.ScheduledJob,EPiServer.DataAbstraction.ScheduledJob)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.ScheduledJobCollection">
      <summary>
            Represents a collection of ScheduledJob classes.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ScheduledJobEventArgs">
      <summary>
            Class to pass event arguments from <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> events.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJobEventArgs.Job">
      <summary>
            Job affected by event
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ScheduledJobExecutionStatus">
      <summary>
            Specifies the status for an executed scheduled job
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledJobExecutionStatus.Unknown">
      <summary>
            The outcome of the execution is unknown
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledJobExecutionStatus.Succeeded">
      <summary>
            The execution completed successfully
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledJobExecutionStatus.Failed">
      <summary>
            The exceution failed
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledJobExecutionStatus.Cancelled">
      <summary>
            The job was cancelled by a user.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledJobExecutionStatus.UnableToStart">
      <summary>
            The job was unable to be started
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ScheduledJobExecutionStatus.Aborted">
      <summary>
            The job was aborted during a server shutdown.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ScheduledJobLogItem">
      <summary>
            A log entry for an executed scheduled job
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJobLogItem.Status">
      <summary>
            Gets or sets the outcome status for the execution
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJobLogItem.Message">
      <summary>
            Message returns by job
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJobLogItem.CompletedUtc">
      <summary>
            The date and time the job was completed (in UTC)
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJobLogItem.Duration">
      <summary>
            Gets the duration for the job execution
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJobLogItem.Trigger">
      <summary>
            Gets the trigger that caused the job to execute
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJobLogItem.Server">
      <summary>
            Specifies which server the job executed on
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJobLogItem.Succeeded">
      <summary>
            If the scheduled job completed successfully
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.ScheduledJobLogItem.ExecutedUtc">
      <summary>
            The date and time the job was executed (in UTC)
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ServiceLocationHelperExtensions">
      <summary>  
            Makes EPiServer.DataAbstraction services part of the public API.  
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.LanguageBranchRepository(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="T:EPiServer.DataAbstraction.ILanguageBranchRepository" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="T:EPiServer.DataAbstraction.ILanguageBranchRepository" /> service.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.PropertyDefinitionRepository(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="T:EPiServer.DataAbstraction.IPropertyDefinitionRepository" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="T:EPiServer.DataAbstraction.IPropertyDefinitionRepository" /> service.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.ContentTypeRepository(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.ContentTypeRepository(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.ContentTypeRepository(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.ProjectRepository(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.ProjectRepository(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.ProjectRepository(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.ProjectPublisher(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.ProjectPublisher(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.ProjectPublisher(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.CategoryRepository(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.CategoryRepository(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="M:EPiServer.DataAbstraction.ServiceLocationHelperExtensions.ProjectPublisher(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.ReferenceType">
      <summary>
            Represents different types of references that can exist between a page and other pages, images, and external references.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ReferenceType.UnknownReference">
      <summary>
            The reference is linking to an unknown target.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ReferenceType.PageLinkReference">
      <summary>
            The reference is linking to a page.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ReferenceType.ExternalReference">
      <summary>
            The reference is linking to an external resource.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.ReferenceType.ImageReference">
      <summary>
            The reference is linking to an image.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.SoftLink">
      <summary>
            Reads and edits links defined in HTML. 
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.SoftLink.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.SoftLink" /> class with default values.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.LinkMapper">
      <summary>
            Gets or sets the service used to resolve links.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.Id">
      <summary>
            Id of the soft link
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.OwnerContentLink">
      <summary>
            Gets or sets the owner content link.
            </summary>
      <value>
            The owner content link.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.ReferencedContentLink">
      <summary>
            Gets or sets the referenced content link.
            </summary>
      <value>
            The referenced content link.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.ReferencedContentGuid">
      <summary>
            Gets or sets the referenced content GUID base identifier.
            </summary>
      <value>The referenced content GUID.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.SoftLinkType">
      <summary>
            Gets or sets the type of the referenced object.
            </summary>
      <value>The type of the soft link.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.LastCheckedDate">
      <summary>
            Date when the link was last checked
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.FirstDateBroken">
      <summary>
            Date when the link was first found broken
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.HttpStatusCode">
      <summary>
            HttpStatus code if broken
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.LinkStatus">
      <summary>
            Current <see cref="T:System.Net.WebExceptionStatus" /></summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.OwnerLanguage">
      <summary>
            Gets or sets the owner language branch.
            </summary>
      <value>
            The owner language branch.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.ReferencedLanguage">
      <summary>
            Gets or sets the referencedlanguage branch.
            </summary>
      <value>
            The referencedlanguage branch.
            </value>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.UnresolvedUrl">
      <summary>
            Get or set the Url of the link
            The set will also affect the Protocol and PageLink properties
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.Url">
      <summary>
            Get or set the Url of the link
            The set will also affect the Protocol and PageLink properties
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.SoftLink.Protocol">
      <summary>
            Gets the protocol part of the link.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.SoftLink.ClearState">
      <summary>
            Clears the checked state of the current <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instance.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.SoftLink.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:EPiServer.DataAbstraction.SoftLink.Equals(EPiServer.DataAbstraction.SoftLink)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.SoftLink.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.SystemTabNames">
      <summary>
            Provides constants for the different built in tabs in EPiServer.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.SystemTabNames.Categories">
      <summary>
            Constant representing the categories tab.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.SystemTabNames.Content">
      <summary>
            Constant representing the content tab.
            </summary>
      <remarks>This constant returns the string "Information". That is the value that is stored in the database.</remarks>
    </member>
    <member name="F:EPiServer.DataAbstraction.SystemTabNames.Scheduling">
      <summary>
            Constant representing the scheduling tab.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.SystemTabNames.Settings">
      <summary>
            Constant representing the settings tab.
            </summary>
      <remarks>This constant returns the string "Advanced". This is the value that is stored in the database.</remarks>
    </member>
    <member name="F:EPiServer.DataAbstraction.SystemTabNames.PageHeader">
      <summary>
            The page header that is shown above the tabs or by scrolling up in the on page edit view.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.SystemTabNames.Shortcut">
      <summary>
            Constant representing the Shortcut tab.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.TabDefinition">
      <summary>
            Keeps information about a tab
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.TabDefinition.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.TabDefinition.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> class.
            </summary>
      <param name="id">The identifier for the <see cref="T:EPiServer.DataAbstraction.TabDefinition" />.</param>
      <param name="name">The name of the <see cref="T:EPiServer.DataAbstraction.TabDefinition" />.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.TabDefinition.#ctor(System.Int32,System.String,EPiServer.Security.AccessLevel,System.Int32,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> class.
            </summary>
      <param name="id">The identifier for the <see cref="T:EPiServer.DataAbstraction.TabDefinition" />.</param>
      <param name="name">The name of the <see cref="T:EPiServer.DataAbstraction.TabDefinition" />.</param>
      <param name="access">Specifies the associated access level for the tab.</param>
      <param name="sortIndex">Sort index for the <see cref="T:EPiServer.DataAbstraction.TabDefinition" />.</param>
      <param name="isSystemTabDefinition">if set to <c>true</c> the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> will be created as a system tab.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.TabDefinition.#ctor(System.Int32,System.String,EPiServer.Security.AccessLevel,System.Int32,System.Boolean,EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> class.
            </summary>
      <param name="id">The identifier for the <see cref="T:EPiServer.DataAbstraction.TabDefinition" />.</param>
      <param name="name">The name of the <see cref="T:EPiServer.DataAbstraction.TabDefinition" />.</param>
      <param name="access">Specifies the associated access level for the tab.</param>
      <param name="sortIndex">Sort index for the <see cref="T:EPiServer.DataAbstraction.TabDefinition" />.</param>
      <param name="isSystemTabDefinition">if set to <c>true</c> the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> will be created as a system tab.</param>
      <param name="localizationService">The resource locator that should be used by the instance to get localized strings.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.TabDefinition.ID">
      <summary>
            The unique identifier of type
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TabDefinition.Name">
      <summary>
            The name of the data type
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TabDefinition.DisplayName">
      <summary>
            The display name of the data type
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TabDefinition.LocalizedName">
      <summary>
            The localized name of the tab
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TabDefinition.RequiredAccess">
      <summary>
            The required access for this tab
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TabDefinition.SortIndex">
      <summary>
            The relative sort index
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TabDefinition.IsSystemTab">
      <summary>
            If a system defined tab or not
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.TabDefinitionCollection">
      <summary>
            Represents a collection of TabDefinition classes.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.VersionComponent">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Semantic versioning component. 
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.VersionComponent.None">
      <summary>
            No semantic versioning component. 
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.VersionComponent.Patch">
      <summary>
            Get the patch semantic versioning component.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.VersionComponent.Minor">
      <summary>
            Get the minor semantic versioning component.
            </summary>
    </member>
    <member name="F:EPiServer.DataAbstraction.VersionComponent.Major">
      <summary>
            Get the major semantic versioning component.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.VersionValidationException">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Exception thrown when a content type validation fails during an update due to an invalid content type version being provided.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.VersionValidationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.VersionValidationException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.VersionValidationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.VersionValidationException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.VersionValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.VersionValidationException" /> class with serialized data.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.BlockTypeRepository">
      <summary>
            Repository for working with <see cref="T:EPiServer.DataAbstraction.BlockType" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.#ctor(EPiServer.DataAbstraction.IContentTypeRepository)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.BlockTypeRepository" /> class.
            </summary>
      <param name="contentTypeRepository">The content type repository.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Save(EPiServer.DataAbstraction.BlockType)">
      <summary>
            Saves the specified block type.
            </summary>
      <param name="blockType">The block type that should be saved.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Load(System.Int32)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with given id.
            </summary>
      <param name="id">The id of the block type to load.</param>
      <returns>A block type with the specified id.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Load(System.String)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with given name.
            </summary>
      <param name="name">The name of the block type to load.</param>
      <returns>A block type with the specified name.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Load(System.Guid)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with given guid based identifier.
            </summary>
      <param name="guid">The GUID of the block type to load.</param>
      <returns>A block type with the specified GUID.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Load(System.Type)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with given type.
            </summary>
      <param name="modelType">The type of the model on the block type that should be loaded.</param>
      <returns>A block type with the specified model type.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Load``1">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with given type.
            </summary>
      <typeparam name="T">The type of the model on the block type that should be loaded.</typeparam>
      <returns>A block type with the specified model type.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Copy(System.Int32)">
      <summary>
            Copies the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with specified id.
            </summary>
      <param name="id">The id of the block type to copy.</param>
      <returns>The newly created copy.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Copy(System.Type)">
      <summary>
            Copies the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with a model of a specified type.
            </summary>
      <param name="modelType">The model type used by the block type.</param>
      <returns>The newly created copy.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Copy(EPiServer.DataAbstraction.BlockType)">
      <summary>
            Copies the specified <see cref="T:EPiServer.DataAbstraction.BlockType" />.
            </summary>
      <param name="blockType">The block type to copy.</param>
      <returns>The newly created copy.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Delete(System.Int32)">
      <summary>
            Deletes the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with specified id.
            </summary>
      <param name="id">The id of the block type that should be deleted.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Delete(System.Type)">
      <summary>
             Deletes the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with a model of a specified type.
            </summary>
      <param name="modelType">The type of the model on the block type that should be deleted.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Delete(EPiServer.DataAbstraction.BlockType)">
      <summary>
             Deletes the specified <see cref="T:EPiServer.DataAbstraction.BlockType" />.
            </summary>
      <param name="blockType">The block type that will be deleted.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.Delete``1">
      <summary>
             Deletes the <see cref="T:EPiServer.DataAbstraction.BlockType" /> with a model of a specified type.
            </summary>
      <typeparam name="T">The type of the model on the block type that should be deleted.</typeparam>
    </member>
    <member name="M:EPiServer.DataAbstraction.BlockTypeRepository.List">
      <summary>
            Lists all registered <see cref="T:EPiServer.DataAbstraction.BlockType" />s.
            </summary>
      <returns>A list of block types.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentSoftLinkRepository.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentSoftLinkRepository" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentSoftLinkRepository.#ctor(EPiServer.Web.IPermanentLinkMapper,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.ContentSoftLinkDB})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.ContentSoftLinkRepository" /> class.
            </summary>
      <param name="permanentLinkMapper">The permanent link mapper that should be used by this instance and any loaded links.</param>
      <param name="softLinkDataAccess">An accessor method that retrieves the soft link data access instance that should be used by this instance.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentSoftLinkRepository.DeleteLinks(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Delete all softlink references for <paramref name="ownerContent" /> with specific <paramref name="language" />.
            </summary>
      <param name="ownerContent">The content reference</param>
      <param name="language">The language</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentSoftLinkRepository.Append(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Collections.Generic.IList{EPiServer.DataAbstraction.SoftLink})">
      <summary>
            Appends all the specified <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances with the same owner page link.
            </summary>
      <param name="ownerContent">The owner content link.</param>
      <param name="ownerLanguage">The language, specify null to re-save links for all languages</param>
      <param name="links">The collection of <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAvailableContentTypes.GetSetting(System.String)">
      <summary>
            Gets the current settings for available content types for a <see cref="T:EPiServer.DataAbstraction.ContentType" /> given by name <paramref name="contentTypeName" />.
            </summary>
      <param name="contentTypeName">Name of the content type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAvailableContentTypes.ListAvailable(System.String,System.Security.Principal.IPrincipal)">
      <summary>
            Lists all available <see cref="T:EPiServer.DataAbstraction.ContentType" /> that can be created under a content instance of content type with name <paramref name="contentTypeName" />.
            The list is filtered due to the <paramref name="user" /></summary>
      <remarks>This method does not take any uncomitted data into account.</remarks>
      <param name="contentTypeName">Name of the content type.</param>
      <param name="user">The user.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IAvailableContentTypes.IsAllowed(System.String,System.String)">
      <summary>
            Determines whether a <see cref="T:EPiServer.Core.ContentData" /> of the ContentType named <paramref name="childContentTypeName" /> is allowed to be created under a content of
            the ContentType named <paramref name="parentContentTypeName" />.
            </summary>
      <param name="parentContentTypeName">The name of the parent ContentType.</param>
      <param name="childContentTypeName">The name of child ContentType.</param>
      <returns>
        <c>true</c> if the specified content type is allowed; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.IScheduledJobStatusService">
      <summary>
            Status service that interacts with the scheduler executing the jubs
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobStatusService.GetNextScheduledJob">
      <summary>
            Get the next job up for execution
            </summary>
      <returns>A ScheduledJob instance if there is a waiting job, otherwise null.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobStatusService.MarkAsFailed(System.Guid)">
      <summary>
            Mark the scheduled job as failed to prevent it from being executed. 
            This flag is only temporary and execution will start again when the application has been restarted.
            </summary>
      <param name="id">The job identifier</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobStatusService.TryMarkForExecution(System.Guid,System.DateTime,System.TimeSpan)">
      <summary>
            Marks a job for execution to prevent others to run job scheduled for a specific time
            </summary>
      <param name="id">The identity</param>
      <param name="scheduledAt">The expected execution time, will be validated to make sure no one else have takes the job</param>
      <param name="pingTimeout">Expect <see cref="M:EPiServer.DataAbstraction.IScheduledJobStatusService.UpdateRunningState(System.Guid,System.Boolean)" /> to be called for running jobs withing the timeout specified</param>
      <returns>True if the job was successfully marked for execution</returns>
      <remarks>When the ping timeout has expired and no calls to update running state have been made future jobs will no longer be blocked</remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobStatusService.ReportExecutedJob(System.Guid,EPiServer.DataAbstraction.ScheduledJobLogItem)">
      <summary>
            Report a job as executed with status information of outcome
            </summary>
      <param name="id">Job id</param>
      <param name="status">If the job executed successfully</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobStatusService.UpdateCurrentStatusMessage(System.Guid,System.String)">
      <summary>
            Update current status message for a running job
            </summary>
      <param name="id">The job id</param>
      <param name="message">Status message</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobStatusService.UpdateRunningState(System.Guid,System.Boolean)">
      <summary>
            Update running state
            </summary>
      <param name="id">Job id</param>
      <param name="isRunning">If job is running or not</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.IScheduledJobStatusService.GetExecutionLog(System.Guid)">
      <summary>
            List log information for the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.
            </summary>
      <remarks>Method returns a maximum of 100 log items</remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.PageTypeCollection">
      <summary>
            Represents a collection of PageType classes.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.PageTypeEventArgs">
      <summary>
            Class to pass event arguments from <see cref="T:EPiServer.DataAbstraction.PageType" /> events.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeEventArgs.#ctor(System.Int32,System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PageTypeEventArgs" /> class.
            </summary>
      <param name="pageTypeID">The ID of the <see cref="T:EPiServer.DataAbstraction.PageType" /> affected by the event.</param>
      <param name="pageTypeGUID">The GUID of the <see cref="T:EPiServer.DataAbstraction.PageType" /> affected by the event.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeEventArgs.#ctor(System.Int32,System.Guid,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PageTypeEventArgs" /> class.
            </summary>
      <param name="pageTypeID">The ID of the <see cref="T:EPiServer.DataAbstraction.PageType" /> affected by the event.</param>
      <param name="pageTypeGUID">The GUID of the <see cref="T:EPiServer.DataAbstraction.PageType" /> affected by the event.</param>
      <param name="isNewPageType">If set to <c>true</c> indicates that the page type is a new page type.</param>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeEventArgs.PageTypeID">
      <summary>
            Gets the ID of the <see cref="T:EPiServer.DataAbstraction.PageType" /> affected by the event.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeEventArgs.PageTypeGUID">
      <summary>
            Gets the GUID of the <see cref="T:EPiServer.DataAbstraction.PageType" /> affected by the event.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.PageTypeEventArgs.IsNewPageType">
      <summary>
            Gets a value indicating whether the <see cref="T:EPiServer.DataAbstraction.PageType" /> just been created.
            </summary>
      <value>
        <c>true</c> if the page type is a new page type; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.DataAbstraction.PageTypeNotFoundException">
      <summary>
            Represents errors that occur when an <see cref="T:EPiServer.DataAbstraction.PageType" /> is not found.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeNotFoundException.#ctor">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.DataAbstraction.PageTypeNotFoundException" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeNotFoundException.#ctor(System.String)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.DataAbstraction.PageTypeNotFoundException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.DataAbstraction.PageTypeNotFoundException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.PageTypeRepository">
      <summary>
            The repository for <see cref="T:EPiServer.DataAbstraction.PageType" /></summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.#ctor(EPiServer.DataAbstraction.IContentTypeRepository)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PageTypeRepository" /> class.
            </summary>
      <param name="contentTypeRepository">The content type repository.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Save(EPiServer.DataAbstraction.PageType)">
      <summary>
            Saves the specified <see cref="T:EPiServer.DataAbstraction.PageType" />.
            </summary>
      <param name="pageType">Type of the content.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Load(System.Int32)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.PageType" /> with specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Load(System.String)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.PageType" /> with specified name.
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Load(System.Guid)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.PageType" /> with specified guid based identifier.
            </summary>
      <param name="guid">The GUID.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Load(System.Type)">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.PageType" /> registered with specified typed model.
            </summary>
      <param name="modelType">Type of the model.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Load``1">
      <summary>
            Loads the <see cref="T:EPiServer.DataAbstraction.PageType" /> registered with specified typed model.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Copy(System.Int32)">
      <summary>
            Copies the <see cref="T:EPiServer.DataAbstraction.PageType" /> with specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Copy(System.Type)">
      <summary>
            Copies the <see cref="T:EPiServer.DataAbstraction.PageType" /> with specified model type.
            </summary>
      <param name="modelType">Type of the model.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Copy(EPiServer.DataAbstraction.PageType)">
      <summary>
            Copies the specified <see cref="T:EPiServer.DataAbstraction.PageType" />.
            </summary>
      <param name="pageType">Type of the content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Delete(System.Int32)">
      <summary>
            Deletes the <see cref="T:EPiServer.DataAbstraction.PageType" /> with specified id.
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Delete(System.Type)">
      <summary>
             Deletes the <see cref="T:EPiServer.DataAbstraction.PageType" /> with specified model type.
            </summary>
      <param name="modelType">Type of the model.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Delete(EPiServer.DataAbstraction.PageType)">
      <summary>
             Deletes the specified <see cref="T:EPiServer.DataAbstraction.PageType" />.
            </summary>
      <param name="pageType">Type of the content.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.Delete``1">
      <summary>
             Deletes the <see cref="T:EPiServer.DataAbstraction.PageType" />  with specified model type.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageTypeRepository.List">
      <summary>
            Lists all registered <see cref="T:EPiServer.DataAbstraction.PageType" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.PageVersion">
      <summary>
            Handles loading and listing of page versions
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageVersion.#ctor(EPiServer.Core.PageReference,System.String,EPiServer.Core.VersionStatus,System.DateTime,System.String,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PageVersion" /> class.
            </summary>
      <param name="pageID">The page ID.</param>
      <param name="name">The name of the version</param>
      <param name="workStatus">The status of the version</param>
      <param name="saved">The time the version was saved.</param>
      <param name="savedBy">The person who saved the version</param>
      <param name="statusChangedBy">The person who changed the page</param>
      <param name="masterVersionID">The master version ID for the page</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageVersion.#ctor(EPiServer.Core.PageReference,System.String,EPiServer.Core.VersionStatus,System.DateTime,System.String,System.String,System.Int32,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PageVersion" /> class.
            </summary>
      <param name="pageID">The page ID.</param>
      <param name="name">The name of the version</param>
      <param name="workStatus">The status of the version</param>
      <param name="saved">The time the version was saved.</param>
      <param name="savedBy">The person who saved the version</param>
      <param name="statusChangedBy">The person who changed the page</param>
      <param name="masterVersionID">The master version ID for the page</param>
      <param name="languageBranch">The language branch for the version</param>
      <param name="isMasterLanguageBranch">if set to <c>true</c> [is master language branch].</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.PageVersion.#ctor(EPiServer.Core.PageReference,System.String,EPiServer.Core.VersionStatus,System.DateTime,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.PageVersion" /> class.
            </summary>
      <param name="pageID">The page ID.</param>
      <param name="name">The name.</param>
      <param name="workStatus">The work status.</param>
      <param name="saved">The saved.</param>
      <param name="savedBy">The saved by.</param>
      <param name="statusChangedBy">The status changed by.</param>
      <param name="masterVersionID">The master version ID.</param>
      <param name="languageBranch">The language branch.</param>
      <param name="isMasterLanguageBranch">if set to <c>true</c> [is master language branch].</param>
      <param name="commonDraft">if set to <c>true</c> [common draft].</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.PageVersionCollection">
      <summary>
            Represents a collection of PageVersion classes.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.ScheduledJobRepository">
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.SubscriptionService">
      <summary>
            Gets pages available for subscription.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.SubscriptionService.#ctor(EPiServer.IContentRepository,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.PropertySearchDB})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.SubscriptionService" /> class.
            </summary>
      <param name="contentRepository">The page repository.</param>
      <param name="propertySearchDbAccessor">The accessor to get the property search db instance.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.SubscriptionService.GetSubscriptionPages(EPiServer.Core.PageReference)">
      <summary>
            Gets pages available for subscription.
            </summary>
      <param name="root">The reference to the root from where to start searching for subscription pages.</param>
      <returns>Pages avaliable for subscription.</returns>
      <remarks>
        <para>The result is unfiltered. Any filtering is up to the caller of this method.</para>
        <para>The result from this is not cached. It will ask the database every time.</para>
      </remarks>
    </member>
    <member name="P:EPiServer.DataAbstraction.SubscriptionService.ContentRepository">
      <summary>
            Gets the  Page Repository used to get subscription pages.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.SubscriptionService.PropertySearchDB">
      <summary>
            Gets the property search DB instance that is used to find subscription pages.
            </summary>
    </member>
    <member name="T:EPiServer.DataAccess.DataAccessBase">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper base class for data access. It is recommended to use <see cref="T:EPiServer.Data.IDatabaseExecutor" /> directly instead.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAccess.DataAccessBase" /> class.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="databaseExecuor">The <see cref="T:EPiServer.Data.IDatabaseExecutor" /> that will be used for database communication.</param>
    </member>
    <member name="P:EPiServer.DataAccess.DataAccessBase.Executor">
      <summary>
            Set database handler used for this instance
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.ProviderSpecificParameterName(System.String)">
      <summary>
            Returns the parameter name decorated according to the rules for the current DataFactory provider.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="parameterName">The parameter name that should be decorated.</param>
      <returns>The decorated parameter name.</returns>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateCommand">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateCommand(System.String)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateTextCommand(System.String)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateParameter(System.String,System.Object)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.Object)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateReturnParameter">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateParameterType(System.String,System.Data.DbType)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateParameter(System.String,System.Data.DbType,System.Int32)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateParameterSource(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateParameterSource(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.String)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.GetValue(System.Data.Common.DbCommand,System.String)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.SetValue(System.Data.Common.DbCommand,System.String,System.Object)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.GetReturnValue(System.Data.Common.DbCommand)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateDataAdapter">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.EscapeWildcardChars(System.String)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateDataAdapter(System.Data.Common.DbCommand)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateDataAdapter(System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.CreateDataAdapter(System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBase.ToSystemNull(System.Object)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ActivityOperationResult">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ActivityDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ApprovalDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ApprovalDefinitionDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.AvailableContentTypeAnalyzeResult">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PendingBlobUriReference">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.BlobDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.CategoryDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.CategoryDB.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="databaseHandler">The database handler.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.CategoryDB.Load(System.Int32,System.Int32,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.CategoryDB.Save(System.Int32,System.Int32,EPiServer.Core.CategoryList)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.CategoryDB.Save(System.Int32,System.Int32,EPiServer.Core.CategoryList,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.CategoryDB.Save(EPiServer.DataAbstraction.Category)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.CategoryDB.GetRoot">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.CategoryDB.Delete(EPiServer.DataAbstraction.Category)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentAclDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentAclDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.IContentCacheRemover,EPiServer.Core.IContentCacheListingRemover,EPiServer.Security.IPrincipalAccessor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentAclDB.Delete(System.String,EPiServer.Security.SecurityEntityType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes all acl on content and subcontents on a specific membership user or role.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="userOrRoleName">Name of the user or role.</param>
      <param name="entity">The entity.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentAclDB.Save(EPiServer.Core.ContentReference,EPiServer.Security.IContentSecurityDescriptor,EPiServer.Security.SecuritySaveType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified content security descriptor.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentSecurityDescriptor">The content security descriptor.</param>
      <param name="securitySaveType">Type of the security save.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentCoreDataDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the core Content data from the database. This should be a very fast operation, getting columns from a single row
            with an indexed unique column as the lookup key.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentCoreDataDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Data.DatabaseDateTimeHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentCoreDataDB.Load(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentCoreDataDB.Load(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Base class for reading PageData information from SQL Server
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.ContentDB.DataTypeToDBName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentDB.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Data.IDatabaseExecutor},EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Construction.IPropertyDataFactory,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.Construction.IContentFactory,EPiServer.Framework.Blobs.IBlobFactory,EPiServer.DataAccess.Internal.PropertyValueConverterFactory,EPiServer.Data.DatabaseDateTimeHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentDB.PermanentLinkMapper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the permanent link mapper.
            </summary>
      <value>The permanent link mapper.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentDB.LanguageBranchRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the language branch repository.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentDB.ContentTypeRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the content type repository.
            </summary>
      <value>The content type repository.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentDB.PropertyDefinitionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the property definition repository.
            </summary>
      <value>The property definition repository.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentDB.PropertyDefinitionTypeRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the property definition repository.
            </summary>
      <value>The property definition repository.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentDB.PropertyDataFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the language branch repository.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentDB.DateTimeHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the Database DateTimeHandler.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentDB.IsMetaData(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentDB.IsIdentityData(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentDB.IsIgnoreOnImportData(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks if a property should be ignored when setting property values during an import.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="name">The name of the property.</param>
      <returns>
            true if the property should be ignored; otherwise false.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentDB.PageGuidOrNull(EPiServer.Core.PropertyData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentDB.ReadPropertyData(EPiServer.Core.PropertyData,System.Data.Common.DbDataReader,EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentDB.TryToGuid(System.Object,System.Guid@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentDB.PopulatePropertyCommand(EPiServer.Data.IDatabaseExecutor,System.Data.Common.DbCommand,EPiServer.Core.PageReference,EPiServer.Core.PropertyDataCollection,EPiServer.Core.PropertyData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentDB.PopulatePropertyCommand(EPiServer.Data.IDatabaseExecutor,System.Data.Common.DbCommand,EPiServer.Core.ContentReference,System.Guid,EPiServer.Core.PropertyDataCollection,EPiServer.Core.PropertyData,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentListDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Load information from database about an entire list of PageData objects.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Data.IDatabaseExecutor},EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Construction.IPropertyDataFactory,EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.Construction.IContentFactory,EPiServer.Framework.Blobs.IBlobFactory,EPiServer.DataAccess.Internal.PropertyValueConverterFactory,EPiServer.Core.IContentProviderManager,EPiServer.Data.DatabaseDateTimeHandler,EPiServer.Core.ContentOptions,EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.LoadDefaultSystemRoots">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the system default Roots.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.ListContentOfContentType(EPiServer.DataAbstraction.ContentType,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all references to pages of a certain page type.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions are returned.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.IsContentTypeUsed(EPiServer.DataAbstraction.ContentType,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks whether a content type is used anyhwere.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions are checked.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.ListMatchingSegments(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists references to all children content items that have matching routing/url segments.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.ListAll(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. List all pages in the database
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <returns>An array with pages</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.ListAll(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.ListAll">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. List all pages in the database
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <returns>A array with pages</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.CountDescendants(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Count all descendants to this page (children and grandchildren).
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="contentLink">Start page where counting starts. This page is not included in the count.</param>
      <returns>Number of descendant pages.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.ListBlobUris(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. List all external folder id in database
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <returns>A array of blob ids</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.ListOwnedContentAssetReferences(System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. List all existing content asset references that are related to <paramref name="ownedContentIds" />.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="ownedContentIds">The owned content ids.</param>
      <returns>
            A list of asset ids
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.LoadChildrenReferencesAndTypes(System.Int32,System.String,EPiServer.Filters.FilterSortOrder@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.LoadSpecificContentInstances(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentListDB.LoadVersions(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentLoadDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentLoadDB.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Data.IDatabaseExecutor},EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Construction.IPropertyDataFactory,EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.Construction.IContentFactory,EPiServer.Framework.Blobs.IBlobFactory,EPiServer.DataAccess.Internal.PropertyValueConverterFactory,EPiServer.Data.DatabaseDateTimeHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentLoadDB.Load(EPiServer.Core.ContentReference,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentLoadDB.LoadVersion(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentLoadDB.LoadVersion(EPiServer.Core.ContentReference,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentLoadDB.LoadContentInternal(EPiServer.Core.ContentReference,System.Int32,System.Data.Common.DbDataReader)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentLoadDB.LoadLongString(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentPathDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentSaveDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles all database modification of page data.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.ContentSaveDB.UseIChangeTrackingSavedKey">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.ContentSaveDB.UseIChangeTrackingChangedByKey">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Data.IDatabaseExecutor},EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.Construction.IPropertyDataFactory,EPiServer.Construction.IContentFactory,EPiServer.DataAbstraction.Internal.DefaultContentVersionRepository,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.CategoryDB},EPiServer.Framework.Blobs.IBlobFactory,EPiServer.DataAccess.Internal.PropertyValueConverterFactory,EPiServer.Data.DatabaseDateTimeHandler,EPiServer.Core.Internal.IContentVersionResolver,EPiServer.Core.IStatusTransitionEvaluator,EPiServer.Framework.ITimeProvider,EPiServer.Construction.Internal.IPropertyBlockBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentSaveDB.ContentVersionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the content version repository.
            </summary>
      <value>
            The content version repository.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentSaveDB.UsePageDataSaveTime">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Indicates if the save time stored in db is taken from PageData instance or set by PageSaveDB.
            If true PageSaved property on PageData instance is used else is time set as DateTime.Now.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentSaveDB.UsePageDataChangedBy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Indicates if the saved by stored in db is taken from PageData instance or set by current user.
            If true SavedBy property on PageData instance is used else is current user.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.Delete(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete content from database
            </summary>
      <param name="contentLink">The link to the content which will be deleted</param>
      <param name="forceDelete">Delete content even if being linked by other pages</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.DeleteChildren(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete children from database.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="contentLink">The children of this content will be deleted.</param>
      <param name="forceDelete">Delete even if referenced by other pages.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.DeleteLanguage(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete a language branch of a content object
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="contentLink">Link to content for which the language should be deleted</param>
      <param name="languageBranch">The language branch to delete</param>
      <remarks>The published version cannot be deleted</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.GetReferenceInformationForContent(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content of the reference information for.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="includeDecendents">if set to <c>true</c> [include decendents].</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.GetReferenceInformationForChildren(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the reference information for children.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.Move(System.Int32,System.Int32,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Move a content object to another container
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="contentLinkID">The link to the content to move</param>
      <param name="destinationLinkID">The container to which the content will be moved</param>
      <param name="archive">Set to True if the content is archived.</param>
      <remarks>Archiving the content will move it to its Archve page and remove the
            stop publishing date.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Move a content object to another container
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="contentLink">The link to the content to move</param>
      <param name="destinationLink">The container to which the content will be moved</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.MoveToWastebasket(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Move a content object to the wastebasket
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="contentLink">The link to the content to move</param>
      <param name="deletedBy">The deleted by.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save page to database
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="content">The content.</param>
      <param name="action">Action that will be performed</param>
      <param name="currentUser">Name of the user performing this operation</param>
      <returns>
      </returns>
      <remarks>If PageLink is empty a new page will be created</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSaveDB.UpdateStatus(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,System.Nullable{System.DateTime},System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Updates the status of a content item in the database
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="content">The content.</param>
      <param name="action">Action that will be performed</param>
      <param name="delayPublishUntil">
      </param>
      <param name="currentUser">Name of the user performing this operation</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentSoftLinkDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSoftLinkDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Data.DatabaseDateTimeHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSoftLinkDB.GetLinks(System.Guid,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSoftLinkDB.GetLinksByPath(System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSoftLinkDB.GetUncheckedLinks(System.DateTime,System.TimeSpan,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get Unchecked links from the database
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="lastCheckedDate">Date when the links were last checked</param>
      <param name="ignoreWorkingLinksInterval">The time back in history where we don't want to recheck working links.</param>
      <param name="maxNumberOfLinks">Maximum number of links that should be returnd</param>
      <returns>
            Links that has not been checked prior to the start date
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSoftLinkDB.GetBrokenLinks(EPiServer.Core.ContentReference,System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets broken links from the database
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="root">The root item.</param>
      <param name="skipCount">The skip count.</param>
      <param name="maxResults">The max results.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSoftLinkDB.GetBrokenLinksCount(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSoftLinkDB.UpdateLinkStatus(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.SoftLink})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSoftLinkDB.DeleteLinks(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete all softlink references for <paramref name="ownerContent" /> with specific <paramref name="language" />.
            </summary>
      <param name="ownerContent">The content reference</param>
      <param name="language">The language</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSoftLinkDB.GetRemoteReferenceInformation(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the remote reference information.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentSoftLinkDB.Save(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.SoftLink},System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentTypeDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.ContentTypeDB.UseContentTypeSavedKey">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.ContentTypeDB.UseContentTypeSavedByKey">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentTypeDB.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentTypeDB.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Data.IDatabaseExecutor},EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.Core.PropertySettings.IPropertySettingsRepository,EPiServer.Data.DatabaseDateTimeHandler,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Security.IPrincipalAccessor,EPiServer.DataAbstraction.RuntimeModel.IContentTypeBaseResolver,EPiServer.Core.IContentModelUsage,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAccess.Internal.ContentTypeDB" /> class.
            </summary>
      <remarks>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentTypeDB.UseContentTypeSaved">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Indicates whether save time is taken from ContentType instance or set by the save method.
            If true Saved property on ContentType instance is used else time is set to DateTime.Now.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.ContentTypeDB.UseContentTypeSavedBy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Indicates whether saved by is taken from ContentType instance or set by the save method.
            If true SavedBy property on ContentType instance is used else current user.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentTypeDB.Save(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified content type to the data repository.
            </summary>
      <param name="contentType">The content type to save.</param>
      <remarks>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentTypeDB.Delete(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes a <see cref="T:EPiServer.DataAbstraction.ContentType" /> from the data repository.
            </summary>
      <param name="contentType">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentTypeDB.SaveIncludingPropertyDefinitions(EPiServer.DataAbstraction.ContentType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the content type and all its property definitions.</summary>
      <param name="contentType">The content type.</param>
      <returns>A copy of the content type, including its property definitions.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentTypeDB.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all <see cref="T:EPiServer.DataAbstraction.ContentType" />s in the data repository.
            </summary>
      <returns>
            Enumeration of <see cref="T:EPiServer.DataAbstraction.ContentType" />s.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentTypeDB.OnRepositoryUpdated(EPiServer.DataAbstraction.ContentType,EPiServer.DataAbstraction.RepositoryEventType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise the repository updated event
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="eventType">Type of the event.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentTypeDB.ClearCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the cache.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentTypeMappingDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ContentVersionDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentVersionDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Data.DatabaseDateTimeHandler,EPiServer.DataAbstraction.ILanguageBranchRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentVersionDB.DeleteVersion(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete a single version of Content
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="workID">The work ID.</param>
      <remarks>
            The published version of content cannot be deleted
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentVersionDB.SaveCommonDraft(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the common draft.
            </summary>
      <param name="workID">The work ID.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ContentVersionDB.SaveCommonDraft(System.Int32,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the common draft.
            </summary>
      <param name="workID">The work ID.</param>
      <param name="force">To force changing common draft (ignore if there are other versions that are common draft)</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ConvertPageTypeDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ConvertPageTypeDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.IContentRepository,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.DataAbstraction.IPropertyDefinitionRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAccess.Internal.ConvertPageTypeDB" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ConvertPageTypeDB.Convert(System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Convert a page to a new page type
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="pageLinkId">The id to the page which will be converted</param>
      <param name="fromPageTypeId">The id of the page type to convert from</param>
      <param name="toPageTypeId">To id of the page type to convert to</param>
      <param name="propertyTypeMap">"from"-"to" mappings of properties
            , the mapped properties has to be on the same base form</param>
      <param name="recursive">if set to <c>true</c> the conversion will be performed for all subpages also</param>
      <param name="isTest">if set to <c>true</c> no actual conversion is made but a test to see the effect of the conversion</param>
      <returns>A dataset with information of changes</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.DataAccessHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Internal class that makes transision from <see cref="T:EPiServer.DataAccess.DataAccessBase" /> easier
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.DatabaseInformationDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.DatabaseInformationDB.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.DatabaseInformationDB.LoadInformation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.DynamicPropertiesDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.DynamicPropertiesDB.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Data.IDatabaseExecutor},EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Construction.IPropertyDataFactory,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.Construction.IContentFactory,EPiServer.Framework.Blobs.IBlobFactory,EPiServer.DataAccess.Internal.PropertyValueConverterFactory,EPiServer.Data.DatabaseDateTimeHandler,EPiServer.Security.IPrincipalAccessor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.DynamicPropertiesDB.LoadDynamicProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads all dynamic properties.
            </summary>
      <returns>A <see cref="T:EPiServer.DataAbstraction.DynamicPropertyCollection" /> that is used to retrieve dynamic property information for the site.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.DynamicPropertiesDB.Load(EPiServer.Core.PageReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.DynamicPropertiesDB.Save(EPiServer.Core.PageReference,EPiServer.DataAbstraction.DynamicPropertyCollection)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.FrameDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Database class for accessing frame information
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.FrameDB.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.FrameDB.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.FrameDB.Save(System.Data.DataSet)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.IdentityMappingDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.IPageQuickSearch">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Simple database lookups.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.IPageQuickSearch.FindByPath(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="root">
      </param>
      <param name="path">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.IPageQuickSearch.FindByPath(EPiServer.Core.ContentReference,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="root">
      </param>
      <param name="path">
      </param>
      <param name="languageBranch">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.IPageQuickSearch.FindByExternalUrl(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="path">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.IPropertyValueConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.IPropertyValueConverter.SetValue(EPiServer.Core.PropertyData,EPiServer.DataAccess.Internal.PropertyDataRecord,EPiServer.DataAccess.Internal.PropertyValueConverterContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Assigns the database value to the property.
            </summary>
      <param name="property">The property to which the value should be assigned to.</param>
      <param name="dataRecord">The values extracted from the database.</param>
      <param name="context">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.IPropertyValueConverter.GetValue(EPiServer.Core.PropertyData,EPiServer.DataAccess.Internal.PropertyValueConverterContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the value from the property in a database friendly format.
            </summary>
      <param name="property">The property from where the value should be retrieved from.</param>
      <param name="context">
      </param>
      <returns>A record with an assigned database friendly value.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.IPropertyValueConverter`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.IPropertyValueConverter`1.SetValue(`0,EPiServer.DataAccess.Internal.PropertyDataRecord,EPiServer.DataAccess.Internal.PropertyValueConverterContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Assigns the database value to the property.
            </summary>
      <param name="property">The property to which the value should be assigned to.</param>
      <param name="dataRecord">The values extracted from the database.</param>
      <param name="context">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.IPropertyValueConverter`1.GetValue(`0,EPiServer.DataAccess.Internal.PropertyValueConverterContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the value from the property in a database friendly format.
            </summary>
      <param name="property">The property from where the value should be retrieved from.</param>
      <param name="context">
      </param>
      <returns>A record with an assigned database friendly value.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PropertyValueConverterContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.JsonPropertyValueConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.LanguageBranchDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.LanguageBranchDB.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Data.IDatabaseExecutor})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.LanguageBranchDB.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.LanguageBranchDB.Delete(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the specified language.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="id">The id of the language.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.LanguageBranchDB.Save(EPiServer.DataAbstraction.LanguageBranch)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified language branch.
            </summary>
      <param name="languageBranch">The language branch.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.LanguageDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.LanguageDB.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.LanguageDB.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.LanguageDB.Save(System.Data.DataSet)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.LazyPropertyValueLoader">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ILegacyPropertyValueConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Add support for legacy retrieval, where the current PropertyDataCollection is passed in.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.ListPropertyValueConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PageLanguageSettingDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Database class for accessing page language settings
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageLanguageSettingDB.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageLanguageSettingDB.ListTree">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageLanguageSettingDB.Load(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageLanguageSettingDB.Save(System.Int32,System.String,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageLanguageSettingDB.Save(System.Int32,System.String,System.String,System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageLanguageSettingDB.Delete(System.Int32,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PageQuickSearchDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Simple database lookups.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageQuickSearchDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Data.DatabaseDateTimeHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageQuickSearchDB.FindByPath(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageQuickSearchDB.FindByPath(EPiServer.Core.ContentReference,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageQuickSearchDB.FindByExternalUrl(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PermissionDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get and set permission information for roles/users.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PermissionDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Security.IPrincipalAccessor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PermissionDB.ListRolesForPermission(EPiServer.Security.PermissionType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PermissionDB.SaveRolesForPermission(EPiServer.Security.PermissionType,System.Collections.Generic.IEnumerable{EPiServer.Security.SecurityEntity})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PermissionDB.ClearPermissionListForMembership(System.String,EPiServer.Security.SecurityEntityType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the permission list for a given membership.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PermissionDB.CreateTableForSave">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PlugInDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PlugInDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Data.DatabaseDateTimeHandler,EPiServer.Data.IDatabaseMode)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PlugInDB.SaveDescriptor(EPiServer.PlugIn.PlugInDescriptor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PlugInDB.SaveSettings(System.Int32,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PlugInDB.LoadSettings(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PlugInDB.Load(System.String,System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PlugInDB.LoadPlugInDescriptor(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PlugInDB.LoadAllPlugInDescriptor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PlugInDB.SynchronizeDescriptor(System.String,System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PlugInDB.LoadDescriptor(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PlugInDB.LoadAllDescriptors">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ProjectDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Data.DatabaseDateTimeHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAccess.Internal.ProjectDB" /> class.
             </summary>
      <param name="databaseHandler">The <see cref="T:EPiServer.Data.IDatabaseExecutor" /> that will be used for database communication.</param>
      <param name="dateTimeHandler">The Datetime handler</param>
      <remarks>
             This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
             </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ProjectDB.Save(EPiServer.DataAbstraction.Project)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save <see cref="T:EPiServer.DataAbstraction.Project" /></summary>
      <param name="project">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ProjectDB.Get(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a <see cref="T:EPiServer.DataAbstraction.Project" /></summary>
      <param name="id">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ProjectDB.Delete(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete a <see cref="T:EPiServer.DataAbstraction.Project" /></summary>
      <param name="id">ID of the <see cref="T:EPiServer.DataAbstraction.Project" /></param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ProjectDB.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get all <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> by  <see cref="T:EPiServer.Core.ContentReference" /></summary>
      <param name="contentReferences">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ProjectDB.SaveItems(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ProjectItem})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save or update <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> to a <see cref="T:EPiServer.DataAbstraction.Project" /></summary>
      <param name="projectItems">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.ProjectDB.DeleteItems(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Remove <see cref="T:EPiServer.DataAbstraction.ProjectItem" /> from a <see cref="T:EPiServer.DataAbstraction.Project" /></summary>
      <param name="projectItems">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PropertyDataRecord">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PropertyDefinitionDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Framework.Localization.LocalizationService,EPiServer.DataAbstraction.ITabDefinitionRepository,EPiServer.DataAbstraction.IPropertyDefinitionTypeRepository,EPiServer.Core.PropertySettings.IPropertySettingsRepository,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache,EPiServer.Security.IPrincipalAccessor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.Save(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> to the data repository.
            </summary>
      <param name="propertyDefinition">The property definition to save.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.Delete(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes a <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> from the data repository.
            </summary>
      <param name="propertyDefinition">The <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> to delete.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.GetUsage(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves information about the usage of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </summary>
      <param name="propertyDefinitionID">The property definition ID.</param>
      <param name="onlyNoneMasterLanguage">if set to <c>true</c> only none master langauge are taken into account.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions will be checked.</param>
      <param name="isDynamic">if set to <c>true</c> only dynamic properties will be considered.</param>
      <returns>
            List of <see cref="T:EPiServer.DataAbstraction.ContentUsage" /> which contains information on what contents uses
            the specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.CheckUsage(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves information about if there is any data stored for <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" />.
            </summary>
      <param name="propertyDefinitionID">The property definition ID.</param>
      <param name="onlyNoneMasterLanguage">if set to <c>true</c> only none master langauge are taken into account.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions will be checked.</param>
      <param name="isDynamic">if set to <c>true</c> only dynamic properties will be considered.</param>
      <returns>
            true if there is data stored with for definition.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.ExistsPropertyDefinitionWithContentType(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether there is any property definition of the specified content type.
            </summary>
      <param name="contentTypeID">The content type ID.</param>
      <remarks>
            This would be true for instance if there is a page type that has a property definition of a block with the specified id (contentTypeID)
            </remarks>
      <returns>
        <c>true</c> if there is a property definition of the specified type; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.SaveToDb(EPiServer.DataAbstraction.PropertyDefinition,System.Data.DataSet,EPiServer.DataAbstraction.PropertyDefinitionType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.DeleteFromDb(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.Initialize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executes the static initilization for this class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.Uninitialize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Reverts anything done by the static initialization.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionDB.OnRepositoryUpdated(EPiServer.DataAbstraction.PropertyDefinition,EPiServer.DataAbstraction.RepositoryEventType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise the repository updated event
            </summary>
      <param name="propertyDefinition">The property definition.</param>
      <param name="eventType">Type of the event.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PropertyDefinitionTypeDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Database class for property definition types.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionTypeDB.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionTypeDB.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionTypeDB.Save(EPiServer.DataAbstraction.PropertyDefinitionType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyDefinitionTypeDB.Delete(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PropertyEventArgs">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The event argument used for handling persisting of properties.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyEventArgs.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAccess.Internal.PropertyEventArgs" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.PropertyData,EPiServer.Core.PropertyDataCollection)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAccess.Internal.PropertyEventArgs" /> class with a property data.
            </summary>
      <param name="currentPage">The current page to save the property to.</param>
      <param name="property">The property to save.</param>
      <param name="properties">Other properties.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.PropertyEventArgs.CurrentContentLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content link for the page that is saved.
            </summary>
      <value>The current content link.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.PropertyEventArgs.CurrentPage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the current page to save the property to.
            </summary>
      <value>The current page.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.PropertyEventArgs.Property">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the property to save.
            </summary>
      <value>The property.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.PropertyEventArgs.Properties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the others properties.
            </summary>
      <value>The properties.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PropertySearchDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertySearchDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Data.DatabaseDateTimeHandler,EPiServer.Web.IPermanentLinkMapper)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertySearchDB.FindPagesWithProperty(System.Int32,System.String,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertySearchDB.FindPagesWithCriteria(System.Int32,EPiServer.PropertyCriteriaCollection,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertySearchDB.FindPagesWithSingleCriteria(System.Int32,EPiServer.PropertyCriteria,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PropertyValueConverterFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.SchedulerDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SchedulerDB.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Data.IAsyncDatabaseExecutor})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.SchedulerDB.DefaultMaxLogItems">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default maximum number of log items per job to store in the database: 1000
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.DataAccess.Internal.SchedulerDB.MaxLogItems">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get or sets the maximum number of log items per job to store in the database. Default is <see cref="F:EPiServer.DataAccess.Internal.SchedulerDB.DefaultMaxLogItems" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SchedulerDB.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SchedulerDB.Save(EPiServer.DataAbstraction.ScheduledJob)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SchedulerDB.Add(System.String,System.Boolean,System.String,System.String,System.Byte[],System.DateTime,System.String,System.Int32,System.Boolean@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SchedulerDB.Remove(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SchedulerDB.UpdateRunningState(System.Guid,System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Update the running state for a specific job
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="id">Job</param>
      <param name="isRunning">State</param>
      <param name="resetLastExecutionAttempt">Reset the <see cref="P:EPiServer.DataAbstraction.ScheduledJob.LastExecutionAttempt" /></param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SchedulerDB.UpdateCurrentStatusMessage(System.Guid,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Update the current status message on the job
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="id">Id of the Job</param>
      <param name="statusMessage">Message</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.SiteConfigDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SiteConfigDB.GetValue(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value for a specific site
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="siteId">
      </param>
      <param name="name">
      </param>
      <returns>The value for the site and name requested</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SiteConfigDB.GetValues(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a value for a sites registered
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="name">
      </param>
      <returns>A DataTable containing rows for the property requested (see tblSiteConfig for column definitions)</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SiteConfigDB.SetValue(System.String,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets a value for a specific site
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="siteId">
      </param>
      <param name="name">
      </param>
      <param name="value">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SiteConfigDB.SetValue(System.String,System.String,System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets a value for a specific site
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="siteId">The site id.</param>
      <param name="name">The name.</param>
      <param name="value">The value.</param>
      <param name="compressData">if set to <c>true</c> the value is compressed using UTF8 encoding.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SiteConfigDB.DeleteValue(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes a value for a specific site
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="siteId">
      </param>
      <param name="name">
      </param>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.SiteDefinitionDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.SynchronizeUsersDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Database access routines for users/roles synched from for example Windows membership provider/Windows role provider and 
            users authenticated through Single Sign On.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Data.IAsyncDatabaseExecutor},EPiServer.Security.ClaimTypeOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.ListRolesForUser(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists the roles that the user is a member of.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="userName">Name of the user.</param>
      <returns>A list with the roles.</returns>
      <remarks>
            Note that this routine will only return correct information for a user that
            has been logged on and thereby gets it's roles synched. The role list is simply
            the role list that was current at the time of login, i e it may be out of sync 
            at a later date.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.FindMatchingRoles(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.FindUsersByName(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists users that have logged in and been sycnhed to site.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="userNameToMatch">The user names to match. Set to null to find all user names.</param>
      <returns>A list of user names.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.FindUsersInRole(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.InsertRole(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.DeleteRole(System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.SynchronizeUser(System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Synchronizes the user meta data.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.SynchronizeRoles(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Synchronizes the role memberships for the user.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.ListRoleStatus">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SynchronizeUsersDB.SetVisibilityForRole(System.Boolean,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.TabInfoDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Database class for tab information.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TabInfoDB.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TabInfoDB.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TabInfoDB.Save(System.Data.DataSet)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TabInfoDB.GetDependentPropertyNames(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.UniqueSequenceDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.UniqueSequenceDB.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.UniqueSequenceDB.Next(System.String,System.Int64)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.URLSegmentDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.URLSegmentDB.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAccess.Internal.URLSegmentDB" /> class.
            </summary>
      <param name="databaseHandler">The database handler.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.URLSegmentDB.SetURLSegment(EPiServer.Core.ContentReference,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.URLSegmentDB.FindURLSegmentName(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PropertyAccessBase">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyAccessBase.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyAccessBase.HelpCreateProperty(System.String,System.Object,EPiServer.Core.PropertyData,EPiServer.Core.PropertyDataCollection,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyAccessBase.HelpCreateProperty(System.String,System.Object,EPiServer.Core.PropertyData,EPiServer.Core.PropertyDataCollection,System.Int32,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PropertyAccessBase.HelpAssignValue(EPiServer.Core.PropertyData,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.PageLanguage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.PageLanguage.#ctor(System.Int32,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.PageLanguage.PageID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.PageLanguage.LanguageID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.SubscriptionItem">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SubscriptionItem.#ctor(EPiServer.Core.PageReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.SubscriptionItem.PageLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.SubscriptionItem.UserName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.DataAccess.Internal.SubscriptionItem.LanguageBranches">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.Internal.SubscriptionDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Database class for subscription data.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SubscriptionDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.Data.DatabaseDateTimeHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SubscriptionDB.ListSubscriptionRoots">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.SubscriptionDB.PagesChangedAfter(System.Int32,System.DateTime,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAccess.SaveAction">
      <summary>
            Describes the type of action to perform when saving a content item.
            </summary>
      <remarks>
        <para>
            This enumeration contains both primary commands (CheckIn, Publish, Schedule) that defines the main action and 
            option flags (ForceNewVersion, ForceCurrentVersion) that provide additional information about the save operation.
            </para>
      </remarks>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.Default">
      <summary>
            Save content without updating the status. 
            </summary>
      <remarks>
        <para>
              When the saved content is <see cref="F:EPiServer.Core.VersionStatus.Published" /> or <see cref="F:EPiServer.Core.VersionStatus.PreviouslyPublished" />
              a new version with status <see cref="F:EPiServer.Core.VersionStatus.CheckedOut" /> will be created.
            </para>
        <para>
              When combined with <see cref="F:EPiServer.DataAccess.SaveAction.ForceNewVersion" /> a new version with status <see cref="F:EPiServer.Core.VersionStatus.CheckedOut" /> will be created.
            </para>
      </remarks>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.None">
      <summary>
            Replaced by <see cref="F:EPiServer.DataAccess.SaveAction.Default" />.
            </summary>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.Save">
      <summary>
        <para>
                NOTE: This action has some inconsistent behavior and has been deprecated in favour of either <see cref="F:EPiServer.DataAccess.SaveAction.Default" /> or 
                <see cref="F:EPiServer.DataAccess.SaveAction.CheckOut" /> depending on your needs. This action will be obsoleted and removed in a future version.
            </para>
        <para>
                Save content, leaving it in a checked out state.
            </para>
      </summary>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.CheckIn">
      <summary>
            Save and transition content to <see cref="F:EPiServer.Core.VersionStatus.CheckedIn" /> state.
            </summary>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.Publish">
      <summary>
            Save and publish content. Content will transition to a <see cref="F:EPiServer.Core.VersionStatus.Published" /> state.
            </summary>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.Reject">
      <summary>
            Save and transition content to the <see cref="F:EPiServer.Core.VersionStatus.Rejected" /> state.
            </summary>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.RequestApproval">
      <summary>
        <para>
                NOTE: This is a pre-release saveAction that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            </para>
        <para>
                Save and transition content to <see cref="F:EPiServer.Core.VersionStatus.AwaitingApproval" /> state.
            </para>
      </summary>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.CheckOut">
      <summary>
            Save and transition content to a <see cref="F:EPiServer.Core.VersionStatus.CheckedOut" /> state, 
            creating a new version if not already checked-out.
            </summary>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.Schedule">
      <summary>
            Save and schedule content to be published. Content will transition to a <see cref="F:EPiServer.Core.VersionStatus.DelayedPublish" /> state.
            </summary>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.ForceNewVersion">
      <summary>
            Option that ensures that a new version is created when saving preventing
            the current content from being overwritten.
            </summary>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.ForceCurrentVersion">
      <summary>
            Option that will ensure that the any existing version is updated.
            </summary>
      <remarks>
            This option will be ignored if used when saving a new item.
            </remarks>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.SkipValidation">
      <summary>
            Option that indicates that the content data should not be validated against <see cref="T:EPiServer.Validation.IValidationService" />.
            </summary>
      <remarks>
            Use with caution, especially when publishing content.
            </remarks>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.DelayedPublish">
      <summary>
        <para>
                NOTE: This action has been replaced by the <see cref="F:EPiServer.DataAccess.SaveAction.Schedule" /> primary action and will be removed in a future version.
            </para>
        <para>
                Save and check in content, creating a new version only if necessary and sets the content as delayed publish.
            </para>
      </summary>
      <remarks>
            This action must always be combined with the <see cref="F:EPiServer.DataAccess.SaveAction.CheckIn" /> action when used.
            </remarks>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.SkipSetCommonDraft">
      <summary>
            Option to avoid setting the version as the commond draft in cases where the save results in a new version being created.
            </summary>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.Patch">
      <summary>
            Update the current version without changing the status or trigger any validation.
            </summary>
      <remarks>
            Use with caution, especially with published content.
            </remarks>
    </member>
    <member name="F:EPiServer.DataAccess.SaveAction.ActionMask">
      <summary>
            Mask that can be used to clear option flags from a combined SaveAction value.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.SaveActionExtentions.Command(EPiServer.DataAccess.SaveAction)">
      <summary>
            Gets the primary command of a combined save action.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.SaveActionExtentions.Options(EPiServer.DataAccess.SaveAction)">
      <summary>
            Gets the options part of a combined save action.
            </summary>
    </member>
    <member name="M:EPiServer.DataAccess.SaveActionExtentions.ToReadableString(EPiServer.DataAccess.SaveAction)">
      <summary>
            As the ToString("F") method sometimes confusingly includes "Default" 
            you can use this method when creating exception messages to ensure that it's not included .
            </summary>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAnnotations.AccessAttribute">
      <summary>Defines the ACL list for a typed <see cref="T:EPiServer.DataAbstraction.ContentType" />.</summary>
      <remarks>
        <para>
                    This attribute only has effect if it is paired with the <see cref="T:ContentTypeAttribute" />. The values from this attribute are used 
                    to create the ACL list on the <see cref="T:EPiServer.DataAbstraction.ContentType" /> object. Access rights can be set for Users, Roles and Visitor groups.
                </para>
        <para>
                    Refer to "Attributes" and "Pages, Page Types and Page Templates" under "Content" in the Developer Guide for more information and examples. 
                </para>
      </remarks>
      <example>
                Here is an example on how you can set access on your page type using the Access attribute.
                <code source="../CodeSamples/EPiServer/Core/TypedPageWithAttributeSample.cs" /></example>
      <seealso cref="T:PageTypeAttribute" />
      <seealso cref="T:AvailablePageTypesAttribute" />
    </member>
    <member name="M:EPiServer.DataAnnotations.AccessAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.AccessAttribute" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.AccessAttribute.Access">
      <summary>
            Gets the access level.
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.AccessAttribute.Users">
      <summary>
            Gets the names of the users that has the access level
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.AccessAttribute.Roles">
      <summary>
            Gets the names of the roles that has the access level
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.AccessAttribute.VisitorGroups">
      <summary>
            Gets the names of the visitor groups that has the access level
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.AccessAttribute.NameSeparator">
      <summary>
            Gets or sets the characters used to separate the names for the users, roles, and visitor groups.
            Default value is ",".
            </summary>
    </member>
    <member name="T:EPiServer.DataAnnotations.AdministrationSettingsAttribute">
      <summary>The attribute class used to group content types and check visibility in admin</summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.AdministrationSettingsAttribute.GroupName">
      <summary>
            Gets or sets the name of the content type group
            </summary>
      <value>
            the name of the of the content type group 
            </value>
    </member>
    <member name="P:EPiServer.DataAnnotations.AdministrationSettingsAttribute.Visible">
      <summary>
            Gets or sets whether is visible in admin of the content type group
            </summary>
      <value>
            the visibility in admin of the content type group 
            </value>
    </member>
    <member name="P:EPiServer.DataAnnotations.AdministrationSettingsAttribute.Order">
      <summary>
            Gets or sets the order of the content type group
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.AdministrationSettingsAttribute.CodeOnly">
      <summary>
            Tells the administration UI that all aspects of this content type is defined in code only
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.AdministrationSettingsAttribute.PropertyDefinitionFields">
      <summary>
            Default property fields that should be enabled
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.AdministrationSettingsAttribute.ContentTypeFields">
      <summary>
            Default content type fields that should be enabled
            </summary>
    </member>
    <member name="T:EPiServer.DataAnnotations.AllowedTypesAttribute">
      <summary>
            Assigns types that the property accept or restrict adding.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.AllowedTypesAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.AllowedTypesAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.AllowedTypesAttribute.#ctor(System.Type[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.AllowedTypesAttribute" /> class.
            </summary>
      <param name="allowedTypes">The allowed types. The null value is replaced with IContentData.</param>
    </member>
    <member name="M:EPiServer.DataAnnotations.AllowedTypesAttribute.#ctor(System.Type[],System.Type[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.AllowedTypesAttribute" /> class.
            </summary>
      <param name="allowedTypes">The allowed types. The null value is replaced with IContentData.</param>
      <param name="restrictedTypes">The restricted types</param>
    </member>
    <member name="M:EPiServer.DataAnnotations.AllowedTypesAttribute.#ctor(System.Type[],System.Type[],System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.AllowedTypesAttribute" /> class.
            </summary>
      <param name="allowedTypes">The allowed types. The null value is replaced with IContentData.</param>
      <param name="restrictedTypes">The restricted types</param>
      <param name="typesFormatSuffix">The TypesFormatSuffix</param>
    </member>
    <member name="P:EPiServer.DataAnnotations.AllowedTypesAttribute.AllowedTypesValidators">
            This is injected since instances of attributes are normally created through reflection
        </member>
    <member name="P:EPiServer.DataAnnotations.AllowedTypesAttribute.AllowedTypes">
      <summary>
            Gets or sets the allowed types.
            </summary>
      <remarks>
        <para>Setting value null is treated as all <see cref="T:EPiServer.Core.IContentData" /> types are allowed.</para>
        <para>
          <see cref="P:EPiServer.DataAnnotations.AllowedTypesAttribute.RestrictedTypes" /> has presence over <see cref="P:EPiServer.DataAnnotations.AllowedTypesAttribute.AllowedTypes" /> meaning that if the instance is assignable to any type in <see cref="P:EPiServer.DataAnnotations.AllowedTypesAttribute.RestrictedTypes" /> then will it not be allowed
            regardless if the type is assignable to any type in <see cref="P:EPiServer.DataAnnotations.AllowedTypesAttribute.AllowedTypes" />.
            </para>
      </remarks>
      <value>
            The allowed types.
            </value>
    </member>
    <member name="P:EPiServer.DataAnnotations.AllowedTypesAttribute.RestrictedTypes">
      <summary>
            Gets types which the property is not allowed to contain.
            </summary>
      <remarks>
        <see cref="P:EPiServer.DataAnnotations.AllowedTypesAttribute.RestrictedTypes" /> has presence over <see cref="P:EPiServer.DataAnnotations.AllowedTypesAttribute.AllowedTypes" /> meaning that if the instance is assignable to any type in <see cref="P:EPiServer.DataAnnotations.AllowedTypesAttribute.RestrictedTypes" /> then will it not be allowed
            regardless if the type is assignable to any type in <see cref="P:EPiServer.DataAnnotations.AllowedTypesAttribute.AllowedTypes" />.
            </remarks>
    </member>
    <member name="P:EPiServer.DataAnnotations.AllowedTypesAttribute.AllowedTypesFormatSuffix">
      <summary>
            Gets or sets the allowed types format suffix.
            </summary>
      <value>
            The allowed types format suffix.
            </value>
    </member>
    <member name="P:EPiServer.DataAnnotations.AllowedTypesAttribute.TypesFormatSuffix">
      <summary>
            Gets or sets types format suffix.
            </summary>
      <value>
            The types format suffix.
            </value>
    </member>
    <member name="M:EPiServer.DataAnnotations.AllowedTypesAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAnnotations.AvailableContentTypesAttribute">
      <summary>Defines which content types that should be available under a <see cref="T:EPiServer.DataAbstraction.ContentType" /></summary>
      <remarks>
        <para>
                    The diffent properties of the attribute are applied in the following way:
                </para>
        <list type="bullet">
          <item>
            <description>Include implicitly exclude all PageTypes not in the list.</description>
          </item>
          <item>
            <description>Exclude implicitly include all PageTypes not in the list.</description>
          </item>
          <item>
            <description>
                            IncludeOn and ExcludeOn combine with the settings on the target PageType.
                            If there is a conflict Exclude/ExcludeOn have precedency over Include/IncludeOn.
                        </description>
          </item>
        </list>
        <para>
                    Refer to "Attributes" and "Pages, Page Types and Page Templates" under "Content" in the Developer Guide for more information and examples.
                </para>
      </remarks>
      <example>
                Here is an example on how you can set available page types on your page types using this attribute.
                <code source="../CodeSamples/EPiServer/Core/TypedPageWithAttributeSample.cs" /></example>
      <seealso cref="T:PageTypeAttribute" />
      <seealso cref="T:AccessAttribute" />
    </member>
    <member name="M:EPiServer.DataAnnotations.AvailableContentTypesAttribute.#ctor(EPiServer.DataAbstraction.Availability)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.AvailableContentTypesAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.AvailableContentTypesAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.AvailableContentTypesAttribute" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.AvailableContentTypesAttribute.Include">
      <summary>
            Gets or sets the typed pages that are available under an instance of a page of corresponding <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <value>The available page types.</value>
    </member>
    <member name="P:EPiServer.DataAnnotations.AvailableContentTypesAttribute.Exclude">
      <summary>
            Gets or sets the typed pages that are not available under an instance of a page of corresponding <see cref="T:EPiServer.DataAbstraction.PageType" />.
            </summary>
      <value>The available page types.</value>
    </member>
    <member name="P:EPiServer.DataAnnotations.AvailableContentTypesAttribute.IncludeOn">
      <summary>
            Will make the typed page available as child under the specified typed pages.
            </summary>
      <value>The available page types.</value>
    </member>
    <member name="P:EPiServer.DataAnnotations.AvailableContentTypesAttribute.ExcludeOn">
      <summary>
            Will exclude the typed page from the list of available <see cref="T:EPiServer.DataAbstraction.ContentType" /> for the specified typed pages.
            </summary>
      <value>The available page types.</value>
    </member>
    <member name="P:EPiServer.DataAnnotations.AvailableContentTypesAttribute.Availability">
      <summary>
            Gets or sets wether none <see cref="T:EPiServer.DataAbstraction.ContentType" /> should be available to create under the <see cref="T:EPiServer.DataAbstraction.ContentType" /> that has this attribute set.
            </summary>
      <value>
        <c>true</c> if no <see cref="T:EPiServer.DataAbstraction.ContentType" /> is available; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.DataAnnotations.AvailableContentTypesAttribute.EPiServer#DataAbstraction#RuntimeModel#IContentTypeAvailableModelSetting#Exclude">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.DataAnnotations.AvailableContentTypesAttribute.EPiServer#DataAbstraction#RuntimeModel#IContentTypeAvailableModelSetting#ExcludeOn">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.DataAnnotations.AvailableContentTypesAttribute.EPiServer#DataAbstraction#RuntimeModel#IContentTypeAvailableModelSetting#Include">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.DataAnnotations.AvailableContentTypesAttribute.EPiServer#DataAbstraction#RuntimeModel#IContentTypeAvailableModelSetting#IncludeOn">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAnnotations.BackingTypeAttribute">
      <summary>
            Specifies a type.
            </summary>
      <remarks>
        <para>This attribute is used by page properties to specifiy their types.</para>
        <para>
                    Refer to "Attributes" and "Pages, Page Types and Page Templates" under "Content" in the Developer Guide for more information and examples. 
                </para>
      </remarks>
    </member>
    <member name="M:EPiServer.DataAnnotations.BackingTypeAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.BackingTypeAttribute" /> class.
            </summary>
      <param name="backingType">The type.</param>
    </member>
    <member name="P:EPiServer.DataAnnotations.BackingTypeAttribute.BackingType">
      <summary>
            Gets the <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="T:EPiServer.DataAnnotations.ContentTypeAttribute">
      <summary>The attribute class used to identify content types.</summary>
      <remarks>
        <para>
                    Refer to "Attributes" and "Pages, Page Types and Page Templates" under "Content" in the Developer Guide for more information and examples. 
                </para>
      </remarks>
    </member>
    <member name="P:EPiServer.DataAnnotations.ContentTypeAttribute.AvailableInEditMode">
      <summary>
            Gets or sets wether the corresponding <see cref="T:EPiServer.DataAbstraction.ContentType" /> is available in edit mode.
            </summary>
      <remarks>
        <para>Use <see cref="M:EPiServer.DataAnnotations.ContentTypeAttribute.GetAvailableInEditMode" /> to check if a value has been assigned.</para>
        <para>This setting only affects if a type should be available to create in edit mode, it could still be available to edit if it
            has already been created or if a block is part of a page.</para>
      </remarks>
      <value>
        <c>true</c> if the <see cref="T:EPiServer.DataAbstraction.ContentType" /> is available in edit mode; otherwise, <c>false</c>. Default value is <c>true</c>.
            </value>
    </member>
    <member name="M:EPiServer.DataAnnotations.ContentTypeAttribute.GetAvailableInEditMode">
      <summary>
            Returns the nullable bool for the corresponding property <see cref="P:EPiServer.DataAnnotations.ContentTypeAttribute.AvailableInEditMode" />. 
            </summary>
      <remarks>
            If the usage of the attribute has not set the <see cref="P:EPiServer.DataAnnotations.ContentTypeAttribute.AvailableInEditMode" /> property this will not have any value.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.DataAnnotations.ContentTypeAttribute.GUID">
      <summary>
            Gets or sets the unique id for the corresponding <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <remarks>Use <see cref="M:EPiServer.DataAnnotations.ContentTypeAttribute.GetGUID" /> to check if a value has been assigned.</remarks>
      <value>The unique id of the <see cref="T:EPiServer.DataAbstraction.ContentType" />. Default value is <c>null</c>.</value>
    </member>
    <member name="P:EPiServer.DataAnnotations.ContentTypeAttribute.Order">
      <summary>
            Gets or sets the Order for the corresponding <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <remarks>Use <see cref="M:EPiServer.DataAnnotations.ContentTypeAttribute.GetOrder" /> to check if a value has been assigned.</remarks>
      <value>The sort order or the <see cref="T:EPiServer.DataAbstraction.ContentType" />, default value is <c>0</c>.</value>
    </member>
    <member name="P:EPiServer.DataAnnotations.ContentTypeAttribute.DisplayName">
      <summary>
            Gets or sets the DisplayName for the corresponding <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:EPiServer.DataAnnotations.ContentTypeAttribute.Description">
      <summary>
            Gets or sets the Description for the corresponding <see cref="T:EPiServer.DataAbstraction.ContentType" />.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:EPiServer.DataAnnotations.ContentTypeAttribute.GroupName">
      <summary>
            Gets or sets a value that is used to group fields.
            </summary>
      <value>
            The name of the group.
            </value>
    </member>
    <member name="M:EPiServer.DataAnnotations.ContentTypeAttribute.GetGUID">
      <summary>
            Returns the nullable Guid for the corresponding property <see cref="P:EPiServer.DataAnnotations.ContentTypeAttribute.GUID" />. 
            </summary>
      <remarks>
            If the usage of the attribute has not set the <see cref="P:EPiServer.DataAnnotations.ContentTypeAttribute.GUID" /> property this will not have any value.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAnnotations.ContentTypeAttribute.GetOrder">
      <summary>
            Returns the nullable int for the corresponding property <see cref="P:EPiServer.DataAnnotations.ContentTypeAttribute.Order" />. 
            </summary>
      <remarks>
            If the usage of the attribute has not set the <see cref="P:EPiServer.DataAnnotations.ContentTypeAttribute.Order" /> property this will not have any value.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAnnotations.CultureSpecificAttribute">
      <summary>
            Makes a property culture specific. 
            </summary>
      <remarks>
        <para>A property can either be global (default) or culture specific.</para>
        <para>
                    Refer to "Attributes" and "Pages, Page Types and Page Templates" under "Content" in the Developer Guide for more information and examples. 
                </para>
      </remarks>
    </member>
    <member name="M:EPiServer.DataAnnotations.CultureSpecificAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.CultureSpecificAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.CultureSpecificAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.CultureSpecificAttribute" /> class and sets the <see cref="P:EPiServer.DataAnnotations.CultureSpecificAttribute.IsCultureSpecific" /> value.
            </summary>
      <param name="isCultureSpecific">Sets the value of the <see cref="P:EPiServer.DataAnnotations.CultureSpecificAttribute.IsCultureSpecific" /> property.</param>
    </member>
    <member name="P:EPiServer.DataAnnotations.CultureSpecificAttribute.IsCultureSpecific">
      <summary>
            Gets a value indicating whether the property decorated with this attribute should have separate values for each culture.
            </summary>
      <value>
        <c>true</c> if the property decorated with this attribute should have separate values for each culture; otherwise, <c>false</c>.
            </value>
      <remarks>Default value is <c>true</c>.</remarks>
    </member>
    <member name="T:EPiServer.DataAnnotations.GroupDefinitionsAttribute">
      <summary>Specifies Group definitions type.</summary>
      <remarks>
                This attribute is used to define groupName or <see cref="T:EPiServer.DataAbstraction.TabDefinition" />.
            </remarks>
      <example>
                Here is an example on how you can use the <see cref="T:EPiServer.DataAnnotations.GroupDefinitionsAttribute" /><code>
                [GroupDefinitions]
                public static class GroupNames
                {
                    [Display(Name = "GroupNameDisplayName", Order = 100)]
                    [RequiredAccess(Access = EPiServer.Security.AccessLevel.Read | EPiServer.Security.AccessLevel.Create)]
                    public static String Group = "GroupName";
                }
            </code></example>
    </member>
    <member name="T:EPiServer.DataAnnotations.ImageDescriptorAttribute">
      <summary>
            Represents the image descriptor attribute.
            </summary>
      <remarks>
        <para>This attribute is used by page properties to specifiy the thumbnail image format. For example: width, height of the thumbnail image.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.DataAnnotations.ImageDescriptorAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.ImageDescriptorAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.ImageDescriptorAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.ImageDescriptorAttribute" /> class.
            </summary>
      <param name="height">Thumbnail image height</param>
      <param name="width">Thumbnail image width</param>
    </member>
    <member name="P:EPiServer.DataAnnotations.ImageDescriptorAttribute.Height">
      <summary>
            Gets, sets the thumbnail image height
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.ImageDescriptorAttribute.Width">
      <summary>
            Gets, sets the thumbnail image width
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.ImageDescriptorAttribute.Pregenerated">
      <summary>
            If the thumbnail should be pregenerated when a new image is uploaded rather than when first requested
            </summary>
    </member>
    <member name="T:EPiServer.DataAnnotations.ImageUrlAttribute">
      <summary>
            Assigns an URL to an image describing the object.
            </summary>
      <remarks>
            Used by <see cref="T:EPiServer.DataAbstraction.PageType" /> to set the page type image.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAnnotations.ImageUrlAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.ImageUrlAttribute" /> class.
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="P:EPiServer.DataAnnotations.ImageUrlAttribute.Path">
      <summary>
            Gets the path to the image.
            </summary>
    </member>
    <member name="T:EPiServer.DataAnnotations.PermissionTypesAttribute">
      <summary>
            During initialization classes with this attribute will be scanned for public static properties of type <see cref="T:EPiServer.Security.PermissionType" />.
            Found instances will be registered with <see cref="T:EPiServer.DataAbstraction.PermissionTypeRepository" />.
            </summary>
    </member>
    <member name="T:EPiServer.DataAnnotations.PropertySettingsAttribute">
      <summary>
            Used to define that a specific property setting should be used for a given property.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.PropertySettingsAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.PropertySettingsAttribute" /> class.
            </summary>
      <param name="settingsType">Type of settings entity to use.</param>
    </member>
    <member name="P:EPiServer.DataAnnotations.PropertySettingsAttribute.SettingsType">
      <summary>
            Gets or sets the type of  settings entity.
            </summary>
      <value>The type of the settings class that you want to use.</value>
      <remarks>The settings class needs to inherit from <see cref="T:EPiServer.Core.PropertySettings.PropertySettings" />.</remarks>
    </member>
    <member name="T:EPiServer.DataAnnotations.RequiredAccessAttribute">
      <summary>Defines the Acccess Levels on the typed <see cref="T:EPiServer.DataAbstraction.TabDefinition" />.</summary>
      <remarks>
        <para>
                    This attribute has only effect on the the fields on the type that has been marked with <see cref="T:EPiServer.DataAnnotations.GroupDefinitionsAttribute" />. 
                    The values from this attribute are used to create the Access Level on the <see cref="T:EPiServer.DataAbstraction.TabDefinition" /> object.
                </para>
      </remarks>
      <example>
                Here is an example on how you can set access on your TabDefinition using the RequiredAccess attribute.
            <code>
                [GroupDefinitions]
                public static class GroupNames
                {
                    [Display(Name = "GroupNameDisplayName", Order = 100)]
                    [RequiredAccess(Access = EPiServer.Security.AccessLevel.Read | EPiServer.Security.AccessLevel.Create)]
                    public static String Group = "GroupName";
                }
            </code></example>
      <seealso cref="T:EPiServer.DataAbstraction.TabDefinition" />
    </member>
    <member name="M:EPiServer.DataAnnotations.RequiredAccessAttribute.#ctor">
      <summary>
            Create in instance of <see cref="T:EPiServer.DataAnnotations.RequiredAccessAttribute" /> with Read access level
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.RequiredAccessAttribute.#ctor(EPiServer.Security.AccessLevel)">
      <summary>
            Create in instance of <see cref="T:EPiServer.DataAnnotations.RequiredAccessAttribute" /> with access level
            </summary>
      <param name="access">The access level <see cref="T:EPiServer.Security.AccessLevel" /></param>
    </member>
    <member name="P:EPiServer.DataAnnotations.RequiredAccessAttribute.Access">
      <summary>
            Gets the access level.
            </summary>
    </member>
    <member name="T:EPiServer.DataAnnotations.SearchableAttribute">
      <summary>
            Specifies if a property should be indexed for search.
            </summary>
      <remarks>
        <para>This attribute is used by page properties to specifiy if they should be searchable.</para>
        <para>
                    Refer to "Attributes" and "Pages, Page Types and Page Templates" under "Content" in the Developer Guide for more information and examples. 
                </para>
      </remarks>
    </member>
    <member name="M:EPiServer.DataAnnotations.SearchableAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.SearchableAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.SearchableAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.SearchableAttribute" /> class and sets the <see cref="P:EPiServer.DataAnnotations.SearchableAttribute.IsSearchable" /> value.
            </summary>
      <param name="isSearchable">Sets the value of the <see cref="P:EPiServer.DataAnnotations.SearchableAttribute.IsSearchable" /> property.</param>
    </member>
    <member name="P:EPiServer.DataAnnotations.SearchableAttribute.IsSearchable">
      <summary>
            Gets a value indicating whether the value of the property decorated with this attribute should be included in search results.
            </summary>
      <value>
        <c>true</c> if the value of the property decorated with this attribute should be included in search results; otherwise, <c>false</c>.
            </value>
      <remarks>Default value is <c>true</c>.</remarks>
    </member>
    <member name="T:EPiServer.DeleteContentEventArgs">
      <summary>
            Event arguments used when content is deleted.
            </summary>
    </member>
    <member name="F:EPiServer.DeleteContentEventArgs.DeletedDescendentsKey">
      <summary>
            Key for deleted decentdents in Items
            </summary>
    </member>
    <member name="M:EPiServer.DeleteContentEventArgs.#ctor(EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DeleteContentEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link the event applies to.</param>
    </member>
    <member name="M:EPiServer.DeleteContentEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DeleteContentEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link the event applies to.</param>
      <param name="targetLink">The target link.</param>
    </member>
    <member name="P:EPiServer.DeleteContentEventArgs.DeletedDescendents">
      <summary>
            Gets or sets a list of references to any descendents that will also be deleted from this delete operation.
            </summary>
    </member>
    <member name="T:EPiServer.Diagnostics.Internal.CounterType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Diagnostics.Internal.IPerformanceCounter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Filters.CompareCondition">
      <summary>
            Represents different kind of comparisation types.
            </summary>
    </member>
    <member name="F:EPiServer.Filters.CompareCondition.Equal">
      <summary>
            The objects have the same value.
            </summary>
    </member>
    <member name="F:EPiServer.Filters.CompareCondition.GreaterThan">
      <summary>
            Object A is greater than object B.
            </summary>
    </member>
    <member name="F:EPiServer.Filters.CompareCondition.LessThan">
      <summary>
            Object A is less than object B.
            </summary>
    </member>
    <member name="F:EPiServer.Filters.CompareCondition.NotEqual">
      <summary>
            The objects does not have the same value.
            </summary>
    </member>
    <member name="F:EPiServer.Filters.CompareCondition.StartsWith">
      <summary>
            Object A starts with the value of object B.
            </summary>
      <remarks>Only available for <see cref="F:EPiServer.Core.PropertyDataType.String" /> and <see cref="F:EPiServer.Core.PropertyDataType.LongString" />.</remarks>
    </member>
    <member name="F:EPiServer.Filters.CompareCondition.EndsWith">
      <summary>
            Object A ends with the value of object B.
            </summary>
      <remarks>Only available for <see cref="F:EPiServer.Core.PropertyDataType.String" /> and <see cref="F:EPiServer.Core.PropertyDataType.LongString" />.</remarks>
    </member>
    <member name="F:EPiServer.Filters.CompareCondition.Contained">
      <summary>
            Object B is contained in object A.
            </summary>
      <remarks>Only available for <see cref="F:EPiServer.Core.PropertyDataType.String" />, <see cref="F:EPiServer.Core.PropertyDataType.LongString" /> and <see cref="F:EPiServer.Core.PropertyDataType.Category" />.</remarks>
    </member>
    <member name="T:EPiServer.Filters.FilterSortOrder">
      <summary>
            Predefined sort orders.
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortOrder.None">
      <summary>
            Undefined sort order.
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortOrder.CreatedDescending">
      <summary>
            Most recently created page will be first in list
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortOrder.CreatedAscending">
      <summary>
            Oldest created page will be first in list
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortOrder.Alphabetical">
      <summary>
            Sorted alphabetical on name
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortOrder.Index">
      <summary>
            Sorted on page index
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortOrder.ChangedDescending">
      <summary>
            Most recently changed page will be first in list
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortOrder.Rank">
      <summary>
            Sort on ranking, only supported by special controls
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortOrder.PublishedAscending">
      <summary>
            Oldest published page will be first in list
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortOrder.PublishedDescending">
      <summary>
            Most recently published page will be first in list
            </summary>
    </member>
    <member name="T:EPiServer.GlobalResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:EPiServer.GlobalResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:EPiServer.GlobalResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:EPiServer.GlobalResources.LicenseError">
      <summary>
              Looks up a localized string similar to &lt;div style="z-index: 30000; text-align: left; color: black; font-size: 0.8em; background-color: #e3e1dd; font-family: Verdana, Arial, sans-serif; position: absolute; left: 30%; top: 30%; padding: .5em; width: 40em; border: .1em solid #575757; height: auto;"&gt;&lt;div&gt;There is a license error on this site:&lt;div style="margin: 0.5em 0em; border:solid 1px #575757; background-color:#FFD053; padding-left: 1.0em;"&gt;{0}&lt;/div&gt;The Web site remains functional, but this message will be displayed until the license error has b [rest of string was truncated]";.
            </summary>
    </member>
    <member name="T:EPiServer.IContentCacheRemover">
      <summary>
            Component used to evicit content instances from cache.
            </summary>
    </member>
    <member name="M:EPiServer.IContentCacheRemover.Remove(EPiServer.Core.ContentReference)">
      <summary>
            Remove a content and all including language from cache.
            </summary>
      <param name="contentLink">The content to remove from cache</param>
    </member>
    <member name="M:EPiServer.IContentCacheRemover.Remove(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>
            Remove a contents from cache.
            </summary>
      <param name="contentLinks">The content to remove from cache</param>
    </member>
    <member name="M:EPiServer.IContentCacheRemover.RemoveVersion(EPiServer.Core.ContentReference)">
      <summary>
            Remove a specific content from cache.
            </summary>
      <param name="contentLink">The content to remove from cache</param>
    </member>
    <member name="M:EPiServer.IContentCacheRemover.RemoveLanguage(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Remove a content on a specific language from cache
            </summary>
      <param name="contentLink">The content to remove from cache</param>
      <param name="languageBranch">The language branch of the page to remove</param>
    </member>
    <member name="M:EPiServer.IContentCacheRemover.Clear">
      <summary>
            Clear all contents from cache
            </summary>
    </member>
    <member name="T:EPiServer.IContentLoader">
      <summary>
            Describes a service that can be used to read content data objects from a repository.
            </summary>
    </member>
    <member name="M:EPiServer.IContentLoader.Get``1(System.Guid)">
      <summary>
            Gets the content item represented by the provided GUID.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The content identifier.</param>
      <returns>The requested content item, as the specified type.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentGuid" /> as id.</exception>
    </member>
    <member name="M:EPiServer.IContentLoader.Get``1(System.Guid,EPiServer.Core.LoaderOptions)">
      <summary>
            Gets the content item represented by the provided GUID 
            given the settings specified by <paramref name="settings" />, for example <see cref="P:EPiServer.Core.LanguageLoaderOption.Language" />.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The content identifier.</param>
      <param name="settings">The settings that specifies how content should be loaded.</param>
      <returns>
            The requested content item, as the specified type.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentGuid" /> as id.</exception>
    </member>
    <member name="M:EPiServer.IContentLoader.Get``1(System.Guid,System.Globalization.CultureInfo)">
      <summary>
            Gets the specific language of content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The content identifier.</param>
      <param name="language">The language.</param>
      <returns>
            The requested content item, as the specified type.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentGuid" /> as id.</exception>
    </member>
    <member name="M:EPiServer.IContentLoader.Get``1(EPiServer.Core.ContentReference)">
      <summary>
            Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <returns>The requested content item, as the specified type.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentLink" /> as id.</exception>
    </member>
    <member name="M:EPiServer.IContentLoader.Get``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Gets the specific language of content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="language">The language </param>
      <returns>The requested content item, as the specified type.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentLink" /> as id.</exception>
      <remarks>
            If the <paramref name="contentLink" /> is a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the <paramref name="language" /> is ignored and that specific version is returned.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentLoader.Get``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions)">
      <summary>
            Gets the content item represented by the provided reference
            given the settings specified by <paramref name="settings" />, for example <see cref="P:EPiServer.Core.LanguageLoaderOption.Language" />.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="settings">The settings that specifies how content should be loaded.</param>
      <returns>
            The requested content, as the specified type, in the specified language.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentLink" /> as id.</exception>
    </member>
    <member name="M:EPiServer.IContentLoader.GetChildren``1(EPiServer.Core.ContentReference)">
      <summary>
            Gets the children of the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <returns>The children of the specifed parent, as the specified type.</returns>
    </member>
    <member name="M:EPiServer.IContentLoader.GetChildren``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Gets the children of the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="language">The language.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
    </member>
    <member name="M:EPiServer.IContentLoader.GetChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions)">
      <summary>
            Gets the children of the content item represented by the provided reference
            given the settings specified by <paramref name="settings" />, for example <see cref="P:EPiServer.Core.LanguageLoaderOption.Language" />.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="settings">The settings that specifies how content should be loaded.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
    </member>
    <member name="M:EPiServer.IContentLoader.GetChildren``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Int32,System.Int32)">
      <summary>
            Gets the children of the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="language">The language.</param>
      <param name="startIndex">The index of the first child to return.</param>
      <param name="maxRows">The max number of children to return.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <remarks>
            This is the overload of GetChildren that supports paging.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentLoader.GetChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions,System.Int32,System.Int32)">
      <summary>
            Gets the children of the content item represented by the provided reference
            given the settings specified by <paramref name="settings" />, for example <see cref="P:EPiServer.Core.LanguageLoaderOption.Language" />.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="settings">The settings that specifies how content should be loaded.</param>
      <param name="startIndex">The index of the first child to return.</param>
      <param name="maxRows">The max number of children to return.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <remarks>
            This is the overload of GetChildren that supports paging.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentLoader.GetDescendents(EPiServer.Core.ContentReference)">
      <summary>
            Gets references to the descendents of the specified content.
            </summary>
      <param name="contentLink">A reference to the parent whose descendents should be returned.</param>
      <returns>A list of references to all the descendent of specified content.</returns>
    </member>
    <member name="M:EPiServer.IContentLoader.GetAncestors(EPiServer.Core.ContentReference)">
      <summary>
            Retrieves all content items located above the specified content.
            </summary>
      <param name="contentLink">The reference to the item whose ancestors you want to retrieve.</param>
      <returns>
            A list of all items located above the specified reference.
            </returns>
    </member>
    <member name="M:EPiServer.IContentLoader.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Globalization.CultureInfo)">
      <summary>
            Gets all content items that is represented by the provided references given the language.
            </summary>
      <remarks>
        <para>
            For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
            <paramref name="language" /> is ignored and that specific version is returned.
            </para>
        <para>
             If <paramref name="contentLinks" /> contain duplicate entries only one <see cref="T:EPiServer.Core.IContent" /> instance is returned for the duplicate entries.
            </para>
      </remarks>
      <param name="contentLinks">A list of references to content that should be fetched.</param>
      <param name="language">The language.</param>
      <returns>
            A list of content for the specifed references.
            </returns>
    </member>
    <member name="M:EPiServer.IContentLoader.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Core.LoaderOptions)">
      <summary>
            Gets all content items that is represented by the provided references
            given the settings specified by <paramref name="settings" />, for example <see cref="P:EPiServer.Core.LanguageLoaderOption.Language" />.
            </summary>
      <remarks>
        <para>
            For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
            <paramref name="settings" /> is ignored and that specific version is returned.
            </para>
        <para>
             If <paramref name="contentLinks" /> contain duplicate entries only one <see cref="T:EPiServer.Core.IContent" /> instance is returned for the duplicate entries.
            </para>
      </remarks>
      <param name="contentLinks">A list of references to content that should be fetched.</param>
      <param name="settings">The settings that specifies how content should be loaded.</param>
      <returns>
            A list of content for the specifed references.
            </returns>
    </member>
    <member name="M:EPiServer.IContentLoader.GetBySegment(EPiServer.Core.ContentReference,System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets the child <see cref="T:EPiServer.Core.IContentData" /> instance that has a <see cref="P:EPiServer.Web.Routing.IRoutable.RouteSegment" />
            that matches <paramref name="urlSegment" />.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="language">The preferred language</param>
      <returns>
            The content instance that matches <paramref name="urlSegment" /> or null if no match.
            </returns>
      <remarks>
            The <paramref name="language" /> parameter is only considered when there are multiple content instances matching the <paramref name="urlSegment" />.
            In such cases, content matching the provided language will be preferred ahead of other matches. If none of the content instances matches the language, one of the other instances will be returned.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentLoader.GetBySegment(EPiServer.Core.ContentReference,System.String,EPiServer.Core.LoaderOptions)">
      <summary>
            Gets the child <see cref="T:EPiServer.Core.IContentData" /> instance that has a <see cref="P:EPiServer.Web.Routing.IRoutable.RouteSegment" />
            that matches <paramref name="urlSegment" />.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="settings">The settings to use.</param>
      <returns>
            The content instance that matches <paramref name="urlSegment" /> or null if no match.
            </returns>
      <remarks>
            If LoaderOption contain a <see cref="T:EPiServer.Core.LanguageLoaderOption" />. Then the <see cref="T:EPiServer.Core.LanguageLoaderOption" /> is only considered when there are multiple content instances matching the <paramref name="urlSegment" />.
            In such cases, content matching the provided language will be preferred ahead of other matches. If none of the content instances matches the language, one of the other instances will be returned.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentLoader.TryGet``1(EPiServer.Core.ContentReference,``0@)">
      <summary>
            Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
    </member>
    <member name="M:EPiServer.IContentLoader.TryGet``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,``0@)">
      <summary>
            Gets the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="language">The language.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <remarks>
            If the <paramref name="contentLink" /> is a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the <paramref name="language" /> is ignored and that specific version is returned.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentLoader.TryGet``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions,``0@)">
      <summary>
            Gets the content item represented by the provided reference
             given the settings specified by <paramref name="settings" />, for example <see cref="P:EPiServer.Core.LanguageLoaderOption.Language" />.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="settings">The settings that specifies how content should be loaded.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
    </member>
    <member name="M:EPiServer.IContentLoader.TryGet``1(System.Guid,``0@)">
      <summary>
            Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The unique identifier for the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
    </member>
    <member name="M:EPiServer.IContentLoader.TryGet``1(System.Guid,System.Globalization.CultureInfo,``0@)">
      <summary>
            Gets the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The guid to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="language">The language.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
    </member>
    <member name="M:EPiServer.IContentLoader.TryGet``1(System.Guid,EPiServer.Core.LoaderOptions,``0@)">
      <summary>
            Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The unique identifier for the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
    </member>
    <member name="T:EPiServer.IContentRepository">
      <summary>
                Defines repository methods for <see cref="T:EPiServer.Core.IContent" /> objects. 
            </summary>
    </member>
    <member name="M:EPiServer.IContentRepository.GetLanguageBranches``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieves a collection of <see cref="T:EPiServer.Core.IContentData" /> objects for all languages of the provided content link.
            </summary>
      <param name="contentLink">The reference whose language branches you want to retrieve.</param>
      <returns>A collection of <see cref="T:EPiServer.Core.IContent" /> for all language branches.</returns>
    </member>
    <member name="M:EPiServer.IContentRepository.GetDefault``1(EPiServer.Core.ContentReference)">
      <summary>
            Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesn't have access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.IContentRepository.GetDefault``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from the <paramref name="language" />.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>LanguageResolver
            <param name="parentLink">The parent link.</param><param name="language">The language of the created item.</param><returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns><exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesn't have access right to perform this action
            </exception></member>
    <member name="M:EPiServer.IContentRepository.GetDefault``1(EPiServer.Core.ContentReference,System.Int32)">
      <summary>
            Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <param name="contentTypeID">The ID of the content type that the content item should be created as.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesn't have access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.IContentRepository.GetDefault``1(EPiServer.Core.ContentReference,System.Int32,System.Globalization.CultureInfo)">
      <summary>
            Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from the <paramref name="language" />.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <param name="contentTypeID">The ID of the content type that the content item should be created as.</param>
      <param name="language">The language of the created item.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesn't have access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.IContentRepository.CreateLanguageBranch``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Creates a new language branch for a content item in the specified language.
            </summary>
      <remarks>Access checks are performed during Save. CreateLanguageBranch method returns not persisted in-memory instance.</remarks>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="contentLink">The link to the content to create a language branch for.</param>
      <param name="language">The language.</param>
      <returns>
            An <see cref="T:EPiServer.Core.IContent" /> object for the newly created content in the specified language.
            </returns>
    </member>
    <member name="M:EPiServer.IContentRepository.Copy(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel,EPiServer.Security.AccessLevel,System.Boolean)">
      <summary>
            Creates a copy of a content and it's eventual children and adds the new content(s) under the specicalized destination
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="source">The content that should be copied.</param>
      <param name="destination">The destination where the content will be copied as a child to.</param>
      <param name="requiredSourceAccess">The access rights required on the source content that is to be copied.</param>
      <param name="requiredDestinationAccess">The access rights required on the destination.</param>
      <param name="publishOnDestination">If the new content(s) should be published on the destination.</param>
      <returns>A reference to the new copy of the content.</returns>
      <remarks>
            If <paramref name="publishOnDestination" /> is <c>true</c> the new page will be published immediately at the destination.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentRepository.Delete(EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
      <summary>
            Deletes a content from the repository first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="forceDelete">If set to <c>true</c>, deletes the content even if it is being referenced by other content.</param>
      <param name="access">The required access level that the current user must have to be allowed to delete the content.</param>
    </member>
    <member name="M:EPiServer.IContentRepository.DeleteChildren(EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
      <summary>
            Deletes all the children of a content from the repository
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="forceDelete">If set to <c>true</c>, deletes child even if they are being referenced by other content items..</param>
      <param name="access">The required access level that the current user must have to be allowed to delete the child.</param>
    </member>
    <member name="M:EPiServer.IContentRepository.DeleteLanguageBranch(EPiServer.Core.ContentReference,System.String,EPiServer.Security.AccessLevel)">
      <summary>
            Deletes the specified language branch for a content from the repository 
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The link to the page which will be deleted.</param>
      <param name="languageBranch">The language branch to delete.</param>
      <param name="access">The required access level that the current user must have on the page to be allowed to delete the language branch.</param>
    </member>
    <member name="M:EPiServer.IContentRepository.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel,EPiServer.Security.AccessLevel)">
      <summary>
            Moves a content from it's current location to another position in the content structure
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The content that should be moved.</param>
      <param name="destination">The destination where the content will be moved as a child to.</param>
      <param name="requiredSourceAccess">The minimal access rights required on the source content that is to be moved.</param>
      <param name="requiredDestinationAccess">The minimal access rights required on the destination.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the moved content.</returns>
    </member>
    <member name="M:EPiServer.IContentRepository.MoveToWastebasket(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Moves a page to the wastebasket.
            </summary>
      <param name="contentLink">The content that should be moved to the wastebasket.</param>
      <param name="deletedBy">The user who deleted the content.</param>
    </member>
    <member name="M:EPiServer.IContentRepository.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,EPiServer.Security.AccessLevel)">
      <summary>
            Saves a content to the repository with the provided save action performed 
            first ensuring that the current user meets the minimum access rights requirements.
            </summary>
      <param name="content">An <see cref="T:EPiServer.Core.IContent" /> object containing all the data that should be saved.</param>
      <param name="action">The exact <see cref="T:EPiServer.DataAccess.SaveAction" /> that should be performed.</param>
      <param name="access">The minimum access level that the current user must have to the content.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the saved content.</returns>
    </member>
    <member name="M:EPiServer.IContentRepository.GetReferencesToContent(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Gets the reference information of the references to the specified content and optionally its descendants.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="includeDecendents">if set to <c>true</c> references to descendants is also checked.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.IContentRepository.ListDelayedPublish">
      <summary>
             Lists all content that are set to delayed publish.
            </summary>
      <returns>
            All matching content Versions
            </returns>
    </member>
    <member name="T:EPiServer.IContentRepositoryExtension">
      <summary>
            Extends <see cref="T:EPiServer.IContentRepository" /> with some convinent methods.
            </summary>
    </member>
    <member name="M:EPiServer.IContentRepositoryExtension.Move(EPiServer.IContentRepository,EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Moves content from it's current location to another position in the structure
            first ensuring that the current user has the minimal access rights required at the destination.
            </summary>
      <param name="contentRepository">The <see cref="T:EPiServer.IContentRepository" /> instance to extend.</param>
      <param name="contentLink">The content that should be moved.</param>
      <param name="destination">The destination where the content will be moved as a child to.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the moved content.</returns>
      <remarks>
            The user will always need at least Create access at the destination and 
            if the page is published the user will Publish access as well unless the destination is 
            the wastebasket.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentRepositoryExtension.Copy(EPiServer.IContentRepository,EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Creates a copy of a content object and it's eventual children and adds the new content under the specified destination
            first ensuring that the current user has read access to the source and create access on the destination.
            </summary>
      <param name="contentRepository">The <see cref="T:EPiServer.IContentRepository" /> instance to extend.</param>
      <param name="source">The content that should be copied.</param>
      <param name="destination">The destination where the page will be copied as a child to.</param>
      <returns>A reference to the new copy of the content.</returns>
      <remarks>
        <para>
            If the user has publishing rights on the destination the new content will be published immediately.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.IContentRepositoryExtension.Save(EPiServer.IContentRepository,EPiServer.Core.IContent)">
      <summary>
            Saves a content to the repository first ensuring that the current user meets the mininum access rights requirements.
            </summary>
      <param name="repository">The <see cref="T:EPiServer.IContentRepository" /> instance to extend.</param>
      <param name="content">An <see cref="T:EPiServer.Core.IContent" /> object containing all the data that should be saved.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the saved content version.</returns>
      <remarks>
            The minimum access rights required will be dependent on the current status of the content.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentRepositoryExtension.Save(EPiServer.IContentRepository,EPiServer.Core.IContent,EPiServer.Security.AccessLevel)">
      <summary>
            Saves a content to the repository first ensuring that the current user meets the provided access rights requirements.
            </summary>
      <param name="repository">The <see cref="T:EPiServer.IContentRepository" /> instance to extend.</param>
      <param name="content">An <see cref="T:EPiServer.Core.IContent" /> object containing all the data that should be saved.</param>
      <param name="access">The minimum access level that the current user must have to save the content.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the saved content version.</returns>
    </member>
    <member name="M:EPiServer.IContentRepositoryExtension.Save(EPiServer.IContentRepository,EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
      <summary>
            Saves a content to the repository with the provided save action performed 
            first ensuring that the current user meets the mininum access rights requirements.
            </summary>
      <param name="repository">The <see cref="T:EPiServer.IContentRepository" /> instance to extend.</param>
      <param name="content">An <see cref="T:EPiServer.Core.IContent" /> object containing all the data that should be saved.</param>
      <param name="action">The exact <see cref="T:EPiServer.DataAccess.SaveAction" /> that should be performed.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the saved content version.</returns>
      <remarks>
            The minimum access rights required is dependent on the current status of the content and 
            the exact <paramref name="action" /> that should be performed.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentRepositoryExtension.Publish(EPiServer.IContentRepository,EPiServer.Core.IContent)">
      <summary>
            Publishes a content item to the repository first ensuring that the current user meets the mininum access rights requirements.
            </summary>
      <param name="repository">The <see cref="T:EPiServer.IContentRepository" /> instance to extend.</param>
      <param name="content">An <see cref="T:EPiServer.Core.IContent" /> object containing all the data that should be saved and published.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the published content version.</returns>
      <remarks>
            The minimum access rights required is dependent on if the content is new and if the content is modifed or not.
            </remarks>
    </member>
    <member name="M:EPiServer.IContentRepositoryExtension.Publish(EPiServer.IContentRepository,EPiServer.Core.IContent,EPiServer.Security.AccessLevel)">
      <summary>
            Publishes a content item to the repository first ensuring that the current user meets the provided access rights requirements.
            </summary>
      <param name="repository">The <see cref="T:EPiServer.IContentRepository" /> instance to extend.</param>
      <param name="content">An <see cref="T:EPiServer.Core.IContent" /> object containing all the data that should be saved.</param>
      <param name="access">The minimum access level that the current user must have to publish the content.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the published content version.</returns>
    </member>
    <member name="M:EPiServer.IContentRepositoryExtension.Delete(EPiServer.IContentRepository,EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Deletes a content from the repository first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="repository">The repository.</param>
      <param name="contentLink">The content link.</param>
      <param name="forceDelete">If set to <c>true</c>, deletes the content even if it is being referenced by other content.</param>
    </member>
    <member name="M:EPiServer.IContentRepositoryExtension.CreateLanguageBranch``1(EPiServer.IContentRepository,EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)">
      <summary>
            Creates a new language branch for a content item in the specified language.
            </summary>
      <remarks>Access checks are performed during Save. CreateLanguageBranch method returns not persisted in-memory instance.</remarks>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="contentRepository">The content repository.</param>
      <param name="contentLink">The link to the content to create a language branch for.</param>
      <param name="languageSelector">The selector.</param>
      <returns>
            An <see cref="T:EPiServer.Core.IContent" /> object for the newly created content in the specified language.
            </returns>
    </member>
    <member name="M:EPiServer.IContentRepositoryExtension.MoveToWastebasket(EPiServer.IContentRepository,EPiServer.Core.ContentReference)">
      <summary>
            Moves content from it's current location to Wastebasket position in the structure with the current user name
            </summary>
      <param name="contentRepository">The content repository.</param>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="T:EPiServer.Initialization.CmsCoreInitialization">
      <summary>
            When this module is initialized the EPiServer CMS runtime is initialized.
            </summary>
    </member>
    <member name="M:EPiServer.Initialization.CmsCoreInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inherit-doc />
    </member>
    <member name="M:EPiServer.Initialization.CmsCoreInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inherit-doc />
    </member>
    <member name="T:EPiServer.Initialization.Internal.CmsDataInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.CmsRuntimeInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.ContentCacheInitialization.#ctor(EPiServer.Core.Internal.IContentCacheHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Test Only
            </summary>
      <param name="contentCacheHandler">
      </param>
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.ContentLanguageSettingsEventInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.EnsureRemoteVersionKeyInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.ModelSyncInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.ParentRestoreInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.ParentRestoreInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes the specified context.
            </summary>
      <param name="context">The context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.ParentRestoreInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Uninitializes the specified context.
            </summary>
      <param name="context">The context.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.PendingDeletedBlobEventInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.PermanentLinkMapperCacheInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.PermanentLinkMapperCacheInitialization.RemovePageFromCache(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes link information about the page from link store cache.
            </summary>
      <param name="contentLink">The page link.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.PlugInInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.QueryableNotificationUsersInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.TransferInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.WebIdentityInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.WebIdentityInitialization.ValidateUriAgainstAppRoot(System.Uri,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the URI against app root.
            </summary>
      <param name="uri">The URI.</param>
      <param name="appRoot">The app root.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.DelayedNotificationMessage">
      <summary>
            A Notification message that can be sent between users. 
            It has a minimum time to wait before the message should be sent.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.DelayedNotificationMessage.Delay">
      <summary>
            Specifies the minimum time to wait before the message should be sent.
            </summary>
      <remarks>The actual send time is dependent on the settings for the scheduled job
            that dispatches messages.</remarks>
    </member>
    <member name="T:EPiServer.Notification.FormatterNotificationMessage">
      <summary>
            Notification message used in <see cref="T:EPiServer.Notification.INotificationFormatter" /></summary>
    </member>
    <member name="M:EPiServer.Notification.FormatterNotificationMessage.#ctor(System.Int32)">
      <summary>
            Constructor for creating a FormatterNotificationMessage.
            </summary>
      <param name="messageId">A message id </param>
    </member>
    <member name="M:EPiServer.Notification.FormatterNotificationMessage.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Constructor for creating a FormatterNotificationMessage made out of multiple messages.
            </summary>
      <param name="messageIds">List of message ids </param>
    </member>
    <member name="P:EPiServer.Notification.FormatterNotificationMessage.SenderName">
      <summary>
            The name of the Sender.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.FormatterNotificationMessage.Category">
      <summary>
            The category of the message.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.FormatterNotificationMessage.TypeName">
      <summary>
            The type of the message.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.FormatterNotificationMessage.Subject">
      <summary>
            The subject of the message
            </summary>
    </member>
    <member name="P:EPiServer.Notification.FormatterNotificationMessage.Content">
      <summary>
            The content of the message
            </summary>
    </member>
    <member name="P:EPiServer.Notification.FormatterNotificationMessage.ContainedIDs">
      <summary>
            The id(s) of the message(s) that was used to create this message. 
            </summary>
    </member>
    <member name="T:EPiServer.Notification.INotificationChannelOptionsRegistry">
      <summary>
            Registry for options used to control how notifications within a specific <see cref="P:EPiServer.Notification.NotificationMessage.ChannelName" /> should be handled.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.INotificationChannelOptionsRegistry.Add(System.String,EPiServer.Notification.NotificationChannelOptions)">
      <summary>
            Add or register an option for channel name
            </summary>
      <param name="channelName">The channel name</param>
      <param name="options">Notification options</param>
    </member>
    <member name="M:EPiServer.Notification.INotificationChannelOptionsRegistry.Get(System.String)">
      <summary>
            Get the <see cref="T:EPiServer.Notification.NotificationChannelOptions" /> for the channel name.
            </summary>
      <param name="channelName">The channel name</param>
      <returns>Notification option</returns>
    </member>
    <member name="M:EPiServer.Notification.INotificationChannelOptionsRegistry.Remove(System.String)">
      <summary>
            Remove or Unregister the option for the channel name
            </summary>
      <param name="channelName">The channel name</param>
    </member>
    <member name="T:EPiServer.Notification.INotificationFormatter">
      <summary>
            Signature for components that formats <see cref="T:EPiServer.Notification.NotificationMessage" />.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.INotificationFormatter.SupportedChannelNames">
      <summary>
            Specifies which channels the formatter supports.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.INotificationFormatter.FormatMessagesAsync(System.Collections.Generic.IEnumerable{EPiServer.Notification.FormatterNotificationMessage},System.String,EPiServer.Notification.NotificationFormat,System.String)">
      <summary>
            Performs formatting of messages.
            </summary>
      <remarks>One use case for a formatter might be to combine several messages into one.</remarks>
      <param name="notifications">Messages to format</param>
      <param name="recipient">The receiver of the message</param>
      <param name="format">The format to format to</param>
      <param name="channelName">The message channel</param>
      <returns>A list of formatted messages</returns>
    </member>
    <member name="T:EPiServer.Notification.INotificationPreferenceRegister">
      <summary>
            Signature for a component that can be used to register a default preference resolver.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.INotificationPreferenceRegister.RegisterDefaultPreference(System.String,System.String,System.Func{System.String,System.String})">
      <summary>
            Register a default preference resolver for a channel and a provider.
            </summary>
      <param name="channelName">The channel</param>
      <param name="providerName">the provider</param>
      <param name="addressResolver">a delegate that resolves a provider specific address from a username</param>
    </member>
    <member name="T:EPiServer.Notification.INotificationProvider">
      <summary>
            Signature for a component that can send <see cref="T:EPiServer.Notification.NotificationMessage" />.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.INotificationProvider.ProviderName">
      <summary>
            Gets the name of the provider.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.INotificationProvider.GetProviderFormat">
      <summary>
            Specifie the format the provider supports.
            </summary>
      <returns>Supported format.</returns>
    </member>
    <member name="M:EPiServer.Notification.INotificationProvider.SendAsync(System.Collections.Generic.IEnumerable{EPiServer.Notification.ProviderNotificationMessage},System.Action{EPiServer.Notification.ProviderNotificationMessage},System.Action{EPiServer.Notification.ProviderNotificationMessage,System.Exception})">
      <summary>
            Sends the formatted messages.
            </summary>
      <param name="messages">The messages to send.</param>
      <param name="succeededAction">A success action that should be called for successfully sent messages.</param>
      <param name="failedAction">A failure action that should be called when a message send operation fails.</param>
    </member>
    <member name="T:EPiServer.Notification.INotificationProviderStatus">
      <summary>
            By applying to a INotificationProvider implementation, gives the possibility to disable a provider
            </summary>
    </member>
    <member name="P:EPiServer.Notification.INotificationProviderStatus.IsDisabled">
      <summary>
            Specifies whether or not the provider is disabled
            </summary>
    </member>
    <member name="P:EPiServer.Notification.INotificationProviderStatus.DisabledReason">
      <summary>
            The reason that the provider is disabled
            </summary>
    </member>
    <member name="T:EPiServer.Notification.INotificationUser">
      <summary>
            Define the properties and members for a notification user.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.INotificationUser.UserName">
      <summary>
            Gets the name of user.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.INotificationUser.DisplayName">
      <summary>
            Gets the display name.
            </summary>
    </member>
    <member name="T:EPiServer.Notification.INotificationUserEmail">
      <summary>
            Define the properties and members for a notification user by email.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.INotificationUserEmail.EmailAddress">
      <summary>
            Gets the e-mail address.
            </summary>
    </member>
    <member name="T:EPiServer.Notification.INotifier">
      <summary>
            Class for sending NotificationMessages
            </summary>
    </member>
    <member name="M:EPiServer.Notification.INotifier.PostNotificationAsync(EPiServer.Notification.NotificationMessage)">
      <summary>
            Posts a message for delivery. The delivery of the message depends on user settings, which <see cref="T:EPiServer.Notification.INotificationFormatter" /> and
            <see cref="T:EPiServer.Notification.INotificationProvider" /> that are registered. 
            </summary>
      <remarks>
        <para>
          <see cref="T:EPiServer.Notification.INotificationChannelOptionsRegistry" /> can be used to configure if an message should be processed immediately or scheduled. By default are messages processed scheduled.
            </para>
        <para>
            When <see cref="M:EPiServer.Notification.INotifier.PostNotificationAsync(EPiServer.Notification.NotificationMessage)" /> is completed the messages is stored for send processing. However even if <see cref="P:EPiServer.Notification.NotificationChannelOptions.Immediate" /> is configured 
            for channel the actual send process is done in background, in case of <see cref="P:EPiServer.Notification.NotificationChannelOptions.Immediate" /> the processing is triggered without waiting for next scheduling. 
            </para>
      </remarks>
      <param name="notification">The message to send.</param>
    </member>
    <member name="E:EPiServer.Notification.INotifier.NotificationPosted">
      <summary>
            Occurs when a message is notified.
            </summary>
    </member>
    <member name="E:EPiServer.Notification.INotifier.NotificationSaved">
      <summary>
            Occurs when a message is saved.
            </summary>
    </member>
    <member name="E:EPiServer.Notification.INotifier.NotificationFiltered">
      <summary>
            Occurs when a message is filtered.
            </summary>
    </member>
    <member name="T:EPiServer.Notification.Internal.DefaultNotificationOptionsRegistry">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Signature for components that formats <see cref="T:EPiServer.Notification.NotificationMessage" />.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Notification.Internal.DefaultNotificationOptionsRegistry.Add(System.String,EPiServer.Notification.NotificationChannelOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <remarks>If the channel name exists then throws <see cref="T:System.InvalidOperationException" /></remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Notification.Internal.DefaultNotificationOptionsRegistry.Get(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Notification.Internal.DefaultNotificationOptionsRegistry.Remove(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.DefaultNotifier">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.DispatcherResult">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.DispatcherResult.ProviderSentResults">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get all the result from the providers.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.DispatcherResult.TotalSucceededSentMessage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the number of succeeded sent messages.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.DispatcherResult.TotalFailedSentMessage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the number of failed sent messages.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.DispatcherResult.ActiveProvidersCount">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get or sets the total number of active (not disabled) providers 
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.DispatcherResult.HasBeenCancelled">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets a value indicating if the operation has been cancelled.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.EmailNotificationProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.INotificationDispatcher">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.INotificationRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.INotificationUserRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Signature for a component that can be used to register <see cref="T:EPiServer.Notification.Internal.NotificationPreference" />.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.InternalNotificationMessage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.IQueryablePreference">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.IQueryablePreference.SortOrder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This is the order in which the implementations are called. First value returned is used. Default is 
            Profile based value set to 10 and values synched from user set to 20.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.ISmtpClient">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.ISubscriptionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.NotificationDispatcherJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.NotificationPreference">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.NotificationProviderResult">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The notification provider result.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.NotificationProviderResult.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The name of the provider.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Notification.Internal.NotificationProviderResult.TotalSucceededSentMessage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Number of succeeded message for the provider.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Notification.Internal.NotificationProviderResult.TotalFailedSentMessage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The number of failed message for the provider.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.NotificationProviderResult.IsDisabled">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Whether or not the provider is disabled
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.NotificationProviderResult.DisabledReason">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The reason that the provider is disabled
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.NotificationProviderResult.ErrorMessages">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The error messages.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.NotificationUserEmail">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Define notification user with email.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Notification.Internal.NotificationUserEmail.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance of <see cref="T:EPiServer.Notification.Internal.NotificationUserEmail" /></summary>
      <param name="userName">The userName for the corresponding user.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.NotificationUserEmail.EmailAddress">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.PagedInternalNotificationMessageResult">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.QueryableNotificationUsersImpl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.SmtpClientFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Notification.Internal.SmtpClientFactory.StaticFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This is exposed mainly for testing purposes.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.IQueryableNotificationUsers">
      <summary>
            Defines the members for a queryable user notification.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.IQueryableNotificationUsers.FindAsync(System.String,System.Int32,System.Int32)">
      <summary>
            Asynchronously finds users by criterion.
            </summary>
      <param name="partOfUser">Part of username, Email or displayname.</param>
      <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
      <param name="pageSize">The size of the page of results to return.</param>
      <returns>A PagedNotificationUserResult collection that contains a page of pageSize INotificationUser objects beginning at the page specified by pageIndex and total objects.</returns>
    </member>
    <member name="T:EPiServer.Notification.ISubscriptionService">
      <summary>
            Class for handling Notification Subscriptions 
            </summary>
    </member>
    <member name="M:EPiServer.Notification.ISubscriptionService.SubscribeAsync(System.Uri,EPiServer.Notification.INotificationUser)">
      <summary>
            Adds a Subscription for a user.
            </summary>
      <param name="subscriptionKey">The key of the Subscription</param>
      <param name="user">The user to subscribe</param>
    </member>
    <member name="M:EPiServer.Notification.ISubscriptionService.SubscribeAsync(System.Uri,System.Collections.Generic.IEnumerable{EPiServer.Notification.INotificationUser})">
      <summary>
            Adds a Subscription for a list of users.
            </summary>
      <param name="subscriptionKey">The key of the Subscription</param>
      <param name="users">The users to subscribe</param>
    </member>
    <member name="M:EPiServer.Notification.ISubscriptionService.UnsubscribeAsync(System.Uri,EPiServer.Notification.INotificationUser)">
      <summary>
            Removes a Subscription for a user.
            </summary>
      <param name="subscriptionKey">The key of the Subscription</param>
      <param name="user">The user to unsubscribe</param>
    </member>
    <member name="M:EPiServer.Notification.ISubscriptionService.UnsubscribeAsync(System.Uri,System.Collections.Generic.IEnumerable{EPiServer.Notification.INotificationUser})">
      <summary>
            Removes a Subscription for a list of users.
            </summary>
      <param name="subscriptionKey">The key of the Subscription</param>
      <param name="users">The users to unsubscribe</param>
    </member>
    <member name="E:EPiServer.Notification.ISubscriptionService.UserSubscribed">
      <summary>
            Occurs when a subscription is made for a user.
            </summary>
    </member>
    <member name="E:EPiServer.Notification.ISubscriptionService.UserUnsubscribed">
      <summary>
            Occurs when an unsubscription is made for a user.
            </summary>
    </member>
    <member name="E:EPiServer.Notification.ISubscriptionService.UserCleared">
      <summary>
            Occurs when a ClearUser is made for a user.
            </summary>
    </member>
    <member name="E:EPiServer.Notification.ISubscriptionService.SubscriptionCleared">
      <summary>
            Occurs when a ClearSubscription is made for a subscription.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.ISubscriptionService.ListSubscribersAsync(System.Uri)">
      <summary>
            Lists the users that subcribes to the Subscription.
            </summary>
      <param name="subscriptionKey">The key of the Subscription</param>
      <returns>List of users</returns>
    </member>
    <member name="M:EPiServer.Notification.ISubscriptionService.FindSubscribersAsync(System.Uri)">
      <summary>
            Finds all users that has subscriptions that matches the subscription key. 
            The method will make partially matches. It will return the subscribers that subscribes
            to a parent segment (part of the uri delimited by slashes) of the key.
            </summary>
      <param name="subscriptionKey">The key of a Subscription or a part of one</param>
      <returns>List of users</returns>
    </member>
    <member name="M:EPiServer.Notification.ISubscriptionService.ListSubscriptionsAsync(EPiServer.Notification.INotificationUser)">
      <summary>
            Lists the Subscriptions for a user.
            </summary>
      <param name="user">The user</param>
      <returns>List of Subscriptions</returns>
    </member>
    <member name="M:EPiServer.Notification.ISubscriptionService.ListSubscriptionsAsync(System.Uri)">
      <summary>
            Lists the Subscriptions that starts with a subscription key.
            Note that this is recursive and includes all Subscriptions starting with the key.
            </summary>
      <param name="subscriptionKey">The key of the Subscription</param>
      <returns>List of Subscriptions</returns>
    </member>
    <member name="M:EPiServer.Notification.ISubscriptionService.ClearUserAsync(EPiServer.Notification.INotificationUser)">
      <summary>
            Clears(deletes) all subscriptions for a user.
            </summary>
      <param name="user">The user to clear</param>
    </member>
    <member name="M:EPiServer.Notification.ISubscriptionService.ClearSubscriptionAsync(System.Uri)">
      <summary>
            Clears(deletes) all subscriptions found under a Subscription key.
            Note that this is recursive and includes all Subscriptions starting with the key.
            </summary>
      <param name="subscriptionKey">The Subscription to clear</param>
    </member>
    <member name="T:EPiServer.Notification.IUserNotificationFormatter">
      <summary>
            Used for formatting <see cref="T:EPiServer.Notification.UserNotificationMessage" />.
            </summary>
      <remarks>
            When using the GetUserNotification(s)-methods in the interface IUserNotificationRepository, formatting will be done depending on the UserNotificationFormattingMode.
            If the message shall be formatted, it is automatically resolved which formatter that should be used.
            </remarks>
    </member>
    <member name="P:EPiServer.Notification.IUserNotificationFormatter.SupportedChannelNames">
      <summary>
            Specifies which channels the formatter supports.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.IUserNotificationFormatter.FormatUserMessageAsync(EPiServer.Notification.UserNotificationMessage)">
      <summary>
            Performs formatting of messages.
            </summary>
      <param name="notification">Message to format</param>
      <returns>A formatted message</returns>
    </member>
    <member name="T:EPiServer.Notification.IUserNotificationRepository">
      <summary>
            Class for listing UserNotificationMessages
            </summary>
    </member>
    <member name="M:EPiServer.Notification.IUserNotificationRepository.MarkUserNotificationAsReadAsync(EPiServer.Notification.INotificationUser,System.Int32)">
      <summary>
            Marks a message as read.
            </summary>
      <param name="user">The recipient of the message.</param>
      <param name="notificationId">The message to mark as read.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Notification.IUserNotificationRepository.MarkUserNotificationsAsReadAsync(EPiServer.Notification.INotificationUser)">
      <summary>
            Marks all messages for a user as read.
            </summary>
      <param name="user">The recipient of the message.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Notification.IUserNotificationRepository.MarkUserNotificationsAsReadAsync(EPiServer.Notification.INotificationUser,System.String)">
      <summary>
            Marks all messages for a user on a specific channel as read.
            </summary>
      <param name="user">The recipient of the message.</param>
      <param name="channelName">The name of the channel.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Notification.IUserNotificationRepository.GetUserNotificationAsync(EPiServer.Notification.INotificationUser,System.Int32,EPiServer.Notification.UserNotificationFormattingMode)">
      <summary>
            Gets a single <see cref="T:EPiServer.Notification.UserNotificationMessage" /> given its id.
            </summary>
      <param name="user">The recipient of the message.</param>
      <param name="notificationId">The id of the message.</param>
      <param name="formattingMode">The formatting mode of the result.</param>
      <returns>A message.</returns>
    </member>
    <member name="M:EPiServer.Notification.IUserNotificationRepository.GetUserNotificationsAsync(EPiServer.Notification.UserNotificationsQuery,System.Int64,System.Int32,EPiServer.Notification.UserNotificationFormattingMode)">
      <summary>
            Gets a paged list of messages for a user.
            </summary>
      <param name="query">Query information</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="formattingMode">The formatting mode of the result.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Notification.IUserNotificationRepository.GetUserNotificationsCountAsync(EPiServer.Notification.UserNotificationsQuery)">
      <summary>
            Gets the total number of messages for a user.
            </summary>
      <param name="query">Query information</param>
      <returns>
      </returns>
    </member>
    <member name="E:EPiServer.Notification.IUserNotificationRepository.UserNotificationRead">
      <summary>
            Occurs when a notification is marked as read.
            </summary>
    </member>
    <member name="E:EPiServer.Notification.IUserNotificationRepository.UserNotificationReads">
      <summary>
            Occurs when the MarkUserNotificationAsRead method is called.
            </summary>
    </member>
    <member name="E:EPiServer.Notification.IUserNotificationRepository.UserNotificationMissing">
      <summary>
            Occurs when notification cannot be found by its id.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.UserNotificationRepositoryExtensions.GetUserNotificationAsync(EPiServer.Notification.IUserNotificationRepository,EPiServer.Notification.INotificationUser,System.Int32)">
      <summary>
            Gets a single unformatted <see cref="T:EPiServer.Notification.UserNotificationMessage" /> given its id.
            </summary>
      <param name="repository">The usernotification repository that is being extended</param>
      <param name="user">The recipient of the message.</param>
      <param name="notificationId">The id of the message.</param>
      <returns>A message.</returns>
    </member>
    <member name="M:EPiServer.Notification.UserNotificationRepositoryExtensions.GetUserNotificationsAsync(EPiServer.Notification.IUserNotificationRepository,EPiServer.Notification.UserNotificationsQuery,System.Int64,System.Int32)">
      <summary>
            Gets a paged list of unformatted messages for a user.
            </summary>
      <param name="repository">The usernotification repository that is being extended</param>
      <param name="query">Query information</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Notification.NotificationChannelOptions">
      <summary>
            Options for <see cref="P:EPiServer.Notification.NotificationMessage.ChannelName" /></summary>
    </member>
    <member name="M:EPiServer.Notification.NotificationChannelOptions.#ctor(System.Boolean)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Notification.NotificationChannelOptions" /></summary>
      <param name="immediate">
      </param>
    </member>
    <member name="P:EPiServer.Notification.NotificationChannelOptions.Immediate">
      <summary>
            Indicates if <see cref="T:EPiServer.Notification.NotificationMessage" /> posted on the associated <see cref="P:EPiServer.Notification.NotificationMessage.ChannelName" /> should be processed immediately
            </summary>
    </member>
    <member name="T:EPiServer.Notification.NotificationEventArgs">
      <summary>
            Arguments for a NotificationMessage event.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.NotificationEventArgs.NotificationMessage">
      <summary>
            NotificationMessage property
            </summary>
    </member>
    <member name="T:EPiServer.Notification.NotificationFormat">
      <summary>
            Specifies the format for a <see cref="T:EPiServer.Notification.NotificationMessage" /></summary>
    </member>
    <member name="T:EPiServer.Notification.NotificationMessage">
      <summary>
            A Notification message that can be sent between users.
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.NotificationMessage.ID">
      <summary>
            The ID of the message.
            </summary>
      <remarks>Will be 0 if the message haven't been saved</remarks>
    </member>
    <member name="P:EPiServer.Notification.NotificationMessage.Sender">
      <summary>
            The sender of the message
            </summary>
    </member>
    <member name="P:EPiServer.Notification.NotificationMessage.Recipients">
      <summary>
            The receivers for the message
            </summary>
    </member>
    <member name="P:EPiServer.Notification.NotificationMessage.ChannelName">
      <summary>
            The name of the channel for the name.
            </summary>
      <remarks>
            It is the <see cref="P:EPiServer.Notification.NotificationMessage.ChannelName" /> in combination with user settings
            that controls which <see cref="T:EPiServer.Notification.INotificationFormatter" /> and <see cref="T:EPiServer.Notification.INotificationProvider" />
            that will be used to format and send the message.
            </remarks>
    </member>
    <member name="P:EPiServer.Notification.NotificationMessage.Category">
      <summary>
            The category of the message.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.NotificationMessage.TypeName">
      <summary>
            The type of the message.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.NotificationMessage.Subject">
      <summary>
            The message subject
            </summary>
    </member>
    <member name="P:EPiServer.Notification.NotificationMessage.Content">
      <summary>
            The content of the message
            </summary>
    </member>
    <member name="T:EPiServer.Notification.NotificationOptions">
      <summary>
            Specifies settings used by notification system
            </summary>
    </member>
    <member name="P:EPiServer.Notification.NotificationOptions.NotificationEmailAddress">
      <summary>
            System default email address for notification emails.
            </summary>
      <remarks>This value is empty by default.</remarks>
    </member>
    <member name="P:EPiServer.Notification.NotificationOptions.NotificationEmailDisplayName">
      <summary>
            System default sender name for no notification emails.
            </summary>
      <remarks>The default name is 'Episerver'.</remarks>
    </member>
    <member name="T:EPiServer.Notification.NotificationUser">
      <summary>
            Represents a sender or a recipient in the notification system.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.NotificationUser.#ctor(System.String)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Notification.NotificationUser" /></summary>
      <param name="userName">The userName for the user.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if userName is null or empty.</exception>
    </member>
    <member name="P:EPiServer.Notification.NotificationUser.UserName">
      <summary>
            The userName for the corresponding user.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.NotificationUser.DisplayName">
      <summary>
            The display name for the corresponding user.
            </summary>
    </member>
    <member name="T:EPiServer.Notification.PagedNotificationUserResult">
      <summary>
            Represents a paged result set for notification users.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.PagedNotificationUserResult.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Notification.INotificationUser},System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Notification.PagedNotificationUserResult" /> class.
            </summary>
      <param name="users">The users.</param>
      <param name="totalCount">The total count.</param>
    </member>
    <member name="T:EPiServer.Notification.PagedUserNotificationMessageResult">
      <summary>
            Represents a paged result set for user notification messages.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.PagedUserNotificationMessageResult.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Notification.UserNotificationMessage},System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Notification.PagedUserNotificationMessageResult" /> class.
            </summary>
      <param name="messages">The messages.</param>
      <param name="totalCount">The total count.</param>
    </member>
    <member name="T:EPiServer.Notification.ProviderNotificationMessage">
      <summary>
            Notification message used in <see cref="T:EPiServer.Notification.INotificationProvider" />.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.ProviderNotificationMessage.SenderAddress">
      <summary>
            The address to the sender of the message.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.ProviderNotificationMessage.SenderDisplayName">
      <summary>
            The display name of the sender of the message.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.ProviderNotificationMessage.RecipientAddresses">
      <summary>
            The address(es) to the receiver(s) of the message.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.ProviderNotificationMessage.Subject">
      <summary>
            The subject of the message
            </summary>
    </member>
    <member name="P:EPiServer.Notification.ProviderNotificationMessage.Content">
      <summary>
            The content of the message
            </summary>
    </member>
    <member name="P:EPiServer.Notification.ProviderNotificationMessage.Format">
      <summary>
            The format of the message.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.ProviderNotificationMessage.ContainedIDs">
      <summary>
            It contains message id that has been formatted. If a formatter joined many messages to one message then merged message ids should be added to the ContainedIDs.
            </summary>
    </member>
    <member name="T:EPiServer.Notification.QueryableNotificationUserService">
      <summary>
            Defines the members for a queryable user notification.
            </summary>
    </member>
    <member name="M:EPiServer.Notification.QueryableNotificationUserService.FindAsync(System.String,System.Int32,System.Int32)">
      <summary>
            Asynchronously finds users by criterion.
            </summary>
      <param name="partOfUser">Part of username, Email or displayname.</param>
      <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
      <param name="pageSize">The size of the page of results to return.</param>
      <returns>A PagedNotificationUserResult collection that contains a page of pageSize INotificationUser objects beginning at the page specified by pageIndex and total objects.</returns>
    </member>
    <member name="M:EPiServer.Notification.QueryableNotificationUserService.GetAsync(System.String)">
      <summary>
            Returns a user by name
            </summary>
      <param name="userName">The name of the user</param>
      <returns>One user or null if not found</returns>
    </member>
    <member name="T:EPiServer.Notification.ScheduledNotificationMessage">
      <summary>
            A Notification message that can be sent between users.
            It has a setting that specifies the earliest time the message should be sent.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.ScheduledNotificationMessage.SendAt">
      <summary>
            Specifies the earliest time the message should be sent.
            </summary>
      <remarks>The actual send date is dependent on the settings for the scheduled job
            that dispatches messages.</remarks>
    </member>
    <member name="T:EPiServer.Notification.SubscriptionClearedEventArgs">
      <summary>
            Arguments for a clear Subscription event.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.SubscriptionClearedEventArgs.SubscriptionKey">
      <summary>
            The key of the cleared Subscription.
            </summary>
    </member>
    <member name="T:EPiServer.Notification.SubscriptionEventArgs">
      <summary>
            Arguments for a Subscription event.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.SubscriptionEventArgs.SubscriptionKey">
      <summary>
            The key of the Subscription that was changed.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.SubscriptionEventArgs.User">
      <summary>
            The user for which the Subscription was changed.
            </summary>
    </member>
    <member name="T:EPiServer.Notification.UserClearedEventArgs">
      <summary>
            Arguments for a clear user event.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserClearedEventArgs.User">
      <summary>
            The cleared user.
            </summary>
    </member>
    <member name="T:EPiServer.Notification.UserNotificationEventArgs">
      <summary>
            Arguments for a UserNotificationMessage event.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationEventArgs.User">
      <summary>
            The user of the <see cref="T:EPiServer.Notification.UserNotificationMessage" /> that was read.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationEventArgs.NotificationId">
      <summary>
            The id of the <see cref="T:EPiServer.Notification.UserNotificationMessage" /> that was read.
            </summary>
    </member>
    <member name="T:EPiServer.Notification.UserNotificationFormattingMode">
      <summary>
            The mode for user notification formatting
            </summary>
    </member>
    <member name="F:EPiServer.Notification.UserNotificationFormattingMode.None">
      <summary>
            No formatting is done, raw data is returned
            </summary>
    </member>
    <member name="F:EPiServer.Notification.UserNotificationFormattingMode.Automatic">
      <summary>
            Formatting is done if a formatter can be resolved for that channel. Otherwise it returns the raw data.
            </summary>
    </member>
    <member name="F:EPiServer.Notification.UserNotificationFormattingMode.Required">
      <summary>
            Formatting is done if a formatter can be resolved for that channel. Otherwise it throws an exception. 
            </summary>
    </member>
    <member name="T:EPiServer.Notification.UserNotificationMessage">
      <summary>
            Represents a one-to-one message.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.Id">
      <summary>
            The id of the message
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.Sender">
      <summary>
            The sender of the message
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.Recipient">
      <summary>
            The receivers for the message
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.ChannelName">
      <summary>
            The name of the channel.
            </summary>
      <remarks>
            It is the <see cref="P:EPiServer.Notification.UserNotificationMessage.ChannelName" /> in combination with user settings
            that controls which <see cref="T:EPiServer.Notification.INotificationFormatter" /> and <see cref="T:EPiServer.Notification.INotificationProvider" />
            that will be used to format and send the message.
            </remarks>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.TypeName">
      <summary>
            The type of the message.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.Subject">
      <summary>
            The message subject
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.Content">
      <summary>
            The content of the message
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.Posted">
      <summary>
            The time when the message was posted.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.Sent">
      <summary>
            The time when the message was sent or null if it hasn't been send yet.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.Read">
      <summary>
            The time when the message was read or null if it hasn't been read yet.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.SendAt">
      <summary>
            The time after which the message will be sent or null for next scheduling.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationMessage.Link">
      <summary>
            Optional property that can be used for the FormatUserMessage-method in
            <see cref="T:EPiServer.Notification.IUserNotificationFormatter" /> to return custom information 
            in the form of a uri.
            </summary>
      <remarks>
            If used, this property should be set in the <see cref="T:EPiServer.Notification.IUserNotificationFormatter" />
            It is not saved with the message.
            </remarks>
    </member>
    <member name="T:EPiServer.Notification.UserNotificationsEventArgs">
      <summary>
            Arguments for a UserNotificationReadAllMessage event.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationsEventArgs.User">
      <summary>
            The user of the <see cref="T:EPiServer.Notification.UserNotificationMessage" /> that was read.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationsEventArgs.ChannelName">
      <summary>
            The name of the channel.
            </summary>
    </member>
    <member name="T:EPiServer.Notification.UserNotificationsQuery">
      <summary>
            Class used for querying
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationsQuery.User">
      <summary>
            The user/recipient.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationsQuery.ChannelName">
      <summary>
            The name of the channel.
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationsQuery.Category">
      <summary>
            The Category
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationsQuery.Read">
      <summary>
            Filter(read/unread) the list based on true(read), false(unread) or null(both).
            </summary>
    </member>
    <member name="P:EPiServer.Notification.UserNotificationsQuery.Sent">
      <summary>
            Filter(sent/unsent) the list based on true(sent), false(unsent) or null(both).
            </summary>
    </member>
    <member name="T:EPiServer.PageEventArgs">
      <summary>
            Event arguments passed from <see cref="T:EPiServer.IContentRepository" />.
            </summary>
    </member>
    <member name="M:EPiServer.PageEventArgs.#ctor(EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageEventArgs" /> class.
            </summary>
      <param name="pageLink">The page link the event applies to.</param>
    </member>
    <member name="M:EPiServer.PageEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageEventArgs" /> class.
            </summary>
      <param name="pageLink">The source page link.</param>
      <param name="targetLink">The target page link.</param>
      <remarks>
            Primarily used for move operations where you have a source and target.
            </remarks>
    </member>
    <member name="M:EPiServer.PageEventArgs.#ctor(EPiServer.Core.IContent)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageEventArgs" /> class.
            </summary>
      <param name="content">The page data that the event applies to.</param>
    </member>
    <member name="M:EPiServer.PageEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.IContent)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageEventArgs" /> class.
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="content">The page data.</param>
    </member>
    <member name="M:EPiServer.PageEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.IContent,EPiServer.Security.AccessLevel)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageEventArgs" /> class.
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="content">The page data.</param>
      <param name="requiredAccess">The required access level for the operation.</param>
    </member>
    <member name="P:EPiServer.PageEventArgs.PageLink">
      <summary>
            The page that the event applies to
            </summary>
      <remarks>Changing this object may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.PageEventArgs.TargetLink">
      <summary>
            The parent that the event applies to
            </summary>
      <remarks>Changing this object may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="P:EPiServer.PageEventArgs.Page">
      <summary>
            The page that the event applies to
            </summary>
      <remarks>Changing this object may not always change the behavior, see the specific event for details.</remarks>
    </member>
    <member name="T:EPiServer.MovePageEventArgs">
      <summary>
            Event arguments passed from <see cref="T:EPiServer.IContentRepository" /> for page move related events.
            </summary>
    </member>
    <member name="M:EPiServer.MovePageEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.MovePageEventArgs" /> class.
            </summary>
      <param name="contentLink">The page link.</param>
      <param name="destinationLink">The destination link.</param>
    </member>
    <member name="P:EPiServer.MovePageEventArgs.OriginalParent">
      <summary>
            Gets or sets the original (before move) parent for PageLink
            </summary>
      <value>The original parent.</value>
    </member>
    <member name="T:EPiServer.SavePageEventArgs">
      <summary>
            Event arguments used for save-related events.
            </summary>
    </member>
    <member name="M:EPiServer.SavePageEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.IContent)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SavePageEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="content">The content.</param>
    </member>
    <member name="M:EPiServer.SavePageEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SavePageEventArgs" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="content">The content.</param>
      <param name="action">The save action to perform.</param>
    </member>
    <member name="P:EPiServer.SavePageEventArgs.RequireNewVersion">
      <summary>
            Gets or sets a value indicating whether the save operation will force a new version of the page.
            </summary>
      <value>
        <c>true</c> if force new version; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.SavePageEventArgs.ForceCurrentVersion">
      <summary>
            Gets or sets a value indicating whether to save to overwrite the current version.
            </summary>
      <value>
        <c>true</c> if force overwrite of current version; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.SavePageEventArgs.MaskedAction">
      <summary>
            Gets the save action without any Force... flags.
            </summary>
      <value>The masked action.</value>
    </member>
    <member name="P:EPiServer.SavePageEventArgs.Action">
      <summary>
            Gets the requested save action.
            </summary>
      <value>The save action.</value>
    </member>
    <member name="T:EPiServer.CopyPageEventArgs">
      <summary>
            Event arguments used for page copy operations.
            </summary>
    </member>
    <member name="M:EPiServer.CopyPageEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.PageReference,EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CopyPageEventArgs" /> class.
            </summary>
      <param name="contentLink">The page link.</param>
      <param name="sourceLink">The source link.</param>
      <param name="targetLink">The target link.</param>
    </member>
    <member name="P:EPiServer.CopyPageEventArgs.SourcePageLink">
      <summary>
            The page that is being copied
            </summary>
      <remarks>Changing this object will not change the behavior of a copy operation.</remarks>
    </member>
    <member name="T:EPiServer.PageLanguageEventArgs">
      <summary>
            EventArgs used with PageLanguage related events
            </summary>
    </member>
    <member name="M:EPiServer.PageLanguageEventArgs.#ctor(EPiServer.Core.IContent)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageLanguageEventArgs" /> class.
            </summary>
      <param name="content">The page.</param>
    </member>
    <member name="P:EPiServer.PageLanguageEventArgs.MasterLanguageBranch">
      <summary>
            The id for the master language branch
            </summary>
    </member>
    <member name="P:EPiServer.PageLanguageEventArgs.IsMasterLanguageBranch">
      <summary>
            Gets a value indicating whether this instance is master language branch.
            </summary>
      <value>
        <c>true</c> if this instance is master language branch; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.PageLanguageEventArgs.LanguageBranch">
      <summary>
            The id for this language branch
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.Internal.PersonalizedContentFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory for personalized content
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.PersonalizedContentFactory.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Security.IPrincipalAccessor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Personalization.Internal.PersonalizedContentFactory" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.PersonalizedContentFactory.GetMarkupForEditor(EPiServer.Core.Html.StringParsing.StringFragmentCollection,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the markup that is presented when editing.
            </summary>
      <param name="stringFragmentCollection">The string fragments.</param>
      <param name="securedFragmentMarkupGenerator">The group resolver.</param>
      <returns>
            Markup that is loaded when loading the personalized content in edit mode.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.PersonalizedContentFactory.GetInternalFormat(EPiServer.Core.Html.StringParsing.StringFragmentCollection,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the internal format.
            </summary>
      <param name="stringFragmentCollection">The string fragments.</param>
      <param name="securedFragmentMarkupGenerator">The group resolver.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.PersonalizedContentFactory.GetViewFormat(EPiServer.Core.Html.StringParsing.StringFragmentCollection,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the view format.
            </summary>
      <param name="stringFragmentCollection">The string fragments.</param>
      <param name="securedFragmentMarkupGenerator">The group resolver.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.Internal.PersonalizedContentFactory.ContentHolderClassName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the name of the content holder attribute class.
            </summary>
      <value>The name of the content holder attribute class.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.Internal.PersonalizedContentFactory.IdentifyingClassName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the name of the identifying class attribute.
            </summary>
      <value>The name of the identifying class attribute.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.IPersonalizedContentFactory">
      <summary>
            Interface for personlalized content factory
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.IPersonalizedContentFactory.GetMarkupForEditor(EPiServer.Core.Html.StringParsing.StringFragmentCollection,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <summary>
            Gets the markup that is presented when editing.
            </summary>
      <param name="stringFragmentCollection">The string fragment container.</param>
      <param name="securedFragmentMarkupGenerator">The group resolver.</param>
      <returns>
            Markup that is loaded when loading the personalized content in edit mode.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.IPersonalizedContentFactory.GetInternalFormat(EPiServer.Core.Html.StringParsing.StringFragmentCollection,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <summary>
            Gets the internal format.
            </summary>
      <param name="stringFragmentCollection">The string fragment container.</param>
      <param name="securedFragmentMarkupGenerator">The group resolver.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.IPersonalizedContentFactory.GetViewFormat(EPiServer.Core.Html.StringParsing.StringFragmentCollection,EPiServer.Core.Html.StringParsing.ISecuredFragmentMarkupGenerator)">
      <summary>
            Gets the view format.
            </summary>
      <param name="stringFragmentCollection">The string fragments.</param>
      <param name="securedFragmentMarkupGenerator">The group resolver.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Personalization.IPersonalizedContentFactory.ContentHolderClassName">
      <summary>
            Gets the name of the content holder attribute class.
            </summary>
      <value>The name of the content holder attribute class.</value>
    </member>
    <member name="P:EPiServer.Personalization.IPersonalizedContentFactory.IdentifyingClassName">
      <summary>
            Gets the name of the identifying class attribute.
            </summary>
      <value>The name of the identifying class attribute.</value>
    </member>
    <member name="T:EPiServer.Personalization.IPersonalizedRoles">
      <summary>
            Interface to get all used personalized content roles
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.IPersonalizedRoles.GetRoles">
      <summary>
            Gets all used personalized content roles
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.PageDataPersonalizationExtension">
      <summary>
            Extends PageData with some personalization methods
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.PageDataPersonalizationExtension.GetUsedPersonalizedGroupIds(EPiServer.Core.PageData)">
      <summary>
            Gets the groups that are used for personalization on current page.
            </summary>
      <param name="page">The page.</param>
      <returns>An IEnumerable with the ids of the visitor groups what affect content for properties on the page.</returns>
    </member>
    <member name="T:EPiServer.PlugIn.AssemblyTypeInfo">
      <summary>
            Contains description of the plugin-related types that exists in an assembly.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.AssemblyTypeInfo.#ctor(System.Reflection.AssemblyName)">
      <summary>
            Create an AssemblyTypeInfo for the referenced assembly
            </summary>
      <param name="name">The AssemblyName of the assembly to check for plug-in types.</param>
    </member>
    <member name="M:EPiServer.PlugIn.AssemblyTypeInfo.#ctor(System.Reflection.Assembly)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.AssemblyTypeInfo" /> class.
            </summary>
      <param name="assembly">The assembly to check for plug-in types.</param>
    </member>
    <member name="P:EPiServer.PlugIn.AssemblyTypeInfo.AssemblyName">
      <summary>
            Get the AssemblyName for the assembly described by this instance
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.AssemblyTypeInfo.HasPlugIns">
      <summary>
            True if this assembly has any types decorated with a [PlugIn] attribute
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.AssemblyTypeInfo.HasPlugInAttributes">
      <summary>
            True if this assembly has any attributes derived from the <see cref="T:EPiServer.PlugIn.PlugInAttribute" /></summary>
    </member>
    <member name="M:EPiServer.PlugIn.AssemblyTypeInfo.ListPlugInDescriptors(EPiServer.PlugIn.PlugInAttribute)">
      <summary>
            Get descriptions for all plugins in this assembly that mateches the indicated attribute
            </summary>
      <param name="matchAttribute">The attribute to compare with</param>
      <returns>An ICollection with <see cref="T:EPiServer.PlugIn.PlugInDescriptor" /> objects</returns>
    </member>
    <member name="M:EPiServer.PlugIn.AssemblyTypeInfo.ListPlugInTypes">
      <summary>
            Get the types for all types decorated with a plugin attribute
            </summary>
      <returns>An ICollection with Type objects</returns>
    </member>
    <member name="M:EPiServer.PlugIn.AssemblyTypeInfo.ListPlugInAttributes">
      <summary>
            Get the attribute types for all types inheriting from <see cref="T:EPiServer.PlugIn.PlugInAttribute" /></summary>
      <returns>An ICollection with Type objects</returns>
    </member>
    <member name="T:EPiServer.PlugIn.ICustomPlugInDataLoader">
      <summary>
            Override the default behavior when plug-ins are loaded
            </summary>
      <remarks>This class may be useful when a single plug-in need to generate
            multiple items or no items at all depending on custom conditions.</remarks>
    </member>
    <member name="M:EPiServer.PlugIn.ICustomPlugInDataLoader.Data_Load(System.Object,System.EventArgs)">
      <summary>
            List plugins for area
            </summary>
    </member>
    <member name="T:EPiServer.PlugIn.ICustomPlugInLoader">
      <summary>
            Override the default behavior when plug-ins are loaded
            </summary>
      <remarks>
            This class may be useful when a single plug-in need to generate
            multiple items or no items at all depending on custom conditions.
            </remarks>
      <example>
            The following sample shows how to determine if a plugin should be visible 
            by implementing the ICustomPlugInLoader interface. The plugin will only be 
            shown to users in the Administrators group.
            <code source="../CodeSamples/EPiServerNET/PlugIn/ICustomPlugInLoaderSamples.cs" region="Visible" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.PlugIn.ICustomPlugInLoader.List">
      <summary>
            List plugins for area
            </summary>
    </member>
    <member name="T:EPiServer.PlugIn.Internal.PlugInRuntime">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles automatic starting of plugins that requires initial setup.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.PlugIn.LicensingMode">
      <summary>
            Licensing mode for a plug-in assembly
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.LicensingMode.Freeware">
      <summary>
            Plug-in does not require additional licensing.
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.LicensingMode.CustomLicense">
      <summary>
            Plug-in is using a custom licensing model.
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.LicensingMode.Licensed">
      <summary>
            Plug-in is using EPiServer standard licensing model.
            </summary>
    </member>
    <member name="T:EPiServer.PlugIn.PageDefinitionTypePlugInAttribute">
      <summary>
            Automatically register a property type on startup 
            </summary>
      <example>
        <para>
            This property type will automatically be registered with EPiServer
            </para>
        <code source="../CodeSamples/EPiServer/PlugIn/PropertyDefinitionTypePlugInAttributeSamples.cs" region="Register" />
      </example>
    </member>
    <member name="T:EPiServer.PlugIn.PagePlugInAttribute">
      <summary>
            The attribute class used to identify page extensions.
            </summary>
      <remarks>
            Page extensions are plug-ins that are automatically instantiated and used for all ASP.NET pages that
            derive (directly or indirectly) from the <see cref="T:EPiServer.PageBase" /> class. All EPiServers system
            pages derive from PageBase and this is a way to hook in custom code to basically any user / editor / admin
            page and add new functionality.
            </remarks>
    </member>
    <member name="M:EPiServer.PlugIn.PagePlugInAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PagePlugInAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.PagePlugInAttribute.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PagePlugInAttribute" /> class.
            </summary>
      <param name="name">The name of the page extension.</param>
      <param name="description">The description for the page extension.</param>
      <remarks>
            Initializes the <see cref="P:EPiServer.PlugIn.PlugInAttribute.DisplayName" /> and <see cref="P:EPiServer.PlugIn.PlugInAttribute.Description" /> properties as part of the initialization process.
            Unless you manually set the <see cref="P:EPiServer.PlugIn.PlugInAttribute.LanguagePath" /> property you will not benefit from the automatic translation
            support in EPiServer.
            </remarks>
    </member>
    <member name="M:EPiServer.PlugIn.PagePlugInAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PagePlugInAttribute" /> class.
            </summary>
      <param name="name">The name of the page extension.</param>
      <param name="description">The description for the page extension.</param>
      <param name="languagePath">The language path to use when trying to look up translations for the DisplayName and Description properties.</param>
    </member>
    <member name="M:EPiServer.PlugIn.PagePlugInAttribute.Start">
      <summary>
            Initialization method called by the plug-in system.
            </summary>
      <remarks>
            This method is called to set up all page extensions by invoking the static Initialize method on the class that the
            PagePlugInAttribute is applied to.
            </remarks>
    </member>
    <member name="M:EPiServer.PlugIn.PagePlugInAttribute.GetOptionFlag">
      <summary>
            Gets the option flag.
            </summary>
      <returns>An <see cref="T:System.Int32" /> with the next available bit for Page Extension use.</returns>
      <remarks>
            Note that this is used as a bitmap to determine which page extensions to enable. This effectively limits the 
            number of installed page extensions to 32.
            </remarks>
    </member>
    <member name="T:EPiServer.PlugIn.PlugInAttribute">
      <summary>
            The base class for all specialized plug-in types
            </summary>
      <remarks>
        <para>
            When an area that support plug-ins executes in EPiServer it will search for files in the
            bin directory and their containing classes for an attribute called <see cref="T:EPiServer.PlugIn.PlugInAttribute" />.
            The PlugInAttribute is only a base class for all specialized plug-in types and is not actually
            used anywhere to define a plug-in, only to search and match plug-ins that used attributes
            derived from PlugInAttribute.
            </para>
        <para>
            The class that handles searching is <see cref="T:EPiServer.PlugIn.PlugInLocator" />, probably
            you donâ€™t need to use this class unless you are implementing your own plug-in support. It returns
            a array of <see cref="T:EPiServer.PlugIn.PlugInDescriptor" /> classes,  PlugInDescriptor contains information about the
            PlugInAttribute definition and the plug-in id that was assigned to the plug-in in this installation.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInAttribute.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInAttribute" /> class.
            </summary>
      <param name="displayName">The name of the plug-in.</param>
      <param name="description">The description for the plug-in.</param>
      <remarks>
            Unless the <see cref="P:EPiServer.PlugIn.PlugInAttribute.LanguagePath" /> property is explicitly set, the <see cref="P:EPiServer.PlugIn.PlugInAttribute.DisplayName" /> and <see cref="P:EPiServer.PlugIn.PlugInAttribute.Description" />
            properties will always return the literal values assigned here, but if you assign a value to <see cref="P:EPiServer.PlugIn.PlugInAttribute.LanguagePath" />
            the <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> will be used to translate the texts.
            </remarks>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInAttribute" /> class.
            </summary>
      <param name="displayName">The name of the plug-in.</param>
      <param name="description">The description for the plug-in.</param>
      <param name="languagePath">The language path for translation support.</param>
      <remarks>
            See <see cref="P:EPiServer.PlugIn.PlugInAttribute.DisplayName" /> and <see cref="P:EPiServer.PlugIn.PlugInAttribute.Description" />  properties for more information about how the <paramref name="languagePath" /> is used.
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInAttribute.DisplayName">
      <summary>
            The display name for the plugin. 
            </summary>
      <returns>A string with the display name.</returns>
      <remarks>
            If a LanguagePath has been defined, the return value for DisplayName will be the translated 
            text from LanguagePath + "/displayname" 
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInAttribute.DefaultEnabled">
      <summary>
      </summary>
      <value>
        <c>true</c> if enabled by default; otherwise, <c>false</c>.</value>
      <remarks>If not set the value of this property is 'true'.</remarks>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInAttribute.Description">
      <summary>
            Description of the plugin 
            </summary>
      <value>The description.</value>
      <remarks>
            If a LanguagePath has been defined, the return value for Description will be the 
            translated text from LanguagePath + "/description"  
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInAttribute.LanguagePath">
      <summary>
            Path to node in language files where translation can be found.
            </summary>
      <remarks>
            Set this property to the path of the XML element that contains the 
            displayname and description elements in one of your language files 
            (an xml file in the /lang directory.) 
            </remarks>
      <example>
        <para>
            For a LanguagePath with the value "/myshop/plugin/ShopPluginTree/" the 
            XML should look something like this: 
            </para>
        <code source="../CodeSamples/EPiServer/PlugIn/PlugInAttributeSamples.xml" region="XML" lang="xml" />
      </example>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInAttribute.RequireLicenseForLoad">
      <summary>
            Determine if the plugin requires a valid license to be loaded. 
            </summary>
      <value>
        <b>True</b> if license is required.</value>
      <remarks>
            If true, the <see cref="T:EPiServer.PlugIn.PlugInLocator" /> will try to load and validate a license 
            for the assembly that the plugin is defined in, before allowing the plugin to be 
            instantiated. 
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInAttribute.SortIndex">
      <summary>
            The sort index compared to other plugins
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInAttribute.PlugInType">
      <summary>
            Gets or sets the plug-in type that is decorated with this attribute.
            This property is normally set by plug-in system during runtime, but can be overriden explicitly by plug-in developer.
            </summary>
      <value>
            Plug-in type.
            </value>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInAttribute.SetPlugInType(System.Type)">
      <summary>
            Sets the type of the plug-in.
            </summary>
      <param name="plugInType">Type of the plug-in.</param>
    </member>
    <member name="T:EPiServer.PlugIn.PlugInDescriptor">
      <summary>
            Describes a plug-in at runtime without having to create it.
            </summary>
    </member>
    <member name="T:EPiServer.PlugIn.PlugInDescriptor.PlugInDescriptorEventHandler">
      <summary>
            The event signature for the <see cref="E:EPiServer.PlugIn.PlugInDescriptor.PlugInDescriptorSaved" /> event.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.#ctor(System.Int32,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInDescriptor" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="type">The type of the plug-in.</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.#ctor(System.Int32,System.Type,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInDescriptor" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="type">The type of the plug-in.</param>
      <param name="enabled">if set to <c>true</c> the plug-in is enabled, otherwise the plug-in is disabled.</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.#ctor(System.Int32,System.Type,System.DateTime,System.DateTime,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInDescriptor" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="type">The type of the plug-in.</param>
      <param name="saved">The date/time when this plug-in descriptor was saved.</param>
      <param name="created">The date/time when this plug-in descriptor was created.</param>
      <param name="enabled">if set to <c>true</c> the plug-in is enabled, otherwise the plug-in is disabled.</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.#ctor(System.Int32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInDescriptor" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="typeName">Name of the plug-in type.</param>
      <param name="assemblyName">Name of the assembly where the type resides.</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.#ctor(System.Int32,System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInDescriptor" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="typeName">Name of the plug-in type.</param>
      <param name="assemblyName">Name of the assembly where the type resides.</param>
      <param name="enabled">if set to <c>true</c> the plug-in is enabled, otherwise the plug-in is disabled.</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.#ctor(System.Int32,System.String,System.String,System.DateTime,System.DateTime,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInDescriptor" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="typeName">Name of the plug-in type.</param>
      <param name="assemblyName">Name of the assembly where the type resides.</param>
      <param name="saved">The date/time when this plug-in descriptor was saved.</param>
      <param name="created">The date/time when this plug-in descriptor was created.</param>
      <param name="enabled">if set to <c>true</c> the plug-in is enabled, otherwise the plug-in is disabled.</param>
    </member>
    <member name="E:EPiServer.PlugIn.PlugInDescriptor.PlugInDescriptorSaved">
      <summary>
            Occurs when the plug in descriptor has been saved.
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInDescriptor.ConstructorParameterResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the constructor paramter resolver.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.PlugIn.PlugInDescriptor.ID">
      <summary>
            The identifier assigned by EPiServer to this plug-in.
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInDescriptor.IsAutoGenerated">
      <summary>
            If this type is located in an autogenerated assembly.
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInDescriptor.TypeName">
      <summary>
            The name of the class.
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInDescriptor.Enabled">
      <summary>
            Whether the PlugIn is enabled or not.
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInDescriptor.AssemblyName">
      <summary>
            The name of the assembly.
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInDescriptor.Saved">
      <summary>
            Timestamp when the record was last saved in the database.
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInDescriptor.Created">
      <summary>
            Timestamp when the record was created in the database.
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInDescriptor.PlugInType">
      <summary>
            The <see cref="T:System.Type" /> for the plug-in.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.GetAttribute(System.Type)">
      <summary>
            Get a plug-in attribute of a special type.
            </summary>
      <param name="plugInAttributeType">The type for plugin attribute.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.GetAttribute``1">
      <summary>
            Get a plug-in attribute of a special type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.GetAttributes">
      <summary>
            Get all plug-in attributes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.Create">
      <summary>
            Create an instance of the plug-in.
            </summary>
      <returns>The plug-in.</returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.Save">
      <summary>
            Save plugin descriptor.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.SetAttributePlugInType(EPiServer.PlugIn.PlugInAttribute)">
      <summary>
            Sets the type of the plug-in decorated by attribute.
            </summary>
      <param name="attribute">The attribute.</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.GetAttributeArray(EPiServer.PlugIn.PlugInDescriptor[],System.Type)">
      <summary>
            Get all PlugInAttribute of a given type from a array of PlugInDescriptor.
            </summary>
      <param name="plugins">The plugin's to read from.</param>
      <param name="plugInAttributeType">The type for plugin attribute.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.Load(System.Int32)">
      <summary>
            Load plugin information based on a plug-in ID.
            </summary>
      <param name="id">The id for the plugin.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.LoadAll">
      <summary>
            Load all plugins information from database.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.Load(System.Type)">
      <summary>
            Load plugin information based on the type of the plug-in.
            </summary>
      <param name="plugin">The type for the plugin.</param>
      <returns>A descriptor for the plug-in or null if the type is not decorated with any plug-in attribute.</returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.Load(System.String,System.String)">
      <summary>
            Load plugin information based on the type of the plug-in.
            </summary>
      <param name="typeName">The type for the plugin.</param>
      <param name="assemblyName">The short assembly name for the plugin.</param>
      <returns>A descriptor for the plugin.</returns>
      <remarks>This method does not cache the loading of a plugin.</remarks>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInDescriptor.Load(System.String,System.String,System.Boolean)">
      <summary>
            Load plugin information based on the type of the plug-in.
            </summary>
      <param name="typeName">The type for the plugin.</param>
      <param name="assemblyName">The short assembly name for the plugin.</param>
      <param name="defaultEnabled">Tells if the plugin will be enabled by default</param>
      <returns>A descriptor for the plugin.</returns>
      <remarks>This method does not cache the loading of a plugin.</remarks>
    </member>
    <member name="T:EPiServer.PlugIn.PlugInException">
      <summary>
            Exception thrown by the plugin framework when a error occurrs while
            loading or interacting with a plugin.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInException" /> class.
            </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInException" /> class.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.PlugIn.PlugInLocator">
      <summary>
            Handles all internal locating of plugins.
            </summary>
      <remarks>
        <para>
            Used to find all plug-ins for a specific <see cref="T:EPiServer.PlugIn.PlugInAttribute" />.
            The <see cref="M:System.Attribute.Match(System.Object)" /> method will be called to test if a class is a match.
            </para>
        <para>
            If you already know the type of plug-in you wish to locate use 
            <see cref="M:EPiServer.PlugIn.PlugInDescriptor.Load(System.Int32)" />.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInLocator.FindPlugInAttributes">
      <summary>
            Finds all plugin attributes in the specified directory
            </summary>
      <returns>A array of plugin attributes. If no plugins was found a empty array will be returned.</returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInLocator.FindPlugInAssemblies">
      <summary>
            Finds all assemblies that contain plugins in the specified directory
            </summary>
      <returns>
            A array of plugins. If no plugins was found a empty array will be returned.
            </returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInLocator.HasPlugIns(System.Type)">
      <summary>
            Determines whether the type has any plugin attributes.
            </summary>
      <param name="type">The type to check for attributes.</param>
      <returns>
        <c>true</c> if the specified type has plugin attributes; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInLocator.Assemblies">
      <summary>
            Gets the assemblies that are scanned for plugins.
            </summary>
      <value>A dictionary with the assembly display name as key and the <see cref="T:EPiServer.PlugIn.AssemblyTypeInfo" /> as value.</value>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInLocator.FindPlugInTypes(System.Type)">
      <summary>
            Finds all plugins of the specified type
            </summary>
      <param name="pluginType">The type to be used</param>
      <returns>A array of plugins. If no plugins was found a empty array will be returned.</returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInLocator.FindPlugInTypes(EPiServer.PlugIn.AssemblyTypeInfo,System.Type)">
      <summary>
            Finds all plugins of the specified type in the specified assembly
            </summary>
      <param name="assemblyType">The assembly to search in</param>
      <param name="pluginType">The type to be used</param>
      <returns>An ICollection with PlugInDescriptors.</returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInLocator.FindPlugInTypes(System.Reflection.AssemblyName,System.Type)">
      <summary>
            Finds all plugins of the specified type in the specified assembly
            </summary>
      <param name="assemblyName">The assembly search in</param>
      <param name="pluginType">The type to be used</param>
      <returns>A array of plugins. If no plugins was found a empty array will be returned.</returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInLocator.Search(EPiServer.PlugIn.PlugInAttribute)">
      <summary>
            Search for plugins
            </summary>
      <param name="matchAttribute">The attribute to used for matching by calling <see cref="M:System.Attribute.Match(System.Object)" /></param>
      <returns>A array of plugins. If no plugins was found a empty array will be returned.</returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInLocator.Search(System.Reflection.AssemblyName,EPiServer.PlugIn.PlugInAttribute)">
      <summary>
            Search for plugins
            </summary>
      <param name="assemblyName">The assembly to search in</param>
      <param name="matchAttribute">The attribute to used for matching by calling <see cref="M:System.Attribute.Match(System.Object)" /></param>
      <returns>A array of plugins. If no plugins was found a empty array will be returned.</returns>
    </member>
    <member name="T:EPiServer.PlugIn.PlugInPropertyAttribute">
      <summary>
            Defines that a class contains settings editable from admin mode in plug-in manager. 
            </summary>
      <example>
        <para>
            Adding a setting for changing the root page for a special function.
            </para>
        <code source="../CodeSamples/EPiServer/PlugIn/PlugInPropertyAttributeSamples.cs" region="RootPage" />
        <para>
            Adding a setting for a boolean value with a checkbox as GUI.
            </para>
        <code source="../CodeSamples/EPiServer/PlugIn/PlugInPropertyAttributeSamples.cs" region="CheckBox" />
      </example>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInPropertyAttribute.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInPropertyAttribute" /> class.
            </summary>
      <param name="name">The name of the page extension.</param>
      <param name="description">The description for the page extension.</param>
      <remarks>
            Initializes the <see cref="P:EPiServer.PlugIn.PlugInPropertyAttribute.DisplayName" /> and <see cref="P:EPiServer.PlugIn.PlugInPropertyAttribute.Description" /> properties as part of the initialization process.
            Unless you manually set the <see cref="P:EPiServer.PlugIn.PlugInPropertyAttribute.LanguagePath" /> property you will not benefit from the automatic translation
            support in EPiServer.
            </remarks>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInPropertyAttribute" /> class.
            </summary>
      <param name="name">The name of the page extension.</param>
      <param name="description">The description for the page extension.</param>
      <param name="languagePath">The language path to use when trying to look up translations for the DisplayName and Description properties.</param>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInPropertyAttribute.DisplayName">
      <summary>
            The display name for the plugin property. 
            </summary>
      <returns>A string with the display name.</returns>
      <remarks>
            If a LanguagePath has been defined, the return value for DisplayName will be the translated 
            text from LanguagePath + "/displayname" 
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInPropertyAttribute.Description">
      <summary>
            Description of the plugin property. 
            </summary>
      <value>The description.</value>
      <remarks>
            If a LanguagePath has been defined, the return value for Description will be the 
            translated text from LanguagePath + "/description"  
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInPropertyAttribute.LanguagePath">
      <summary>
            Path to node in language files where translation can be found.
            </summary>
      <remarks>
            Set this property to the path of the XML element that contains the 
            displayname and description elements in one of your language files 
            (an xml file in the /lang directory.) 
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInPropertyAttribute.AdminControl">
      <summary>
            Gets or sets the web control used for editing the property.
            </summary>
      <value>The admin control.</value>
      <remarks>
            The type must be a class that inherits from System.Web.UI.WebControls.WebControl
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInPropertyAttribute.AdminControlValue">
      <summary>
            Gets or sets the name of the property on <see cref="P:EPiServer.PlugIn.PlugInPropertyAttribute.AdminControl" /> that contains the property value.
            </summary>
      <value>The property name.</value>
      <remarks>
            When an edit view is created for the plugin property, the value for the <see cref="P:EPiServer.PlugIn.PlugInPropertyAttribute.AdminControl" /> property named <see cref="P:EPiServer.PlugIn.PlugInPropertyAttribute.AdminControlValue" />
            is read and written to the property that this attribute instance is applied to.
            </remarks>
    </member>
    <member name="T:EPiServer.PlugIn.PlugInSettings">
      <summary>
            Class for handling simple plugin settings as a DataSet
            </summary>
      <remarks>
            Use this class if you wish to store simple relational data and
            web.config or database is not an option. 
            </remarks>
      <example>
            The TestSettings method below demonstrates how a plug-in could load and save
            some internal settings.
            <code source="../CodeSamples/EPiServer/PlugIn/PlugInSettingsSamples.cs" region="RootPage" /></example>
    </member>
    <member name="E:EPiServer.PlugIn.PlugInSettings.SettingsChanged">
      <summary>
            Triggered whenever changes are made to plugin settings
            </summary>
      <remarks>The source of the event is the PlugInDescriptor for which the changes apply, check for example ((PlugInDescriptor)source).AssemblyName to see if this event applies to your logic if needed.</remarks>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInSettings.Populate(System.Type,System.Data.DataSet)">
      <summary>
            Populate dataset with data for plugin
            </summary>
      <param name="type">The type of plugin</param>
      <param name="settings">The dataset with settings to populate</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInSettings.Populate(EPiServer.PlugIn.PlugInDescriptor,System.Data.DataSet)">
      <summary>
            Populates the settings for the specified plug-in descriptor.
            </summary>
      <param name="descr">The descriptor.</param>
      <param name="settings">The settings DataSet to use.</param>
      <remarks>
            This method simply  PlugInDescriptor without further manipulation.
            </remarks>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInSettings.Save(System.Type,System.Data.DataSet)">
      <summary>
            Save dataset with settings to database
            </summary>
      <param name="type">The type of plugin</param>
      <param name="settings">The dataset with settings to populate</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInSettings.Save(EPiServer.PlugIn.PlugInDescriptor,System.Data.DataSet)">
      <summary>
            Saves the specified plug-in descriptor settings.
            </summary>
      <param name="descr">The plug-in descriptor.</param>
      <param name="settings">The settings.</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInSettings.AutoPopulate(System.Object)">
      <summary>
            Called to populate the a PlugIn's properties with user supplied values from the database.
            </summary>
      <param name="obj">The instance of the PlugIn to populate</param>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInSettings.ChangeType(System.Object,System.Type)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="value">The value.</param>
      <param name="destinationType">Type of the destination.</param>
      <returns>The converted object.</returns>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInSettings.GetProperties(System.Type)">
      <summary>
            Gets the editable properties for the indicated plug-in type.
            </summary>
      <param name="type">The plug-in type.</param>
      <returns>A Dictionary with the plugin properties.</returns>
    </member>
    <member name="T:EPiServer.PlugIn.PlugInSummaryAttribute">
      <summary>
            Defines summary information about a plug-in assembly. 
            </summary>
      <example>
            The following sample adds an attribute to AssemblyInfo.cs to define summary 
            information about a plug-in assembly.
            <code source="../CodeSamples/Properties/AssemblyInfo.cs" region="AddAttribute" /></example>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInSummaryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInSummaryAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.PlugInSummaryAttribute.#ctor(System.String,EPiServer.PlugIn.LicensingMode)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PlugInSummaryAttribute" /> class.
            </summary>
      <param name="moreInfourl">A URL that contains more information about the plug-in / assembly.</param>
      <param name="lic">The <see cref="T:EPiServer.PlugIn.LicensingMode" /> for all plug-ins in the assembly.</param>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInSummaryAttribute.MoreInfoUrl">
      <summary>
            Gets or sets the "more info" URL.
            </summary>
      <value>The "more info" URL.</value>
      <remarks>
            This URL is displayed in the admin UI to allow an administrator to go to the plug-in vendors home page and get
            more information regarding the specific plug-in.
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.PlugInSummaryAttribute.License">
      <summary>
            Gets or sets the licensing mode used by this assembly.
            </summary>
      <value>The licensing mode.</value>
    </member>
    <member name="T:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute">
      <summary>
            Automatically register a property type on startup 
            </summary>
      <example>
        <para>
            This property type will automatically be registered with EPiServer
            </para>
        <code source="../CodeSamples/EPiServer/PlugIn/PropertyDefinitionTypePlugInAttributeSamples.cs" region="Register" />
      </example>
    </member>
    <member name="M:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute.GUID">
      <summary>
            Gets or sets the unique id for the corresponding <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />.
            </summary>
      <remarks>Use <see cref="M:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute.GetGUID" /> to check if a value has been assigned.</remarks>
      <value>The unique id of the <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />. Default value is <c>null</c>.</value>
    </member>
    <member name="M:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute.GetGUID">
      <summary>
            Returns the nullable Guid for the corresponding property <see cref="P:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute.GUID" />. 
            </summary>
      <remarks>
            If the usage of the attribute has not set the <see cref="P:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute.GUID" /> property this will not have any value.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute.Match(System.Object)">
      <summary>
            Returns a value indicating whether this instance equals a specified object. 
            </summary>
      <param name="o">The object to match.</param>
      <returns>
        <b>True</b> if the object matches this instance.</returns>
      <example>Used internally to selectively load plugins.</example>
    </member>
    <member name="M:EPiServer.PlugIn.PropertyDefinitionTypePlugInAttribute.Start">
      <summary>
            Auto-start method that is called upon application startup. 
            </summary>
      <remarks>
            The <see cref="T:EPiServer.PlugIn.PlugInLocator" /> will call the static Start method on classes derived 
            from <see cref="T:EPiServer.PlugIn.PlugInAttribute" /> on application startup. The action performed by 
            this attribute is to register this property type. 
            </remarks>
    </member>
    <member name="T:EPiServer.PlugIn.ScheduledPlugInAttribute">
      <summary>
            A plugin to have a scheduled job with a simple user interface in admin mode
            </summary>
      <remarks>
        <para>
            The class must implement a public static method with name "Execute", it will be called on
            the interval specified in administration mode. An optional return value can be specified for
            a descriptive text.
            </para>
        <para>
          <b>Important!</b> If you change the class or namespace name the old scheduled job will still be active but
            without a settings page, you should manually delete this job from the database in table tblScheduledItem.
            </para>
        <para>
            The property HelpFile can be set to link to a custom help page for the job.
            </para>
      </remarks>
      <example>
            A simple example of a scheduled class, the return type could be void if you don't want to
            return a descriptive message. Throwing a exception will in this case show up as "FAILED" on the
            history tab i admin mode.
            <code source="../CodeSamples/EPiServer/PlugIn/ScheduledPlugInAttributeSamples.cs" region="ClassExample" /></example>
    </member>
    <member name="P:EPiServer.PlugIn.ScheduledPlugInAttribute.IntervalType">
      <summary>
            Gets or sets the type of the interval. Used in combination with <see cref="P:EPiServer.PlugIn.ScheduledPlugInAttribute.IntervalLength" /> and <see cref="P:EPiServer.PlugIn.ScheduledPlugInAttribute.InitialTime" /> to set default value.
            </summary>
      <remarks>
            This setting will only be used the first time the scheduled job is initialized.
            </remarks>
      <value>
            The type of the interval.
            </value>
    </member>
    <member name="P:EPiServer.PlugIn.ScheduledPlugInAttribute.IntervalLength">
      <summary>
            Gets or sets the length of the interval. Used in combination with <see cref="P:EPiServer.PlugIn.ScheduledPlugInAttribute.IntervalType" /> and <see cref="P:EPiServer.PlugIn.ScheduledPlugInAttribute.InitialTime" /> to set default value.
            </summary>
      <remarks>
            This setting will only be used the first time the scheduled job is initialized.
            </remarks>
      <value>
            The length of the interval.
            </value>
    </member>
    <member name="P:EPiServer.PlugIn.ScheduledPlugInAttribute.InitialTime">
      <summary>
            Gets or sets the initial time. The format should be parsable to an TimeSpan and will be added to <see cref="P:System.DateTime.Today" /></summary>
      <remarks>
        <para>
            It is only the time part that is used in combination with <see cref="P:EPiServer.PlugIn.ScheduledPlugInAttribute.IntervalType" /> and <see cref="P:EPiServer.PlugIn.ScheduledPlugInAttribute.IntervalLength" />.
            </para>
        <para>
            This setting will only be used the first time the scheduled job is initialized.
            </para>
      </remarks>
      <value>
            The initial time.
            </value>
    </member>
    <member name="P:EPiServer.PlugIn.ScheduledPlugInAttribute.GUID">
      <summary>
            Gets or sets the unique id for the corresponding <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.
            </summary>
      <remarks>Use <see cref="M:EPiServer.PlugIn.ScheduledPlugInAttribute.GetGUID" /> to check if a value has been assigned.</remarks>
      <value>The unique id of the <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />. Default value is <c>null</c>.</value>
    </member>
    <member name="M:EPiServer.PlugIn.ScheduledPlugInAttribute.GetGUID">
      <summary>
            Returns the nullable Guid for the corresponding property <see cref="P:EPiServer.PlugIn.ScheduledPlugInAttribute.GUID" />. 
            </summary>
      <remarks>
            If the usage of the attribute has not set the <see cref="P:EPiServer.PlugIn.ScheduledPlugInAttribute.GUID" /> property this will not have any value.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PlugIn.ScheduledPlugInAttribute.AsyncStart">
      <summary>
            Initialization method called by the plug-in system.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.ScheduledPlugInAttribute.Start">
      <summary>
            Initialization method called by the plug-in system.
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.ScheduledPlugInAttribute.Match(System.Object)">
      <summary>
            Matches the specified attribute against this attribute type.
            </summary>
      <param name="o">The object to match.</param>
      <returns>True if the object matches this attribute instance.</returns>
    </member>
    <member name="P:EPiServer.PlugIn.ScheduledPlugInAttribute.HelpFile">
      <summary>
            The help page to display for job
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.ScheduledPlugInAttribute.Restartable">
      <summary>
            Indicates if the Job is restartable. A restartable job restarts immediately if the job is aborted or not running. 
            </summary>
      <remarks>
            When an application controlled or uncontrolled getting server shutdown then jobs can be marked as aborted.
            When the application restarts, the jobs that are marked as restartable will be executed immediately if the <see cref="P:EPiServer.DataAbstraction.ScheduledJob.LastExecutionAttempt" /> has not exceeded the <see cref="P:EPiServer.Scheduler.SchedulerOptions.MaximumExecutionAttempts" />.
            Bacause a restartable job could started many times then it is important the job has capability to handle restart attempts.
            </remarks>
    </member>
    <member name="T:EPiServer.PropertyCriteria">
      <summary>
            Represents information about a property criteria for a property search
            </summary>
      <remarks>
        <para>
            Refer to
            "Searching and Filtering" under "Navigations and Listings" in the Developer Guide for more information and examples.  
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.PropertyCriteria.Name">
      <summary>
            Name of property
            </summary>
      <remarks>
            For example, if you want to search all pages that have a specific name, you would 
            set this property to 'PageName', and the Value property to the string you want to search for. 
            </remarks>
    </member>
    <member name="P:EPiServer.PropertyCriteria.Value">
      <summary>
            Value of property
            </summary>
      <remarks>
            When searching for categories, the value can be either a single category ID or 
            a comma separated list of IDs (for example "1,3,5"). Comma separated categories 
            are ORed when the propertysearch is executed. 
            </remarks>
    </member>
    <member name="P:EPiServer.PropertyCriteria.Type">
      <summary>
            Value of criteria
            </summary>
    </member>
    <member name="P:EPiServer.PropertyCriteria.Condition">
      <summary>
            What condition that will be checked
            </summary>
    </member>
    <member name="P:EPiServer.PropertyCriteria.IsNull">
      <summary>
            Test for value set to null
            </summary>
    </member>
    <member name="P:EPiServer.PropertyCriteria.Required">
      <summary>
            Is this criteria required for a match
            </summary>
      <returns>Defaults to false</returns>
      <remarks>
            If you have several criterias in one search, you can set this to true to indicate a 
            logical AND, instead of the default OR which is used in the search. 
            </remarks>
    </member>
    <member name="T:EPiServer.PropertyCriteriaCollection">
      <summary>
            Represents a collection of <b><see cref="T:EPiServer.PropertyCriteria" /></b> instances.
            </summary>
    </member>
    <member name="P:EPiServer.PropertyCriteriaCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:EPiServer.PropertyCriteria" /> associated with the specified index.
            </summary>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.Add(EPiServer.PropertyCriteria)">
      <summary>
            Adds a <see cref="T:EPiServer.PropertyCriteria" /> instance to the end of the collection.
            </summary>
      <param name="criteria">The <see cref="T:EPiServer.PropertyCriteria" /> to be added to the end of the collection.</param>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.AddRange(EPiServer.PropertyCriteriaCollection)">
      <summary>
            The collection of <see cref="T:EPiServer.PropertyCriteria" /> should be added to end of the List. 
            The collection itself can NOT be a null reference 
            </summary>
      <param name="criterion">The collection of <see cref="T:EPiServer.PropertyCriteria" /> to be added to the end of the collection.</param>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.Add(System.String,System.String)">
      <summary>
            Constructs and adds a <see cref="T:EPiServer.PropertyCriteria" /> instance to the end of the collection.
            </summary>
      <param name="name">The name of a string property.</param>
      <param name="value">The string value of the property.</param>
      <remarks>
            Condition will be set to CompareCondition.Equal and Required to True.
            </remarks>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.Add(System.String,System.String,EPiServer.Filters.CompareCondition)">
      <summary>
            Constructs and adds a <see cref="T:EPiServer.PropertyCriteria" /> instance to the end of the collection.
            </summary>
      <param name="name">The name of a string property.</param>
      <param name="value">The string value of the property.</param>
      <param name="compareCondition">The compare condition.</param>
      <remarks>
            Required will be set to True.
            </remarks>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.Contains(EPiServer.PropertyCriteria)">
      <summary>
            Determines whether the collection contains a specific element.
            </summary>
      <param name="criteria">The <see cref="T:EPiServer.PropertyCriteria" /> to locate in the CollectionBase.</param>
      <returns>true if the collection contains the specified value; otherwise, false.</returns>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.TryToFind(System.String,EPiServer.PropertyCriteriaCollection@)">
      <summary>
            Tries to find all element which has name equal with propertyCriteriaName .
            </summary>
      <param name="propertyCriteriaName">Name of the property criteria.</param>
      <param name="foundCriterion">Collection of PropertyCriteria which name's property equal propertyCriteriaName.</param>
      <returns>
            true if found such element otherwise false
            </returns>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.Remove(EPiServer.PropertyCriteria)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:EPiServer.PropertyCriteria" /> from the collection.
            </summary>
      <param name="criteria">The <see cref="T:EPiServer.PropertyCriteria" /> to remove from the collection.</param>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.IndexOf(EPiServer.PropertyCriteria)">
      <summary>
            Searches for the specified <see cref="T:EPiServer.PropertyCriteria" /> and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
      <param name="criteria">The <see cref="T:EPiServer.PropertyCriteria" /> to locate in the CollectionBase.</param>
      <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.Insert(System.Int32,EPiServer.PropertyCriteria)">
      <summary>
            Inserts an element into the collection at the specified index.
            </summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="criteria">The <see cref="T:EPiServer.PropertyCriteria" /> to insert.</param>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.CopyTo(EPiServer.PropertyCriteria[],System.Int32)">
      <summary>
            Copies the entire collection to a one-dimensional array, starting at the specified index of the target array.
            </summary>
      <param name="criterias">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.Add(System.String,EPiServer.Core.PageReference)">
      <summary>
            Constructs and adds a <see cref="T:EPiServer.PropertyCriteria" /> instance to the end of the collection.
            </summary>
      <param name="name">The name of a PageReference property.</param>
      <param name="pageLink">The PageReference value of the property.</param>
      <remarks>
            Condition will be set to CompareCondition.Equal and Required to True.
            </remarks>
    </member>
    <member name="M:EPiServer.PropertyCriteriaCollection.Add(System.String,EPiServer.Core.PageReference,EPiServer.Filters.CompareCondition)">
      <summary>
            Constructs and adds a <see cref="T:EPiServer.PropertyCriteria" /> instance to the end of the collection.
            </summary>
      <param name="name">The name of a PageReference property.</param>
      <param name="pageLink">The PageReference value of the property.</param>
      <param name="compareCondition">The compare condition.</param>
      <remarks>
            Required will be set to True.
            </remarks>
    </member>
    <member name="T:EPiServer.RuntimeModelExtensions">
      <summary>
            Extension methods essential to working with types associated with the runtime model. 
            </summary>
    </member>
    <member name="M:EPiServer.RuntimeModelExtensions.GetOriginalType(System.Object)">
      <summary>
            Gets the <see cref="T:System.Type" /> of the current object, ensuring that the eventual 
            type that could be generated by a proxy interceptor is ignored.
            </summary>
      <param name="subject">The instance that you want to get the type for.</param>
      <returns>The type of the current instance.</returns>
    </member>
    <member name="T:EPiServer.Scheduler.Internal.DefaultScheduledJobExecutor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.DefaultScheduledJobFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.DefaultScheduledJobLogRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.FailedScheduledJobRegistry">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Temporary class to manage <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> instances
            that failed to load. Will be replaced in future releases.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.IScheduledJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Minimal interface for all classes that should be executed by the <see cref="T:EPiServer.Scheduler.ISchedulerService" /></summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Scheduler.Internal.IScheduledJob.ID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the identifier of the scheduled job this job instance represents.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.IScheduledJob.Execute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executes the task that it has been scheduled to do.
            </summary>
      <returns>A string describing the outcome</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.IScheduledJobFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory class responsible for instantiating scheduled jobs.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.IScheduledJobFactory.Create(EPiServer.DataAbstraction.ScheduledJob)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create a job instance for the provided <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> definition.
            </summary>
      <param name="job">The job for which an instance should be created.</param>
      <returns>A job instance based on the provided definition.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.IScheduledJobLocator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.IScheduledJobScanner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.ScheduledJobExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Help methods for <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /></summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.ScheduledJobExtensions.IsRestartable(EPiServer.DataAbstraction.ScheduledJob,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.ScheduledJobExtensions.MissingPings(EPiServer.DataAbstraction.ScheduledJob,EPiServer.Scheduler.SchedulerOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.ScheduledJobExtensions.ShouldExecuteImmediately(EPiServer.DataAbstraction.ScheduledJob,EPiServer.Scheduler.SchedulerOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.SchedulerConst">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Contains const value for the scheduler
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Scheduler.Internal.SchedulerConst.PingsThreshold">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Number of times ping should be missed for scheduler job to regarding it as a crashed job. 
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.SchedulerInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.ScheduledItem">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.SchedulerOptionsExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extensions methods for <see cref="T:EPiServer.Scheduler.SchedulerOptions" /></summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.SchedulerService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.SchedulerService.Run(EPiServer.Scheduler.Internal.WaitableTimer,System.Int32,System.Threading.CancellationToken)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.SchedulerService.ReadNextScheduledItem">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Read the next job and set the current scheduler item as next item
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.SchedulerService.GetNextScheduledJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the next job up for execution
            </summary>
      <returns>A ScheduledJob instance if there is a waiting job, otherwise null.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.SchedulerService.ClearScheduledItem">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clear the current job
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.SchedulerService.Execute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Execute the job
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.SchedulerService.ExecuteJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Execute the job
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Scheduler.Internal.SchedulerService.CurrentScheduledItem">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Current scheduler job
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Scheduler.Internal.SchedulerService.WaitOnException">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Amount of time to wait if the scheduler can not execute the job
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Scheduler.Internal.SchedulerService.WaitOnStop">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Amount of time to wait for jobs to complete when stopping the service
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.TimerPrecision">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.Internal.WaitableTimer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class WaitableTimer emulates the Win32 WaitableTimer concept by using an
             internal timer setting an AutoResetEvent object.
             
             It uses a periodic timer to avoid problems with time span calculations.
            
             The period of the timer (which affects the resolution) is by default one second. This 
             can be changed with the parameterized constructor by setting the resolution parameter.
             
             The precision of the timer (i e if it will signal on an even hour, minute, second etc)
             can be set with the precision parameter.
             </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Scheduler.Internal.WaitableTimer.TimerCallback(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Internal timer callback function
            </summary>
      <param name="context">
      </param>
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.IScheduledJobExecutor">
      <summary>
            Service responsible for executing scheduled jobs.
            </summary>
    </member>
    <member name="M:EPiServer.Scheduler.IScheduledJobExecutor.StartAsync(EPiServer.DataAbstraction.ScheduledJob,EPiServer.Scheduler.JobExecutionOptions,System.Threading.CancellationToken)">
      <summary>
            Starts an instance of a job using the provided options.
            </summary>
      <param name="job">The job that should be executed.</param>
      <param name="options">Options for executing the job</param>
      <param name="cancellationToken">Cancellation token that can be used for cancel the task that runs the job</param>
      <returns>A <see cref="T:EPiServer.Scheduler.JobExecutionResult" /> instance containing information on the resulting status.</returns>
    </member>
    <member name="M:EPiServer.Scheduler.IScheduledJobExecutor.Cancel(System.Guid)">
      <summary>
            Cancel any running job with the provided identifier
            </summary>
      <param name="id">The <see cref="T:EPiServer.DataAbstraction.ScheduledJob" /> identifier.</param>
    </member>
    <member name="M:EPiServer.Scheduler.IScheduledJobExecutor.ListRunningJobs">
      <summary>
            List all jobs that the <see cref="T:EPiServer.Scheduler.IScheduledJobExecutor" /> are currently executing.
            </summary>
      <returns>A list of the currently running jobs.</returns>
      <remarks>
            This method will not return jobs that are running in other contexts such as another server.
            </remarks>
    </member>
    <member name="T:EPiServer.Scheduler.ScheduledJobExecutorExtensions">
      <summary>
            Extention methods for the <see cref="T:EPiServer.Scheduler.IScheduledJobExecutor" /> service.
            </summary>
    </member>
    <member name="M:EPiServer.Scheduler.ScheduledJobExecutorExtensions.StartAsync(EPiServer.Scheduler.IScheduledJobExecutor,EPiServer.DataAbstraction.ScheduledJob)">
      <summary>
            Starts an instance of a job using the default options.
            </summary>
      <param name="executor">The executor that should be used.</param>
      <param name="job">The job that should be executed.</param>
    </member>
    <member name="M:EPiServer.Scheduler.ScheduledJobExecutorExtensions.StartAsync(EPiServer.Scheduler.IScheduledJobExecutor,EPiServer.DataAbstraction.ScheduledJob,EPiServer.Scheduler.JobExecutionOptions)">
      <summary>
            Starts an instance of a job using the provided options.
            </summary>
      <param name="executor">The executor that should be used.</param>
      <param name="job">The job that should be executed.</param>
      <param name="options">Options for executing the job</param>
    </member>
    <member name="M:EPiServer.Scheduler.ScheduledJobExecutorExtensions.ListRunningJobs``1(EPiServer.Scheduler.IScheduledJobExecutor)">
      <summary>
            List all jobs of the provided type that the <see cref="T:EPiServer.Scheduler.IScheduledJobExecutor" /> are currently executing. 
            </summary>
      <param name="executor">The executor that should be used.</param>
      <typeparam name="T">The type of job that should be returned</typeparam>
      <returns>A list of the currently running jobs.</returns>
      <remarks>
            This method will not return jobs that are running in other contexts such as another server.
            </remarks>
    </member>
    <member name="T:EPiServer.Scheduler.IScheduledJobLogRepository">
      <summary>
            Repository for maintaining logs for <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.
            </summary>
    </member>
    <member name="M:EPiServer.Scheduler.IScheduledJobLogRepository.LogAsync(System.Guid,EPiServer.DataAbstraction.ScheduledJobLogItem)">
      <summary>
            Log the result of a completed <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.
            </summary>
      <param name="id">Scheduled job identifier</param>
      <param name="item">The information that should be logged.</param>
    </member>
    <member name="M:EPiServer.Scheduler.IScheduledJobLogRepository.GetAsync(System.Guid,System.Int64,System.Int32)">
      <summary>
            Get log information for a <see cref="T:EPiServer.DataAbstraction.ScheduledJob" />.
            </summary>
      <param name="id">Scheduled job identifier</param>
      <param name="startIndex">Index for where to start getting log items for.</param>
      <param name="maxCount">The maximum number of log items to return.</param>
    </member>
    <member name="T:EPiServer.Scheduler.ISchedulerService">
      <summary>
            Support for running the scheduler and stopping the service
            </summary>
    </member>
    <member name="M:EPiServer.Scheduler.ISchedulerService.Run">
      <summary>
            Will start the scheduler process
            </summary>
      <remarks>Create a new long running <see cref="T:System.Threading.Tasks.Task" /> before calling method since this it will be blocking</remarks>
    </member>
    <member name="M:EPiServer.Scheduler.ISchedulerService.Stop">
      <summary>
            Will stop the background task that runs the scheduler
            </summary>
    </member>
    <member name="T:EPiServer.Scheduler.JobExecutionOptions">
      <summary>
            Options on how <see cref="T:EPiServer.Scheduler.IScheduledJobExecutor" /> should execute a job.
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.JobExecutionOptions.Trigger">
      <summary>
            Get or sets a value that indicates how the job was triggered
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.JobExecutionOptions.RunSynchronously">
      <summary>
            Gets or sets a value indicating if the job should be executed synchronously.
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.JobExecutionOptions.ContentCacheSlidingExpiration">
      <summary>
            The sliding cache for how long content is cached when executed. Set to "0:0:0" to disable.
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.JobExecutionOptions.PreserveAsyncCompatibility">
      <summary>
            Gets or sets a value indicating if the job should be run async in some cases
            even if <see cref="P:EPiServer.Scheduler.JobExecutionOptions.RunSynchronously" /> is set.
            </summary>
    </member>
    <member name="T:EPiServer.Scheduler.JobExecutionResult">
      <summary>
            Hold information on the result of a call to <see cref="M:EPiServer.Scheduler.IScheduledJobExecutor.StartAsync(EPiServer.DataAbstraction.ScheduledJob,EPiServer.Scheduler.JobExecutionOptions,System.Threading.CancellationToken)" /></summary>
    </member>
    <member name="M:EPiServer.Scheduler.JobExecutionResult.#ctor(EPiServer.DataAbstraction.ScheduledJobExecutionStatus,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Scheduler.JobExecutionResult" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.JobExecutionResult.Status">
      <summary>
            Gets the status of the last execution
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.JobExecutionResult.Message">
      <summary>
            Gets a message describing the outcome of the last execution
            </summary>
    </member>
    <member name="T:EPiServer.Scheduler.JobStatusChangedEventArgs">
      <summary>
            Job Status Changed Event arguments
            </summary>
    </member>
    <member name="M:EPiServer.Scheduler.JobStatusChangedEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance
            </summary>
      <param name="message">Message</param>
    </member>
    <member name="P:EPiServer.Scheduler.JobStatusChangedEventArgs.Message">
      <summary>
            Gets the Message
            </summary>
    </member>
    <member name="T:EPiServer.Scheduler.PagedScheduledJobLogResult">
      <summary>
            Represents the result of a <see cref="M:EPiServer.Scheduler.IScheduledJobLogRepository.GetAsync(System.Guid,System.Int64,System.Int32)" /> query.
            </summary>
    </member>
    <member name="M:EPiServer.Scheduler.PagedScheduledJobLogResult.#ctor(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ScheduledJobLogItem},System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Scheduler.PagedScheduledJobLogResult" /> class.
            </summary>
    </member>
    <member name="T:EPiServer.Scheduler.ScheduledJobBase">
      <summary>
            Base class for all Scheduled job that supports start and stop
            </summary>
    </member>
    <member name="E:EPiServer.Scheduler.ScheduledJobBase.StatusChanged">
      <summary>
            Event used to report status changes for the Job
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.ScheduledJobBase.ScheduledJobId">
      <summary>
            Gets the Id of the scheduled job
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.ScheduledJobBase.IsStoppable">
      <summary>
            Gets/Sets if the job is stoppable
            </summary>
    </member>
    <member name="M:EPiServer.Scheduler.ScheduledJobBase.Execute">
      <summary>
            Execute the job
            </summary>
    </member>
    <member name="M:EPiServer.Scheduler.ScheduledJobBase.Stop">
      <summary>
            Stop the job
            </summary>
    </member>
    <member name="M:EPiServer.Scheduler.ScheduledJobBase.OnStatusChanged(System.String)">
      <summary>
            Raise a StatusChanged event
            </summary>
      <param name="statusMessage">Status message to report</param>
    </member>
    <member name="P:EPiServer.Scheduler.ScheduledJobBase.EPiServer#Scheduler#Internal#IScheduledJob#ID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Scheduler.ScheduledJobTrigger">
      <summary>
            Defines the different triggers that can start a scheduled job
            </summary>
    </member>
    <member name="F:EPiServer.Scheduler.ScheduledJobTrigger.Unknown">
      <summary>
            The cause of the execution is unknown
            </summary>
    </member>
    <member name="F:EPiServer.Scheduler.ScheduledJobTrigger.Scheduler">
      <summary>
            Indicates that the job was started at scheduled time by <see cref="T:EPiServer.Scheduler.ISchedulerService" />.
            </summary>
    </member>
    <member name="F:EPiServer.Scheduler.ScheduledJobTrigger.User">
      <summary>
            Indicates that the job was started manually by a user from the Administration interface.
            </summary>
    </member>
    <member name="F:EPiServer.Scheduler.ScheduledJobTrigger.Restart">
      <summary>
            Indicates that a restartable job has been restarted by <see cref="T:EPiServer.Scheduler.ISchedulerService" />.
            </summary>
    </member>
    <member name="T:EPiServer.Scheduler.SchedulerOptions">
      <summary>
            Contains settings for the scheduler
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.SchedulerOptions.Enabled">
      <summary>
            Set to false to disable the scheduler. Default value is true.
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.SchedulerOptions.PingTime">
      <summary>
            Scheduler ping time. Default value is 30 seconds.
            </summary>
    </member>
    <member name="P:EPiServer.Scheduler.SchedulerOptions.MaximumExecutionAttempts">
      <summary>
            Indicates the maximum number times jobs should be executed in case a controlled or uncontrolled server shutdown interrupted their execution. 
            Default value is 10.
            /// </summary>
    </member>
    <member name="P:EPiServer.Scheduler.SchedulerOptions.ContentCacheSlidingExpiration">
      <summary>
            The sliding cache for how long content is cached when retrieved from a scheduled job.
            </summary>
      <remarks>
        <para>Default value is 1 minutes. Set to "0:0:0" to disable or null to use system wide defaults.</para>
        <para>Use <see cref="T:EPiServer.Core.ContentCacheScope" /> to set a custom expiration within a specific job.</para>
      </remarks>
    </member>
    <member name="T:EPiServer.Security.AccessControlChangedBy">
      <summary>
            Used to identify what last changed the access control list
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessControlChangedBy.Unknown">
      <summary>
            Not defined
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessControlChangedBy.User">
      <summary>
            Changed by user in the UI
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessControlChangedBy.Attribute">
      <summary>
            Changed by attribute definition
            </summary>
    </member>
    <member name="T:EPiServer.Security.AccessControlEntry">
      <summary>
            Defines an entry in a <see cref="T:EPiServer.Security.AccessControlList" />.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AccessControlEntry.#ctor(System.String,EPiServer.Security.AccessLevel)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.AccessControlEntry" /> class.
            </summary>
      <param name="name">The name of the role.</param>
      <param name="access">The access level.</param>
      <remarks>
            Note that this constructor will create the ACE as a Role ACE.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AccessControlEntry.#ctor(EPiServer.Security.RawACE)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.AccessControlEntry" /> class.
            </summary>
      <param name="rawAce">The raw ACE.</param>
      <remarks>
            Will use the <see cref="F:EPiServer.Security.RawACE.EntityType" /> to determine if it is a Role or User.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AccessControlEntry.#ctor(System.String,EPiServer.Security.AccessLevel,EPiServer.Security.SecurityEntityType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.AccessControlEntry" /> class.
            </summary>
      <param name="name">The name of the user or role.</param>
      <param name="access">The access level.</param>
      <param name="entityType">Type of the entity (User or Role).</param>
    </member>
    <member name="P:EPiServer.Security.AccessControlEntry.Name">
      <summary>
            Gets the name of the entry for this ACE.
            </summary>
      <value>The name.</value>
      <remarks>
            This is the name of a user or a role that this Access Control Entry applies to.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AccessControlEntry.Access">
      <summary>
            Gets the access level.
            </summary>
      <value>The access level.</value>
      <remarks>
            The access level for this entry.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AccessControlEntry.EntityType">
      <summary>
            Gets the type of the entry.
            </summary>
      <value>The type of the entry.</value>
      <remarks>
            We only support Users or Roles.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AccessControlEntry.Equals(EPiServer.Security.AccessControlEntry)">
      <summary>
            Indicates whether the current <see cref="T:EPiServer.Security.AccessControlEntry" /> instance is equal to another <see cref="T:EPiServer.Security.AccessControlEntry" /> instance.
            </summary>
      <param name="other">An <see cref="T:EPiServer.Security.AccessControlEntry" /> to compare with this instance.</param>
      <returns>
            true if the current instance is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="T:EPiServer.Security.AccessControlList">
      <summary>
        <b>AccessControlList</b> is used to restrict access to various items.
            </summary>
      <remarks>
        <para>
            ACL holds the Access Control List for a <b>PageData</b> object. Since <b>PageData</b> has the 
            attribute Property which is a <b>PropertyDataCollection</b>, <b>ACL</b> effectively controls 
            access to the Web page. Keep in mind that the Access Control List applies to all of the 
            <b>PageData</b> object and its attributes. It is not possible to have different access permissions 
            for different properties.
            </para>
        <para>
            The Access Control List is comprised of an Access Control Entry, ACE, array and is accessed by 
            calling the method ACL.ToRawACEArray.
            </para>
      </remarks>
      <example>
            The code example below demonstrates the usage of AccessControlList, RawACE and AccessControlEntry.
            The example below sets up access rights on a "personal" start page. Administrators gets full access, 
            the creator gets everything except for administer and any other user/group that 
            has at least read access on the team start page gets read access rights.
            The argument "page" is the page to update the access rights on.
            <code source="../Codesamples/EPiServerNET/Security/AccessControlListSamples.cs" region="SetAccess" lang="cs" />
            The following code example demonstrates the usage of <b>ToRawACEArray</b> to enumerate the 
            Access Control Entries. The example enumerates the <b>EPiServer.Security.RawAce</b> objects, 
            which together form the Access Control List and check if one of them is the Create permission.
            <code source="../Codesamples/EPiServerNET/Security/AccessControlListSamples.cs" region="EnumerateEntries" lang="cs" />
            The following code example demonstrates the usage of <b>QueryDistinctAccess</b> to check specific 
            access for the current user.
            <code source="../Codesamples/EPiServerNET/Security/AccessControlListSamples.cs" region="CheckAccess" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.AccessControlList" /> class without any entries.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.#ctor(EPiServer.Security.RawACE[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.AccessControlList" /> class with values from the provided <see cref="T:EPiServer.Security.RawACE" /> array.
            </summary>
      <param name="accessControlEntries">The array of entries to populate the instance with.</param>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.#ctor(EPiServer.Security.AccessControlList)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.AccessControlList" /> class that has the same entries as the provided list.
            </summary>
      <param name="accessControlList">The list whose entries should be replicated in the new instance.</param>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Security.AccessControlEntry" /> with the specified security entity name.
            </summary>
      <param name="securityEntityName">The name of the security entity entry.</param>
      <returns>An <see cref="T:EPiServer.Security.AccessControlEntry" /> instance.</returns>
      <remarks>
        <see cref="T:EPiServer.Security.AccessControlList" /> does not accept null as name and will overwrite any previously added elements with the same name.
            </remarks>
      <exception cref="T:System.ArgumentException">Thrown if trying to add an entry with a different name that the one provided.</exception>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.Count">
      <summary>
            Gets the number of <see cref="T:EPiServer.Security.AccessControlEntry">entries</see> in the current instance.
            </summary>
      <remarks>
            This property does not take inherited entries into account.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.Keys">
      <summary>
            Gets the ACL keys.
            </summary>
      <remarks>
            This property does not take inherited entries into account.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.IsInherited">
      <summary>
            Gets or sets a value that indicates if this ACL is inherited from a parent.
            </summary>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.SupportsInheritance">
      <summary>
            Returns true if the access control class supports inherited ACLs
            </summary>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.Creator">
      <summary>
            Gets or sets the creator of the object that the ACL is attached to.
            </summary>
      <remarks>
            This is used to determine special access rights for the virtual '<see cref="T:EPiServer.Security.CreatorRole" />'.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.ChangedBy">
      <summary>
            Gets or sets what last changed the access control list. 
            This property is only intended for internal use.
            </summary>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.InheritedSecurityDescriptor">
      <summary>
            Gets the parent security descriptor this instance would inherit should it be set to inherited.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.Add(EPiServer.Security.AccessControlEntry)">
      <summary>
            Adds an entry to the access control list. If an entry with the same name already exists, an exception will be thrown.
            </summary>
      <param name="accessControlEntry">The <see cref="T:EPiServer.Security.AccessControlEntry" /> to add</param>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.QueryAccess(System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>
            Determines the access level that the provided principal has been given.
            </summary>
      <param name="principal">The principal whose access should be queried.</param>
      <param name="maxAccess">The maximum access required to check.</param>
      <returns>The <see cref="T:EPiServer.Security.AccessLevel" /> that the principal has, at most the maximum access provided.</returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.QueryAccess(System.Security.Principal.IPrincipal)">
      <summary>
            Determines the access level that the provided principal has for this instance.
            </summary>
      <param name="principal">The principal.</param>
      <returns>The <see cref="T:EPiServer.Security.AccessLevel" /> that the provided principal has.</returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.QueryAccess">
      <summary>
            Determines the access level that the current user has for this instance.
            </summary>
      <returns>The <see cref="T:EPiServer.Security.AccessLevel" /> that the current user has.</returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.QueryAccess(EPiServer.Security.AccessLevel)">
      <summary>
            Determines the access level that the current user has for this instance limited to the maximum access level provided.
            </summary>
      <param name="maxAccess">The maximum access required to check.</param>
      <returns>The <see cref="T:EPiServer.Security.AccessLevel" /> that the principal has, at most the maximum access provided.</returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.QueryDistinctAccess(EPiServer.Security.AccessLevel)">
      <summary>
            Verifies that the specific access levels are set for the current user.
            </summary>
      <param name="access">The requested access level</param>
      <returns>
        <b>True</b> if the combined access level of all entries that apply to the current user in this ACL has at least the requested access level</returns>
      <remarks>
            This is the fastet way to query for access, and is thus the preferred mechanism.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.QueryDistinctAccess(System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>
            Verify that the specific access levels are set for the specified principal.
            </summary>
      <param name="principal">The principal for the user to check access against.</param>
      <param name="access">The requested access level</param>
      <returns>
        <b>True</b> if the combined access level of all entries that apply to the given principal in this ACL has at least the requested access level</returns>
      <remarks>
            This is the fastet way to query for access, and is thus the preferred mechanism.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.Copy">
      <summary>
            Creates a copy of the current instance. 
            </summary>
      <returns>A new <see cref="T:EPiServer.Security.AccessControlList" /> instance.</returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.ToRawACEArray">
      <summary>
            Creates an array of <see cref="T:EPiServer.Security.RawACE" /> objects that represents all entries in the Access Control List.
            </summary>
      <returns>An array of <see cref="T:EPiServer.Security.RawACE" /> objects.</returns>
      <remarks>
            See <see cref="T:EPiServer.Security.AccessControlList" /> for code example.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.Save">
      <summary>
            Saves this instance.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.AccessControlList.Save(EPiServer.Security.SecuritySaveType)">
      <summary>
            Saves the specified type.
            </summary>
      <param name="type">The type.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.AccessControlList.Clear">
      <summary>
            Clears the Creator property an all entries from this security descriptor instance.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.ClearEntries">
      <summary>
            Clears all entries from this security descriptor instance.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.Contains(System.String)">
      <summary>
            Determines if the list contains an entry with the specified security entity name.
            </summary>
      <param name="securityEntityName">The name of the security entity entry.</param>
      <returns>
        <c>True</c> if a matching entry exists, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.Contains(System.String,EPiServer.Security.AccessLevel,EPiServer.Security.SecurityEntityType)">
      <summary>
            Determines if the list contains an entry with the specified name, access level and security entity type.
            </summary>
      <param name="securityEntityName">The name of the security entity entry.</param>
      <param name="access">The access level.</param>
      <param name="entityType">The security entity type.</param>
      <returns>
        <c>True</c> if a matching entry exists, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.Remove(System.String)">
      <summary>
            Removes the specified security entity from this list.
            </summary>
      <param name="securityEntityName">The name of the security entity to remove.</param>
      <returns>True if an entry with the provided name was found and removed;if no entry with that name was found false is returned.</returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.EntriesEquals(EPiServer.Security.AccessControlList)">
      <summary>
            Determines whether the specified <see cref="T:EPiServer.Security.AccessControlList" /> has the same entries as the current instance.
            </summary>
      <param name="other">The ACL to compare entries with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:EPiServer.Security.AccessControlList" /> has equal entries; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.Equals(EPiServer.Security.AccessControlList)">
      <summary>
            Indicates whether the current <see cref="T:EPiServer.Security.AccessControlList" /> instance is equal to another <see cref="T:EPiServer.Security.AccessControlList" /> instance.
            </summary>
      <param name="other">An <see cref="T:EPiServer.Security.AccessControlList" /> to compare with this instance.</param>
      <returns>
            true if the current instance is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.GetParentSecurityDescriptor">
      <summary>
            Retrieves the security descriptor that this instance would inherited should it be set to inherited.
            </summary>
      <returns>The security descriptor that the current instance can inherit from.</returns>
      <remarks>Implementors of this method should have their own caching in place, this method may be called a lot and does not
            store the results in a local variable.</remarks>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.GetInheritedSecurityDescriptor">
      <summary>
            Retrieves a security descriptor that represents the current entity with inherited entries.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.ThrowIfInherited">
      <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if current instance is set as inherited.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through all entries in the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through all entries in the collection.
            </returns>
      <remarks>
            This method will not return any inherited entries.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.CreateWritableClone">
      <summary>
            Creates a writable clone of the current <see cref="T:EPiServer.Security.AccessControlList" /> instance.
            </summary>
      <returns>A writable copy of the current instance.</returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.MakeReadOnly">
      <summary>
            Locks current instance for changes.
            </summary>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.IsReadOnly">
      <summary>
            Gets or sets a value indicating whether the current instance is read only.
            </summary>
      <value>
        <c>true</c> if it is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates writable clone of this object.
            </summary>
      <returns>Writable clone object.</returns>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.ThrowIfReadOnly">
      <summary>
            Throws an exception if the current instance is set to read-only.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.HasAccess(System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.AccessControlList.GetAccessLevel(System.Security.Principal.IPrincipal)">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Security.AccessControlList.Entries">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.AccessControlList.AddEntry(EPiServer.Security.AccessControlEntry)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.AccessControlList.RemoveEntry(EPiServer.Security.AccessControlEntry)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.AccessControlList.ReadXml(System.Xml.XmlReader)">
      <summary>
            Implementation of <see cref="M:IXmlSerializable.ReadXml" />.
            Generates an object from its XML representation.
            </summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Implementation of <see cref="M:IXmlSerializable.WriteXml" />.
            Converts an object into its XML representation.
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.IsModified">
      <summary>
            Gets a value indicating whether this instance has been modified after loading.
            </summary>
      <value>
        <c>true</c> if this instance has been modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.ResetModified">
      <summary>
            Resets the modified flag on all the data contained on the instance.
            </summary>
    </member>
    <member name="P:EPiServer.Security.AccessControlList.AccessLevelValues">
      <summary>
            Gets a list of all the distinct <see cref="T:EPiServer.Security.AccessLevel">access levels</see> available.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AccessControlList.LocalizationKey(EPiServer.Security.AccessLevel)">
      <summary>
            Returns a string that can be used as a key when requesting a localized representation of the access level.
            </summary>
      <param name="accessLevel">The access level to translate.</param>
    </member>
    <member name="T:EPiServer.Security.AccessLevel">
      <summary>
            The access levels (bitmapped) that are used to control the various actions that a user is allowed to perform.
            </summary>
      <remarks>
            Primarily used to control access to page manipulation functions in EPiServer, but can be used for general-purpose
            access restriction functions.
            </remarks>
    </member>
    <member name="F:EPiServer.Security.AccessLevel.NoAccess">
      <summary>
            No access to an item
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessLevel.Read">
      <summary>
            Read access to an item
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessLevel.Create">
      <summary>
            Create access for an item, i e create new items below this item
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessLevel.Edit">
      <summary>
            Change / create new versions of this item
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessLevel.Delete">
      <summary>
            Delete this item
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessLevel.Publish">
      <summary>
            Publish/unpublish items and versions of an item
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessLevel.Administer">
      <summary>
            Set access rights for an item
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessLevel.FullAccess">
      <summary>
            Full access for an item
            </summary>
    </member>
    <member name="F:EPiServer.Security.AccessLevel.Undefined">
      <summary>
            Access level not defined.
            </summary>
      <remarks>
            This enum value is reserved for internal use.
            </remarks>
    </member>
    <member name="T:EPiServer.Security.ContentAccessControlList">
      <summary>
            Implementation of AccessControlList for content
            </summary>
    </member>
    <member name="M:EPiServer.Security.ContentAccessControlList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.ContentAccessControlList" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Security.ContentAccessControlList.#ctor(EPiServer.Security.RawACE[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.ContentAccessControlList" /> class.
            </summary>
      <param name="acl">The acl.</param>
    </member>
    <member name="M:EPiServer.Security.ContentAccessControlList.#ctor(EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.ContentAccessControlList" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="M:EPiServer.Security.ContentAccessControlList.#ctor(EPiServer.Core.ContentReference,EPiServer.Security.AccessControlList)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.ContentAccessControlList" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="list">The list.</param>
    </member>
    <member name="M:EPiServer.Security.ContentAccessControlList.#ctor(EPiServer.Core.ContentReference,System.Collections.Generic.IEnumerable{EPiServer.Security.AccessControlEntry})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.ContentAccessControlList" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Security.ContentAccessControlList.ContentLink">
      <summary>
            Gets or sets the content link that this instance is describing.
            </summary>
    </member>
    <member name="M:EPiServer.Security.ContentAccessControlList.Copy">
      <summary>
            Creates a copy of the current instance.
            </summary>
      <returns>A new AccessControlList.</returns>
    </member>
    <member name="M:EPiServer.Security.ContentAccessControlList.CreateWritableClone">
      <summary>
            Creates a writable clone of the current <see cref="T:EPiServer.Security.ContentAccessControlList" /> instance.
            </summary>
      <returns>A writable copy of the current instance.</returns>
    </member>
    <member name="P:EPiServer.Security.ContentAccessControlList.ContentLoader">
      <summary>
            Gets or sets the content loader.
            </summary>
      <remarks>This is used when <see cref="P:EPiServer.Security.AccessControlList.IsInherited" /> is true to load parent content.</remarks>
    </member>
    <member name="P:EPiServer.Security.ContentAccessControlList.InstanceCache">
      <summary>
            Gets or sets the instance cache
            </summary>
      <remarks>This is used when <see cref="P:EPiServer.Security.AccessControlList.IsInherited" /> is true to cache the resolved parent ACL.</remarks>
    </member>
    <member name="M:EPiServer.Security.ContentAccessControlList.GetParentSecurityDescriptor">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.ContentAccessControlList.Save(EPiServer.Security.SecuritySaveType)">
      <summary>
            Saves the specified type.
            </summary>
      <param name="type">The type.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.CreatorRole">
      <summary>
            Handles access rights for the creator of a page
            </summary>
    </member>
    <member name="M:EPiServer.Security.CreatorRole.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Security.CreatorRole" /></summary>
    </member>
    <member name="P:EPiServer.Security.CreatorRole.Name">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.CreatorRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
      <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
      <param name="principal">The principal.</param>
      <param name="context">The context.</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
      <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
    </member>
    <member name="P:EPiServer.Security.CreatorRole.RoleName">
      <summary>
            Gets the name of the role.
            </summary>
      <value>The name of the role.</value>
    </member>
    <member name="M:EPiServer.Security.EnumerableSecurity.WhereAuthorized``1(System.Collections.Generic.IEnumerable{``0},System.Security.Principal.IPrincipal)">
      <summary>
            Filters the source enumeration using each item's security descriptor.
            </summary>
      <typeparam name="T">The type of entity to filter.</typeparam>
      <param name="source">The source enumeration.</param>
      <param name="user">The user to filter authorization against.</param>
      <returns>Elements which fill the required access level for the given user.</returns>
    </member>
    <member name="M:EPiServer.Security.EnumerableSecurity.WhereAuthorized``1(System.Collections.Generic.IEnumerable{``0},System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>
            Filters the source enumeration using each item's security descriptor.
            </summary>
      <typeparam name="T">The type of entity to filter.</typeparam>
      <param name="source">The source enumeration.</param>
      <param name="user">The user to filter authorization against.</param>
      <param name="requiredAccess">The required access level. This is Read by default.</param>
      <returns>Elements which fill the required access level for the given user.</returns>
    </member>
    <member name="T:EPiServer.Security.IContentAccessEvaluator">
      <summary>
            Component responsible for evaluating what access a user has to a specific content item.
            </summary>
    </member>
    <member name="M:EPiServer.Security.IContentAccessEvaluator.HasAccess(EPiServer.Core.IContent,System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>
            Evaluates if the provided <see cref="T:System.Security.Principal.IPrincipal" /> has the requested access rights to the provided <see cref="T:EPiServer.Core.IContent" /> instance
            in the current context.
            </summary>
      <returns>
        <c>true</c> if the user has the requested access; otherwise <c>false</c></returns>
    </member>
    <member name="M:EPiServer.Security.IContentAccessEvaluator.GetAccessLevel(EPiServer.Core.IContent,System.Security.Principal.IPrincipal)">
      <summary>
            Calculates the access level of the provided <see cref="T:System.Security.Principal.IPrincipal" /> to the <see cref="T:EPiServer.Core.IContent" /> instance
            in the current context.
            </summary>
    </member>
    <member name="T:EPiServer.Security.IContentSecurable">
      <summary>
            The IContentSecurable interface is implemented by any content object that has access restrictions.
            </summary>
      <remarks>
            In order to decouple domain objects from the access check / security management responsibilities,
            the process of checking access rights are split into two parts: first you get the security
            descriptor from the secured object, then you check access rights on the security descriptor.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.IContentSecurable.GetContentSecurityDescriptor">
      <summary>
            Gets the content security descriptor.
            </summary>
      <returns>An implementation of IContentSecurityDescriptor.</returns>
    </member>
    <member name="T:EPiServer.Security.IContentSecurityDescriptor">
      <summary>
            Describes an editable security descriptor that is associated with a Content item.
            </summary>
    </member>
    <member name="P:EPiServer.Security.IContentSecurityDescriptor.ContentLink">
      <summary>
            Gets or sets the content link to the content that the access is set for.
            </summary>
    </member>
    <member name="T:EPiServer.Security.IContentSecurityDescriptorExtensions">
      <summary>
            Extensions methods for IContent which support IContentSecurityDescriptor
            </summary>
    </member>
    <member name="M:EPiServer.Security.IContentSecurityDescriptorExtensions.SaveSecurityInfo(EPiServer.Core.IContent,EPiServer.DataAbstraction.IContentSecurityRepository,EPiServer.Security.AccessControlList,EPiServer.Security.SecuritySaveType)">
      <summary>
            Helper method to replace the ACL on any <see cref="T:EPiServer.Core.IContent" /> using <see cref="T:EPiServer.DataAbstraction.IContentSecurityRepository" /></summary>
      <param name="content">The content to save ACL for</param>
      <param name="contentSecurityRepository">The content security repository to used for saving the ACL</param>
      <param name="accessControlList">The access control list to be saved</param>
      <param name="securitySaveType">Type of the security save.</param>
      <returns>
        <c>True</c> if the type implements <see cref="T:EPiServer.Security.IContentSecurable" />; otherwise <c>false</c></returns>
    </member>
    <member name="M:EPiServer.Security.IContentSecurityDescriptorExtensions.ToRawACEArray(EPiServer.Core.IContent)">
      <summary>
            Converts the ACL of <see cref="T:EPiServer.Core.IContent" /> to an <see cref="T:EPiServer.Security.RawACE" /></summary>
      <param name="content">The content.</param>
      <returns>An array of security entries if the type implements <see cref="T:EPiServer.Security.IContentSecurable" />; otherwise an empty array</returns>
    </member>
    <member name="T:EPiServer.Security.IEditableSecurityDescriptor">
      <summary>
            Describes a security descriptor that can be edited.
            </summary>
    </member>
    <member name="P:EPiServer.Security.IEditableSecurityDescriptor.IsInherited">
      <summary>
            Gets or sets a value indicating whether this descriptor inherits it's entries from another instance.
            </summary>
      <value>
        <c>true</c> if this instance is inherited; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Security.IEditableSecurityDescriptor.Creator">
      <summary>
            Gets or sets the identity of the creator of the object that this instance describes.
            </summary>
    </member>
    <member name="M:EPiServer.Security.IEditableSecurityDescriptor.Clear">
      <summary>
            Clears the Creator property an all entries from this security descriptor instance.
            </summary>
    </member>
    <member name="M:EPiServer.Security.IEditableSecurityDescriptor.AddEntry(EPiServer.Security.AccessControlEntry)">
      <summary>
            Adds the provided access control entry to this security descriptor instance.
            </summary>
      <param name="accessControlEntry">The access control entry to add.</param>
    </member>
    <member name="M:EPiServer.Security.IEditableSecurityDescriptor.RemoveEntry(EPiServer.Security.AccessControlEntry)">
      <summary>
            Removes the provided access control entry from this security descriptor instance.
            </summary>
      <param name="accessControlEntry">The access control entry to remove.</param>
    </member>
    <member name="P:EPiServer.Security.IEditableSecurityDescriptor.Entries">
      <summary>
            Gets all the access control entries in this security descriptor instance.
            </summary>
      <remarks>
            If this descriptor is inherited and the parent implements the IEditableSecurityDescriptor interface, 
            the inherited entries will be returned.
            </remarks>
    </member>
    <member name="T:EPiServer.Security.IEditableSecurityDescriptorExtensions">
      <summary>
            Extension methods for the <see cref="T:EPiServer.Security.IEditableSecurityDescriptor" /> interface.
            </summary>
    </member>
    <member name="M:EPiServer.Security.IEditableSecurityDescriptorExtensions.ToLocal(EPiServer.Security.IEditableSecurityDescriptor)">
      <summary>
            Converts the security descriptor to local (not inherited) and copies all inherited entries.
            </summary>
      <param name="securityDescriptor">The security descriptor.</param>
      <exception cref="T:System.ArgumentNullException">securityDescriptor</exception>
      <exception cref="T:System.ArgumentException">Cannot convert a security descriptor that's not inherited.</exception>
    </member>
    <member name="M:EPiServer.Security.IEditableSecurityDescriptorExtensions.ToLocal(EPiServer.Security.IEditableSecurityDescriptor,System.Boolean)">
      <summary>
            Converts the security descriptor to local (not inherited) and copies all inherited entries if <paramref name="copyInheritedEntries" /> is set to true.
            </summary>
      <param name="securityDescriptor">The security descriptor.</param>
      <param name="copyInheritedEntries">if set to <c>true</c> all inherited entries are copied locally.</param>
      <exception cref="T:System.ArgumentNullException">securityDescriptor</exception>
      <exception cref="T:System.ArgumentException">Cannot convert a security descriptor that's not inherited.</exception>
    </member>
    <member name="M:EPiServer.Security.IEditableSecurityDescriptorExtensions.ToInherited(EPiServer.Security.IEditableSecurityDescriptor)">
      <summary>
            Converts the security descriptor to inherited.
            </summary>
      <param name="securityDescriptor">The security descriptor.</param>
      <exception cref="T:System.ArgumentNullException">securityDescriptor</exception>
      <exception cref="T:System.ArgumentException">Cannot convert a security descriptor that's already inherited.</exception>
    </member>
    <member name="T:EPiServer.Security.Internal.ContentAccessEvaluatorExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Convenience methods for the <see cref="T:EPiServer.Security.IContentAccessEvaluator" /> interface
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ContentAccessEvaluatorExtensions.HasAccess(EPiServer.Security.IContentAccessEvaluator,EPiServer.Core.IContent,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Evaluates if the current user has the requested access rights to the provided <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <returns>
        <c>true</c> if the user has the requested access; otherwise <c>false</c></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ContentAccessEvaluatorExtensions.GetAccessLevel(EPiServer.Security.IContentAccessEvaluator,EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves the access level of the current user to the <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.ContentResouceFolderAccessControlList">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Internal class that delegates access control to the owner of the folder
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.ContentResouceFolderAccessControlList.ContentSecurityRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Dependency to resolve owner ACL
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.ContentResouceFolderAccessControlList.PermanentLinkMapper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Dependency to resolve owner ACL
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.DefaultContentAccessEvaluator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.DefaultSynchronizedUsersRepository.EPiServer#Notification#IQueryableNotificationUsers#FindAsync(System.String,System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.DefaultSynchronizedUsersRepository.EPiServer#Notification#Internal#IQueryablePreference#SortOrder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.DefaultSynchronizedUsersRepository.EPiServer#Notification#Internal#IQueryablePreference#GetPreference(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.DefaultSynchronizingUserService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.DefaultUserImpersonation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.ISynchronizedUsersRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Repository for synchronized users
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.ISynchronizedUsersRepository.DefaultSynchronizedClaims">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The default synchronized claims, which are <see cref="P:EPiServer.Security.ClaimTypeOptions.Email" />, <see cref="P:EPiServer.Security.ClaimTypeOptions.GivenName" />, <see cref="P:EPiServer.Security.ClaimTypeOptions.Surname" /> and role claims
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.Synchronize(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Synchronizes an user and claims
            </summary>
      <param name="username">The user to synchronize</param>
      <param name="roleClaimType">The roleClaimType used to identify role claims</param>
      <param name="claims">The claims to synchronize</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.SynchronizeAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Synchronizes an user and claims asynchronusly
            </summary>
      <param name="username">The user to synchronize</param>
      <param name="roleClaimType">The roleClaimType used to identify role claims</param>
      <param name="claims">The claims to synchronize</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.GetRolesForUser(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all synchronized roles for a user
            </summary>
      <param name="username">The user to get roles for</param>
      <returns>A list of roles</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.ClearRoles(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears all synchronized roles for a user
            </summary>
      <param name="username">The user to clear roles for</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.FindUsers(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Find all users that matches the specified string
            </summary>
      <param name="partOfName">A string to match user against</param>
      <returns>A list of matched users</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.FindRoles(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Find all roles that matches the specified string
            </summary>
      <param name="partOfName">A string to match roles against</param>
      <returns>A list of matched roles</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.FindUsersInRole(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds all synchronized users that is part of role
            </summary>
      <param name="roleName">The role name</param>
      <param name="partOfUsername">Part of the user name to match, if any</param>
      <returns>A list of matched users</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.ListRoleStatus">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. List statuses for all synchronized roles
            </summary>
      <returns>A list of statuses for all roles</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.HideRole(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A synched role can be hidden, meaning it will not be returned from FindRoles.
            </summary>
      <param name="role">The role to hide</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.ShowRole(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Call to show a previously hidden role in FindRoles.
            </summary>
      <param name="role">The role that should shown.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.RegisterVirtualRoleEventData">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that will be send with remote events when Virtual roles gets registred
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.RegisterVirtualRoleEventData.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructor
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.RegisterVirtualRoleEventData.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name of the virtual role
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.RegisterVirtualRoleEventData.TypeName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Full type name of the virtual role
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.SynchronizedRoleStatus">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Holds the current status of a synched role.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.SynchronizedRoleStatus.Enabled">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Indicates if the role is enabled, meaning it can be returned from <see cref="M:EPiServer.Security.Internal.ISynchronizedUsersRepository.FindRoles(System.String)" />.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.SynchronizedRoleStatus.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The name of the role.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.IRoleSecurityDescriptor">
      <summary>
            The interface for a Role Security descriptor, i e something that allows for checking access rights.
            The roles is used to determain if a principal is a member of some role
            </summary>
    </member>
    <member name="P:EPiServer.Security.IRoleSecurityDescriptor.RoleIdentities">
      <summary>
            Gets or sets identities on roles
            </summary>
      <value>The identities.</value>
    </member>
    <member name="T:EPiServer.Security.ISecurable">
      <summary>
            The ISecurable interface is implemented by any object that has access restrictions.
            </summary>
      <remarks>
            In order to decouple domain objects from the access check / security management responsibilities,
            the process of checking access rights are split into two parts: first you get the security
            descriptor from the secured object, then you check access rights on the security descriptor.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.ISecurable.GetSecurityDescriptor">
      <summary>
            Gets the security descriptor.
            </summary>
      <returns>An implementation of ISecurityDescriptor.</returns>
    </member>
    <member name="T:EPiServer.Security.ISecurityDescriptor">
      <summary>
            The interface for a Security descriptor, i e something that allows for checking access rights.
            </summary>
    </member>
    <member name="M:EPiServer.Security.ISecurityDescriptor.HasAccess(System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>
            Determines whether the specified principal has the requested access.
            </summary>
      <param name="principal">The principal to authorize.</param>
      <param name="access">The requested access level.</param>
      <returns>
        <c>true</c> if the specified principal has access; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
                    Note that the access level is a bitmask, i.e. we simply check that all specified access types
                    are granted to the principal.
                </para>
        <para>
                    If the current <see cref="T:EPiServer.Security.ISecurityDescriptor" /> is inherited, this method will check the inherited access rights.
                </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Security.ISecurityDescriptor.GetAccessLevel(System.Security.Principal.IPrincipal)">
      <summary>
            Retreives the access level for the specified principal.
            </summary>
      <param name="principal">The principal get access rights for.</param>
      <returns>The access level that the specified principal has.</returns>
      <remarks>
        <para>
                    Use this method when you want to get the union of all access types granted to this principal. This is
                    most likely only used for display purposes in the user interface. Code that checks access and performs
                    different actions depending on the type of access granted should use the HasAccess method, since it
                    does what you want and has the potential for being much faster.
                </para>
        <para>
                    If the current <see cref="T:EPiServer.Security.ISecurityDescriptor" /> is inherited, this method checks the inherited access rights.
                </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Security.ISynchronizingUserService">
      <summary>
            Synchronizes a claims identity to the database
            </summary>
    </member>
    <member name="M:EPiServer.Security.ISynchronizingUserService.SynchronizeAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Synchronizes a claims identity to the database
            </summary>
      <param name="identity">The claims identity</param>
      <param name="additionalClaimsToSync">Additional claims types to synchronize or empty list to only synchronize default claims</param>
      <exception cref="T:System.ArgumentException">If the identity is not authenticated</exception>
      <remarks>
            By default is claims such as role claims and <see cref="P:EPiServer.Security.ClaimTypeOptions.Email" /> synched. <paramref name="additionalClaimsToSync">additionalClaimsToSync</paramref> can be specified
            to synchronize additional claims. This can be used for example to sync a phone number which then can be used by notification system.
            </remarks>
    </member>
    <member name="T:EPiServer.Security.ISynchronizingUserServiceExtensions">
      <summary>
            Synchronizes a claims identity to the database
            </summary>
    </member>
    <member name="M:EPiServer.Security.ISynchronizingUserServiceExtensions.SynchronizeAsync(EPiServer.Security.ISynchronizingUserService,System.Security.Claims.ClaimsIdentity)">
      <summary>
            Synchronizes a claims identity to the database
            </summary>
      <param name="service">The service that is being extended</param>
      <param name="identity">The claims identity</param>
      <exception cref="T:System.ArgumentException">If the identity is not authenticated</exception>
    </member>
    <member name="T:EPiServer.Security.IUserImpersonation">
      <summary>
            Create a principal based on a user name and add roles from the current <see cref="T:EPiServer.Security.SecurityEntityProvider" /></summary>
    </member>
    <member name="M:EPiServer.Security.IUserImpersonation.CreatePrincipal(System.String)">
      <summary>
            Create a principal based on a user name and add roles from the current <see cref="T:EPiServer.Security.SecurityEntityProvider" /></summary>
      <remarks>This is no validation done, if the user does not exist it will be created without roles</remarks>
    </member>
    <member name="T:EPiServer.Security.PermissionRole">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Security.PermissionRole.Permission">
      <summary>
            The permission to check for
            </summary>
    </member>
    <member name="T:EPiServer.Security.PermissionService">
      <summary>
            Service to query if a principal is assigned a specific permission
            </summary>
    </member>
    <member name="M:EPiServer.Security.PermissionService.IsPermitted(System.Security.Principal.IPrincipal,EPiServer.Security.PermissionType)">
      <summary>
            Determines whether the specified principal has this permission.
            </summary>
      <param name="principal">The principal</param>
      <param name="type">The permission type</param>
      <returns>
        <c>true</c> if the specified principal is permitted; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Security.PermissionType">
      <summary>
            Describes a permission type
            </summary>
    </member>
    <member name="P:EPiServer.Security.PermissionType.Name">
      <summary>
            Name of the permission type, has to be unique within group
            </summary>
      <remarks>Must begin with a letter and only contain alphanumeric characters (a-z, A-Z, 0-9), '_', ':' and '-'"</remarks>
    </member>
    <member name="P:EPiServer.Security.PermissionType.GroupName">
      <summary>
            Name of the group of permissions
            </summary>
      <remarks>Must begin with a letter and only contain alphanumeric characters (a-z, A-Z, 0-9), '_', ':' and '-'"</remarks>
    </member>
    <member name="M:EPiServer.Security.PermissionType.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.PermissionType" /> class.
            </summary>
      <param name="groupName">The group name</param>
      <param name="name">The name</param>
    </member>
    <member name="M:EPiServer.Security.PermissionType.Equals(System.Object)">
      <summary>
            Returns true if the objects o is equal with the instance of the PermissionType.
            </summary>
      <param name="o">The o.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Security.PermissionType.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:EPiServer.Security.PrincipalAccessorExtensions.CurrentName(EPiServer.Security.IPrincipalAccessor)">
      <summary>
            Returns the name of the current <see cref="T:System.Security.Principal.IPrincipal" /></summary>
      <param name="principalAccessor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Security.RawACE">
      <summary>
            Raw data contained in AccessControlList
            </summary>
      <example>
            The code example below demonstrates the usage of AccessControlList, RawACE and AccessControlEntry.
            The example below sets up access rights on a "personal" start page. Administrators gets full access, 
            the creator gets everything except for administer and any other user/group that 
            has at least read access on the team start page gets read access rights.
            page is the page to update the access rights on.
            <code source="../Codesamples/EPiServerNET/Security/AccessControlListSamples.cs" region="SetAccess" lang="cs" /></example>
    </member>
    <member name="P:EPiServer.Security.RawACE.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>The name.</value>
      <remarks>
            This property contains logic to deal with the EPiServer 4 concept of SID (Security IDentifiers - not identical to the SIDs
            as used by Windows). Importing data from an EPiServer 4 site just gives you the SID, not the actual user / role name and
            this property will map a couple of well known SIDs into names.
            </remarks>
    </member>
    <member name="F:EPiServer.Security.RawACE.EntityType">
      <summary>
            The SecurityEntityType for this ACE.
            </summary>
      <remarks>
            This was added in CMS6R2, so any older package will have this value set to User.
            </remarks>
    </member>
    <member name="F:EPiServer.Security.RawACE.SID">
      <summary>
            A Security Identity for the ACE.
            </summary>
      <remarks>
            The concept of SIDs are obsolete as of EPiServer CMS 5, but due to compatibility with EPiServer 4 data
            this property has not yet been obsoleted. However you should avoid using it unless absolutely necessary.
            </remarks>
    </member>
    <member name="F:EPiServer.Security.RawACE.Access">
      <summary>
            The access level defined by this ACE.
            </summary>
    </member>
    <member name="T:EPiServer.Security.SecuritySaveType">
      <summary>
            Describes different ways that access control can be saved
            </summary>
    </member>
    <member name="F:EPiServer.Security.SecuritySaveType.None">
      <summary>
            No type defined
            </summary>
    </member>
    <member name="F:EPiServer.Security.SecuritySaveType.RecursiveReplace">
      <summary>
            Recursivly saves the changed rows and deletes all rows that not been modified
            </summary>
    </member>
    <member name="F:EPiServer.Security.SecuritySaveType.RecursiveModify">
      <summary>
            Recursivly modifies selected rows
            </summary>
    </member>
    <member name="F:EPiServer.Security.SecuritySaveType.Modify">
      <summary>
            Modifies selected rows
            </summary>
    </member>
    <member name="F:EPiServer.Security.SecuritySaveType.Replace">
      <summary>
            Replaces any existing permissions with the new settings
            </summary>
    </member>
    <member name="F:EPiServer.Security.SecuritySaveType.ReplaceChildPermissions">
      <summary>
            Replaces existing permissions on all children to an item (existing permissions will be deleted)
            </summary>
      <remarks>
        <para>The root item is not modified, you need to do a separate call using method Replace change a single item.</para>
        <para>This option also overwrites any items that inherits permissions.</para>
      </remarks>
    </member>
    <member name="F:EPiServer.Security.SecuritySaveType.MergeChildPermissions">
      <summary>
            Merges permissions on all children (permissions for roles and users are applied without removing existing permissions for other users and roles not being saved)
            </summary>
      <remarks>
        <para>The root item is not modified, you need to do a separate call using method Replace change a single item.</para>
        <para>This option does not overwrites any items that inherits their permissions.</para>
      </remarks>
    </member>
    <member name="T:EPiServer.Security.ServiceLocationHelperExtensions">
      <summary>  
            Makes EPiServer.Core services part of the public API.  
            </summary>
    </member>
    <member name="M:EPiServer.Security.ServiceLocationHelperExtensions.ContentSecurityRepository(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>
            Contents the security repository.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Security.SynchronizingRolesSecurityEntityProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Security.SynchronizingRolesSecurityEntityProvider.#ctor">
      <summary>
            Creates instance of <see cref="T:EPiServer.Security.SynchronizingRolesSecurityEntityProvider" /></summary>
    </member>
    <member name="M:EPiServer.Security.SynchronizingRolesSecurityEntityProvider.#ctor(EPiServer.Security.Internal.ISynchronizedUsersRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates instance of <see cref="T:EPiServer.Security.SynchronizingRolesSecurityEntityProvider" /></summary>
      <param name="synchingUsersRepository">The <see cref="T:EPiServer.Security.Internal.ISynchronizedUsersRepository" /> used.</param>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Security.SynchronizingRolesSecurityEntityProvider.#ctor(EPiServer.Security.Internal.ISynchronizedUsersRepository,EPiServer.Security.ClaimTypeOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates instance of <see cref="T:EPiServer.Security.SynchronizingRolesSecurityEntityProvider" /></summary>
      <param name="synchingUsersRepository">The <see cref="T:EPiServer.Security.Internal.ISynchronizedUsersRepository" /> used.</param>
      <param name="claimTypeOptions">The claim type options used</param>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Security.SynchronizingRolesSecurityEntityProvider.GetRolesForUser(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.SynchronizingRolesSecurityEntityProvider.FindUsersInRole(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.SynchronizingRolesSecurityEntityProvider.Search(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.SynchronizingRolesSecurityEntityProvider.Search(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Security.SystemPermissions">
      <summary>
            Defines EPiServer system-specific permissions.
            </summary>
      <remarks>
            This is used to determine access to different types of system functions, such as allow a user to access web services.
            Note that this should not be confused with the access levels used to control access to pages.
            </remarks>
    </member>
    <member name="F:EPiServer.Security.SystemPermissions.GroupNameCMS">
      <summary>
            The <see cref="P:EPiServer.Security.PermissionType.GroupName" /> for CMS specific builtin permissions.
            </summary>
    </member>
    <member name="P:EPiServer.Security.SystemPermissions.WebServiceAccess">
      <summary>
            Allow the user to act as a web service user
            </summary>
    </member>
    <member name="P:EPiServer.Security.SystemPermissions.DetailedErrorMessage">
      <summary>
            Detailed error messages for troubleshooting
            </summary>
    </member>
    <member name="P:EPiServer.Security.SystemPermissions.ContentProviderMove">
      <summary>
            Allow users to move content between providers
            </summary>
      <remarks>This is currently only validated in the user interface and not business logic</remarks>
    </member>
    <member name="T:EPiServer.Security.PageAccessControlList">
      <summary>
            Implementation of AccessControlList for pages
            </summary>
    </member>
    <member name="M:EPiServer.Security.PageAccessControlList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.PageAccessControlList" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Security.PageAccessControlList.#ctor(EPiServer.Security.RawACE[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.PageAccessControlList" /> class.
            </summary>
      <param name="acl">The acl.</param>
    </member>
    <member name="M:EPiServer.Security.PageAccessControlList.#ctor(EPiServer.Core.PageReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.PageAccessControlList" /> class.
            </summary>
      <param name="pageLink">The page link.</param>
    </member>
    <member name="M:EPiServer.Security.PageAccessControlList.#ctor(EPiServer.Core.PageReference,EPiServer.Security.AccessControlList)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.PageAccessControlList" /> class.
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="list">The list.</param>
    </member>
    <member name="P:EPiServer.Security.PageAccessControlList.PageLink">
      <summary>
            Gets or sets the content link.
            </summary>
      <value>
            The content link.
            </value>
    </member>
    <member name="T:EPiServer.Security.SynchronizingUserService">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Service that can be used to synchronize users and roles for later retrieval.
            </summary>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.GetRolesForUser(System.String)">
      <summary>
            Retrieves all synched roles for given user.
            </summary>
      <param name="userName">The name of the synched user.</param>
      <returns>A list of all synched roles for the user.</returns>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.Synchronize(System.Security.Claims.ClaimsIdentity)">
      <summary>
            Synchronizes a claims identity to the database
            </summary>
      <param name="identity">The claims identity</param>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.Synchronize(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Synchronizes a claims identity to the database
            </summary>
      <remarks>
            By default is claims such as role claims and <see cref="P:EPiServer.Security.ClaimTypeOptions.Email" /> synched. <param name="additionalClaimsToSync">additionalClaimsToSync</param> can be specified
            to synchronize additional claims. This can be used for example to sync a phone number which then can be used by notification system.
            </remarks>
      <param name="identity">The claims identity</param>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.SynchronizeAsync(System.Security.Claims.ClaimsIdentity)">
      <summary>
            Synchronizes a claims identity to the database
            </summary>
      <param name="identity">The claims identity</param>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.SynchronizeAsync(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Synchronizes a claims identity to the database
            </summary>
      <remarks>
            By default is claims such as role claims and <see cref="P:EPiServer.Security.ClaimTypeOptions.Email" /> synched. <param name="additionalClaimsToSync">additionalClaimsToSync</param> can be specified
            to synchronize additional claims. This can be used for example to sync a phone number which then can be used by notification system.
            </remarks>
      <param name="identity">The claims identity</param>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.SynchronizeUserAndRoles(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Synchronizes a user and his/her roles.
            </summary>
      <param name="userName">The username</param>
      <param name="roles">The roles for the user</param>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.ClearRoles(System.String)">
      <summary>
            Clears all previously synched roles for a user.
            </summary>
      <param name="userName">
      </param>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.FindUsers(System.String)">
      <summary>
            Finds all users that has a matching name or email. if null is passed in all users are returned.
            </summary>
      <param name="partOfName">The name or email to match, '%' is wildcard symbol.</param>
      <returns>A list of matching user names.</returns>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.FindRoles(System.String)">
      <summary>
            Finds all roles that has a matching name. if null is passed in all roles are returned.
            </summary>
      <param name="partOfName">The name to match, '%' is wildcard symbol.</param>
      <returns>&gt;A list of matching roles.</returns>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.ListRoleStatus">
      <summary>
            List all synched roles together with their current status.
            </summary>
      <returns>A list of synched role and their status.</returns>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.HideRole(System.String)">
      <summary>
            A synched role can be hidden, meaning it will not be returned from FindRoles.
            </summary>
      <param name="role">The role to hide</param>
    </member>
    <member name="M:EPiServer.Security.SynchronizingUserService.ShowRole(System.String)">
      <summary>
            Call to show a previously hidden role in FindRoles.
            </summary>
      <param name="role">The role that should shown.</param>
    </member>
    <member name="T:EPiServer.ServiceLocationHelperExtensions">
      <summary>  
            Makes EPiServer.Core services part of the public API.  
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocationHelperExtensions.ContentRepository(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="T:EPiServer.IContentRepository" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="T:EPiServer.IContentRepository" /> service.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocationHelperExtensions.ContentLoader(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="T:EPiServer.IContentLoader" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="T:EPiServer.IContentLoader" /> service.</returns>
    </member>
    <member name="T:EPiServer.SpecializedProperties.Internal.ContentAreaIndexer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of softlink parsing for ContentArea.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.ContentAreaIndexer.#ctor(EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.Internal.SoftLinkFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.Internal.ContentAreaIndexer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.ContentAreaIndexer.ResolveReferences(EPiServer.Core.ContentArea,EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns <see cref="T:EPiServer.DataAbstraction.SoftLink" /> references for all items in the ContentArea.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.SpecializedProperties.Internal.LinkItemCollectionIndexer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of softlink parsing for LinkItemCollection.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.LinkItemCollectionIndexer.#ctor(EPiServer.DataAbstraction.Internal.SoftLinkFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.Internal.LinkItemCollectionIndexer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.LinkItemCollectionIndexer.ResolveReferences(EPiServer.SpecializedProperties.LinkItemCollection,EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns <see cref="T:EPiServer.DataAbstraction.SoftLink" /> references for link items that links to other content within same application in the LinkItemCollection.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.SpecializedProperties.Internal.PropertyExternalContentReferenceIndexer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of softlink handling for <see cref="T:EPiServer.Core.ContentReference" /> links to external <see cref="T:EPiServer.Core.ContentProvider" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.PropertyExternalContentReferenceIndexer.#ctor(EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.Internal.SoftLinkFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.Internal.PropertyExternalContentReferenceIndexer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.PropertyExternalContentReferenceIndexer.ResolveReferences(EPiServer.Core.ContentReference,EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns <see cref="T:EPiServer.DataAbstraction.SoftLink" /> references if the <see cref="T:EPiServer.Core.ContentReference" /> is to an external provider.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.SpecializedProperties.Internal.UrlIndexer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of softlink indexing for Url properties
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.UrlIndexer.#ctor(EPiServer.DataAbstraction.Internal.SoftLinkFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.Internal.UrlIndexer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.UrlIndexer.ResolveReferences(EPiServer.Url,EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns <see cref="T:EPiServer.DataAbstraction.SoftLink" /> references for the Url property.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.SpecializedProperties.Internal.XhtmlStringIndexer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of softlink parsing for XhtmlString.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.XhtmlStringIndexer.#ctor(EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.Internal.SoftLinkFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.Internal.XhtmlStringIndexer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.XhtmlStringIndexer.ResolveReferences(EPiServer.Core.XhtmlString,EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns <see cref="T:EPiServer.DataAbstraction.SoftLink" /> references for all linked content items.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.XhtmlStringIndexer.HandleContentFragmentsWithLinks(System.Collections.Generic.HashSet{EPiServer.DataAbstraction.SoftLink},System.Collections.Generic.IEnumerable{EPiServer.Core.Html.StringParsing.ContentFragment},EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds softlinks from <paramref name="contentFragments" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.SpecializedProperties.Internal.XhtmlStringIndexer.HandleElementsWithLinks(System.Collections.Generic.HashSet{EPiServer.DataAbstraction.SoftLink},System.Collections.Generic.IEnumerable{EPiServer.HtmlParsing.ElementFragment},EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds softlinks from <paramref name="elements" />.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.SpecializedProperties.IPropertyBlock">
      <summary>
            Untyped signature of IPropertyBlock
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.IPropertyBlock.BlockType">
      <summary>
            Gets the type of the block
            </summary>
      <remarks>Type must inherit <see cref="T:EPiServer.Core.BlockData" /></remarks>
      <value>The type of the block.</value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.IPropertyBlock.Block">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.BlockData" /> for the instance.
            </summary>
      <value>The block.</value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.IPropertyBlock.BlockPropertyDefinitionTypeID">
      <summary>
            Gets the ID for the <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> that this property instance corresponds to.
            </summary>
      <remarks>This is mainly used for Dynamic Blocks. For <see cref="T:EPiServer.DataAbstraction.ContentType" /> properties
            the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> for the property can be used to get <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /></remarks>
      <value>The block property definition type ID.</value>
    </member>
    <member name="T:EPiServer.SpecializedProperties.IPropertyBlock`1">
      <summary>
            Defines the signature for a property that is a block property.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.IPropertyBlock`1.Block">
      <summary>
            Gets or sets the type inheriting <see cref="T:EPiServer.Core.BlockData" /> for the instance.
            </summary>
      <value>The block.</value>
    </member>
    <member name="T:EPiServer.SpecializedProperties.IPropertySoftLinkIndexer">
      <summary>
            Interface to register in IOC container for custom properties that implements <see cref="T:EPiServer.SpecializedProperties.IPropertySoftLinkIndexer`1" />.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.IPropertySoftLinkIndexer`1">
      <summary>
            Implement to register <see cref="T:EPiServer.DataAbstraction.SoftLink" /> support for properties. 
            </summary>
      <typeparam name="T">This should be the type specified by <see cref="P:EPiServer.Core.PropertyData.PropertyValueType" /></typeparam>
      <remarks>
            Registration should be done by registering implementation class with interface <see cref="T:EPiServer.SpecializedProperties.IPropertySoftLinkIndexer" /> in
            IOC container.
            </remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.IPropertySoftLinkIndexer`1.ResolveReferences(`0,EPiServer.Core.IContent)">
      <summary>
            Return all <see cref="T:EPiServer.DataAbstraction.SoftLink" /> references from the property instance.
            </summary>
      <param name="property">The property to parse <see cref="T:EPiServer.DataAbstraction.SoftLink" /> instances from</param>
      <param name="owner">The content item that owns the property.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.SpecializedProperties.LinkItem">
      <summary>
            Class that is used to represent and work with a html link.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.LinkItem" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItem.#ctor(System.Xml.XmlNode)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.LinkItem" /> class.
            </summary>
      <param name="anchorNode">An xml node that represents an anchor.</param>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItem.LinkResolver">
      <summary>
            Gets or sets the service used to resolve links.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItem.GetMappedHref">
      <summary>
            Tries to get a mapped representation (that is a link with an absolute path) of the <see cref="P:EPiServer.SpecializedProperties.LinkItem.Href" /> property; otherwise returns the <see cref="P:EPiServer.SpecializedProperties.LinkItem.Href" />.
            </summary>
      <returns>A mapped representation of the link.</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItem.ToMappedLink">
      <summary>
            Creates an external representation of the link.
            </summary>
      <returns>An external representation of the link.</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItem.ToPermanentLink">
      <summary>
            Creates an internal representation of the link.
            </summary>
      <returns>An internal representation of the link.</returns>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItem.Attributes">
      <summary>
            Gets the link attributes.
            </summary>
      <value>The link attributes.</value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItem.Text">
      <summary>
            Gets or sets the text part of the link.
            </summary>
      <value>The text part of the link.</value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItem.Href">
      <summary>
            Gets or sets the href part of the link.
            </summary>
      <value>The href part of the link.</value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItem.Target">
      <summary>
            Gets or sets the target part of the link.
            </summary>
      <value>The target part of the link.</value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItem.Title">
      <summary>
            Gets or sets the title part of the link.
            </summary>
      <value>The title part of the link.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItem.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItem.ReferencedPermanentLinkIds">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItem.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItem.Equals(EPiServer.SpecializedProperties.LinkItem)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.SpecializedProperties.LinkItemCollection">
      <summary>
            Property that is used to store multiple html links.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.LinkItemCollection" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.#ctor(System.Collections.Generic.IEnumerable{EPiServer.SpecializedProperties.LinkItem})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.LinkItemCollection" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItemCollection.IsModified">
      <summary>
            Gets or sets a value indicating whether this instance is modified.
            </summary>
      <value>
        <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItemCollection.Count">
      <summary>
            Gets the link count.
            </summary>
      <value>The link count.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.Add(EPiServer.SpecializedProperties.LinkItem)">
      <summary>
            Adds the specified link.
            </summary>
      <param name="link">The link.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.Add(System.Int32,EPiServer.SpecializedProperties.LinkItem)">
      <summary>
            Adds a link at the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="link">The link.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.AddRange(EPiServer.SpecializedProperties.LinkItemCollection)">
      <summary>
            Adds a collection of links.
            </summary>
      <param name="linkCollection">The link collection to add.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.Clear">
      <summary>
            Clears this instance.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.Remove(EPiServer.SpecializedProperties.LinkItem)">
      <summary>
            Removes the specified link.
            </summary>
      <param name="link">The link.</param>
      <returns>true if success; otherwise false</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the link at the specified index.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.ThrowIfReadOnly">
      <summary>
            Throws an exception if called upon if this instance is set to read only.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.ToString">
      <summary>
            Returns an unordered list containing the links.
            </summary>
      <returns>
            An unordered list containing the links.
            </returns>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItemCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:EPiServer.SpecializedProperties.LinkItem" /> at the specified index.
            </summary>
      <value>The <see cref="T:EPiServer.SpecializedProperties.LinkItem" /> at the specified index.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            It will do so by matching the order and the content of all LinkItems in the LinkItemCollection.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.Equals(EPiServer.SpecializedProperties.LinkItemCollection)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItemCollection.ReferencedPermanentLinkIds">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.CreateWritableClone">
      <summary>
            Create a copy of the current object instance that is writable.
            </summary>
      <returns>A new copy of the object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.MakeReadOnly">
      <summary>
            Changes the object instance into a read-only object.
            </summary>
      <remarks>
            After calling this method, any attempt to change the object instance or any contained object
            will generate a <see cref="T:System.NotSupportedException" />. I e the semantics is "deep read-only".
            <para>
            Note! After setting an object to read-only it is not possible to revert back to read-write mode.
            You will have to call the CreateWritableClone method to get a copy that can be modified.
            </para></remarks>
    </member>
    <member name="P:EPiServer.SpecializedProperties.LinkItemCollection.IsReadOnly">
      <summary>
            Indicates if the current object instance is read-only.
            </summary>
      <value>True if the property is read only; otherwise false.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates writable clone of this object.
            </summary>
      <returns>Writable clone object.</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.IndexOf(EPiServer.SpecializedProperties.LinkItem)">
      <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the range of elements in the list
            that starts at the specified index and contains the specified number of elements.
            </summary>
      <param name="item">The item.</param>
      <returns>
            The zero-based index of the first occurrence of item within the range of
            elements in the list that extends from index
            to the last element, if found; otherwise, â€“1.
            </returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.Insert(System.Int32,EPiServer.SpecializedProperties.LinkItem)">
      <summary>
            Inserts an element into the Slist at the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="item">The item.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.Contains(EPiServer.SpecializedProperties.LinkItem)">
      <summary>
            /// Determines whether an element is in the list.
            </summary>
      <param name="item">The item</param>
      <returns>true if item is found in the list; otherwise, false.</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemCollection.CopyTo(EPiServer.SpecializedProperties.LinkItem[],System.Int32)">
      <summary>
            Copies the entire list to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
      <param name="array">
            The one-dimensional System.Array that is the destination of the elements 
            copied from list. The System.Array must have
            zero-based indexing.
            </param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyAppSettings">
      <summary>
             A property that creates a drop down list with options that are defined in the appSettings section
             in web.config. The name of the property should match the key for the app setting.
             </summary>
      <example>
             The settings should be defined like this in web.config:
             <appSettings><add key="MyProperty" value="label1;value1|label2;value2" /><add key="AnotherProperty" value="label10;value10|label20;value20" /></appSettings></example>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyAppSettingsMultiple">
      <summary>
             A property that creates check boxes with options that are defined in the appSettings section
             in web.config. The name of the property should match the key for the app setting.
             </summary>
      <example>
             The settings should be defined like this in web.config:
             <appSettings><add key="MyProperty" value="label1;value1|label2;value2" /><add key="AnotherProperty" value="label10;value10|label20;value20" /></appSettings></example>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyBlob">
      <summary>
            Property that is used to store a binary large object.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlob.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyBlob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlob.#ctor(EPiServer.Framework.Blobs.IBlobFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyBlob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlob.IsEmptyValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlob.BinaryData">
      <summary>
            Gets or sets the binary data.
            </summary>
      <value>
            The binary data.
            </value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlob.Value">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlob.Clear">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlob.PropertyValueType">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlob.SaveData(EPiServer.Core.PropertyDataCollection)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyBlock">
      <summary>
            A base class for Properties that wraps a <see cref="T:EPiServer.Core.BlockData" /> object.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyBlock`1">
      <summary>
            A Property that wraps a <see cref="T:EPiServer.Core.BlockData" /> object.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlock`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyBlock`1" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlock`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyBlock`1" /> class.
            </summary>
      <param name="blockData">The block data.</param>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.Block">
      <summary>
            Gets or sets the block data that is the value of the property.
            </summary>
      <remarks>It returns an empty <see cref="T:EPiServer.Core.BlockData" /> if the property has no value defined.</remarks>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.IsModified">
      <summary>
            Check if property has been modified.
            </summary>
      <value>
        <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.Value">
      <summary>
            Gets or sets the value of the property.
            </summary>
      <remarks>Value returns <c>null</c> if the property has no value defined.</remarks>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.IsNull">
      <summary>
            Check for null property (no value has been set).
            </summary>
      <value>
        <c>true</c> if the <see cref="P:EPiServer.SpecializedProperties.PropertyBlock`1.Block" /> has zero properties; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.Type">
      <summary>
            Property type as defined by enum <see cref="T:EPiServer.Core.PropertyDataType" />.
            </summary>
      <value>
            Returns <see cref="F:EPiServer.Core.PropertyDataType.Block" />.
            </value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the property value.
            </summary>
      <value>
            The <see cref="T:System.Type" /> of <see cref="T:EPiServer.Core.BlockData" />.
            </value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlock`1.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
      <remarks>The default value is an empty instance of T which is of <see cref="T:EPiServer.Core.BlockData" />.</remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlock`1.ParseToSelf(System.String)">
      <summary>
            Not supported yet
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.IsLanguageSpecific">
      <summary>
            Test if this property is specific to a language in multilanguage configuration.
            </summary>
      <remarks>
            A property block is considered language specific if any of its child properties are language specific.
            </remarks>
      <value>
        <c>true</c> if this instance is language specific; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.Property">
      <summary>
            Gets a collection of all content properties in the <see cref="T:EPiServer.Core.IContentData" />.
            </summary>
      <value>
      </value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlock`1.ResetModified">
      <summary>
            Resets the modified flag on all the properties in the <see cref="P:EPiServer.SpecializedProperties.PropertyBlock`1.Property" /> collection.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.BlockType">
      <summary>
            Gets the type of the block
            </summary>
      <value>The type of the block.</value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.BlockPropertyDefinitionTypeID">
      <summary>
            Gets the ID for the <see cref="T:EPiServer.DataAbstraction.BlockPropertyDefinitionType" /> that this property instance corresponds to.
            </summary>
      <value>The block property definition type ID.</value>
      <remarks>This is mainly used for Dynamic Blocks. For <see cref="T:EPiServer.DataAbstraction.ContentType" /> properties
            the <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> for the property can be used to get <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" /></remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlock`1.CreateWritableClone">
      <summary>
            Creates a writable clone of the property.
            </summary>
      <returns>A writable copy of the property.</returns>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyBlock`1.EPiServer#SpecializedProperties#IPropertyBlock#Block">
      <summary>
            Gets or sets the block.
            </summary>
      <value>The block.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlock`1.GetRoles">
      <summary>
            Gets all used personalized content roles by asking what roles are used on the properties of this block.
            </summary>
      <returns>A list of all used personalized content roles.</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyBlock`1.MakeReadOnly">
      <summary>
            Sets internal <see cref="T:EPiServer.Core.BlockData" /> to read-only as well as calling the base class
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyCheckBoxList">
      <summary>
            Let's the user save multiple values.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyColor">
      <summary>
            Property that specifies a color.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyContentArea">
      <summary>
            Defines a property representing a <see cref="P:EPiServer.SpecializedProperties.PropertyContentArea.ContentArea" />.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyContentArea" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyContentArea" /> class with the give value.
            </summary>
      <param name="value">The value to assign to the new instance.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.#ctor(System.String,EPiServer.Security.IPrincipalAccessor)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyContentArea" /> class with the give value.
            </summary>
      <param name="value">The value to assign to the new instance.</param>
      <param name="principalAccessor">The principal accessor to use</param>
      <remarks>This is mainly exposed for unit test usage</remarks>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyContentArea.PrincipalAcccessor">
      <summary>
            Gets or set the principal accessor.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyContentArea.ContentArea">
      <summary>
            Gets or sets the content area for this property.
            </summary>
      <value>
            The block area.
            </value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyContentArea.PropertyValueType">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyContentArea.Value">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.ParseToSelf(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.Parse(System.String)">
      <summary>
            Create a new <see cref="T:EPiServer.Core.PropertyLongString" /> with the value passed to the method.
            </summary>
      <param name="value">The value for the new <see cref="T:EPiServer.Core.PropertyLongString" />.</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.PropertyLongString" /> with the value passed to the method.</returns>
      <remarks>As <see cref="T:EPiServer.Core.PropertyLongString" /> stores its value as a string no parsing is necessary.</remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.ParseToObject(System.String)">
      <summary>
            Create a new <see cref="T:EPiServer.Core.PropertyLongString" /> with the value passed to the method.
            </summary>
      <param name="value">The value for the new <see cref="T:EPiServer.Core.PropertyLongString" />.</param>
      <returns>
            A new instance of <see cref="T:EPiServer.Core.PropertyLongString" /> with the value passed to the method.
            </returns>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyContentArea.IsNull">
      <summary>
            Check for null property (no value has been set).
            </summary>
      <value>
        <c>true</c> if this property is null; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.CreateWritableClone">
      <summary>
            Creates a writable clone of the property.
            </summary>
      <returns>A writable copy of the property.</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.Copy">
      <summary>
            Creates a copy of this object.
            </summary>
      <returns>
            A new <see cref="T:EPiServer.Core.PropertyData" /> object.
            </returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.SaveData(EPiServer.Core.PropertyDataCollection)">
      <summary>
            Get the data representation suitable for storing to the database. "Serialize".
            </summary>
      <param name="properties">The properties for the current page.</param>
      <returns>A string representation of the xhtml where the permanent links have not been resolved.</returns>
      <remarks>Returns with unresolved links</remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.LoadData(System.Object)">
      <summary>
            Sets the internal representation from what is stored in the database. "Deserialize".
            </summary>
      <param name="value">The internal value.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.ToWebString">
      <summary>
            The Xhtml string representation for view mode. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyContentArea.LongString">
      <summary>
            Gets or sets the string reprensentation with normal links. This is how actual content is accessed.
            The setter will parse the content, and insert permanent links where appropriate.
            The getter will, if necessary, reparse the content to split it into the mixed list representation to speed
            up dynamic rendering of links.
            </summary>
      <value>The long string.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.SetDefaultValue">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.ToRawString">
      <summary>
                Gets the string representation of the "raw" data as it is represented externally in the database
                and in export packages.
            </summary>
      <returns>An external string representation of property value.</returns>
      <remarks>
                Override this method in derived classes that presents a different view of the data than what is
                actually stored internally. Access level is 'internal' to avoid public exposure of the internal data format
            </remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.MakeReadOnly">
      <summary>
            Sets internal <see cref="P:EPiServer.SpecializedProperties.PropertyContentArea.ContentArea" /> to read-only as well as calling the base class
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyContentArea.ReferencedPermanentLinkIds">
      <summary>
            Gets an list of permanent link ids that are referenced from this property.
            </summary>
      <value>
            An list of permanent link ids that are referenced from this property.
            </value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentArea.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>
            Remaps permanent links according to the provided link mapping.
            </summary>
      <param name="idMap">The link mapping.</param>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyContentReferenceList">
      <summary>
            Property for storing multiple <see cref="T:EPiServer.Core.ContentReference" /> instances.
            Supports content properties of type <see cref="T:System.Collections.Generic.IList`1" />, 
            <see cref="T:System.Collections.Generic.ICollection`1" /> or <see cref="T:System.Collections.Generic.IEnumerable`1" /></summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentReferenceList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyContentReferenceList" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentReferenceList.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyContentReferenceList" /> class with the provided list.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentReferenceList.ParseToObject(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyContentReferenceList.ParseItem(System.String)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyDateList">
      <summary>
            A content type property for a list of dates.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyDocumentUrl">
      <summary>
            Property that specifies a url to a document or file.
            </summary>
      <remarks>The link editor type for documents is 129.</remarks>
      <summary>
            Property that specifies a url to a document or file.
            </summary>
      <remarks>The link editor type for documents is 129.</remarks>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyDocumentUrl.LinkEditorType">
      <summary>
            Gets the specific link type for a document.
            </summary>
      <value>The specific link type for a document.</value>
      <remarks>The link editor type for documents is 129.</remarks>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyDoubleList">
      <summary>
            A content type property for a list of double-precision floating-point numbers.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyDropDownList">
      <summary>
            Property that creates a select list with values that are created dynamically with property settings.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyFileSortOrder">
      <summary>
            Property that specifies a file sort order.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyFileSortOrder.SortOrder">
      <summary>
            Gets or sets the sort order.
            </summary>
      <value>The sort order.</value>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyFileUrl">
      <summary>
            Abstract base class for properties that reference files.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyFrame">
      <summary>
            Displays a dropdrowlist in editmode displaying the frames defined for the web site.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyFrame.FrameName">
      <summary>
            Gets or sets the name of the frame.
            </summary>
      <value>The name of the frame.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyFrame.ToWebString">
      <summary>
            Get the web string representation of the property's value, on properties that do not
            use the editor this string will not contain any markup characters.
            </summary>
      <returns>
            A string where all html tags except those defined in 'EPiServer.Configuration.Settings.UISafeHtmlTags' have been encoded and therefore will appear in the text instead of tags.
            </returns>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyImageUrl">
      <summary>
            Property that specifies an url to an image.
            </summary>
      <summary>
            Property that specifies an url to an image.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyImageUrl.LinkEditorType">
      <summary>
            Gets the specific link type for an image.
            </summary>
      <value>The specific link type for an image.</value>
      <remarks>The link editor type for images is 128.</remarks>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyIntegerList">
      <summary>
            A content type property for a list of integers.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyLanguage">
      <summary>
            Property that specifies a language.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyLinkCollection">
      <summary>
            Property representing an ordered list of links.
            </summary>
      <summary>
            Property representing an ordered list of links.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyLinkCollection" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.#ctor(EPiServer.SpecializedProperties.LinkItemCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyLinkCollection" /> class using the passed <see cref="T:EPiServer.SpecializedProperties.LinkItemCollection" />
            as value.
            </summary>
      <param name="linkItemCollection">
            A <see cref="T:EPiServer.SpecializedProperties.LinkItemCollection" /> which will be the value of the new <see cref="T:EPiServer.SpecializedProperties.PropertyLinkCollection" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="linkItemCollection" /> is null.</exception>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.LinkResolver">
      <summary>
            Gets or sets the URL resolver.
            </summary>
      <value>
            The URL resolver.
            </value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.PrincipalAcccessor">
      <summary>
            Gets or set the principal accessor.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.Links">
      <summary>
            Gets or sets the <see cref="T:EPiServer.SpecializedProperties.LinkItemCollection" /> which represents the value of this property.
            </summary>
      <value>The <see cref="T:EPiServer.SpecializedProperties.LinkItemCollection" /> to be assigned as value.</value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.IsModified">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.IsNull">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.Type">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.PropertyValueType">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.Value">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.LongString">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.Copy">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.LoadData(System.Object)">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.ReferencedPermanentLinkIds">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.ParseToObject(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.ParseToSelf(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.Parse(System.String)">
      <summary>
            Parses the specified string and creates a new <see cref="T:EPiServer.SpecializedProperties.PropertyLinkCollection" />.
            </summary>
      <param name="stringToParse">The string to parse.</param>
      <returns>
            A new <see cref="T:EPiServer.SpecializedProperties.PropertyLinkCollection" />.
            </returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.SaveData(EPiServer.Core.PropertyDataCollection)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.SetDefaultValue">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.ToWebString">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.MakeReadOnly">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkCollection.LinkMapper">
      <summary>
            Gets or sets the fragment parser that should be used by the current instance.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection of <see cref="T:EPiServer.SpecializedProperties.LinkItem" />s.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyLinkCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyLinkType">
      <summary>
            Displays a drop down list where the user can select a link type as defined in <see cref="T:EPiServer.Core.LinkType" />.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyLinkType.Link">
      <summary>
            Gets or sets the link type.
            </summary>
      <value>The link type.</value>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertySelector">
      <summary>
            A property that enables selection of properties on the current page.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertySortOrder">
      <summary>
            Property that defines a sort order that can be used to sort pages.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertySortOrder.SortOrder">
      <summary>
            Gets or sets the sort order.
            </summary>
      <value>The sort order.</value>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyStringList">
      <summary>
            A content type property for a list of strings.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyTimeSpan">
      <summary>
            Property representing a timespan in minutes.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyUrl">
      <summary>
            Property that specifies a url.
            </summary>
      <summary>
            Property that specifies a url.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyUrl.LinkResolver">
      <summary>
            Gets or sets the URL resolver.
            </summary>
      <value>
            The URL resolver.
            </value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyUrl.String">
      <summary>
            Gets or sets the string value.
            </summary>
      <value>The string value.</value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyUrl.Value">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyUrl.Url">
      <summary>
            Gets or sets the URL.
            </summary>
      <value>The URL.</value>
      <remarks>To change the URL, create a new <see cref="P:EPiServer.SpecializedProperties.PropertyUrl.Url" /> instance and set the property.</remarks>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyUrl.PropertyValueType">
      <summary>
            Gets the type of the property value, in this case <see cref="P:EPiServer.SpecializedProperties.PropertyUrl.Url" />.
            </summary>
      <value>The type of the property value.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyUrl.ValidateUri(System.Uri)">
      <summary>
            Validates the URI before saving.
            </summary>
      <param name="uri">The URI.</param>
      <remarks>In order to abort the saving, this method should throw an <see cref="T:System.Exception" />.</remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyUrl.LoadData(System.Object)">
      <summary>
            Sets the internal representation from what is stored in the database. "Deserialize"
            </summary>
      <param name="value">The value.</param>
      <remarks>Set the value to the unresolved link value.</remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyUrl.SaveData(EPiServer.Core.PropertyDataCollection)">
      <summary>
            Get the data representation suitable for storing to the database.
            </summary>
      <param name="properties">The properties for the current page.</param>
      <returns>A string representation of the value that should be saved.</returns>
      <remarks>Returns the unresolved link.</remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyUrl.ToRawString">
      <summary>
            Gets the string representation of the "raw" data as it is represented externally in the database
            and in export packages.
            </summary>
      <returns>
            external string representation of property value
            </returns>
      <remarks>
            Override this method in derived classes that presents a different view of the data than what is
            actually stored internally.
            Access level is 'internal' to avoid public exposure of the internal data format
            </remarks>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyUrl.ReferencedPermanentLinkIds">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this property.
            </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this property.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyUrl.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>
            Remaps permanent links according to the provided link mapping.
            </summary>
      <param name="idMap">The link mapping.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyUrl.MakeReadOnly">
      <summary>
            Override to avoid the base class referring to our Value property to avoid dead-lock
            when this happens indirectly via DataFactory.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyUrl.LinkEditorType">
      <summary>
            Gets the specific link type for a URL.
            </summary>
      <value>The specific link type for a URL.</value>
      <remarks>The link editor type for a URL is 130.</remarks>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyVersionStatus">
      <summary>
            Property implementation for exposing VersionStatus enum.
            </summary>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyVirtualLink">
      <summary>
            Property that specifies a virtual link, e.g. "Simple address to page".
            </summary>
      <remarks>
            The String or Value properties sets and gets the external display string of the link.
            Leading ~/, / or ~ will be removed.
            LoadData() and SaveData() will get and set the internal representation.
            </remarks>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyVirtualLink.String">
      <summary>
            Gets or sets the string.
            </summary>
      <value>A string representation of the virtual link.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyVirtualLink.LoadData(System.Object)">
      <summary>
            Sets the internal representation from what is stored in the database. "Deserialize".
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyVirtualLink.SaveData(EPiServer.Core.PropertyDataCollection)">
      <summary>
            Return any internal data that will be stored to the database. "Serialize".
            </summary>
      <param name="properties">Current property collection</param>
      <returns>The internal string representation of the property.</returns>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyWeekDay">
      <summary>
            Property that is used to specify one or several weekdays.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyWeekDay.Value">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyWeekDay.PropertyValueType">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyXhtmlString">
      <summary>
            A property representing a static or dynamic xhtml string value. This property has support to handle dynamic fragments like dynamic content, personalized content and permanent links.
            </summary>
      <summary>
            A property representing a static or dynamic xhtml string value. This property has support to handle dynamic fragments like dynamic content, personalized content and permanent links.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyXhtmlString" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyXhtmlString" /> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.#ctor(System.String,EPiServer.Security.IPrincipalAccessor)">
      <summary>
            Exposed for unit tests
            </summary>
      <param name="value">
      </param>
      <param name="principalAccessor">
      </param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.Parse(System.String)">
      <summary>
            Returns a new <see cref="T:EPiServer.SpecializedProperties.PropertyXhtmlString" /> based on the string value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.ParseToObject(System.String)">
      <summary>
            Returns a new <see cref="T:EPiServer.SpecializedProperties.PropertyXhtmlString" /> based on the string value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.ParseToSelf(System.String)">
      <summary>
            Sets the LongString to the value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyXhtmlString.ReferencedPermanentLinkIds">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this property.
            </summary>
      <value>
            An <see cref="T:System.Collections.Generic.IList`1" /> of permanent link ids that are referenced from this property.
            </value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.RemapPermanentLinkReferences(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>
            Remaps permanent links according to the provided link mapping.
            </summary>
      <param name="idMap">The link mapping.</param>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyXhtmlString.LongString">
      <summary>
            Gets or sets the string representation with normal links. This is how actual content is accessed.
            The setter will parse the content, and insert permanent links where appropriate.
            The getter will, if necessary, reparse the content to split it into the mixed list representation to speed
            up dynamic rendering of links.
            </summary>
      <value>The long string.</value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyXhtmlString.XhtmlString">
      <summary>
            Gets or sets the XHTML string.
            </summary>
      <value>
            The XHTML string.
            </value>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyXhtmlString.Value">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyXhtmlString.IsNull">
      <summary>
            Check for null property (no value has been set).
            </summary>
      <value>
        <c>true</c> if this property is null; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.CreateWritableClone">
      <summary>
            Creates a writable clone of the property.
            </summary>
      <returns>A writable copy of the property.</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.Copy">
      <summary>
            Creates a copy of this object.
            </summary>
      <returns>
            A new <see cref="T:EPiServer.Core.PropertyData" /> object.
            </returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.SetDefaultValue">
      <summary>
            Sets the default value for this property.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.SaveData(EPiServer.Core.PropertyDataCollection)">
      <summary>
            Get the data representation suitable for storing to the database. "Serialize".
            </summary>
      <param name="properties">The properties for the current page.</param>
      <returns>A string representation of the xhtml where the permanent links have not been resolved.</returns>
      <remarks>Returns with unresolved links</remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.LoadData(System.Object)">
      <summary>
            Sets the internal representation from what is stored in the database. "Deserialize".
            </summary>
      <param name="value">The internal value.</param>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.ToRawString">
      <summary>
            Gets the string representation of the "raw" data as it is represented externally in the database
            and in export packages.
            </summary>
      <returns>
            external string representation of property value
            </returns>
      <remarks>
            Override this method in derived classes that presents a different view of the data than what is
            actually stored internally.
            Access level is 'internal' to avoid public exposure of the internal data format
            </remarks>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.ToWebString">
      <summary>
            The Xhtml string representation for view mode. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyXhtmlString.PropertyValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> for this property.
            </summary>
      <value>The <see cref="T:System.Type" /> of the property value.</value>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.MakeReadOnly">
      <summary>
            Override to avoid the base class referring to our Value property to avoid dead-lock
            when this happens indirectly via DataFactory.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.GetRoles">
      <summary>
            Gets all used personalized content roles from it's fragments
            </summary>
      <returns>The names of all virtual roles that have personalized content in the property content.</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlString.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
      <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyXhtmlString.FragmentParser">
      <summary>
            Gets or sets the current fragment parser used to parse the string to fragments.
            </summary>
    </member>
    <member name="P:EPiServer.SpecializedProperties.PropertyXhtmlString.Fragments">
      <summary>
            Exposes the different fragments in the underlying xhtml string.
            Can be used by rendering control to put fragments in rendered pages
            control collection
            </summary>
      <value>The string fragments.</value>
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyPassword">
      <summary>
            Property representing a string value less than 255 characters.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyPassword.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyPassword" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyPassword.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SpecializedProperties.PropertyPassword" /> class.
            </summary>
      <param name="password">The password.</param>
    </member>
    <member name="T:EPiServer.Url">
      <summary>
            Extend and wrap the System.Uri class, forming an Url class, where the assumption is that
            all relative Uri's are actually relative http: scheme Url's. Use like System.Uri, but you
            do not need to separate between relative and absolute.
            </summary>
    </member>
    <member name="M:EPiServer.Url.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Url" /> class.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="M:EPiServer.Url.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Url" /> class. Used for XMLSerialization process.
            </summary>
    </member>
    <member name="M:EPiServer.Url.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Url" /> class.
            </summary>
      <param name="uri">The URI.</param>
    </member>
    <member name="M:EPiServer.Url.#ctor(EPiServer.Url)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Url" /> class.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="M:EPiServer.Url.op_Implicit(System.String)~EPiServer.Url">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:EPiServer.Url" />.
            </summary>
      <param name="url">The URL need to be converted.</param>
      <returns>An instance of Url which store the url parameter.</returns>
    </member>
    <member name="M:EPiServer.Url.Init(System.Uri)">
      <summary>
            Initializes the backing Uri
            </summary>
      <param name="uri">The URI.</param>
    </member>
    <member name="M:EPiServer.Url.EnsureUri">
      <summary>
            Ensures that the backing Uri is initialized
            </summary>
    </member>
    <member name="P:EPiServer.Url.OriginalString">
      <summary>
            Gets or sets the original string.
            </summary>
      <value>The original string.</value>
    </member>
    <member name="P:EPiServer.Url.Path">
      <summary>
            Gets the path. Will return a relative path if the path was relative to start with.
            </summary>
      <value>The path.</value>
    </member>
    <member name="P:EPiServer.Url.Authority">
      <summary>
            Gets the Domain Name System (DNS) host name or IP address and the port number for a server.
            </summary>
      <value>A string containing the authority component of the URI represented by this instance.</value>
    </member>
    <member name="P:EPiServer.Url.DnsSafeHost">
      <summary>
            Gets an unescaped host name that is safe to use for DNS resolution. 
            </summary>
      <value>
            A String that contains the unescaped host part of the URI that is suitable for DNS resolution;
            or the original unescaped host string, if it is already suitable for resolution.
            </value>
    </member>
    <member name="P:EPiServer.Url.Fragment">
      <summary>
            Gets the escaped fragment. 
            </summary>
      <value>A string containing any URI fragment information.</value>
    </member>
    <member name="M:EPiServer.Url.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>
            Gets the specified components from the url (appended in returned string)
            </summary>
      <param name="components">The components to get</param>
      <param name="format">The format of the Uri</param>
      <returns>The components appended</returns>
    </member>
    <member name="P:EPiServer.Url.Host">
      <summary>
            Gets the host component of this instance.
            </summary>
      <value>A String containing the host name. This is usually the DNS host name or IP address of the server.</value>
    </member>
    <member name="P:EPiServer.Url.IsAbsoluteUri">
      <summary>
            Gets a value indicating whether this instance is absolute.
            </summary>
      <value>
        <c>true</c> if this instance is absolute; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Url.LocalPath">
      <summary>
            Gets a local operating-system representation of a file name.
            </summary>
      <value>A string containing the local operating-system representation of a file name. </value>
    </member>
    <member name="P:EPiServer.Url.PathAndQuery">
      <summary>
            Gets the AbsolutePath and Query properties separated by a question mark (?).
            </summary>
      <value>A String that contains the AbsolutePath and Query properties separated by a question mark (?). </value>
    </member>
    <member name="P:EPiServer.Url.Port">
      <summary>
            Gets the port number of this URL.
            </summary>
      <value>An int value containing the port number for this URL. </value>
      <remarks>
            If the URL is relative, the port is reported as -1, meaning "Not applicable". The port for a relative URL
            will be the same as the port of the URL that this URL is relative to. 
            </remarks>
    </member>
    <member name="P:EPiServer.Url.Query">
      <summary>
            Gets any query information included in the specified URL.
            </summary>
      <value>A String containing any query information included in the specified URL.</value>
      <remarks>
            The Query property contains any query information included in the URI.
            Query information is separated from the path information by a question mark (?) and continues to the end of the URI.
            The query information returned includes the leading question mark.
            The query information is escaped according to RFC 2396.
            </remarks>
    </member>
    <member name="P:EPiServer.Url.QueryCollection">
      <summary>
            Gets a parsed and decoded collection of query string parameters.
            </summary>
      <value>The query collection.</value>
    </member>
    <member name="P:EPiServer.Url.Scheme">
      <summary>
            Gets the scheme name for this URL.
            </summary>
      <value>A String containing the scheme for this URL, converted to lowercase.</value>
    </member>
    <member name="P:EPiServer.Url.Segments">
      <summary>
            Gets an array containing the path segments that make up the specified URL.
            </summary>
      <value>A String array containing the path segments that make up the specified URL.</value>
    </member>
    <member name="P:EPiServer.Url.UserEscaped">
      <summary>
            Indicates that the URI string was completely escaped before the Url instance was created.
            </summary>
      <value>
        <c>true</c> if the dontEscape parameter was set to true when the Uri instance was created; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Url.UserInfo">
      <summary>
            Gets the user name, password, or other user-specific information associated with the specified URL.
            </summary>
      <value>A String containing the user information associated with the URL.
            The returned value does not include the '@' character reserved for delimiting the user information part of the URL.</value>
    </member>
    <member name="M:EPiServer.Url.ToString">
      <summary>
            Returns a canonical string representation for the specified Url instance.
            </summary>
      <returns>
            A String instance that contains the unescaped canonical representation of the Uri instance.
            All characters are unescaped except #, ?, and %.
            </returns>
    </member>
    <member name="M:EPiServer.Url.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
      <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
      <remarks>
            Will compare the Uri property to determine equality.
            </remarks>
    </member>
    <member name="M:EPiServer.Url.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:EPiServer.Url.Uri">
      <summary>
            Gets the backing System.Uri.
            </summary>
      <value>The Uri instance</value>
    </member>
    <member name="P:EPiServer.Url.UriInternal">
      <summary>
            Gets the internal System.Uri, which is always absolute possibly by prefixing the original
            relative Url with http://localhost .
            </summary>
      <value>The internal System.Uri, always absolute. Check IsRelative before use.</value>
    </member>
    <member name="P:EPiServer.Url.IsRelative">
      <summary>
            Gets or sets a value indicating whether this Url instance represents a relative Url.
            </summary>
      <value>
        <c>true</c> if this instance is relative; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Url.Encoding">
      <summary>
            Gets the encoding used for unescaping and escaping.
            </summary>
      <value>The encoding. The default is UTF-8.</value>
    </member>
    <member name="P:EPiServer.Url.Split">
      <summary>
            Gets the different components of the Url
            </summary>
      <value>The split.</value>
    </member>
    <member name="M:EPiServer.Url.IsEmpty">
      <summary>
            Determines whether this instance is empty or not.
            </summary>
      <returns>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Url.DecodeOptions">
      <summary>
            Define which decoding semantics that the decode method should use
            </summary>
    </member>
    <member name="F:EPiServer.Url.DecodeOptions.Percent">
      <summary>
            Handle %xx decoding. Note that it depends on the current Encoding
            </summary>
    </member>
    <member name="F:EPiServer.Url.DecodeOptions.PlusToSpace">
      <summary>
            Will replace all ocurrences of unencoded '+' with a space.
            </summary>
    </member>
    <member name="F:EPiServer.Url.DecodeOptions.UnicodePercent">
      <summary>
            Handle %uxxxx decoding. Note that this is Encoding neutral since the character is expressed Ã­n UTF-16.
            </summary>
    </member>
    <member name="M:EPiServer.Url.Decode(System.String)">
      <summary>
            Decodes the specified string assuming UTF8.
            </summary>
      <param name="s">The URL encoded string.</param>
      <returns>The decoded string</returns>
      <remarks>Will decode %xx, %uxxxx and convert + to space.</remarks>
    </member>
    <member name="M:EPiServer.Url.Decode(System.String,System.Text.Encoding)">
      <summary>
            Decodes the specified string with the given encoding.
            </summary>
      <param name="s">The URL encoded string.</param>
      <param name="e">The encoding.</param>
      <returns>The decoded string.</returns>
      <remarks>Will decode %xx, %uxxxx and convert + to space.</remarks>
    </member>
    <member name="M:EPiServer.Url.Decode(System.String,System.Text.Encoding,EPiServer.Url.DecodeOptions)">
      <summary>
            Decodes the specified string with the given encoding.
            </summary>
      <param name="s">The URL encoded string.</param>
      <param name="e">The encoding.</param>
      <param name="options">The decode options to use.</param>
      <returns>The decoded string.</returns>
      <remarks>
            The <see cref="T:EPiServer.Url.DecodeOptions" /> allows you to determine which types of encodings to decode.
            </remarks>
    </member>
    <member name="T:EPiServer.Url.UrlDecoder">
      <summary>
            Helper class for handling various decoding scenarios
            </summary>
    </member>
    <member name="T:EPiServer.Url.EncodeAs">
      <summary>
            Enumeration to determine how a specific character should be URL encoded.
            </summary>
    </member>
    <member name="F:EPiServer.Url.EncodeAs.None">
      <summary>
            The character is left as-is.
            </summary>
    </member>
    <member name="F:EPiServer.Url.EncodeAs.Percent">
      <summary>
            The character is encoded with %hexcharacters
            </summary>
    </member>
    <member name="F:EPiServer.Url.EncodeAs.Plus">
      <summary>
            The character is encoded with a plus sign (should only apply to space).
            </summary>
    </member>
    <member name="T:EPiServer.Url.EncodeByte">
      <summary>
            The delegate signature of a method that is used to determine of a character should be encoded (not safe).
            </summary>
      <param name="b">The byte to encode.</param>
      <returns>A value specifying how the byte should be encoded.</returns>
    </member>
    <member name="M:EPiServer.Url.Encode(System.String)">
      <summary>
            Encodes the specified string.
            </summary>
      <param name="str">The string to encode.</param>
      <returns>An encoded string.</returns>
      <remarks>
            Will encode characters according to the UTF-8 character set.
            </remarks>
    </member>
    <member name="M:EPiServer.Url.Encode(System.String,System.Text.Encoding)">
      <summary>
            Encodes the specified string.
            </summary>
      <param name="str">The string to encode.</param>
      <param name="e">The encoding to use.</param>
      <returns>An encoded string.</returns>
    </member>
    <member name="M:EPiServer.Url.Encode(System.String,System.Text.Encoding,EPiServer.Url.EncodeByte)">
      <summary>
            Encodes the specified string.
            </summary>
      <param name="str">The string to encode.</param>
      <param name="e">The encoding to use.</param>
      <param name="encodingRule">The method used to determine if and how a character should be encoded.</param>
      <returns>An encoded string.</returns>
    </member>
    <member name="M:EPiServer.Url.SegmentEncodingRule(System.Byte)">
      <summary>
            The URL encoding rules for a URL segment.
            </summary>
      <param name="b">The byte to encode.</param>
      <returns>The encoded byte as a string.</returns>
    </member>
    <member name="M:EPiServer.Url.QueryEncodingRule(System.Byte)">
      <summary>
            The URL encoding rules for the query string.
            </summary>
      <param name="b">The byte to encode.</param>
      <returns>The encoded byte as a string.</returns>
    </member>
    <member name="T:EPiServer.UrlBuilder">
      <summary>
            Extend the UriBuilder class to make http-assumptions about relative Url's. Use like/instead of
            System.UriBuilder, but it will handle relative Uri's as if they are http-Uri's.
            </summary>
      <example>
        <para>
            The example below shows how to use<b>UrlBuilder</b> to merge query strings.
            </para>
        <code source="../CodeSamples/EPiServerNET/Web/UrlBuilderCodeExamples.aspx.cs" region="UrlBuilderExample" />
      </example>
    </member>
    <member name="F:EPiServer.UrlBuilder._path">
      <summary>
            Private backing for specially handled path. We do this primarily because the UriBuilder Path property is very slow,
            but also to make it easier to handle relative paths.
            </summary>
    </member>
    <member name="M:EPiServer.UrlBuilder.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.UrlBuilder" /> class.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="M:EPiServer.UrlBuilder.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.UrlBuilder" /> class.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="M:EPiServer.UrlBuilder.#ctor(EPiServer.Url)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.UrlBuilder" /> class.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="M:EPiServer.UrlBuilder.#ctor(EPiServer.UrlBuilder)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.UrlBuilder" /> class.
            </summary>
      <param name="url">The URL builder. A memberwise copy is made.</param>
    </member>
    <member name="M:EPiServer.UrlBuilder.Init(System.Uri)">
      <summary>
            Perform initialization based on an Uri
            </summary>
      <param name="url">The Uri to initialize from</param>
    </member>
    <member name="P:EPiServer.UrlBuilder.IsPathRelative">
      <summary>
            Gets a value indicating whether the path is relative.
            </summary>
      <value>
        <c>true</c> if the path is relative; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.UrlBuilder.Encoding">
      <summary>
            Gets the encoding used for unescaping and escaping.
            </summary>
      <value>The encoding. The default is UTF-8.</value>
    </member>
    <member name="P:EPiServer.UrlBuilder.HasAuthorityPart">
      <summary>
            Gets a value indicating whether this instance has any authority part (scheme, username, password, port, host)
            </summary>
      <value>
        <c>true</c> if this instance has any authority part; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.UrlBuilder.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
      <value>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.UrlBuilder.ThisBuilder">
      <summary>
            Gets or sets this instances' UriBuilder.
            </summary>
      <value>This instances' builder.</value>
    </member>
    <member name="P:EPiServer.UrlBuilder.Uri">
      <summary>
            Gets or sets the Uri.
            </summary>
      <value>The URI.</value>
    </member>
    <member name="P:EPiServer.UrlBuilder.Fragment">
      <summary>
            Gets the escaped fragment.
            </summary>
      <value>A string containing any URI fragment information.</value>
      <remarks>This property will strip any # charactes at the beginning of the string when setting the property since they are added by the underlying <see cref="T:System.UriBuilder" />.</remarks>
    </member>
    <member name="P:EPiServer.UrlBuilder.Host">
      <summary>
            Gets the host component of this instance.
            </summary>
      <value>
            A String containing the host name. This is usually the DNS host name or IP address of the server.
            </value>
    </member>
    <member name="P:EPiServer.UrlBuilder.Password">
      <summary>
            Gets or sets the password.
            </summary>
      <value>The password.</value>
    </member>
    <member name="P:EPiServer.UrlBuilder.Path">
      <summary>
            Gets the path. Will return a relative path if the path was relative to start with.
            </summary>
      <value>The path.</value>
    </member>
    <member name="P:EPiServer.UrlBuilder.Port">
      <summary>
            Gets the port number of this URL.
            </summary>
      <value>An int value containing the port number for this URL, or -1 for no value set</value>
    </member>
    <member name="P:EPiServer.UrlBuilder.Query">
      <summary>
            Gets any query information included in the specified URL.
            </summary>
      <value>
            A String containing any query information included in the specified URL.
            </value>
      <remarks>
            The Query property contains any query information included in the URI.
            Query information is separated from the path information by a question mark (?) and continues to the end of the URI.
            The query information returned includes the leading question mark.
            The query information is escaped according to RFC 3986.
            </remarks>
    </member>
    <member name="P:EPiServer.UrlBuilder.QueryCollection">
      <summary>
            Gets or sets a parsed and decoded collection of query string parameters.
            </summary>
      <value>The query collection.</value>
    </member>
    <member name="P:EPiServer.UrlBuilder.QueryId">
      <summary>
            Gets and sets the id in the QueryCollection
            </summary>
    </member>
    <member name="P:EPiServer.UrlBuilder.QueryLanguage">
      <summary>
            Gets and sets the epslanguage in the QueryCollection
            </summary>
    </member>
    <member name="P:EPiServer.UrlBuilder.QueryTemplate">
      <summary>
            Gets and sets the epstemplate in the QueryCollection
            </summary>
    </member>
    <member name="M:EPiServer.UrlBuilder.MergeQueryCollection(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Merges the query collection with the passed collection.
            </summary>
      <param name="masterQueryCollection">The master query collection.</param>
      <remarks>
            If the parameter already exists in the UrlBuilders QueryCollection it will be overwritten with the parameter from
            the master query collection.
            </remarks>
    </member>
    <member name="P:EPiServer.UrlBuilder.Scheme">
      <summary>
            Gets the scheme name for this URL.
            </summary>
      <value>
            A String containing the scheme for this URL, converted to lowercase.
            </value>
    </member>
    <member name="P:EPiServer.UrlBuilder.UserName">
      <summary>
            Gets or sets the user name
            </summary>
      <value>The user name.</value>
    </member>
    <member name="M:EPiServer.UrlBuilder.ToString">
      <summary>
            Returns a canonical string representation for the specified Url instance.
            </summary>
      <returns>
            A String instance that contains the unescaped canonical representation of the Uri instance.
            </returns>
      <remarks>
            Do NOT use this method except for debug and human readable output. To get the properly escaped string, cast
            to a string with (string).
            </remarks>
    </member>
    <member name="M:EPiServer.UrlBuilder.op_Explicit(EPiServer.UrlBuilder)~System.String">
      <summary>
            Convert the instance to a properly escaped string
            </summary>
      <param name="ub">The UrlBuilder to convert</param>
      <returns>A converted UrlBuilder as a string</returns>
    </member>
    <member name="T:EPiServer.Util.BlobCleanupJobState">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. State used to keep track of position in changelog
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Util.BlobCleanupJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A scheduled job that cleans up deleted blob containers
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Util.BlobCleanupJob.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Util.DelayedPublishJob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Util.BlobCleanupJob.Execute">
      <summary>
            Start job
            </summary>
    </member>
    <member name="T:EPiServer.Util.ContentAssetsCleanupJobState">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. State used to keep track of position in changelog
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Util.CleanUnusedAssetsFoldersJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Scheduled job that removes content asset folders where the related content has been deleted.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.Util.CleanUnusedAssetsFoldersJob.BatchSize">
      <summary>
            The number of items that is loaded in a batch.
            </summary>
    </member>
    <member name="M:EPiServer.Util.CleanUnusedAssetsFoldersJob.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Util.CleanUnusedAssetsFoldersJob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Util.CleanUnusedAssetsFoldersJob.OnStatusChanged(System.String)">
      <summary>
            Raise a StatusChanged event
            </summary>
      <param name="statusMessage">Status message to report</param>
    </member>
    <member name="M:EPiServer.Util.CleanUnusedAssetsFoldersJob.Stop">
      <summary>
            Stop the job
            </summary>
    </member>
    <member name="M:EPiServer.Util.CleanUnusedAssetsFoldersJob.Execute">
      <summary>
            Execute the job
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Util.CommandHandler">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.Util.CommandHandler.TryExecute(System.Action,System.String@)">
      <summary>
            Tries to execute commad or action.
            </summary>
      <param name="command">The command or action.</param>
      <param name="errorMessage">The error message.</param>
      <returns>true if the command executes without exception otherwise false</returns>
    </member>
    <member name="M:EPiServer.Util.CommandHandler.TryExecute(System.Action,System.String@,System.Type[])">
      <summary>
             Tries to execute commad or action. 
             Throw exception if an exception occurs during execution and the exception does not exist in the handledexptiontypes list.
            </summary>
      <param name="command">The command.</param>
      <param name="errorMessage">The error message.</param>
      <param name="handledExceptionTypes">The handled exception types.</param>
      <returns>true if the command executes without exception otherwise false</returns>
    </member>
    <member name="M:EPiServer.Util.CommandHandler.RetryExecuteIfException(System.Action,System.Type,System.Int32,System.TimeSpan)">
      <summary>
             Tries to execute commad or action. 
             Throw exception if the exception does not exist in the handledexptiontypes list or it occurs more than numberOfRetry.
            </summary>
      <param name="command">The command.</param>
      <param name="handledExceptionType">The handled exception type.</param>
      <param name="numberOfRetry">number of try.</param>
      <param name="waitFor">The amount of time that we wait for the next call.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Util.DelayedPublishJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A scheduled job that publishes pages that have been marked for delayed publish
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Util.DelayedPublishJob.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Util.DelayedPublishJob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Util.DelayedPublishJob.Execute">
      <summary>
            Start job
            </summary>
    </member>
    <member name="T:EPiServer.Util.EmptyWastebasketJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Job used for scheduling emptying of wastebasket
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Util.EmptyWastebasketJob.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Util.EmptyWastebasketJob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Util.EmptyWastebasketJob.Execute">
      <summary>
            Start job
            </summary>
      <remarks>Uses the default <see cref="T:EPiServer.IContentRepository" /> and <see cref="T:EPiServer.Core.IContentProviderManager" /></remarks>
    </member>
    <member name="T:EPiServer.Util.Internal.AutoCompressString">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A immutable class that wraps a string with support for compression
            </summary>
      <remarks>Important! You cannot change the state of this class after compression</remarks>
      <exclude />
    </member>
    <member name="F:EPiServer.Util.Internal.AutoCompressString.Empty">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An empty string
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.AutoCompressString.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Util.Internal.AutoCompressString" /> class.
            </summary>
      <param name="str">The string to be wrapped</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.AutoCompressString.SetThreshold(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set the global threshold for when strings are compressed
            </summary>
      <param name="val">The size of the threshold</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.AutoCompressString.Zip(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles zipping
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.AutoCompressString.UnZip">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Unzip compressed data and return string
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.AutoCompressString.WriteTo(System.IO.TextWriter)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Unzip compressed data and stream to writer
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.AutoCompressString.ToString">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Main method to read string value
            </summary>
      <returns>
      </returns>
      <remarks>This method is stateless and must always be</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Util.Internal.DeletedContentsBlobCleanup">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Util.Internal.DeletedVersionsBlobCleanup">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Util.Internal.IBlobCleanup">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Util.Internal.ParentRestoreService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. ParentRestoreService  listen to move and delete events and save and delete the parentship info to and from repository
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.ParentRestoreService.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Util.Internal.ParentRestoreService" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.ParentRestoreService.#ctor(EPiServer.Core.IContentEvents,EPiServer.DataAbstraction.IParentRestoreRepository,EPiServer.IContentRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Util.Internal.ParentRestoreService" /> class.
            </summary>
      <param name="contentEvents">The content events.</param>
      <param name="contentRestoreRepository">The content restore repository.</param>
      <param name="contentRepository">The content repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.ParentRestoreService.Start">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. listen to move and delete events.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.ParentRestoreService.Stop">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Stops the listening of events.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.ParentRestoreService.Restore(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Restores the specified source link. Move the source link to previous parent.
            </summary>
      <param name="sourceLink">The source link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.ParentRestoreService.ContentEvents_DeletedContent(System.Object,EPiServer.DeleteContentEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles the DeletedContent event of the ContentEvents.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:EPiServer.ContentEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.Internal.ParentRestoreService.ContentEvents_MovedContent(System.Object,EPiServer.ContentEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles the MovedContent event of the ContentEvents.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:EPiServer.ContentEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Util.Internal.TrimContentVersionsJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Util.PageArchiveJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Job used for scheduling emptying of wastebasket
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Util.PageArchiveJob.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Util.PageArchiveJob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Util.PageArchiveJob.Execute">
      <summary>
            Start job
            </summary>
    </member>
    <member name="M:EPiServer.Util.PageArchiveJob.Execute(EPiServer.IContentRepository,EPiServer.Core.IPageCriteriaQueryable,EPiServer.DataAbstraction.ContentTypeAvailabilityService)">
      <summary>
            Start job
            </summary>
    </member>
    <member name="T:EPiServer.Util.StatusInfo">
      <summary>
            A helper class that holds collections of logging information. Used in mirroring and import/export.
            </summary>
    </member>
    <member name="T:EPiServer.Util.StatusInfo.StatusInfoAction">
      <summary>
            Type of status
            </summary>
    </member>
    <member name="F:EPiServer.Util.StatusInfo.StatusInfoAction.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:EPiServer.Util.StatusInfo.StatusInfoAction.Exported">
      <summary>
            An item has been exported
            </summary>
    </member>
    <member name="F:EPiServer.Util.StatusInfo.StatusInfoAction.Imported">
      <summary>
            An item has been imported
            </summary>
    </member>
    <member name="F:EPiServer.Util.StatusInfo.StatusInfoAction.Moved">
      <summary>
            An item has been moved
            </summary>
    </member>
    <member name="F:EPiServer.Util.StatusInfo.StatusInfoAction.Deleted">
      <summary>
            An item has been deleted
            </summary>
    </member>
    <member name="M:EPiServer.Util.StatusInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Util.StatusInfo" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Util.StatusInfo.Errors">
      <summary>
            A collection of error messages
            </summary>
    </member>
    <member name="P:EPiServer.Util.StatusInfo.Warnings">
      <summary>
            A collection of warnings
            </summary>
    </member>
    <member name="P:EPiServer.Util.StatusInfo.ProgressLog">
      <summary>
            A collection of progress messages
            </summary>
    </member>
    <member name="M:EPiServer.Util.StatusInfo.GetInformationLog(EPiServer.Util.StatusInfo.StatusInfoAction)">
      <summary>
            Gets the information about a specific action
            </summary>
      <param name="action">The action type</param>
      <returns>A list of messages</returns>
    </member>
    <member name="M:EPiServer.Util.StatusInfo.CopyTo(EPiServer.Util.StatusInfo)">
      <summary>
            Copy all logs to another instance
            </summary>
      <param name="info">The target for the operation</param>
    </member>
    <member name="M:EPiServer.Util.StatusInfo.Clear(EPiServer.Util.StatusInfo.StatusInfoAction)">
      <summary>
            Clear all logs of a specific type
            </summary>
      <param name="action">The type to clear</param>
    </member>
    <member name="M:EPiServer.Util.StatusInfo.Clear">
      <summary>
            Clear all logs
            </summary>
    </member>
    <member name="T:EPiServer.Util.TaskMonitorTruncateJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A job that truncates status of old tasks monitored by TaskMonitor.
            </summary>
      <remarks>
            The config setting episerver/applicationSettings[@monitoredTaskTruncateLimit] controls which tasks that are removed.
            </remarks>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Util.TaskMonitorTruncateJob.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Util.TaskMonitorTruncateJob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Util.TaskMonitorTruncateJob.#ctor(EPiServer.Async.Internal.TaskInformationStorage,System.TimeSpan)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Util.TaskMonitorTruncateJob" /> class.
            </summary>
      <param name="taskInformationStore">The persistance store used.</param>
      <param name="truncateLimit">The time span that specifies the limit on how old tasks that should be deleted.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.TaskMonitorTruncateJob.OnStatusChanged(System.String)">
      <summary>
            Call to send a status message.
            </summary>
      <param name="statusMessage">The status message</param>
    </member>
    <member name="M:EPiServer.Util.TaskMonitorTruncateJob.Stop">
      <summary>
            Call to stop ongoing job.
            </summary>
    </member>
    <member name="M:EPiServer.Util.TaskMonitorTruncateJob.Execute">
      <summary>
            Call to start execution of job.
            </summary>
    </member>
    <member name="T:EPiServer.Util.LegacyResourceableExtensions">
      <summary>
            help functions to handle legacy page folder
            </summary>
    </member>
    <member name="M:EPiServer.Util.LegacyResourceableExtensions.GetLegcayContentFolderID(EPiServer.Core.IContent)">
      <summary>
            Gets the legcay content folder ID.
            </summary>
      <param name="content">The content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Util.LegacyResourceableExtensions.SetLegcayContentFolderID(EPiServer.Core.IContent,System.Int64)">
      <summary>
            Sets the legcay content folder ID.
            </summary>
      <param name="content">The content.</param>
      <param name="id">The id.</param>
    </member>
    <member name="M:EPiServer.Util.LegacyResourceableExtensions.IsLegacyResourceable(EPiServer.Core.IContent)">
      <summary>
            Determines whether [is legacy resourceable] [the specified content].
            </summary>
      <param name="content">The content.</param>
      <returns>
        <c>true</c> if [is legacy resourceable] [the specified content]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Util.PageSorterHelper">
      <summary>
            This class and its members are reserved for internal use and are not intended to be used in your code.
            </summary>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.#ctor">
      <summary>
            Default constructor. Calls constructor with dependencies where dependecies are fetched from IOC container.
            </summary>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.#ctor(EPiServer.IContentRepository,EPiServer.Core.IContentProviderManager)">
      <summary>
            Constructor with dependencies
            </summary>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.GetIndex(EPiServer.Core.PageData,System.Int32,System.Boolean)">
      <summary>
            Gets the index of the sort. Internal use only.
            </summary>
      <param name="sourcePage">The source page.</param>
      <param name="sortIndex">Index of the sort.</param>
      <param name="pageIsAddedToNewCollection">if set to <c>true</c> [page is added to new collection].</param>
      <returns>New index of the source page</returns>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.GetNextIndex(EPiServer.Core.ContentReference)">
      <summary>
            Gets the next sort index for a page
            </summary>
      <param name="parentLink">Parent page</param>
      <returns>100 if the sort order isn't Index, otherwise the the last page's sort index + 100</returns>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.SortAmongSiblings(EPiServer.Core.PageData,System.Int32,EPiServer.Security.AccessLevel)">
      <summary>
            Updated the sort order for so that the page is moved to a specified position.
            </summary>
      <param name="page">The page to change sort position.</param>
      <param name="newPosition">The new position the page should be in when leaving this method, zero-based, excluding the current position of the page.</param>
      <param name="access">The access level required to make changes to the pages.</param>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.ChangeSortRuleToIndexMaintainOrder(EPiServer.Core.PageData,EPiServer.Security.AccessLevel)">
      <summary>
            Will change the property PageChildOrderRule to sort by index and then publish that page using ForceCurrentVersion.
            </summary>
      <param name="page">The page to change sort rule on.</param>
      <param name="access">The access level needed to save the page.</param>
      <remarks>
            Designed to use together with the drag and drop sorting in the edit tree.
            </remarks>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.SortPageAmongSiblings(EPiServer.Core.PageData,System.Int32)">
      <summary>
            Updated the sort order for so that the page is moved to a specified position.
            </summary>
      <remarks>
            Since this function will re-publish the pages, the currently logged in user will need publish access to any changed pages.
            </remarks>
      <param name="page">The page to change sort position.</param>
      <param name="newPosition">The new position.</param>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.SortPageAmongSiblings(EPiServer.Core.PageData,System.Int32,EPiServer.Security.AccessLevel)">
      <summary>
            Updated the sort order for so that the page is moved to a specified position.
            </summary>
      <param name="page">The page to change sort position.</param>
      <param name="newPosition">The new position.</param>
      <param name="access">The access level needed to save the pages.</param>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.SortPageAmongSiblings(EPiServer.Core.PageData,System.Int32,EPiServer.Security.AccessLevel,EPiServer.IContentRepository)">
      <summary>
            Updated the sort order for so that the page is moved to a specified position.
            </summary>
      <param name="page">The page to change sort position.</param>
      <param name="newPosition">The new position.</param>
      <param name="access">The access level needed to save the pages.</param>
      <param name="contentRepository">The <see cref="T:EPiServer.IContentRepository" /> to use</param>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.ChangeSortRuleToIndexKeepingOrder(EPiServer.Core.PageData)">
      <summary>
            Will change the property PageChildOrderRule to sort by index and then publish that page using ForceCurrentVersion.
            </summary>
      <param name="page">The page to change sort rule on.</param>
      <remarks>
            Since this function will re-publish the pages, the currently logged in user will need publish access to any changed pages.
            Designed to use together with the drag and drop sorting in the edit tree.
            </remarks>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.ChangeSortRuleToIndexKeepingOrder(EPiServer.Core.PageData,EPiServer.Security.AccessLevel)">
      <summary>
            Will change the property PageChildOrderRule to sort by index and then publish that page using ForceCurrentVersion.
            </summary>
      <param name="page">The page to change sort rule on.</param>
      <param name="access">The access level needed to save the page.</param>
      <remarks>
            Designed to use together with the drag and drop sorting in the edit tree.
            </remarks>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.ChangeSortRuleToIndexKeepingOrder(EPiServer.Core.PageData,EPiServer.Security.AccessLevel,EPiServer.IContentRepository)">
      <summary>
            Will change the property PageChildOrderRule to sort by index and then publish that page using ForceCurrentVersion.
            </summary>
      <param name="page">The page to change sort rule on.</param>
      <param name="access">The access level needed to save the page.</param>
      <param name="contentRepository">The <see cref="T:EPiServer.IContentRepository" /> to use</param>
      <remarks>
            Designed to use together with the drag and drop sorting in the edit tree.
            </remarks>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.GetNextSortIndex(EPiServer.Core.PageReference)">
      <summary>
            Gets the next sort index for a page
            </summary>
      <param name="parentPage">Parent page</param>
      <returns>100 if the sort order isn't Index, otherwise the the last page's sort index + 100</returns>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.GetNextSortIndex(EPiServer.Core.ContentReference,EPiServer.IContentRepository)">
      <summary>
            Gets the next sort index for a page
            </summary>
      <param name="parentLink">Parent page</param>
      <param name="contentRepository">The <see cref="T:EPiServer.IContentRepository" /> to use</param>
      <returns>100 if the sort order isn't Index, otherwise the the last page's sort index + 100</returns>
    </member>
    <member name="M:EPiServer.Util.PageSorterHelper.GetSortIndex(EPiServer.Core.PageData,System.Int32,System.Boolean)">
      <summary>
            Gets the index of the sort. Internal use only.
            </summary>
      <param name="sourcePage">The source page.</param>
      <param name="sortIndex">Index of the sort.</param>
      <param name="pageIsAddedToNewCollection">if set to <c>true</c> [page is added to new collection].</param>
      <returns>New index of the source page</returns>
    </member>
    <member name="T:EPiServer.Validation.ContentSaveValidationContext">
      <summary>
            The context used in <see cref="T:EPiServer.Validation.IContentSaveValidate`1" /> implementations
            that are called during save validation of content instances.
            </summary>
    </member>
    <member name="M:EPiServer.Validation.ContentSaveValidationContext.#ctor(EPiServer.DataAccess.SaveAction,System.Boolean)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Validation.ContentSaveValidationContext" /></summary>
      <param name="saveAction">The save action used at save operation</param>
      <param name="newVersionRequired">Specifies if a new version is required for the save operation</param>
    </member>
    <member name="P:EPiServer.Validation.ContentSaveValidationContext.SaveAction">
      <summary>
            The save action used when content was updated.
            </summary>
    </member>
    <member name="P:EPiServer.Validation.ContentSaveValidationContext.NewVersionRequired">
      <summary>
            Indicates if the save will cause a new version to be created.
            </summary>
    </member>
    <member name="T:EPiServer.Validation.IContentSaveValidate`1">
      <summary>
            Signature for component that validates instances of <see cref="T:EPiServer.Core.IContentData" /> instances with access
            to validation context given by <see cref="T:EPiServer.Validation.ContentSaveValidationContext" /></summary>
      <typeparam name="TContent">The type of content to validate</typeparam>
    </member>
    <member name="T:EPiServer.Validation.Internal.ContentDataAnnotationsValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the <see cref="T:EPiServer.Core.IContentData" /> instance against attributes inheriting <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />.
            </summary>
      <remarks>
            Validation will not be performed against <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> since that is done through
            <see cref="T:EPiServer.Validation.Internal.RequiredPropertyValidator" /></remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ContentDataAnnotationsValidator.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.DataAbstraction.IContentTypeRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Validation.Internal.ContentDataAnnotationsValidator" /> class.
            </summary>
      <param name="localizationService">The localization service.</param>
      <param name="contentTypeRepository">The content type repository</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ContentDataAnnotationsValidator.GetDisplayName(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the display name for the <paramref name="propertyDescriptor" /> on the content type of the <paramref name="instance" />.
            </summary>
      <param name="propertyDescriptor">The property to get the display name for.</param>
      <param name="instance">The object instance that <paramref name="propertyDescriptor" /> is defined on.</param>
      <returns>A translated display name if any translation exists.</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.ContentDataAnnotationsValidator.IgnoredAttributes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the ignored attributes.
            </summary>
      <remarks>Returns <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /></remarks>
      <value>The ignored attributes.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Validation.Internal.ContentNameValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates that Name of an IContent is set and has a valid format 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ContentNameValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Validation.Internal.RequiredPropertyValidator" /> class.
            </summary>
      <param name="localizationService">The localization service.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ContentNameValidator.Validate(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified instance.
            </summary>
      <param name="content">The instance.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Validation.Internal.PageShortcutValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates that when a shortcut (e.g. Shortcut or Fetchdata) is used that the property <see cref="F:EPiServer.DataAbstraction.MetaDataProperties.PageShortcutLink" /> is set.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.PageShortcutValidator.#ctor(EPiServer.Framework.Localization.LocalizationService)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Validation.Internal.PageShortcutValidator" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.PageShortcutValidator.Validate(EPiServer.Core.PageData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified page.
            </summary>
      <param name="page">The page.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Validation.Internal.PublishDateValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates that StartPublish occurs before StopPublish.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.PublishDateValidator.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.DataAbstraction.IContentTypeRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Validation.Internal.PageShortcutValidator" /> class.
            </summary>
      <param name="localizationService">The localization service.</param>
      <param name="contentTypeRepository">The content type repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.PublishDateValidator.Validate(EPiServer.Core.IVersionable)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified instance.
            </summary>
      <param name="versionable">The versionable.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Validation.Internal.RequiredPropertyValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates that all required properties are set.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.RequiredPropertyValidator.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.DataAbstraction.IContentTypeRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Validation.Internal.RequiredPropertyValidator" /> class.
            </summary>
      <param name="localizationService">The localization service.</param>
      <param name="propertyDefinitionRepository">The property definition repository.</param>
      <param name="contentTypeRepository">The content type repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.RequiredPropertyValidator.Validate(EPiServer.Core.IContentData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified instance.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.RequiredPropertyValidator.ValidateInternal(EPiServer.Core.IContentData,System.Collections.Generic.List{EPiServer.Validation.ValidationError}@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Internals the validate.
            </summary>
      <param name="instance">The instance to validate.</param>
      <param name="errors">The errors collection to add to.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Validation.Internal.RoutingSegmentValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates that the current routing segment is unique among its siblings
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.RoutingSegmentValidator.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Web.Internal.IUrlSegmentLocator,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.IContentRepository,EPiServer.Web.IUrlSegmentGenerator,EPiServer.Web.UrlSegmentOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Validation.Internal.RoutingSegmentValidator" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.RoutingSegmentValidator.IISHiddenSegments">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the IIS hidden segments.
            </summary>
      <remarks>
            This is exposed to make the class testable. At runtime it will use values given by EPiServer.Configuration.Settings.Instance.IISHiddenSegments.
            </remarks>
      <value>The IIS hidden segments.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.RoutingSegmentValidator.Validate(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified instance.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Validation.Internal.SimpleAddressValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates that a simple address for a page is unique within its siblings.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Validation.Internal.SimpleAddressValidator._contentRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Unreserved characters according to W3 = ALPHA / DIGIT / "-" / "_" / "~".
            Also with the added possibility to have "/" in the simple address.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.SimpleAddressValidator.VirtualPathMappings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.SimpleAddressValidator.Validate(EPiServer.Core.PageData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified instance.
            </summary>
      <param name="page">The instance.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.SimpleAddressValidator.BaseDirectory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the base directory.
            </summary>
      <remarks>
            The implemenation uses <see cref="P:EPiServer.Web.IWebHostingEnvironment.WebRootPath" />, the reason the dicitonary is
            exposed to make it possible to replace during tests.
            </remarks>
      <value>The base directory.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.ContentFragmentAttributeAssembler">
      <summary>
            Constructs client side edit activation attributes for <see cref="T:EPiServer.Core.Html.StringParsing.ContentFragment" />s. 
            </summary>
    </member>
    <member name="M:EPiServer.Web.ContentFragmentAttributeAssembler.GetAttributes(EPiServer.Core.ContentAreaItem,System.Boolean,System.Boolean)">
      <summary>
            Gets a dictionary containing markup attributes necessary for supporting editable <see cref="T:EPiServer.Core.Html.StringParsing.ContentFragment" />s in rendered markup.
            </summary>
      <param name="contentAreaItem">The fragment to assemble attributes for.</param>
      <param name="isRenderedInEditMode">set to <c>true</c> when the fragment is rendered in edit mode.</param>
      <param name="hasRenderer">A value stating whether a renderer exists for the fragment.</param>
      <returns>A dictionary with attribute names and values for a content fragment</returns>
    </member>
    <member name="M:EPiServer.Web.ContentFragmentAttributeAssembler.AppendPersonalizationAttributes(System.Collections.Generic.IDictionary{System.String,System.String},EPiServer.Core.ContentAreaItem)">
      <summary>
            Appends the personalization attributes to the attributes collection.
            </summary>
      <param name="attributes">The attribute collection to which the persionalization attibutes are appended.</param>
      <param name="contentAreaItem">The fragment to create personalization attributes for.</param>
    </member>
    <member name="T:EPiServer.Web.ContentResolveResult">
      <summary>
            The result for a resolve request in <see cref="T:EPiServer.Web.IContentResolver" /></summary>
    </member>
    <member name="P:EPiServer.Web.ContentResolveResult.ContentUri">
      <summary>
            Gets or sets the content URI.
            </summary>
      <remarks>
            A <see cref="T:System.Uri" /> with the "classic" URL of the resolved content.
            </remarks>
      <value>The content URI.</value>
    </member>
    <member name="P:EPiServer.Web.ContentResolveResult.UniqueID">
      <summary>
            Gets or sets the unique ID for the reolved content.
            </summary>
      <value>The unique ID.</value>
    </member>
    <member name="P:EPiServer.Web.ContentResolveResult.ContentLink">
      <summary>
            Gets or sets the content link for the resolved content.
            </summary>
      <value>The content link.</value>
    </member>
    <member name="T:EPiServer.Web.ContextMode">
      <summary>
            Specified which mode the context are rendered in.
            </summary>
    </member>
    <member name="F:EPiServer.Web.ContextMode.Undefined">
      <summary>
            Context has not been defined.
            </summary>
    </member>
    <member name="F:EPiServer.Web.ContextMode.Default">
      <summary>
            View mode.
            </summary>
    </member>
    <member name="F:EPiServer.Web.ContextMode.Edit">
      <summary>
            Edit mode.
            </summary>
    </member>
    <member name="F:EPiServer.Web.ContextMode.Preview">
      <summary>
            Preview mode when editing.
            </summary>
    </member>
    <member name="T:EPiServer.Web.ContextModeExtension">
      <summary>
            Convenient extension methods for <see cref="T:EPiServer.Web.ContextMode" /></summary>
    </member>
    <member name="M:EPiServer.Web.ContextModeExtension.EditOrPreview(EPiServer.Web.ContextMode)">
      <summary>
            Determines if current context mode is <see cref="F:EPiServer.Web.ContextMode.Edit" /> or <see cref="F:EPiServer.Web.ContextMode.Preview" /></summary>
      <param name="contextMode">The context mode that is extended</param>
      <returns>True if context mode is edit or preview else false</returns>
    </member>
    <member name="T:EPiServer.Web.DisplayOption">
      <summary>
            A Display option can be used to register different display options on a content inside a content area
            </summary>
    </member>
    <member name="P:EPiServer.Web.DisplayOption.Id">
      <summary>
            Unique id for this option
            </summary>
    </member>
    <member name="P:EPiServer.Web.DisplayOption.Name">
      <summary>
            The name of the display option
            </summary>
      <remarks>If a language resource key is specified it will be automatically translated when sent to the client.</remarks>
    </member>
    <member name="P:EPiServer.Web.DisplayOption.Description">
      <summary>
            Description for the display option
            </summary>
      <remarks>If a language resource key is specified it will be automatically translated when sent to the client.</remarks>
    </member>
    <member name="P:EPiServer.Web.DisplayOption.Tag">
      <summary>
            The rendering tag to apply when the option has been selected
            </summary>
    </member>
    <member name="P:EPiServer.Web.DisplayOption.IconClass">
      <summary>
            Css class for the icon that is used in the display option selector
            </summary>
    </member>
    <member name="P:EPiServer.Web.DisplayOption.IsReadOnly">
      <summary>
            Indicates whether the current object instance is read-only.
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayOption.CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayOption.MakeReadOnly">
      <summary>
            Changes the object instance into a read-only object.
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayOption.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
    </member>
    <member name="T:EPiServer.Web.DisplayOptions">
      <summary>
            Service that is used to register <see cref="T:EPiServer.Web.DisplayOption" />s
            </summary>
      <remarks>Display options are returned in the order they were added when enumerating over this class.</remarks>
    </member>
    <member name="M:EPiServer.Web.DisplayOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.DisplayOptions" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayOptions.Add(EPiServer.Web.DisplayOption)">
      <summary>
            Add a display option
            </summary>
      <param name="displayOption">The display option to add</param>
      <exception cref="T:System.ArgumentNullException">Thrown if the display options is null</exception>
      <exception cref="T:System.ArgumentException">A display option with the same id allready exists</exception>
    </member>
    <member name="M:EPiServer.Web.DisplayOptions.Add(System.String,System.String,System.String)">
      <summary>
            Add a new display option
            </summary>
      <param name="id">Unique identifier for the option</param>
      <param name="name">Name of the display option to add, if a language resource key is specified it will be automatically translated </param>
      <param name="tag">The template tag to apply when the option has been selected</param>
    </member>
    <member name="M:EPiServer.Web.DisplayOptions.Add(System.String,System.String,System.String,System.String)">
      <summary>
            Add a new display option
            </summary>
      <param name="id">Unique identifier for the option</param>
      <param name="name">Name of the display option to add, if a language resource key is specified it will be automatically translated </param>
      <param name="tag">The rendering tag to apply when the option has been selected</param>
      <param name="description">Description for the option</param>
    </member>
    <member name="M:EPiServer.Web.DisplayOptions.Add(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Add a new display option
            </summary>
      <param name="id">Unique identifier for the option</param>
      <param name="name">Name of the display option to add, if a language resource key is specified it will be automatically translated</param>
      <param name="tag">The rendering tag to apply when the option has been selected</param>
      <param name="description">Description for the option</param>
      <param name="iconClass">Css class for the icon that is used in the display option selector</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.DisplayOptions.Remove(System.String)">
      <summary>
            Removes the <see cref="T:EPiServer.Web.DisplayOption" /> with the specified id
            </summary>
      <param name="id">The id if the display option to remove.</param>
    </member>
    <member name="M:EPiServer.Web.DisplayOptions.Get(System.String)">
      <summary>
            Gets the display options with the specified id
            </summary>
      <param name="id">The id if the option to get.</param>
      <returns>
        <see cref="T:EPiServer.Web.DisplayOption" /> or null</returns>
    </member>
    <member name="M:EPiServer.Web.DisplayResolutionService.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.DisplayResolutionService" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.DisplayResolutionService.Resolutions">
      <summary>
            Gets all registered resolutions.
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayResolutionService.Add(EPiServer.Web.IDisplayResolution)">
      <summary>
            Adds a display resolution to the service.
            </summary>
    </member>
    <member name="T:EPiServer.Web.HostDefinition">
      <summary>
            Contains information about a host such as host name and a potential language mapping for the host name.
            </summary>
    </member>
    <member name="F:EPiServer.Web.HostDefinition.WildcardHostName">
      <summary>
            The wild card host name that is used to map unmapped hosts.
            </summary>
    </member>
    <member name="P:EPiServer.Web.HostDefinition.Name">
      <summary>
            Gets or sets the name of the host. Must be a valid URI authority.
            </summary>
    </member>
    <member name="P:EPiServer.Web.HostDefinition.Authority">
      <summary>
            Exposes the authority part of the host
            </summary>
    </member>
    <member name="P:EPiServer.Web.HostDefinition.Language">
      <summary>
            Gets or sets the language that is mapped to the current host.
            </summary>
      <remarks>If there is no language mapped for the host it returns null.</remarks>
    </member>
    <member name="P:EPiServer.Web.HostDefinition.Type">
      <summary>
            Gets or sets what type of behavior that this host should have.
            </summary>
      <remarks>
            A <see cref="T:EPiServer.Web.SiteDefinition" /> can only have a maximum of one primary host
            and one edit host per language. 
            It can also not only contain hosts set to redirect,
            These rules will be validated when the <see cref="T:EPiServer.Web.SiteDefinition" /> is saved.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.HostDefinition.UseSecureConnection">
      <summary>
            Gets or sets a value indicating whether HTTPS should be preferred when generating
            links to this host.
            </summary>
      <remarks>
            If not set, any generated links to the host will use the same scheme as the URL of the site 
            containing this host.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.HostDefinition.Url">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Web.HostDefinition.Site">
      <summary>
            This should be set internally when saving or loading the site. Needed to create a full URL for the time being.
            </summary>
    </member>
    <member name="P:EPiServer.Web.HostDefinition.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.HostDefinition.IsWildcardHost">
      <summary>
            Determines whether this instance is mapped to any host.
            </summary>
      <returns>
        <c>true</c> if this <see cref="T:EPiServer.Web.HostDefinition" /> is a wildcard host; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Web.HostDefinition.MakeReadOnly">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.HostDefinition.CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.HostDefinition.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.HostDefinition.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.HostDefinition.Equals(EPiServer.Web.HostDefinition)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.HostDefinition.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.HostDefinition.ThrowIfReadOnly">
      <summary>
            Throws an exception if the current instance is read-only.
            </summary>
    </member>
    <member name="M:EPiServer.Web.HostDefinition.IsWildcardHost(System.String)">
      <summary>
            Determines whether this instance is a wildcard host.
            </summary>
      <param name="hostName">The hostname to check.</param>
      <returns>
        <c>true</c> if this <see cref="T:EPiServer.Web.HostDefinition" /> is a wildcard host; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.HostDefinition.IsValidHostUrl(System.Uri)">
      <summary>
            Determines whether the specified URL has a format valid to use as a Host URL.
            </summary>
    </member>
    <member name="T:EPiServer.Web.HostDefinitionType">
      <summary>
            Defines the different types of redirection behavior that can be set on a <see cref="T:EPiServer.Web.HostDefinition" />
            instance.
            </summary>
    </member>
    <member name="T:EPiServer.Web.IAggregatedSimpleAddressResolver">
      <summary>
            An aggregation over all registered instances of <see cref="T:EPiServer.Web.ISimpleAddressResolver" /></summary>
    </member>
    <member name="T:EPiServer.Web.BlobResolveResult">
      <summary>
            Holds the result of resolving a <see cref="P:EPiServer.Web.BlobResolveResult.Blob" /> property from a type.
            </summary>
    </member>
    <member name="P:EPiServer.Web.BlobResolveResult.PropertyName">
      <summary>
            The name of the property where the blob was found
            </summary>
    </member>
    <member name="P:EPiServer.Web.BlobResolveResult.Blob">
      <summary>
            Gets or sets the BLOB.
            </summary>
      <value>
            The BLOB.
            </value>
    </member>
    <member name="P:EPiServer.Web.BlobResolveResult.ImageDescriptor">
      <summary>
            Gets or sets the image descriptor.
            </summary>
      <value>
            The image descriptor.
            </value>
    </member>
    <member name="T:EPiServer.Web.IBlobResolver">
      <summary>
            Used to resolve a <see cref="T:EPiServer.Framework.Blobs.Blob" /> property from a type.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IBlobResolver.ResolveProperty(EPiServer.Core.IContentData,System.String)">
      <summary>
            Resolves a blob property with name <paramref name="propertyName" /> (case insensitive) from <paramref name="content" />.
            </summary>
      <remarks>
            If property is not found on instance null is returned.
            </remarks>
      <param name="content">The content.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.IContentAreaLoader">
      <summary>
            Helper class to load data for content area items
            </summary>
    </member>
    <member name="M:EPiServer.Web.IContentAreaLoader.Get(EPiServer.Core.ContentAreaItem)">
      <summary>
            Gets the <see cref="T:EPiServer.Core.IContent" /> instance that the content area item references.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IContentAreaLoader.LoadDisplayOption(EPiServer.Core.ContentAreaItem)">
      <summary>
            Loads the <see cref="T:EPiServer.Web.DisplayOption" /> associated with the content area item
            </summary>
      <returns>The associated <see cref="T:EPiServer.Web.DisplayOption" /> or null if no option is associated</returns>
    </member>
    <member name="T:EPiServer.Web.IContentResolver">
      <summary>
            Interface used by PermanentLinkMapStore to resolve a content instance from an identity.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IContentResolver.ResolveContent(System.Guid)">
      <summary>
            Tries to resolve a Content from a Guid identifier.
            </summary>
      <param name="contentGuid">The content GUID.</param>
      <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult" /> with the identifiers for the content or null if no content was matched.
            </returns>
    </member>
    <member name="M:EPiServer.Web.IContentResolver.ResolveContent(EPiServer.Core.ContentReference)">
      <summary>
            Tries to resolve a Content from a <see cref="T:EPiServer.Core.ContentReference" />.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.Web.ContentResolveResult" /> with the identifiers for the content or null if no content was matched.
            </returns>
    </member>
    <member name="T:EPiServer.Web.IContentResolverRegistry">
      <summary>
            Component that handles registration of <see cref="T:EPiServer.Web.IContentResolver" /> instances
            </summary>
    </member>
    <member name="P:EPiServer.Web.IContentResolverRegistry.ContentResolvers">
      <summary>
            Returns all registered resolvers
            </summary>
    </member>
    <member name="M:EPiServer.Web.IContentResolverRegistry.AddResolver(EPiServer.Web.IContentResolver)">
      <summary>
            Adds a content resolver to be quieried when resolving content links.
            </summary>
      <param name="contentResolver">The page resolver.</param>
    </member>
    <member name="M:EPiServer.Web.IContentResolverRegistry.RemoveResolver(EPiServer.Web.IContentResolver)">
      <summary>
            Removes a previously registered resolver.
            </summary>
      <param name="contentResolver">The resolver to remove.</param>
    </member>
    <member name="M:EPiServer.Web.IContentResolverRegistry.ClearResolvers">
      <summary>
            Clears the list of content resolvers.
            </summary>
    </member>
    <member name="T:EPiServer.Web.IContextModeResolver">
      <summary>
            Determines the context mode that is currently active
            </summary>
    </member>
    <member name="P:EPiServer.Web.IContextModeResolver.CurrentMode">
      <summary>
            The current context mode
            </summary>
    </member>
    <member name="P:EPiServer.Web.IDisplayResolution.Id">
      <summary>
            Gets the unique id for this resolution
            </summary>
    </member>
    <member name="P:EPiServer.Web.IDisplayResolution.Name">
      <summary>
            Gets the name of resolution.
            </summary>
    </member>
    <member name="P:EPiServer.Web.IDisplayResolution.Width">
      <summary>
            Gets the resolution width in pixels.
            </summary>
    </member>
    <member name="P:EPiServer.Web.IDisplayResolution.Height">
      <summary>
            Gets the resolution height in pixels.
            </summary>
    </member>
    <member name="T:EPiServer.Web.IImageDescriptorPropertyResolver">
      <summary>
            Component that resolves properties with <see cref="T:EPiServer.DataAnnotations.ImageDescriptorAttribute" /></summary>
    </member>
    <member name="M:EPiServer.Web.IImageDescriptorPropertyResolver.Resolve(System.Type)">
      <summary>
            Resolves properties with <see cref="T:EPiServer.DataAnnotations.ImageDescriptorAttribute" /> from specified type
            </summary>
      <param name="type">The type to resolve properties for</param>
      <returns>A list of properties with <see cref="T:EPiServer.DataAnnotations.ImageDescriptorAttribute" /> for a type</returns>
    </member>
    <member name="T:EPiServer.Web.Internal.ApplicationPathResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.BlobResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves a property of type <see cref="T:EPiServer.Framework.Blobs.Blob" /> on an <see cref="T:EPiServer.Core.IContentData" /> instance.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.BlobResolver.ResolveProperty(EPiServer.Core.IContentData,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves a blob property with name <paramref name="propertyName" /> (case insensitive) from <paramref name="content" />.
            </summary>
      <remarks>
            If property is not found on instance null is returned.
            </remarks>
      <param name="content">The content.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.BlobResolver.SetBlob(EPiServer.Framework.Blobs.Blob,EPiServer.Core.IContentData,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the blob property named <paramref name="propertyName" /> on <paramref name="content" /> with value <paramref name="blob" />.
            </summary>
      <remarks>
            If blob property is not found <see cref="T:System.InvalidOperationException" /> is thrown.
            </remarks>
      <param name="blob">The BLOB.</param>
      <param name="content">The content.</param>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.InvalidOperationException">
      </exception>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.DefaultImageDescriptorPropertyResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.DefaultSiteDefinitionRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.DefaultSiteDefinitionResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves which <see cref="T:EPiServer.Web.SiteDefinition" /> to use.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.HostDefinitionExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HostDefinitionExtensions.IsRedirect(EPiServer.Web.HostDefinitionType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HostDefinitionExtensions.Find(System.Collections.Generic.IEnumerable{EPiServer.Web.HostDefinition},System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HostDefinitionExtensions.FirstOfType(System.Collections.Generic.IEnumerable{EPiServer.Web.HostDefinition},EPiServer.Web.HostDefinitionType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.HtmlOptions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Contains settings for how html content should be handled within CMS
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HtmlOptions.UnEncodedTags">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set which tags should not be encoded when string properties are called at <see cref="M:EPiServer.Core.PropertyData.EncodeForWebString(System.String)" /></summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.IBlobAssigner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.IUniqueIdentityCreator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.IUrlSegmentLocator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Component that locates content instances from url segments
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.IUrlSegmentLocator.FindCollidingReference(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines if there is a content sibling with the same url segment
            </summary>
      <param name="contentLink">The content link that owns the url segment</param>
      <param name="parentLink">The parent for the content</param>
      <param name="urlSegment">The url segment to examine</param>
      <param name="language">The language for the content</param>
      <returns>A colliding reference or <see cref="F:EPiServer.Core.ContentReference.EmptyReference" /> if there is no colliding reference</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.UrlSegmentLocatorExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UrlSegmentLocatorExtensions.FindCollidingReference(EPiServer.Web.Internal.IUrlSegmentLocator,EPiServer.Core.IContent,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines if there is a content sibling with the same url segment
            </summary>
      <param name="urlSegmentLocator">The segment locator being extended</param>
      <param name="content">The content owning the url segment</param>
      <param name="urlSegment">The url segment to examine</param>
      <returns>A colliding reference or <see cref="F:EPiServer.Core.ContentReference.EmptyReference" /> if there is no colliding reference</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UrlSegmentLocatorExtensions.ExistOtherContentWithSegment(EPiServer.Web.Internal.IUrlSegmentLocator,EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines if there is a content sibling with the same url segment
            </summary>
      <param name="segmentLocator">The segment locator being extended</param>
      <param name="contentLink">The content link that owns the url segment</param>
      <param name="destinationLink">The parent that specifies which sieblings to examine</param>
      <param name="urlSegment">The url segment to examine</param>
      <param name="language">The language for the content</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.LicensingSiteService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Integrates the site concept into the licensing system
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.LicensingSiteService.GetCurrentSite">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the current site or <c>null</c> if no site is active
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.LicensingSiteService.List">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns a list of all sites
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.PathMatching">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Support for matching file and directory paths against predefined lists.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PathMatching.AddPath(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds the path to the set of paths to match against.
            </summary>
      <param name="path">The path to add.</param>
      <remarks>
        <para>
            If the path starts with a tilde ('~') it will be expanded to contain the actual application root.
            </para>
        <para>
            The path is interpreted as a directory if it ends with a '/'. Adding a path such as "/abc/" will match
            against anything that starts with "/abc/", such as "/abc/def/ghi.html".
            </para>
        <para>
            If the path does not end with a '/' it is interpreted as a file. Adding a file will only match against the 
            exact path added.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PathMatching.IsMatch(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified path matches a previously added path.
            </summary>
      <param name="path">The path.</param>
      <returns>
        <c>true</c> if the specified path is match; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Will check against all added paths, both directories and files. The matching is case-insensitive.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PathMatching.Clear">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears this instance.
            </summary>
      <remarks>
            Will remove all path entries that has been added by calling AddPath.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PathMatching.IsDirectoryMatch(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified path is a directory match.
            </summary>
      <param name="path">The path.</param>
      <returns>
        <c>true</c> if it is a directory match; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The matching is case-insensitive.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PathMatching.IsFileMatch(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified path matches a file.
            </summary>
      <param name="path">The path.</param>
      <returns>
        <c>true</c> if it is a file match; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The matching is case-insensitive.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PathMatching.GetEnumerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns an enumerator that iterates through the collection of URL:s used for path matching.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.PermanentContentLinkMapper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles conversion between permanent links and classic links for content links.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PermanentContentLinkMapper.Instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The global permanent content link mapper instance. This is not intended to be set by external code.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PermanentContentLinkMapper.ContentResolvers">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentContentLinkMapper.AddResolver(EPiServer.Web.IContentResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a content resolver to be quieried when resolving content links.
            </summary>
      <param name="contentResolver">The page resolver.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentContentLinkMapper.RemoveResolver(EPiServer.Web.IContentResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes a previously registered resolver.
            </summary>
      <param name="contentResolver">The resolver to remove.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentContentLinkMapper.ClearResolvers">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the list of content resolvers.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.PermanentLinkBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.PermanentLinkMapper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Uses PermanentLinkMapStore for mapping between url/Guid/PageReference
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PermanentLinkMapper.RemoveFromPLMS">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. ID for the Permanent Link Map Store event "Item removed"
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PermanentLinkMapper.ClearPLMS">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. ID for the Permanent Link Map Store event "Clear store"
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PermanentLinkMapper.Instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The global permanent link mapper instance. This is not intended to be set by external code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapper.Find(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an PermanentLinkMap-derived instance from the provided Guid, if possible.
            </summary>
      <param name="guid">The Guid</param>
      <returns>The mapping object or null</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapper.Find(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds a PermanentLinkMap-derived instance from the specified page reference.
            </summary>
      <param name="contentReference">The page reference.</param>
      <returns>A link map, or null if not found</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapper.Save(EPiServer.Web.PermanentLinkMap)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified PermanentLinkMap to the repository, making it available for lookup.
            </summary>
      <param name="plm">The PermanentLinkMap</param>
      <remarks>
            This method must be called whenever a new mapping is created, or an existing one has some aspect modified
            to save it to the backing store (actually an in-memory cache in this implementation).
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PermanentLinkMapper.CacheCount">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the number of items in the cache.
            </summary>
      <value>The cache count.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapper.ClearCache(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the cache. Optionally this event is broadcasted.
            </summary>
      <param name="raiseEvent">if set to <c>true</c>Raise the event for other clients</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapper.Clear">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the cache.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapper.ClearItemFromCache(System.Guid,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes the item with specified id from cache.
            If raiseEvent is true the cache removal is broadcasted.
            </summary>
      <param name="itemId">The item id.</param>
      <param name="raiseEvent">if set to <c>true</c> [raise event].</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapper.ClearItemFromCache(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes the item with specified id from cache.
            If raiseEvent is true the cache removal is broadcasted.
            </summary>
      <param name="contentLink">The item id.</param>
      <param name="raiseEvent">if set to <c>true</c> [raise event].</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.SimpleAddress">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helps converting simple addresses to internal addresses.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.SimpleAddress.#ctor(EPiServer.IContentRepository,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.IPageQuickSearch},EPiServer.Web.ISiteDefinitionResolver,EPiServer.Web.ISiteDefinitionRepository,EPiServer.Web.IVirtualPathResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.SimpleAddress" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.SimpleAddress.#ctor(EPiServer.IContentRepository,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.IPageQuickSearch},EPiServer.Web.ISiteDefinitionResolver,EPiServer.Web.ISiteDefinitionRepository,EPiServer.Web.IVirtualPathResolver,EPiServer.Core.IContentLanguageAccessor,EPiServer.Core.IContentLanguageSettingsHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.SimpleAddress" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.SimpleAddress.SimpleAddressToInternal(EPiServer.UrlBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts an url from simple address to internal and return an object reference if the convertions was successful.
            </summary>
      <param name="url">The url to change.</param>
      <returns>Null if the url didn't match a simple address otherwise a page reference to the page.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.SimpleAddress.SimpleAddressToInternal(EPiServer.UrlBuilder,System.Object@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts an url from simple address to internal.
            </summary>
      <param name="url">The simple url to convert.</param>
      <param name="internalObject">The object reference to pass back.</param>
      <returns>True if the address was converted.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.SimpleAddress.Resolve(EPiServer.UrlBuilder,EPiServer.Web.SimpleAddressResolveContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.SimpleAddress.TryResolveAsSimpleAddress(EPiServer.UrlBuilder,EPiServer.Web.SimpleAddressResolveContext,System.Object@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to resolve url as a simple address.
            </summary>
      <param name="url">The URL.</param>
      <param name="context">The segment context.</param>
      <param name="internalObject">The internal object.</param>
      <returns>true if url match a simple adress else false</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.SimpleAddressOptions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Contains settings for how simple address matching should be handled within CMS
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.SimpleAddressOptions.RequireLanguageMatch">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Defines if the language must match when resolving a simple address.
            </summary>
      <remarks>The default value is true</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.UIOptions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Contains options for Episerver user interface
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.UIOptions.UtilUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the URL to the Util part of the UI application. It must be a Web URL, and may include scheme and port.
            It must be a Web URL, and include the path to the site root. It is only to be used
            to generate direct references to the site in external locations. For references from a page, use root-relative
            URLs and ResolveUrl etc as appropriate.
            </summary>
      <remarks>
            Default value is '~/Util/'
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.UIOptions.EditUrl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the URL to the edit UI. It must be a Web URL, and may include scheme and port.
            It must be a Web URL, and include the path to the site root. It is only to be used
            to generate direct references to the site in external locations. For references from a page, use root-relative
            URLs and ResolveUrl etc as appropriate.
            </summary>
      <remarks>
            Default value is '~/EPiServer/CMS/'
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.UriTypeHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that handles storage format of <see cref="T:System.Uri" /> towards Dynamic Data Store.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UriTypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Froms the database format.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="targetType">Type of the target.</param>
      <param name="ownerType">Type of the owner.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UriTypeHandler.MapToDatabaseType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the database type.
            </summary>
      <param name="type">The type.</param>
      <returns>The type that is stored in database</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UriTypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the propertyValue in the database format.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="ownerType">Type of the owner.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.UrlEncoder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.PermanentLinkMapStore">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Given an permanent link representation, find an appropriate mapping object instance if possible
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.PermanentLinkMapStore.Counters">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Collection of performance counters
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PermanentLinkMapStore.Counters.GuidHits">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The number of times we hit a Guid in the cache
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PermanentLinkMapStore.Counters.PageReferenceHits">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The number of times we hit a PageReference in the cache
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PermanentLinkMapStore.Counters.MappedUrlHits">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The number of times we hit a MappedUrl in the cache
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PermanentLinkMapStore.Counters.Misses">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The number of total misses
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PermanentLinkMapStore.ChangeInPLMS">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. ID for the Permanent Link Map Store event "Changed exising item"
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PermanentLinkMapStore.RemoveFromPLMS">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. ID for the Permanent Link Map Store event "Item removed"
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PermanentLinkMapStore.ClearPLMS">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. ID for the Permanent Link Map Store event "Clear store"
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapStore.Find(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an PermanentLinkMap-derived instance from the provided Guid, if possible.
            </summary>
      <param name="guid">The Guid</param>
      <returns>The mapping object or null</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapStore.Find(EPiServer.UrlBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds an PermanentLinkMap-derived instance from the provided url, if possible.
            </summary>
      <param name="url">The URL, which may be in permanent link format, or mapped format</param>
      <returns>The mapping object or null</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapStore.Find(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds a PermanentLinkMap-derived instance from the specified page reference.
            </summary>
      <param name="contentReference">The content reference.</param>
      <returns>A link map, or null if not found</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapStore.Save(EPiServer.Web.PermanentContentLinkMap)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Saves the specified PermanentLinkMap to the repository, making it available for lookup.
            </summary>
      <param name="plm">The PermanentLinkMap</param>
      <remarks>
            This method must be called whenever a new mapping is created, or an existing one has some aspect modified
            to save it to the backing store (actually an in-memory cache in this implementation).
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapStore.ToPermanent(EPiServer.UrlBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts the provided URL to the permanent link representation, if possible.
            </summary>
      <param name="url">The URL. It may be permanent or mapped to begin with.</param>
      <returns>true if a permanent link representation is provided after the call</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapStore.TryToPermanent(System.String,System.String@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts the provided URL to the permanent link representation, if possible.
            </summary>
      <param name="url">The URL. It may be permanent or mapped to begin with.</param>
      <param name="permanentUrl">The resulting permanent link URL, if the conversion was possible (or unnecessary)</param>
      <returns>true if a permanent link representation is provided after the call.</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PermanentLinkMapStore.PerformanceCounters">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the collection of performance counters
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PermanentLinkMapStore.CacheCount">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the number of items in the cache.
            </summary>
      <value>The cache count.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapStore.RemovePageFromCache(EPiServer.Core.PageReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes link information about the page from link store cache.
            </summary>
      <param name="pageLink">The page link.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapStore.ClearCache(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the cache. Optionally this event is broadcasted.
            </summary>
      <param name="raiseEvent">if set to <c>true</c>Raise the event for other clients</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapStore.Clear">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the cache.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PermanentLinkMapStore.ClearItemFromCache(System.Guid,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes the item with specified id from cache.
            If raiseEvent is true the cache removal is broadcasted.
            </summary>
      <param name="itemId">The item id.</param>
      <param name="raiseEvent">if set to <c>true</c> [raise event].</param>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.PropertyName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name of the attribute that indicates what property that the html is connected to.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.ContentName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name of the content inside property
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.EditContainerCssClass">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default CSS class for property edit container that is used to indicate property data rendering in on-page-editing mode.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.FullRefreshPropertyNames">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name of the attribute that indicates which properties require a full refresh of the page to render a correct preview.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.PropertyRenderSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Prefix of the attribute that indicates any custom render setting for the property.
            The format on the client is 'data-epi-property-customsetting' where the value will be JSON notation.
            CustomSettings dictionary on e.g. EPiServer.Web.WebControls.Property
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.PropertyEditorSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will be used to display any custom editor settings as a JSON formatted string.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.PropertyOverlaySettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will be used to display any custom overlay settings as a JSON formatted string.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.BlockId">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will be used to display the id of a block in edit mode.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.BlockInfo">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will be used to display additional info of a block in edit mode.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.BlockPersonalization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will be used to configure personalization of blocks
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.ShellQueryString.EditMode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name on the query parameter indicating if the request is in edit mode.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.ShellQueryString.Channel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name on the query parameter propagating the channel parameter in edit mode
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.ShellQueryString.Projects">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name on the query parameter propagating the projects parameter in edit mode
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.IPermanentLinkMapper">
      <summary>
            Specifies methods for mapping between url/Guid/ContentReference
            </summary>
    </member>
    <member name="M:EPiServer.Web.IPermanentLinkMapper.Find(System.Guid)">
      <summary>
            Finds a PemanentLinkMap for a given Guid
            </summary>
      <param name="guid">The GUID.</param>
      <returns>A PermanentLinkMap if exist, else null is returned</returns>
    </member>
    <member name="M:EPiServer.Web.IPermanentLinkMapper.Find(EPiServer.Core.ContentReference)">
      <summary>
            Finds a PermanentContentLinkMap for a given ContentReference
            </summary>
      <param name="contentReference">The content reference.</param>
      <returns>
            A PermanentContentLinkMap if exist, else null is returned
            </returns>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkMapperExtensions.Find(EPiServer.Web.IPermanentLinkMapper,EPiServer.UrlBuilder)">
      <summary>
            Finds a PemanentLinkMap for a given permanent url
            </summary>
      <param name="permanentLink">The URL.</param>
      <param name="permanentLinkMapper">The permanent link mapper that is extended</param>
      <returns>
            A PermanentLinkMap if exist, else null is returned
            </returns>
    </member>
    <member name="P:EPiServer.Web.IRenderSettings.RenderSettings">
      <summary>
            Dictionary of key values that can be used to customize the rendering of the property.
            These settings will also be passed to the property editor.
            </summary>
    </member>
    <member name="T:EPiServer.Web.IRequestHostResolver">
      <summary>
            Signature for a component that can resolve host from a request.
            </summary>
    </member>
    <member name="P:EPiServer.Web.IRequestHostResolver.HostName">
      <summary>
            Gets current host name for a http request or null if no call is not made within a http request.
            </summary>
      <remarks>Include port if set</remarks>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.ISimpleAddressResolver">
      <summary>
            Used to resolve a Url interpreted as a simple address.
            </summary>
    </member>
    <member name="M:EPiServer.Web.ISimpleAddressResolver.Resolve(EPiServer.UrlBuilder,EPiServer.Web.SimpleAddressResolveContext)">
      <summary>
            Tries to resolve a <see cref="T:EPiServer.Core.IContent" /> instance from an URL interpreted as a simple address. 
            </summary>
      <param name="url">The url to resolve</param>
      <param name="simpleAddressContext">The current context</param>
      <returns>A resolved result if url could be resolved as a simple address for a content instance otherwise null</returns>
    </member>
    <member name="T:EPiServer.Web.ISiteDefinitionEvents">
      <summary>
            Service that will raise events when a <see cref="T:EPiServer.Web.SiteDefinition" /> is changed.
            </summary>
    </member>
    <member name="E:EPiServer.Web.ISiteDefinitionEvents.SiteCreated">
      <summary>
            Occurs when a new <see cref="T:EPiServer.Web.SiteDefinition" /> instance is created.
            </summary>
    </member>
    <member name="E:EPiServer.Web.ISiteDefinitionEvents.SiteUpdated">
      <summary>
            Occurs when an existing <see cref="T:EPiServer.Web.SiteDefinition" /> instance is updated.
            </summary>
    </member>
    <member name="E:EPiServer.Web.ISiteDefinitionEvents.SiteDeleted">
      <summary>
            Occurs when an existing <see cref="T:EPiServer.Web.SiteDefinition" /> instance is deleted.
            </summary>
    </member>
    <member name="T:EPiServer.Web.ISiteDefinitionRepository">
      <summary>
            The repository that handles loading and persisting of sites, see <see cref="T:EPiServer.Web.SiteDefinition" />.
            </summary>
    </member>
    <member name="E:EPiServer.Web.ISiteDefinitionRepository.SiteDefinitionChanged">
      <summary>
            Occurs when some <see cref="T:EPiServer.Web.SiteDefinition" /> was changed or deleted.
            </summary>
    </member>
    <member name="M:EPiServer.Web.ISiteDefinitionRepository.Get(System.Guid)">
      <summary>
            Gets the <see cref="T:EPiServer.Web.SiteDefinition" /> with specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>The site definition with specified id</returns>
    </member>
    <member name="M:EPiServer.Web.ISiteDefinitionRepository.Delete(System.Guid)">
      <summary>
            Deletes the <see cref="T:EPiServer.Web.SiteDefinition" /> with specified id.
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:EPiServer.Web.ISiteDefinitionRepository.List">
      <summary>
            Lists all defined <see cref="T:EPiServer.Web.SiteDefinition" />.
            </summary>
      <returns>All registered sites</returns>
    </member>
    <member name="M:EPiServer.Web.ISiteDefinitionRepository.Save(EPiServer.Web.SiteDefinition)">
      <summary>
            Saves the specified site definition.
            </summary>
      <param name="siteDefinition">The site definition.</param>
    </member>
    <member name="T:EPiServer.Web.SiteDefinitionRepositoryExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Web.ISiteDefinitionRepository" /> with convenient methods
            </summary>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionRepositoryExtensions.Get(EPiServer.Web.ISiteDefinitionRepository,System.String)">
      <summary>
            Gets the <see cref="T:EPiServer.Web.SiteDefinition" /> with specified name.
            </summary>
      <param name="siteDefinitionRepository">The extended site definition repository</param>
      <param name="name">The name.</param>
      <returns>The site definition with specified name</returns>
    </member>
    <member name="T:EPiServer.Web.ISiteDefinitionResolver">
      <summary>
            Component that resolves which <see cref="T:EPiServer.Web.SiteDefinition" /> that matches
            </summary>
    </member>
    <member name="M:EPiServer.Web.ISiteDefinitionResolver.GetByHostname(System.String,System.Boolean,EPiServer.Web.HostDefinition@)">
      <summary>
            Gets the <see cref="T:EPiServer.Web.SiteDefinition" /> that has a host that matches specified hostname.
            </summary>
      <param name="hostname">Name of the host.</param>
      <param name="fallbackToWildcard">if set to <c>true</c> then site matched with wildcard (if any) is returned</param>
      <param name="matchedHost">The <see cref="T:EPiServer.Web.HostDefinition" /> on the site definition that matched the provided host name.</param>
      <returns>The <see cref="T:EPiServer.Web.SiteDefinition" /> that matches host or null if no matches</returns>
    </member>
    <member name="M:EPiServer.Web.ISiteDefinitionResolver.GetByContent(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Gets the <see cref="T:EPiServer.Web.SiteDefinition" /> for a content reference.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="fallbackToWildcard">if set to <c>true</c> and if content link is not under any site, use SiteDefinition mapped with Wildcard.</param>
      <returns>
            A <see cref="T:SiteDefinition" /> instance for the site that <paramref name="contentLink" /> belongs to or null if no site could be matched.
            </returns>
      <remarks>
        <para>
            This is done by
            traversing the page tree upwards from current link until a Page that matches a StartPage for a registered <see cref="T:EPiServer.Web.SiteDefinition" />.
              </para>
        <para>
            If the <paramref name="contentLink" /> is not located beneath a start page, the search will fall back to the <see cref="T:EPiServer.Web.SiteDefinition" /> instance
            for the site mapped with * as host <paramref name="fallbackToWildcard" /> is set to True. 
              </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Web.SiteDefinitionResolverExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Web.ISiteDefinitionResolver" /> with convenient methods
            </summary>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionResolverExtensions.GetByHostname(EPiServer.Web.ISiteDefinitionResolver,System.String,System.Boolean)">
      <summary>
            Gets the <see cref="T:EPiServer.Web.SiteDefinition" /> that has a host that matches specified hostname.
            </summary>
      <param name="siteDefinitionResolver">The site definition resolver that is being extended</param>
      <param name="hostname">Name of the host.</param>
      <param name="fallbackToWildcard">if set to <c>true</c> then site matched with wildcard (if any) is returned</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionResolverExtensions.GetByContent(EPiServer.Web.ISiteDefinitionResolver,EPiServer.Core.ContentReference,System.Boolean,System.Boolean)">
      <summary>
            Gets the <see cref="T:EPiServer.Web.SiteDefinition" /> for a content reference.
            </summary>
      <param name="siteDefinitionResolver">The site definition resolver that is being extended</param>
      <param name="contentLink">The content link.</param>
      <param name="fallbackToWildcard">if set to <c>true</c> and if content link is not under any site, use SiteDefinition mapped with Wildcard.</param>
      <param name="fallbackToEmpty">if set to <c>true</c> and if content link is not under any site, and not fallback to Wildcard
            use system default (StartPage and SiteUrl is not defined).</param>
      <returns>
            A <see cref="T:SiteDefinition" /> instance for the site that <paramref name="contentLink" /> belongs to.
            </returns>
      <remarks>
        <para>
            This is done by
            traversing the page tree upwards from current link until a Page that matches a StartPage for a registered <see cref="T:EPiServer.Web.SiteDefinition" />.
              </para>
        <para>
            If the <paramref name="contentLink" /> is not located beneath a start page, the search will fall back to the <see cref="T:EPiServer.Web.SiteDefinition" /> instance
            for the site mapped with * as host <paramref name="fallbackToWildcard" /> is set to True. If the <paramref name="contentLink" /> is not located beneath a start page,
            and if not fallen back to wildcard and <paramref name="fallbackToEmpty" /> is set to true then the system default setting will be returned which
            has for example RootPage set but not site specific settings like StartPage and SiteUrl.
              </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Web.IUrlSegmentCreator">
      <summary>
            Component that generates url segments for <see cref="T:EPiServer.Core.IContent" /> instances
            </summary>
    </member>
    <member name="E:EPiServer.Web.IUrlSegmentCreator.Creating">
      <summary>
            Raised when a url segment is to be created. An event handler can assign url segment
            </summary>
    </member>
    <member name="E:EPiServer.Web.IUrlSegmentCreator.Created">
      <summary>
            Raised when a url segment has been created. An event handler can change url segment
            </summary>
    </member>
    <member name="M:EPiServer.Web.IUrlSegmentCreator.Create(EPiServer.Core.IContent,EPiServer.Web.UrlSegmentOptions)">
      <summary>
            Creates a url segment for a content instance. 
            </summary>
      <remarks>
        <para>
            The generated url segment is unique among the sieblings for the content
            </para>
        <para>
          <see cref="P:EPiServer.Web.UrlSegmentOptions.ValidCharacters" /> specifies which characthers that are considered valid. 
            <see cref="P:EPiServer.Web.UrlSegmentOptions.CharacterMap" /> specifies which character replacements.
            </para>
      </remarks>
      <param name="content">The content instance to generate url segment for</param>
      <param name="urlSegmentOptions">The options used to generate the url segment</param>
      <returns>The generated url segment</returns>
    </member>
    <member name="T:EPiServer.Web.UrlSegmentCreatorExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Web.IUrlSegmentCreator" /> with convenient methods.
            </summary>
    </member>
    <member name="M:EPiServer.Web.UrlSegmentCreatorExtensions.Create(EPiServer.Web.IUrlSegmentCreator,EPiServer.Core.IContent)">
      <summary>
            Creates a url segment for a content instance. 
            </summary>
      <remarks>
        <para>
            The generated url segment is unique among the sieblings for the content
            </para>
        <para>
            The default registered instance of <see cref="T:EPiServer.Web.UrlSegmentOptions" /> is used where 
            <see cref="P:EPiServer.Web.UrlSegmentOptions.ValidCharacters" /> specifies which characthers that are considered valid. 
            <see cref="P:EPiServer.Web.UrlSegmentOptions.CharacterMap" /> specifies which character replacements.
            </para>
      </remarks>
      <param name="urlSegmentCreator">The url segment creator that is extended</param>
      <param name="content">The content instance to generate url segment for</param>
      <returns>The generated url segment</returns>
    </member>
    <member name="T:EPiServer.Web.IUrlSegmentGenerator">
      <summary>
            Component that generates url segments for strings
            </summary>
    </member>
    <member name="M:EPiServer.Web.IUrlSegmentGenerator.Create(System.String,EPiServer.Web.UrlSegmentOptions)">
      <summary>
            Creates a url friendly segment from the passed in string
            </summary>
      <remarks>
        <see cref="P:EPiServer.Web.UrlSegmentOptions.ValidCharacters" /> specifies which characthers that are considered valid. 
            <see cref="P:EPiServer.Web.UrlSegmentOptions.CharacterMap" /> specifies which character replacements.
            If <paramref name="options" /> is null is options retrieved from IOC container.
            </remarks>
      <param name="proposedSegment">The segment to generate a url friendly segment for</param>
      <param name="options">The options used to generate the url segment</param>
      <returns>A url friendly segment</returns>
    </member>
    <member name="M:EPiServer.Web.IUrlSegmentGenerator.IsValid(System.String,EPiServer.Web.UrlSegmentOptions)">
      <summary>
            Determines if an url segment is considered url friendly
            </summary>
      <remarks>
        <see cref="P:EPiServer.Web.UrlSegmentOptions.ValidCharacters" /> specifies which characthers that are considered valid.
            If <paramref name="options" /> is null is options retrieved from IOC container.
            </remarks>
      <param name="segment">The segment to validate</param>
      <param name="options">The options used to validate the url segment</param>
      <returns>true if segment is considered valid else false</returns>
    </member>
    <member name="T:EPiServer.Web.UrlSegmentGeneratorExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Web.IUrlSegmentGenerator" /> with convenient methods.
            </summary>
    </member>
    <member name="M:EPiServer.Web.UrlSegmentGeneratorExtensions.Create(EPiServer.Web.IUrlSegmentGenerator,System.String)">
      <summary>
            Creates a url friendly segment from the passed in string
            </summary>
      <remarks>The default registered instance of <see cref="T:EPiServer.Web.UrlSegmentOptions" /> is used where 
            <see cref="P:EPiServer.Web.UrlSegmentOptions.ValidCharacters" /> specifies which characthers that are considered valid. 
            <see cref="P:EPiServer.Web.UrlSegmentOptions.CharacterMap" /> specifies which character replacements.
            </remarks>
      <param name="urlSegmentGenerator">The url segment generator that is extended</param>
      <param name="proposedSegment">The segment to generate a url friendly segment for</param>
      <returns>A url friendly segment</returns>
    </member>
    <member name="M:EPiServer.Web.UrlSegmentGeneratorExtensions.IsValid(EPiServer.Web.IUrlSegmentGenerator,System.String)">
      <summary>
            Determines if an url segment is considered url friendly
            </summary>
      <remarks>The default registered instance of <see cref="T:EPiServer.Web.UrlSegmentOptions" /> is used where
            <see cref="P:EPiServer.Web.UrlSegmentOptions.ValidCharacters" /> specifies which characthers that are considered valid.
            </remarks>
      <param name="segment">The segment to validate</param>
      <param name="urlSegmentGenerator">The url segment generator that is extended</param>
      <returns>true if segment is considered valid else false</returns>
    </member>
    <member name="T:EPiServer.Web.PermanentLinkMap">
      <summary>
            A class that provides mapping between a System.Guid <see cref="T:EPiServer.Core.ContentReference" /></summary>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkMap.#ctor(System.Guid,EPiServer.Core.ContentReference)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Web.PermanentLinkMap" /></summary>
    </member>
    <member name="P:EPiServer.Web.PermanentLinkMap.Guid">
      <summary>
            Gets or sets the GUID.
            </summary>
      <value>The GUID.</value>
    </member>
    <member name="P:EPiServer.Web.PermanentLinkMap.ContentReference">
      <summary>
            Gets or sets the content reference.
            </summary>
      <value>The page reference.</value>
    </member>
    <member name="P:EPiServer.Web.PermanentLinkMap.PermanentLinkUrl">
      <summary>
            Gets or sets the permanent link URL.
            </summary>
      <value>The permanent link URL. It is always relative.</value>
    </member>
    <member name="P:EPiServer.Web.PermanentLinkMap.MappedUrl">
      <summary>
            Gets or sets the mapped URL.
            </summary>
      <value>The mapped URL.</value>
      <remarks>
            The path is encoded in this representation. To use as a virtual path, decode with Uri.UnescapeDataString.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.PermanentLinkMap.HasMappedUrl">
      <summary>
            Gets a value indicating whether this instance has mapped URL.
            </summary>
      <value>
        <c>true</c> if this instance has mapped URL; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.PermanentLinkMap.IsMapped">
      <summary>
            Gets a value indicating whether this instance is successfully mapped.
            </summary>
      <value>
        <c>true</c> if this instance is mapped; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.PermanentLinkMap.HasPermanentLinkUrl">
      <summary>
            Gets a value indicating whether this instance has permanent link URL.
            </summary>
      <value>
        <c>true</c> if this instance has permanent link URL; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.PermanentLinkMap.Extension">
      <summary>
            Gets or sets the extension.
            </summary>
      <value>The extension.</value>
      <remarks>
            The extension is needed as an accessory to get appropriate mapping for IIS etc for the URL
            </remarks>
    </member>
    <member name="T:EPiServer.Web.PermanentLinkUtility">
      <summary>
            Utility functions for the permanent link functionality
            </summary>
    </member>
    <member name="P:EPiServer.Web.PermanentLinkUtility.RootRelativePermanentDirectory">
      <summary>
            Gets the root relative permanent directory. This is a marker directory to identify permanent links.
            </summary>
      <value>The root relative permanent directory.</value>
      <remarks>
            Access is restricted to 'internal', since this representation should not be used publically
            </remarks>
    </member>
    <member name="P:EPiServer.Web.PermanentLinkUtility.ApplicationRelativePermanentDirectory">
      <summary>
            Gets the application relative permanent directory, always ~/link/.
            </summary>
      <value>The Guid link application relative link.</value>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.IsMappableUrl(EPiServer.UrlBuilder)">
      <summary>
            Determines whether the specified URL is a mappable URL.
            </summary>
      <param name="url">The URL.</param>
      <returns>
        <c>true</c> if the specified URL is a mappable URL; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The concept "mappable URL" is a URL that directly references an ASPX-page and is part of the local site.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.GetPermanentLinkVirtualPath(System.Guid,System.String)">
      <summary>
            Gets a permanent link virtual path representation by building it. No lookup is performed.
            </summary>
      <param name="guid">The GUID.</param>
      <param name="extension">The extension.</param>
      <returns>The permanent link virtual path representing this Guid and extension</returns>
      <remarks>
            The instances returned should be treated as opaque units. Do not parse or interpret the contents.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.GetPermanentLinkUrl(System.Guid,System.String)">
      <summary>
            Gets a permanent link URL representation by building it. No lookup is performed.
            </summary>
      <param name="guid">The GUID.</param>
      <param name="extension">The extension.</param>
      <returns>The permanent link Url representing this Guid and extension</returns>
      <remarks>
            The instances returned should be treated as opaque units. Do not parse or interpret the contents.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.GetContent(System.String)">
      <summary>
            Gets the content from the given href value.
            </summary>
      <param name="hrefValue">The href value.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.GetContentReference(EPiServer.UrlBuilder)">
      <summary>
            Gets the content reference for the mappedUrl.
            </summary>
      <param name="mappedUrl">The mapped URL.</param>
      <returns>ContentReference for the content. ContentReference.EmptyReference if it was not mapped to a content</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.FindContentReference(System.Guid)">
      <summary>
            Tries to find a content reference given a Guid.
            </summary>
      <param name="guid">The GUID.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.FindContentReference(System.Guid,EPiServer.Web.IPermanentLinkMapper)">
      <summary>
            Tries to find a content reference given a Guid.
            </summary>
      <param name="guid">The GUID.</param>
      <param name="permanentLinkMapper">The permanent link mapper.</param>
      <returns>Reference to content, or null if not found</returns>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.FindGuid(EPiServer.Core.ContentReference)">
      <summary>
            Tries to find a GUID given a page reference
            </summary>
      <param name="contentLink">The page reference.</param>
      <returns>A valid link map, or null if not found</returns>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.FindGuid(EPiServer.Core.ContentReference,EPiServer.Web.IPermanentLinkMapper)">
      <summary>
            Tries to find a GUID given a page reference
            </summary>
      <param name="contentLink">The page reference.</param>
      <param name="permanentLinkMapper">The permanent link mapper.</param>
      <returns>A valid link map, or null if not found</returns>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.ChangeGuid(System.String,System.Guid)">
      <summary>
            Changes the Guid in a permanent link Url
            </summary>
      <param name="url">The URL.</param>
      <param name="guid">The GUID.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.GetGuid(EPiServer.UrlBuilder,System.String@)">
      <summary>
            Gets the GUID from a permanent link.
            </summary>
      <param name="url">The permanent link, must be an absolute Uri, a root-relative Uri or an app-relative Uri</param>
      <param name="extension">The extension from the permanent link</param>
      <returns>
      </returns>
      <remarks>
            The only method to produce a corrent permanent link is via the method GetPermanentLinkUrl()
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.GetGuid(System.String)">
      <summary>
            Gets the GUID from an permanent link that may be expressed as virtualPath, a root-relative Url,
            an app-relative Url or as an absolulte Url.
            </summary>
      <param name="virtualPathOrUrl">The virtual path or URL.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.GetGuid(EPiServer.Url)">
      <summary>
            Gets the GUID part from a permanent link
            </summary>
      <param name="url">The URL.</param>
      <returns>The Guid from the link or Guid.Empty if it was no proper permanent link</returns>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.GetGuid(EPiServer.Url,System.String@)">
      <summary>
            Gets the GUID part from a permanent link
            </summary>
      <param name="url">The URL.</param>
      <param name="extension">The extension.</param>
      <returns>
            The Guid from the link or Guid.Empty if it was no proper permanent link
            </returns>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.GetGuid(System.String,System.String@)">
      <summary>
            Gets the GUID part from a permanent link
            </summary>
      <param name="virtualPathOrUrl">The virtual path or URL.</param>
      <param name="extension">The extension.</param>
      <returns>
            The Guid from the link or Guid.Empty if it was no proper permanent link
            </returns>
    </member>
    <member name="M:EPiServer.Web.PermanentLinkUtility.TryParseGuid(System.String,System.Guid@)">
      <summary>
            Tries to get the get Guid from a string.
            </summary>
      <param name="g">The Guid string.</param>
      <param name="guid">The Guid, or Guid.Empty if it was not possible to get a Guid.</param>
      <returns>true if a valid guid was detected.</returns>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.FileSortOrder">
      <summary>
            A list of possible sort orders for files.
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.None">
      <summary>
            None sort order
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.Name">
      <summary>
            Sort on name
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.DateCreated">
      <summary>
            Sort on created date
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.DateLastAccessed">
      <summary>
            Sort on last accessed date
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.DateLastModified">
      <summary>
            Sort on last modified date
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.Type">
      <summary>
            Sort on file type
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.Size">
      <summary>
            Sort on file size
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.NameDesc">
      <summary>
            Sort on description of name
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.DateCreatedDesc">
      <summary>
            Sort on description of created date
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.DateLastAccessedDesc">
      <summary>
            Sort on description for last accessed date
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.DateLastModifiedDesc">
      <summary>
            Sort on description for last modified date
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.TypeDesc">
      <summary>
            Sort on description for file type
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.FileSortOrder.SizeDesc">
      <summary>
            Sort on description for size
            </summary>
    </member>
    <member name="T:EPiServer.Web.PropertyResolver">
      <summary>
            Component that locates a <see cref="T:EPiServer.Core.PropertyData" /> (possibly nested) in a <see cref="T:EPiServer.Core.PropertyDataCollection" />.
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyResolver.DefaultScopeNameSeparator">
      <summary>
            The character '.'
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyResolver.ResolveProperty(EPiServer.Core.PropertyDataCollection,System.String)">
      <summary>
            Resolves the <see cref="T:EPiServer.Core.PropertyData" /> using the <see cref="F:EPiServer.Web.PropertyResolver.DefaultScopeNameSeparator" />.
            </summary>
      <param name="properties">The properties.</param>
      <param name="scopeName">Name of the scope.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.PropertyResolver.ResolveProperty(EPiServer.Core.PropertyDataCollection,System.String,System.Char)">
      <summary>
            Resolves the <see cref="T:EPiServer.Core.PropertyData" /> with given scopeName (e.g. in format 'MyBlock.MyNestedBlock').
            </summary>
      <param name="properties">The properties.</param>
      <param name="scopeName">Name of the scope.</param>
      <param name="scopeNameSeparator">The scope name separator (in example above '.').</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.PropertyResolver.ResolveProperty``1(EPiServer.Core.PropertyDataCollection,System.String)">
      <summary>
            Resolves the <see cref="T:EPiServer.Core.PropertyData" /> with given scopeName (e.g. in format 'MyBlock.MyNestedBlock')
            using the default name separator.
            </summary>
      <param name="properties">The properties.</param>
      <param name="scopeName">Name of the scope.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.PropertyResolver.ResolveProperty``1(EPiServer.Core.PropertyDataCollection,System.String,System.Char)">
      <summary>
            Resolves the <see cref="T:EPiServer.Core.PropertyData" /> with given scopeName (e.g. in format 'MyBlock.MyNestedBlock').
            </summary>
      <typeparam name="TPropertyData">The type of the property data that should be returned.</typeparam>
      <param name="properties">The properties.</param>
      <param name="scopeName">Name of the scope.</param>
      <param name="scopeNameSeparator">The scope name separator (in example above '.').</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.AncestorLoaderRule">
      <summary>
            Specifies how ancestors are loaded.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.AncestorLoaderRule.Strict">
      <summary>
            Will strictly follow the structure regardless of for example <see cref="T:EPiServer.Core.ContentAssetFolder" />.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.AncestorLoaderRule.ContentAssetAware">
      <summary>
            Will when it gets to a <see cref="T:EPiServer.Core.ContentAssetFolder" /> continue with the owning <see cref="T:EPiServer.Core.IContent" /></summary>
    </member>
    <member name="T:EPiServer.Web.Routing.AncestorReferencesLoader">
      <summary>
            Loads ancestor references for a content. The result is cached so any
            subsequent call to method on same request will get cached result.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.AncestorReferencesLoader.#ctor(EPiServer.IContentLoader,EPiServer.Core.IContentEvents,EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.AncestorReferencesLoader" /> class.
            </summary>
      <param name="contentLoader">The content loader.</param>
      <param name="contentEvents">The content events.</param>
      <param name="cache">The cache.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.AncestorReferencesLoader.GetAncestors(EPiServer.Core.ContentReference)">
      <summary>
            Gets the ancestors for a content.The result is cached so any
            subsequent call to method will get cached result.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.AncestorReferencesLoader.GetAncestors(EPiServer.Core.ContentReference,EPiServer.Web.Routing.AncestorLoaderRule)">
      <summary>
            Gets the ancestors for a content.The result is cached so any
            subsequent call to method will get cached result.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="rule">The rule that specifies how to retrieve parents</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.UrlResolverArguments">
      <summary>
            Used as argument in for example <see cref="M:EPiServer.Web.Routing.IUrlResolver.GetUrl(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.UrlResolverArguments)" /> to create an outgoing url.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.UrlResolverArguments.ContextMode">
      <summary>
             Gets or sets the mode for the links.
             </summary>
      <remarks>If not explicitly set it will use current <see cref="P:EPiServer.Web.Routing.UrlResolverArguments.ContextMode" /></remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.UrlResolverArguments.RouteValues">
      <summary>
             Gets or sets the route values.
             </summary>
      <remarks>If not explicitly a new instance  will be created.</remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.UrlResolverArguments.ForceCanonical">
      <summary>
            Gets or sets a value indicating whether the canonical URL should be returned if there are multiple hostnames
            defined for the site.
            </summary>
      <remarks>
        <para>
                If not set explicitly, the hostname of the resolved URL will be dependent on the current context.
                If the resolved content is on a different site than the current, the canonical URL will always be returned.
                If the content is on the same site, the canonical URL will only be returned if the current hostname is set
                to be redirected.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Web.Routing.IUrlResolver">
      <summary>
            Component that routes an url to the corresponding <see cref="T:EPiServer.Core.IContent" /> instance or vice versa.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.IUrlResolver.Route(EPiServer.UrlBuilder,EPiServer.Web.ContextMode)">
      <summary>
            Routes the URL to the corresponding <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <param name="urlBuilder">The URL builder.</param>
      <param name="contextMode">The ContextMode</param>
    </member>
    <member name="M:EPiServer.Web.Routing.IUrlResolver.GetUrl(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.UrlResolverArguments)">
      <summary>
            Gets the URL for a <see cref="T:EPiServer.Core.IContent" /> instance that is given by argument <paramref name="urlResolverArguments" />.
            </summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="contentLink" /> is on current site
            and current request matches host that matches content and language. 
            </para>
      </remarks>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
      <param name="urlResolverArguments">The arguments used at url resolving</param>
      <returns>A string representing the URL or <c>null</c> if it was not possible to create a route to the content</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.IUrlResolver.GetUrl(EPiServer.UrlBuilder,EPiServer.Web.Routing.UrlResolverArguments)">
      <summary>
            Resolves the URL for an item from an URL with internal format.
            </summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="urlBuilderWithInternalUrl" /> is on current site
            and current request matches host that matches content and language.
            </para>
      </remarks>
      <param name="urlBuilderWithInternalUrl">The URL with a internal format.</param>
      <param name="arguments">The <see cref="T:EPiServer.Web.Routing.UrlResolverArguments" /> that determines the format of the link.</param>
      <returns>
            A URL in string representation.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.IUrlResolver.TryToPermanent(System.String,System.String@)">
      <summary>
            Tries to convert a URL with either a public, preview or permanent format to a permanent URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="permanentUrl">The permanent URL.</param>
      <returns>True if the conversion succeded, otherwise; false.</returns>
    </member>
    <member name="T:EPiServer.Web.Routing.RoutingConstants">
      <summary>
            String constants used by the routing system in EPiServer.Web.Routing namespace.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.ParentActionViewContext">
      <summary>
            Key used to distinguish parent context
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.SimpleAddressKey">
      <summary>
            Key used to distinguish simple address
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.SimpleAddressLanguageKey">
      <summary>
            Key used to distinguish simple address language
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.ContextModeKey">
      <summary>
            Key used to distinguish current context mode
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.PartialKey">
      <summary>
            Key used to distinguish a partial context
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.IgnorePartialRoutingKey">
      <summary>
            Key used to distinguish ignorance of partial routing
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.DefaultLanguageKey">
      <summary>
            Key used to distinguish default language
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.GuidKey">
      <summary>
            Key used to distinguish a guid key
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.NodeEditKey">
      <summary>
            Key used to distinguish an edit node
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.MediaNodeEditKey">
      <summary>
            Key used to distinguish an edit node for media
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.CurrentContentKey">
      <summary>
            Key used to distinguish the current content for partial requests
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.HostKey">
      <summary>
            Key that can be set during construction of outgoing urls to set host for absoulte paths.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.CmsControllerKey">
      <summary>
            Key that can be set when linking to another cms based controller.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.LanguageKey">
      <summary>
            Key used in routing to specify the language for the request.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.RoutedDataKey">
      <summary>
            Key in RequestContext.RouteData that gets the routed data if it has been routed.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.NodeKey">
      <summary>
            Key in RequestContext.RouteData that gets structure node if set
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.OriginalNodeKey">
      <summary>
            Key in RequestContext.RouteData that gets node which has been replace by partial segment
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.ActionKey">
      <summary>
             Key in RequestContext.RouteData that gets action name if set
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.ControllerKey">
      <summary>
             Key in RequestContext.RouteData that gets controller name if set
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.ControllerTypeKey">
      <summary>
            Key in RequestContext.RouteData that gets controller type if set
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.HandledRouteDataKey">
      <summary>
             Key in Context.Items that gets the RouteData if the context has been handled by page route
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.LanguageQueryParameter">
      <summary>
            query parameter in internal links to determine language, written as 'epslanguage'
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.RemainingPathParameter">
      <summary>
            query parameter in internal links to determine remaining path (like action and parameter), written as 'epsremainingpath'
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.ForceCanonicalKey">
      <summary>
            Key in RequestContext.RouteData that can be set during construction of outgoing urls to force the use of canonical host URLs.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.RootPath">
      <summary>
            Key in RequestContext.RouteData that gets the root path of the routed virtual path. This can be relative or absolute.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RoutingConstants.DownloadSegment">
      <summary>
            The default segmnent used for download of media
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.RoutingConstants.RoutedQueryParameters">
      <summary>
            Contains a list of query parameters that are passed on to routing.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.UrlResolverExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Web.Routing.IUrlResolver" /> with convenient methods
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolverExtensions.Route(EPiServer.Web.Routing.IUrlResolver,EPiServer.UrlBuilder)">
      <summary>
            Routes the URL to the corresponding <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <param name="urlResolver">The url resolver that is extended</param>
      <param name="urlBuilder">The URL builder.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolverExtensions.GetUrl(EPiServer.Web.Routing.IUrlResolver,EPiServer.Core.ContentReference)">
      <summary>
            Gets the URL for a <see cref="T:EPiServer.Core.IContent" /> instance that is given by reference <paramref name="contentLink" />.
            </summary>
      <remarks>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="contentLink" /> is on current site
            and current request matches host that matches content and language. 
            </remarks>
      <param name="contentLink">The content link.</param>
      <param name="urlResolver">The url resolver that is extended</param>
      <returns>A string representing the URL or <c>null</c> if it was not possible to create a route to the content</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolverExtensions.GetUrl(EPiServer.Web.Routing.IUrlResolver,EPiServer.Core.ContentReference,System.String)">
      <summary>
            Gets the URL for a <see cref="T:EPiServer.Core.IContent" /> instance that is given by reference <paramref name="contentLink" /></summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="contentLink" /> is on current site
            and current request matches host that matches content and language. 
            </para>
      </remarks>
      <param name="contentLink">The content.</param>
      <param name="language">The language.</param>
      <param name="urlResolver">The url resolver that is extended</param>
      <returns>A string representing the URL or <c>null</c> if it was not possible to create a route to the content </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolverExtensions.GetUrl(EPiServer.Web.Routing.IUrlResolver,EPiServer.Core.IContent)">
      <summary>
            Gets the URL for the <paramref name="content" /> instance.
            </summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="content" /> is on current site
            and current request matches host that matches content and language. 
            </para>
      </remarks>
      <param name="content">The content instance.</param>
      <param name="urlResolver">The url resolver that is extended</param>
      <returns>A string representing the URL or <c>null</c> if it was not possible to create a route to the content</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolverExtensions.GetUrl(EPiServer.Web.Routing.IUrlResolver,System.String)">
      <summary>
            Resolves the URL for an item from an URL with internal format.
            </summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="internalUrl" /> is on current site
            and current request matches host that matches content and language. 
            </para>
      </remarks>
      <param name="internalUrl">The URL with a internal format.</param>
      <param name="urlResolver">The url resolver that is extended</param>
      <returns>A URL in string representation.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolverExtensions.GetUrl(EPiServer.Web.Routing.IUrlResolver,EPiServer.UrlBuilder,EPiServer.Web.ContextMode)">
      <summary>
            Resolves the URL for an item from an URL with internal format.
            </summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="urlBuilderWithInternalUrl" /> is on current site
            and current request matches host that matches content and language. 
            </para>
      </remarks>
      <param name="urlBuilderWithInternalUrl">The URL with a internal format.</param>
      <param name="mode">The <see cref="T:EPiServer.Web.ContextMode" /> that determines the format of the link.</param>
      <param name="urlResolver">The url resolver that is extended</param>
      <returns>
            A URL in string representation.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolverExtensions.GetPermanent(EPiServer.Web.Routing.IUrlResolver,System.String,System.Boolean)">
      <summary>
            Tries to resolve the URL to a permanent URL. If this does not possible it returns the original URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="enableFallback">If set to <c>true</c> returns the given URL if the conversion fails.</param>
      <param name="urlResolver">The url resolver that is extended</param>
      <returns>Either a permanent URL or the given URL/String.Empty depending on if fallback is enabled.</returns>
    </member>
    <member name="T:EPiServer.Web.SimpleAddressResolveContext">
      <summary>
            The context used by <see cref="M:EPiServer.Web.ISimpleAddressResolver.Resolve(EPiServer.UrlBuilder,EPiServer.Web.SimpleAddressResolveContext)" /></summary>
    </member>
    <member name="P:EPiServer.Web.SimpleAddressResolveContext.Language">
      <summary>
            The language to resolve in.
            </summary>
      <remarks>
            If language is set <see cref="P:EPiServer.Web.SimpleAddressResolveContext.UseStrictLanguageMatch" /> specifies if language must match
            </remarks>
    </member>
    <member name="P:EPiServer.Web.SimpleAddressResolveContext.UseStrictLanguageMatch">
      <summary>
            If <see cref="P:EPiServer.Web.SimpleAddressResolveContext.Language" /> is set this specifies if language must match.
            </summary>
    </member>
    <member name="P:EPiServer.Web.SimpleAddressResolveContext.PotentialLanguageSegment">
      <summary>
            When called from routing this can be used to pass in a potential language segment
            </summary>
    </member>
    <member name="T:EPiServer.Web.SimpleAddressResolveResult">
      <summary>
            The resolve returned from <see cref="M:EPiServer.Web.ISimpleAddressResolver.Resolve(EPiServer.UrlBuilder,EPiServer.Web.SimpleAddressResolveContext)" /></summary>
    </member>
    <member name="P:EPiServer.Web.SimpleAddressResolveResult.ContentLink">
      <summary>
            The content link that matches the simple address.
            </summary>
      <remarks>
            In case the page with simple address has a shortcut then this will be the shortcut. 
            <see cref="P:EPiServer.Web.SimpleAddressResolveResult.OriginalContentLink" /> will contain the page that match the simple address.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.SimpleAddressResolveResult.OriginalContentLink">
      <summary>
            In case the simple address is for a page with shortcut this
            is the page with the simple address segment
            </summary>
    </member>
    <member name="P:EPiServer.Web.SimpleAddressResolveResult.Language">
      <summary>
            The language resolved to.
            </summary>
    </member>
    <member name="T:EPiServer.Web.SiteDefinition">
      <summary>
            Holds settings for a site specific definitions like roots for files, blocks etc.
            </summary>
    </member>
    <member name="F:EPiServer.Web.SiteDefinition.WildcardHostName">
      <summary>
            The wild card host name that is used to map unmapped hosts.
            </summary>
    </member>
    <member name="F:EPiServer.Web.SiteDefinition.SiteAssetsName">
      <summary>
            Get the name for the site specific assets folder
            </summary>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.Empty">
      <summary>
            Gets an empty definition which can be used to access <see cref="N:System" /> settings.
            </summary>
      <remarks>
            This is a singleton instance which can be compared against using object comparison.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.Current">
      <summary>
            The instance of <see cref="T:EPiServer.Web.SiteDefinition" /> that matches the request. When no site is matched from request or wildcard mapping an
            empty instance is returned where <see cref="N:System" /> can be used to access settings that are not site specific.
            </summary>
      <remarks>
            During runtime it will get <see cref="T:EPiServer.Web.ISiteDefinitionResolver" /> from IOC container and load settings for current site. If repository
            is not found in container (for example when executed in unit tests) the value will be an SiteDefinition instance with all roots set to <see cref="F:EPiServer.Core.ContentReference.EmptyReference" /></remarks>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.Name">
      <summary>
            Identity of site settings instance
            </summary>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.StartPage">
      <summary>
            Gets or sets the start page of this site.
            </summary>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.SiteAssetsRoot">
      <summary>
            Gets or sets the assets root used by this site.
            </summary>
      <remarks>Setting the value to null means the site does not have a specific asset root meaning global asset root is used.</remarks>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.WasteBasket">
      <summary>
            Gets the reference for the waste basket.
            </summary>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.RootPage">
      <summary>
            Gets the reference for the root page.
            </summary>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.GlobalAssetsRoot">
      <summary>
            Gets the reference for the global assets root.
            </summary>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.ContentAssetsRoot">
      <summary>
            Gets the reference for the root that holds content related assets.
            </summary>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.Item(System.String)">
      <summary>
            Gets or sets the setting of type <see cref="T:System.Object" /> that was registered with the specified key.
            </summary>
      <remarks>
            Any custom settings should be set during initialization.
            </remarks>
      <returns>The custom settings object registered with the provided key.</returns>
    </member>
    <member name="M:EPiServer.Web.SiteDefinition.CreateWritableClone">
      <summary>
            Creates the writable clone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.SiteDefinition.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates the writable clone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Web.SiteDefinition.MakeReadOnly">
      <summary>
            Makes the read only.
            </summary>
    </member>
    <member name="M:EPiServer.Web.SiteDefinition.ThrowIfReadOnly">
      <summary>
            Throws an exception if the current instance is read-only.
            </summary>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.Hosts">
      <summary>
            Gets or sets a list of hosts associated with this site.
            </summary>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.Id">
      <summary>
            Gets or sets a unique identifier of this site.
            </summary>
    </member>
    <member name="P:EPiServer.Web.SiteDefinition.SiteUrl">
      <summary>
            Gets or sets the primary site URL.
            </summary>
      <remarks>
            The scheme, port and application path will also be used for all added hosts if not set explicitly.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.SiteDefinition.GetPrimaryHost(System.Globalization.CultureInfo)">
      <summary>
            Gets the primary host for the provided language. 
            </summary>
      <param name="language">The language.</param>
      <returns>The definition for the host acting as the primary host for the provided language; or if non is found null</returns>
      <remarks>
            If no host has been explicitly defined, the first definition found for the provided language is returned.
            If no host has been defined for the provided language, null will be returned.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.SiteDefinition.GetHost(System.String,System.Boolean)">
      <summary>
            Gets the <see cref="T:EPiServer.Web.HostDefinition" /> from the <see cref="P:Hosts" /> property that matches the provided host name.
            </summary>
      <param name="hostName">Name of the host to find.</param>
      <param name="fallbackToWildcard">if set to <c>true</c>, the wildcard host, if any, will be returned if no directly matching host is found.</param>
      <returns>The matching host if found; otherwise null.</returns>
    </member>
    <member name="M:EPiServer.Web.SiteDefinition.GetHosts(System.Globalization.CultureInfo,System.Boolean)">
      <summary>
            Gets all hosts from the <see cref="P:Hosts" /> property that are mapped to the provided language.
            </summary>
      <param name="language">The language to return hosts for</param>
      <param name="fallbackToUnmapped">if set to <c>true</c> all unmapped hosts will be returned if no mapped ones were found.</param>
      <returns>
            All hosts mapped to the provided language
            </returns>
    </member>
    <member name="T:EPiServer.Web.SiteDefinitionEventArgs">
      <summary>
            Contains event arguments for events raised by <see cref="T:EPiServer.Web.ISiteDefinitionEvents" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionEventArgs.#ctor(EPiServer.Web.SiteDefinition)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.SiteDefinitionEventArgs" /> class.
            </summary>
      <param name="site">The <see cref="T:EPiServer.Web.SiteDefinition" /> instance that was changed.</param>
    </member>
    <member name="P:EPiServer.Web.SiteDefinitionEventArgs.Site">
      <summary>
            Gets the <see cref="T:EPiServer.Web.SiteDefinition" /> instance that was changed.
            </summary>
    </member>
    <member name="T:EPiServer.Web.SystemDefinition">
      <summary>
            Holds system wide settings like global roots for files, blocks etc.
            </summary>
    </member>
    <member name="M:EPiServer.Web.SystemDefinition.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.SystemDefinition" /> class.
            </summary>
      <param name="rootPage">The root page.</param>
      <param name="wasteBasket">The waste basket.</param>
      <param name="globalAssetsRoot">The global assets root.</param>
      <param name="contentAssetsRoot">The content assets root.</param>
    </member>
    <member name="P:EPiServer.Web.SystemDefinition.Current">
      <summary>
            Returns the instance of <see cref="T:EPiServer.Web.SystemDefinition" />. 
            </summary>
      <remarks>
            During runtime it will load the definition from database. During unit tests
            the value can either be set or otherwise it will return a SystemDefinition instance with all roots set to <see cref="F:EPiServer.Core.ContentReference.EmptyReference" /></remarks>
    </member>
    <member name="P:EPiServer.Web.SystemDefinition.RootPage">
      <summary>
            Gets the reference for the root page.
            </summary>
      <value>
            The root page.
            </value>
    </member>
    <member name="P:EPiServer.Web.SystemDefinition.WasteBasket">
      <summary>
            Gets the reference for the waste basket.
            </summary>
      <value>
            The waste basket.
            </value>
    </member>
    <member name="P:EPiServer.Web.SystemDefinition.GlobalAssetsRoot">
      <summary>
            Gets the reference for the global assets root.
            </summary>
      <value>
            The global assets root.
            </value>
    </member>
    <member name="P:EPiServer.Web.SystemDefinition.ContentAssetsRoot">
      <summary>
            Gets or sets the reference for the root that holds content related assets.
            </summary>
      <value>
            The content assets root.
            </value>
    </member>
    <member name="T:EPiServer.Web.UIHint">
      <summary>
            Defines constant strings for the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.Legacy">
      <summary>
            Use legacy editor.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.Image">
      <summary>
            Displays an image.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.Video">
      <summary>
            Displays an video.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.Document">
      <summary>
            Displays a file.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.MediaFile">
      <summary>
            Displays a media file of any type.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.Textarea">
      <summary>
            Creates a text area to edit a string.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.Block">
      <summary>
            A reference to a block.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.BlockFolder">
      <summary>
            A reference to a block folder.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.MediaFolder">
      <summary>
            A reference to a media folder.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.AssetsFolder">
      <summary>
            A reference to a assets folder.
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.LongString">
      <summary>
            Edits a string inline in on-page-edit mode and with text area in form mode
            </summary>
    </member>
    <member name="F:EPiServer.Web.UIHint.PreviewableText">
      <summary>
            Displays a string read only, requiring user interaction to make writable.
            </summary>
    </member>
    <member name="T:EPiServer.Web.UriAuthority">
      <summary>
            Represents the authority part for a <see cref="T:EPiServer.Web.HostDefinition" /></summary>
    </member>
    <member name="M:EPiServer.Web.UriAuthority.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:EPiServer.Web.UriAuthority" /></summary>
      <param name="authority">The string representation for the authority</param>
    </member>
    <member name="P:EPiServer.Web.UriAuthority.Hostname">
      <summary>
            The host name
            </summary>
    </member>
    <member name="P:EPiServer.Web.UriAuthority.Port">
      <summary>
            The port
            </summary>
    </member>
    <member name="P:EPiServer.Web.UriAuthority.IsWildcard">
      <summary>
            Specifies if it is a wildcard host
            </summary>
    </member>
    <member name="P:EPiServer.Web.UriAuthority.IsDefaultPort">
      <summary>
            Determines if the port is the default port
            </summary>
    </member>
    <member name="M:EPiServer.Web.UriAuthority.ToString">
      <inherit-doc />
    </member>
    <member name="M:EPiServer.Web.UriAuthority.Matches(System.String,System.Boolean)">
      <summary>
            Determines if passed in authority string matches current instance
            </summary>
      <param name="authority">The autority to match</param>
      <param name="allowWildcardMatch">If wildcard match shold be allowed</param>
      <returns>true if matches else false</returns>
    </member>
    <member name="T:EPiServer.Web.UriUtil">
      <summary>
            Static Utility methods for Uri support
            </summary>
    </member>
    <member name="M:EPiServer.Web.UriUtil.IsStringWellFormedUri(System.String)">
      <summary>
            Uses <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" /> but treat relative links as http based links.
            </summary>
      <param name="uriString">The string to check for Uri complience</param>
      <returns>true if string is considered a well formed Uri else false</returns>
    </member>
    <member name="M:EPiServer.Web.UriUtil.IsSchemeSpecified(System.String)">
      <summary>
            Checks if the provided string represents an absolute URI (begins with scheme)
            </summary>
      <param name="uri">String representing the URI</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.UriUtil.IsDataUri(System.String)">
      <summary>
            Determines whether the provided URI string is a data URI, e.g. data:image;base64,ZWF0IG15IHNob3J0cyE=.
            </summary>
      <param name="uri">The URI string to test.</param>
      <returns>True if the string follows a data URI pattern; otherwise false.</returns>
    </member>
    <member name="M:EPiServer.Web.UriUtil.Combine(System.String,System.String)">
      <summary>
            Combine two HTTP-scheme URLs or paths. Use for simple and robust concatentation of slash-separated paths,
            even if part of a full http: URL.
            </summary>
      <param name="s1">First part, may include scheme, host etc</param>
      <param name="s2">Second part, may include traling query string, fragment etc</param>
      <returns>The correctly combined paths regardless of if s1 ends or not, or s2 starts or not, with "/"</returns>
    </member>
    <member name="M:EPiServer.Web.UriUtil.Split(System.String)">
      <summary>
            Splits the specified escaped URL into three parts:
            [0] - The [scheme][host][path] portion -  before any fragment or query
            [1] - The query, if any, including the '?'
            [2] - The fragment, if any, including the '#'
            </summary>
      <param name="url">The URL.</param>
      <returns>A string[3] array with the parts, or empty strings if no such part</returns>
    </member>
    <member name="M:EPiServer.Web.UriUtil.SplitNoDelim(System.String)">
      <summary>
            Splits the specified escaped URL into three parts:
            [0] - The [scheme][host][path] portion -  before any fragment or query
            [1] - The query, if any, excluding the '?'
            [2] - The fragment, if any, excluding the '#'
            </summary>
      <param name="url">The URL.</param>
      <returns>A string[3] array with the parts, or empty strings if no such part</returns>
    </member>
    <member name="M:EPiServer.Web.UriUtil.SplitInternal(System.String,System.Int32)">
      <summary>
            Splits the specified escaped URL into three parts:
            [0] - The [scheme][host][path] portion -  before any fragment or query
            [1] - The query, if any, excluding the '?'
            [2] - The fragment, if any, excluding the '#'
            </summary>
      <param name="url">The URL.</param>
      <param name="offset">How much of query/fragment to skip. Set to zero or one.</param>
      <returns>A string[3] array with the parts, or empty strings if no such part</returns>
    </member>
    <member name="M:EPiServer.Web.UriUtil.BuildQueryString(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Make a query string from a collection, no leading '?'
            </summary>
      <param name="nvc">The collection containing the query data.</param>
      <returns>The query string with URL encoding, or an empty string (not null)</returns>
    </member>
    <member name="M:EPiServer.Web.UriUtil.BuildQueryString(System.Collections.Specialized.NameValueCollection,System.Text.Encoding)">
      <summary>
            Builds a query string from a collection, no leading '?'
            </summary>
      <param name="nvc">The collection containing the query data.</param>
      <param name="encoding">The encoding to use.</param>
      <returns>The query string with URL encoding, or an empty string (not null)</returns>
    </member>
    <member name="M:EPiServer.Web.UriUtil.AddLanguageSelection(System.String,System.String)">
      <summary>
            Adds an epslanguage parameter to the query string of a URL.
            </summary>
      <param name="url">The URL to add the parameter to.</param>
      <param name="languageCode">The langauage code.</param>
      <returns>The resulting URL as a string.</returns>
    </member>
    <member name="M:EPiServer.Web.UriUtil.AddQueryString(System.String,System.String,System.String)">
      <summary>
            Add query string parameter to given url
            </summary>
      <param name="url">The original url (may include query string parameters)</param>
      <param name="name">Name of the query string parameter (for example "status")</param>
      <param name="val">The value of the query string parameter</param>
      <returns>The new url with the query string added.</returns>
      <remarks>
            This method will replace the value of an existing query string with the same name.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.UrlSegmentEventArgs">
      <summary>
            Used in events <see cref="E:EPiServer.Web.IUrlSegmentCreator.Creating" /> and <see cref="E:EPiServer.Web.IUrlSegmentCreator.Created" />.
            Usage is to let eventhandlers control the creation of UrlSegment for a page.
            </summary>
    </member>
    <member name="P:EPiServer.Web.UrlSegmentEventArgs.Content">
      <summary>
            Gets or sets the content whos url/routing segment is to be set.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:EPiServer.Web.UrlSegmentEventArgs.RoutingSegment">
      <summary>
            Gets the routing segment implmentation from <see cref="P:EPiServer.Web.UrlSegmentEventArgs.Content" /> if implemented.
            </summary>
      <value>The routing segment.</value>
    </member>
    <member name="P:EPiServer.Web.UrlSegmentEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the creation of url segment should be cancelled.
            </summary>
      <remarks>
            This property only has meaning in event <see cref="E:EPiServer.Web.IUrlSegmentCreator.Creating" /></remarks>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.UrlSegmentEventArgs.IsModified">
      <summary>
            Gets or sets a value indicating whether this instance is modified.
            </summary>
      <value>
        <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Web.UrlSegmentOptions">
      <summary>
            Contains options used to specify how url segments should be created. It is used by <see cref="T:EPiServer.Web.IUrlSegmentCreator" /> and <see cref="T:EPiServer.Web.IUrlSegmentGenerator" /></summary>
    </member>
    <member name="M:EPiServer.Web.UrlSegmentOptions.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Web.UrlSegmentOptions" /></summary>
    </member>
    <member name="P:EPiServer.Web.UrlSegmentOptions.UseLowercase">
      <summary>
            Indicates if only lowercase characters should be used in url segments
            </summary>
      <remarks>Default value is true</remarks>
    </member>
    <member name="P:EPiServer.Web.UrlSegmentOptions.SupportIriCharacters">
      <summary>
            Indicates if segments supports IRI characters. If <see cref="P:EPiServer.Web.UrlSegmentOptions.ValidCharacters" /> are set to allow 
            characters that are not allowed in url segments according to url specification this should be set to true.
            </summary>
      <remarks>
            Purpose of this is to indicate to for example rendering components that the segment might need to be encoded.
            </remarks>
      <remarks>Default value is false</remarks>
    </member>
    <member name="P:EPiServer.Web.UrlSegmentOptions.ValidCharacters">
      <summary>
             Gets or sets the characters that are valid to use as url segment, will be used as argument to Regexp
             </summary>
      <remarks>
             Default value is 'A-Za-z0-9\-_~\.\$'
            </remarks>
    </member>
    <member name="P:EPiServer.Web.UrlSegmentOptions.CharacterMap">
      <summary>
            Specifies a mapping table for characters not allowed due to <see cref="P:EPiServer.Web.UrlSegmentOptions.ValidCharacters" />.
            </summary>
      <remarks>Characters that are not allowed due to <see cref="P:EPiServer.Web.UrlSegmentOptions.ValidCharacters" /> and do not have a mapped replacement in <see cref="P:EPiServer.Web.UrlSegmentOptions.CharacterMap" /> will be removed from segment.</remarks>
    </member>
    <member name="P:EPiServer.Web.UrlSegmentOptions.ReservedSegments">
      <summary>
            Defines segments that are reserved by e.g. IIS
            </summary>
      <remarks>
            Default values are "bin", "app_code", "app_globalresources", "app_localresources", "app_webreferences", "app_data", "app_browsers"
            </remarks>
    </member>
    <member name="T:EPiServer.Web.IFileResolver">
      <summary>
            Interface used by PermanentLinkMapStore to resolve a file
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.IFileResolver.ResolveFile(System.Guid)">
      <summary>
            Tries to resolve a GUID to a file.
            </summary>
      <param name="guid">The GUID.</param>
      <returns>The virtual path of the file, or null if the GUID was not found.</returns>
    </member>
    <member name="M:EPiServer.Web.IFileResolver.ResolveFile(System.String,System.Guid@)">
      <summary>
            Tries to resolve a file to a GUID.
            </summary>
      <param name="virtualPath">The virtual path.</param>
      <param name="guid">The resolved GUID.</param>
      <returns>A normalized representation of the virtual path to the file, or null if the GUID was not found.</returns>
    </member>
    <member name="T:EPiServer.Web.IPageResolver">
      <summary>
            Interface used by PermanentLinkMapStore to resolve a page
            </summary>
    </member>
    <member name="M:EPiServer.Web.IPageResolver.ResolvePage(System.Guid,EPiServer.Core.PageReference@)">
      <summary>
            Tries to resolve a GUID to a page.
            </summary>
      <param name="pageGuid">The page GUID.</param>
      <param name="pageLink">The page link that the GUID resolved to.</param>
      <returns>A <see cref="T:System.Uri" /> with the "classic" URL of the resolved page, or null if the GUID was not found.</returns>
    </member>
    <member name="M:EPiServer.Web.IPageResolver.ResolvePage(EPiServer.Core.PageReference,System.Guid@)">
      <summary>
            Tries to resolve a Page reference to a page.
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="guid">The GUID that the page link resolved to.</param>
      <returns>A <see cref="T:System.Uri" /> with the "classic" URL of the resolved page, or null if the GUID was not found.</returns>
    </member>
    <member name="T:EPiServer.Web.PageMapSettings">
      <summary>
            Class that holds information about SiteUrl and UrlRewriteExtension for a 
            mapped page link.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.PageMapSettings.#ctor(System.Uri,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PageMapSettings" /> class.
            </summary>
      <param name="siteUri">The site URI.</param>
      <param name="urlRewriteExtension">The URL rewrite extension.</param>
    </member>
    <member name="P:EPiServer.Web.PageMapSettings.UrlRewriteExtension">
      <summary>
            Gets the URL rewrite extension for the site the mapped page belongs to
            </summary>
      <value>The URL rewrite extension.</value>
    </member>
    <member name="P:EPiServer.Web.PageMapSettings.SiteUrl">
      <summary>
            Gets the site URL that the mapped page belongs to
            </summary>
      <value>The site URL.</value>
    </member>
    <member name="T:EPiServer.Web.PermanentContentLinkMap">
      <summary>
            Handles conversion between permanent links and classic links for content links.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PermanentContentLinkMap.#ctor(System.Guid,System.String,EPiServer.Core.ContentReference,EPiServer.Web.PageMapSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PermanentContentLinkMap" /> class.
            </summary>
      <param name="guid">The GUID.</param>
      <param name="extension">The extension.</param>
      <param name="contentReference">The page reference.</param>
      <param name="settings">The settings.</param>
    </member>
    <member name="P:EPiServer.Web.PermanentContentLinkMap.PageMapSettings">
      <summary>
            Gets or sets the page map settings.
            </summary>
      <value>The settings.</value>
    </member>
    <member name="T:EPiServer.Web.SiteDefinitionRepository">
      <summary>
            The repository that handles loading and persisting of sites, see <see cref="T:EPiServer.Web.SiteDefinition" />.
            </summary>
    </member>
    <member name="E:EPiServer.Web.SiteDefinitionRepository.SiteDefinitionChanged">
      <summary>
            Occurs when some <see cref="T:EPiServer.Web.SiteDefinition" /> was changed or deleted.
            </summary>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionRepository.Delete(System.Guid)">
      <summary>
            Deletes the <see cref="T:EPiServer.Web.SiteDefinition" /> with specified id.
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionRepository.Get(System.String)">
      <summary>
            Gets the <see cref="T:EPiServer.Web.SiteDefinition" /> with specified name.
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionRepository.Get(System.Guid)">
      <summary>
            Gets the <see cref="T:EPiServer.Web.SiteDefinition" /> with specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionRepository.List">
      <summary>
            Lists all defined <see cref="T:EPiServer.Web.SiteDefinition" />.
            </summary>
      <returns>
      </returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionRepository.Save(EPiServer.Web.SiteDefinition)">
      <summary>
            Saves the specified site definition.
            </summary>
      <param name="siteDefinition">The site definition.</param>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionRepository.OnSiteDefinitionChanged">
      <summary>
            Called when site definition changed.
            </summary>
    </member>
    <member name="T:EPiServer.Web.SiteDefinitionResolver">
      <summary>
            Resolves which <see cref="T:EPiServer.Web.SiteDefinition" /> to use.
            </summary>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionResolver.GetByHostname(System.String,System.Boolean,EPiServer.Web.HostDefinition@)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionResolver.GetDefinitionForContent(EPiServer.Core.ContentReference,System.Boolean,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionResolver.GetByContent(EPiServer.Core.ContentReference,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Web.UrlSegmentHandler">
      <summary>
            Handles URL segments for content data.
            </summary>
    </member>
    <member name="M:EPiServer.Web.UrlSegmentHandler.ExistOtherContentWithSegment(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.String,System.String)">
      <summary>
            Determines if there exist another siebling with the same url segment.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="destinationLink">The destination link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.UrlSegmentHandler.CreateUrlSegment(EPiServer.Core.IContent)">
      <summary>
            Creates the URL segment for a content.
            </summary>
      <param name="content">
      </param>
      <returns>Unique url segment</returns>
      <remarks>
            The url segment should be unique among all sieblings.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.WebEncoder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents a type used to do HTML encoding and encoding.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogAutoTruncateJob">
      <summary>
            Truncates change log items
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogAutoTruncateJob.Execute">
      <summary>
            Truncates old items from the change log.
            </summary>
      <remarks>By default, everything older than one month will be truncated</remarks>
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogCategory">
      <summary>
            Pre-defined categories of change log items
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogCategory.None">
      <summary>
            No category defined
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogCategory.Content">
      <summary>
            Content change log
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogCategory.File">
      <summary>
            File change log
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogCategory.Directory">
      <summary>
            Directory change log
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogCategory.Message">
      <summary>
            Message entry
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogCategory.Project">
      <summary>
            A change log entry related to project
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogCategory.Approval">
      <summary>
            A change log entry related to approval
            </summary>
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogContent">
      <summary>
            An EPiServer CMS content change log
            </summary>
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogContent.ActionType">
      <summary>
            The types of action a content change log can have
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.None">
      <summary>
            No action defined
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.CheckIn">
      <summary>
            Content item checked-in
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.Publish">
      <summary>
            Content item published
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.Delete">
      <summary>
            Content item deleted
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.Save">
      <summary>
            Content item saved
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.Move">
      <summary>
            Content item moved
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.Create">
      <summary>
            Content item created
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.DeleteLanguage">
      <summary>
            Content item language deleted
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.DeleteChildren">
      <summary>
            Content item children deleted
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.DeletedItems">
      <summary>
            The deleted items, this will contain all effected items and is used with Delete and DeleteChildren.
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.Rejected">
      <summary>
            Content item rejected
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.DelayedPublish">
      <summary>
            Content item was scheduled for publish
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogContent.ActionType.RequestApproval">
      <summary>
            Content item was requested for approval
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogContent.#ctor">
      <summary>
            Parameterless constructor.
            Should be used in conjuction with the <see cref="M:EPiServer.ChangeLog.ChangeLogItemBase.InitializeFromStorage(System.Int64,System.String,System.DateTime,System.Int32,System.Int32,System.String)" /> method
            when a change log data has been read from the change log
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogContent.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,EPiServer.ChangeLog.ChangeLogContent.ActionType,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ChangeLog.ChangeLogContent" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentGuid">The content GUID.</param>
      <param name="contentTypeId">The content type id.</param>
      <param name="name">The name.</param>
      <param name="action">The action.</param>
      <param name="changedBy">The changed by.</param>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogContent.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,EPiServer.ChangeLog.ChangeLogContent.ActionType,System.String,System.Int32)">
      <summary>
            Constructs a new content change log
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentGuid">The content GUID.</param>
      <param name="contentTypeId">The content type id.</param>
      <param name="name">The name.</param>
      <param name="action">The action taken on the content</param>
      <param name="changedBy">The user who performed the action</param>
      <param name="categoryId">The category id.</param>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogContent.ContentLink">
      <summary>
            The <see cref="T:EPiServer.Core.ContentReference" /> of the affected content
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogContent.Language">
      <summary>
            The language for the content.
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogContent.ContentGuid">
      <summary>
            The Guid of the affected content
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogContent.ContentTypeId">
      <summary>
            Gets the content type id.
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogContent.Name">
      <summary>
            The name of the affected content. Note, this is the name when the log was created and may be different from the contents' current name
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogContent.Title">
      <summary>
            Returns a description of the Change Log item
            </summary>
      <value>Title of the item</value>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogContent.ExtensionProperties">
      <summary>
            Get or sets properties that should be serialized
            </summary>
      <value>Property values</value>
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogDependency">
      <summary>
            Contains information of a dependency on the Change Log system
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogDependency.DisplayName">
      <summary>
            The localized name of the dependency to show in the EPiServer UI
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogDependency.LowestDependentSequenceNumber">
      <summary>
            The sequence number of the lowest (oldest) Change Log item depended on
            This number can be used when truncating the log to ensure items depended on are not deleted
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogDependency.OldestDependentChangeDate">
      <summary>
            The date of the oldest Change Log item depended on
            This date can be used when truncating the log to ensure items depended on are not deleted
            </summary>
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogDependencyEventArgs">
      <summary>
            Event arguments class for the <see cref="E:EPiServer.ChangeLog.ChangeLogSystem.RegisterDependencies" /> event
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogDependencyEventArgs.Dependencies">
      <summary>
            A list of dependecies on the Change Log system
            </summary>
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogItemBase">
      <summary>
            Base class for EPiServer CMS change log items
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogItemBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ChangeLog.ChangeLogItemBase" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogItemBase.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ChangeLog.ChangeLogItemBase" /> class.
            </summary>
      <param name="category">The category.</param>
      <param name="action">The action.</param>
      <param name="changedBy">The changed by.</param>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogItemBase.InitializeFromStorage(System.Int64,System.String,System.DateTime,System.Int32,System.Int32,System.String)">
      <summary>
            Initialize the change log item with the values provided
            </summary>
      <param name="sequenceNumber">The sequence number of the change log</param>
      <param name="logData">The log data of the change log</param>
      <param name="changeDate">The change date of the change log</param>
      <param name="category">The category of the change log</param>
      <param name="action">The action of the change log</param>
      <param name="changedBy">The user who action generated the change log</param>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogItemBase.ExtensionProperties">
      <summary>
            Override this to serialize/deserialize your custom properties as xml
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogItemBase.Title">
      <summary>
            Return a description of your activity entry
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogItemBase.SequenceNumber">
      <summary>
            The sequence number of the change log
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogItemBase.Category">
      <summary>
            The category of the change log
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogItemBase.LogData">
      <summary>
            The log data of the change log
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogItemBase.ChangeDate">
      <summary>
            The changed date.
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogItemBase.Update(System.Int64,System.DateTime)">
      <summary>
            Updates the specified sequence number and the change date.
            </summary>
      <param name="sequenceNumber">The sequence number.</param>
      <param name="changeDate">The change date.</param>
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogQueryInfo">
      <summary>
            Information about a change log item
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogQueryInfo.ThrowIfReadOnly">
      <summary>
            If the item is read only, an application exception will be thrown
            </summary>
      <exception cref="T:System.InvalidOperationException">The property is read only</exception>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogQueryInfo.ToString">
      <summary>
            Writes a string which can later be parsed to <see cref="M:EPiServer.ChangeLog.ChangeLogQueryInfo.Parse(System.String)" /> to re-instantiate an object instance
            </summary>
      <returns>A string representation of the object</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogQueryInfo.Parse(System.String)">
      <summary>
            Parses the string passed and creates a new instance of a <see cref="T:EPiServer.ChangeLog.ChangeLogQueryInfo" /> class. 
            </summary>
      <param name="s">A string representation of an <see cref="T:EPiServer.ChangeLog.ChangeLogQueryInfo" /> instance. Such as string can be obtained from the <see cref="M:EPiServer.ChangeLog.ChangeLogQueryInfo.ToString" /> method.</param>
      <returns>A <see cref="T:EPiServer.ChangeLog.ChangeLogQueryInfo" /> instance</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogQueryInfo.IsSameQuery(EPiServer.ChangeLog.ChangeLogQueryInfo)">
      <summary>
            Compares the <see cref="T:EPiServer.ChangeLog.ChangeLogQueryInfo" /> to determine if they represent the same query
            </summary>
      <param name="info">A <see cref="T:EPiServer.ChangeLog.ChangeLogQueryInfo" /> instance to compare</param>
      <returns>
        <code>true</code> if the queries are considered equal, otherwise <code>false</code></returns>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.From">
      <summary>
            If set the query will be filtered on the <see cref="P:EPiServer.ChangeLog.IChangeLogItem.ChangeDate" /> property using this value.
            This property becomes immutable once this object instance has been used to read records from the change log as the same instance 
            can be used to do paging and therefore must be consistent in subsequent reads.
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.To">
      <summary>
            If set the query will be filtered on the <see cref="P:EPiServer.ChangeLog.IChangeLogItem.ChangeDate" /> property using this value.
            This property becomes immutable once this object instance has been used to read records from the change log as the same instance 
            can be used to do paging and therefore must be consistent in subsequent reads.
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.Category">
      <summary>
            If set the query will be filtered on the <see cref="P:EPiServer.ChangeLog.IChangeLogItem.Category" /> property using this value.
            This property becomes immutable once this object instance has been used to read records from the change log as the same instance 
            can be used to do paging and therefore must be consistent in subsequent reads.
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.Action">
      <summary>
            If set the query will be filtered on the <see cref="P:EPiServer.ChangeLog.IChangeLogItem.Action" /> property using this value.
            This property becomes immutable once this object instance has been used to read records from the change log as the same instance 
            can be used to do paging and therefore must be consistent in subsequent reads.
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.Deleted">
      <summary>
            If set the query will be filtered on deleted property using this value.
            This property becomes immutable once this object instance has been used to read records from the change log as the same instance 
            can be used to do paging and therefore must be consistent in subsequent reads.
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.ChangedBy">
      <summary>
            If set the query will be filtered on the <see cref="P:EPiServer.ChangeLog.IChangeLogItem.ChangedBy" /> property using this value.
            This property becomes immutable once this object instance has been used to read records from the change log as the same instance 
            can be used to do paging and therefore must be consistent in subsequent reads.
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.StartSequenceNumber">
      <summary>
            If set the query will be filtered on the <see cref="P:EPiServer.ChangeLog.IChangeLogItem.SequenceNumber" /> property using this value.
            This property becomes immutable once this object instance has been used to read records from the change log as the same instance 
            can be used to do paging and therefore must be consistent in subsequent reads.
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.MaxRecordsToReturn">
      <summary>
            The maximum number of records to return for each read
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogQueryInfo.SetLastReadStateInfo(System.Int64,System.Int64)">
      <summary>
            Set state information from a read of the change log.
            It is this information which allows the same <see cref="T:EPiServer.ChangeLog.ChangeLogQueryInfo" /> instance to be passed to a read method
            more than once in order to achieve paging
            </summary>
      <param name="firstRowSequenceNumber">The sequence number of the first row read by the query</param>
      <param name="lastRowSequenceNumber">The sequence number of the last row read by the query</param>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.LastReadFirstRowSeq">
      <summary>
            The sequence number of the first row read by the read query
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.LastReadLastRowSeq">
      <summary>
            The sequence number of the last row read by the read query
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogQueryInfo.ReadOnly">
      <summary>
            The read only status of this object.
            If this instance contains state information from a previous read (the <see cref="M:EPiServer.ChangeLog.ChangeLogQueryInfo.SetLastReadStateInfo(System.Int64,System.Int64)" /> has been called)
            the the object will become read only.
            </summary>
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogSystem">
      <summary>
            A management class for the Change Log system
            </summary>
    </member>
    <member name="E:EPiServer.ChangeLog.ChangeLogSystem.Started">
      <summary>
            Fired when the Change Log system is started
            </summary>
    </member>
    <member name="E:EPiServer.ChangeLog.ChangeLogSystem.Stopped">
      <summary>
            Fired when the Change Log system is stopped
            </summary>
    </member>
    <member name="E:EPiServer.ChangeLog.ChangeLogSystem.StateChanged">
      <summary>
            Fired when the Change Log system's state is changed
            </summary>
    </member>
    <member name="E:EPiServer.ChangeLog.ChangeLogSystem.RegisterDependencies">
      <summary>
            Fired when the Change Log system requires dependencies to be registered.
            This event will be called indirectly by the <see cref="M:EPiServer.ChangeLog.ChangeLogSystem.AutoStart" /> method when the <see cref="P:EPiServer.ChangeLog.ChangeLogSystem.State" /> property 
            has the values of <see cref="F:EPiServer.ChangeLog.ChangeLogSystemState.Auto" />.
            Subscribers to the event should register their dependecies in the <see cref="F:EPiServer.ChangeLog.ChangeLogDependencyEventArgs.Dependencies" />
            property which will in turn cause the Change Log system to start.
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogSystem.State">
      <summary>
            State of the Change Log system. See <see cref="T:EPiServer.ChangeLog.ChangeLogSystemState" /> for more information.
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogSystem.AutoStart">
      <summary>
            Start the Change Log system based on the current <see cref="P:EPiServer.ChangeLog.ChangeLogSystem.State" /> value.
            See <see cref="T:EPiServer.ChangeLog.ChangeLogSystemState" /> for more information.
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogSystem.AutoStart(EPiServer.IContentRepository,EPiServer.Core.IContentEvents)">
      <summary>
            Start the Change Log system based on the current <see cref="P:EPiServer.ChangeLog.ChangeLogSystem.State" /> value.
            See <see cref="T:EPiServer.ChangeLog.ChangeLogSystemState" /> for more information.
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogSystem.AutoStop">
      <summary>
            Stop the Change Log system based on the current <see cref="P:EPiServer.ChangeLog.ChangeLogSystem.State" /> value.
            If State has the value of <see cref="F:EPiServer.ChangeLog.ChangeLogSystemState.Auto" /> then the Change Log system will be stopped if it has no registered dependencies.
            If State has another value then this method does nothing.
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogSystem.Stop">
      <summary>
            Stop the Change Log system unconditionally.
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogSystem.IsStarted">
      <summary>
            Returns <code>true</code> if the Change Log system has been started, otherwise <code>false</code>.
            </summary>
      <returns>A boolean value indicating if the Change Log system has been started or not.</returns>
    </member>
    <member name="P:EPiServer.ChangeLog.ChangeLogSystem.Dependencies">
      <summary>
            Registered dependents of the Change Log system.
            </summary>
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogSystemState">
      <summary>
            Represents the (enabled) state of the Change Log system
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogSystemState.Auto">
      <summary>
            In Auto mode, the Change Log system will start if dependecies have been registered again it via the <see cref="E:EPiServer.ChangeLog.ChangeLogSystem.RegisterDependencies" /> event
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogSystemState.Enabled">
      <summary>
            The Change Log system will start when the applicatio starts
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ChangeLogSystemState.Disabled">
      <summary>
            The Change Log system is disabled and will not start 
            </summary>
    </member>
    <member name="T:EPiServer.ChangeLog.ChangeLogTracker">
      <summary>
            The EPiServer CMS Change Log Tracker.
            Tracks changes in the EPiServer system and logs them the Change Log
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogTracker.Start">
      <summary>
            Start the tracking mechanism
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogTracker.Start(EPiServer.IContentRepository,EPiServer.Core.IContentEvents)">
      <summary>
            Start the tracking mechanism
            </summary>
      <param name="contentRepository">The content repository.</param>
      <param name="contentEvents">The content events.</param>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogTracker.Stop">
      <summary>
            Stop the tracking mechanism
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.ChangeLogTracker.IsStarted">
      <summary>
            Returns <code>true</code> if the tracking mechanism has been started, otherwise <code>false</code>.
            </summary>
      <returns>A value indicating if the tracking mechanism has been started</returns>
    </member>
    <member name="T:EPiServer.ChangeLog.DefaultChangeLog">
      <summary>
            The EPiServer CMS default change log.
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ChangeLog.DefaultChangeLog" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.Save(EPiServer.ChangeLog.IChangeLogItem)">
      <summary>
            Saves the <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> item
            </summary>
      <param name="item">The item to save</param>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.Save(System.Collections.Generic.IEnumerable{EPiServer.ChangeLog.IChangeLogItem})">
      <summary>
            Saves the  <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> instances in the collection
            </summary>
      <param name="items">A collection of <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> items</param>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.GetChanges(EPiServer.ChangeLog.ChangeLogQueryInfo,EPiServer.ChangeLog.ReadDirection,EPiServer.ChangeLog.SortOrder)">
      <summary>
            Retrieves a list of <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> items based on the criteria passed
            </summary>
      <param name="queryInfo">The information required to filter the query</param>
      <param name="direction">The direction the query should be performed in</param>
      <param name="order">The order the data should be returned in</param>
      <example>
            How to use the GetChanges method.
            <code source="../CodeSamples/EPiServerNET/ChangeLog/ChangeLogSamples.cs" region="GetChanges" lang="cs" /></example>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> items.</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.GetChangeCount(EPiServer.ChangeLog.ChangeLogQueryInfo)">
      <summary>
            Gets a count of change logs based on the criteria passed
            </summary>
      <param name="queryInfo">
      </param>
      <example>
            How to use the GetChangeCount method.
            <code source="../CodeSamples/EPiServerNET/ChangeLog/ChangeLogSamples.cs" region="GetChangeCount" lang="cs" /></example>
      <returns>An <see cref="T:System.Int64" /> value with the number of logs found</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.GetChangeCountBackwards(EPiServer.ChangeLog.ChangeLogQueryInfo)">
      <summary>
            Gets the change count backwards.
            </summary>
      <param name="queryInfo">The query info.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.GetChangeCountForward(EPiServer.ChangeLog.ChangeLogQueryInfo)">
      <summary>
            Gets the change count forward.
            </summary>
      <param name="queryInfo">The query info.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.GetHighestSequenceNumber">
      <summary>
            Gets the highest sequence number in use in the change log
            </summary>
      <returns>An <see cref="T:System.Int64" /> value representing the highest sequence number used</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.Truncate(System.Int64,System.DateTime)">
      <summary>
            Truncate entries from the change log
            </summary>
      <param name="rows">The number of rows to truncate</param>
      <param name="olderThan">The date for which rows older than should be deleted</param>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.TruncateByDependency(System.DateTime)">
      <summary>
            Truncate entries from the change log based on the dependecies registered with the <see cref="T:EPiServer.ChangeLog.ChangeLogSystem" /> class.
            <param name="defaultOldestChangeDate">The default date of the oldest item to preserve in the change log.</param></summary>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.GetChanges(EPiServer.ChangeLog.ChangeLogQueryInfo)">
      <summary>
            Retrieves a list of <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> items based on the criteria passed.
            This is the same as calling GetChanges(queryInfo, ReadDirection.Forwards, SortOrder.Ascending)
            </summary>
      <param name="queryInfo">The information required to filter the query</param>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> items.</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.GetChangeCount">
      <summary>
            Gets a count of all change logs 
            </summary>
      <returns>An <see cref="T:System.Int64" /> value with the number of logs found</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.Truncate">
      <summary>
            Truncate all entries from the change log
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.Truncate(System.Int64)">
      <summary>
            Truncate entries from the change log
            </summary>
      <param name="rows">The number of rows to truncate</param>
    </member>
    <member name="M:EPiServer.ChangeLog.DefaultChangeLog.Truncate(System.DateTime)">
      <summary>
            Truncate entries from the change log
            </summary>
      <param name="olderThan">The date for which rows older than should be deleted</param>
    </member>
    <member name="T:EPiServer.ChangeLog.ActivityEntryMapper">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.ActivityEntryMapper.ChangeLogItemWrappedActivity">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.ReadDirection">
      <summary>
            The direction to read the change log in
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ReadDirection.Forwards">
      <summary>
            Read forwards (oldest to newest)
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.ReadDirection.Backwards">
      <summary>
            Read backwards (newest to oldest)
            </summary>
    </member>
    <member name="T:EPiServer.ChangeLog.SortOrder">
      <summary>
            The sort order to present change log item read in
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.SortOrder.Ascending">
      <summary>
            Present in ascending order (oldest to newest)
            </summary>
    </member>
    <member name="F:EPiServer.ChangeLog.SortOrder.Descending">
      <summary>
            Present in descending order (newest to oldest)
            </summary>
    </member>
    <member name="T:EPiServer.ChangeLog.IChangeLog">
      <summary>
            Interface representing a change log
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.IChangeLog.Save(EPiServer.ChangeLog.IChangeLogItem)">
      <summary>
            Saves the <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> item
            </summary>
      <param name="item">The item to save</param>
    </member>
    <member name="M:EPiServer.ChangeLog.IChangeLog.Save(System.Collections.Generic.IEnumerable{EPiServer.ChangeLog.IChangeLogItem})">
      <summary>
            Saves the  <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> instances in the collection
            </summary>
      <param name="items">A collection of <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> items</param>
    </member>
    <member name="M:EPiServer.ChangeLog.IChangeLog.GetChanges(EPiServer.ChangeLog.ChangeLogQueryInfo,EPiServer.ChangeLog.ReadDirection,EPiServer.ChangeLog.SortOrder)">
      <summary>
            Retrieves a list of <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> items based on the criteria passed
            </summary>
      <param name="queryInfo">The information required to filter the query</param>
      <param name="direction">The direction the query should be performed in</param>
      <param name="order">The order the data should be returned in</param>
      <example>
            One way to use the GetChanges method.
            <code source="../CodeSamples/EPiServerNET/ChangeLog/ChangeLogSamples.cs" region="GetChanges" lang="cs" /></example>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:EPiServer.ChangeLog.IChangeLogItem" /> items.</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.IChangeLog.GetChangeCount(EPiServer.ChangeLog.ChangeLogQueryInfo)">
      <summary>
            Gets a count of change logs based on the criteria passed
            </summary>
      <param name="queryInfo">
      </param>
      <example>
            One way to use the GetChangeCount method.
            <code source="../CodeSamples/EPiServerNET/ChangeLog/ChangeLogSamples.cs" region="GetChangeCount" lang="cs" /></example>
      <returns>An <see cref="T:System.Int64" /> value with the number of logs found</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.IChangeLog.GetChangeCountBackwards(EPiServer.ChangeLog.ChangeLogQueryInfo)">
      <summary>
            Gets the number of rows backwards not shown from the query.Used in button enable and disable funcionality
            </summary>
      <returns>An<see cref="T:System.Int64" /> number of rows</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.IChangeLog.GetChangeCountForward(EPiServer.ChangeLog.ChangeLogQueryInfo)">
      <summary>
            Gets the number of rows forward not shown from the query.Used in button enable and disable funcionality
            </summary>
      <returns>An<see cref="T:System.Int64" /> number of rows</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.IChangeLog.GetHighestSequenceNumber">
      <summary>
            Gets the highest sequence number in use in the change log
            </summary>
      <returns>An <see cref="T:System.Int64" /> value representing the highest sequence number used</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.IChangeLog.Truncate(System.Int64,System.DateTime)">
      <summary>
            Truncate entries from the change log
            </summary>
      <param name="rows">The number of rows to truncate</param>
      <param name="olderThan">The date for which rows older than should be deleted</param>
    </member>
    <member name="M:EPiServer.ChangeLog.IChangeLog.TruncateByDependency(System.DateTime)">
      <summary>
            Truncate entries from the change log based on the dependecies registered with the <see cref="T:EPiServer.ChangeLog.ChangeLogSystem" /> class.
            <param name="defaultOldestChangeDate">The default date of the oldest item to preserve in the change log.</param></summary>
    </member>
    <member name="T:EPiServer.ChangeLog.IChangeLogItem">
      <summary>
            Interface representing a change log item
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.IChangeLogItem.SequenceNumber">
      <summary>
            The sequence number of the change log
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.IChangeLogItem.LogData">
      <summary>
            The log data of the change log
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.IChangeLogItem.ChangeDate">
      <summary>
            The change date of the change log
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.IChangeLogItem.Category">
      <summary>
            The category of the change log
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.IChangeLogItem.Action">
      <summary>
            The action of the change log
            </summary>
    </member>
    <member name="P:EPiServer.ChangeLog.IChangeLogItem.ChangedBy">
      <summary>
            The user who action generated the change log
            </summary>
    </member>
    <member name="T:EPiServer.ChangeLog.IChangeLogUpdatableItem">
      <summary>
            Updates a change log item
            </summary>
    </member>
    <member name="M:EPiServer.ChangeLog.IChangeLogUpdatableItem.Update(System.Int64,System.DateTime)">
      <summary>
            Updates the specified sequence number and date.
            </summary>
      <param name="sequenceNumber">The sequence number.</param>
      <param name="changeDate">The change date.</param>
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogContentDelete">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An EPiServer CMS content delete change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogContentDelete.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parameterless constructor.
            Should be used in conjuction with the <see cref="M:EPiServer.ChangeLog.ChangeLogItemBase.InitializeFromStorage(System.Int64,System.String,System.DateTime,System.Int32,System.Int32,System.String)" /> method
            when a change log data has been read from the change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogContentDelete.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,EPiServer.Core.ContentPath,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructs a new page change log
            </summary>
      <param name="contentLink">The <see cref="T:EPiServer.Core.PageReference" /> of the affected page</param>
      <param name="contentGuid">The page GUID for the affected page</param>
      <param name="contentTypeId">The content type GUID.</param>
      <param name="name">The name of the affected page</param>
      <param name="contentPath">The <see cref="T:EPiServer.Core.ContentPath" /> of the affected page</param>
      <param name="changedBy">The user who performed the action</param>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogContentDelete.ContentPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The <see cref="T:EPiServer.Core.ContentPath" /> of the affected content item
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogContentDelete.ExtensionProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get or sets properties that should be serialized
            </summary>
      <value>Property values</value>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogContentDeleteChildren">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An EPiServer CMS content delete change log for children
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogContentDeleteChildren.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.ChangeLog.Internal.ChangeLogContentDeleteChildren" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogContentDeleteChildren.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,EPiServer.Core.ContentPath,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.ChangeLog.Internal.ChangeLogContentDeleteChildren" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentGuid">The page GUID.</param>
      <param name="contentTypeId">The content type GUID.</param>
      <param name="name">Name of the page.</param>
      <param name="contentPath">The page path.</param>
      <param name="changedBy">The changed by.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogContentDeletedItems">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An EPiServer CMS content delete change log for all items delteted.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogContentDeletedItems.IdentitiesKey">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The identities key
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogContentDeletedItems.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.ChangeLog.Internal.ChangeLogContentDeletedItems" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogContentDeletedItems.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.Guid})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.ChangeLog.Internal.ChangeLogContentDeletedItems" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentGuid">The page GUID.</param>
      <param name="contentTypeId">The content type GUID.</param>
      <param name="name">Name of the page.</param>
      <param name="changedBy">The changed by.</param>
      <param name="deletedIdentities">The deleted identities.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogContentDeletedItems.DeletedIdentities">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the deleted identities.
            </summary>
      <value>
            The deleted identities.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogContentDeletedItems.ExtensionProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get or sets properties that should be serialized
            </summary>
      <value>
            Property values
            </value>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogContentDeleteLanguage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An EPiServer CMS content language delete change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogContentDeleteLanguage.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parameterless constructor.
            Should be used in conjuction with the <see cref="M:EPiServer.ChangeLog.ChangeLogItemBase.InitializeFromStorage(System.Int64,System.String,System.DateTime,System.Int32,System.Int32,System.String)" /> method
            when a change log data has been read from the change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogContentDeleteLanguage.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructs a new content language delete change log
            </summary>
      <param name="contentLink">The <see cref="T:EPiServer.Core.PageReference" /> of the affected page</param>
      <param name="contentGuid">The unique identifier for the affected page</param>
      <param name="contentTypeId">The content type GUID.</param>
      <param name="name">The name of the affected page</param>
      <param name="language">The language deleted from the affected page</param>
      <param name="changedBy">The user who performed the action</param>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogContentMove">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An EPiServer CMS content move change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogContentMove.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parameterless constructor.
            Should be used in conjuction with the <see cref="M:EPiServer.ChangeLog.ChangeLogItemBase.InitializeFromStorage(System.Int64,System.String,System.DateTime,System.Int32,System.Int32,System.String)" /> method
            when a change log data has been read from the change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogContentMove.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,EPiServer.Core.ContentReference,System.Guid,EPiServer.Core.ContentReference,System.Guid,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructs a new content move change log
            </summary>
      <param name="contentLink">The <see cref="T:EPiServer.Core.PageReference" /> of the affected page</param>
      <param name="contentGuid">The page GUID of the affected page</param>
      <param name="contentTypeId">The content type id.</param>
      <param name="name">The name of the affected page</param>
      <param name="oldParent">The <see cref="T:EPiServer.Core.PageReference" /> of the old parent of the affected page</param>
      <param name="oldParentGuid">The old parent GUID.</param>
      <param name="newParent">The <see cref="T:EPiServer.Core.PageReference" /> of the new parent of the affected page</param>
      <param name="newParentGuid">The new parent GUID.</param>
      <param name="changedBy">The user who performed the action</param>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogContentMove.OldParent">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The <see cref="T:EPiServer.Core.ContentReference" /> of the old parent of the affected content
            </summary>
      <value>
      </value>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogContentMove.OldParentGuid">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The guid of the old parent of the affected content
            </summary>
      <value>
      </value>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogContentMove.NewParent">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The <see cref="T:EPiServer.Core.ContentReference" /> of the new parent of the affected content
            </summary>
      <value>
      </value>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogContentMove.NewParentGuid">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The guid of the new parent of the affected content
            </summary>
      <value>
      </value>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogContentMove.ExtensionProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get or sets properties that should be serialized
            </summary>
      <value>Property values</value>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogDirectory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An EPiServer CMS directory change log
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogDirectory.ActionType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The types of action a file change log can have
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogDirectory.ActionType.None">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. No action defined
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogDirectory.ActionType.Add">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Directory added
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogDirectory.ActionType.Move">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Directory moved
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogDirectory.ActionType.Copy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Directory copied
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogDirectory.ActionType.Delete">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Directory deleted
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogDirectory.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parameterless constructor.
            Should be used in conjuction with the <see cref="M:EPiServer.ChangeLog.ChangeLogItemBase.InitializeFromStorage(System.Int64,System.String,System.DateTime,System.Int32,System.Int32,System.String)" /> method
            when a change log data has been read from the change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogDirectory.#ctor(System.String,EPiServer.ChangeLog.Internal.ChangeLogDirectory.ActionType,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Construct a new directory change log
            </summary>
      <param name="virtualPath">The virtual path of the affected directory</param>
      <param name="action">The action taken on the directory</param>
      <param name="changedBy">The user who performed the action</param>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogDirectory.VirtualPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The virtual path of the affected directory
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogDirectory.ExtensionProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get or sets properties that should be serialized
            </summary>
      <value>Property values</value>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogDirectory.Title">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns a description of the Change Log item
            </summary>
      <value>Title of the item</value>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogDirectoryLocation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An EPiServer CMS directory location change log. Used for directory gets moved
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogDirectoryLocation.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parameterless constructor.
            Should be used in conjuction with the <see cref="M:EPiServer.ChangeLog.ChangeLogItemBase.InitializeFromStorage(System.Int64,System.String,System.DateTime,System.Int32,System.Int32,System.String)" /> method
            when a change log data has been read from the change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogDirectoryLocation.#ctor(System.String,System.String,EPiServer.ChangeLog.Internal.ChangeLogDirectory.ActionType,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Construct a new directory location change log
            </summary>
      <param name="virtualPath">The virtual path of the affected directory</param>
      <param name="newVirtualPath">The new virtual path of the affected directory</param>
      <param name="action">The action taken on the directory</param>
      <param name="changedBy">The user who performed the action</param>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogDirectoryLocation.NewVirtualPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The new virtual path of the affected directory
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogDirectoryLocation.ExtensionProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get or sets properties that should be serialized
            </summary>
      <value>Property values</value>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogFile">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An EPiServer CMS file change log
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The types of action a file change log can have
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType.None">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. No action defined
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType.Add">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. File added
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType.ContentChange">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. File content changes
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType.Move">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. File moved
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType.Copy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. File copied
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType.CheckOut">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. File check-out
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType.CheckIn">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. File checked-in
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType.UndoCheckOut">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. File check-out undone
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType.Delete">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. File deleted
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogFile.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parameterless constructor.
            Should be used in conjuction with the <see cref="M:EPiServer.ChangeLog.ChangeLogItemBase.InitializeFromStorage(System.Int64,System.String,System.DateTime,System.Int32,System.Int32,System.String)" /> method
            when a change log data has been read from the change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogFile.#ctor(System.String,EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Construct a new file change log
            </summary>
      <param name="virtualPath">The virtual path of the affected file</param>
      <param name="action">The action taken on the file</param>
      <param name="changedBy">The user who performed the action</param>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogFile.VirtualPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The virtual path of the affected file
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogFile.Title">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns a description of the Change Log item
            </summary>
      <value>Title of the item</value>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogFile.ExtensionProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get or sets properties that should be serialized
            </summary>
      <value>Property values</value>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.Internal.ChangeLogFileLocation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An EPiServer CMS file location change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogFileLocation.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parameterless constructor.
            Should be used in conjuction with the <see cref="M:EPiServer.ChangeLog.ChangeLogItemBase.InitializeFromStorage(System.Int64,System.String,System.DateTime,System.Int32,System.Int32,System.String)" /> method
            when a change log data has been read from the change log
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.Internal.ChangeLogFileLocation.#ctor(System.String,System.String,EPiServer.ChangeLog.Internal.ChangeLogFile.ActionType,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Construct a new file location change log
            </summary>
      <param name="virtualPath">The virtual path of the affected file</param>
      <param name="newVirtualPath">The new virtual path of the affected file</param>
      <param name="action">The action taken on the file</param>
      <param name="changedBy">The user who performed the action</param>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogFileLocation.NewVirtualPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The new virtual path of the affected file
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ChangeLog.Internal.ChangeLogFileLocation.ExtensionProperties">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get or sets properties that should be serialized
            </summary>
      <value>Property values</value>
      <exclude />
    </member>
    <member name="T:EPiServer.ChangeLog.UI.ChangeLogUI">
      <summary>
            A class to register localized description strings for Change Log categories and actions which can then be 
            used in the EPiServer UI
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.RegisterCategory(System.Int32,System.String)">
      <summary>
            Register a Change Log category with the EPiServer UI
            </summary>
      <param name="category">The category to register</param>
      <param name="translationKey">The translation key to the EPiServer Language system for the category</param>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.RegisterActivityType(System.String,System.String)">
      <summary>
            Register a activity type with the EPiServer UI
            </summary>
      <param name="activityType">The activityType to register</param>
      <param name="translationKey">The translation key to the EPiServer Language system for the category</param>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.RegisterCategoryAction(System.Int32,System.Int32,System.String)">
      <summary>
            Register a Change Log Action with the EPiServer UI
            </summary>
      <param name="category">The category to register the action for</param>
      <param name="action">The action to register</param>
      <param name="translationKey">The translation key to the EPiServer Language system for the action</param>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.RegisterActivityTypeAction(System.String,System.Int32,System.String)">
      <summary>
            Register a activity action with the EPiServer UI
            </summary>
      <param name="activityType">The activityType to register the action for</param>
      <param name="action">The action to register</param>
      <param name="translationKey">The translation key to the EPiServer Language system for the action</param>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.GetActivityTypeTranslationKey(EPiServer.DataAbstraction.Activities.Activity)">
      <summary>
            Get a translation key registered for an activity type-
            </summary>
      <param name="activity">The activity to get the activity type translation key for</param>
      <returns>A <see cref="T:System.String" /></returns>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.GetCategoryTranslationKey(System.Int32)">
      <summary>
            Get a translation key registered for a Change Log category
            </summary>
      <param name="category">The category to get the translation key for</param>
      <returns>A <see cref="T:System.String" /></returns>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.GetCategories">
      <summary>
            Get all of the registered category descriptions
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;string&gt;</see></returns>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.GetActivityTypes">
      <summary>
            Get all of the registered activity types
            </summary>
      <returns>All registered activity types</returns>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.GetActionTranslationKey(EPiServer.DataAbstraction.Activities.Activity)">
      <summary>
            Get a translation key registered for the specified action given by the <paramref name="activity" />.
            </summary>
      <param name="activity">The activity to get action translation for.</param>
      <returns>A <see cref="T:System.String" /></returns>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.GetCategoryActionTranslationKey(System.Int32,System.Int32)">
      <summary>
            Get a translation key registered for a Change Log category action
            </summary>
      <param name="category">The category to get the translation key for</param>
      <param name="action">The action to get the translation key for</param>
      <returns>A <see cref="T:System.String" /></returns>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.GetCategoryActions(System.Int32)">
      <summary>
            Get all of the registered action descriptions for the category
            </summary>
      <param name="category">The category to get the descriptions for</param>
      <returns>A <see cref="T:System.String" /></returns>
    </member>
    <member name="M:EPiServer.ChangeLog.UI.ChangeLogUI.GetActivityActions(System.String)">
      <summary>
            Get all of the registered action descriptions for the activity type
            </summary>
      <param name="activityType">The activity type to get actions for</param>
      <returns>A <see cref="T:System.String" /></returns>
    </member>
    <member name="T:EPiServer.ChangeLog.UI.DataExposedActivity">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataFactoryCache">
      <summary>
            Handles all page caching operations for DataFactory.
            </summary>
      <remarks>
        <para>
            The DataFactoryCache class lets you manipulate the EPiServer cache directly, 
            although you'll seldom need to do so. EPiServer uses the ASP.NET Cache class, 
            which you can also manipulate if needed.
            </para>
        <para>
            If you should need to insert data or change page relationships directly in the database, 
            you can use this class to clear the cache, ensuring EPiServer loads the new data from 
            the database.
            </para>
      </remarks>
      <example>
            Clear the cache in a scenario when you are manipulating the database without using the 
            EPiServer API.
            <code>DataFactoryCache.Clear();</code></example>
    </member>
    <member name="M:EPiServer.DataFactoryCache.CreateDependency(EPiServer.Core.ContentReference)">
      <summary>
            Get a cache dependency for content item.
            </summary>
      <returns>A initialized cache dependency object</returns>
    </member>
    <member name="M:EPiServer.DataFactoryCache.UnInitialize(EPiServer.Core.IContentEvents)">
      <summary>
            Undo the initialization.
            </summary>
      <param name="contentEvents">The content events.</param>
    </member>
    <member name="F:EPiServer.DataFactoryCache.RootKeyName">
      <summary>
            Everything stored in the DataFactoryCache has a dependency on this key.
            </summary>
    </member>
    <member name="F:EPiServer.DataFactoryCache.VersionKey">
      <summary>
            A global key that DataFactoryCache updates with a new version number everytime
            a content or listing is removed from cache. Targeted for use with output caching
            and other caching mechanism that cannot rely on a single item or page in EPiServer.
            </summary>
      <remarks>Does not update when content versions are changed</remarks>
    </member>
    <member name="F:EPiServer.DataFactoryCache.PageCacheKeyPrefix">
      <summary>
            Internal use. Exposed for testing purposes only.
            </summary>
    </member>
    <member name="F:EPiServer.DataFactoryCache.ContentVersionKeyPrefix">
      <summary>
            Internal use. Exposed for testing purposes only.
            </summary>
    </member>
    <member name="F:EPiServer.DataFactoryCache.ChildrenCacheKeyPrefix">
      <summary>
            Internal use. Exposed for testing purposes only.
            </summary>
    </member>
    <member name="F:EPiServer.DataFactoryCache.PageLanguageCacheKeyPrefix">
      <summary>
            Internal use. Exposed for testing purposes only.
            </summary>
    </member>
    <member name="F:EPiServer.DataFactoryCache.SegmentCacheKeyPrefix">
      <summary>
            Internal use. Exposed for testing purposes only.
            </summary>
    </member>
    <member name="F:EPiServer.DataFactoryCache.REMOTE_CACHE_UPDATE_LIMIT">
      <summary>
            Internal use. Exposed for testing purposes only.
            </summary>
    </member>
    <member name="M:EPiServer.DataFactoryCache.SegmentCacheKey(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Create the key used to store/retrieve matching url children segments for from the cache.
            </summary>
      <param name="parentLink">A ContentReference object for the IContent which child segments is to be matched.</param>
      <param name="urlSegment">The URL segment that is matched for.</param>
      <returns>
            A string which is the cache key.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactoryCache.PageLanguageCacheKey(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Create the key used to store/retrieve a PageData object of a specific language from the cache.
            </summary>
      <param name="contentLink">A PageReference object for the PageData to store/retrieve.</param>
      <param name="languageBranch">The language branch for which the key should be created. If languageBranch is null, a master language cache key is created</param>
      <returns>A string which is the cache key.</returns>
    </member>
    <member name="M:EPiServer.DataFactoryCache.PageMasterLanguageCacheKey(EPiServer.Core.ContentReference)">
      <summary>
            Create the key used to store/retrieve the PageData object that is Master Language
            </summary>
      <param name="contentLink">A PageReference object for the PageData to store/retrieve.</param>
      <returns>A string which is the cache key.</returns>
    </member>
    <member name="M:EPiServer.DataFactoryCache.ChildrenCacheKey(EPiServer.Core.ContentReference)">
      <summary>
            Create the key used to store/retrieve the dependency objects for children to content
            </summary>
      <param name="contentLink">The content that has the children.</param>
      <returns>A string which is the cache key.</returns>
    </member>
    <member name="M:EPiServer.DataFactoryCache.ChildrenCacheKey(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Create the key used to store/retrieve children from the cache for a specific language
            </summary>
      <param name="contentLink">The content that has the children.</param>
      <param name="languageID">The language for which the listing was made</param>
      <returns>A string which is the cache key.</returns>
    </member>
    <member name="M:EPiServer.DataFactoryCache.PageCommonCacheKey(EPiServer.Core.ContentReference)">
      <summary>
            Create the cache key used to relate the different languages of a page to each other
            </summary>
      <param name="contentLink">The page link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataFactoryCache.ContentVersionCacheKey(EPiServer.Core.ContentReference)">
      <summary>
            Creates the cache key used to cache a specific version of a content.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataFactoryCache.ContentVersionCommonCacheKey(EPiServer.Core.ContentReference)">
      <summary>
            Creates the common cache key used to clear all cached versions for a given content item.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataFactoryCache.ResolveCacheKey(System.String,System.Int32@)">
      <summary>
            Resolves the cache key into a page reference.
            </summary>
      <param name="cacheKey">The cache key.</param>
      <param name="pageReferenceID">The page reference ID.</param>
      <returns>The cache key prefic of the cache key.</returns>
    </member>
    <member name="M:EPiServer.DataFactoryCache.Initialize(EPiServer.IContentLoader,EPiServer.Core.IContentProviderManager,EPiServer.Core.IContentEvents)">
      <summary>
            Initializes the DataFactoryCache.
            </summary>
      <param name="contentLoader">The content loader.</param>
      <param name="pageProviderManager">The page enterprise service to use.</param>
      <param name="contentEvents">The content events.</param>
    </member>
    <member name="M:EPiServer.DataFactoryCache.UnInitialize">
      <summary>
            Undo the initialization.
            </summary>
    </member>
    <member name="M:EPiServer.DataFactoryCache.AllowUploadEndpoints">
      <summary>
            Start pre-populating the cache with content tree end-points.
            </summary>
      <remarks>
            This method is intended for internal use. Calling it will start an asynchronous job that reads all endpoints
            (content without children) from the content tree and puts this information into the cache. This is primarily useful 
            to speed up the tree operations in edit mode.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactoryCache.Clear">
      <summary>
            Clear all pages from cache
            </summary>
    </member>
    <member name="M:EPiServer.DataFactoryCache.RemovePage(EPiServer.Core.ContentReference)">
      <summary>
            Remove cache for a specific page including all languages
            </summary>
      <param name="contentLink">The page to remove from cache</param>
    </member>
    <member name="M:EPiServer.DataFactoryCache.RemovePageLanguage(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Remove a page on a specific language from cache
            </summary>
      <param name="contentLink">The page to remove from cache</param>
      <param name="languageBranch">The language branch of the page to remove</param>
    </member>
    <member name="M:EPiServer.DataFactoryCache.RemovePageLanguageLocally(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Remove a page on a specific language only from locally cache
            </summary>
      <param name="contentLink">The page to remove from cache</param>
      <param name="languageBranch">The language branch of the page to remove</param>
    </member>
    <member name="M:EPiServer.DataFactoryCache.RemovePages(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
      <summary>
            Remove cache for a specific page
            </summary>
      <param name="contentLinks">The pages to remove from cache</param>
    </member>
    <member name="M:EPiServer.DataFactoryCache.RemoveListing(EPiServer.Core.ContentReference)">
      <summary>
            Remove caching for children
            </summary>
      <param name="contentLink">The page to remove children from cache</param>
    </member>
    <member name="M:EPiServer.DataFactoryCache.RemoveSubTree(EPiServer.Core.ContentReference)">
      <summary>
            Remove all cached pages that are direct or indirect children.
            </summary>
      <param name="contentLink">The page that defines the root node of the subtree.</param>
      <remarks>
            Note that the page pageLink is not removed from cache by this method.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactoryCache.RemoveSegmentListing(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Remove segment cache for specifoed parent and urlsegment.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
    </member>
    <member name="P:EPiServer.DataFactoryCache.Version">
      <summary>
            The current version of the cache, this value is always updated when a Remove request is issued.
            </summary>
    </member>
    <member name="T:EPiServer.PageValidateEventHandler">
      <summary>
            The delegate type used to validate pages
            </summary>
    </member>
    <member name="T:EPiServer.PageValidateEventArgs">
      <summary>
            Event arguments passed from PageValidateEventHandler
            </summary>
    </member>
    <member name="M:EPiServer.PageValidateEventArgs.#ctor(EPiServer.Core.PageData)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageValidateEventArgs" /> class.
            </summary>
      <param name="page">The page to validate.</param>
    </member>
    <member name="P:EPiServer.PageValidateEventArgs.IsValid">
      <summary>
            Gets or sets a value indicating whether the page was successfully validated.
            </summary>
      <value>
        <c>true</c> if the page is valid; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.PageValidateEventArgs.ErrorMessage">
      <summary>
            Gets or sets an error message to describe validation errors.
            </summary>
    </member>
    <member name="M:EPiServer.Extensions.Internal.ContentDataExtensions.IsMasterLanguage(EPiServer.Core.IContentData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks if a <see cref="T:EPiServer.Core.IContent" /> instance is in the master language. 
            This method will always return true if the language isn't specified or 
            the content type doesn't implement <see cref="T:EPiServer.Core.ILocalizable" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.ContentDataExtensions.MetadataProperty(EPiServer.Core.IContentData,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a metadata property from the PropertyDataCollection mapping the property name 
            to it's metadata equivalent.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.ContentDataExtensions.Cast``1(EPiServer.Core.ContentData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Casts the pagedata to specified type T.
            </summary>
      <typeparam name="T">The requested type, has to derive from PageData.</typeparam>
      <param name="content">The object this method extends.</param>
      <returns>
            The pagedata as the specified type.
            </returns>
      <exception cref="T:System.InvalidCastException">
            The requested type T is not compatible with the ContentData content
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Return enumerable as an <see cref="T:System.Collections.Generic.IList`1" />, only iterating the enumeration if needed. 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Perform an action on each item. 
            NOTE! Be very careful that the action does NOT modify the enumerable in any way as this can result in fatal exceptions!
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Perform an action on each item while also allowing the enumerable to be filtered. 
            Action is not performed until enumerable is read out.
            NOTE! Be very careful that the action does NOT modify the enumerable in any way as this can result in fatal exceptions!
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.EnumerableExtensions.Insert``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Inserts an item at the beginning of the enumerable.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Extensions.Internal.TypeExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extension methods that find interceptable Type and PropertyInfo. 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TypeExtensions.IsInterceptableType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether [is interceptable type] [the specified t].
            </summary>
      <remarks>
                An interceptable type has following criteria 
                <para>1- Should have both Getter and Setter CompilerGenerated property</para><para>2- The CompilerGenerated property should be virtual and Public</para><para>3- The CompilerGenerated property's DeclaringType should be same as ReflectedType</para></remarks>
      <param name="t">The t.</param>
      <returns>
        <c>true</c> if [is interceptable type] [the specified t]; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TypeExtensions.InterceptableProperties(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Return Interceptables properties.
            </summary>
      <remarks>
                A property is interceptable if has the following creiteria
                <para>1- the property have both Getter and Setter CompilerGenerated accessor</para><para>2- The property should be virtual and Public</para><para>3- The property's DeclaringType should be same as ReflectedType</para></remarks>
      <param name="t">The requested type .</param>
      <returns>Interceptable PropertyInfo</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TypeExtensions.IsGenericTypeDefinitionOf(System.Type,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified type is the bound version of the generic type definition.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TypeExtensions.ImplementsGenericTypeDefinition(System.Type,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified type or one of it's base classes implements the provided generic type definition.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TypeExtensions.OriginalType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. If the type is a proxy generated type then the original type is returned, for other types the type itself is returned.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.LocalizationServiceExtensions.GetStringOrNull(EPiServer.Framework.Localization.LocalizationService,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a localized string or null if not found in the current culture or fallback culture if this behavior is configured.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.UriExtension.GetSafeAuthority(System.Uri)">
      <summary>
            Gets the Authority from an Uri. Unlike the Uri class it does not throw
            an exception for relative Uri:s instead it returns null.
            </summary>
      <param name="uri">The URI.</param>
      <returns>
      </returns>
    </member>
  </members>
</doc>