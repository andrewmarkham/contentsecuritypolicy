<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EPiServer.Data</name>
  </assembly>
  <members>
    <member name="T:EPiServer.Data.Cache.CacheItem">
      <summary>
            Represents an item cached in a <see cref="T:EPiServer.Data.Cache.CacheProvider" /> derived class instance
            </summary>
    </member>
    <member name="P:EPiServer.Data.Cache.CacheItem.Key">
      <summary>
            Gets the unique key used to identify the cached object.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:EPiServer.Data.Cache.CacheItem.Value">
      <summary>
            Gets or sets the cached object
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:EPiServer.Data.Cache.CacheItem.StoreName">
      <summary>
            Gets or sets the name of the store that the item is associated with
            </summary>
      <value>The name of the store.</value>
    </member>
    <member name="T:EPiServer.Data.Cache.ExternalCacheChangedHandler">
      <summary>
            Delegate to handle a change in the cache
            </summary>
      <param name="key">The key of the item to has changed</param>
    </member>
    <member name="T:EPiServer.Data.Cache.CacheProvider">
      <summary>
            Base class for cache implementations for Dynamic Data Store
            </summary>
    </member>
    <member name="P:EPiServer.Data.Cache.CacheProvider.Instance">
      <summary>
            Singleton access to the cache provider
            </summary>
      <value>The instance.</value>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.GetCore(System.String)">
      <summary>
            Gets a cached item from concrete cache provider
            </summary>
      <param name="key">The key of the item to get</param>
      <returns>The cached item or null if not exist in cache</returns>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.InsertCore(System.String,EPiServer.Data.Cache.CacheItem)">
      <summary>
            Inserts a item in the cache provided by concrete cache provider.  
            </summary>
      <param name="key">The key to the cached item</param>
      <param name="value">The item to cache</param>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.RemoveCore(System.String)">
      <summary>
            Removes a cached item in the cache provided by concrete cache provider.
            </summary>
      <param name="key">The key to the cached item</param>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.ClearAllCore">
      <summary>
            Clears the whole cache provided by concrete cache provider.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.ClearStoreCore(System.String)">
      <summary>
            Clears all items associated with given storeName.
            </summary>
      <param name="storeName">Name of the store.</param>
    </member>
    <member name="P:EPiServer.Data.Cache.CacheProvider.ExternalCacheHandler">
      <summary>
            Gets the cache notifier used by concrete cache provider.
            </summary>
      <value>The cache notifier.</value>
    </member>
    <member name="P:EPiServer.Data.Cache.CacheProvider.Name">
      <summary>
            Gets the name of the provider instance
            </summary>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the cache provider.
            </summary>
      <param name="name">The name of the provider</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific configuration for this provider.</param>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.Uninitialize">
      <summary>
            Un-initialize the provider.
            </summary>
      <remarks>
            Will undo all initializations made by the Initialize method.
            </remarks>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.Get(System.String,System.Type)">
      <summary>
            Gets a cached item from cache with specific key and type
            </summary>
      <param name="key">The key associated with the item</param>
      <param name="type">The requested</param>
      <returns>An cached item if exist in cache otherwise null</returns>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.Get``1(System.String)">
      <summary>
            Gets a typed object from cache
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="key">The key.</param>
      <returns>An cached item if exist in cache otherwise null</returns>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.Get(System.String)">
      <summary>
            Gets a cached item given its unique key
            </summary>
      <param name="key">The key to the cached item</param>
      <returns>The cached item</returns>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.Remove(System.String)">
      <summary>
            Removes a cached item associated with given unique key
            </summary>
      <param name="key">The key to the cached item</param>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.Add(System.String,System.Object,System.String,System.String[])">
      <summary>
            Adds an item to cache with an optional list of dependencies.
            </summary>
      <param name="key">The key to the item to be cached</param>
      <param name="value">The item to cache</param>
      <param name="storeName">The name of the store to associate this item with</param>
      <param name="dependencyKeys">The keys to the items that this item has a dependency to</param>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.Add(System.String,EPiServer.Data.Dynamic.PropertyBag,System.String,System.Collections.Generic.IDictionary{EPiServer.Data.Identity,System.Object},System.String[])">
      <summary>
            Adds an item to cache with an optional list of dependencies.
            </summary>
      <param name="key">The key to the item to be cached</param>
      <param name="propertyBag">The object to cache as a PropertyBag</param>
      <param name="storeName">Name of the store.</param>
      <param name="loadedObjectsInContext">The loaded objects in context.</param>
      <param name="dependencyKeys">The keys to the items that this item has a dependency to</param>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.ClearStore(System.String)">
      <summary>
            Clears the cache for items associated with a specific store
            </summary>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.Clear">
      <summary>
            Clears the whole cache
            </summary>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheProvider.SubscribeCacheChanged">
      <summary>
            Subscribe cache changes
            </summary>
    </member>
    <member name="T:EPiServer.Data.Cache.ICacheable">
      <summary>
            Dictates how an item in the cache should identify itself. If implemented by a collection, 
            the items within it must also implement this interface.
            </summary>
    </member>
    <member name="P:EPiServer.Data.Cache.ICacheable.CacheKey">
      <summary>
            Returns the cache key under which the current object should be stored.
            </summary>
      <remarks>
        <para>Implementing the <see cref="T:EPiServer.Data.Cache.ICacheable" /> interface enables the cache subsystem implemented by 
            CacheHandler to automatically store an object under its intended cache key without
            specifying it explicitly at the time of the store.</para>
        <para>When implemented by a collection and the elements contained in the collection, it allows
            the cache system to automatically track dependencies from the contained items to the collection.
            This way, the collection gets invalidated when an item within the collection is invalidated.</para>
      </remarks>
    </member>
    <member name="T:EPiServer.Data.Cache.IDataCacheProviderFactory">
      <summary>
            Used to create a <see cref="T:EPiServer.Data.Cache.CacheProvider" /></summary>
    </member>
    <member name="M:EPiServer.Data.Cache.IDataCacheProviderFactory.Create">
      <summary>
            Create a <see cref="T:EPiServer.Data.Cache.CacheProvider" /></summary>
    </member>
    <member name="T:EPiServer.Data.Cache.TypeOfEventAction">
      <summary>
            Represents the different options used for cache notifications
            </summary>
    </member>
    <member name="F:EPiServer.Data.Cache.TypeOfEventAction.Remove">
      <summary>
            Items should be removed from cache
            </summary>
    </member>
    <member name="F:EPiServer.Data.Cache.TypeOfEventAction.ClearStore">
      <summary>
            Items associated with given store should be removed
            </summary>
    </member>
    <member name="F:EPiServer.Data.Cache.TypeOfEventAction.Clear">
      <summary>
            Cache should be cleared
            </summary>
    </member>
    <member name="M:EPiServer.Data.Cache.CacheChangedEventArgs.#ctor(EPiServer.Data.Cache.TypeOfEventAction,System.Collections.Generic.ICollection{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Data.Cache.CacheChangedEventArgs" /> class.
            </summary>
      <param name="typeOfEventAction">The type of event action.</param>
      <param name="items">The items related to the action</param>
    </member>
    <member name="P:EPiServer.Data.Cache.CacheChangedEventArgs.ItemsToProcess">
      <summary>
            Gets or sets the items to process
            </summary>
      <value>The item to process.</value>
    </member>
    <member name="P:EPiServer.Data.Cache.CacheChangedEventArgs.TypeOfEventAction">
      <summary>
            Gets or sets the type of event action.
            </summary>
      <value>The type of event action.</value>
    </member>
    <member name="E:EPiServer.Data.Cache.IExternalCacheHandler.CacheChanged">
      <summary>
            Occurs when some cached item has changed in an external loadbalanced cache
            </summary>
    </member>
    <member name="M:EPiServer.Data.Cache.IExternalCacheHandler.Send(EPiServer.Data.Cache.CacheChangedEventArgs)">
      <summary>
            Send the specified event data to any external listeners 
            </summary>
      <param name="eventData">The <see cref="T:EPiServer.Data.Cache.CacheChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Data.Cache.Internal.LocalCache`2">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generic key to value cache
            This class is threadsafe
            </summary>
      <typeparam name="TKey">The type of key to access the cache</typeparam>
      <typeparam name="TValue">The type of value to store in the cache</typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Data.Cache.Internal.LocalCache`2" /> class that is empty and has the default initial capacity
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.#ctor(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Data.Cache.Internal.LocalCache`2" /> class that is empty and has the specified initial capacity
            </summary>
      <param name="capacity">The initial number of elements that the <see cref="T:EPiServer.Data.Cache.Internal.LocalCache`2" /> can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Data.Cache.Internal.LocalCache`2" /> class that is empty and has the equality comparer passed
            </summary>
      <param name="comparer">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.Add(`0,`1)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds the specified key and value to the cache
            </summary>
      <param name="key">The key of the element to add</param>
      <param name="value">The value of the element to add</param>
      <exception cref="T:System.ArgumentNullException">Key is null</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the cache</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.Add(`0,System.Boolean,System.Boolean,System.Func{`1})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new element or overwrites any existing value for the specified key
            </summary>
      <param name="key">The key of the value to set</param>
      <param name="cacheNullValues">Specifies if null values returned from the delegate should be stored in the cache</param>
      <param name="overwriteExistingValue">
        <code>true</code> if an existing value in the cache should be updated with the new value, otherwise <code>false</code></param>
      <param name="action">A delegate to generate the value to set in the cache</param>
      <returns>The value generated by the delegate</returns>
      <exception cref="T:System.ArgumentNullException">Key is null</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.Add(`0,System.Boolean,System.Boolean,System.Func{`1},System.Action{`0,`1})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new element or overwrites any existing value for the specified key
            </summary>
      <param name="key">The key of the value to set</param>
      <param name="cacheNullValues">Specifies if null values returned from the delegate should be stored in the cache</param>
      <param name="overwriteExistingValue">
        <code>true</code> if an existing value in the cache should be updated with the new value, otherwise <code>false</code></param>
      <param name="getAction">A delegate to generate the value</param>
      <param name="setAction">A delegate to set the value to the cache</param>
      <returns>The value generated by the getValueAction delegate</returns>
      <exception cref="T:System.ArgumentNullException">Key is null</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.Remove(`0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Remove an item from the cache
            </summary>
      <param name="key">The key of the value to remove </param>
      <exception cref="T:System.ArgumentNullException">key is null&gt;</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.TryGetValue(`0,`1@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the value associated with the specified key. 
            </summary>
      <param name="key">The key of the value to get </param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized</param>
      <returns>
        <code>true</code>if the cache contains an element with the specified key; otherwise, <code>false</code>.</returns>
      <exception cref="T:System.ArgumentNullException">key is null&gt;</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.ContainsKey(`0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the cache contains the specified key.
            </summary>
      <param name="key">The key to locate in the cache</param>
      <returns>
        <code>true</code> if the cache contains an element with the specified key; otherwise, <code>false</code>.</returns>
      <exception cref="T:System.ArgumentNullException">key is null&gt;</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.Clear">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the cache of all keys and values
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Cache.Internal.LocalCache`2.Item(`0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get or set</param>
      <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />,
            and a set operation creates a new element or overwrites any existing value for the specified key.</returns>
      <exception cref="T:System.ArgumentNullException">key is null&gt;</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The Get operation is called and key does not exist in the collection.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.LocalCache`2.ShallowCopy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Does a shallow copy of the items. 
            </summary>
      <returns>A shallow copy of the items</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Cache.Internal.ReplicatedCache`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provides a cache than can be replicated in a load balanced environment
            </summary>
      <typeparam name="TValue">
      </typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Cache.Internal.ReplicatedCache`1.Add(System.String,System.Boolean,System.Boolean,System.Func{`0},System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new element or overwrites any existing value for the specified key
            </summary>
      <param name="key">The key of the value to set</param>
      <param name="cacheNullValues">Specifies if null values returned from the delegate should be stored in the cache</param>
      <param name="overwriteExistingValue">
        <code>true</code> if an existing value in the cache should be updated with the new value, otherwise <code>false</code></param>
      <param name="action">A delegate to generate the value to set in the cache</param>
      <param name="broadcast">True if the action performed should cause the cache event should be broadcasted</param>
      <returns>The value generated by the delegate</returns>
      <exception cref="T:System.ArgumentNullException">Key is null</exception>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Cache.NullCacheProvider">
      <summary>
            Null Cache Provider for Dynamic Data Store. Should be used when caching isn't required
            </summary>
    </member>
    <member name="T:EPiServer.Data.ConnectionStringOptions">
      <summary>
             Represents a single, named connection string.
            </summary>
    </member>
    <member name="P:EPiServer.Data.ConnectionStringOptions.ConnectionString">
      <summary>
            Gets or sets the connection string.
            </summary>
    </member>
    <member name="P:EPiServer.Data.ConnectionStringOptions.Name">
      <summary>
             Gets or sets the name of the connection string.
            </summary>
      <remarks>The default name is 'EPiServerDB'.</remarks>
    </member>
    <member name="P:EPiServer.Data.ConnectionStringOptions.ProviderName">
      <summary>
            Gets or sets the provider name.
            </summary>
      <remarks>The default provider name is 'System.Data.SqlClient'.</remarks>
    </member>
    <member name="M:EPiServer.Data.ConnectionStringOptions.op_Implicit(System.String)~EPiServer.Data.ConnectionStringOptions">
      <summary>
            Convert the connectionString string to <see cref="T:EPiServer.Data.ConnectionStringOptions" />.
            </summary>
      <param name="connectionString">The connection string</param>
    </member>
    <member name="T:EPiServer.Data.DataAccessOptions">
      <summary>
            Specifies options on how to connect to the database.
            </summary>
    </member>
    <member name="P:EPiServer.Data.DataAccessOptions.ConnectionStrings">
      <summary>
            List of connection strings to use.
            </summary>
    </member>
    <member name="P:EPiServer.Data.DataAccessOptions.DefaultConnectionStringName">
      <summary>
            The name of the default connection string to use.
            </summary>
      <remarks>The default connection string is 'EPiServerDB'.</remarks>
    </member>
    <member name="P:EPiServer.Data.DataAccessOptions.Retries">
      <summary>
            The number of retries in case a deadlock is detected
            </summary>
      <remarks>The default number of retries is 3.</remarks>
    </member>
    <member name="P:EPiServer.Data.DataAccessOptions.RetryDelay">
      <summary>
            The delay between retries in case a deadlock is detected.
            </summary>
      <remarks>The default delay is 100 ms.</remarks>
    </member>
    <member name="P:EPiServer.Data.DataAccessOptions.DatabaseQueryTimeout">
      <summary>
            The timeout used for database queries.
            </summary>
      <remarks>The default timeout is 30 s.</remarks>
    </member>
    <member name="P:EPiServer.Data.DataAccessOptions.DatabaseMode">
      <summary>
            Defines the mode that the database should be working in. 
            </summary>
      <remarks>The default mode is <see cref="F:EPiServer.Data.DatabaseMode.ReadWrite" />.</remarks>
    </member>
    <member name="P:EPiServer.Data.DataAccessOptions.DisableDateTimeKindValidation">
      <summary>
            Defines if the datetime kind of the database should be validated to be UTC when the system is initialized.. 
            </summary>
      <remarks>The default value is true.</remarks>
    </member>
    <member name="P:EPiServer.Data.DataAccessOptions.UpdateDatabaseSchema">
      <summary>
            Defines if the database schema should be updated automatically when the system is initialized
            in case the schema has changed.
            </summary>
      <remarks>The default value is false.</remarks>
    </member>
    <member name="P:EPiServer.Data.DataAccessOptions.CreateDatabaseSchema">
      <summary>
            Defines if the database schema should be created automatically when the system is initialized
            and the database is empty.
            </summary>
      <remarks>The default value is false.</remarks>
    </member>
    <member name="M:EPiServer.Data.DataAccessOptions.SetConnectionString(System.String)">
      <summary>
            Sets the default connection string to the provided value. 
            </summary>
      <remarks>
            If a default connection string already exist it will be overwritten.
            If no connection string that matches the default connection string exists it will be added.
            </remarks>
      <param name="connectionString">The default connection string to use.</param>
    </member>
    <member name="F:EPiServer.Data.DatabaseDateTimeKind.Unspecified">
      <summary>
             Consider the time represented is not specified as either local time or Coordinated Universal Time (UTC).
            </summary>
    </member>
    <member name="F:EPiServer.Data.DatabaseDateTimeKind.Local">
      <summary>
            Consider the time is as local (date time in the database)
            </summary>
    </member>
    <member name="F:EPiServer.Data.DatabaseDateTimeKind.Utc">
      <summary>
            Consider the time is as utc (date time in the database)
            </summary>
    </member>
    <member name="T:EPiServer.Data.DatabaseDateTimeHandler">
      <summary>
            Helper class to convert datatime from and to database.
            </summary>
    </member>
    <member name="P:EPiServer.Data.DatabaseDateTimeHandler.DatabaseDateTimeKind">
      <summary>
            Property for DatbaseDataTimeKind
            </summary>
    </member>
    <member name="M:EPiServer.Data.DatabaseDateTimeHandler.ConvertFromDatabase(System.Object,EPiServer.Data.DatabaseDateTimeKind)">
      <summary>
            Convert value from database to datetime according to DatabaseDateTimeKind. If the DatabaseDateTimeKind is DatabaseDateTimeKind.Local is be converted to local otherwise to utc.
            </summary>
      <param name="value">the database datetime value </param>
      <param name="databaseDateTimeKind">The database datetime kind.</param>
      <returns>Converted to datetime according to <paramref name="databaseDateTimeKind" /></returns>
    </member>
    <member name="M:EPiServer.Data.DatabaseDateTimeHandler.ConvertToDatabase(System.DateTime,EPiServer.Data.DatabaseDateTimeKind)">
      <summary>
            Convert value to database to datetime according to DatabaseDateTimeKind. If the DatabaseDateTimeKind is DatabaseDateTimeKind.Local is be converted to local otherwise to utc.
            </summary>
      <param name="value">the date</param>
      <param name="databaseDateTimeKind">The database datetime kind.</param>
      <returns>Converted to datetime according to <paramref name="databaseDateTimeKind" /></returns>
    </member>
    <member name="M:EPiServer.Data.DatabaseDateTimeHandler.ConvertFromDatabase(System.Object)">
      <summary>
            Convert value from database to datetime according to DatabaseDateTimeKind. If the DatabaseDateTimeKind is DatabaseDateTimeKind.Local is be converted to local otherwise to utc.
            </summary>
      <param name="value">the database datetime value </param>
      <returns>Converted to datetime according to the DatabaseDateTimeKind.</returns>
    </member>
    <member name="M:EPiServer.Data.DatabaseDateTimeHandler.ConvertToDatabase(System.DateTime)">
      <summary>
            Convert value to database to datetime according to DatabaseDateTimeKind. If the DatabaseDateTimeKind is DatabaseDateTimeKind.Local is be converted to local otherwise to utc.
            </summary>
      <param name="value">the date</param>
      <returns>Converted to datetime according to the DatabaseDateTimeKind.</returns>
    </member>
    <member name="T:EPiServer.Data.DatabaseDateTimeHandlerExtensions">
      <summary>
            Helper class for converting Datetime to/from database
            </summary>
    </member>
    <member name="M:EPiServer.Data.DatabaseDateTimeHandlerExtensions.ConvertToDatabase(EPiServer.Data.DatabaseDateTimeHandler,System.Nullable{System.DateTime})">
      <summary>
            Convert a nullable datetime, if the value is null then returns null otherwise convert the value for storing in database.
            </summary>
      <param name="dateTimeHandler">The datetime handler</param>
      <param name="value">The value</param>
      <returns>null if the value is null otherwise converted datetime</returns>
    </member>
    <member name="T:EPiServer.Data.DatabaseMode">
      <summary>
            Define database mode
            </summary>
    </member>
    <member name="F:EPiServer.Data.DatabaseMode.ReadWrite">
      <summary>
            ReadWrite mode 
            </summary>
    </member>
    <member name="F:EPiServer.Data.DatabaseMode.ReadOnly">
      <summary>
            ReadOnly mode 
            </summary>
    </member>
    <member name="T:EPiServer.Data.DataInitialization">
      <summary>
            Main initialization module for EPiServer.Data
            </summary>
    </member>
    <member name="M:EPiServer.Data.DataInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Data.DataInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Data.DataInitialization.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Data.DateTimeConverter">
      <summary>
            Helper class to handler date time from and to local and utc.
            </summary>
    </member>
    <member name="P:EPiServer.Data.DateTimeConverter.MinValue">
      <summary>
            Gets the lowest value that can be saved.
            </summary>
      <value>The lowest value that can be saved.</value>
      <remarks>The lowest value is currently 1753-01-01.</remarks>
    </member>
    <member name="P:EPiServer.Data.DateTimeConverter.MaxValue">
      <summary>
            Gets the highest value that can be saved.
            </summary>
      <value>The highest value that can be saved.</value>
      <remarks>The highest value is currently 9999-12-31.</remarks>
    </member>
    <member name="M:EPiServer.Data.DateTimeConverter.ReadDatabaseValueAsUtc(System.Object)">
      <summary>
            Read an object returned from a database call to a UTC <see cref="T:DateTime" /> value.
            </summary>
      <param name="value">
            An object representing a <see cref="T:DateTime" /> returned from a database call.
            </param>
      <returns>
            The converted value, or null if value is null or equal to <see cref="F:DBNull.Value" />.
            </returns>
    </member>
    <member name="M:EPiServer.Data.DateTimeConverter.ReadDatabaseValueAsLocal(System.Object)">
      <summary>
            Read an object returned from a database call to a Local <see cref="T:DateTime" /> value.
            </summary>
      <param name="value">
            An object representing a <see cref="T:DateTime" /> returned from a database call.
            </param>
      <returns>
            The converted value, or null if value is null or equal to <see cref="F:DBNull.Value" />.
            </returns>
    </member>
    <member name="M:EPiServer.Data.DateTimeConverter.ToLocalTime(System.DateTime,System.Boolean)">
      <summary>
            Converts <paramref name="value" /> to local time.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="convertUnspecified">
            If true, values with <see cref="P:DateTime.Kind" /> set to 
            <see cref="F:DateTimeKind.Unspecified" /> will be converted to local time (the same
            behavior as <see cref="M:DateTime.ToLocalTime" />); if false,
            they will only have <see cref="P:DateTime.Kind" /> set to 
            <see cref="F:DateTimeKind.Local" />.
            </param>
      <returns>
            The possibly converted <see cref="T:DateTime" /> value.
            </returns>
    </member>
    <member name="M:EPiServer.Data.DateTimeConverter.ToUniversalTime(System.DateTime,System.Boolean)">
      <summary>
            Converts <paramref name="value" /> to universal time.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="convertUnspecified">
            If true, values with <see cref="P:DateTime.Kind" /> set to 
            <see cref="F:DateTimeKind.Unspecified" /> will be converted to universal time (the same
            behavior as <see cref="M:DateTime.ToUniversalTime" />); if false,
            they will only have <see cref="P:DateTime.Kind" /> set to 
            <see cref="F:DateTimeKind.Utc" />.
            </param>
      <returns>
            The possibly converted <see cref="T:DateTime" /> value.
            </returns>
    </member>
    <member name="M:EPiServer.Data.DateTimeConverter.ParseToUtc(System.String)">
      <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" />
            equivalent, with a <see cref="P:System.DateTime.Kind" /> value of <see cref="F:DateTimeKind.Utc" />.
            </summary>
      <param name="value">A string containing a date and time to convert.</param>
      <returns>
            An object that is equivalent to the date and time contained in <paramref name="value" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not contain a valid string representation of a date and time.
            </exception>
      <remarks>
            If a call to <see cref="M:DateTime.Parse(string)" /> with the same parameter would return
            a value with <see cref="P:System.DateTime.Kind" /> equal to <see cref="F:DateTimeKind.Local" />,
            then the value is converted to local time; otherise, the result value is specified as
            UTC.
            </remarks>
    </member>
    <member name="M:EPiServer.Data.DateTimeConverter.ParseToUtc(System.String,System.IFormatProvider)">
      <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" />
            equivalent using the specified culture-specific format information, with a 
            <see cref="P:System.DateTime.Kind" /> value of <see cref="F:DateTimeKind.Utc" />.
            </summary>
      <param name="value">A string containing a date and time to convert.</param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="value" />.</param>
      <returns>An object that is equivalent to the date and time contained in s as specified by <paramref name="provider" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not contain a valid string representation of a date and time.
            </exception>
      <remarks>
            If a call to <see cref="M:DateTime.Parse(string)" /> with the same parameter would return
            a value with <see cref="P:System.DateTime.Kind" /> equal to <see cref="F:DateTimeKind.Local" />,
            then the value is converted to local time; otherise, the result value is specified as
            UTC.
            </remarks>
    </member>
    <member name="M:EPiServer.Data.DateTimeConverter.TryParseToUtc(System.String,System.DateTime@)">
      <summary>
            Converts the specified string representation of a date and time to its 
            <see cref="T:System.DateTime" /> equivalent, with a 
            <see cref="P:System.DateTime.Kind" /> value of <see cref="F:DateTimeKind.Utc" />; and returns a 
            value that indicates whether the conversion succeeded.
            </summary>
      <param name="value">A string containing a date and time to convert.</param>
      <param name="result">
            When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the 
            date and time contained in <paramref name="value" />, if the conversion succeeded,
            or <see cref="F:DateTime.MinValue" /> if the conversion failed. The conversion fails if 
            the <paramref name="value" /> parameter is null, is an empty string (""), or does 
            not contain a valid string representation of a date and time. This parameter is passed
            uninitialized.</param>
      <returns>
            True if the <paramref name="value" /> parameter was converted successfully; 
            otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The date is in Japanese Emperor Year (Wareki) format and the year is out of range.
            </exception>
      <remarks>
            If a call to <see cref="M:DateTime.Parse(string)" /> with the same parameter would return
            a value with <see cref="P:System.DateTime.Kind" /> equal to <see cref="F:DateTimeKind.Local" />,
            then the value is converted to local time; otherise, the result value is specified as
            UTC.
            </remarks>
    </member>
    <member name="T:EPiServer.Data.Dynamic.TypeToStoreMapper">
      <summary>
            Delegate to map a property on a type to a specific store
            </summary>
      <param name="propertyName">The name of the property to be mapped</param>
      <param name="propertyValue">The value of the property to be mapped</param>
      <returns>A <see cref="T:System.String" /> containing the store name to map the value to</returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.FallbackTypeResolverEventHandler">
      <summary>
            Event handler for resolving unknown types
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.DynamicDataStore">
      <summary>
            Base class for DynamicDataStore implementations 
            </summary>
      <remarks>
            All Methods and Properties that required storage access are abstract fpr mockability.
            Concerete implementations of those methods are implemented with the 'Internal' prefix
            to allow derived classes to take advantage if the in-build functionality
            </remarks>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.GetFallbackTypeResolver(System.Action{EPiServer.Data.Dynamic.FallbackTypeResolverEventArgs})">
      <summary>
            A method that creates a function that can be passed as a parameter to the <see cref="M:EPiServer.Data.Dynamic.TypeResolver.GetType(System.String,System.Boolean,EPiServer.Data.Dynamic.FallbackTypeResolver)" />
            A callback can be specified as parameter to this method in order to get response from the FallbackTypeResolver event handler
            </summary>
      <param name="fallbackArgsCallback">A callback that can return <see cref="T:EPiServer.Data.Dynamic.FallbackTypeResolverEventArgs" /></param>
      <returns>A function of <see cref="P:EPiServer.Data.Dynamic.DynamicDataStore.FallbackTypeResolver" /> type </returns>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStore.InternalStoreDefinition">
      <summary>
            A copy of the <see cref="P:EPiServer.Data.Dynamic.DynamicDataStore.StoreDefinition" /> being used by the store
            </summary>
      <remarks>Any changes made to the returned store definition are not automatically reflected in this instance. Call the Refresh method to update this instance with the lastest <see cref="P:EPiServer.Data.Dynamic.DynamicDataStore.StoreDefinition" /></remarks>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStore.InternalName">
      <summary>
            The name of the store
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStore.InternalDataStoreProvider">
      <summary>
            The data store provider for the store
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.InternalRefresh">
      <summary>
            Refreshes the store's definition and local copies of globals caches. 
            The internal identity map for this store instance is cleared.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.InternalDelete(EPiServer.Data.Identity)">
      <summary>
            Delete an item from the store
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> of the item to delete</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.InternalDelete(System.Object)">
      <summary>
            Delete an item from the store
            </summary>
      <param name="value">The object to delete from the store.
            The <see cref="T:EPiServer.Data.Identity" /> of the item to delete must be able to be derived from <paramref name="value" />.
            This is done by looking for a property called "Id" implemented by <paramref name="value" /> or by trying to 
            match <paramref name="value" /> against the in-memory list of items loaded through the same instance of the store
            </param>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="T:EPiServer.Data.Identity" /> of <paramref name="value" /> cannot be derived</exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.InternalDeleteAll">
      <summary>
            Delete all items in the store
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStore.StoreDefinition">
      <summary>
            The <see cref="P:EPiServer.Data.Dynamic.DynamicDataStore.StoreDefinition" /> for the current store
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStore.Name">
      <summary>
            The name of the current store
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStore.KeepObjectsInContext">
      <summary>
            Gets or sets a value indicating whether this instance should keep loaded/saved objects in its context.
            </summary>
      <remarks>
        <para>
            To be able to recognize that a "POCO" (that is an object with no Id parameter) object 
            is the same object instance between several operations (e.g. a Load followed by a Save) this value should be set to true.
            </para>
        <para>
            If the same instance is used for many Load/Save operations then the context might hold references to 
            many objects if this value is true.
            </para>
      </remarks>
      <value>
        <c>true</c> if the instance is set to store objects in context; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStore.DataStoreProvider">
      <summary>
            The store's <see cref="P:EPiServer.Data.Dynamic.DynamicDataStore.DataStoreProvider" /></summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Refresh">
      <summary>
            Refresh any cached properties from their source
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Save(System.Object)">
      <summary>
            Save <paramref name="value" /> in the store
            </summary>
      <param name="value">The object to save</param>
      <returns>The identity of the saved object</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Save(System.Object,EPiServer.Data.Dynamic.TypeToStoreMapper)">
      <summary>
            Save <paramref name="value" /> in the store
            </summary>
      <param name="value">The object to save</param>
      <param name="typeToStoreMapper">A delegate of type <see cref="T:EPiServer.Data.Dynamic.TypeToStoreMapper" /> to use when mapping properties to stores</param>
      <returns>The identity of the saved object</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Save(System.Object,EPiServer.Data.Identity)">
      <summary>
            Save <paramref name="value" /> in the store
            </summary>
      <param name="value">The object to save</param>
      <param name="id">The id saved the object under</param>
      <returns>The identity of the saved object</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Save(System.Object,EPiServer.Data.Identity,EPiServer.Data.Dynamic.TypeToStoreMapper)">
      <summary>
            Save <paramref name="value" /> in the store
            </summary>
      <param name="value">The object to save</param>
      <param name="id">The id saved the object under</param>
      <param name="typeToStoreMapper">A delegate of type <see cref="T:EPiServer.Data.Dynamic.TypeToStoreMapper" /> to use when mapping properties to stores</param>
      <returns>The identity of the saved object</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Load(EPiServer.Data.Identity)">
      <summary>
            Load an instance of an object from the store as the same .NET class it was saved as
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> of the item to load</param>
      <returns>The native object stored in the store.
            If the item was originally saved in a <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> then a PropertyBag will be returned otherwise
            an instance of the <see cref="T:System.Type" /> originally saved will be returned.
            </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Load``1(EPiServer.Data.Identity)">
      <summary>
            Load an instance of an object from the store into a TResult
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> of the item to load</param>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <returns>An instance of TResult</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.LoadAsPropertyBag(EPiServer.Data.Identity)">
      <summary>
            Load an instance of an object from the store into a <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></summary>
      <param name="id">The identity of the item to load</param>
      <returns>An instance of PropertyBag or null if the item was not found in the store</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.LoadAll">
      <summary>
            Loads all objects from the store as the same .NET class they were saved as
            </summary>
      <returns>Enumeration of <see cref="T:System.Object" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.LoadAll``1">
      <summary>
            Loads all objects from the store as TResult instances
            </summary>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <returns>Enumeration of TResult</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.LoadAllAsPropertyBag">
      <summary>
            Loads all objects from the store as <see cref="T:EPiServer.Data.Dynamic.PropertyBag" />  instances
            </summary>
      <returns>Enumeration of <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Find(System.String,System.Object)">
      <summary>
            Find objects of from the store that match the condition and return them as the same .NET class they were saved as
            </summary>
      <param name="propertyName">The name of the property to use when finding objects</param>
      <param name="value">The value of the property to match to</param>
      <returns>Enumeration of <see cref="T:System.Object" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Find(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Find objects of from the store that match the conditions and return them as as the same .NET they were saved as
            </summary>
      <param name="parameters">An dictionary containing property names and values to use when finding objects</param>
      <returns>Enumeration of <see cref="T:System.Object" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Find``1(System.String,System.Object)">
      <summary>
            Find objects of from the store that match the condition and return them as TResult instances
            </summary>
      <param name="propertyName">The name of the property to use when finding objects</param>
      <param name="value">The value of the property to match to</param>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <returns>Enumeration of TResult</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Find``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Find objects of from the store that match the conditions and return them as as TResult instances
            </summary>
      <param name="parameters">An dictionary containing property names and values to use when finding objects</param>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <returns>Enumeration of TResult</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.FindAsPropertyBag(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Find objects of from the store that match the conditions and return them as as <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> instances
            </summary>
      <param name="parameters">An dictionary containing property names and values to use when finding objects</param>
      <returns>Enumeration of <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.FindAsPropertyBag(System.String,System.Object)">
      <summary>
            Find objects of from the store that match the condition and return them as <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> instances
            </summary>
      <param name="propertyName">The name of the property to use when finding objects</param>
      <param name="value">The value of the property to match to</param>
      <returns>Enumeration of <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Items">
      <summary>
            An ordered queryable to allow Linq operations to be performed against the store
            </summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable" /> of <see cref="T:System.Object" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Items``1">
      <summary>
            An ordered queryable to allow Linq operations to be performed against the store
            </summary>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable" /> of TResult</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.ItemsAsPropertyBag">
      <summary>
            An ordered queryable to allow Linq operations to be performed against the store
            </summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable" /> of <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Delete(EPiServer.Data.Identity)">
      <summary>
            Delete an item from the store
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> of the item to delete</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.Delete(System.Object)">
      <summary>
            Delete an item from the store
            </summary>
      <param name="value">The object to delete from the store.
            The <see cref="T:EPiServer.Data.Identity" /> of the item to delete must be able to be derived from <paramref name="value" />.
            This is done by looking for a property called "Id" implemented by <paramref name="value" /> or by trying to 
            match <paramref name="value" /> against the in-memory list of items loaded through the same instance of the store
            </param>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="T:EPiServer.Data.Identity" /> of <paramref name="value" /> cannot be derived</exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.DeleteAll">
      <summary>
            Delete all items in the store
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.RegisterItemSavedEventHandler(System.String,System.EventHandler{EPiServer.Data.Dynamic.ItemEventArgs})">
      <summary>
            Register event fired when a store is saved
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="eventHandler">Eventhandler to register </param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.UnregisterItemSavedEventHandler(System.String,System.EventHandler{EPiServer.Data.Dynamic.ItemEventArgs})">
      <summary>
            UnRegister event save for an specific store
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="eventHandler">Eventhandler to Unregister</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.RegisterItemDeletedEventHandler(System.String,System.EventHandler{EPiServer.Data.Dynamic.ItemEventArgs})">
      <summary>
            Register event fired when a store is Deleted
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="eventHandler">Eventhandler to register</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.UnregisterItemDeletedEventHandler(System.String,System.EventHandler{EPiServer.Data.Dynamic.ItemEventArgs})">
      <summary>
            UnRegister event delete for an specific store
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="eventHandler">Eventhandler to Unregister</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.RegisterDeletedAllEventHandler(System.String,System.EventHandler{EPiServer.Data.Dynamic.ItemEventArgs})">
      <summary>
            Register event fired when a DeletedAll for an store
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="eventHandler">Eventhandler to register</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStore.UnregisterDeletedAllEventHandler(System.String,System.EventHandler{EPiServer.Data.Dynamic.ItemEventArgs})">
      <summary>
            UnRegister event DeleteAll for an specific store
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="eventHandler">Eventhandler to Unregister</param>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStoreFactory.Instance">
      <summary>
            The static instance of the <see cref="T:EPiServer.Data.Dynamic.DynamicDataStoreFactory" /> for the application
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.CreateStore(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
      <summary>
            Create an new store with the name given.
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="storeName">The name of the store to create</param>
      <param name="typeBag">A type bag containing the names and Types of the properties that will be saved in the store</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.CreateStore(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>
            Create an new store with the name given.
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="storeName">The name of the store to create</param>
      <param name="typeBag">A type bag containing the names and Types of the properties that will be saved in the store</param>
      <param name="parameters">Additional paramteres to use when created and mapping the store against the type bag</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.CreateStore(System.Type)">
      <summary>
            Creates an new store with a name returned from the <see cref="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.GetStoreNameForType(System.Type)" /> method
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="type">The type to use to define the store</param>
      <remarks>The <paramref name="type" /> will be reflected to create the store definition</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.CreateStore(System.Type,EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>
            Creates an new store with a name returned from the <see cref="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.GetStoreNameForType(System.Type)" /> method
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="type">The type to use to define the store</param>
      <param name="parameters">Additional paramteres to use when created and mapping the store against the type</param>
      <remarks>The <paramref name="type" /> will be reflected to create the store definition</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.CreateStore(System.String,System.Type)">
      <summary>
            Creates an new store with the name given
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="storeName">The name of the store</param>
      <param name="type">The type to use to define the store</param>
      <remarks>The <paramref name="type" /> will be reflected to create the store definition</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.CreateStore(System.String,System.Type,EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>
            Creates an new store with a the name given
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="storeName">The name of the store</param>
      <param name="parameters">Additional paramteres to use when created and mapping the store against the type T</param>
      <param name="type">The type to use to define the store</param>
      <remarks>The <paramref name="type" /> will be reflected to create the store definition</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.GetStore(System.String)">
      <summary>
            Get the store with the name given. If a store does not exist for the name then null is returned.    
            </summary>
      <remarks>Use the <see cref="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.CreateStore(System.String,System.Type)" /> method to create a new store</remarks>
      <param name="storeName">The name of the store to return</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance or null if the store does not exist</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.GetStore(System.Type)">
      <summary>
            Get the store with the name returned from the <see cref="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.GetStoreNameForType(System.Type)" /> method. If a store does not exist for the name then null is returned.    
            If a store does not exist for the name then null is returned.
            </summary>
      <remarks>Use the <see cref="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.CreateStore(System.Type)" /> method to create a new store</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance or null if the store does not exist</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.GetStoreForItem(EPiServer.Data.Identity,System.String)">
      <summary>
            Return a store for an item. 
            <para>
            This should be used in specialized situations where the store database table is
            known for an item but not its actual store.
            </para></summary>
      <param name="itemId">The id of the item to return the store for</param>
      <param name="storeTableName">The name of the store table the item is stored in</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance or null if the item is not found in the store table specified</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.DeleteStore(System.String,System.Boolean)">
      <summary>
            Delete the store
            </summary>
      <param name="storeName">The name of the store to delete</param>
      <param name="deleteObjects">A <see cref="T:System.Boolean" /> indicating if all items in the store should also be deleted.
            If <see langword="false" /> is passed then the actual items for the store remain in the 'Big Table' used as storage for store.
            </param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.DeleteStore(System.Type,System.Boolean)">
      <summary>
            Delete the store with the name returned from the <see cref="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.GetStoreNameForType(System.Type)" /> method
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to derive the store name from</param>
      <param name="deleteObjects">A <see cref="T:System.Boolean" /> indicating if all items in the store should also be deleted.
            If <see langword="false" /> is passed then the actual items for the store remain in the 'Big Table' used as storage for store.
            </param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.GetStoreNameForType(System.Type)">
      <summary>
            Returns the store name for the type passed
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to obtains a store name for</param>
      <returns>A <see cref="T:System.String" /></returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.DynamicDataStoreOptions">
      <summary>
            Specifies options on how the Dynamic Data Store should operate.
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStoreOptions.AutoResolveTypes">
      <summary>
            Indicates if automatic type resolution should be attempted by the Dynamic Data Store.
            </summary>
      <remarks>The default option is to resolve type automatically.</remarks>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStoreOptions.AutoRemapStores">
      <summary>
            Indicates if stores should be automatically remapped when a type definition changes.
            </summary>
      <remarks>The default option is to remap on change.</remarks>
    </member>
    <member name="P:EPiServer.Data.Dynamic.DynamicDataStoreOptions.DeleteAllOperationTimeout">
      <summary>
            The extended command timeout to use when deleting all items in a store.
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.EPiServerDataContractAttribute">
      <summary>
            Specifies that the type should be saved to the Dynamic Data Store with custom mappings.
            When a type is marked with <see cref="T:EPiServer.Data.Dynamic.EPiServerDataContractAttribute" /> then only properties
            marked with <see cref="T:EPiServer.Data.Dynamic.EPiServerDataMemberAttribute" /> regardless of visibility will
            saved to the Dynamic Data Store.
            This should only be used when custom mapping is required of properties and the type has already
            been marked with <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> for other use (e.g. WCF)
            and that use collides with the desired affect when saving the type to the Dynamic Data Store
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.EPiServerDataMemberAttribute">
      <summary>
            When applied to the property of a type, specifies that the property should be saved to the
            Dynamic Data Store.
            This should only be used when custom mapping is required of properties and the type has already
            been marked with <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> for other use (e.g. WCF)
            and that use collides with the desired affect when saving the type to the Dynamic Data Store
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.EPiServerDataPropertyRenameAttribute">
      <summary>
            Apply this attribute to properties that have been renamed on types whose instances are stored in the EPiServer Dynamic Data Store where
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.EPiServerDataPropertyRenameAttribute.OldName">
      <summary>
            The old name of the property
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.EPiServerDataStoreAttribute">
      <summary>
            Apply this attribute to class whose instances are to be stored in the EPiServer Dynamic Data Store where
            you want to control various aspects of store creation
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.EPiServerDataStoreAttribute.StoreName">
      <summary>
            The name of the store to create for the Type. 
            If this property has no value then the store will get the default name of 'namespace.typename' 
            where namespace is the namespace the type is in and typename is the name of the type the attribute is applied to
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.EPiServerDataStoreAttribute.AutomaticallyCreateStore">
      <summary>
            if <langword>true</langword> then the Dynamic Data Store initialization code will create a store for the Type the attribute is applied to.
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.EPiServerDataStoreAttribute.AutomaticallyRemapStore">
      <summary>
            if <langword>true</langword> then the Dynamic Data Store initialization code will check the Type the attribute is applied to against
            the mappings for the store for the Type (if one exists). If the mappings do not agree then the store will be updated to reflect the Type
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.EPiServerDataStoreAttribute.DatabaseDateTimeKind">
      <summary>
            Specifies how the store should handle with <see cref="T:System.DateTime" /> types.
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.EPiServerDataStoreAttribute.IsDateTimeKindSpecified">
      <summary>
            Indicate if the DateTimeKind has been stes via attribute
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.EPiServerIgnoreDataMemberAttribute">
      <summary>
        <para>When applied to the property of a type, specifies that the property should not be saved to the
            Dynamic Data Store.</para>
        <para>This should only be used when the property has already been marked with <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 
            for other use (e.g. WCF).</para>
      </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.FallbackTypeResolverEventArgs">
      <summary>
            Event argument for types that can not be resolved
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.FallbackTypeResolverEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Data.Dynamic.FallbackTypeResolverEventArgs" /> class.
            </summary>
      <param name="typeName">Name of the type.</param>
    </member>
    <member name="P:EPiServer.Data.Dynamic.FallbackTypeResolverEventArgs.ResolvedType">
      <summary>
            Gets or sets the resolved type.
            </summary>
      <value>The resolved type.</value>
    </member>
    <member name="P:EPiServer.Data.Dynamic.FallbackTypeResolverEventArgs.TypeName">
      <summary>
            Gets or sets the type name
            </summary>
      <value>The type name</value>
    </member>
    <member name="P:EPiServer.Data.Dynamic.FallbackTypeResolverEventArgs.SkipReferences">
      <summary>
            Gets or sets a flag indicating if object references should not be loaded.
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.GlobalStoreDefinitionParametersMap">
      <summary>
            Class to handle global registrations of store name to <see cref="T:EPiServer.Data.Dynamic.StoreDefinitionParameters" /></summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.GlobalStoreDefinitionParametersMap.ContainsType(System.Type)">
      <summary>
            Determines whether the cache contains the specified type.
            </summary>
      <param name="type">The type to locate in the cache</param>
      <returns>
        <code>true</code> if the cache contains an element with the specified type; otherwise, <code>false</code>.</returns>
      <exception cref="T:System.ArgumentNullException">key is null&gt;</exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.GlobalStoreDefinitionParametersMap.Add(System.Type,EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>
            Use the overload when the store name to register should be derived from the <see cref="T:System.Type" /></summary>
      <param name="type">
      </param>
      <param name="parameters">
      </param>
    </member>
    <member name="T:EPiServer.Data.Dynamic.GlobalTypeHandlers">
      <summary>
            Class to handle global Type Handlers
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.GlobalTypeToStoreMap">
      <summary>
            Class to handle global type to store mappings
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.IDynamicData">
      <summary>
            Interface that objects to be stored in the DynamicDataStore can implement to manage identity
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.IDynamicData.Id">
      <summary>
            The <see cref="T:EPiServer.Data.Identity" /> of the item
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Collection class that implements lazy loading of items from the Dynamic Data Store
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of items in the collection</typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1.#ctor(System.Collections.Generic.IList{EPiServer.Data.Identity},EPiServer.Data.Dynamic.DynamicDataStore,EPiServer.Data.Dynamic.Providers.LoadAsObjectType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Construct a new collection
            </summary>
      <param name="identities">The identities of the items that the collection will contain</param>
      <param name="store">The store the collection items should be read from</param>
      <param name="loadObjectsAs">How objects should be loaded</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1.GetEnumerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a enumerator for the collection
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a enumerator for the collection
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> instance</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1.DynamicDataCollectionEnumerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Enumerator implementation for use by the <see cref="T:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1" /> class        /// 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1.DynamicDataCollectionEnumerator.#ctor(EPiServer.Data.Dynamic.Internal.DynamicDataCollection{`0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Construct the enumerator
            </summary>
      <param name="enumerable">The <see cref="T:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1" /> which owns this object</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1.DynamicDataCollectionEnumerator.Current">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Return the current item in the enumerator
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1.DynamicDataCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Return the current item in the enumerator
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1.DynamicDataCollectionEnumerator.MoveNext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Move to the next item in the enumerator
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.DynamicDataCollection`1.DynamicDataCollectionEnumerator.Reset">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Reset the enumerator
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class to read, write and search data in a store
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.StoreDefinition">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The <see cref="P:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.StoreDefinition" /> for the current store
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The name of the current store
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.DataStoreProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The store's <see cref="P:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.DataStoreProvider" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Refresh">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Refresh any cached properties from their source
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Save(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save <paramref name="value" /> in the store
            </summary>
      <param name="value">The object to save</param>
      <returns>The identity of the saved object</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Save(System.Object,EPiServer.Data.Identity)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save <paramref name="value" /> in the store
            </summary>
      <param name="value">The object to save</param>
      <param name="id">The id saved the object under</param>
      <returns>The identity of the saved object</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Save(System.Object,EPiServer.Data.Dynamic.TypeToStoreMapper)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save <paramref name="value" /> in the store
            </summary>
      <param name="value">The object to save</param>
      <param name="typeToStoreMapper">A delegate of type <see cref="T:EPiServer.Data.Dynamic.TypeToStoreMapper" /> to use when mapping properties to stores</param>
      <returns>The identity of the saved object</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Save(System.Object,EPiServer.Data.Identity,EPiServer.Data.Dynamic.TypeToStoreMapper)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save <paramref name="value" /> in the store
            </summary>
      <param name="value">The object to save</param>
      <param name="id">The id saved the object under</param>
      <param name="typeToStoreMapper">A delegate of type <see cref="T:EPiServer.Data.Dynamic.TypeToStoreMapper" /> to use when mapping properties to stores</param>
      <returns>The identity of the saved object</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Load(EPiServer.Data.Identity)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Load an instance of an object from the store as the same .NET class it was saved as
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> of the item to load</param>
      <returns>The native object stored in the store.
            If the item was originally saved in a <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> then a PropertyBag will be returned otherwise
            an instance of the <see cref="T:System.Type" /> originally saved will be returned.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Load``1(EPiServer.Data.Identity)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Load an instance of an object from the store into a TResult
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> of the item to load</param>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <returns>An instance of TResult</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.LoadAsPropertyBag(EPiServer.Data.Identity)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Load an instance of an object from the store into a <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></summary>
      <param name="id">The identity of the item to load</param>
      <returns>An instance of PropertyBag or null if the item was not found in the store</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.LoadAll">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads all objects from the store as the same .NET class they were saved as
            </summary>
      <returns>Enumeration of <see cref="T:System.Object" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.LoadAll``1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads all objects from the store as TResult instances
            </summary>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <returns>Enumeration of TResult</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.LoadAllAsPropertyBag">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads all objects from the store as <see cref="T:EPiServer.Data.Dynamic.PropertyBag" />  instances
            </summary>
      <returns>Enumeration of <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Find(System.String,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Find objects of from the store that match the condition and return them as the same .NET class they were saved as
            </summary>
      <param name="propertyName">The name of the property to use when finding objects</param>
      <param name="value">The value of the property to match to</param>
      <returns>Enumeration of <see cref="T:System.Object" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Find(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Find objects of from the store that match the conditions and return them as as the same .NET class they were saved as
            </summary>
      <param name="parameters">An dictionary containing property names and values to use when finding objects</param>
      <returns>Enumeration of <see cref="T:System.Object" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Find``1(System.String,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Find objects of from the store that match the condition and return them as TResult instances
            </summary>
      <param name="propertyName">The name of the property to use when finding objects</param>
      <param name="value">The value of the property to match to</param>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <returns>Enumeration of TResult</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Find``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Find objects of from the store that match the conditions and return them as as TResult instances
            </summary>
      <param name="parameters">An dictionary containing property names and values to use when finding objects</param>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <returns>Enumeration of TResult</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.FindAsPropertyBag(System.String,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Find objects of from the store that match the condition and return them as <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> instances
            </summary>
      <param name="propertyName">The name of the property to use when finding objects</param>
      <param name="value">The value of the property to match to</param>
      <returns>Enumeration of <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.FindAsPropertyBag(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Find objects of from the store that match the conditions and return them as as <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> instances
            </summary>
      <param name="parameters">An dictionary containing property names and values to use when finding objects</param>
      <returns>Enumeration of <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Items">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An ordered queryable to allow Linq operations to be performed against the store
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Items``1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An ordered queryable to allow Linq operations to be performed against the store
            </summary>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable" /> of TResult</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.ItemsAsPropertyBag">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An ordered queryable to allow Linq operations to be performed against the store
            </summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable" /> of <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Delete(EPiServer.Data.Identity)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete an item from the store
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> of the item to delete</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.Delete(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete an item from the store
            </summary>
      <param name="value">The object to delete from the store.
            The <see cref="T:EPiServer.Data.Identity" /> of the item to delete must be able to be derived from <paramref name="value" />.
            This is done by looking for a property called "Id" implemented by <paramref name="value" /> or by trying to 
            match <paramref name="value" /> against the in-memory list of items loaded through the same instance of the store
            </param>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="T:EPiServer.Data.Identity" /> of <paramref name="value" /> cannot be derived</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStore.DeleteAll">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete all items in the store
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Internal.DynamicDataStoreOrderedQueryable`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Ordered queryable implementation for a store
            </summary>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the properties for each store item will be loaded into</typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.DynamicDataStoreOrderedQueryable`1.#ctor(EPiServer.Data.Dynamic.DynamicDataStore,EPiServer.Data.Dynamic.Providers.LoadAsObjectType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initialize the instance
            </summary>
      <param name="store">
      </param>
      <param name="loadObjectAs">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.DynamicDataStoreOrderedQueryable`1.GetEnumerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get an enumerator for the store
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.DynamicDataStoreOrderedQueryable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get an enumerator for the store
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> instance</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Internal.DynamicDataStoreOrderedQueryable`1.ElementType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the element type of the instance
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Internal.DynamicDataStoreOrderedQueryable`1.Expression">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get an <see cref="P:EPiServer.Data.Dynamic.Internal.DynamicDataStoreOrderedQueryable`1.Expression" /> for the instance
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Internal.DynamicDataStoreOrderedQueryable`1.Provider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a <see cref="T:System.Linq.IQueryProvider" /> for the instance
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Concrete implementation of the <see cref="T:EPiServer.Data.Dynamic.DynamicDataStoreFactory" /> class
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.Initialize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initialize the instance
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.DoRemapIfRequired(EPiServer.Data.Dynamic.StoreDefinition,System.Type,EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Remap the store according to the Type and StoreDefinitionParameters passed
            </summary>
      <param name="storeDefinition">An existing store definition to check</param>
      <param name="type">The Type to check against</param>
      <param name="parameters">The StoreDefinitionParameters to check against</param>
      <returns>The existing store definition if a remap was not required, otherwise a new store definition</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.CreateStore(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create an new store with the name given.
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="storeName">The name of the store to create</param>
      <param name="typeBag">A type bag containing the names and Types of the properties that will be saved in the store</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.CreateStore(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create an new store with the name given.
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="storeName">The name of the store to create</param>
      <param name="typeBag">A type bag containing the names and Types of the properties that will be saved in the store</param>
      <param name="parameters">Additional paramteres to use when created and mapping the store against the type bag</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.CreateStore(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an new store with a default name of type.FullName
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="type">The type to use to define the store</param>
      <remarks>The <paramref name="type" /> will be reflected to create the store definition</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.CreateStore(System.Type,EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an new store with a default name of type.FullName
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="type">The type to use to define the store</param>
      <param name="parameters">Additional paramteres to use when created and mapping the store against the type</param>
      <remarks>The <paramref name="type" /> will be reflected to create the store definition</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.CreateStore(System.String,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an new store with the name given
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="storeName">The name of the store</param>
      <param name="type">The type to use to define the store</param>
      <remarks>The <paramref name="type" /> will be reflected to create the store definition</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.CreateStore(System.String,System.Type,EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an new store with a the name given
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="storeName">The name of the store</param>
      <param name="parameters">Additional paramteres to use when created and mapping the store against the type T</param>
      <param name="type">The type to use to define the store</param>
      <remarks>The <paramref name="type" /> will be reflected to create the store definition</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.GetStore(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the store with the name given. If a store does not exist for the name then null is returned.    
            </summary>
      <remarks>Use the <see cref="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.CreateStore(System.String,System.Type)" /> method to create a new store</remarks>
      <param name="storeName">The name of the store to return</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance or null if the store does not exist</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.GetStore(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the store with the default name of type.FullName. If a store does not exist for the name then null is returned.    
            If a store does not exist for the name then null is returned.
            </summary>
      <remarks>Use the <see cref="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.CreateStore(System.Type)" /> method to create a new store</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance or null if the store does not exist</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.GetStoreForItem(EPiServer.Data.Identity,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Return a store for an item. 
            <para>
            This should be used in specialized situations where the store database table is
            known for an item but not its actual store.
            </para></summary>
      <param name="itemId">The id of the item to return the store for</param>
      <param name="storeTableName">The name of the store table the item is stored in</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance or null if the item is not found in the store table specified</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.DeleteStore(System.Type,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete the store with the default name of type.FullName
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to derive the store name from</param>
      <param name="deleteObjects">A <see cref="T:System.Boolean" /> indicating if all items in the store should also be deleted.
            If <see langword="false" /> is passed then the actual items for the store remain in the 'Big Table' used as storage for store.
            </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.DeleteStore(System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete the store
            </summary>
      <param name="storeName">The name of the store to delete</param>
      <param name="deleteObjects">A <see cref="T:System.Boolean" /> indicating if all items in the store should also be deleted.
            If <see langword="false" /> is passed then the actual items for the store remain in the 'Big Table' used as storage for store.
            </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.EPiServerDynamicDataStoreFactory.GetStoreNameForType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the store name for the type passed.
            <para>
            The store name resolution process for a <see cref="T:System.Type" /> is as follows:
            1) The Type is reflected to search for a <see cref="T:EPiServer.Data.Dynamic.EPiServerDataStoreAttribute" />
            2) The <see cref="T:EPiServer.Data.Dynamic.GlobalTypeToStoreMap" /> is searched for an entry for the type
            3) The <see cref="P:System.Type.FullName" /> property is used for the type
            </para></summary>
      <param name="type">The <see cref="T:System.Type" /> to obtains a store name for</param>
      <returns>A <see cref="T:System.String" /></returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Internal.QueryableAttribute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Attribute, which makes it possible for a class to extend the <see cref="T:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1" /></summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Internal.Reflector">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class for extracting and caching type information
            <remarks>
            The class is thread safe
            </remarks></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.Reflector.GetProperties(System.Type,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a Collection of property names to <see cref="T:System.Reflection.PropertyInfo" /></summary>
      <param name="type">The <see cref="T:System.Type" /> to reflect</param>
      <param name="excludeId">A <see cref="T:System.Boolean" /> indicating if the 'Id' property should be excluded from the collection</param>
      <returns>A Dictionary&lt;string, PropertyInfo&gt;</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.Reflector.GetProperties``1(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a Collection of property names to <see cref="T:System.Reflection.PropertyInfo" /></summary>
      <typeparam name="T">The <see cref="T:System.Type" /> to reflect</typeparam>
      <param name="excludeId">A <see cref="T:System.Boolean" /> indicating if the 'Id' property should be excluded from the collection</param>
      <returns>A Dictionary&lt;string, PropertyInfo&gt;</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.Reflector.GenerateTypeBag(System.Type,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a Collection of property names to <see cref="T:System.Type" /></summary>
      <param name="type">The <see cref="T:System.Type" /> to get the collection for</param>
      <param name="excludeIds">
        <code>true</code> if the special id properties should be excluded from the returned type bag, otherwise <code>false</code></param>
      <returns>A Dictionary&lt;string, Type&gt; </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.Reflector.GenerateTypeBag(System.Type,System.Boolean,EPiServer.Data.Dynamic.StoreDefinitionParameters@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a Collection of property names to <see cref="T:System.Type" /></summary>
      <param name="type">The <see cref="T:System.Type" /> to get the collection for</param>
      <param name="excludeIds">
        <code>true</code> if the special id properties should be excluded from the returned type bag, otherwise <code>false</code></param>
      <param name="parameters">A <see cref="T:EPiServer.Data.Dynamic.StoreDefinitionParameters" /> instance whose member lists will be filled with information collected from property attributes/&gt;</param>
      <returns>A Dictionary&lt;string, Type&gt;</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.Reflector.RemoveFromCache(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes <paramref name="type" />  from cache.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to remove</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.Reflector.RemoveFromCache``1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes the <see langword="typeof" /> T from the cache.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> to remove</typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.Reflector.IsPropertyOfType(System.Type,System.String,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns whether the Type defines the property with name <paramref name="propertyName" />
            and if it is of Type <paramref name="propertyType" /></summary>
      <param name="containerType">The Type to operate on</param>
      <param name="propertyName">The name of the property to check for</param>
      <param name="propertyType">The Type the property should be</param>
      <returns>
        <code>true</code> if the Type defines the property and it is of the Type specified, otherwise <code>false</code></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.Reflector.HasProperty(System.Type,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns whether the Type defines the property with name <paramref name="propertyName" /></summary>
      <param name="containerType">The Type to operate on</param>
      <param name="propertyName">The name of the property to check for</param>
      <returns>
        <code>true</code> if the Type defines the property, otherwise <code>false</code></returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Internal.MembersOf`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Internal.UpdateQueryable">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles updates on a queryable, to make batch updates in DDS.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.UpdateQueryable.#ctor(System.Linq.IQueryable)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Data.Dynamic.Internal.UpdateQueryable" /> class.
            </summary>
      <param name="queryable">
      </param>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Internal.UpdateQueryable`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles updates on a queryable, to make batch updates in DDS.
            </summary>
      <typeparam name="TStore">The type of DDS store</typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.UpdateQueryable`1.#ctor(System.Linq.IQueryable,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.UpdateQueryable`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.UpdateQueryable`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.UpdateQueryable`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Internal.UpdateQueryable`1.Execute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.ItemEventArgs">
      <summary>
            Dynamic data store's event argument.
            Used in events fired when items are changed.
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.ItemEventArgs.Item">
      <summary>
            The item being processed.
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.ItemEventArgs.ItemId">
      <summary>
            Id of the item being processed.
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.ItemEventArgs.StoreName">
      <summary>
            Dynamic data store name.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.ITypeHandler.MapToDatabaseType(System.Type)">
      <summary>
            Map the Type to an "inline" type supported by Dynamic Data Store 
            Supported types are:
            <see cref="T:System.Byte" />,
            arrays of <see cref="T:System.Byte" />,
            <see cref="T:System.Int16" />,
            <see cref="T:System.Int32" />,
            <see cref="T:System.Int64" />,
            <see cref="T:System.Enum" />,
            <see cref="T:EPiServer.Data.Identity" />,
            <see cref="T:System.Single" />,
            <see cref="T:System.Double" />,
            <see cref="T:System.DateTime" />,
            <see cref="T:System.Guid" />,
            <see cref="T:System.String" />,
            arrays of <see cref="T:System.Char" />,
            <see cref="T:System.Boolean" />, 
            </summary>
      <param name="type">The CLR type to be mapped</param>
      <returns>The CLR type to map to</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.ITypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
      <summary>
            Convert the value passed into an object of the same Type returned by the <see cref="M:EPiServer.Data.Dynamic.ITypeHandler.MapToDatabaseType(System.Type)" /> method
            </summary>
      <param name="propertyName">The name of the property being processed</param>
      <param name="propertyValue">The property value</param>
      <param name="ownerType">The <see cref="T:System.Type" /> of the object that owns this property</param>
      <returns>An object to store in the database</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.ITypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
      <summary>
            Convert the value passed from the native database type into an object of type targetType
            </summary>
      <param name="propertyName">The name of the property being processed</param>
      <param name="propertyValue">The property value</param>
      <param name="targetType">The type the value should be converted to</param>
      <param name="ownerType">The <see cref="T:System.Type" /> of the object that owns this property</param>
      <returns>an object of type targetType</returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.IUpdateQueryable`1">
      <summary>
            When implemented, should handles updates on a queryable, to make batch updates in DDS.
            </summary>
      <typeparam name="TStore">The type of DDS store.</typeparam>
    </member>
    <member name="M:EPiServer.Data.Dynamic.IUpdateQueryable`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
            Updates a property to a specific value.
            </summary>
      <typeparam name="TUpdate">The generic type.</typeparam>
      <param name="property">The property to update.</param>
      <param name="value">The value to set on the property.</param>
      <returns>The same instance.</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.IUpdateQueryable`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Updates a property to a specific value.
            </summary>
      <typeparam name="TUpdate">The generic type.</typeparam>
      <param name="property">The property to update.</param>
      <param name="value">The value to set on the property.</param>
      <returns>The same instance.</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.IUpdateQueryable`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
      <summary>
            Condition, that specifies which rows that should be updated.
            </summary>
      <param name="predicate">The condition.</param>
      <returns>The same instance.</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.IUpdateQueryable`1.Execute">
      <summary>
            Executes the batch update.
            </summary>
      <returns>The number of rows that has been updated.</returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Linq.ExpressionProcessorBase">
      <summary>
            Base class for <see cref="T:System.Linq.Expressions.Expression" /> processing in the Dynamic Data Store
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.CompileableExpressionFinder`1.FindCompileableExpressions(System.Linq.Expressions.Expression,EPiServer.Data.Dynamic.DynamicDataStore)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Static method that creates an instalnce of the CompileableExpressionFinder and searches for compileable expressions 
            </summary>
      <param name="expression">The expression to evaluate</param>
      <param name="store">The DynamicDataStore</param>
      <returns>HashSet containing the the expressions that can be compiled</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.CompileableExpressionFinder`1.Process(System.Linq.Expressions.Expression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Overrides the Process method and adds expression to the HashSet (CompileableExpressions) if itÂ´s compileable
            </summary>
      <param name="expression">The expression to evaluate</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Linq.Internal.QueryContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Enumeration to define to query context
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Linq.Internal.JoinInformation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that defines a join
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.JoinInformation.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The name of the join
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.JoinInformation.Store">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The store to be joined to
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.JoinInformation.PropertyName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name of the property
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Linq.Internal.JoinAggregateInformation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that defines an aggregate join
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.JoinAggregateInformation.AggregateType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The aggregate
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.JoinAggregateInformation.TableIdentifier">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Table to make join against
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.JoinAggregateInformation.TypeId">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The type in Reference table
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.JoinAggregateInformation.AdditionalWhereClauses">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Additional where clauses that will be added to the join
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A helper class for processing LINQ queries
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Ininialize the object with the <paramref name="storeName" /></summary>
      <param name="storeName">
      </param>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.Builder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the current builder.
            </summary>
      <value>The builder.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.PushContextBuilder(System.Text.StringBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Pushes the current _contextBuilder onto a stack, and sets the new _contextBuilder to 
            the passed in StringBuilder.
            
            This is for example used by ProcessBinaryComparison (in the queryproviders) to get 
            a chance to see if an expresssion evaluates to null so we can change the operators
            '=' and '&lt;&gt;' to "IS" and "IS NOT" respectively.
            </summary>
      <param name="sb">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.PopContextBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves any local contextbuilder previously pushed in <see cref="T:LinqStringBuilder.PushContextBuilder" />.
            
            This is for example used by ProcessBinaryComparison (in the queryproviders) to get 
            a chance to see if an expresssion evaluates to null so we can change the operators
            '=' and '&lt;&gt;' to "IS" and "IS NOT" respectively.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.HasPushedContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A <see cref="T:System.Boolean" /> value indicating if a context has already been pushed or not
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.IsInAnyRecursiveMethodProcessingJoins">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating if a recursive call is being made
            </summary>
      <returns>A <see cref="T:System.Boolean" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.AddRecursiveMethodRef(EPiServer.Data.Dynamic.Linq.Internal.RecursiveMethodName)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds 1 to the count of recursive method calls for the method with name <paramref name="recursiveMethodName" /></summary>
      <param name="recursiveMethodName">The name of the method to increment</param>
      <returns>The new recursive count for the method</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.ReleaseRecursiveMethodRef(EPiServer.Data.Dynamic.Linq.Internal.RecursiveMethodName)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Subtracts 1 from the count of recursive method calls for the method with name <paramref name="recursiveMethodName" /></summary>
      <param name="recursiveMethodName">The name of the method to decrement</param>
      <returns>The new recursive count for the method</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.Context">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the context.
            </summary>
      <value>The context.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.Select">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the SQL 'select' statement
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.From">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the SQL 'from' statement
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.Where">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the SQL 'where' statement
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.OrderBy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the SQL 'orderby' statement
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.GroupBy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the SQL 'groupby' statement
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.Joins">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the <see cref="T:EPiServer.Data.Dynamic.Linq.Internal.JoinInformation" /> collection
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.Aggregates">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the aggregates collection
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.ResetBuilder(EPiServer.Data.Dynamic.Linq.Internal.QueryContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resets the builder.
            </summary>
      <param name="context">The <see cref="T:EPiServer.Data.Dynamic.Linq.Internal.QueryContext" /></param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.ChangeBuilderValue(EPiServer.Data.Dynamic.Linq.Internal.QueryContext,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the <paramref name="context" /> as the current context and appends <paramref name="value" /> to the current builder
            </summary>
      <param name="context">The <see cref="T:EPiServer.Data.Dynamic.Linq.Internal.QueryContext" /> to use</param>
      <param name="value">The value to append</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.AddJoin(System.String,EPiServer.Data.Dynamic.DynamicDataStore,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a new join to the joins collection
            </summary>
      <param name="joinName">The name of the join</param>
      <param name="joinObject">The store to join to</param>
      <param name="propertyName">Name of the property</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.AddAggregateJoin(System.String,System.String,System.Int32,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a new join to the joins collection
            </summary>
      <param name="propertyName">Name of the property</param>
      <param name="aggregateType">The aggregate to use</param>
      <param name="typeId">The type in reference table</param>
      <param name="tableIdentifier">Table to use</param>
      <returns>The join aggregate information that will be used</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.AddAggregateJoin(System.String,System.String,System.Int32,System.String,System.Collections.Generic.IList{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a new join to the joins collection
            </summary>
      <param name="propertyName">Name of the property</param>
      <param name="aggregateType">The aggregate to use</param>
      <param name="typeId">The type in reference table</param>
      <param name="tableIdentifier">Table to use</param>
      <param name="additionalWhereClauses">Additional where clauses that will be popped in to the inner select</param>
      <returns>The join aggregate information that will be used</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.AddAggregate(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a new aggregate to the aggregates collection
            </summary>
      <param name="aggregateName">The new aggregate name to add</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.Append(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Appends the specified value to the current builder.
            </summary>
      <param name="value">The value to add.</param>
      <returns>The resultant builder</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Appends the specified formatted value to the current builder.
            </summary>
      <param name="format">The format value to add</param>
      <param name="args">The arguments to the format string</param>
      <returns>The resultant builder</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.LinqStringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Appends the specified formatted value to the current builder.
            </summary>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to use when performing the format</param>
      <param name="format">The format value to add</param>
      <param name="args">The arguments to the format string</param>
      <returns>The resultant builder</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.SubtreeLamdaCompiler`1.Process(System.Collections.Generic.HashSet{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression,EPiServer.Data.Dynamic.DynamicDataStore)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Static method that creates an instalnce of the SubtreeProcessor and reads the subtree
            </summary>
      <param name="compileableExpressions">Hashset with expressions that can be compiled</param>
      <param name="expression">The expression to evaluate</param>
      <param name="store">The DynamicDataStore</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Internal.SubtreeLamdaCompiler`1.Process(System.Linq.Expressions.Expression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Overrides the Process method and compiles the lamda expression if itÂ´s nessasary
            </summary>
      <param name="expression">The expression to use</param>
      <returns>Processed expression</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Linq.LinqDeferrer">
      <summary>
            Specifies deferrer for linq query
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Linq.LinqDeferrer.None">
      <summary>
            None specified
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Linq.LinqDeferrer.IEnumerable">
      <summary>
            An enumerable is deferred
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Linq.LinqDeferrer.First">
      <summary>
            First is deferred
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Linq.LinqDeferrer.FirstOrDefault">
      <summary>
            First or default is deferred
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Linq.LinqDeferrer.Single">
      <summary>
            A single result is deferred
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Linq.LinqDeferrer.SingleOrDefault">
      <summary>
            A single result or default is deferred
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Linq.LinqDeferrer.Last">
      <summary>
            First is deferred
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Linq.LinqDeferrer.LastOrDefault">
      <summary>
            Last or default is deferred
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Linq.LinqDeferrer.Count">
      <summary>
            Count is deferred
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Linq.LinqQuery">
      <summary>
            Represents a linq query
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.LinqQuery.#ctor(System.String,EPiServer.Data.Dynamic.Linq.LinqDeferrer,EPiServer.Data.Dynamic.DynamicDataStore,System.Boolean)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Data.Dynamic.Linq.LinqQuery" /></summary>
      <param name="sql">The sql statement</param>
      <param name="deferrer">The deferrer to use</param>
      <param name="store">The store to use</param>
      <param name="usingSelect">Specifies if select sgould be used</param>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.LinqQuery.Sql">
      <summary>
            The sql statement for the query
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.LinqQuery.Deferrer">
      <summary>
            The deferrer to use
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.LinqQuery.UsingSelect">
      <summary>
            Specifies if select is used
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.LinqQuery.Store">
      <summary>
            The dynamic data store to use
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.LinqQuery.LinqDeferrerSupportsDefault">
      <summary>
            Specifies if specified defferer supports default
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.LinqQuery.ReturnsSingleObject">
      <summary>
            Specifies if deferrer supports to return a single object
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Linq.Query">
      <summary>
            Base class for query classes
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Query.DbParameterCollection">
      <summary>
            Collection a database parameters to be submitted to the database for the query
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query.AddParameter(System.String,System.Object)">
      <summary>
            Adds a parameter to the query
            </summary>
      <param name="name">Name of the parameter</param>
      <param name="value">Value of the parameter</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query.AddParameter(System.Object)">
      <summary>
            Adds an object as a parameter
            </summary>
      <param name="value">The parameter to add</param>
      <returns>The name of the added parameter</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query.Execute">
      <summary>
            Executes the query
            </summary>
      <returns>The result</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query.Transform``1(System.Linq.Expressions.Expression)">
      <summary>
            Transforms an expression to an query
            </summary>
      <typeparam name="TTransform">The type to query for</typeparam>
      <param name="expression">The expression to transform</param>
      <returns>A transformed query</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query.Transform``1">
      <summary>
            Generates an query for a type
            </summary>
      <typeparam name="TTransform">The type to generate a query for</typeparam>
      <returns>A query</returns>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Query.Expressions">
      <summary>
            Collection of <see cref="T:System.Linq.Expressions.Expression" /> found in the query
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query.GenerateSqlStatement">
      <summary>
            Generate a SQL statement for the query
            </summary>
      <returns>A <see cref="T:System.String" /> containing the SQL for the query</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query.Clone">
      <summary>
            Clone the current object
            </summary>
      <returns>A new <see cref="T:EPiServer.Data.Dynamic.Linq.Query" /> with the same values as the current object</returns>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Query.ReturnsNewType">
      <summary>
            A <see cref="T:System.Boolean" /> indicating if the current query returns a new type
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Query.NewTypeConstructor">
      <summary>
            A <see cref="T:System.Reflection.ConstructorInfo" /> for the new type that will be returned from the query or <see langword="null" /> if a new type will not be returned
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Linq.Query`1">
      <summary>
            Base class for typed query classes
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Query`1.Store">
      <summary>
            The dynamic data store that the query will be executed against
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Query`1.LoadObjectsAs">
      <summary>
            Specifies how objects should be loaded
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.#ctor(EPiServer.Data.Dynamic.DynamicDataStore)">
      <summary>
            Creates an instance of <see cref="T:EPiServer.Data.Dynamic.Linq.Query`1" /></summary>
      <param name="store">The store to create aquery for</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.#ctor(EPiServer.Data.Dynamic.DynamicDataStore,EPiServer.Data.Dynamic.Providers.LoadAsObjectType)">
      <summary>
            Creates an instance of <see cref="T:EPiServer.Data.Dynamic.Linq.Query`1" /></summary>
      <param name="store">The store to create aquery for</param>
      <param name="loadObjectsAs">Specifies how objects should be loaded</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.Execute">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.ExecuteScalar``1">
      <summary>
            Executes the query as a scalar
            </summary>
      <typeparam name="TResult">The expected result type</typeparam>
      <returns>The resulting instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
            Create a new query object from the <paramref name="expression" /></summary>
      <typeparam name="TElement">The <see cref="T:System.Type" /> the query will return</typeparam>
      <param name="expression">An <see cref="P:EPiServer.Data.Dynamic.Linq.Query`1.Expression" /> to use as the base for the query</param>
      <returns>A <see cref="T:System.Linq.IQueryable`1" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>
            Create a new query object from the <paramref name="expression" /></summary>
      <param name="expression">An <see cref="P:EPiServer.Data.Dynamic.Linq.Query`1.Expression" /> to use as the base for the query</param>
      <returns>An <see cref="T:System.Linq.IQueryable" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.Execute``1(System.Linq.Expressions.Expression)">
      <summary>
            Execute the <paramref name="expression" /></summary>
      <typeparam name="TResult">The <see cref="T:System.Type" /> the query will return</typeparam>
      <param name="expression">The <see cref="P:EPiServer.Data.Dynamic.Linq.Query`1.Expression" /> to execute</param>
      <returns>A TResult</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.Execute(System.Linq.Expressions.Expression)">
      <summary>
            Execute the <paramref name="expression" /></summary>
      <param name="expression">The <see cref="P:EPiServer.Data.Dynamic.Linq.Query`1.Expression" /> to execute</param>
      <returns>A <see cref="T:System.Object" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.GetEnumerator">
      <summary>
            Get an enumerator for the query
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Get an enumerator for the query
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> instance</returns>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Query`1.ElementType">
      <summary>
            Get the element type of the query
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Query`1.Expression">
      <summary>
            Get an <see cref="P:EPiServer.Data.Dynamic.Linq.Query`1.Expression" /> for the query
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Linq.Query`1.Provider">
      <summary>
            Get a <see cref="T:System.Linq.IQueryProvider" /> for the query
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.Transform``1(System.Linq.Expressions.Expression)">
      <summary>
            Transform creates (and returns) a new instance of QueryT with the specified TRansform type.
            All local expressions are copied to the created instance expressions list.
            The given Expression, if its not null, is then also added to the new instance. 
            </summary>
      <typeparam name="TTransform">The type the new QueryT should infer</typeparam>
      <param name="expression">Optional expression to add to the new instance. May be null</param>
      <returns>A new QueryT instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.Query`1.Clone">
      <summary>
            Clone the current object
            </summary>
      <returns>A new <see cref="T:EPiServer.Data.Dynamic.Linq.Query" /> with the same values as the current object</returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Linq.NotConstantExpressionException">
      <summary>
            Exception class thrown when a constant expression is expected
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.NotConstantExpressionException.#ctor">
      <summary>
            Default Constructor
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.NotConstantExpressionException.#ctor(System.String)">
      <summary>
            Construct the exception with the <paramref name="message" /></summary>
      <param name="message">
      </param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.NotConstantExpressionException.#ctor(System.String,System.Exception)">
      <summary>
            Construct the exception with the <paramref name="message" /> and <paramref name="innerException" /></summary>
      <param name="message">
      </param>
      <param name="innerException">
      </param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Linq.NotConstantExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor used for serialization
            </summary>
      <param name="info">serialization info</param>
      <param name="context">streaming context</param>
    </member>
    <member name="T:EPiServer.Data.Dynamic.PropertyBag">
      <summary>
            A class used to save and load a collection a name/value pairs
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.Add(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Adds the values in <paramref name="properties" /> to the current object
            </summary>
      <param name="properties">The name/value collection to add</param>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyBag.Target">
      <summary>
            The target object that the <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> is derived from
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.ToObject``1">
      <summary>
            Create an instance of T and populate its properties with those held in the current object
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.ToObject(System.Type)">
      <summary>
            Create an instance of <paramref name="type" /> and populate its properties with those held in the current object
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.ToObject(System.Object)">
      <summary>
            Populate <paramref name="value" /> properties with those held in the current object
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.GenerateTypeBag">
      <summary>
            Generate a collection of <see cref="T:System.String" /> to <see cref="T:System.Type" /> from the properties held in the current object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.Add(System.String,System.Object)">
      <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
            </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.ContainsKey(System.String)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
            </exception>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyBag.Keys">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <value>
      </value>
      <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.Remove(System.String)">
      <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="key">The key of the element to remove.</param>
      <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.
            </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.TryGetValue(System.String,System.Object@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.
            </exception>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyBag.Values">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <value>
      </value>
      <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyBag.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:System.Object" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyBag.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <value>
      </value>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBag.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.PropertyBagObjectsExtensions">
      <summary>
            Class with extension methods for <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /></summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBagObjectsExtensions.ToPropertyBag(System.Object)">
      <summary>
            Create a <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> instance and populates it with its properties
            The algorith for extracting properties is as follows:
            1) Property must a have a getter and setter
            2a) Getter must be public 
            OR 
            2b) The class must be marked either with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> or <see cref="T:EPiServer.Data.Dynamic.EPiServerDataContractAttribute" />
            and the property must be marked either with the <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> or <see cref="T:EPiServer.Data.Dynamic.EPiServerDataMemberAttribute" /></summary>
      <param name="value">The <see cref="T:System.Object" /> to convert</param>
      <returns>A new <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyBagObjectsExtensions.ToPropertyBag(System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Create a <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> instance and populates it with its properties
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to convert</param>
      <param name="propertyNames">The names of the properties to extract a place into the property bag</param>
      <returns>A new <see cref="T:EPiServer.Data.Dynamic.PropertyBag" /> instance</returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.PropertyMap">
      <summary>
            Represents a property mapping in the Dynamic Data Store
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyMap.PropertyName">
      <summary>
            The name of the property
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyMap.OriginalPropertyName">
      <summary>
            Returns the original name if the property has been renamed but the change not yet committed
            or the PropertyName if not changed
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyMap.PropertyType">
      <summary>
            The <see cref="T:System.Type" /> of the property
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyMap.PropertyMapType">
      <summary>
            The <see cref="P:EPiServer.Data.Dynamic.PropertyMap.PropertyMapType" /> of the property
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyMap.Active">
      <summary>
            A <see cref="T:System.Boolean" /> indicating if the property in currentlt active or not
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.PropertyMap.Version">
      <summary>
            The version number of the mapping
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyMap.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <returns>
        <see langword="true" /> if the specified Object is equal to the current Object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyMap.GetHashCode">
      <summary>
            Serves as a hash function for a particular type
            </summary>
      <returns>A hash code for the current object</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyMap.Clone">
      <summary>
            Clone the current object
            </summary>
      <returns>A new <see cref="T:EPiServer.Data.Dynamic.PropertyMap" /> instance with the same values as the current object</returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.ReferencePropertyMap">
      <summary>
            Represents a reference property mapping in the Dynamic Data Store
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.CollectionPropertyMap">
      <summary>
            Represents a collection property mapping in the Dynamic Data Store
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.InlinePropertyMap">
      <summary>
            Represents a inline property to column mapping in the Dynamic Data Store
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.InlinePropertyMap.ColumnInfo">
      <summary>
            The <see cref="T:EPiServer.Data.Dynamic.Providers.ColumnInformation" /> for the property
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.InlinePropertyMap.RowIndex">
      <summary>
            The row index for the property
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.PropertyMapExtensions">
      <summary>
            Extension method class for <see cref="T:EPiServer.Data.Dynamic.PropertyMap" /></summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyMapExtensions.GetMapping(System.Collections.Generic.IEnumerable{EPiServer.Data.Dynamic.PropertyMap},System.String)">
      <summary>
            Get the mapping with the specified <paramref name="name" /> from the all mappings collection
            </summary>
      <param name="mappings">The mappings collection to operate on</param>
      <param name="name">The name of the property to get</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.PropertyMap" /> with the name specified</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.PropertyMapExtensions.Compare(System.Collections.Generic.IEnumerable{EPiServer.Data.Dynamic.PropertyMap},System.Collections.Generic.IEnumerable{EPiServer.Data.Dynamic.PropertyMap})">
      <summary>
            Compares the input collection to <paramref name="other" /></summary>
      <param name="list">The input collection</param>
      <param name="other">A collection to compare to</param>
      <returns>
        <see lnagword="true" /> if the collections are equal; otherwise <see lamgword="false" /></returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.LoadAsObjectType">
      <summary>
            Internal enum used to determine how to load an object from the store
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.DataStoreProvider">
      <summary>
            Base class for data store providers    
            </summary>
      <remarks>This class in not thread safe</remarks>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.DataStoreProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider</param>
      <param name="config"> A collection of the name/value pairs representing the provider-specific attributes
            specified in the configuration for this provider.</param>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Providers.DataStoreProvider.Name">
      <summary>
            Gets the friendly name used to refer to the provider
            </summary>
      <remarks>Default name is 'default'</remarks>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.DataStoreProvider.GetStoreViewName(System.String)">
      <summary>
            Get the database specific view name for a store
            </summary>
      <param name="storeName">The name of the store the item will be saved to</param>
      <returns>A <see cref="T:System.String" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.DataStoreProvider.ConvertStoreNameToInternal(System.String)">
      <summary>
            Convert the store name to that used internally by the provider
            </summary>
      <param name="storeName">The name of the store to convert</param>
      <returns>A <see cref="T:System.String" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.DataStoreProvider.ExecuteTransaction(System.Action)">
      <summary>
            Execute an action in a transactional manner.
            </summary>
      <param name="action">The <see cref="T:System.Action" /> delegate to execute</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.DataStoreProvider.ExecuteLocked(System.String,System.Action)">
      <summary>
            Executes an action with acuiring a lock.
            </summary>
      <param name="resourceName">Name of the resource.</param>
      <param name="action">The action.</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.DataStoreProvider.IsProviderSpecificException(System.Exception)">
      <summary>
            Determines if an exception is specific to the data provider or a standard .NET exception
            </summary>
      <param name="exception">The exception to check</param>
      <returns>true if the exception is data provider specific, otherwise false</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.DataStoreProvider.UpdateReferencesPropertyName(System.String,System.String,System.String,System.String)">
      <summary>
            Update the property names for the references
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="tableName">Name of the CustomBigtable</param>
      <param name="oldPropertyName">The old Name of the Property</param>
      <param name="newPropertyName">The new Name of the Property</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.DataStoreProvider.CreateInstance">
      <summary>
            Create an instance of the configured data store provider
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.DataStoreProvider.CreateInstance(System.Object)">
      <summary>
            Create a new instance of a provider using the <paramref name="providerSettings" /> passed
            </summary>
      <returns>A new <see cref="T:EPiServer.Data.Dynamic.Providers.DataStoreProvider" /> instance</returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.DataMove">
      <summary>
            Defines a move of data between one column in the store to another
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Providers.DataMove.FromProperty">
      <summary>
            The Column the data is moving from
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.Providers.DataMove.ToProperty">
      <summary>
            The column the data is moving to
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.IDataStoreProviderFactory">
      <summary>
            Used to create a <see cref="T:EPiServer.Data.Dynamic.Providers.DataStoreProvider" /></summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.IDataStoreProviderFactory.Create">
      <summary>
            Create a <see cref="T:EPiServer.Data.Dynamic.Providers.DataStoreProvider" /></summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Abstract database implementation of <see cref="T:EPiServer.Data.Dynamic.Providers.DataStoreProvider" />
            Implementors of <see cref="T:EPiServer.Data.Dynamic.Providers.DataStoreProvider" /> a Data Store Provider using a database should derive from this class
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.CreateParameter(System.String,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Override this to create a <see cref="T:System.Data.IDbDataParameter" /> parameter
            </summary>
      <param name="name">The name of the parameter to create</param>
      <param name="value">The value to set into the parameter</param>
      <returns>An instance of a <see cref="T:System.Data.IDbDataParameter" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.CreateParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Override this to create a <see cref="T:System.Data.IDbDataParameter" /> parameter
            </summary>
      <param name="name">The name of the parameter to create</param>
      <param name="dbType">The <see cref="T:System.Data.DbType" /> of the parameter</param>
      <param name="direction">The <see cref="T:System.Data.ParameterDirection" /> of the parameter</param>
      <param name="value">The value to set into the parameter</param>
      <returns>An instance of a <see cref="T:System.Data.IDbDataParameter" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.CreateParameter(System.String,System.Data.DbType,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Override this to create a <see cref="T:System.Data.IDbDataParameter" /> parameter
            </summary>
      <param name="name">The name of the parameter to create</param>
      <param name="dbType">The <see cref="T:System.Data.DbType" /> of the parameter</param>
      <param name="size">The size of the input</param>
      <returns>An instance of a <see cref="T:System.Data.IDbDataParameter" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.AddResultSetParametersToCollection(System.Data.IDataParameterCollection,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds <paramref name="resultSetCount" /> number of result set parameters to the <paramref name="parameters" /> collection
            This is only needed for ADO.NET providers that return the result set as out parameters
            </summary>
      <param name="parameters">The parameters collection to add to</param>
      <param name="resultSetCount">The number of parameters that should be added</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.SaveCollection(EPiServer.Data.Identity,System.String,System.Collections.IEnumerable,System.Boolean,System.Type,EPiServer.Data.Dynamic.Providers.ProviderCallContext,EPiServer.Data.Dynamic.PropertyMapType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. </summary>
      <returns>The number of items that were saved</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetStoreSaveProcedureName(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the database specific 'save' stored procedure name
            </summary>
      <param name="storeName">The name of the store the item will be saved to</param>
      <returns>A <see cref="T:System.String" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetDropViewCommandText(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the SQL for the 'Drop View' command
            </summary>
      <param name="storeName">The name of the store to drop the view for</param>
      <returns>A <see cref="T:System.String" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetDropSaveSPCommandText(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the SQL for the 'Drop Save Procedure' command
            </summary>
      <param name="storeName">The name of the store to drop the view for</param>
      <returns>A <see cref="T:System.String" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetCreateViewCommandText(EPiServer.Data.Dynamic.StoreDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the SQL for the 'Create View' command
            </summary>
      <param name="storeDefinition">The store definition to create the view for</param>
      <returns>A <see cref="T:System.String" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetCreateSaveSPCommandText(EPiServer.Data.Dynamic.StoreDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the SQL for the 'Create Save Procedure' command
            </summary>
      <param name="storeDefinition">The store definition to create the view for</param>
      <returns>A <see cref="T:System.String" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetDeleteProcedureCommand(EPiServer.Data.Identity)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Delete Item Procedure' command
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> for the item to be deleted</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetDeleteAllProcedureCommand(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Delete All Items' command
            </summary>
      <param name="storeName">The name of the store to delete items from</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetLoadCommand(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{EPiServer.Data.Dynamic.InlinePropertyMap})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Load Item' command
            </summary>
      <param name="storeName">The name of the store the item belongs to</param>
      <param name="parameters">Name/Value parameters identifying how the item should be found</param>
      <param name="inlineProperties">The properties to read from the database</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetLoadReferencesCommand(EPiServer.Data.Identity)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Load Reference' command
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> of the item to load references for</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetLoadCollectionCommand(EPiServer.Data.Identity,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Load Collection' command
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> of the item to load references for</param>
      <param name="propertyName">The name of the property the collection belongs to</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetStoreInfoSaveCommand(EPiServer.Data.Dynamic.StoreDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Store Info Save' command 
            </summary>
      <param name="storeDefinition">The <see cref="T:EPiServer.Data.Dynamic.StoreDefinition" /> to save</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetSaveInlinePropertiesCommand(EPiServer.Data.Dynamic.Providers.ProviderCallContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Save Inline Properties' command
            </summary>
      <param name="context">The <see cref="T:EPiServer.Data.Dynamic.Providers.ProviderCallContext" /> containing information for the save</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetUpdateIndexCommand(System.Int64,System.String,System.Boolean,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the update index command, which updates the index property in a collection or dictionary for a specific property for a specific item.
            The index should be updated to an index outside of the current list, to continue holding a reference to an existing object.
            </summary>
      <param name="id">The identity of the item, which will have one of it's properties updated.</param>
      <param name="propertyName">Name of the property for which the index will be updated.</param>
      <param name="isKey">If set to <c>true</c>, the property will update the key part of a dictionary. If set to false, the property will update the value part on a dictionary or collection.</param>
      <param name="startIndex">The start index from where the index update should start. All items from the start index will be updated.</param>
      <returns>A database command containing the update SQL for the index of a collection or dictionary.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetSaveReferencePropertyCommand(EPiServer.Data.Dynamic.PropertyMapType,System.Data.DbType,System.Int64,System.String,System.Boolean,System.Int32,System.Type,System.Type,System.String,System.String,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Save Reference Property' command. This used for both single references and collection items
            </summary>
      <param name="propertyType">The type of property map</param>
      <param name="dataType">The database data type</param>
      <param name="id">The store id of the parent item</param>
      <param name="propertyName">The property name the reference is associated with</param>
      <param name="isKey">A <see cref="T:System.Boolean" /> indicating if this reference is a collection key</param>
      <param name="index">The index of the item in the collection of 0 for a single reference</param>
      <param name="collectionType">The <see cref="T:System.Type" /> of the collection containing the item being saved or <see langword="null" /> for a single reference</param>
      <param name="elementType">The <see cref="T:System.Type" /> of the item being saved</param>
      <param name="elementStoreName">The name of the store the related item is saved in or <see langword="null" /> for non reference types</param>
      <param name="columnName">The name of the column to save the reference /collection value in</param>
      <param name="value">The reference / collection value to be saved</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetSaveReferencePropertyCommand(EPiServer.Data.Dynamic.PropertyMapType,System.Int64,System.String,System.Boolean,System.Int32,System.Type,System.Type,System.String,System.Collections.Generic.IList{System.Tuple{System.String,System.Object,System.Data.DbType}})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Save Reference Property' command. This used for both single references and collection items
            </summary>
      <param name="propertyType">The type of property map</param>
      <param name="id">The store id of the parent item</param>
      <param name="propertyName">The property name the reference is associated with</param>
      <param name="isKey">A <see cref="T:System.Boolean" /> indicating if this reference is a collection key</param>
      <param name="index">The index of the item in the collection of 0 for a single reference</param>
      <param name="collectionType">The <see cref="T:System.Type" /> of the collection containing the item being saved or <see langword="null" /> for a single reference</param>
      <param name="elementType">The <see cref="T:System.Type" /> of the item being saved</param>
      <param name="elementStoreName">The name of the store the related item is saved in or <see langword="null" /> for non reference types</param>
      <param name="columnValues">Name, value, and type for columns to get values from</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetDeleteExcessReferencesCommand(System.Int64,System.String,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Delete Excess References' command
            </summary>
      <param name="id">The store id of the item to delete excess references for</param>
      <param name="propertyName">The property name the reference is associated with</param>
      <param name="startIndex">The index of the item and items with higer indexes that should be deleted</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetStoreInfoLoadCommand(System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Store Info Load' command
            </summary>
      <param name="storeName">The name of the store to load information for</param>
      <param name="loadInactiveProperties">A <see cref="T:System.Boolean" /> indicating whether inactive properties should be loaded</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetStoreInfoDeleteCommand(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Store Info Delete' command
            </summary>
      <param name="storeName">The name of the store to delete</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetValueOverflowCountCommand(System.String,System.Data.DbType,System.String,System.String,System.Type,System.Object,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Value Overflow Count' command
            </summary>
      <param name="storeName">The name of the store to search in</param>
      <param name="dataType">The database type of <paramref name="maxValue" /></param>
      <param name="dbDeclarationType">The name of the datatype in the specific SQL dialect</param>
      <param name="propertyName">The name of the property to check</param>
      <param name="dbType">The old type to be remapped</param>
      <param name="minValue">The minimum value that would not cause an underflow</param>
      <param name="maxValue">The maximum value that would not cause an overflow</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetStoreNameForItemCommand(EPiServer.Data.Identity,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the 'Store Name For Item' command
            </summary>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> of the item to get the store name for</param>
      <param name="tableName">The name of the 'big' table to search</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetMoveDataCommand(EPiServer.Data.Dynamic.StoreDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a command to move data between columns in the underlying storage table
            </summary>
      <param name="storeDefinition">The store definition which data is to be moved for</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetUpdatePropertyNameInReferenceTableCommand(EPiServer.Data.Dynamic.PropertyMap,EPiServer.Data.Dynamic.StoreDefinition)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get an <see cref="T:System.Data.IDbCommand" /> instance, containing update statement for the property name in the reference table
            </summary>
      <param name="propertyMap">Property map containing old property name and new property name</param>
      <param name="storeDefinition">The storeDefinition for the store</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetEntityReferenceCountCommand(EPiServer.Data.Entity.IEntity)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a command that returns the number of Dynamic Data Store objects that reference a specific IEntity.
            </summary>
      <param name="entity">The <see cref="T:EPiServer.Data.Entity.IEntity" /> for which reference should be counted.</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance that should be run by calling ExecuteScalar to return the number of references.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetStoreNamesCommandText">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the SQL for the 'Get Store Names' command
            </summary>
      <returns>A <see cref="T:System.String" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.ExecuteTransaction(System.Action)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This is just a shortcut to <see cref="p:Database" /></summary>
      <param name="action">The action to run</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.ExecuteLocked(System.String,System.Action)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executes an action with acuiring a lock.
            </summary>
      <param name="resourceName">Name of the lock.</param>
      <param name="action">The action.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.Database">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The database handler that is being used for this instance
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbDataStoreProvider.GetUpdateReferencesPropertyNameCommand(System.String,System.String,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Update the property names for the references
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="tableName">Name of the CustomBigtable</param>
      <param name="oldPropertyName">The old Name of the Property</param>
      <param name="newPropertyName">The new Name of the Property</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.Internal.RestrictedMethods">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Enumeration describing the restrictions in LINQ queries which
            can be used to enforce which methods can be combined with others
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Base class for database query providers
            </summary>
      <typeparam name="T">
      </typeparam>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.Take">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Take value for query
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.Skip">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Skip value for query
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GenerateSqlStatement">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generate a SQL statement for the query
            </summary>
      <returns>A <see cref="T:System.String" /> containing the SQL for the query</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetBooleanEqualityConstantExpression">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the boolean equality constant expression value.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ValidateMethodContext(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the method context.
            </summary>
      <param name="methodName">Name of the method.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the method call.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessMemberAccess(System.Linq.Expressions.MemberExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the member access.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the unary.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the binary.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessBinary(System.Linq.Expressions.BinaryExpression,System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the binary.
            </summary>
      <param name="expression">The expression.</param>
      <param name="operation">The operation.</param>
      <param name="parenthesis">if set to <c>true</c> [parenthesis].</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessBinaryComparison(System.Linq.Expressions.BinaryExpression,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the binary comparison.
            </summary>
      <param name="expression">The expression.</param>
      <param name="operation">The operation.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.AppendLinqStringBuilderWithBinaryComparison(System.String,System.String,System.String,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Appends the linq string builder with binary comparison.
            </summary>
      <param name="leftExpression">The left expression.</param>
      <param name="operation">The operation.</param>
      <param name="rightExpression">The right expression.</param>
      <param name="operationType">Type of the operation.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessBinaryComparison(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the binary comparison.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessNew(System.Linq.Expressions.NewExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the new expression.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessQueryable(System.Linq.Expressions.MethodCallExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provides base (common) implementation for Queryable-methods
            
            IMPORTANT:
            Deriving providers must "return base.ProcessQueryable()" in their override to
            get this common functionality.
            </summary>
      <param name="expression">
      </param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessOrderBy(System.Linq.Expressions.MethodCallExpression,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the order by.
            </summary>
      <param name="expression">The expression.</param>
      <param name="direction">The direction.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessThenBy(System.Linq.Expressions.MethodCallExpression,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the then by.
            </summary>
      <param name="expression">The expression.</param>
      <param name="direction">The direction.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.AppendLinqStringBuilderWithOrderBy(System.Linq.Expressions.MethodCallExpression,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Appends the linq string builder with order by.
            </summary>
      <param name="expression">The expression.</param>
      <param name="direction">The direction.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessInMemoryEnumerable(System.Linq.Expressions.MethodCallExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes an .Net ICollection against a column
            </summary>
      <param name="expression">The expression.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessInMemoryEnumerableMemberAccess(System.Linq.Expressions.MethodCallExpression,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes member access for an .Net ICollection against a column
            </summary>
      <param name="expression">The expression.</param>
      <param name="processArgumentIndex">Index of the argument in the expression to process.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessEnumerable(System.Linq.Expressions.MethodCallExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the enumerable.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessEnumerableGrouping(System.Linq.Expressions.MethodCallExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the enumerable grouping.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessDictionary(System.Linq.Expressions.MethodCallExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the dictionary.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessConvert(System.Linq.Expressions.UnaryExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the conversion.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessByteArray(System.Linq.Expressions.Expression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes the byte array.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ProcessEquals(System.Linq.Expressions.MethodCallExpression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Processes equals.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The processed expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetDdsType(System.Linq.Expressions.Expression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the type from the type handler, if the type in the expression has been registred in the type handler. Otherwise the expression type will be returned.
            </summary>
      <param name="expression">The expression.</param>
      <returns>
            The type from the type handler, if the type in the expression has been registred in the type handler. Otherwise the expression type will be returned.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetDdsType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the type from the type handler, if the default type has been registred in the type handler. Otherwise the <paramref name="defaultType" /> will be returned.
            </summary>
      <param name="defaultType">The default type.</param>
      <returns>
            The type from the type handler, if the default type has been registred in the type handler. Otherwise the <paramref name="defaultType" /> will be returned.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.AddJoin(System.String,System.String,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Joins with a specific type if the type exists as a DDS store
            </summary>
      <param name="joinName">The name of the join</param>
      <param name="propertyName">The name of the property</param>
      <param name="storeType">The type to join</param>
      <returns>If a store of the type was found</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.IsBooleanInWhereClauseWithoutBinaryComparison(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the type is boolean and the linq builder context is inside where clause and the expression is not inside an binary comparison
            </summary>
      <param name="propertyType">Type of the value.</param>
      <returns>
        <c>true</c> if the type is boolean and the linq builder context is inside where clause and the expression is not inside an binary comparison; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.AddPropertyToLinqBuilder(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds the property to linq builder.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.AddValuesToLinqBuilderWithQuotationIfNecessary(System.String[],System.Type,System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds values to the linq builder with quotation if necessary.
            </summary>
      <param name="type">The type.</param>
      <param name="values">The values.</param>
      <param name="referenceJoinReminder">if set to <c>true</c> [reference join reminder].</param>
      <param name="checkRecursiveMethodProcessingJoins">if set to <c>true</c> [check recursive method processing joins].</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.AddValuesToLinqBuilderWithQuotationIfNecessary(System.String[],System.Type,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds values to the linq builder with quotation if necessary.
            </summary>
      <param name="type">The type.</param>
      <param name="values">The values.</param>
      <param name="referenceJoinReminder">if set to <c>true</c> [reference join reminder].</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetCollectionColumnName(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the name of the collection column.
            </summary>
      <param name="type">The type.</param>
      <returns>The name of the column</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetReferenceJoinReminder(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determains if there is any recursive methods processing join and if the expression type is a reference
            </summary>
      <param name="expressionType">Type of the expression.</param>
      <returns>True if there is any recursive methods processing join and if the expression type is a reference</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetInternalStoreName(EPiServer.Data.Dynamic.DynamicDataStore)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the name of the internal store.
            </summary>
      <param name="store">The store.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetViewNameForStore(EPiServer.Data.Dynamic.DynamicDataStore)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the view name for store instance.
            </summary>
      <param name="store">The store.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.ConvertPosition(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts position of an int to get the correct position for the sql database.
            </summary>
      <param name="position">The position.</param>
      <returns>The correct position for the database</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetStringConstantExpression(System.Linq.Expressions.Expression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the string constant expression from the expression.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The constant expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.CompareExpressionValue(System.Linq.Expressions.Expression,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Compares the expression value with another value.
            </summary>
      <param name="expression">The expression.</param>
      <param name="value">The value.</param>
      <returns>True if the value from the expression are equal to the value argument</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetValue(System.Linq.Expressions.Expression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the deepest value from the expression.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The value from the expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetValueType(System.Linq.Expressions.Expression)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the deepest value type from the expression.
            </summary>
      <param name="expression">The expression.</param>
      <returns>The value type from the expression</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.DbQueryProvider`1.GetMemberOrConstantValue(System.Linq.Expressions.Expression,System.Type@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the deepest value and type.
            </summary>
      <param name="expression">The expression.</param>
      <param name="type">The type.</param>
      <returns>The value from the expression</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.Internal.DefaultDataStoreProviderFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.Internal.SqlServerQueryProvider`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. SQL Server specific version of database query provider
            </summary>
      <typeparam name="T">
      </typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.SqlServerQueryProvider`1.#ctor(EPiServer.Data.Dynamic.DynamicDataStore,EPiServer.Data.Dynamic.Providers.LoadAsObjectType)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default constructor
            </summary>
      <param name="store">The <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> to initialize the query provider with</param>
      <param name="loadObjectAs">Determine how to load the object</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.Internal.SqlServerQueryProvider`1.GetSqlTimeString(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the SQL string from a object containing dateTime
            </summary>
      <param name="dateTime">The dateTime object</param>
      <returns>SQL string</returns>
      <remarks>If the dateTime object is a string, we know itÂ´s a column and returns the columnname.
            If the dateTime object is of DateTime type, we add the parameter and returns a referens to the parameter</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.ProviderCallContext">
      <summary>
            Helper class to provide parameters to data store provider method calls
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.ProviderCallContext.#ctor">
      <summary>
            Construct the object with the default parameters
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.ProviderCallContext.#ctor(EPiServer.Data.Dynamic.Providers.ProviderCallContext)">
      <summary>
            Construct the object with the parameters supplied
            </summary>
      <param name="parentContext">The parent context to this context</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.ProviderCallContext.ContainsObjects">
      <summary>
            Check if call context has been used to load/save instances
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.ProviderCallContext.ClearObjects">
      <summary>
            Clear any objects from loading/saving of data
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider.GetProviderSpecificParameterName(System.String)">
      <summary>
            Return the decorated parameter name as used by MS SQL Server
            </summary>
      <param name="name">The parameter name</param>
      <returns>The decorated parameter name</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider.GetUpdateIndexCommand(System.Int64,System.String,System.Boolean,System.Int32)">
      <summary>
            Gets the update index command, which updates the index property in a collection or dictionary for a specific property for a specific item.
            The index will be updated to an index outside of the current list, to continue holding a reference to an existing object.
            </summary>
      <param name="id">The identity of the item, which will have one of it's properties updated.</param>
      <param name="propertyName">Name of the property for which the index will be updated.</param>
      <param name="isKey">If set to <c>true</c>, the property will update the key part of a dictionary. If set to false, the property will update the value part on a dictionary or collection.</param>
      <param name="startIndex">The start index from where the index update should start. All items from the start index will be updated.</param>
      <returns>
            A database command containing the update SQL for the index of a collection or dictionary.
            </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider.GetUpdateReferencesPropertyNameCommand(System.String,System.String,System.String,System.String)">
      <summary>
            Gets the command to update References' names.
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="tableName">Name of the CustomBigtable</param>
      <param name="oldPropertyName">The old Name of the Property</param>
      <param name="newPropertyName">The new Name of the Property</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider.GetStoreInfoLoadCommand(System.String,System.Boolean)">
      <summary>
            Gets the store info command load.
            </summary>
      <param name="storeName">Name of the store.</param>
      <param name="loadInactiveProperties">Set to true if properties belonging to old mapping of store should be included</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider.GetStoreInfoDeleteCommand(System.String)">
      <summary>
            Gets the store info command delete.
            </summary>
      <param name="storeName">Name of the store.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider.GetStoreInfoSaveCommand(EPiServer.Data.Dynamic.StoreDefinition)">
      <summary>
            Get the 'Store Info Save' command 
            </summary>
      <param name="storeDefinition">The <see cref="T:EPiServer.Data.Dynamic.StoreDefinition" /> to save</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider.GetUpdatePropertyNameInReferenceTableCommand(EPiServer.Data.Dynamic.PropertyMap,EPiServer.Data.Dynamic.StoreDefinition)">
      <summary>
            Get an <see cref="T:System.Data.IDbCommand" /> instance, containing update statement for the property name in the reference table
            </summary>
      <param name="propertyMap">Property map containing old property name and new property name</param>
      <param name="storeDefinition">The storeDefinition for the store</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider.IsProviderSpecificException(System.Exception)">
      <summary>
            Determines if an exception is specific to the data provider or a standard .NET exception
            </summary>
      <param name="exception">The exception to check</param>
      <returns>true if the exception is data provider specific, otherwise false</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider.GetEntityReferenceCountCommand(EPiServer.Data.Entity.IEntity)">
      <summary>
            Creates a command that returns the number of Dynamic Data Store objects that reference a specific IEntity.
            </summary>
      <param name="entity">The <see cref="T:EPiServer.Data.Entity.IEntity" /> for which reference should be counted.</param>
      <returns>An <see cref="T:System.Data.IDbCommand" /> instance that should be run by calling ExecuteScalar to return the number of references.</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.SqlServerDataStoreProvider.SaveStoreDefinition(EPiServer.Data.Dynamic.StoreDefinition)">
      <summary>
            Sql Server has it's own version of this as we need to drop the views and sp's first if they already exist
            before re-creating them
            </summary>
      <param name="storeDefinition">
      </param>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.TableInformation">
      <summary>
            Class that contains information for a database table mapping
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.TableInformation.GetColumn(System.String,System.Boolean)">
      <summary>
            Get a column that has the same name as <paramref name="name" /></summary>
      <param name="name">The name of the column to get</param>
      <param name="remove">true if the column should be removed from the collection is therefore not available in future calls to GetColumn</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.Providers.ColumnInformation" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.TableInformation.GetColumn(System.Type,System.Boolean)">
      <summary>
            Get a non-indexed column that <paramref name="type" /> can be mapped to
            </summary>
      <param name="type">The <see cref="T:System.Type" /> that will be mapped to the column</param>
      <param name="remove">true if the column should be removed from the collection is therefore not available in future calls to GetColumn</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.Providers.ColumnInformation" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.TableInformation.GetColumn(System.Type,System.Boolean,System.Boolean)">
      <summary>
            Get a column that <paramref name="type" /> can be mapped to
            </summary>
      <param name="type">The <see cref="T:System.Type" /> that will be mapped to the column</param>
      <param name="requireIndexed">true if the column mapped is required to be indexed</param>
      <param name="remove">true if the column should be removed from the collection is therefore not available in future calls to GetColumn</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.Providers.ColumnInformation" /> instance</returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.Providers.ColumnInformation">
      <summary>
            Class that contains information for a database column mapping
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Providers.ColumnInformation.Name">
      <summary>
            The name of the column
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Providers.ColumnInformation.DataType">
      <summary>
            The <see cref="T:System.Data.DbType" /> of the column
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Providers.ColumnInformation.MaxLength">
      <summary>
            The maximum length of the column
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Providers.ColumnInformation.DbDeclarationType">
      <summary>
            The database specific declaration type for the column
            </summary>
      <example>varchar</example>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Providers.ColumnInformation.OwnerTableName">
      <summary>
            The name of the table this column belongs to
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.Providers.ColumnInformation.Indexed">
      <summary>
            True if column is contained within an index in the database, false if not
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.Providers.ColumnInformation.Clone">
      <summary>
            Clone the current object
            </summary>
      <returns>A new <see cref="T:EPiServer.Data.Dynamic.Providers.ColumnInformation" /> with the same values as the current object</returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.StoreDefinition">
      <summary>
            Maps a type bag into a collection of PropertyMaps
            </summary>
    </member>
    <member name="E:EPiServer.Data.Dynamic.StoreDefinition.StoreDefinitionChanged">
      <summary>
            Raised when <see cref="T:EPiServer.Data.Dynamic.StoreDefinition" /> be changed.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.Get(System.String)">
      <summary>
            Returns a <see cref="T:EPiServer.Data.Dynamic.StoreDefinition" /> or null if one does not exist for the <paramref name="storeName" /></summary>
      <param name="storeName">The name of the store to get the definition for</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.StoreDefinition" /> instancde</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.GetAll">
      <summary>
            Returns a collection of all existing <see cref="T:EPiServer.Data.Dynamic.StoreDefinition" /> objects
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.Create(System.String,System.Collections.Generic.IDictionary{System.String,System.Type},EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>
            Creates a new or returns an existing <see cref="T:EPiServer.Data.Dynamic.StoreDefinition" /></summary>
      <param name="storeName">The name of the store to get the definition for</param>
      <param name="typeBag">An IDictionary&lt;string, Type&gt; which is used to create the store mappings</param>
      <param name="parameters">Parameters to use when creating the store mappings</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.StoreDefinition" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.Delete(System.String)">
      <summary>
            Delete the mappings for the store specified
            </summary>
      <param name="storeName">The name of the store to delete the mappings for</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.DeleteFromCache(System.String)">
      <summary>
            Delete the mappings from the in-memory cache for the store specified
            </summary>
      <param name="storeName">The name of the store to delete the mappings for</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.ClearCache">
      <summary>
            Clear the in-memory cache of store mappings
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.GenerateMappings(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},EPiServer.Data.Dynamic.StoreDefinitionParameters,System.Int32)">
      <summary>
            Generates a collection of <see cref="T:EPiServer.Data.Dynamic.PropertyMap" /> for the <paramref name="typeBag" /> passed.
            This method is provided for mock support of <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /></summary>
      <param name="typeBag">A IDictionary&lt;string,Type&gt; which is used to create the store mappings</param>
      <param name="parameters">Parameters to use when creating the store mappings</param>
      <param name="version">The version number to assign to the mappings</param>
      <returns>A <see cref="T:System.Collections.Generic.IList`1" /> instance</returns>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StoreDefinition.StoreRowsRequired">
      <summary>
            Get the number of rows in the data store the item represented by the current collection requires
            </summary>
      <returns>A <see cref="T:System.Int32" /> indicating how many rows in the store are required for this type</returns>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StoreDefinition.PendingDataMoves">
      <summary>
            Data moves not yet committed to the store
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.GetMapping(System.String)">
      <summary>
            Get the mapping with the specified <paramref name="name" /> from the all mappings collection
            </summary>
      <param name="name">The name of the property to get</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.PropertyMap" /> with the name specified</returns>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StoreDefinition.MappingNames">
      <summary>
            Extract a collection of mapping names from the active mappings collection
            </summary>
      <returns>A IEnumerable&lt;string&gt;</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.Remap(System.Collections.Generic.IDictionary{System.String,System.Type})">
      <summary>
            Remaps the store represented by the current instance using the type bag passed
            </summary>
      <param name="typeBag">The type bag to use to generate the store mappings</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.Remap(System.Type)">
      <summary>
            Remaps the store represented by the current instance using the Type passed
            </summary>
      <param name="type">The Type to use to generate the store mappings</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.Remap(System.Type,EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>
            Remaps the store represented by the current instance using the Type and StoreDefinitionParameters passed
            </summary>
      <param name="type">The Type to use to generate the store mappings</param>
      <param name="parameters">Parameters to use when creating the store mappings</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.Remap(System.Collections.Generic.IDictionary{System.String,System.Type},EPiServer.Data.Dynamic.StoreDefinitionParameters)">
      <summary>
            Remaps the store represented by the current instance using the type bag and StoreDefinitionParameters passed
            </summary>
      <param name="typeBag">The type bag to use to generate the store mappings</param>
      <param name="parameters">Parameters to use when creating the store mappings</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.RenameProperty(System.String,System.String)">
      <summary>
            Renames the property in the mappings
            </summary>
      <param name="oldName">The existing name of the property mapping</param>
      <param name="newName">The new name of the property mapping</param>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.ValidateAgainstMappings(System.Type,System.Boolean)">
      <summary>
            Validates the Type passed against the mappings held in the current instance
            </summary>
      <param name="type">The Type to use to generate the store mappings to compare to</param>
      <param name="throwIfDifferences">if true then an exception will be thrown if any mapping differences are found</param>
      <returns>true if the mappings generated match the current instance, otherwise false</returns>
      <exception cref="T:EPiServer.Data.Dynamic.StoreInconsistencyException">
      </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.ValidateAgainstMappings(System.Type,EPiServer.Data.Dynamic.StoreDefinitionParameters,System.Boolean)">
      <summary>
            Validates the Type passed against the mappings held in the current instance
            </summary>
      <param name="type">The Type to use to generate the store mappings to compare to</param>
      <param name="parameters">Parameters to use when generating the store mappings to compare to</param>
      <param name="throwIfDifferences">if true then an exception will be thrown if any mapping differences are found</param>
      <returns>true if the mappings generated match the current instance, otherwise false</returns>
      <exception cref="T:EPiServer.Data.Dynamic.StoreInconsistencyException">
      </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.ValidateAgainstMappings(System.Type,EPiServer.Data.Dynamic.StoreDefinitionParameters,System.Collections.Generic.IList{System.String}@)">
      <summary>
            Validates the Type passed against the mappings held in the current instance
            </summary>
      <param name="type">The Type to use to generate the store mappings to compare to</param>
      <param name="parameters">Parameters to use when generating the store mappings to compare to</param>
      <param name="errors">The collection of error found when doing the validation</param>
      <returns>true if the mappings generated match the current instance, otherwise false</returns>
      <exception cref="T:EPiServer.Data.Dynamic.StoreInconsistencyException">
      </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.ValidateAgainstMappings(System.Collections.Generic.IDictionary{System.String,System.Type},System.Boolean)">
      <summary>
            Validates the Type passed against the mappings held in the current instance
            </summary>
      <param name="typeBag">The type bag to use to generate the store mappings to compare to</param>
      <param name="throwIfDifferences">if true then an exception will be thrown if any mapping differences are found</param>
      <returns>true if the mappings generated match the current instance, otherwise false</returns>
      <exception cref="T:EPiServer.Data.Dynamic.StoreInconsistencyException">
      </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.ValidateAgainstMappings(System.Collections.Generic.IDictionary{System.String,System.Type},EPiServer.Data.Dynamic.StoreDefinitionParameters,System.Boolean)">
      <summary>
            Validates the Type passed against the mappings held in the current instance
            </summary>
      <param name="typeBag">The type bag to use to generate the store mappings to compare to</param>
      <param name="parameters">Parameters to use when generating the store mappings to compare to</param>
      <param name="throwIfDifferences">if true then an exception will be thrown if any mapping differences are found</param>
      <returns>true if the mappings generated match the current instance, otherwise false</returns>
      <exception cref="T:EPiServer.Data.Dynamic.StoreInconsistencyException">
      </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.ValidateAgainstMappings(System.Collections.Generic.IDictionary{System.String,System.Type},EPiServer.Data.Dynamic.StoreDefinitionParameters,System.Collections.Generic.IList{System.String}@)">
      <summary>
            Validates the Type passed against the mappings held in the current instance
            </summary>
      <param name="typeBag">The type bag to use to generate the store mappings to compare to</param>
      <param name="parameters">Parameters to use when generating the store mappings to compare to</param>
      <param name="errors">The collection of error found when doing the validation</param>
      <returns>true if the mappings generated match the current instance, otherwise false</returns>
      <exception cref="T:EPiServer.Data.Dynamic.StoreInconsistencyException">
      </exception>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.CommitChanges">
      <summary>
            Commit the changes done through the Remap and Rename methods to permanent storage
            </summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.StoreDefinition.CommitChanges(EPiServer.Data.Dynamic.Providers.DataStoreProvider)">
      <summary>
            Commit the changes done through the Remap and Rename methods to permanent storage
            </summary>
      <param name="provider">The <see cref="T:EPiServer.Data.Dynamic.Providers.DataStoreProvider" /> to use when saving the changes</param>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StoreDefinition.DatabaseDateTimeKind">
      <summary>
            The DatabaseDateTimeKind property
            </summary>
    </member>
    <member name="F:EPiServer.Data.Dynamic.StoreDefinitionParameters.DefaultStorageTableName">
      <summary>
            The name of the default 'Big Table'
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StoreDefinitionParameters.DatabaseDateTimeKind">
      <summary>
            Specifies how the store should handle with <see cref="T:System.DateTime" /> types.
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.StoreDefinitionChangedEventArgs">
      <summary>
            The event be fired when <see cref="T:EPiServer.Data.Dynamic.StoreDefinition" /> changed.
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StoreDefinitionChangedEventArgs.StoreName">
      <summary>
            The name of <see cref="T:EPiServer.Data.Dynamic.StoreDefinition" />.
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.StoreInconsistencyException">
      <summary>
            Defines an exception that is thrown when a stores mappings do not agree with a Type or type bag 
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StoreInconsistencyException.StoreName">
      <summary>
            The name of the store that is inconsistent
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StoreInconsistencyException.Errors">
      <summary>
            The errors which define why a store is inconsistent
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.StorageType">
      <summary>
            Helper class to determine the Dynamic Data Store storage type of a <see cref="T:System.Type" /></summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StorageType.IsInline">
      <summary>
            A <see cref="T:System.Boolean" /> indicating if the current <see cref="T:System.Type" /> is mapped inline in a Dynamic Data Store
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StorageType.IsCollection">
      <summary>
            A <see cref="T:System.Boolean" /> indicating if the current <see cref="T:System.Type" /> is mapped as a collection in a Dynamic Data Store
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StorageType.IsReference">
      <summary>
            A <see cref="T:System.Boolean" /> indicating if the current <see cref="T:System.Type" /> is mapped as a reference in a Dynamic Data Store
            </summary>
    </member>
    <member name="P:EPiServer.Data.Dynamic.StorageType.IsAnonymous">
      <summary>
            A <see cref="T:System.Boolean" /> indicating if the current <see cref="T:System.Type" /> is an anonymous type
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.TypeExtensions">
      <summary>
            Class with extension methods for <see cref="T:System.Type" /></summary>
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeExtensions.GetStorageType(System.Type)">
      <summary>
            Returns the <see cref="T:EPiServer.Data.Dynamic.StorageType" /> for <paramref name="type" /></summary>
      <param name="type">The Type to operate on</param>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.StorageType" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeExtensions.GenerateTypeBag(System.Type)">
      <summary>
            Returns a type bag compatible with the Dynamic Data Store CreateStore methods
            </summary>
      <param name="type">The Type to operate on</param>
      <returns>A Dictionary&lt;string, Type&gt;</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeExtensions.GetNullableType(System.Type)">
      <summary>
            If the type passed is Nullable&lt;T&gt; then the generic parameter at position 0 is returned.
            If not then <paramref name="type" /> is returned
            </summary>
      <param name="type">The value to check</param>
      <returns>A <see cref="T:System.Type" /></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeExtensions.CreateStore(System.Type)">
      <summary>
            Creates an new Dynamic Data Store for the type
            If a store with the same name already exists then it will be returned, otherwise the store will be created.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to create a store for</param>
      <remarks>See <see cref="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.CreateStore(System.Type)" /> for more information</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeExtensions.GetStore(System.Type)">
      <summary>
            Gets the Dynamic Data Store for the type. If a store does not exist for the type then null is returned.    
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to get a store for</param>
      <remarks>See <see cref="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.GetStore(System.Type)" /> for more information</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance or null if an existing store does not exist</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeExtensions.GetOrCreateStore(System.Type)">
      <summary>
            Gets the Dynamic Data Store for the type. If a store does not exist for the type then a new one is created.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to get or create a store for</param>
      <remarks>See <see cref="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.GetStore(System.Type)" /> and <see cref="M:EPiServer.Data.Dynamic.DynamicDataStoreFactory.CreateStore(System.Type)" /> for more information</remarks>
      <returns>A <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> instance</returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeExtensions.HasProperty(System.Type,System.String)">
      <summary>
            Returns whether the Type defines the property with name <paramref name="propertyName" /></summary>
      <param name="type">The Type to operate on</param>
      <param name="propertyName">The name of the property to check for</param>
      <returns>
        <code>true</code> if the Type defines the property, otherwise <code>false</code></returns>
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeExtensions.IsPropertyOfType(System.Type,System.String,System.Type)">
      <summary>
            Returns whether the Type defines the property with name <paramref name="propertyName" />
            and if it is of Type <paramref name="propertyType" /></summary>
      <param name="type">The Type to operate on</param>
      <param name="propertyName">The name of the property to check for</param>
      <param name="propertyType">The Type the property should be</param>
      <returns>
        <code>true</code> if the Type defines the property and it is of the Type specified, otherwise <code>false</code></returns>
    </member>
    <member name="T:EPiServer.Data.Dynamic.FallbackTypeResolver">
      <summary>
            Delegate for resolving unknown types
            </summary>
    </member>
    <member name="T:EPiServer.Data.Dynamic.TypeResolver">
      <summary>
            Helper class to resolve <see cref="T:System.Type" /> from Assembly Qualified Names
            </summary>
      <seealso cref="P:System.Type.AssemblyQualifiedName" />
    </member>
    <member name="P:EPiServer.Data.Dynamic.TypeResolver.AutoResolve">
      <summary>
            A <see cref="T:System.Boolean" /> indicating if type name should be automatically resolved to the <see cref="T:System.Type" /></summary>
      <remarks>See the <see cref="M:EPiServer.Data.Dynamic.TypeResolver.GetType(System.String,System.Boolean)" />  method for more information</remarks>
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeResolver.GetType(System.String,System.Boolean)">
      <summary>
            Tries to resolve the <paramref name="typeName" /> to a <see cref="T:System.Type" /></summary>
      <param name="typeName">A typeName for a type, can be an Assembly Qualified Name for a type</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" /></param>
      <returns>The <see cref="T:System.Type" /> with the specified name, if found; otherwise, <see langword="null" /></returns>
      <remarks>
            When the <see cref="P:EPiServer.Data.Dynamic.TypeResolver.AutoResolve" /> property is set to <see langword="false" /> then only <see cref="M:System.Type.GetType" /> is used to resolve <paramref name="typeName" /> to a <see cref="T:System.Type" />.
            This allows assembly redirects to be used as an alternative to the auto resolve mechanism this class supplies.
            When set to <see langword="false" /> then the following sequence is used:
            1. Try to resolve the <paramref name="typeName" /> to a <see cref="T:System.Type" /> using the <see cref="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" /> method
            2. If <paramref name="typeName" /> is a Assembly Qualified Name then all version numbers are removed from the <paramref name="typeName" /> and then try again using <see cref="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
            3. Remove all information except namespace and class names from the Assembly Qualified Name and then try again using <see cref="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
            Once an <paramref name="typeName" /> has been resolved to a <see cref="T:System.Type" /> then that information is cached.
            </remarks>
      <seealso cref="P:System.Type.AssemblyQualifiedName" />
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeResolver.GetType(System.String,System.Boolean,EPiServer.Data.Dynamic.FallbackTypeResolver)">
      <summary>
            Tries to resolve the <paramref name="typeName" /> to a <see cref="T:System.Type" /></summary>
      <param name="typeName">An Assembly Qualified Name for a type</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" /></param>
      <param name="fallbackResolver">The fallback resolver.</param>
      <returns>
            The <see cref="T:System.Type" /> with the specified name, if found; otherwise, <see langword="null" /></returns>
      <remarks>
            When the <see cref="P:EPiServer.Data.Dynamic.TypeResolver.AutoResolve" /> property is set to <see langword="false" /> then only <see cref="M:System.Type.GetType" /> is used to resolve an Assembly Qualified Name to a <see cref="T:System.Type" />.
            This allows assembly redirects to be used as an alternative to the auto resolve mechanism this class supplies.
            When set to <see langword="false" /> then the following sequence is used:
            1. Try to resolve the Assembly Qualified Name to a <see cref="T:System.Type" /> using the <see cref="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" /> method
            2. Remove all version numbers from the Assembly Qualified Name and then try again using <see cref="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
            3. Remove all information except namespace and class names from the Assembly Qualified Name and then try again using <see cref="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
            Once an Assembly Qualified Name has been resolved to a <see cref="T:System.Type" /> then that information is cached.
            </remarks>
      <seealso cref="P:System.Type.AssemblyQualifiedName" />
    </member>
    <member name="M:EPiServer.Data.Dynamic.TypeResolver.ClearCache">
      <summary>
            Clear the cache of Assembly Qualified Names to types
            </summary>
    </member>
    <member name="T:EPiServer.Data.TypeHandlers.Internal.CultureInfoTypeHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles <see cref="T:System.Globalization.CultureInfo" /> when stored in DDS.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.TypeHandlers.Internal.CultureInfoTypeHandler.MapToDatabaseType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the database type as string.
            </summary>
      <param name="type">The type.</param>
      <returns>The type that is stored in database</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.TypeHandlers.Internal.CultureInfoTypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the <see cref="T:System.Globalization.CultureInfo" /> value in the database format.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="ownerType">Type of the owner.</param>
      <returns>The name of the <see cref="T:System.Globalization.CultureInfo" /></returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.TypeHandlers.Internal.CultureInfoTypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns an <see cref="T:System.Globalization.CultureInfo" /> instance from the database format.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
      <param name="targetType">Type of the target.</param>
      <param name="ownerType">Type of the owner.</param>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> instance</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Entity.EntityProviderHandler">
      <summary>
            Resolve and register <see cref="T:EPiServer.Data.Entity.IEntityProvider" /> implementations for .NET types
            </summary>
      <example>
        <para>
            Register an entity provider as follows:
            </para>
        <code source="../CodeSamples/EPiServer.Data/EntityProviderHandler.cs" region="RegisterAnEntityProvider" lang="cs" />
        <para>
            Resolve an entity provider as follows:
            </para>
        <code source="../CodeSamples/EPiServer.Data/EntityProviderHandler.cs" region="ResolveAnEntityProvider1" lang="cs" />
        <para>
            Register an entity provider as follows when the type is not known at compile-time:
            </para>
        <code source="../CodeSamples/EPiServer.Data/EntityProviderHandler.cs" region="ResolveAnEntityProvider2" lang="cs" />
      </example>
    </member>
    <member name="P:EPiServer.Data.Entity.EntityProviderHandler.Instance">
      <summary>
            The globally available instance of the entity repository.
            </summary>
      <remarks>This instance is being initialized by <see cref="T:EPiServer.Data.DataInitialization" /> and will be null otherwise</remarks>
    </member>
    <member name="M:EPiServer.Data.Entity.EntityProviderHandler.#ctor">
      <summary>
            Initializes a new instance of this class. 
            </summary>
    </member>
    <member name="M:EPiServer.Data.Entity.EntityProviderHandler.GetEntityProvider``1">
      <summary>
            Gets the <see cref="T:EPiServer.Data.Entity.IEntityProvider" /> that handles instantiation of the specified type
            </summary>
      <typeparam name="TEntity">The type of the entity which you are requesting the provider for</typeparam>
      <returns>Returns an instance of the <see cref="T:EPiServer.Data.Entity.IEntityProvider" /> configured for the type requested in the
            <typeparamref name="TEntity" /> parameter, or null if no provider is found.</returns>
    </member>
    <member name="M:EPiServer.Data.Entity.EntityProviderHandler.GetEntityProvider(System.Type)">
      <summary>
            Gets the <see cref="T:EPiServer.Data.Entity.IEntityProvider" /> that handles instantiation of the specified type
            </summary>
      <param name="entityType">The <see cref="T:System.Type" /> that is required to be supported by the returned <see cref="T:EPiServer.Data.Entity.IEntityProvider" /></param>
      <returns>Returns an instance of the <see cref="T:EPiServer.Data.Entity.IEntityProvider" /> configured for the type requested in the
            <paramref name="entityType" /> parameter, or null if no provider is found.</returns>
    </member>
    <member name="M:EPiServer.Data.Entity.EntityProviderHandler.RegisterEntityProvider``2">
      <summary>
            Registers a <see cref="T:EPiServer.Data.Entity.IEntityProvider" /> that handles instantiation of the specified type
            </summary>
      <typeparam name="TEntityProvider">The instance of the <see cref="T:EPiServer.Data.Entity.IEntityProvider" /> configured for the type requested</typeparam>
      <typeparam name="TSupportedType">The <see cref="T:System.Type" /> that is required to be supported by the  <see cref="T:EPiServer.Data.Entity.IEntityProvider" /></typeparam>
      <remarks>If an instance of <typeparamref name="TEntityProvider" /> is already added as a provider the <typeparamref name="TSupportedType" /> will point to the same instance.</remarks>
    </member>
    <member name="M:EPiServer.Data.Entity.EntityProviderHandler.RegisterEntityProvider(EPiServer.Data.Entity.IEntityProvider,System.Type[])">
      <summary>
            Registers a <see cref="T:EPiServer.Data.Entity.IEntityProvider" /> that handles instantiation of the specified type
            </summary>
      <param name="entityProvider">The instance of the <see cref="T:EPiServer.Data.Entity.IEntityProvider" /> configured for the types requested</param>
      <param name="supportedTypes">A list of <see cref="T:System.Type" /> that is supported by the <see cref="T:EPiServer.Data.Entity.IEntityProvider" /></param>
    </member>
    <member name="T:EPiServer.Data.Entity.EntityReference">
      <summary>
            A light-weight reference to an IEntity primarily used to save references to other entities
            </summary>
    </member>
    <member name="M:EPiServer.Data.Entity.EntityReference.#ctor(System.Type,System.Int32)">
      <summary>
            Initializes a new instance of this class. 
            </summary>
      <param name="type">The type of the entity</param>
      <param name="id">The ID of the entity</param>
    </member>
    <member name="P:EPiServer.Data.Entity.EntityReference.Type">
      <summary>
            Type type of the entity
            </summary>
    </member>
    <member name="P:EPiServer.Data.Entity.EntityReference.ID">
      <summary>
            The ID of the entity
            </summary>
    </member>
    <member name="M:EPiServer.Data.Entity.EntityReference.GetEntityType(System.Type)">
      <summary>
            Gets the Type designated as EntityType for the given Type (taking  <see cref="T:EPiServer.Data.Entity.EntityTypeOverrideAttribute" /> into account) 
            </summary>
      <param name="originalType">The <see cref="P:EPiServer.Data.Entity.EntityReference.Type" /> to inspect</param>
      <returns>Returns the Type designated as EntityType. If no <see cref="T:EPiServer.Data.Entity.EntityTypeOverrideAttribute" /> could be found in the
            inheritance chain, it returns the type supplied in <paramref name="originalType" />.</returns>
    </member>
    <member name="M:EPiServer.Data.Entity.EntityReference.ToEntityReference(EPiServer.Data.Entity.IEntity)">
      <summary>
            Gets an <see cref="T:EPiServer.Data.Entity.EntityReference" /> to an <see cref="T:EPiServer.Data.Entity.IEntity" /></summary>
      <param name="entity">The entity to which you want to get a reference</param>
      <returns>An <see cref="T:EPiServer.Data.Entity.EntityReference" /> to <paramref name="entity" />, or <see cref="P:Empty" /> if <paramref name="entity" /> is null</returns>
    </member>
    <member name="P:EPiServer.Data.Entity.EntityReference.Empty">
      <summary>
            The empty <see cref="T:EPiServer.Data.Entity.EntityReference" /></summary>
    </member>
    <member name="T:EPiServer.Data.Entity.EntityTypeOverrideAttribute">
      <summary>
            Applying this attribute on a class tells EPiServer.Data to store entity data under the type returned by <see name="OverrideType" /> in the database.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Entity.EntityTypeOverrideAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of this class. 
            </summary>
      <param name="overrideType">The type that should be used instead of the original type</param>
    </member>
    <member name="P:EPiServer.Data.Entity.EntityTypeOverrideAttribute.OverrideType">
      <summary>
            The type that should be used instead of the original type
            </summary>
    </member>
    <member name="T:EPiServer.Data.Entity.IEntity">
      <summary>
            Defines the necessary identifiers and functionality that a class must implement to be usable as an entity
            </summary>
      <seealso cref="T:EPiServer.Data.Entity.EntityProviderHandler" />
      <seealso cref="T:EPiServer.Data.Entity.IEntityProvider" />
      <seealso cref="T:EPiServer.Data.Entity.EntityReference" />
      <seealso cref="T:EPiServer.Data.Entity.IEntityResolver" />
      <seealso cref="T:EPiServer.Data.Entity.IEntityTypeResolver" />
    </member>
    <member name="P:EPiServer.Data.Entity.IEntity.ID">
      <summary>
            Gets the identifier for the entity. (Unique in the domain of that type).
            </summary>
    </member>
    <member name="P:EPiServer.Data.Entity.IEntity.UniqueID">
      <summary>
            Gets the globally unique identifier for the entity
            </summary>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntity.CopyAsNew">
      <summary>
            Creates a writable copy of the current object that can be saved as a new entity.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy. Identitiers for the entity are cleared.
            </remarks>
    </member>
    <member name="P:EPiServer.Data.Entity.IEntity.Master">
      <summary>
            Gets the original instance for a writable copy or null if this is the original instance.
            </summary>
      <remarks>
            This can be used for detecting changes that have been made to a writable copy.
            </remarks>
    </member>
    <member name="T:EPiServer.Data.Entity.IEntity`1">
      <summary>
            Defines the necessary identifiers and functionality that a class must implement to be usable as an entity
            </summary>
      <seealso cref="T:EPiServer.Data.Entity.EntityProviderHandler" />
      <seealso cref="T:EPiServer.Data.Entity.IEntityProvider" />
      <seealso cref="T:EPiServer.Data.Entity.EntityReference" />
      <seealso cref="T:EPiServer.Data.Entity.IEntityResolver" />
      <seealso cref="T:EPiServer.Data.Entity.IEntityTypeResolver" />
    </member>
    <member name="M:EPiServer.Data.Entity.IEntity`1.CopyAsNew">
      <summary>
            Creates a writable copy of the current object that can be saved as a new entity.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy. Identitiers for the entity are cleared.
            </remarks>
    </member>
    <member name="P:EPiServer.Data.Entity.IEntity`1.Master">
      <summary>
            Gets the original instance for a writable copy or null if this is the original instance.
            </summary>
      <remarks>
            This can be used for detecting changes that have been made to a writable copy.
            </remarks>
    </member>
    <member name="T:EPiServer.Data.Entity.IEntityProvider">
      <summary>
            Defines a uniform interface for performing entity operations
            </summary>
      <remarks>
            The primary way of obtaining entity provider instances is through <see cref="M:EPiServer.Data.Entity.EntityProviderHandler.GetEntityProvider(System.Type)" />.
            Implementers of this interface will also want to register their entity provider using <see cref="M:EPiServer.Data.Entity.EntityProviderHandler.RegisterEntityProvider(EPiServer.Data.Entity.IEntityProvider,System.Type[])" /> or through configuration.
            </remarks>
      <seealso cref="T:EPiServer.Data.Entity.EntityProviderHandler" />
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityProvider.GetEntityInstance(System.Type,System.Data.Common.DbDataReader)">
      <summary>
            Creates an instance of an object based on its <see cref="T:System.Type" /> and a <see cref="T:System.Data.Common.DbDataReader" /></summary>
      <param name="type">System <see cref="T:System.Type" /> of the object</param>
      <param name="reader">The <see cref="T:System.Data.Common.DbDataReader" /> containing the data of the object</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityProvider.GetEntityInstance(System.Type,System.Int32)">
      <summary>
            Creates an instance of an object based on its <see cref="T:System.Type" /> and its ID 
            </summary>
      <param name="type">System <see cref="T:System.Type" /> of the object</param>
      <param name="id">ID of the object</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityProvider.AddEntityInstance(EPiServer.Data.Entity.IEntity)">
      <summary>
            Add a new instance of an <see cref="T:EPiServer.Data.Entity.IEntity" /></summary>
      <param name="entity">The entity to add</param>
      <returns>The added <see cref="T:EPiServer.Data.Entity.IEntity" /></returns>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityProvider.UpdateEntityInstance(EPiServer.Data.Entity.IEntity)">
      <summary>
            Update an existing <see cref="T:EPiServer.Data.Entity.IEntity" /></summary>
      <param name="entity">The entity to update</param>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityProvider.RemoveEntityInstance(EPiServer.Data.Entity.IEntity)">
      <summary>
            Remove an existing <see cref="T:EPiServer.Data.Entity.IEntity" /></summary>
      <param name="entity">The entity to remove</param>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityProvider.GetSupportedOperations(System.Type)">
      <summary>
            Gets which operations this entity provider supports for the specified type.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to check for supported operations</param>
      <returns>The supported operations, possibly multiple values (flags)</returns>
    </member>
    <member name="T:EPiServer.Data.Entity.SupportedOperations">
      <summary>
            Defines the operations that an <see cref="T:EPiServer.Data.Entity.IEntityProvider" /> can support
            </summary>
    </member>
    <member name="F:EPiServer.Data.Entity.SupportedOperations.None">
      <summary>
            Default value of no supported operations
            </summary>
    </member>
    <member name="F:EPiServer.Data.Entity.SupportedOperations.Get">
      <summary>
            The provider supports reading of entities
            </summary>
    </member>
    <member name="F:EPiServer.Data.Entity.SupportedOperations.Add">
      <summary>
            The provider supports adding new entities
            </summary>
    </member>
    <member name="F:EPiServer.Data.Entity.SupportedOperations.Update">
      <summary>
            The provider supports updating entities
            </summary>
    </member>
    <member name="F:EPiServer.Data.Entity.SupportedOperations.Remove">
      <summary>
            The provider supports removing entities
            </summary>
    </member>
    <member name="T:EPiServer.Data.Entity.IEntityResolver">
      <summary>
            Defines a service that can resolve an <see cref="T:EPiServer.Data.Entity.EntityReference" /> to the unique identity of the referenced <see cref="T:EPiServer.Data.Entity.IEntity" /> and vice versa.
            </summary>
      <example>
        <para>Load an <see cref="T:EPiServer.Data.Entity.IEntity" /> by unique id</para>
        <code source="../CodeSamples/EPiServer.Data/IEntityResolver.cs" region="GetEntityByGuid" lang="cs" />
      </example>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityResolver.GetEntityReference(System.Guid)">
      <summary>
            Gets an <see cref="T:EPiServer.Data.Entity.EntityReference" /> to the <see cref="T:EPiServer.Data.Entity.IEntity" /> with the specified unique identity.
            </summary>
      <param name="uniqueId">The unique identity of the entity.</param>
      <returns>The <see cref="T:EPiServer.Data.Entity.EntityReference" /> that referes to the <see cref="T:EPiServer.Data.Entity.IEntity" /> with the given unique identity, or <see cref="P:EPiServer.Data.Entity.EntityReference.Empty" /> if not found.</returns>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityResolver.GetEntityUniqueID(EPiServer.Data.Entity.EntityReference)">
      <summary>
            Gets the unique identity of the <see cref="T:EPiServer.Data.Entity.IEntity" /> that is referenced by the specified <see cref="T:EPiServer.Data.Entity.EntityReference" />.
            </summary>
      <param name="entityReference">A reference to the entity.</param>
      <returns>The unique identity of the <see cref="T:EPiServer.Data.Entity.IEntity" /> that the given <see cref="T:EPiServer.Data.Entity.EntityReference" /> refers to, or <see cref="F:System.Guid.Empty" /> if not found.</returns>
    </member>
    <member name="T:EPiServer.Data.Entity.IEntityTypeResolver">
      <summary>
            Interface that defines a service that resolves Entity types and identities.
            </summary>
      <example>
        <para>
            Example that gets an ID of a type and then reads the same type back again by ID
            </para>
        <code source="../CodeSamples/EPiServer.Data/IEntityTypeResolver.cs" region="Sample1" lang="cs" />
      </example>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityTypeResolver.GetTypeName(System.Type,System.Boolean)">
      <summary>
            Gets the name of a <see cref="T:System.Type" /> as used in the database
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to get the name for</param>
      <param name="ignoreOverrideAttribute">Whether to ignore the <see cref="T:EPiServer.Data.Entity.EntityTypeOverrideAttribute" /> attribute.</param>
      <returns>The type name.</returns>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityTypeResolver.GetTypeID(System.Type,System.Boolean)">
      <summary>
            Gets the ID representing a <see cref="T:System.Type" /> in the database
            </summary>
      <param name="type">The <see cref="T:System.Type" /> for which to get the ID</param>
      <param name="ignoreOverrideAttribute">Whether to ignore the <see cref="T:EPiServer.Data.Entity.EntityTypeOverrideAttribute" /> attribute.</param>
      <returns>Returns the integer ID that represents the <paramref name="type" /> in the database.</returns>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityTypeResolver.GetTypeByID(System.Int32)">
      <summary>
            Gets the <see cref="T:System.Type" /> represented by <paramref name="id" /> in the database.
            </summary>
      <param name="id">The ID for which to get the <see cref="T:System.Type" /></param>
      <returns>The <see cref="T:System.Type" /> associated with the given <paramref name="id" />.</returns>
    </member>
    <member name="T:EPiServer.Data.Entity.IEntityTypeResolverExtensions">
      <summary>
            Extension methods for the <see cref="T:EPiServer.Data.Entity.IEntityTypeResolver" /> Interface that adds simplified overloads for commonly access methods.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityTypeResolverExtensions.GetTypeName(EPiServer.Data.Entity.IEntityTypeResolver,System.Type)">
      <summary>
            Gets the name of a <see cref="T:System.Type" /> as used in the database
            </summary>
      <param name="resolver">The instance on which the extension is applied</param>
      <param name="type">The <see cref="T:System.Type" /> to get the name for</param>
      <returns>The type name.</returns>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityTypeResolverExtensions.GetTypeName``1(EPiServer.Data.Entity.IEntityTypeResolver)">
      <summary>
            Gets the name of a <see cref="T:System.Type" /> as used in the database
            </summary>
      <typeparam name="TEntity">The type of the entity to get the ID for.</typeparam>
      <param name="resolver">The instance on which the extension is applied</param>
      <returns>
            The type name.
            </returns>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityTypeResolverExtensions.GetTypeID(EPiServer.Data.Entity.IEntityTypeResolver,System.Type)">
      <summary>
            Gets the ID representing a <see cref="T:System.Type" /> in the database.
            </summary>
      <param name="resolver">The instance on which the extension is applied</param>
      <param name="type">The <see cref="T:System.Type" /> to get the ID for</param>
      <returns>Returns the integer that represents the <paramref name="type" /> in the database.</returns>
    </member>
    <member name="M:EPiServer.Data.Entity.IEntityTypeResolverExtensions.GetTypeID``1(EPiServer.Data.Entity.IEntityTypeResolver)">
      <summary>
            Gets the ID representing a <see cref="T:System.Type" /> in the database.
            </summary>
      <typeparam name="TEntity">The type of entity to get the ID for.</typeparam>
      <param name="resolver">The instance on which the extension is applied</param>
      <returns>
            Returns the integer that represents the <typeparamref name="TEntity" /> in the database.
            </returns>
    </member>
    <member name="T:EPiServer.Data.Entity.Internal.EntityReferenceTypeHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that handles storage format of <see cref="T:EPiServer.Data.Entity.EntityReference" /> in Dynamic Data Store.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityReferenceTypeHandler.MapToDatabaseType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the database type (string).
            </summary>
      <param name="type">The type.</param>
      <returns>The type that is stored in database</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityReferenceTypeHandler.ToDatabaseFormat(System.String,System.Object,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts the <see cref="T:EPiServer.Data.Entity.EntityReference" /> into a string in database format
            </summary>
      <param name="propertyName">The name of the property being processed</param>
      <param name="propertyValue">The property value</param>
      <param name="ownerType">The <see cref="T:System.Type" /> of the object that owns this property</param>
      <returns>An object suitable for storage in the database</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityReferenceTypeHandler.FromDatabaseFormat(System.String,System.Object,System.Type,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Convert the value passed from the native database type (String) into an object of type <see cref="T:EPiServer.Data.Entity.EntityReference" />.
            </summary>
      <param name="propertyName">The name of the property being processed</param>
      <param name="propertyValue">The property value</param>
      <param name="targetType">The type the value should be converted to</param>
      <param name="ownerType">The <see cref="T:System.Type" /> of the object that owns this property</param>
      <returns>The corresponding object of type <see cref="T:EPiServer.Data.Entity.EntityReference" /></returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Entity.Internal.EntityResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. See <see cref="T:EPiServer.Data.Entity.IEntityResolver" /> for example usage.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityResolver.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Data.Entity.Internal.EntityTypeResolver" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityResolver.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Data.IDatabaseExecutor},EPiServer.Data.Entity.IEntityTypeResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Data.Entity.Internal.EntityTypeResolver" /> class.
            </summary>
      <param name="databaseHandlerFactoryMethod">The factory method responsible for creating an instance of an <see cref="T:EPiServer.Data.IDatabaseExecutor" /> when required.</param>
      <param name="entityTypeResolver">The entity type resolver to use to resolve entity types.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityResolver.GetDatabaseHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets an instance of the current <see cref="T:EPiServer.Data.IDatabaseExecutor" /> handler to use for any calls to the database.
            </summary>
      <returns>The <see cref="T:EPiServer.Data.IDatabaseExecutor" /> that should be used.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityResolver.GetEntityReference(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the <see cref="T:EPiServer.Data.Entity.EntityReference" /> that refers to the <see cref="T:EPiServer.Data.Entity.IEntity" /> with the specified unique identity.
            </summary>
      <param name="uniqueId">The unique identity of the entity.</param>
      <returns>
            The <see cref="T:EPiServer.Data.Entity.EntityReference" /> that referes to the <see cref="T:EPiServer.Data.Entity.IEntity" /> with the specified unique identity or <see cref="P:EPiServer.Data.Entity.EntityReference.Empty" /> if not found.
            </returns>
      <remarks>
            This method will always result in a database call. Use with caution.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityResolver.GetEntityUniqueID(EPiServer.Data.Entity.EntityReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the unique identity of the <see cref="T:EPiServer.Data.Entity.IEntity" /> that is referenced by the specified <see cref="T:EPiServer.Data.Entity.EntityReference" />.
            </summary>
      <remarks>
            This method will normally result in at least one database call. Use with caution.
            </remarks>
      <param name="entityReference">The reference to the entity.</param>
      <returns>The unique identity of the <see cref="T:EPiServer.Data.Entity.IEntity" /> that the specified <see cref="T:EPiServer.Data.Entity.EntityReference" /> references. or <see cref="F:System.Guid.Empty" /> if no entity was found.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Entity.Internal.EntityTypeResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. See <see cref="T:EPiServer.Data.Entity.IEntityTypeResolver" /> for example usage.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityTypeResolver.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Data.Entity.Internal.EntityTypeResolver" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityTypeResolver.#ctor(EPiServer.Data.Providers.IDatabaseExecutorFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Data.Entity.Internal.EntityTypeResolver" /> class.
            </summary>
      <param name="databaseHandlerFactory">The factory responsible for creating an instance of an <see cref="T:EPiServer.Data.IDatabaseExecutor" /> when required.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityTypeResolver.GetDatabaseHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets an instance of the current <see cref="T:EPiServer.Data.IDatabaseExecutor" /> handler to use for any calls to the database.
            </summary>
      <returns>The <see cref="T:EPiServer.Data.IDatabaseExecutor" /> that should be used.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityTypeResolver.GetTypeName(System.Type,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the name of a <see cref="T:System.Type" /> as used in the database
            </summary>
      <param name="type">The <see cref="T:System.Type" /> for which to to get the name</param>
      <param name="ignoreOverrideAttribute">Whether to ignore the EntityTypeOverrideAttribute attribute.</param>
      <returns>The type name.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityTypeResolver.GetTypeID(System.Type,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the ID representing a <see cref="T:System.Type" /> in the database
            </summary>
      <param name="type">The <see cref="T:System.Type" /> for which to get the ID</param>
      <param name="ignoreOverrideAttribute">Whether to ignore the <see cref="T:EPiServer.Data.Entity.EntityTypeOverrideAttribute" /> attribute.</param>
      <returns>Returns the integer ID that represents the <paramref name="type" /> in the database.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Entity.Internal.EntityTypeResolver.GetTypeByID(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the <see cref="T:System.Type" /> by its database id.
            </summary>
      <param name="id">The ID for which to get of the <see cref="T:System.Type" /></param>
      <returns>The type associated with the given <paramref name="id" />.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Entity.IReadOnly">
      <summary>
            Defines read-only handling for objects
            </summary>
      <remarks>
            Primarily intended to change read-write objects into immutable (read-only) objects to be able to safely use the same 
            object in several different threads, etc.
            </remarks>
    </member>
    <member name="M:EPiServer.Data.Entity.IReadOnly.MakeReadOnly">
      <summary>
            Changes the object instance into a read-only object.
            </summary>
      <remarks>
            After calling this method, any attempt to change the object instance or any contained object
            will generate a <see cref="T:System.NotSupportedException" />. I.e. the semantics is "deep read-only".
            <para>
            Note! After setting an object to read-only it is not possible to revert back to read-write mode.
            You will have to call the CreateWritableClone method to get a copy that can be modified.
            </para></remarks>
    </member>
    <member name="P:EPiServer.Data.Entity.IReadOnly.IsReadOnly">
      <summary>
            Indicates whether the current object instance is read-only.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Entity.IReadOnly.CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="T:EPiServer.Data.Entity.IReadOnly`1">
      <summary>
            Defines read-only handling for objects
            </summary>
      <remarks>
            Primarily intended to change read-write objects into immutable (read-only) objects to be able to use the same 
            object instance by several different threads etc.
            </remarks>
    </member>
    <member name="M:EPiServer.Data.Entity.IReadOnly`1.CreateWritableClone">
      <summary>
            Creates a writable copy of the current object.
            </summary>
      <returns>A writable copy of the current object.</returns>
      <remarks>
            The cloning is a deep-copy.
            </remarks>
    </member>
    <member name="T:EPiServer.Data.IAsyncDatabaseExecutor">
      <summary>
            An asynchronous version of <see cref="T:EPiServer.Data.IDatabaseExecutor" /></summary>
      <remarks>Asynchronous methods does not support nesting which means a new connection is opened for every call to any async method</remarks>
    </member>
    <member name="M:EPiServer.Data.IAsyncDatabaseExecutor.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            An asynchronous version of Execute, opens a connection and executes the function with access to the open connection
            </summary>
    </member>
    <member name="M:EPiServer.Data.IAsyncDatabaseExecutor.ExecuteAsync(System.Func{System.Threading.Tasks.Task})">
      <summary>
            An asynchronous version of Execute, opens a connection and executes the function with access to the open connection
            </summary>
    </member>
    <member name="M:EPiServer.Data.IAsyncDatabaseExecutor.ExecuteTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            An asynchronous version of ExecuteTransaction, opens a connection and transaction and executes the <see cref="T:System.Action" /> with access to the open connection
            </summary>
    </member>
    <member name="M:EPiServer.Data.IAsyncDatabaseExecutor.ExecuteTransactionAsync(System.Func{System.Threading.Tasks.Task})">
      <summary>
            An asynchronous version of ExecuteTransaction, opens a connection and transaction and executes the <see cref="T:System.Action" /> with access to the open connection
            </summary>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Data.IDatabaseExecutor">
      <summary>
            Interface for common database operations such as executing stored procedures and transaction management
            </summary>
      <remarks>
        <para>
            This interface is used in all APIs that require database access. The implementation of this interface is defined by <see cref="T:EPiServer.Data.DataInitialization" /> when
            the application is starting. The IDatabaseHandler implementation is managed by the StructureMap container. It is configured to use a scope (HybridOrThreadLocal)
            that will ensure that the same handler instance will be returned throughout each request.
            </para>
        <para>
            Best practice is to never call into the database schema defined by EPiServer since backwards compatibility is not guaranteed. You should use this
            interface when accessing custom tables and want to participate in the shared connnection and transaction handling when doing so.
            </para>
        <para>
            The <see cref="M:Execute" /> and <see cref="M:ExecuteTransaction" /> methods should be the main way of executing your database code. Both methods
            takes an Action method as their only argument and it is this method that should create and execute database commands. Always use 
            <see cref="M:ExecuteTransaction" /> when calling stored procedures that does modifications to the database; using <see cref="M:Execute" /> for this
            purpose could cause problems since the database handler has no way of detecting transactions implicitly created at the database level. There are two overloads
            <see cref="M:Execute{TResult}" /> and <see cref="M:ExecuteTransaction{TResult}" /> that allow for a return value from the method in the argument.
            </para>
        <para>
            Because multiple calls on the same connection are supported (Multiple Active Result Sets) it is very important to dispose any DbDataReader instances returned.
            The preferred way of handling this is the using statement.
            </para>
      </remarks>
      <example>
        <para>
            The following are examples on usage for the most common tasks. Note that the first three examples are using extension methods that are specific to calling stored procedures.
            The extension methods shown here will create a command object, automatically resolve the parameters for the procedure by querying the database, set the parameter values 
            to the values in the params argument and finally execute the command query.
            </para>
        <para>
            Getting values using a data reader
            </para>
        <code source="../CodeSamples/EPiServer.Data/IDatabaseHandler.cs" region="GettingValuesUsingADataReader" lang="cs" />
        <para>
            Executing a scalar query
            </para>
        <code source="../CodeSamples/EPiServer.Data/IDatabaseHandler.cs" region="ExecutingAScalarQuery" lang="cs" />
        <para>
            Executing a non-query command
            </para>
        <code source="../CodeSamples/EPiServer.Data/IDatabaseHandler.cs" region="ExecutingANonQueryCommand" lang="cs" />
        <para>
            Constructing a more complex database command
            </para>
        <code source="../CodeSamples/EPiServer.Data/IDatabaseHandler.cs" region="ConstructingAMoreComplexDatabaseCommand" lang="cs" />
      </example>
    </member>
    <member name="P:EPiServer.Data.IDatabaseExecutor.DbFactory">
      <summary>
            Gets the underlying factory class to used to create instances of data access classes
            </summary>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutor.Execute``1(System.Func{``0})">
      <summary>
            Opens a connection and executes the <see cref="T:System.Func`1" /> with access to the open connection
            </summary>
      <typeparam name="TResult">A return type</typeparam>
      <param name="action">The code that will execute within the open connection</param>
      <remarks>
        <para>
            This method will implicitly open and close the connection when exiting the current scope (or the outermost scope if nested). If the action method throws
            any kind of exception, the connection will be closed before the exception is rethrown.
            </para>
        <para>
            If you are nesting calls to the Execute and/or ExecuteTransaction methods these methods will reuse any already existing connection and/or transaction. The exception is
            if you call ExecuteTransaction inside an Execute scope (which is not in turn inside an ExecuteTransaction scope), in this case a new connection will be opened
            and the transaction created in the new connection.
            </para>
        <para>See the class definition <see cref="T:EPiServer.Data.IDatabaseExecutor" /> for example usage.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutor.Execute(System.Action)">
      <summary>
            Opens a connection and executes the <see cref="T:System.Action" /> with access to the open connection
            </summary>
      <param name="action">The code that will execute within the open connection</param>
      <remarks>
        <para>
            This method will implicitly open and close the connection when exiting the current scope or the outermost scope if nested. If the action method throws
            any kind of exception, the connection will be closed before the exception is rethrown.
            </para>
        <para>
            If you are nesting calls to the Execute and/or ExecuteTransaction these methods will reuse any already existing connection and/or transaction. The exception is
            if you call ExecuteTransaction inside an Execute scope (which is not in turn inside an ExecuteTransaction scope), in this case a new connection will be opened
            and the transaction created in the new connection.
            </para>
        <para>See the class definition <see cref="T:EPiServer.Data.IDatabaseExecutor" /> for example usage.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutor.ExecuteTransaction(System.Action)">
      <summary>
            Opens a connection and transaction and executes the <see cref="T:System.Action" /> with access to the open connection
            </summary>
      <param name="action">The code that will execute within the connection and transaction</param>
      <remarks>
        <para>
            This method will implicitly commit the current transaction and close the connection when exiting the current scope (or the outermost scope if nested). If the
            action method throws any kind of exception, the transaction will be rolled back the connection closed before the exception is rethrown.
            </para>
        <para>
            If you are nesting calls to the Execute and/or ExecuteTransaction these methods will reuse any already existing connection and/or transaction. The exception is
            if you call ExecuteTransaction inside an Execute scope (which is not in turn inside an ExecuteTransaction scope), in this case a new connection will be opened
            and the transaction created in the new connection.
            </para>
        <para>See the class definition <see cref="T:EPiServer.Data.IDatabaseExecutor" /> for example usage.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutor.ExecuteTransaction``1(System.Func{``0})">
      <summary>
            Opens a connection and transaction and executes the <see cref="T:System.Func`1" /> with access to the open connection
            </summary>
      <typeparam name="TResult">A return type</typeparam>
      <param name="action">The code that will execute within the connection and transaction</param>
      <remarks>
        <para>
            This method will implicitly commit the current transaction and close the connection when exiting the current scope (or the outermost scope if nested). If the
            action method throws any kind of exception, the transaction will be rolled back and the connection closed before the exception is rethrown.
            </para>
        <para>
            If you are nesting calls to the Execute and/or ExecuteTransaction these methods will reuse any already existing connection and/or transaction. The exception is
            if you call ExecuteTransaction inside an Execute scope (which is not in turn inside an ExecuteTransaction scope), in this case a new connection will be opened
            and the transaction created in the new connection.
            </para>
        <para>See the class definition <see cref="T:EPiServer.Data.IDatabaseExecutor" /> for example usage.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutor.ExecuteLocked(System.String,System.Action)">
      <summary>
            Executes an action with acuiring an exclusive lock for specified resource.
            </summary>
      <param name="resourceName">Name of the resource.</param>
      <param name="action">The action.</param>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutor.ExecuteLocked``1(System.String,System.Func{``0})">
      <summary>
            Executes an action with acuiring an exclusive lock for specified resource.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="resourceName">Name of the resource.</param>
      <param name="action">The action.</param>
      <returns>
            Action result.
            </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutor.CreateCommand">
      <summary>
            Creates a command and attaches it to the current connection
            </summary>
      <returns>A new command instance attached to the current database connection</returns>
      <exception cref="T:System.InvalidOperationException">Will be thrown if no open connection exists, use <see cref="P:DbFactory" /> to create commands outside of a connection</exception>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutor.CreateCommand(System.String,System.Data.CommandType,System.Object[])">
      <summary>
            Creates a command with the given name and type, adding the parameter values and attaches it to the current connection.
            </summary>
      <param name="commandText">The stored procedure name or the SQL code to run.</param>
      <param name="commandType">How to interpret the value supplied in the <paramref name="commandText" /> parameter.</param>
      <param name="parameterValues">Any parameter values to pass to the stored procedure.</param>
      <returns>A command for the current connection with the given text, type and parameter values set.</returns>
      <exception cref="T:System.InvalidOperationException">Will be thrown if no open connection exists, use <see cref="P:DbFactory" /> to create commands outside of a connection</exception>
    </member>
    <member name="T:EPiServer.Data.IDatabaseExecutorExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.Data.IDatabaseExecutor" /> adding some often used functionality
            </summary>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.GetReader(EPiServer.Data.IDatabaseExecutor,System.String,System.Data.CommandType,System.Object[])">
      <summary>
            Gets an open <see cref="T:System.Data.Common.DbDataReader" /> from the current connection with the given arguments.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="commandText">The stored procedure name or the SQL query to run.</param>
      <param name="commandType">How to interprete the data supplied in the <paramref name="commandText" /> parameter.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure or SQL query.</param>
      <returns>
            A database reader the current connection by executing the given stored procedure or SQL query with the supplied parameter values.
            </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.GetReader(EPiServer.Data.IDatabaseExecutor,System.String,System.Object[])">
      <summary>
            Gets an open <see cref="T:System.Data.Common.DbDataReader" /> from the current connection with the given arguments.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="storedProcedureName">The stored procedure name.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure.</param>
      <returns>
            A database reader the current connection by executing the given stored procedure with the supplied parameter values.
            </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.GetScalar(EPiServer.Data.IDatabaseExecutor,System.String,System.Data.CommandType,System.Object[])">
      <summary>
            Gets a scalar value using the given commant text and parameter values from the currently opened connection.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="commandText">The stored procedure name or the SQL query to run.</param>
      <param name="commandType">How to interprete the data supplied in the <paramref name="commandText" /> parameter.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure or SQL query.</param>
      <returns>
            A scalar value using the current connection by executing the given stored procedure or SQL query with the supplied parameter values.
            </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.GetScalar(EPiServer.Data.IDatabaseExecutor,System.String,System.Object[])">
      <summary>
            Gets a scalar value using the given commant text and parameter values from the currently opened connection.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="storedProcedureName">The stored procedure name.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure.</param>
      <returns>
            A scalar value using the current connection by executing the given stored procedure with the supplied parameter values.
            </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.ExecuteNonQuery(EPiServer.Data.IDatabaseExecutor,System.String,System.Data.CommandType,System.Object[])">
      <summary>
            Executes a non query using the supplied stored procedure or SQL query and parameter values from the currently opened connection.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="commandText">The stored procedure name or the SQL query to run.</param>
      <param name="commandType">How to interprete the data supplied in the <paramref name="commandText" /> parameter.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure or SQL query.</param>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.ExecuteNonQuery(EPiServer.Data.IDatabaseExecutor,System.String,System.Object[])">
      <summary>
            Executes a non query using the supplied stored procedure or SQL query and parameter values from the currently opened connection.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="storedProcedureName">The stored procedure name.</param>
      <param name="parameterValues">Any parameter values to add to the stored procedure.</param>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.CreateParameter(EPiServer.Data.IDatabaseExecutor,System.String,System.Object)">
      <summary>
            Creates a <see cref="T:System.Data.Common.DbParameter" /> with the specified name and value
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="name">Name of the parameter</param>
      <param name="value">The value to be added to the parameter (will determine the type)</param>
      <returns>A parameter populated with name and value</returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.CreateParameter(EPiServer.Data.IDatabaseExecutor,System.String,System.Data.DbType,System.Data.ParameterDirection,System.Object)">
      <summary>
            Creates a <see cref="T:System.Data.Common.DbParameter" /> with the given arguments.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="name">The name of the parameter to create</param>
      <param name="type">The database type of the parameter to create</param>
      <param name="direction">The direction of the parameter to create</param>
      <param name="value">A created parameter</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.CreateReturnParameter(EPiServer.Data.IDatabaseExecutor)">
      <summary>
            Creates a <see cref="T:System.Data.Common.DbParameter" /> for a return value of type <see cref="F:System.Data.DbType.Int32" /></summary>
      <param name="handler">The handler to execute the method on.</param>
      <returns>An instance of <see cref="T:System.Data.Common.DbParameter" /> configured as a return parameter</returns>
      <remarks>You can use <see cref="M:GetReturnValue" /> to retrieve the value of parameters created with this method</remarks>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.GetReturnValue(EPiServer.Data.IDatabaseExecutor,System.Data.Common.DbCommand)">
      <summary>
            Retrieve the return value created with <see cref="M:CreateReturnParameter" /></summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="cmd">The command object from which the return value should be extracted</param>
      <returns>The value of the parameter named "ReturnValue"</returns>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.GetParameterValue(EPiServer.Data.IDatabaseExecutor,System.Data.Common.DbCommand,System.String)">
      <summary>
             Retrieve a value from a parameter in a <see cref="T:System.Data.Common.DbCommand" /></summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="cmd">The command object from which the value should be retrieved</param>
      <param name="name">The name of the parameter from which the value should be retrieved</param>
      <returns>The value of the parameter</returns>
      <exception cref="T:System.Data.DataException">If the parameter does not exist in the collection</exception>
    </member>
    <member name="M:EPiServer.Data.IDatabaseExecutorExtensions.SetParameterValue(EPiServer.Data.IDatabaseExecutor,System.Data.Common.DbCommand,System.String,System.Object)">
      <summary>
            Set a value to a parameter in a <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
      <param name="handler">The handler to execute the method on.</param>
      <param name="cmd">The command object on which the value should be set.</param>
      <param name="name">The name of the parameter on which the value should be set.</param>
      <param name="parameterValue">The value of the parameter to be set.</param>
      <exception cref="T:System.Data.DataException">If the parameter does not exist in the collection</exception>
    </member>
    <member name="T:EPiServer.Data.IDatabaseMode">
      <summary>
            Interface for accessing database mode
            </summary>
    </member>
    <member name="P:EPiServer.Data.IDatabaseMode.DatabaseMode">
      <summary>
            Returns the database mode.
            </summary>
    </member>
    <member name="T:EPiServer.Data.Identity">
      <summary>
            Represents the identity of an item stored in the Dynamic Data Store
            </summary>
    </member>
    <member name="M:EPiServer.Data.Identity.ToString">
      <summary>
            Converts the objects to it's string representation.
            The string returned can be passed back to the <see cref="M:EPiServer.Data.Identity.Parse(System.String)" /> method to reconstruct the object
            </summary>
      <returns>A <see cref="T:System.String" /></returns>
    </member>
    <member name="M:EPiServer.Data.Identity.NewIdentity">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Data.Identity" /></summary>
      <returns>A <see cref="T:EPiServer.Data.Identity" /></returns>
    </member>
    <member name="M:EPiServer.Data.Identity.NewIdentity(System.Guid)">
      <summary>
            Creates a new instance of a <see cref="T:EPiServer.Data.Identity" /> using the <paramref name="externalId" /></summary>
      <param name="externalId">The value to use for the <see cref="P:EPiServer.Data.Identity.ExternalId" /></param> property
            <returns>A <see cref="T:EPiServer.Data.Identity" /></returns></member>
    <member name="M:EPiServer.Data.Identity.op_Implicit(System.Guid)~EPiServer.Data.Identity">
      <summary>
        <see cref="T:System.Guid" /> to <see cref="T:EPiServer.Data.Identity" /> implicit operator. 
            This does the same as calling the <see cref="M:EPiServer.Data.Identity.NewIdentity(System.Guid)" /> method with an external id.
            </summary>
      <param name="externalId">The value to use for the <see cref="P:EPiServer.Data.Identity.ExternalId" /></param> property
            <returns>A <see cref="T:EPiServer.Data.Identity" /></returns></member>
    <member name="M:EPiServer.Data.Identity.Parse(System.String)">
      <summary>
            Parses the string and tries to create a new instance of a <see cref="T:EPiServer.Data.Identity" /></summary>
      <param name="value">The <see cref="T:System.String" /></param> to parse. This value can be obtained by calling the <see cref="M:EPiServer.Data.Identity.ToString" /> method.
            <exception cref="T:System.FormatException">Thrown when the format of <paramref name="value" /> is incorrect</exception><returns>A <see cref="T:EPiServer.Data.Identity" /></returns></member>
    <member name="M:EPiServer.Data.Identity.TryParse(System.String,EPiServer.Data.Identity@)">
      <summary>
            Parses the string and tries to create a new instance of a <see cref="T:EPiServer.Data.Identity" /></summary>
      <param name="value">The <see cref="T:System.String" /></param> to parse. This value can be obtained by calling the <see cref="M:EPiServer.Data.Identity.ToString" /> method.
            <param name="id">The new <see cref="T:EPiServer.Data.Identity" /> or <see langword="null" /> os the format of <paramref name="value" /> is incorrect</param><returns><see langword="true" /> if a new <see cref="T:EPiServer.Data.Identity" /> instance has been created, otherwise <see langword="false" /></returns></member>
    <member name="P:EPiServer.Data.Identity.ExternalId">
      <summary>
            The external part of the identity
            </summary>
    </member>
    <member name="P:EPiServer.Data.Identity.StoreId">
      <summary>
            The store part of the identity
            </summary>
    </member>
    <member name="M:EPiServer.Data.Identity.Create(System.Int64,System.Guid)">
      <summary>
            Internal-only method without validation of input
            </summary>
    </member>
    <member name="T:EPiServer.Data.IdentityObjectExtensions">
      <summary>
            Provides extension methods for <see cref="T:System.Object" /> for working with <see cref="T:EPiServer.Data.Identity" /></summary>
    </member>
    <member name="M:EPiServer.Data.IdentityObjectExtensions.GetIdentity(System.Object)">
      <summary>
            Extracts the identity from the object if it has one.
            </summary>
      <param name="value">The object to check for identity</param>
      <returns>A <see cref="T:EPiServer.Data.Identity" /> instance or null if the object does implement its own identity</returns>
      <remarks>
            The algorith used to extract identity is as follows:
            1. The object is checked to see if it implements the <see cref="T:EPiServer.Data.Dynamic.IDynamicData" /> interface and if so its Id property is called.
            2. The object is reflected to search for a property named Id with a getter whose type is either <see cref="T:EPiServer.Data.Identity" /> or <see cref="T:System.Guid" />
            3. The object is checked to see if it implements the <see cref="T:EPiServer.Data.Entity.IEntity" /> interface and if so its ID and UniqueId properties are called
            </remarks>
    </member>
    <member name="M:EPiServer.Data.IdentityObjectExtensions.SetIdentity(System.Object,EPiServer.Data.Identity)">
      <summary>
            Sets the identity into the object if supported
            </summary>
      <param name="value">The object to set the identity in</param>
      <param name="id">The <see cref="T:EPiServer.Data.Identity" /> to set</param>
      <remarks>
            The algorith used to set identity is as follows:
            1. The object is checked to see if it implements the <see cref="T:EPiServer.Data.Dynamic.IDynamicData" /> interface and if so its Id property is set.
            2. The object is reflected to search for a property named Id with a setter whose type is either <see cref="T:EPiServer.Data.Identity" /> or <see cref="T:System.Guid" />
            3. The object is checked to see if it implements the <see cref="T:EPiServer.Data.Entity.IEntity" /> interface and if so its Id property is set.
            </remarks>
    </member>
    <member name="T:EPiServer.Data.Internal.DatabaseParameterHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Internal.DefaultDatabaseDateTimeHandler.#ctor(EPiServer.Data.DateTimeConverter)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Data.DatabaseDateTimeHandler" /> class.
            </summary>
      <param name="dateTimeConverter">DateTime converter</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Internal.DefaultDatabaseDateTimeHandler.ConvertFromDatabase(System.Object,EPiServer.Data.DatabaseDateTimeKind)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Internal.DefaultDatabaseDateTimeHandler.ConvertToDatabase(System.DateTime,EPiServer.Data.DatabaseDateTimeKind)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Internal.DefaultDateTimeConverter.ReadDatabaseValueAsUtc(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Internal.DefaultDateTimeConverter.ReadDatabaseValueAsLocal(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Internal.DefaultDateTimeConverter.ToLocalTime(System.DateTime,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Internal.DefaultDateTimeConverter.ToUniversalTime(System.DateTime,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Internal.DefaultDateTimeConverter.ParseToUtc(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Internal.DefaultDateTimeConverter.ParseToUtc(System.String,System.IFormatProvider)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Internal.DefaultDateTimeConverter.TryParseToUtc(System.String,System.DateTime@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Internal.IAsyncDatabaseExecutorFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.IDatabaseExecutorFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory implementation for <see cref="T:EPiServer.Data.IDatabaseExecutor" /></summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.IDatabaseExecutorFactory.CreateDefaultHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create a new <see cref="T:EPiServer.Data.IDatabaseExecutor" /> with the connection string for the current site.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.IDatabaseExecutorFactory.CreateHandler(EPiServer.Data.ConnectionStringOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new <see cref="T:EPiServer.Data.IDatabaseExecutor" /> with the specified connection string.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.IDatabaseExecutorFactory.CurrentHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the current <see cref="T:EPiServer.Data.IDatabaseExecutor" /> with the connection string for the current site.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.ConnectionContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class that wraps a connection and a transaction.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.ConnectionContext.IsActive">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines if there is an active connection on this context
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.ConnectionContext.OpenConnection">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Open a connection to the database
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.ConnectionContext.OpenConnectionAsync">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.ConnectionContext.IsInTransaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.ConnectionContext.CloseConnection">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.ConnectionContext.RollbackTransaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.ConnectionContext.CommitTransaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.ConnectionContext.BeginTransaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.ConnectionScope">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class to control the scope of a connection, built for the "using-pattern".
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.ConnectionScope.#ctor(EPiServer.Data.Providers.Internal.IConnectionContext,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.ConnectionScope.#ctor(EPiServer.Data.Providers.Internal.IConnectionContext,System.Boolean,System.Action)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.ConnectionScope.IsOwner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines if the callee owns the connection/transaction and should close it.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.ConnectionScope.EPiServer#Data#Providers#Internal#IAsyncConnectionScope#Context">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.ConnectionScope.Context">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.ConnectionScope.Complete">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Complete is called when all actions on the connection has been completed for a scope
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.ConnectionScope.Dispose">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.DatabaseConnectionResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.DatabaseConnectionResolver.Resolve">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the connection settings that is being used by this instance.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.IAsyncConnectionContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.IAsyncConnectionContext.OpenConnectionAsync">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.IAsyncConnectionScope">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.IAsyncConnectionScope.Context">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.IConnectionContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.IConnectionContext.BeginTransaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.IConnectionContext.CloseConnection">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.IConnectionContext.CommitTransaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.IConnectionContext.Connection">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.IConnectionContext.IsActive">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.IConnectionContext.IsInTransaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.IConnectionContext.OpenConnection">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.IConnectionContext.RollbackTransaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.IConnectionContext.Transaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.IConnectionScope">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class to handle the scope of a connection to the database
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.IConnectionScope.Complete">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.IConnectionScope.Context">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.IConnectionScope.IsOwner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.IDatabaseConnectionResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.IDatabaseConnectionResolver.Resolve">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the connection settings that is being used by this instance.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.ReadOnlySqlDatabaseExecutor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.SqlDatabaseDelegatorFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.SqlDatabaseDelegatorFactory.CurrentHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseDelegatorFactory.CreateDefaultHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseDelegatorFactory.CreateHandler(EPiServer.Data.ConnectionStringOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseDelegatorFactory.EPiServer#Data#Internal#IAsyncDatabaseExecutorFactory#CreateDefaultHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.#ctor(EPiServer.Framework.ContextCache,EPiServer.Data.ConnectionStringOptions,System.Int32,System.TimeSpan,System.TimeSpan)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <param name="contextCache">The context cache to use</param>
      <param name="connectionStringSettings">Settings containing the connection string used</param>
      <param name="retries">The number of retries, 0 means no retries</param>
      <param name="retryDelay">The delay between each retry</param>
      <param name="databaseQueryTimeout">The timeout for executing commands</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.DatabaseQueryTimeout">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The timeout for command objects created by this classes
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.DbFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Underlying factory used to create data access objects
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.ConnectionStringOption">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The connection settings containing the connection string
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.Connection">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The current connection
            </summary>
      <internal-api />
      <remarks>The connection can change if an nested transaction is created inside a non-transacted call</remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.Transaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The current transaction if one exist
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.ExecuteAsync(System.Func{System.Threading.Tasks.Task})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.ExecuteTransactionAsync(System.Func{System.Threading.Tasks.Task})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.ExecuteTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.Execute``1(System.Func{``0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.ExecuteTransaction(System.Action)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.ExecuteTransaction``1(System.Func{``0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.Execute(System.Action)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.ExecuteLocked(System.String,System.Action)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.ExecuteLocked``1(System.String,System.Func{``0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.GetProviderSpecificParameterName(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.GetAsyncConnection(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.GetConnection(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.CreateCommand(System.String,System.Data.CommandType,System.Object[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.CreateConnection">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.IsInTransaction">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.SetExternalTransaction(System.Data.Common.DbTransaction)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.CreateParametersAndSetValues(System.Data.Common.DbCommand,System.Object[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Automatically populates the parameters collection of the command and assigns the provided parameter values
            </summary>
      <param name="command">The command to create a parameters collection for</param>
      <param name="parameterValues">The parameter values to assign to the parameter collection of the command</param>
      <remarks>The command must have an associated connection, any null values in <paramref name="parameterValues" /> will be replaced by DBNull</remarks>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.AssertThreadSafe">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Asserts that the call was made from the same thread as the databasehandler object was instantiated in.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.AcquireLock(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Acquires an exclusive lock for specified resource
            </summary>
      <param name="resourceName">Name of the resource.</param>
      <exception cref="T:System.InvalidOperationException">Exception is thrown if operation was failed.</exception>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.ReleaseLock(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Releases the lock for specified resource.
            </summary>
      <param name="resourceName">Name of the resource.</param>
      <exception cref="T:System.InvalidOperationException">Exception is thrown if operation was failed.</exception>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutor.GetLockOwner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the lock owner depending on current scope.
            </summary>
      <returns>Transaction if executed in transaction or Session if there is no active transaction at the moment.</returns>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.SqlDatabaseExecutorFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Providers.Internal.SqlDatabaseExecutorFactory.CurrentHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutorFactory.CreateDefaultHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutorFactory.CreateHandler(EPiServer.Data.ConnectionStringOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlDatabaseExecutorFactory.EPiServer#Data#Internal#IAsyncDatabaseExecutorFactory#CreateDefaultHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.SqlParameterCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <devdoc>
            CachingMechanism provides caching support for stored procedure 
            parameter discovery and caching
            </devdoc>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterCache.CloneParameters(System.Data.IDataParameter[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <devdoc>
            Create and return a copy of the IDataParameter array.
            </devdoc>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterCache.Clear">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <devdoc>
            Empties all items from the cache
            </devdoc>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterCache.AddParameterSetToCache(System.String,System.Data.IDbCommand,System.Data.IDataParameter[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <devdoc>
            Add a parameter array to the cache for the command.
            </devdoc>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterCache.GetCachedParameterSet(System.String,System.Data.IDbCommand)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <devdoc>
            Gets a parameter array from the cache for the command. Returns null if no parameters are found.
            </devdoc>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterCache.IsParameterSetCached(System.String,System.Data.IDbCommand)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <devdoc>
            Gets if a given stored procedure on a specific connection string has a cached parameter set
            </devdoc>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterDiscoverer.DiscoverParameters(System.Data.Common.DbCommand)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Discovers the parameters for a <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
      <param name="command">The <see cref="T:System.Data.Common.DbCommand" /> to discover the parameters.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterDiscoverer.DeriveParameters(System.Data.Common.DbCommand)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.Common.DbCommand" /> and populates the Parameters collection of the specified <see cref="T:System.Data.Common.DbCommand" /> object. 
            </summary>
      <param name="discoveryCommand">The <see cref="T:System.Data.Common.DbCommand" /> to do the discovery.</param>
      <remarks>The <see cref="T:System.Data.Common.DbCommand" /> must be a <see cref="T:System.Data.SqlClient.SqlCommand" /> instance.</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.Internal.SqlParameterResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. <para>
            Provides parameter caching services for dynamic parameter discovery of stored procedures.
            Eliminates the round-trip to the database to derive the parameters and types when a command
            is executed more than once.
            </para></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterResolver.SetParameters(System.Data.Common.DbCommand)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. <para>
            Populates the parameter collection for a command wrapper from the cache 
            or performs a round-trip to the database to query the parameters.
            </para></summary>
      <param name="command">
        <para>The command to add the parameters.</para>
      </param>
      <remarks>The <paramref name="command" /> must have an associated connection</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterResolver.Clear">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. <para>Empties the parameter cache.</para></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterResolver.AddParametersFromCache(System.Data.Common.DbCommand)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. <para>Adds parameters to a command using the cache.</para></summary>
      <param name="command">
        <para>The command to add the parameters.</para>
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Providers.Internal.SqlParameterResolver.AlreadyCached(System.Data.IDbCommand)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. <para>Checks to see if a cache entry exists for a specific command on a specific connection</para></summary>
      <param name="command">
        <para>The command to check.</para>
      </param>
      <returns>True if the parameters are already cached for the provided command, false otherwise</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Providers.RetryPolicy">
      <summary>
            Retry policy abstraction
            </summary>
    </member>
    <member name="P:EPiServer.Data.Providers.RetryPolicy.NoRetries">
      <summary>
            A policy that just executes without retry
            </summary>
    </member>
    <member name="M:EPiServer.Data.Providers.RetryPolicy.Execute``1(System.Func{``0})">
      <summary>Execute with retry</summary>
      <typeparam name="TResult">The type of the result that the function returns</typeparam>
      <param name="method">The function to run</param>
      <returns>The result</returns>
    </member>
    <member name="M:EPiServer.Data.Providers.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>Execute async with retry</summary>
      <typeparam name="TResult">The type of the result that the function returns</typeparam>
      <param name="method">The function to run</param>
      <returns>The result</returns>
    </member>
    <member name="T:EPiServer.Data.Providers.SqlTransientErrors">
      <summary>
            Known transient SQL errors
            </summary>
    </member>
    <member name="P:EPiServer.Data.Providers.SqlTransientErrors.OpenConnectionRetryable">
      <summary>
            A list of error codes for SQL Server that should be classified as a transient error (not a bug in the code) that should be retried
            when open a connection to SQL Server
            </summary>
    </member>
    <member name="F:EPiServer.Data.Providers.SqlTransientErrors._executeRetryable">
      <summary>
            A list of error codes for SQL Server that should be classified as a transient error (not a bug in the code) that should be retried
            when executing code against SQL Server
            </summary>
    </member>
    <member name="T:EPiServer.Data.Providers.SqlTransientErrorsRetryPolicy">
      <summary>
            A retry policy implementing exponential backoff designed for SQL Server
            </summary>
    </member>
    <member name="P:EPiServer.Data.Providers.SqlTransientErrorsRetryPolicy.Retries">
      <summary>
            Number of retries
            </summary>
    </member>
    <member name="P:EPiServer.Data.Providers.SqlTransientErrorsRetryPolicy.RetryDelay">
      <summary>
            Retry delay
            </summary>
    </member>
    <member name="M:EPiServer.Data.Providers.SqlTransientErrorsRetryPolicy.Execute``1(System.Func{``0})">
      <inherit />
    </member>
    <member name="M:EPiServer.Data.Providers.SqlTransientErrorsRetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <inherit />
    </member>
    <member name="M:EPiServer.Data.Providers.SqlTransientErrorsRetryPolicy.GetSqlErrors(System.Data.Common.DbException)">
      <summary>
            Get SQL error codes from an <see cref="T:System.Data.Common.DbException" /></summary>
      <param name="ex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Data.Providers.SqlTransientErrorsRetryPolicy.IsTransientException(System.Data.Common.DbException)">
      <summary>
            Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
      <param name="ex">The exception object to be verified.</param>
      <returns>True if the specified exception is considered as transient, otherwise false.</returns>
    </member>
    <member name="T:EPiServer.Data.SchemaUpdates.Internal.AggregateSchemaUpdater">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.SchemaUpdates.Internal.AggregateSchemaValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Data.SchemaUpdates.Internal.DatabaseVersionValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the database version against the supported assembly version.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.Internal.DatabaseVersionValidator.GetStatus(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.Internal.DatabaseVersionValidator.Update(EPiServer.Data.ConnectionStringOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.Internal.DatabaseVersionValidator.ValidateDatabaseVersion(System.Version)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the database version.
            </summary>
      <exception cref="T:System.NotSupportedException">
            Will be thrown if the database version not maches the supported version.
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.Internal.DatabaseVersionValidator.ThrowUpdateDatabaseException(System.Version,System.Version)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Throws an NotSupportedException exception saying that database needs to be updated.
            </summary>
      <param name="databaseVersion">The database version</param>
      <param name="codeVersion">The .NET code version</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.Internal.DatabaseVersionValidator.ThrowUpdateCodeException(System.Version,System.Version)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Throws an NotSupportedException exception saying that packages needs to be updated.
            </summary>
      <param name="databaseVersion">The database version</param>
      <param name="codeVersion">The .NET code version</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.Internal.DatabaseVersionValidator.GetDatabaseVersion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the database version.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.SchemaUpdates.SchemaStatus">
      <summary>
            Contains current status of the database given by <see cref="P:EPiServer.Data.SchemaUpdates.SchemaStatus.ConnectionStringOption" />.
            </summary>
    </member>
    <member name="P:EPiServer.Data.SchemaUpdates.SchemaStatus.UndefinedVersion">
      <summary>
            Gets a version instance that indicates an undefined version.
            </summary>
    </member>
    <member name="P:EPiServer.Data.SchemaUpdates.SchemaStatus.DisplayName">
      <summary>
            Display name of the schema
            </summary>
    </member>
    <member name="P:EPiServer.Data.SchemaUpdates.SchemaStatus.ApplicationRequiredVersion">
      <summary>
            The current database version the application supports.
            </summary>
    </member>
    <member name="P:EPiServer.Data.SchemaUpdates.SchemaStatus.DatabaseVersion">
      <summary>
            The current version of the database.
            </summary>
    </member>
    <member name="P:EPiServer.Data.SchemaUpdates.SchemaStatus.ConnectionStringOption">
      <summary>
            The conrresponding connection options for the database.
            </summary>
    </member>
    <member name="T:EPiServer.Data.SchemaUpdates.ISchemaUpdater">
      <summary>
            Signature for component that gets called during startup where the component can detect if the
            database has correct version as application and possibly execute update scripts.
            </summary>
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.ISchemaUpdater.GetStatus(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})">
      <summary>
            Called during startup to collect status of the databases.
            </summary>
      <param name="connectionStringOptions">The current configured connection strings.</param>
      <returns>The handled database and the current version of the database.</returns>
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.ISchemaUpdater.Update(EPiServer.Data.ConnectionStringOptions)">
      <summary>
            Called during startup if result from <see cref="M:EPiServer.Data.SchemaUpdates.ISchemaUpdater.GetStatus(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})" /> indicates that an update is required.
            </summary>
      <remarks>
            An update is considered to be required if the <see cref="P:EPiServer.Data.SchemaUpdates.SchemaStatus.DatabaseVersion" /> is undefined and 
            createDatabaseSchema attribute on episerver.framework element is <c>true</c><strong>OR</strong>
            if the <see cref="P:EPiServer.Data.SchemaUpdates.SchemaStatus.DatabaseVersion" /> is lower than <see cref="P:EPiServer.Data.SchemaUpdates.SchemaStatus.ApplicationRequiredVersion" />.
            and updateDatabaseSchema attribute on episerver.framework element is <c>true</c><strong>AND</strong>
            no <see cref="T:EPiServer.Data.SchemaUpdates.ISchemaValidator" /> implemenations return <c>false</c> from method 
            <see cref="M:EPiServer.Data.SchemaUpdates.ISchemaValidator.IsDatabaseUpdateAllowed(EPiServer.Data.ConnectionStringOptions)" />.
            </remarks>
      <param name="connectionStringOptions">The connection string settings returned from <see cref="M:EPiServer.Data.SchemaUpdates.ISchemaUpdater.GetStatus(System.Collections.Generic.IEnumerable{EPiServer.Data.ConnectionStringOptions})" /></param>
    </member>
    <member name="T:EPiServer.Data.SchemaUpdates.ISchemaValidator">
      <summary>
            Signature for component that want to interact when an automatic database schema update is to be executed.
            </summary>
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.ISchemaValidator.IsDatabaseUpdateAllowed(EPiServer.Data.ConnectionStringOptions)">
      <summary>
            Called when need for a database schema update is detected.
            </summary>
      <param name="connectionStringOptions">The connection string settings for the database that needs schema update.</param>
      <returns>true if automatic update should be performed else false.</returns>
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.ISchemaValidator.BeforeUpdating(EPiServer.Data.ConnectionStringOptions)">
      <summary>
            Called if <see cref="M:EPiServer.Data.SchemaUpdates.ISchemaValidator.IsDatabaseUpdateAllowed(EPiServer.Data.ConnectionStringOptions)" /> returns true. If any action is needed before database update it can be done here.
            </summary>
      <param name="connectionStringOptions">The connection string settings for the database that will get a schema update.</param>
    </member>
    <member name="T:EPiServer.Data.SchemaUpdates.ScriptExecutor">
      <summary>
            Run update scripts from either an assembly or a stream using a specified connection string
            </summary>
    </member>
    <member name="P:EPiServer.Data.SchemaUpdates.ScriptExecutor.OrderScriptsByVersion">
      <summary>
            Gets or sets if scripts are named as version and should be executed in this order.
            Default is true.
            </summary>
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.ScriptExecutor.ExecuteEmbeddedZippedScripts(System.String,System.Reflection.Assembly,System.String)">
      <summary>
            Call to execute sql updatescripts that are zipped as an embedded resource.
            </summary>
      <param name="connectionString">The connection string to the database where the scripts should be executed on.</param>
      <param name="assembly">The assembly containing the embedded resource.</param>
      <param name="resourcePath">The path/name of the embedded resource within the assembly.</param>
    </member>
    <member name="M:EPiServer.Data.SchemaUpdates.ScriptExecutor.ExecuteScript(System.String,System.IO.Stream)">
      <summary>
            Call to execute the sql statements contained in the stream against the database given by <paramref name="connectionString" /></summary>
      <param name="connectionString">The connection string to the database that the script should be executed on.</param>
      <param name="stream">A stream containing the sql statements to execute.</param>
    </member>
    <member name="T:EPiServer.Data.Serialization.Constants">
      <summary>
            Constants used at serialization/deserialiation
            </summary>
    </member>
    <member name="F:EPiServer.Data.Serialization.Constants.CustomHandled">
      <summary>
            The element name for custom serialized items.
            </summary>
    </member>
    <member name="T:EPiServer.Data.Serialization.DeserializingItemEventArgs">
      <summary>
            Raised when DDS serilalizer fins an objects which format has been replaced.
            An event handler is expected to recreate an object instance from the serialized format.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Serialization.DeserializingItemEventArgs.#ctor(System.Xml.Linq.XElement,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Data.Serialization.DeserializingItemEventArgs" /> class.
            </summary>
      <param name="serializedElement">The serialized element.</param>
      <param name="type">The type to create an instance of.</param>
    </member>
    <member name="P:EPiServer.Data.Serialization.DeserializingItemEventArgs.ObjectType">
      <summary>
            Gets the type of the object that is expected to be created.
            </summary>
      <value>The type of the object.</value>
    </member>
    <member name="P:EPiServer.Data.Serialization.DeserializingItemEventArgs.ObjectInstance">
      <summary>
            Gets or sets the object instance that is to be saved to DDS. It is expected to be of type <see cref="P:EPiServer.Data.Serialization.DeserializingItemEventArgs.ObjectType" />.
            </summary>
      <remarks>
            The event handler is expected to recreate an object instance from the serialized
            </remarks>
      <value>The object instance.</value>
    </member>
    <member name="P:EPiServer.Data.Serialization.DeserializingItemEventArgs.SerializedItem">
      <summary>
            Gets the serialized item.
            </summary>
      <remarks>
            This is the format set by an event handler to <see cref="E:EPiServer.Data.Serialization.DynamicDataSerializer.SerializingToXml" />.
            </remarks>
      <value>The serialized item.</value>
    </member>
    <member name="T:EPiServer.Data.Serialization.NullObject">
      <summary>
            Place holder object used at deserialization to "mark" that an object instance should be set to null
            </summary>
    </member>
    <member name="T:EPiServer.Data.Serialization.DynamicDataSerializer">
      <summary>
            Serializes and Deserializes Dynamic Data Store objects.
            The serialized format is XML.
            </summary>
    </member>
    <member name="E:EPiServer.Data.Serialization.DynamicDataSerializer.DeserializingFromXml">
      <summary>
            Occurs at deserilalization for items that has been modified by event <see cref="E:EPiServer.Data.Serialization.DynamicDataSerializer.SerializingToXml" />.
            </summary>
    </member>
    <member name="E:EPiServer.Data.Serialization.DynamicDataSerializer.DeserializedObject">
      <summary>
            Occurs when a DDS object is deserialized but not yet saved to DDS. An eventhandler
            has possibility to alter object or cancel save operation.
            </summary>
    </member>
    <member name="E:EPiServer.Data.Serialization.DynamicDataSerializer.SerializingObject">
      <summary>
             Occurs when a DDS object is to be serialized. An eventhandler
            has possibility to alter object or cancel save operation.
            </summary>
    </member>
    <member name="E:EPiServer.Data.Serialization.DynamicDataSerializer.SerializingToXml">
      <summary>
            Occurs when a DDS object or a object reference has been serialized. An eventhandler
            has possibility to replace the serialized format of the object. If an item is modified
            then an eventhandler to <see cref="E:EPiServer.Data.Serialization.DynamicDataSerializer.DeserializingFromXml" /> must be registered to handle
            recreation of object.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Serialization.DynamicDataSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Data.Serialization.DynamicDataSerializer" /> class.
            </summary>
      <remarks>
            Default constructor sets exceptionHandler to null, meaning exceptions will be thrown from serializer.
            </remarks>
    </member>
    <member name="M:EPiServer.Data.Serialization.DynamicDataSerializer.#ctor(System.Action{System.Exception})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Data.Serialization.DynamicDataSerializer" /> class.
            </summary>
      <param name="exceptionHandler">The exception handler that will be called when an exception occurs.</param>
    </member>
    <member name="P:EPiServer.Data.Serialization.DynamicDataSerializer.IdMap">
      <summary>
            If the ids should be remapped during deserialization then a map of new identities should be passed in. 
            This is e.g. the case when running mirroring to same site.
            </summary>
      <value>The id map.</value>
    </member>
    <member name="M:EPiServer.Data.Serialization.DynamicDataSerializer.Serialize(EPiServer.Data.Identity,System.String)">
      <summary>
            Serializes the dynamic data store item with given identity in given store.
            </summary>
      <remarks>
            If specified object references other objects, those will also be serialized.
            Meaning the whole object graph is serialized.
            </remarks>
      <param name="identity">The identity.</param>
      <param name="storeName">Name of the store.</param>
      <returns>A collection of serialized items</returns>
    </member>
    <member name="M:EPiServer.Data.Serialization.DynamicDataSerializer.Serialize(System.Collections.Generic.IEnumerable{EPiServer.Data.Serialization.IdentityStoreMap})">
      <summary>
            Serializes the dynamic data store items with given identity/storename.
            </summary>
      <remarks>
            It specified objects references other objects, those will also be serialized.
            Meaning whole object graphs are serialized.
            </remarks>
      <param name="identities">The identities including storename of the items to serialize</param>
      <returns>A collection of serialized items</returns>
    </member>
    <member name="M:EPiServer.Data.Serialization.DynamicDataSerializer.Deserialize(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
            Deserializes the specified objects element and saves them to Dynamic Data Store
            </summary>
      <param name="objectsElement">The object elements to deserialize</param>
    </member>
    <member name="T:EPiServer.Data.Serialization.IdentityStoreMap">
      <summary>
            Data class for mapping store id and name
            </summary>
    </member>
    <member name="T:EPiServer.Data.Serialization.Internal.DeReferencedPropertyBag">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Acts as an "intermediate" object format. Holds primitive data but references and collections are replaced by markers.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Serialization.Internal.DeReferencedPropertyBag.IdMap">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. If the ids should be remapped during deserialization then a map of new identities should be passed in. 
            This is e.g. the case when running mirroring to same site.
            </summary>
      <value>The id map.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Serialization.Internal.DeReferencedPropertyBag.ReferencedItems">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Used at Deserialization to determine which references an object holds
            </summary>
      <value>The referenced items.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Data.Serialization.Internal.DeReferencedPropertyBag.TableName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the name of the table where the item is to be stored.
            Used at deserialization.
            </summary>
      <value>The name of the table.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Serialization.Internal.DeReferencedPropertyBag.ToClonedObject(System.Type,EPiServer.Data.Serialization.Internal.LoadingContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called when a "real" object instance should be created from the intermediate format.
            </summary>
      <param name="type">The type.</param>
      <param name="context">The context.</param>
      <returns>
      </returns>
      <remarks>
            The objectResolver delegate in LoadingContext is used to reolve references for objects that are not yet saved.
            This is typically the case during deserialization when objects are not stored before the whole graph
            is ready.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Serialization.Internal.DeReferencedPropertyBag.DeReferenceObject(System.Collections.Generic.IDictionary{EPiServer.Data.Identity,System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called when an object should be "deReferenced". That is all references and collections
            are replaced by markers.
            </summary>
      <param name="loadedObjectsInContext">The loaded objects in context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Serialization.Internal.DeReferencedPropertyBag.Serialize(EPiServer.Data.Serialization.Internal.SerializationContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Serializes a dereferenced object to XElement.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Serialization.Internal.DeReferencedPropertyBag.SerializeItem(System.Xml.Linq.XElement,System.Boolean,System.String,System.String,System.Object,System.Type,EPiServer.Data.Serialization.Internal.SerializationContext,EPiServer.Data.Dynamic.DynamicDataStore)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Serializes an a value into current element context.
            </summary>
      <param name="xElement">Current element context</param>
      <param name="isCollectionItem">indicates whether current value is an item in a collection</param>
      <param name="elementName">Name of element to add</param>
      <param name="nameAttribute">The name attribute (if any) to write</param>
      <param name="propertyValue">The value to write</param>
      <param name="parentType">Type of the parent.</param>
      <param name="context">The <see cref="T:EPiServer.Data.Serialization.Internal.SerializationContext" /> of the current serialization process.</param>
      <param name="store">The <see cref="T:EPiServer.Data.Dynamic.DynamicDataStore" /> that this item is associated with.</param>
      <returns>All found references</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Data.Serialization.Internal.DeReferencedPropertyBag.DeserializeElement(System.Xml.Linq.XElement,EPiServer.Data.Serialization.Internal.DeserializationContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deserializes an XElement to current DeReferencedPropertyBag
            </summary>
      <param name="element">The element.</param>
      <param name="context">The context.</param>
      <returns>
            A value indicating if object was fully resolved
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Serialization.Internal.ReferenceHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles "reference markers" in DeReferencedPropertyBag
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Data.Serialization.SerializationEventArgs">
      <summary>
            Argument used when Serializing and Deserializing DynamicDataStore objects
            </summary>
    </member>
    <member name="M:EPiServer.Data.Serialization.SerializationEventArgs.#ctor(EPiServer.Data.Identity,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Data.Serialization.SerializationEventArgs" /> class.
            </summary>
      <param name="id">The id.</param>
      <param name="value">The object instance.</param>
    </member>
    <member name="P:EPiServer.Data.Serialization.SerializationEventArgs.Id">
      <summary>
            Gets the id for the item
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:EPiServer.Data.Serialization.SerializationEventArgs.StoreName">
      <summary>
            Gets the name of the store for the item
            </summary>
      <value>The name of the store.</value>
    </member>
    <member name="P:EPiServer.Data.Serialization.SerializationEventArgs.ObjectInstance">
      <summary>
            Gets the object instance 
            </summary>
      <value>The object.</value>
    </member>
    <member name="P:EPiServer.Data.Serialization.SerializationEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the serialize or deserialize operation for the object should be canceled.
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:EPiServer.Data.Serialization.SerializingItemEventArgs">
      <summary>
            Used when a object has been serialized by DDS serializer.
            An eventhandler has the possiblity to change the serialized item.
            </summary>
    </member>
    <member name="M:EPiServer.Data.Serialization.SerializingItemEventArgs.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Data.Serialization.SerializingItemEventArgs" /> class.
            </summary>
      <param name="value">The object instance.</param>
    </member>
    <member name="P:EPiServer.Data.Serialization.SerializingItemEventArgs.ObjectInstance">
      <summary>
            Gets the object instance that has been serialized.
            </summary>
      <remarks>
            Any changes done to this instance will not be reflected to <see cref="P:EPiServer.Data.Serialization.SerializingItemEventArgs.SerializedItem" />.
            To modify object instance use event <see cref="E:EPiServer.Data.Serialization.DynamicDataSerializer.SerializingObject" />.
            </remarks>
      <value>The object instance.</value>
    </member>
    <member name="P:EPiServer.Data.Serialization.SerializingItemEventArgs.SerializedItem">
      <summary>
            Gets or set the format of the serialized item.
            </summary>
      <remarks>Set this property if you will take control over the serilized format for the object instance. 
            If value is not set the framework will take care of serialization.
            </remarks>
      <value>The serialized item.</value>
    </member>
    <member name="T:EPiServer.Data.Validator">
      <summary>
            Contains validation methods
            </summary>
    </member>
    <member name="M:EPiServer.Data.Validator.ValidateArgNotNull(System.String,System.Object)">
      <summary>
            Validates that an argument passed to a method is not <see langword="null" /></summary>
      <param name="name">The name of the argument to validate</param>
      <param name="value">The value of the argument to validate</param>
    </member>
    <member name="M:EPiServer.Data.Validator.ValidateArgNotNullOrEmpty(System.String,System.String)">
      <summary>
            Validates that a <see cref="T:System.String" /> passed to a method is not <see langword="null" /> or <see cref="F:System.String.Empty" />.
            </summary>
      <param name="name">The name of the argument to validate</param>
      <param name="value">The value of the argument to validate</param>
    </member>
    <member name="M:EPiServer.Data.Validator.ValidateForSqlInjection(System.String,System.String)">
      <summary>
            Validates that a <see cref="T:System.String" /> passed to a method does not contain SQL injection code
            </summary>
      <param name="name">The name of the argument to validate</param>
      <param name="value">The value of the argument to validate</param>
    </member>
    <member name="M:EPiServer.Data.Validator.ValidateNotReadOnly(EPiServer.Data.Entity.IReadOnly)">
      <summary>
            Throws an exception if the instance is read-only
            </summary>
      <exception cref="T:System.NotSupportedException" />
      <param name="readOnly">The instance that is being validated</param>
    </member>
    <member name="T:System.Data.SqlClient.SqlServerEscapeHelper">
      <summary>
            This class holds helper methods to escape Microsoft SQL Server identifiers, such as table, schema, database or other names
            </summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlServerEscapeHelper.EscapeIdentifier(System.String)">
      <summary>
            Escapes the identifier with square brackets. The input has to be in unescaped form, like the parts received from MultipartIdentifier.ParseMultipartIdentifier.
            </summary>
      <param name="name">name of the identifier, in unescaped form</param>
      <returns>escapes the name with [], also escapes the last close bracket with double-bracket</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlServerEscapeHelper.EscapeIdentifier(System.Text.StringBuilder,System.String)">
      <summary>
            Same as above EscapeIdentifier, except that output is written into StringBuilder
            </summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlServerEscapeHelper.EscapeStringAsLiteral(System.String)">
      <summary>
             Escape a string to be used inside TSQL literal, such as N'somename' or 'somename'
            </summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlServerEscapeHelper.MakeStringLiteral(System.String)">
      <summary>
            Escape a string as a TSQL literal, wrapping it around with single quotes.
            Use this method to escape input strings to prevent SQL injection 
            and to get correct behavior for embedded quotes.
            </summary>
      <param name="input">unescaped string</param>
      <returns>escaped and quoted literal string</returns>
    </member>
    <member name="T:System.Data.SqlClient.TdsEnums">
      <devdoc> Class of variables for the Tds connection.
            </devdoc>
    </member>
  </members>
</doc>