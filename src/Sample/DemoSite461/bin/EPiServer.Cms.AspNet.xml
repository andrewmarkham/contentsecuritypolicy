<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EPiServer.Cms.AspNet</name>
  </assembly>
  <members>
    <member name="M:EPiServer.CssParsing.CssParser.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.CssParser" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.CssParsing.CssParser.ParseFile(System.String)">
      <summary>
            Parses the css file.
            </summary>
      <param name="fileName">Name of the file.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.CssParsing.CssParser.GetTokens(System.String)">
      <summary>
            Gets the tokens.
            </summary>
      <param name="fileName">Name of the file.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.CssParsing.CssParser.ParseText(System.String)">
      <summary>
            Parses string to return <see cref="P:EPiServer.CssParsing.CssParser.CssDocument" />.
            </summary>
      <param name="content">The content.</param>
      <returns>
        <see cref="P:EPiServer.CssParsing.CssParser.CssDocument" />
      </returns>
    </member>
    <member name="M:EPiServer.CssParsing.CssParser.ParseStream(System.IO.Stream)">
      <summary>
            Parses the streamto return <see cref="P:EPiServer.CssParsing.CssParser.CssDocument" />.
            </summary>
      <param name="stream">The stream.</param>
      <returns>
        <see cref="P:EPiServer.CssParsing.CssParser.CssDocument" />
      </returns>
    </member>
    <member name="P:EPiServer.CssParsing.CssParser.CssDocument">
      <summary>
            Gets the CSS document.
            </summary>
      <value>The CSS document.</value>
    </member>
    <member name="P:EPiServer.CssParsing.CssParser.Errors">
      <summary>
            Gets the errors.
            </summary>
      <value>The errors.</value>
    </member>
    <member name="T:EPiServer.CssParsing.AttributeToElement">
      <summary>
      </summary>
    </member>
    <member name="P:EPiServer.CssParsing.AttributeToElement.Operand">
      <summary>
            Gets or sets the operand.
            </summary>
      <value>The operand.</value>
    </member>
    <member name="P:EPiServer.CssParsing.AttributeToElement.Operator">
      <summary>
            Gets or sets the operator.
            </summary>
      <value>The operator.</value>
    </member>
    <member name="P:EPiServer.CssParsing.AttributeToElement.Value">
      <summary>
            Gets or sets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="M:EPiServer.CssParsing.AttributeToElement.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:EPiServer.CssParsing.AttributeOperator">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.AttributeOperator.Equals">
      <summary>
            =
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.AttributeOperator.InList">
      <summary>
            ~=
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.AttributeOperator.Hyphenated">
      <summary>
            |=
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.AttributeOperator.EndsWith">
      <summary>
            $=
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.AttributeOperator.BeginsWith">
      <summary>
            ^=
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.AttributeOperator.Contains">
      <summary>
            *=
            </summary>
    </member>
    <member name="T:EPiServer.CssParsing.Combinator">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Combinator.ChildOf">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Combinator.PrecededImmediatelyBy">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Combinator.PrecededBy">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.CssParsing.CssDocument">
      <summary>
            Object representing the CSS
            </summary>
    </member>
    <member name="P:EPiServer.CssParsing.CssDocument.Directives">
      <summary>
            Gets or sets the directives.
            </summary>
      <value>The directives.</value>
    </member>
    <member name="P:EPiServer.CssParsing.CssDocument.RuleSets">
      <summary>
            Gets rule sets
            </summary>
      <value>
      </value>
    </member>
    <member name="M:EPiServer.CssParsing.CssDocument.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:EPiServer.CssParsing.Declaration">
      <summary>Object representing single property inside style</summary>
    </member>
    <member name="P:EPiServer.CssParsing.Declaration.Name">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Declaration.Important">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.CssParsing.Declaration" /> is important.
            </summary>
      <value>
        <c>true</c> if important; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Declaration.Expression">
      <summary>
            Gets or sets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="M:EPiServer.CssParsing.Declaration.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:EPiServer.CssParsing.Directive">
      <summary>
            Object representing CSS directive
            </summary>
    </member>
    <member name="M:EPiServer.CssParsing.Directive.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.Directive" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.CssParsing.Directive.DirectiveType">
      <summary>
            Gets or sets the type of the directive.
            </summary>
      <value>The type of the directive.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Directive.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Directive.Expression">
      <summary>
      </summary>
    </member>
    <member name="P:EPiServer.CssParsing.Directive.Mediums">
      <summary>
            Gets or sets the mediums.
            </summary>
      <value>The mediums.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Directive.Directives">
      <summary>
            Gets or sets the directives.
            </summary>
      <value>The directives.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Directive.RuleSets">
      <summary>
            Gets rule sets
            </summary>
      <value>
      </value>
    </member>
    <member name="P:EPiServer.CssParsing.Directive.Declarations">
      <summary>
            Gets declarations 
            </summary>
      <value>
      </value>
    </member>
    <member name="M:EPiServer.CssParsing.Directive.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:EPiServer.CssParsing.Directive.ToString(System.Int32)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="nesting">The nesting.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:EPiServer.CssParsing.DirectiveType">
      <summary>
            Types of CSS directive
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.DirectiveType.Media">
      <summary>
            Media directive
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.DirectiveType.Import">
      <summary>
            Import directive
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.DirectiveType.CharSet">
      <summary>
            CharSet directive
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.DirectiveType.Page">
      <summary>
            Page directive
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.DirectiveType.FontFace">
      <summary>
            FontFace directive
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.DirectiveType.Namespace">
      <summary>
            Namespace directive
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.DirectiveType.Other">
      <summary>
            Non standard directive
            </summary>
    </member>
    <member name="T:EPiServer.CssParsing.Expression">
      <summary>
            Object representing CSS expression
            </summary>
    </member>
    <member name="M:EPiServer.CssParsing.Expression.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.Expression" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.CssParsing.Expression.Terms">
      <summary>
            Gets or sets the terms.
            </summary>
      <value>The terms.</value>
    </member>
    <member name="M:EPiServer.CssParsing.Expression.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:EPiServer.CssParsing.CssFunction">
      <summary>
            Object representing CSS function
            </summary>
    </member>
    <member name="P:EPiServer.CssParsing.CssFunction.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:EPiServer.CssParsing.CssFunction.Expression">
      <summary>
            Gets or sets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="M:EPiServer.CssParsing.CssFunction.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:EPiServer.CssParsing.IDeclarationContainer">
      <summary>
      </summary>
    </member>
    <member name="P:EPiServer.CssParsing.IDeclarationContainer.Declarations">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.CssParsing.IRuleSetContainer">
      <summary>
      </summary>
    </member>
    <member name="P:EPiServer.CssParsing.IRuleSetContainer.RuleSets">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.CssParsing.Medium">
      <summary>
            Enumerable specifying to which medium CSS can be applied
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Medium.All">
      <summary>
            All mediums
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Medium.Aural">
      <summary>
            Aural Medium
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Medium.Braille">
      <summary>
            Braille Medium
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Medium.Embossed">
      <summary>
            Embossed Medium
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Medium.Handheld">
      <summary>
            Handheld Medium
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Medium.Print">
      <summary>
            Print Medium
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Medium.Projection">
      <summary>
            Projection Medium
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Medium.Screen">
      <summary>
            Screen Medium
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Medium.Tty">
      <summary>
            Tty Medium
            </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Medium.TV">
      <summary>
            TV Medium
            </summary>
    </member>
    <member name="T:EPiServer.CssParsing.RuleSet">
      <summary>
            Object that representing a single style
            </summary>
    </member>
    <member name="P:EPiServer.CssParsing.RuleSet.Selectors">
      <summary>
            Gets the CSS selectors for current style.
            </summary>
      <value>The selectors.</value>
    </member>
    <member name="P:EPiServer.CssParsing.RuleSet.Declarations">
      <summary>
            gets declarations (content inside brackets) for the current CSS style
            </summary>
      <value>
      </value>
    </member>
    <member name="M:EPiServer.CssParsing.RuleSet.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:EPiServer.CssParsing.RuleSet.ToString(System.Int32)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="nesting">The nesting level.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:EPiServer.CssParsing.Selector">
      <summary>
            Object representing CSS selector
            </summary>
    </member>
    <member name="P:EPiServer.CssParsing.Selector.SimpleSelectors">
      <summary>
            Gets the simple selectors.
            </summary>
      <value>The simple selectors.</value>
    </member>
    <member name="M:EPiServer.CssParsing.Selector.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:EPiServer.CssParsing.SimpleSelector">
      <summary>
            Simple representation of a selector
            </summary>
    </member>
    <member name="P:EPiServer.CssParsing.SimpleSelector.Combinator">
      <summary>
            Gets or sets the combinator.
            </summary>
      <value>The combinator.</value>
    </member>
    <member name="P:EPiServer.CssParsing.SimpleSelector.ElementName">
      <summary>
            Gets or sets the name of the element.
            </summary>
      <value>The name of the element.</value>
    </member>
    <member name="P:EPiServer.CssParsing.SimpleSelector.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:EPiServer.CssParsing.SimpleSelector.Class">
      <summary>
            Gets or sets the class.
            </summary>
      <value>The class.</value>
    </member>
    <member name="P:EPiServer.CssParsing.SimpleSelector.Pseudo">
      <summary>
            Gets or sets the pseudo.
            </summary>
      <value>The pseudo.</value>
    </member>
    <member name="P:EPiServer.CssParsing.SimpleSelector.Attribute">
      <summary>
            Gets or sets the attribute.
            </summary>
      <value>The attribute.</value>
    </member>
    <member name="P:EPiServer.CssParsing.SimpleSelector.Function">
      <summary>
            Gets or sets the function.
            </summary>
      <value>The function.</value>
    </member>
    <member name="P:EPiServer.CssParsing.SimpleSelector.Child">
      <summary>
      </summary>
    </member>
    <member name="M:EPiServer.CssParsing.SimpleSelector.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:EPiServer.CssParsing.Term">
      <summary>object representing part of CSS property's value</summary>
    </member>
    <member name="P:EPiServer.CssParsing.Term.Separator">
      <summary>
            Gets or sets the separator.
            </summary>
      <value>The separator.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Term.Sign">
      <summary>
            Gets or sets the sign.
            </summary>
      <value>The sign.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Term.TermType">
      <summary>
            Gets or sets the type of the term.
            </summary>
      <value>The type of the term.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Term.Value">
      <summary>
            Gets or sets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Term.Unit">
      <summary>
            Gets or sets the unit.
            </summary>
      <value>The unit.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Term.Function">
      <summary>
            Gets or sets the function.
            </summary>
      <value>The function.</value>
    </member>
    <member name="M:EPiServer.CssParsing.Term.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:EPiServer.CssParsing.Term.IsColor">
      <summary>
            Gets a value indicating whether this instance is color.
            </summary>
      <value>
        <c>true</c> if this instance is color; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.CssParsing.Term.ToColor">
      <summary>
            Translates current term to the color.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.CssParsing.TermType">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.TermType.Number">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.TermType.Function">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.TermType.String">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.TermType.Url">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.TermType.Unicode">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.TermType.Hex">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.CssParsing.Unit">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.None">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.Percent">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.EM">
      <summary>the font size of the element (or, to the parent element's font size if set on the 'font-size' property)</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.EX">
      <summary>the x-height of the element's font</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.PX">
      <summary>viewing device</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.GD">
      <summary>the grid defined by 'layout-grid' described in the CSS3 Text module [CSS3TEXT]</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.Rem">
      <summary>the font size of the root element</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.VW">
      <summary>the viewport's width</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.VH">
      <summary>the viewport's height</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.VM">
      <summary>the viewport's height or width, whichever is smaller of the two</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.CH">
      <summary>The width of the "0" (ZERO, U+0030) glyph found in the font for the font size used to render. If the "0" glyph is not found in the font, the average character width may be used. How is the "average character width" found?</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.MM">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.CM">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.In">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.PT">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.PC">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.Deg">
      <summary>degrees</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.Grad">
      <summary>grads</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.Rad">
      <summary>radians</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.Turn">
      <summary>turns</summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.MS">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.S">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.HZ">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.CssParsing.Unit.Khz">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.CssParsing.Parser">
      <summary>
            Parse Css files
            </summary>
    </member>
    <member name="M:EPiServer.CssParsing.Parser.#ctor(EPiServer.CssParsing.Scanner,EPiServer.CssParsing.ParsingErrorsHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.Parser" /> class.
            </summary>
      <param name="scanner">The scanner.</param>
      <param name="errors">The errors.</param>
    </member>
    <member name="M:EPiServer.CssParsing.Parser.#ctor(EPiServer.CssParsing.Scanner)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.Parser" /> class.
            </summary>
      <param name="scanner">The scanner.</param>
    </member>
    <member name="P:EPiServer.CssParsing.Parser.CssDocument">
      <summary>
            Gets or sets the CSS document.
            </summary>
      <value>The CSS document.</value>
    </member>
    <member name="P:EPiServer.CssParsing.Parser.ParsingErrors">
      <summary>
            Gets or sets the parsing errors.
            </summary>
      <value>The parsing errors.</value>
    </member>
    <member name="M:EPiServer.CssParsing.Parser.Parse">
      <summary>
            Parses a Css file into a 'CssDocument'
            </summary>
    </member>
    <member name="T:EPiServer.CssParsing.ParsingErrorsHandler">
      <summary>
            Utility for handling error strings
            </summary>
    </member>
    <member name="M:EPiServer.CssParsing.ParsingErrorsHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.ParsingErrorsHandler" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.CssParsing.ParsingErrorsHandler.#ctor(System.IO.TextWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.CssParsing.ParsingErrorsHandler" /> class.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="P:EPiServer.CssParsing.ParsingErrorsHandler.ErrorStream">
      <summary>
            Gets the error stream.
            </summary>
      <value>The error stream.</value>
    </member>
    <member name="M:EPiServer.CssParsing.ParsingErrorsHandler.AddSyntaxError(System.Int32,System.Int32,System.String)">
      <summary>
            Add error message to the error stream
            </summary>
      <param name="line">The line where the error occured</param>
      <param name="col">The column where the error occured</param>
      <param name="message">The error message</param>
    </member>
    <member name="T:EPiServer.Enterprise.Internal.DefaultSiteContentInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Supports automatic setup of default site content (used by templates to bootstrap a site with content)
            </summary>
      <remarks>Place a file ~/App_Data/DefaultSiteContent.episerverdata on the web site to automatically import and configure a new site. Site will
            only be created where there are no other sites defined and there are no content under the root page beside the wastebasket.</remarks>
      <exclude />
    </member>
    <member name="E:EPiServer.Enterprise.Internal.DefaultSiteContentInitialization.ImportedSiteContent">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Triggered when setup process has been completed
            </summary>
      <remarks>This event is called inside a lock, so no other HTTP requests can be processed until all event handlers listening to this event return.</remarks>
      <exclude />
    </member>
    <member name="E:EPiServer.Enterprise.Internal.DefaultSiteContentInitialization.ImportingSiteContent">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Triggered when setup process is started
            </summary>
      <remarks>This event is called inside a lock, so no other HTTP requests can be processed until all event handlers listening to this event return.</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.Internal.EnterpriseAspNetInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Enterprise.Mirroring.MirroringDataExporter.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Enterprise.Mirroring.MirroringDataExporter" /> class.
            </summary>
      <param name="langsToMirror">The langs to mirror.</param>
      <param name="linkGuidMap">The link GUID map.</param>
    </member>
    <member name="M:EPiServer.Enterprise.Mirroring.MirroringDataImporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Enterprise.Mirroring.MirroringDataImporter" /> class.
            </summary>
    </member>
    <member name="T:EPiServer.Enterprise.Mirroring.MirroringManager">
      <summary>
            Summary description for RemoteExportImport.
            </summary>
    </member>
    <member name="M:EPiServer.Enterprise.Mirroring.MirroringManager.ExpandPagesWithDynamicProperties(System.Collections.Generic.List{System.Guid})">
      <summary>
            Expands the pages with dynamic properties.
            </summary>
      <param name="pagesWithDynamicProperties">The pages with dynamic properties.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Enterprise.Transfer.Internal.PageVisitedModelTransfer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.Transfer.Internal.VisitorGroupCriterionTransferDataHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handle transfering of visitorgroup criterion data in the export/import and mirrroring context
            <remarks>
                Visitor group and visitor group criteria are in the DDS items and it uses the DynamicDataTrafsferHandler 
            </remarks></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Enterprise.Transfer.Internal.VisitorGroupCriterionTransferDataHandler.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes the Visitor group transfer handler. Listen to changing of visitor group repository
            </summary>
      <param name="context">The context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Enterprise.Transfer.Internal.VisitorGroupCriterionTransferDataHandler.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Uninitializes the Visitor group transfer handler. Disconnect from changing of visitor group repository
            </summary>
      <param name="context">The context.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.ParseUrlEventHandler">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.ContentExportingEventHandler">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.ContentExportedEventHandler">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.FileExportingEventHandler">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.FileExportedEventHandler">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.ParseUrlEventArgs">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.DataExporter">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.ContentImportingEventHandler">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.ContentImportedEventHandler">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.FileImportingEventHandler">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.FileImportedEventHandler">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.DataImporter">
      <exclude />
    </member>
    <member name="P:EPiServer.Enterprise.DataImporter.ImportedVppFiles">
      <summary>
            Gets or sets a value indicating whether the importer imported vpp based files.
            </summary>
      <value>
        <c>true</c> if vpp based files where imported; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Enterprise.DataImporter.AutoDetectCulture">
      <summary>
            Gets or sets a value indicating whether [auto detect culture].
            </summary>
      <value>
        <c>true</c> if [auto detect culture]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Enterprise.DataImporter.NumberOfPagesToImport">
      <summary>
            Gets or sets the all the pages to import.
            </summary>
      <value>The number of pages to import.</value>
    </member>
    <member name="P:EPiServer.Enterprise.DataImporter.NumberOfVisitorGroupToImport">
      <summary>
            Gets or sets the number of visitor group to import.
            </summary>
      <value>The number of visitor group to import.</value>
    </member>
    <member name="P:EPiServer.Enterprise.DataImporter.IgnoreDynamicProperties">
      <summary>
            If dynamic properties in import packages should be ignored
            </summary>
      <value>If value is not set the default value will be based on if dynamic properties are enabled or not in configuration</value>
    </member>
    <member name="P:EPiServer.Enterprise.DataImporter.Status">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Enterprise.DataImporter.Import(System.IO.Stream,EPiServer.Core.ContentReference,EPiServer.Enterprise.ImportOptions)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Enterprise.DataImporter.Import">
      <summary>
            Execute the import.
            </summary>
    </member>
    <member name="T:EPiServer.Enterprise.ResolveFileTransferTypeArgs">
      <exclude />
    </member>
    <member name="M:EPiServer.Enterprise.ResolveFileTransferTypeArgs.#ctor(EPiServer.Enterprise.Internal.DefaultDataImporter,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Enterprise.ResolveFileTransferTypeArgs" /> class.
            </summary>
      <param name="dataImporter">The data importer.</param>
      <param name="xmlElementName">Name of the XML element.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Enterprise.ResolveFileTransferTypeArgs.XmlElementName">
      <summary>
            Gets or sets the name of the XML element that is to be deserialized. This is the name of the concrete class that was serialized.
            </summary>
      <value>The name of the XML element.</value>
    </member>
    <member name="P:EPiServer.Enterprise.ResolveFileTransferTypeArgs.FileTransferType">
      <summary>
            Gets or sets the type of the file transfer that corresponds to <see cref="P:EPiServer.Enterprise.ResolveFileTransferTypeArgs.XmlElementName" />.
            </summary>
      <value>The type of the file transfer.</value>
    </member>
    <member name="T:EPiServer.Enterprise.Util.FilteredPageSource">
      <summary>
            Summary description for FilteredPageSource.
            </summary>
    </member>
    <member name="T:EPiServer.Enterprise.Util.IntLookup">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.Util.PageReferenceReader">
      <exclude />
    </member>
    <member name="T:EPiServer.Enterprise.Util.StringInjection">
      <exclude />
    </member>
    <member name="T:EPiServer.MirroringService.Cache.RuntimeCacheEvents">
      <summary>
            Handles event notifications between EPiServer Runtime and a site
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.Cache.RuntimeCacheEvents.BlockedCacheEventId">
      <summary>
            The signature for the event that is sent when a original event in runtime was raised but blocked.
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.Cache.RuntimeCacheEvents.FlushStoredCacheEventId">
      <summary>
            The signature for the event that is sent when all previously blocked events should be handled
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.Cache.RuntimeCacheEvents.RuntimeCacheEventsRaiserId">
      <summary>
            The id of the raiser of the blocked events
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.Cache.RuntimeCacheEvents.Initialize">
      <summary>
            Sets up listening for blocked event notifications
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.ChangeLog.ChangeLogDependencyHandler">
      <summary>
            Registers the EPiServer Mirroring dependencies on the Change Log system.
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.ChangeLog.ImplicitChangeLogItem">
      <summary>
            Represents an item that has been implicitly added to package.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.ChangeLog.ImplicitChangeLogItem.#ctor(EPiServer.Core.ContentReference,System.Guid,System.Int32,System.String,EPiServer.ChangeLog.ChangeLogContent.ActionType,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.MirroringService.ChangeLog.ImplicitChangeLogItem" /> class.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentGuid">The content GUID.</param>
      <param name="contentTypeId">The content type id.</param>
      <param name="name">The name.</param>
      <param name="action">The action.</param>
      <param name="changedBy">The changed by.</param>
    </member>
    <member name="T:EPiServer.MirroringService.ChangeLog.MirroringChangeLogFilter">
      <exclude />
    </member>
    <member name="M:EPiServer.MirroringService.ChangeLog.MirroringChangeLogFilter.GetFileChanges(System.Int64)">
      <summary>
            Gets relevant file changes for current mirroring channel
            </summary>
      <param name="lastSequenceNumberRead">The last sequence number read.</param>
      <returns>file changes</returns>
    </member>
    <member name="M:EPiServer.MirroringService.ChangeLog.MirroringChangeLogFilter.IsFileLinkedFromPageInChannel(System.String)">
      <summary>
            Determines whether specified file is linked to from any page within current channel
            </summary>
      <param name="virtualPath">The virtual path for the file</param>
      <returns>
        <c>true</c> if file is linked to; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.MirroringService.Common.MirroringQueueData`1">
      <summary>
            The Generic queue data 
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="P:EPiServer.MirroringService.Common.MirroringQueueData`1.MirroringTransferData">
      <summary>
            Gets or sets the mirroring transfer data.
            </summary>
      <value>The mirroring transfer data.</value>
    </member>
    <member name="P:EPiServer.MirroringService.Common.MirroringQueueData`1.Context">
      <summary>
            Gets or sets the context. Used to be mirroring channel id
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:EPiServer.MirroringService.Common.MirroringQueueData`1.Action">
      <summary>
            Gets or sets the action. Used to be a method handler
            </summary>
      <value>The action.</value>
    </member>
    <member name="T:EPiServer.MirroringService.Common.QueueManager`1">
      <summary>
            This class holds a queue and is thread safe
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:EPiServer.MirroringService.Common.QueueManager`1.Enqueue(`0)">
      <summary>
            Enqueues the specified mirroing queue item.
            When the item be inserted in the queue then does a pulse to waiting thread for continuing executing
            </summary>
      <param name="mirroingQueueItem">The mirroing queue item.</param>
    </member>
    <member name="M:EPiServer.MirroringService.Common.QueueManager`1.TryToDequeue(`0@)">
      <summary>
            Tries to dequeue.
            </summary>
      <param name="queueItem">The queue item.</param>
      <returns>true if the queue is not empty</returns>
    </member>
    <member name="P:EPiServer.MirroringService.Common.QueueManager`1.Empty">
      <summary>
            Gets a value indicating whether this <see cref="T:EPiServer.MirroringService.Common.QueueManager`1" /> is empty.
            </summary>
      <value>
        <c>true</c> if empty; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.MirroringService.Common.QueueManager`1.Clear">
      <summary>
            Clears the queue.
            </summary>
    </member>
    <member name="P:EPiServer.MirroringService.Common.QueueManager`1.LockedObject">
      <summary>
            Gets the locked object.
            </summary>
      <value>The locked object.</value>
    </member>
    <member name="M:EPiServer.MirroringService.Common.PackageFileHandler.ValidateContextDirectory(System.IO.DirectoryInfo,System.Guid)">
      <summary>
            Validates the context directory.
            </summary>
      <remarks>
            This will throw exception if e.g. the current account has not access rights to directory.
            </remarks>
      <param name="rootDirectory">The root directory.</param>
      <param name="contextId">The context id.</param>
    </member>
    <member name="T:EPiServer.MirroringService.DataAccess.ContentTypesDB">
      <summary>
            Help to get page type directly from tblapage. 
            </summary>
      <remarks>
                If the tblpage and contentpath has been changed this class should be modified .
            </remarks>
    </member>
    <member name="M:EPiServer.MirroringService.DataAccess.ContentTypesDB.#ctor(EPiServer.Data.IDatabaseExecutor,EPiServer.DataAbstraction.IContentTypeRepository)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.MirroringService.DataAccess.ContentTypesDB" /> class.
            </summary>
      <param name="databaseHandler">The database handler.</param>
      <param name="contentTypeRepository">The content type repository.</param>
    </member>
    <member name="M:EPiServer.MirroringService.DataAccess.ContentTypesDB.GetDescendantContentTypes(EPiServer.Core.ContentReference)">
      <summary>
            Gets the descendant page types.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.MirroringService.ExternalDataTracker">
      <summary>
            This class has tracker on external mirroring data such as VisitorGroup, ContetType and etc. 
            As soon as the entities changed then it sets the entities state as changed in mirroring data
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringData">
      <summary>
            Holds configruation data and state information about a mirroring task.
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringData.ItemChangingState">
      <summary>
            State of processing of item
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringData.ItemChangingState.NotChanged">
      <summary>
            The item has not been changed
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringData.ItemChangingState.Changed">
      <summary>
            The Item Has been changed
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringData.ItemChangingState.Executing">
      <summary>
            The item is under executing
            </summary>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringData.Params">
      <summary>
            Gets or sets the endpoint name that can be used by the MTP
            </summary>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringData.GuidMap">
      <summary>
            Gets or sets the GUID map used to remap the export packages page guids.
            </summary>
      <value>The GUID map.</value>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringData.TransferAction">
      <summary>
            Gets or sets the transfer action.
            </summary>
      <value>The transfer action.</value>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringMonitoring.IMirroringMonitoringEventSystem">
      <summary>
      </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.IMirroringMonitoringEventSystem.Subscribe">
      <summary>
            Subscribes this instance.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.IMirroringMonitoringEventSystem.Unsubscribe">
      <summary>
            Unsubscribes this instance.
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringMonitoring.IMirroringMonitoringEventSystemCallback">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringMonitoring.MonitoringJSONData">
      <summary>
            This class used for Ajax 
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringMonitoring.MirroringDataJSONCreator">
      <summary>
            This class create list of MonitoringJSONData to send to client
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient">
      <summary>
            This class is proxy to Mirroring Monitoring Service 
            A Mirrroing Monitoing application can create an instance of this and subscribe to monitoring event.
            The Mirroring Monitoring Service should configuerd with a binding which support duplex communication such as WsDual/netTcp. 
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient" /> class.
            </summary>
      <param name="endpoint">The endpoint. is name of the client name in config file</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient.CreateChannelFactory">
      <summary>
            Creates the channel factory.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient.Initialize">
      <summary>
      </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient.CloseCommunication(System.Exception)">
      <summary>
            Closes the communication.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient.HandleCommunicationException(System.ServiceModel.CommunicationException)">
      <summary>
            Handles the communication exception.
            </summary>
      <param name="communicationEx">The communication ex.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient.HandleApplicationException(System.ServiceModel.FaultException)">
      <summary>
            Handles the appplication exception.
            </summary>
      <param name="faultException">The fault exception.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient.HandleException(System.Exception)">
      <summary>
            Handles the exception.
            </summary>
      <param name="ex">The ex.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient.MirroringSourceChannel_Faulted(System.Object,System.EventArgs)">
      <summary>
            Handles the Faulted event of the MirroringSourceChannel control.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient.MirroringSourceChannel_Closed(System.Object,System.EventArgs)">
      <summary>
            Handles the Closed event of the MirroringSourceChannel control.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringClient.GetCommunicationState">
      <summary>
            Gets the state of the communication.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver">
      <summary>
            This class is a helper class to save MirrorinMonitoringData to file 
            Load the MirrorinMonitoringData from file in memory
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver" /> class.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver.#ctor(System.IO.FileInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver" /> class.
            </summary>
      <param name="fileInfo">Information for the offline log file.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver.Add(EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs)">
      <summary>
            Adds the specified data.
            </summary>
      <param name="data">The <see cref="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver.Save">
      <summary>
            Saves this instance.
            </summary>
      <remarks> Save the MirroringMonitoringData to file. If the file is already exist then try to 
            create a unique file name with current time stamp</remarks>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver.Initialize">
      <summary>
            Initialize an output stream to write monitoring data into it.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver.Append(System.Boolean)">
      <summary>
            Appends monitoring data.
            </summary>
      <param name="forceSave">if set to <c>true</c> then save all monitoring data to file</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver.LoadData(System.String)">
      <summary>
            Loads monitoring data from file path.
            </summary>
      <param name="filepath">path of the file.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver.Clear">
      <summary>
            Clears this instance.
            </summary>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringDataSaver.MirroringMonitoringData">
      <summary>
            Gets or sets the mirroring monitoring data.
            </summary>
      <value>The mirroring monitoring data.</value>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringData">
      <summary>
            The MirroringMonitoringData is a Serializable/Deserializable data which contains MirroringMonitoringData
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringData.Add(EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs)">
      <summary>
            Adds the specified item.
            </summary>
      <param name="item">The <see cref="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringData.Items">
      <summary>
            Gets or sets the items.
            </summary>
      <value>The items.</value>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringEnvironment">
      <summary>
            The MirroringMonitoringEnvironment class is helper class for creating filename and unique file name
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringLogger">
      <summary>
            The MirroringMonitoringLogger class do logging of the Mirroring Monitoring Data
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringLogger.Add(EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs)">
      <summary>
            Adds the MirroringStatusEventArgs data to Mirroring Monitoring Data.
            </summary>
      <param name="data">The <see cref="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringLogger.Save(System.Guid)">
      <summary>
            Saves the Mirroring Monitoring Data to DataSaver.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringLogger.Save">
      <summary>
            Saves .
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringMonitoring.MirroringMonitoringLogger.Remove(System.Guid)">
      <summary>
            Removes the specified saver from list.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.IMirroringSource.StartMirroring(System.String,System.Guid,EPiServer.MirroringService.MirroringTransferProtocol.Common.ValidationContext)">
      <summary>
            Starts the mirroring.
            </summary>
      <param name="siteId">The site id.</param>
      <param name="contextId">The context id.</param>
      <param name="validationContext">The validation context.</param>
      <returns>true if new job was started and false if a job was already running</returns>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient">
      <summary>
            The MirroringSourceClient is a proxy (client) to MirroringSourceServer
            </summary>
    </member>
    <member name="E:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient._channelFactoryCreating">
      <summary>
            Occurs when [_channel factory creating] it is common to be fired in the WCF Certificate configueration .
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient._mirroringSourceProxy">
      <summary>
            The WCF Channel
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient._MirroringSourceChannel">
      <summary>
            The WCF Channel Factory
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient._customMirroringSourceChannel">
      <summary>
            The customer channel factory. It's be substituted with the _MirroringSourceChannel
            It uses when the Cetificate uses
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient._proxyUserName">
      <summary>
            Application credentials
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient" /> class.
            </summary>
      <param name="endpoint">The endpoint.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient" /> class.
            </summary>
      <param name="endpoint">The endpoint.</param>
      <param name="proxyUserName">Name of the proxy user.</param>
      <param name="proxyPassword">The proxy password.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.CreateChannelFactory">
      <summary>
            Creates the channel factory.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.SetProxyCredentials">
      <summary>
            Sets the proxy credentials.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.Inited">
      <summary>
            Initeds this instance.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.CloseCommunication">
      <summary>
            Closes the communication.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.HandleCommunicationException(System.ServiceModel.CommunicationException)">
      <summary>
            Handles the communication exception.
            </summary>
      <param name="communicationEx">The communication ex.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.HandleAppplicationException(System.ServiceModel.FaultException)">
      <summary>
            Handles the appplication exception.
            </summary>
      <param name="faultException">The fault exception.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.HandleException(System.Exception)">
      <summary>
            Handles the exception.
            </summary>
      <param name="ex">The ex.</param>
    </member>
    <member name="E:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.ChannelFactoryCreating">
      <summary>
            Occurs when [channel factory creating].
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.MirroringSourceChannel_Faulted(System.Object,System.EventArgs)">
      <summary>
            Handles the Faulted event of the MirroringSourceChannel control.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.MirroringSourceChannel_Closed(System.Object,System.EventArgs)">
      <summary>
            Handles the Closed event of the MirroringSourceChannel control.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringSourceService.MirroringSourceClient.GetCommunicationState">
      <summary>
            Gets the state of the communication.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.ChannelFactoryEventArgs`1.#ctor(System.ServiceModel.ChannelFactory{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.ChannelFactoryEventArgs`1" /> class.
            </summary>
      <param name="channelFactory">The channel factory.</param>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringTransferProtocol.Common.ChannelFactoryEventArgs`1.ChannelFactory">
      <summary>
            Gets or sets the channel factory.
            </summary>
      <value>The channel factory.</value>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.IMirroringDataTransfer">
      <summary>
            Defines the Transfer protocol interfaces
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.IMirroringDataTransfer.InitializeMirroring(System.Guid,EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringInitializeData@)">
      <summary>
            Initializes the mirroring.
            </summary>
      <param name="context">The context.</param>
      <param name="mirroringInitializeData">The mirroring initialize data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.IMirroringDataTransfer.StartMirroringPackage(System.Guid,EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringPackageHeader)">
      <summary>
            Starts the mirroring package.
            </summary>
      <param name="context">The context.</param>
      <param name="mirroringPackageHeader">The mirroring package header.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.IMirroringDataTransfer.AppendMirroringPackage(System.Guid,EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferData)">
      <summary>
            Appends the mirroring package.
            </summary>
      <param name="context">The context.</param>
      <param name="mirroringTransferData">The mirroring transfer data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.IMirroringDataTransfer.CompleteMirroringPackage(System.Guid,EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringPackageHeader)">
      <summary>
            Completes the mirroring package.
            </summary>
      <param name="context">The context.</param>
      <param name="mirroringPackageHeader">The mirroring package header.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.IMirroringDataTransfer.ProcessPackage(System.Guid,EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringPackageHeader)">
      <summary>
            Processes the package.
            </summary>
      <param name="context">The context.</param>
      <param name="mirroringPackageHeader">The mirroring package header.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.IMirroringDataTransfer.GetMirroringStatus(System.Guid)">
      <summary>
            Gets the status.
            </summary>
      <param name="context">The context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.IMirroringDataTransfer.CompleteMirroring(System.Guid)">
      <summary>
            Completes the mirroring.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.IMirroringDataTransfer.Cleanup(System.Guid)">
      <summary>
            Cleanups the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferData">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringInitializeData">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringPackageHeader">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferAction">
      <summary>
            Decides how the mirroring pages should be saved.
            Default value (None) indicates the new page should be saved as new version.
            
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferAction.None">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferAction.ForceCurrentVersion">
      <summary>
            Force on the current version.
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringPackageBody">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringFaultExceptionDetail">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.WrapperMirroringTransferStatusEventHandler">
      <summary>
            The WrapperMirroringTransferStatusEventHandler class used to send the MirroringStatusEventArgs between proxy objects
            when there are instances of objects between two appcomain which are intrested in MirroringTransferStatusEventHandler
            </summary>
    </member>
    <member name="E:EPiServer.MirroringService.MirroringTransferProtocol.Common.WrapperMirroringTransferStatusEventHandler.WrapperMessageReceived">
      <summary>
            Occurs when [wrapper message received].
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.WrapperMirroringTransferStatusEventHandler.WrapperMessageReceivedHandler(EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs)">
      <summary>
            Wrappers the message received handler.
            </summary>
      <param name="e">The <see cref="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.WrapperMirroringTransferStatusEventHandler.InitializeLifetimeService">
      <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
      <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> property.
            </returns>
      <exception cref="T:System.Security.SecurityException">
            The immediate caller does not have infrastructure permission.
            </exception>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState">
      <summary>
            The state of mirroring job 
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.Undefined">
      <summary>
            An undefined state. It used be an defualt value
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.MirroringJobInitialized">
      <summary>
            When a Mirroring job is intialized
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.MirroringJobCompleted">
      <summary>
            When a Mirroring job is completed
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.Transfering">
      <summary>
            When a Mirroring package is sending to target
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.Transferred">
      <summary>
            When a Mirroring package is transfered to target
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.Importing">
      <summary>
            When a Mirroring package is importing 
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.MirroringPackageInitialized">
      <summary>
            When a Mirroring package is intialized
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.MirroringPackageCompleted">
      <summary>
            When a Mirroring package is completed
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.TransferingError">
      <summary>
            When there is problem in transfering 
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.ImportingError">
      <summary>
            When there is problem in importing
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringState.ExportingError">
      <summary>
            When there is problem in exporting
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatus">
      <summary>
            the status of an mirrroing
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase">
      <summary>
            The bas class for transfering mirroring job. The Mirrorring transfering protocol is based on provider base 
            for the custom implementation should inherits this class. 
            There are a few abstract method which be called on the instance when the mirrorin is starting
            The InitializeMirroring is a synchronize method which returns a MirroringStatus. If the Status is OK 
            then the mirroring frameworks(Export component) calls other methods which are asyncronize.
            The communication between the MirroringFramework(Export component) and the MTP (Mirrroing transfer protocol) should be via MirroringTransferStatusEvent
            If there is problem in transfering an MirroringTransferStatusEvent should be fired.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> on a provider after the provider has already been initialized.
            </exception>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.Validate(System.Collections.Specialized.NameValueCollection,System.String@)">
      <summary>
      </summary>
      <param name="configurationParameters">The parameters to validate</param>
      <param name="errorMessage">Error message that will be displayed, if any</param>
      <returns>true if valid else false</returns>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.DestinationPath">
      <summary>
            Gets or sets the destination path.
            </summary>
      <value>The destination path.</value>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.SourcePath">
      <summary>
            Gets or sets the source path.
            </summary>
      <value>The source path.</value>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.NumberofPagesInpackage">
      <summary>
            Gets or sets the numberof pages inpackage.
            </summary>
      <value>The numberof pages inpackage.</value>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.NumberofFilesInpackage">
      <summary>
            Gets or sets the numberof files inpackage.
            </summary>
      <value>The numberof files inpackage.</value>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.DestinationConnectionStringName">
      <summary>
            Gets or sets the name of the destination connection string.
            </summary>
      <value>The name of the destination connection string.</value>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.DestinationBasePath">
      <summary>
            Gets or sets the basePath for EPiServer.Framework.AppData.BasePath for destination service.
            </summary>
      <value>The name of the destination connection string.</value>
    </member>
    <member name="E:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.MirroringTransferStatusEventHandler">
      <summary>
            Occurs when [mirroring transfer status event handler].
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.OnMirroringStatus(EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.MirroringTransferStatusEventHandler" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.InitializeMirroring(System.Guid,EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringInitializeData)">
      <summary>
            Initializes the mirroring.
            </summary>
      <param name="context">The context.</param>
      <param name="mirroringInitializeData">The mirroring initialize data.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.ProcessPackage(System.Guid,System.String)">
      <summary>
            Processes the package.
            </summary>
      <param name="context">The context.</param>
      <param name="filePath">The file path.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.ProcessFilePackage(System.Guid,System.String)">
      <summary>
            Processes the file package.
            </summary>
      <param name="context">The context.</param>
      <param name="filePath">The file path.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.CompleteMirroring(System.Guid)">
      <summary>
            Completes the mirroring.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringTransferProviderBase.Cleanup(System.Guid,EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatus)">
      <summary>
            Cleanups the Mirroring job.
            </summary>
      <param name="context">The context.</param>
      <param name="mirroringStatus">The mirroring status.</param>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.TransferQueueManager">
      <summary>
            The main function of MirroringQueueExecuterManager class is manage the queue item (MirroringTransferData) and 
            if the item is bigger than chunksize divide them in small packages and forwarding to the Client (IMirroringDataTransfer).
            It has a private queue which the owner can send action item for executing.
            There are three type of action 
                    1- Initialize action tells to Client a miiroring job is initialized
                    2- SendPackage action sends the Mirroring job to server
                    3- Complete action tells to Client the mirroring job is complete
                    4- Clean up action clean up queue and wait to client is back from server call
            All actions are stored in a private queue and the menager executes them one after one. 
            This class chunked the transfer data if the data is bigger the chunksize and send them in small packet the client.
            </summary>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.TransferQueueManager.QueueThreadState">
      <summary>
            The thread state
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.TransferQueueManager.QueueThreadState.Busy">
      <summary>
            Indicates the thread is busy
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.TransferQueueManager.QueueThreadState.Idle">
      <summary>
            Indicates the thread is idle
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.Common.TransferQueueManager.QueueThreadState.Error">
      <summary>
      </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.Common.TransferQueueManager.AddToQueue(EPiServer.MirroringService.Common.MirroringQueueData{EPiServer.MirroringService.MirroringTransferProtocol.Common.TransferQueueManager.TypeOfTransferAction})">
      <summary>
            Adds to queue.
            </summary>
      <param name="mirroingQueueItem">The mirroing queue item.</param>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.PageTypeData">
      <summary>
            Contains Pagetype information
            </summary>
    </member>
    <member name="P:EPiServer.MirroringService.MirroringTransferProtocol.Common.PageTypeData.PageDefinitionCollection">
      <summary>
            Gets or sets the page definition collection.
            Key is pagetypeName
            Value is PageDefinitionType
            </summary>
      <value>The page definition collection.</value>
    </member>
    <member name="T:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient">
      <summary>
            The MirroringTransferClient class take care the mirroring package and send to transfer component
            the MirroringTransferClient has a TransferQueueManager class which queue the mirroing packages.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> on a provider after the provider has already been initialized.
            </exception>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient.InitializeMirroring(System.Guid,EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringInitializeData)">
      <summary>
            Initializes the mirroring.
            </summary>
      <param name="context">The context.</param>
      <param name="mirroringInitializeData">The mirroring initialize data.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient.ProcessPackage(System.Guid,System.String)">
      <summary>
            Processes the package.
            </summary>
      <param name="context">The context.</param>
      <param name="filePath">The file path.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient.ProcessFilePackage(System.Guid,System.String)">
      <summary>
            Processes the file package.
            </summary>
      <param name="context">The context.</param>
      <param name="filePath">The file path.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient.CompleteMirroring(System.Guid)">
      <summary>
            Completes the mirroring.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient.ProcessPackageInternal(System.Guid,EPiServer.MirroringService.MirroringTransferProtocol.Common.TypeOfMirroringData,System.String)">
      <summary>
            Processes the package internal.
            </summary>
      <param name="context">The context.</param>
      <param name="typeOfData">The type of data.</param>
      <param name="filePath">The file path.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient.TransferQueueManager_MirroingStatusEvent(System.Object,EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs)">
      <summary>
            Handles the MirroingStatusEvent event of the TransferQueueManager control.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:EPiServer.MirroringService.MirroringTransferProtocol.Common.MirroringStatusEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient.CreateMirroringDataTransfer">
      <summary>
            Creates the mirroring data transfer if it is configuerd.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient.CreateInitializeData(System.Guid)">
      <summary>
            Creates the initialize data.
            </summary>
      <param name="context">The context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferClient.GetMirroringData(System.Guid)">
      <summary>
            Gets the mirroring data.
            </summary>
      <param name="context">The context.</param>
      <returns>
      </returns>
    </member>
    <member name="E:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy._channelFactoryCreating">
      <summary>
            Occurs when [_channel factory creating] it is common to be fired in the WCF Certificate configueration .
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy._mirroringDataTransferProxy">
      <summary>
            The WCF Channel
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy._mirroringDataTransferChannel">
      <summary>
            The WCF Channel Factory
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy._custommirroringDataTransferChannel">
      <summary>
            The customer channel factory. It's be substituted with the _mirroringDataTransferChannel
            It uses when the Cetificate uses
            </summary>
    </member>
    <member name="F:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy._proxyUserName">
      <summary>
            Application credentials
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.SetMirroringDataTransferChannel">
      <summary>
            Creates the mirroringDataTransferChannel and sets the correct endpoint address
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.EndpointExists">
      <summary>
            Checks if the endpoint is defined in the configuration file
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.CreateChannelFactory">
      <summary>
            Creates the channel factory.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.SetProxyCredentials">
      <summary>
            Sets the proxy credentials.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.Inited">
      <summary>
            Initeds this instance.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.CloseCommunication">
      <summary>
            Closes the communication.
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.HandleCommunicationException(System.ServiceModel.CommunicationException)">
      <summary>
            Handles the communication exception.
            </summary>
      <param name="communicationEx">The communication ex.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.HandleApplicationException(System.ServiceModel.FaultException)">
      <summary>
            Handles the appplication exception.
            </summary>
      <param name="faultException">The fault exception.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.HandleException(System.Exception)">
      <summary>
            Handles the exception.
            </summary>
      <param name="ex">The ex.</param>
    </member>
    <member name="E:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.ChannelFactoryCreating">
      <summary>
            Occurs when [channel factory creating].
            </summary>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.MirroringRecieverChannel_Faulted(System.Object,System.EventArgs)">
      <summary>
            Handles the Faulted event of the RemoteProviderChannel control.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.MirroringRecieverChannel_Closed(System.Object,System.EventArgs)">
      <summary>
            Handles the Closed event of the RemoteProviderChannel control.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.MirroringService.MirroringTransferProtocol.WCF.MirroringTransferProxy.GetCommunicationState">
      <summary>
            Gets the state of the communication.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.ClientScript.ClientScriptUtility">
      <summary>
            Contains common helper methods for client script generation
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.ClientScriptUtility.ToScriptSafeString(System.String)">
      <summary>
            Make a string safe to be embedded into a script block, by replacing any characters that would
            invalidate the script with script-safe characters. 
            </summary>
      <param name="s">Text that needs to be script-safe</param>
      <returns>Script-safe text</returns>
    </member>
    <member name="M:EPiServer.ClientScript.ClientScriptUtility.ToScriptSafeIdentifier(System.String)">
      <summary>
            Make string safe to be used as a identifier in a script block, by replacing any characters that would
            invalidate the script with script-safe characters. 
            </summary>
      <param name="s">String that needs to be script-safe</param>
      <returns>Script-safe identifier</returns>
    </member>
    <member name="M:EPiServer.ClientScript.ClientScriptUtility.FindControlRecursive(System.Web.UI.Control,System.String)">
      <summary>
            Find a control by its id in our NamingContainer or any parent NamingContainer
            </summary>
      <param name="baseControl">Control</param>
      <param name="controlId">Id of the control to find</param>
      <returns>A reference to the control or null if no matching control</returns>
    </member>
    <member name="M:EPiServer.ClientScript.ClientScriptUtility.GenerateClientFunctionStub(System.String)">
      <summary>
            Creates a anonymous javascript function from the passed string.
            </summary>
      <param name="functionBody">The javascript statement used as body for the created function.</param>
      <returns>A string containing a javascript function returning the result of the passed function body.</returns>
    </member>
    <member name="M:EPiServer.ClientScript.ClientScriptUtility.RegisterClientScriptFile(System.Web.UI.Page,System.String,System.String)">
      <summary>
            Helper method to register a client script file. If the method is called multiple times using
            the same key, only a single instance of the file is registered.
            </summary>
      <param name="page">Page</param>
      <param name="key">The registration key used to register the file.</param>
      <param name="rootRelativePath">The script file that should be referenced</param>
    </member>
    <member name="M:EPiServer.ClientScript.ClientScriptUtility.RegisterClientScriptFile(System.Web.UI.Page,System.String)">
      <summary>
            Helper method to register a client script file. If the method is called multiple times using
            the same key, only a single instance of the file is registered.
            </summary>
      <param name="page">The page.</param>
      <param name="rootRelativePath">The root relative path.</param>
      <remarks>The relativePath will be used as the unique script key.</remarks>
    </member>
    <member name="M:EPiServer.ClientScript.ClientScriptUtility.RegisterDialogSupportScripts(System.Web.UI.Page)">
      <summary>
            Registers the client scripts required for dialog support. 
            system.aspx, system.js, episerverscriptmanager.js and dialog.js
            </summary>
      <param name="page">The page where the scripts ar registered.</param>
    </member>
    <member name="T:EPiServer.ClientScript.Events.AlertEvent">
      <summary>
            Displays a client side alert box for when the specified event occurs on the target control
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.Events.AlertEvent.#ctor(EPiServer.ClientScript.EventType)">
      <summary>
            Create a new Alert dialog event
            </summary>
      <param name="eventType">The client side event to show the alert dialog for</param>
    </member>
    <member name="M:EPiServer.ClientScript.Events.AlertEvent.#ctor(EPiServer.ClientScript.EventType,System.String)">
      <summary>
            Create a new Alert dialog event with the alert message specified
            </summary>
      <param name="eventType">The client side event to show the alert dialog for</param>
      <param name="message">Message shown in the alert dialog</param>
    </member>
    <member name="M:EPiServer.ClientScript.Events.AlertEvent.#ctor(EPiServer.ClientScript.EventType,System.String,System.String)">
      <summary>
            Create a new Alert dialog event with alert message and a client side conditional statement specified
            </summary>
      <param name="eventType">The client side event to show the confirmation dialog for</param>
      <param name="message">Message shown in the alert dialog</param>
      <param name="condition">Client script conditional statement used to decide whether the alert dialog is shown.</param>
      <example><![CDATA[
            AlertEvent alertEvent = new AlertEvent(EventType.Click, 
            "Hello World!", "document.getElementById('myCheckbox').checked == true")
            ]]></example>
    </member>
    <member name="P:EPiServer.ClientScript.Events.AlertEvent.AlertMessage">
      <summary>
            Message shown in the alert dialog
            </summary>
      <remarks>
            Client script escape characters will be escaped before the string is emitted to the client.
            </remarks>
    </member>
    <member name="P:EPiServer.ClientScript.Events.AlertEvent.AlertCondition">
      <summary>
            Client script conditional statement used to decide whether the alert dialog is shown.
            </summary>
      <remarks>If the statement evaluates to true the confirmation dialog is shown otherwise the dialog will be supressed.</remarks>
      <example>
        <code>
            confirmEvent.ConfirmCondition = "document.getElementById('myCheckbox').checked == true";
            </code>
      </example>
    </member>
    <member name="M:EPiServer.ClientScript.Events.AlertEvent.AttachEvent(EPiServer.ClientScript.ScriptManager,System.String)">
      <summary>
            Attaches the alert dialog event to the supplied script manager
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.Events.ConfirmEvent">
      <summary>
            Displays a client side confirmation dialog a client event
            </summary>
      <example> 
            Create a client side post confirmation event handler which takes an event argument and the confirmation result as parameters.
            <code><![CDATA[
            <script type="text/javascript">
            function postConfirm(e, confirmResult){
                if (confirmResult==true)
                    alert("The user confirmed");
            }
            <script>
            ]]></code>
            Create a confirm event in C# with confirm condition which will be run before the confirmation dialog is shown 
            and a post confirm function reference run once the user has either pressed "OK" or "Cancel" in the confirmation dialog.
            <code>
            ConfirmEvent confirmEvent = new ConfirmEvent(EventType.Click, 
                "Do you really want to delete this item?", 
                "document.getElementById('myCheckbox').checked == true", "postConfirm")
            
            ScriptManager.AddEventListener(myControl, confirmEvent);
            </code></example>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ConfirmEvent.#ctor(EPiServer.ClientScript.EventType)">
      <summary>
            Create a new Confirmation dialog event
            </summary>
      <param name="eventType">The client side event to show the confirmation dialog for</param>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ConfirmEvent.#ctor(EPiServer.ClientScript.EventType,System.String)">
      <summary>
            Create a new Confirmation dialog event
            </summary>
      <param name="eventType">The client side event to show the confirmation dialog for</param>
      <param name="confirmMessage">Confirmation message shown in the confirmation dialog</param>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ConfirmEvent.#ctor(EPiServer.ClientScript.EventType,System.String,System.String)">
      <summary>
            Create a new Confirmation dialog event
            </summary>
      <param name="eventType">The client side event to show the confirmation dialog for</param>
      <param name="confirmMessage">Confirmation message shown in the confirmation dialog</param>
      <param name="confirmCondition">Client script conditional statement used to decide whether the confirmation dialog is shown.</param>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ConfirmEvent.#ctor(EPiServer.ClientScript.EventType,System.String,System.String,System.String)">
      <summary>
            Create a new Confirmation dialog event
            </summary>
      <param name="eventType">The client side event to show the confirmation dialog for</param>
      <param name="confirmMessage">Confirmation message shown in the confirmation dialog</param>
      <param name="confirmCondition">Client script conditional statement used to decide whether the confirmation dialog is shown.</param>
      <param name="postConfirmHandler">The name of a client script function or an inluine function to be executed after the confirmation dialog is dismissed.</param>
    </member>
    <member name="P:EPiServer.ClientScript.Events.ConfirmEvent.ConfirmMessage">
      <summary>
            Confirmation message shown in the confirmation dialog
            </summary>
      <remarks>
            Client script escape characters will be escaped before the string is emitted to the client.
            </remarks>
      <value>Returns <see cref="F:System.String.Empty" /> if undefined or set to null.</value>
    </member>
    <member name="P:EPiServer.ClientScript.Events.ConfirmEvent.ConfirmCondition">
      <summary>
            Client script conditional statement used to decide whether the confirmation dialog is shown.
            </summary>
      <remarks>If the statement evaluates to true the confirmation dialog is shown otherwise the dialog will be supressed.</remarks>
      <example>
        <code>
            confirmEvent.ConfirmCondition = "document.getElementById('myCheckbox').checked == true";
            </code>
      </example>
      <value>Returns <see cref="F:System.String.Empty" /> if undefined or set to null.</value>
    </member>
    <member name="P:EPiServer.ClientScript.Events.ConfirmEvent.PostConfirmHandler">
      <summary>
            A client script method to run after the user has either clicked the confirmation dialog.
            </summary>
      <remarks>
            The method will be called in the same context as the confirmation dialog, 
            thus the "this" object will refer to the element that triggered the event.
            The method signature should be 
            <code>
            function postConfirmFunction(e, confirmResult) 
            {
                // Code...
            }
            </code>
            where "e" is the event object and "confirmtResult" is the confirmation result.
            </remarks>
      <value>Returns <see cref="F:System.String.Empty" /> if undefined or set to null.</value>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ConfirmEvent.AttachEvent(EPiServer.ClientScript.ScriptManager,System.String)">
      <summary>
            Attaches the confirmation dialog event to the supplied script manager
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.Events.CustomEvent">
      <summary>
            Abstract base class for client side event handlers
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.Events.CustomEvent.#ctor(EPiServer.ClientScript.EventType)">
      <summary>
            Create a new custom event
            </summary>
      <param name="eventType">The event to show confirmation dialog for</param>
    </member>
    <member name="M:EPiServer.ClientScript.Events.CustomEvent.#ctor(EPiServer.ClientScript.EventType,System.String)">
      <summary>
            Create a new custom event
            </summary>
      <param name="eventType">The event to show confirmation dialog for</param>
      <param name="eventHandler">The event handler.</param>
    </member>
    <member name="P:EPiServer.ClientScript.Events.CustomEvent.EventHandler">
      <summary>
            Confirmation message shown in the confirmation dialog
            </summary>
      <value>Returns <see cref="F:System.String.Empty" /> if undefined or set to null.</value>
    </member>
    <member name="M:EPiServer.ClientScript.Events.CustomEvent.AttachEvent(EPiServer.ClientScript.ScriptManager,System.String)">
      <summary>
            Attaches the confirmation dialog event to the supplied script manager
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.Events.DisablePageLeaveEvent">
      <summary>
            DisablePageLeaveEvent is used to suppress the warning shown by <see cref="T:EPiServer.ClientScript.Events.PageLeaveCheckEvent" /> 
            when a page containing changed input fields is about to be unloaded.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.Events.DisablePageLeaveEvent.#ctor(EPiServer.ClientScript.EventType)">
      <summary>
            Create a new DisablePageLeaveEvent event
            </summary>
      <param name="eventType">The type of event on where we remove PageLeaveEvent</param>
    </member>
    <member name="M:EPiServer.ClientScript.Events.DisablePageLeaveEvent.AttachEvent(EPiServer.ClientScript.ScriptManager,System.String)">
      <summary>
            Attaches the DisablePageLeaveEvent event to the supplied script manager
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.Events.EventBase">
      <summary>
            Abstract base class for client side event handlers
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.Events.EventBase.#ctor(EPiServer.ClientScript.EventType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ClientScript.Events.EventBase" /> class.
            </summary>
      <param name="eventType">The client side event for which the event is triggered..</param>
    </member>
    <member name="P:EPiServer.ClientScript.Events.EventBase.EventType">
      <summary>
            The client side event for which the event is triggered.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.Events.EventBase.AttachEvent(EPiServer.ClientScript.ScriptManager,System.String)">
      <summary>
            AttachEvent is responsible for adding the event to the scriptmanager.
            This method must be overridden by all control developers inheriting this class.
            </summary>
      <param name="scriptManager">The <see cref="T:EPiServer.ClientScript.ScriptManager" /> to create the events in.</param>
      <param name="clientId">The control that will raise the event</param>
    </member>
    <member name="T:EPiServer.ClientScript.Events.PageLeaveCheckEvent">
      <summary>
            Attaches to the window load event of the client and initializes change listeners for input fields.
            If input fields has changed when the page is about to be unloaded a confirm dialog is shown to notify the user about unsaved changes.
            By using the <see cref="T:EPiServer.ClientScript.Events.DisablePageLeaveEvent" /> event the leave dialog can be supressed.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.Events.PageLeaveCheckEvent.#ctor">
      <summary>
            Creates a new empty PageLeaveCheckEvent
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.Events.PageLeaveCheckEvent.#ctor(System.String)">
      <summary>
            Creates a new PageLeaveCheckEvent with the page leave message set
            </summary>
      <param name="pageLeaveMessage">The message shown when a user leaves a page with unsaved changes</param>
    </member>
    <member name="P:EPiServer.ClientScript.Events.PageLeaveCheckEvent.PageLeaveMessage">
      <summary>
            The message shown when a user leaves a page with unsaved changes
            </summary>
      <value>Returns <see cref="F:System.String.Empty" /> if undefined or set to null.</value>
    </member>
    <member name="P:EPiServer.ClientScript.Events.PageLeaveCheckEvent.EventType">
      <summary>
            The client side event for which the event is triggered.
            </summary>
      <remarks>Always returns <see cref="F:EPiServer.ClientScript.EventType.Load" />.</remarks>
    </member>
    <member name="M:EPiServer.ClientScript.Events.PageLeaveCheckEvent.AttachEvent(EPiServer.ClientScript.ScriptManager,System.String)">
      <summary>
            Attaches the event to the <see cref="T:EPiServer.ClientScript.ScriptManager" /></summary>
      <param name="scriptManager">Reference to an ScriptManager instance</param>
      <param name="clientId">The control that will raise the event</param>
    </member>
    <member name="T:EPiServer.ClientScript.Events.ReloadPageEvent">
      <summary>
            Registers a client side event that reloads the page in the specified window when the event occurs.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ReloadPageEvent.#ctor">
      <summary>
            Create a new Reload page event.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ReloadPageEvent.#ctor(EPiServer.ClientScript.EventType)">
      <summary>
            Create a new Reload page event attached to the specified client side event type.
            </summary>
      <param name="eventType">Type of client side event. For available types, see <see cref="T:EPiServer.ClientScript.EventType" /></param>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ReloadPageEvent.#ctor(EPiServer.ClientScript.EventType,System.String)">
      <summary>
            Create a new Reload page event attached to the specified client side event type and whick reloads the page in the specified windowReference.
            </summary>
      <param name="eventType">The client side event to reload page for.</param>
      <param name="windowReference">The client side window reference to reload <example>window.top</example>.</param>
    </member>
    <member name="P:EPiServer.ClientScript.Events.ReloadPageEvent.WindowReference">
      <summary>
            The client side window reference to reload.
            </summary>
      <value>Default: window</value>
      <example>window.top</example>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ReloadPageEvent.AttachEvent(EPiServer.ClientScript.ScriptManager,System.String)">
      <summary>
            Attaches the ReloadPageEvent event to the supplied script manager
            </summary>
      <param name="scriptManager">The <see cref="T:EPiServer.ClientScript.ScriptManager" /> to create the events in.</param>
      <param name="clientId">The id of the control that will raise the event</param>
    </member>
    <member name="T:EPiServer.ClientScript.Events.SetFocusEvent">
      <summary>
            This event is used to give a control focus and/or select the controls text content.
            </summary>
      <remarks>Default behaviour is to give focus to the control but not select its text content.</remarks>
    </member>
    <member name="M:EPiServer.ClientScript.Events.SetFocusEvent.#ctor(EPiServer.ClientScript.EventType,System.Web.UI.Control)">
      <summary>
            Creates a new focus event. When the event is run the element will be focused.
            </summary>
      <param name="eventType">The client side event when the focus occurs</param>
      <param name="control">The control to focus when the event is triggered</param>
    </member>
    <member name="M:EPiServer.ClientScript.Events.SetFocusEvent.#ctor(EPiServer.ClientScript.EventType,System.String)">
      <summary>
            Creates a new focus event. When the event is run the element will be focused.
            </summary>
      <param name="eventType">The client side event when the focus occurs</param>
      <param name="controlId">Client side id of the control to focus</param>
    </member>
    <member name="M:EPiServer.ClientScript.Events.SetFocusEvent.#ctor(EPiServer.ClientScript.EventType,System.String,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ClientScript.Events.SetFocusEvent" /> class.
            </summary>
      <param name="eventType">The client side event when the focus occurs</param>
      <param name="controlId">Client side id of the control to focus</param>
      <param name="focus">if set to <c>true</c> the control will be focused</param>
      <param name="select">if set to <c>true</c> the control text will be selected</param>
    </member>
    <member name="P:EPiServer.ClientScript.Events.SetFocusEvent.Select">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.ClientScript.Events.SetFocusEvent" /> will select the text of the control.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.Events.SetFocusEvent.Focus">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.ClientScript.Events.SetFocusEvent" /> will give focus to the control.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.Events.SetFocusEvent.TargetControlClientId">
      <summary>
            Gets or sets the client side id of the target control. This is the control which will receive focus and/or select when the event occurs.
            </summary>
      <value>Returns <see cref="F:System.String.Empty" /> if undefined or set to null.</value>
    </member>
    <member name="M:EPiServer.ClientScript.Events.SetFocusEvent.AttachEvent(EPiServer.ClientScript.ScriptManager,System.String)">
      <summary>
            AttachEvent is responsible for adding the event to the scriptmanager.
            This method must be overridden by all control developers inheriting this class.
            </summary>
      <param name="scriptManager">The <see cref="T:EPiServer.ClientScript.ScriptManager" /> to create the events in.</param>
      <param name="clientId">Client side id of the element that will raise the event</param>
    </member>
    <member name="T:EPiServer.ClientScript.Events.ToggleDisplayEvent">
      <summary>
            Displays a client side confirmation dialog a client event
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ToggleDisplayEvent.#ctor(EPiServer.ClientScript.EventType,System.String,System.Boolean,System.String,System.Boolean)">
      <summary>
            Create a new Toggle display event to Show/Hide Elements
            </summary>
      <param name="eventType">The event to show confirmation dialog for</param>
      <param name="toggleNodeId">The toggle node id.</param>
      <param name="toggleEnabled">if set to <c>true</c> [toggle enabled].</param>
      <param name="toggleGroupName">Name of the toggle group.</param>
      <param name="toggleNodeVisible">if set to <c>true</c> [toggle node visible].</param>
    </member>
    <member name="P:EPiServer.ClientScript.Events.ToggleDisplayEvent.ToggleNodeId">
      <summary>
            Gets or sets the id of the node to Show/Hide.
            </summary>
      <value>The toggle node id.</value>
    </member>
    <member name="P:EPiServer.ClientScript.Events.ToggleDisplayEvent.ToggleNodeVisible">
      <summary>
            Gets or sets a value indicating whether the node to toggle is visible when page is loaded.
            </summary>
      <value>
        <c>true</c> if [toggle node visible]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.ClientScript.Events.ToggleDisplayEvent.ToggleEnabled">
      <summary>
            Gets or sets a value indicating whether its possible to both show and hide the toggleNode.
            </summary>
      <value>
        <c>true</c> if [toggle enabled]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.ClientScript.Events.ToggleDisplayEvent.ToggleGroupName">
      <summary>
            Gets or sets the name of the group that this toggleNode and event is a member of.
            </summary>
      <value>The name of the toggle group.</value>
    </member>
    <member name="M:EPiServer.ClientScript.Events.ToggleDisplayEvent.AttachEvent(EPiServer.ClientScript.ScriptManager,System.String)">
      <summary>
            Attaches the ToggleDisplayEvent and required properties to the supplied script manager
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.EventType">
      <summary>
            Client-side events which the <see cref="T:EPiServer.ClientScript.ScriptManager" /> can attach listeners for
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.None">
      <summary>
            No event
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.Blur">
      <summary>
            The blur event occurs when an element or window loses focus.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.Change">
      <summary>
            The change event occurs when a control loses the input focus and its value has been modified since gaining focus.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.Click">
      <summary>
            The click event occurs when a mouse button is clicked.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.ContextMenu">
      <summary>
            The contextmenu event occurs when the user calls up a context menu.
            </summary>
      <remarks>
            Supported in some browsers by clicking right mouse button or by using keyboard shortcuts.
            </remarks>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.DblClick">
      <summary>
            The dblclick event occurs when the user quickly clicks the mouse twice.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.Focus">
      <summary>
            The focus event occurs when an element or window receives focus. Not all elements can get focus.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.KeyDown">
      <summary>
            The keydown event occurs when a user presses a keyboard key.
            </summary>
      <remarks>
            In theory representing a key being pressed. Not the same in all browsers.
            </remarks>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.KeyPress">
      <summary>
            The keypress event occurs when a user presses a key on the keyboard.
            </summary>
      <remarks>
            In theory representing a character being typed. Not the same in all browsers.
            </remarks>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.KeyUp">
      <summary>
            The keyup event occurs when a user releases a key that's been pressed.
            </summary>
      <remarks>
            In theory representing a key being released. Not the same in all browsers.
            </remarks>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.MouseDown">
      <summary>
            The mousedown event occurs when a mouse button is pressed.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.MouseMove">
      <summary>
            The mousemove event occurs whenever the mouse is moved.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.MouseOut">
      <summary>
            The mouseout event occurs when the mouse leaves the current element (specified by it's boundary points).
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.MouseOver">
      <summary>
            The mouseover event occurs when the mouse is within the current elements boundary points.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.MouseUp">
      <summary>
            The mouseup event occurs when the user releases the mouse button
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.Resize">
      <summary>
            The resize event occurs when an element or document view is resized.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.BeforeUnload">
      <summary>
            The beforeunload event occurs when unload event is raised and provides a way to prevent the unload.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.DragDrop">
      <summary>
            The dragdrop event occurs when a system item (file, shortcut, etc) is dropped into the window.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.Load">
      <summary>
            The load event occurs at the end of the document loading process when all images and sub content has been loaded.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.ReadyStateChange">
      <summary>
            The readystatechange event occurs when the readystate of a request changes.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.Scroll">
      <summary>
            The scroll event occurs when a windows scroll position is changed.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.Select">
      <summary>
            The select event occurs when some text is selected in a text field.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.Submit">
      <summary>
            The submit event occurs when a form is submitted.
            </summary>
    </member>
    <member name="F:EPiServer.ClientScript.EventType.Unload">
      <summary>
            The unload event is raised when the document is unloaded.
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.ISupportsScriptManager">
      <summary>
            Determines if a HTTP handler supports the <see cref="P:EPiServer.ClientScript.ISupportsScriptManager.ScriptManager" />, implemented for example by <see cref="T:EPiServer.PageBase" />.
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.ScriptManager">
      <summary>
            The ScriptManager class is a handler for client side scripts and settings for DOM objects.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.ScriptManager.ObjectSettings">
      <summary>
            Returns a dictionary for storage of object settings.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.ScriptManager.HasObjectSettings">
      <summary>
            Gets a value indicating whether this instance has object settings.
            </summary>
      <value>
        <c>true</c> if this instance has object settings; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.ClientScript.ScriptManager.ObjectEventListeners">
      <summary>
            Gets a dictionary of configured event listeners.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.ScriptManager.HasObjectEventListeners">
      <summary>
            Gets a value indicating whether this instance has event listeners.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.ScriptManager.IsAvailable">
      <summary>
            Returns true if the script manager is available for the executing page.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.ScriptManager.Current">
      <summary>
            Get a reference to the <see cref="T:EPiServer.ClientScript.ScriptManager" /> for the current page.
            </summary>
      <remarks>
            If the ScriptManger is not available an exception is thrown
            </remarks>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddSetting(System.Web.UI.Control,System.String,System.String)">
      <summary>
            Add a string setting for a <see cref="T:System.Web.UI.Control" /> to the controls script object
            </summary>
      <param name="control">The control to add setting for</param>
      <param name="name">Client side property name</param>
      <param name="value">Value of the added property</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddSetting(System.String,System.String,System.String)">
      <summary>
            Add a string setting for a client side object
            </summary>
      <param name="clientId">Client side property identifier</param>
      <param name="name">Client side property name</param>
      <param name="value">Value of the added property</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddSetting(System.Web.UI.Control,System.String,System.String,System.Boolean)">
      <summary>
            Adds a setting for a client side object.
            </summary>
      <param name="control">The control to add setting for</param>
      <param name="name">Client side property name</param>
      <param name="value">Value of the added property</param>
      <param name="valueAsObject">if set to <c>true</c> the value parameter will be generated as an object on the client.</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddSetting(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Adds a setting for a client side object.
            </summary>
      <param name="clientId">Client side identifier of the element to set the property for</param>
      <param name="name">Client side property name</param>
      <param name="value">Value of the added property</param>
      <param name="valueAsObject">if set to <c>true</c> the value parameter will be generated as an object on the client.</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddSetting(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Adds a setting for a client side object.
            </summary>
      <param name="domNode">The name of a DOM node or the qouted id of a DOM node</param>
      <param name="objectKey">Container key for the added setting</param>
      <param name="name">Client side property name</param>
      <param name="value">Value of the added property</param>
      <param name="valueAsObject">if set to <c>true</c> value will be outputted without being encoded.</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddSettingInternal(System.String,System.String,System.String,System.String)">
      <summary>
            Add a object property setting entry to the supplied settings collection.
            </summary>
      <param name="domNode">The DOM node.</param>
      <param name="objectKey">The object key.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property value.</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddEventListener(System.Web.UI.Control,EPiServer.ClientScript.Events.EventBase)">
      <summary>
            Add a client side event listener to a control
            </summary>
      <param name="control">The control to add an event listener for</param>
      <param name="scriptEvent">
      </param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddEventListener(System.String,EPiServer.ClientScript.Events.EventBase)">
      <summary>
            Add client side event listener to an element.
            </summary>
      <param name="domNode">The DOM node or id of a DOM node. If this parameter is the id of a DOM node the id must be qouted.</param>
      <param name="scriptEvent">The script event.</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddEventListener(System.Web.UI.Control,EPiServer.ClientScript.EventType,System.String)">
      <summary>
            Add a client side event listener as a function reference
            </summary>
      <param name="control">The control to add an event listener for</param>
      <param name="eventType">Type of the event.</param>
      <param name="eventHandler">Client side event function reference</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddEventListener(System.String,EPiServer.ClientScript.EventType,System.String)">
      <summary>
            Add a client side event listener as a function reference
            </summary>
      <param name="domNode">Name of the node to add an event for. If the name is an id the string must be qouted.</param>
      <param name="eventType">
      </param>
      <param name="eventHandler">Client side event function reference</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddEventListener(System.Web.UI.Control,System.String,System.String)">
      <summary>
            Add a custom client side event listener as a function reference
            </summary>
      <param name="control">The control to add an event listener for</param>
      <param name="eventName">Name of the client side event with the "on" prefix omitted</param>
      <param name="eventHandler">Client side event function reference</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddEventListener(System.String,System.String,System.String)">
      <summary>
            Add a custom client side event listener as a function reference
            </summary>
      <param name="domNode">Name of the node to add an event for. If the name is an id the string must be qouted.</param>
      <param name="eventName">Name of the client side event with the "on" prefix omitted</param>
      <param name="eventHandler">Client side event function reference</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AddEventListenerInternal(System.String,System.String,System.String)">
      <summary>
            Add a event listener to the <see cref="P:EPiServer.ClientScript.ScriptManager.ObjectEventListeners" /> hashtable
            </summary>
      <param name="domNode">qouted clientId or the name of DOM node</param>
      <param name="eventName">client side event name with the "on"-prefix omitted</param>
      <param name="eventHandler">name of client function</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.RegisterClientScriptBlocks(System.Web.UI.Page)">
      <summary>
            Appends clients scripts to the page. 
            This method is intended to be called from the page as late as possible in its life cycle
            </summary>
      <param name="page">The page instance to append scripts to</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.RenderClientScriptBlocks(System.IO.TextWriter,System.Boolean)">
      <summary>
            Renders the client script blocks to a <see cref="T:System.IO.TextWriter" />.
            </summary>
      <param name="writer">The writer to append script blocks to.</param>
      <param name="includeExecutor">If set, append a function which calls both setup property objects and setup events</param>
      <remarks>No surrounding script tags are emitted to the writer.</remarks>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.RenderClientScriptBlocks(System.IO.TextWriter)">
      <summary>
            Renders the client script blocks to a <see cref="T:System.IO.TextWriter" />.
            </summary>
      <param name="writer">The writer to append script blocks to.</param>
      <remarks>No surrounding script tags are emitted to the writer.</remarks>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AppendScriptSettings(System.IO.TextWriter,EPiServer.ClientScript.ScriptManager.SettingsDictionary)">
      <summary>
            Append client side script settings to the supplied StringBuilder instance.
            </summary>
      <param name="writer">The TextWriter to which the object settings are appended</param>
      <param name="settingsDictionary">An <see cref="T:EPiServer.ClientScript.ScriptManager.SettingsDictionary" /> instance to generate as script properties</param>
      <returns>Function name</returns>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AppendEventListeners(System.IO.TextWriter)">
      <summary>
            Register the event listener script block in the pages ClientScript handler
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.AppendExecutor(System.IO.TextWriter,System.String,System.String)">
      <summary>
            Appends the script executor function.
            </summary>
      <param name="writer">The writer.</param>
      <param name="eventsFn">The setup events function.</param>
      <param name="objectsFn">The setup object properties function.</param>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.RegisterClientScriptIncludes(System.Web.UI.Page)">
      <summary>
            Registers the dependant client script includes.
            </summary>
      <param name="page">A reference to the active page.</param>
    </member>
    <member name="T:EPiServer.ClientScript.ScriptManager.EventKeyValuePair">
      <summary>
            Struct for connecting client side events to event listener methods
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.EventKeyValuePair.#ctor(System.String,System.String)">
      <summary>
            Crete a new instance of EventKeyValuePair. 
            </summary>
      <param name="eventName">Name of the client side event to attach to</param>
      <param name="eventListener">Client side event listener function</param>
    </member>
    <member name="P:EPiServer.ClientScript.ScriptManager.EventKeyValuePair.EventName">
      <summary>
            Name of the client side event to connect to, for instance click or focus.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.ScriptManager.EventKeyValuePair.EventListener">
      <summary>
            Client side method to execute when the event occurs.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.EventKeyValuePair.GetHashCode">
      <summary>
            Get the hash code for the current instance
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.EventKeyValuePair.Equals(System.Object)">
      <summary>
            Return true if the EventName and EventListener of the supplied object instance is equal to the EventName and EventListener of this ObjectSettingPair.
            </summary>
      <param name="obj">Reference to an object instance</param>
      <returns>True if the current instance is equal to the supplied instance</returns>
    </member>
    <member name="T:EPiServer.ClientScript.ScriptManager.ObjectSettingPair">
      <summary>
            A client side setting containing a setting name and a setting value
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.ObjectSettingPair.#ctor(System.String,System.String)">
      <summary>
            Create a new name: value script setting
            </summary>
      <param name="name">Name of the setting</param>
      <param name="value">Value of the setting</param>
    </member>
    <member name="P:EPiServer.ClientScript.ScriptManager.ObjectSettingPair.Name">
      <summary>
            Name of the client side setting
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.ScriptManager.ObjectSettingPair.Value">
      <summary>
            Value of the client side setting
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.ObjectSettingPair.GetHashCode">
      <summary>
            Return a hash code for the current instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.ObjectSettingPair.Equals(System.Object)">
      <summary>
            Return true if the Name and Value of the supplied object instance is equal to the Name and Value of this ObjectSettingPair.
            </summary>
      <param name="obj">Reference to an object instance</param>
      <returns>True if the current instance is equal to the supplied instance</returns>
    </member>
    <member name="M:EPiServer.ClientScript.ScriptManager.ObjectSettingPair.ToString">
      <summary>
            Returns the name and value of the current instance.
            </summary>
      <returns>A string containing [Name]: [Value] of the instance.</returns>
    </member>
    <member name="T:EPiServer.ClientScript.ScriptManager.SettingsDictionary">
      <summary>
            Main script settings dictionary containing instances of NodeKeyDictionary
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.ScriptManager.NodeKeyDictionary">
      <summary>
            Dictionary with the base node object as key and a list of ObjectPair as value 
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.ScriptManager.ObjectSettingList">
      <summary>
            A list of node property names and property values
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptAlertEvent">
      <summary>
            Attaches a client side alert pop-up for the event and control specified
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptAlertEvent.CreateEvent">
      <summary>
            Create an instance of the event this web control represents.
            </summary>
      <returns>An <see cref="T:EPiServer.ClientScript.Events.EventBase" /> derived event instance.</returns>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptAlertEvent.AlertMessage">
      <summary>
            Get or set the message shown when the event is raised.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptAlertEvent.AlertCondition">
      <summary>
            Get or set a client side conditional statement which will indicate whether the alert dialog is shown or not
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptConfirmEvent">
      <summary>
            Attaches a client side confirmation pop-up for the event and control specified
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptConfirmEvent.CreateEvent">
      <summary>
            Create an instance of the event this web control represents.
            </summary>
      <returns>An <see cref="T:EPiServer.ClientScript.Events.EventBase" /> derived event instance.</returns>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptConfirmEvent.ConfirmMessage">
      <summary>
            Get or set the confirmation message shown when the event is raised.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptConfirmEvent.ConfirmCondition">
      <summary>
            Get or set a client side conditional statement which will indicate whether the confirmation dialog is shown or not
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptConfirmEvent.PostConfirmHandler">
      <summary>
            Gets or sets a client side function reference called after the confirmation dialog has been dismissed.
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptDisablePageLeaveEvent">
      <summary>
            Remove the page leave event that is added to window.beforeunload
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptDisablePageLeaveEvent.CreateEvent">
      <summary>
            Create an instance of the event this web control represents.
            </summary>
      <returns>An <see cref="T:EPiServer.ClientScript.Events.EventBase" /> derived event instance.</returns>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptEvent">
      <summary>
            Attaches a client side confirmation pop-up for the event and control specified
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptEvent.CreateEvent">
      <summary>
            Create an instance of the event this web control represents.
            </summary>
      <returns>An <see cref="T:EPiServer.ClientScript.Events.EventBase" /> derived event instance.</returns>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptEvent.EventHandler">
      <summary>
            Get or set the confirmation message shown when the event is raised.
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptEventBase">
      <summary>
            Base class for all client-side event controls
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptEventBase.EventType">
      <summary>
            Get or set the client side event to attach to.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptEventBase.EventTargetID">
      <summary>
            Id of the target control for the event listener.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptEventBase.EventTarget">
      <summary>
            Reference to the target control for the event
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptEventBase.EventTargetClientID">
      <summary>
            Event target reference to a DOM node using its client id.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptEventBase.EventTargetClientNode">
      <summary>
            Event target reference to a named DOM node.
            </summary>
      <example>
            window, document
            </example>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptEventBase.CommonSettingsControlID">
      <summary>
            Id of a control used for common settings when traversing the settings hierachy.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptEventBase.OnPreRender(System.EventArgs)">
      <summary>
            Attaches the event to the <see cref="T:EPiServer.ClientScript.ScriptManager" /> event listener list
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptEventBase.GetTargetControl">
      <summary>
            Get a reference to the target control
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptEventBase.CreateEvent">
      <summary>
            Create an event to be added to the <see cref="T:EPiServer.ClientScript.ScriptManager" />. This method must be overridden by all implementors.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptReloadPageEvent">
      <summary>
            Attaches a client side reload window for the event and control specified
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptReloadPageEvent.CreateEvent">
      <summary>
            Create an instance of the event this web control represents.
            </summary>
      <returns>An <see cref="T:EPiServer.ClientScript.Events.EventBase" /> derived event instance.</returns>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptReloadPageEvent.WindowReference">
      <summary>
            Get or set the window reference the event reloads.
            If not set reloads the window where the event is raised.
            </summary>
      <example>window.top</example>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptSetFocusEvent">
      <summary>
            Attaches a client side script to set focus or select the text of the element suplied as Focus target
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSetFocusEvent.CreateEvent">
      <summary>
            Create an instance of the event this web control represents.
            </summary>
      <returns>An <see cref="T:EPiServer.ClientScript.Events.EventBase" /> derived event instance.</returns>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSetFocusEvent.FocusControlID">
      <summary>
            Gets or sets the id of the element to give focus.
            </summary>
      <value>The id of the control to focus</value>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSetFocusEvent.SetFocus">
      <summary>
            Gets or sets a value indicating whether to give the focus target element focus.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSetFocusEvent.SetSelect">
      <summary>
            Gets or sets a value indicating whether to select the text of the focus target element.
            </summary>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptSettingItem">
      <summary>
            Represents an client side script setting in a <see cref="T:EPiServer.ClientScript.WebControls.ScriptSettings" /> control.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItem.#ctor">
      <summary>
            Create an empty ScriptSettingItem
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItem.#ctor(System.String,System.String)">
      <summary>
            Create a new ScriptSettingItem with the specified name and text.
            </summary>
      <param name="name">Name of the client side setting</param>
      <param name="text">text value of the client side setting</param>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItem.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Create a new ScriptSettingItem with the specified name and text.
            </summary>
      <param name="name">Name of the client side setting</param>
      <param name="text">text value of the client side setting</param>
      <param name="textAsObject">Treat the text parameter as an object when generated to the client</param>
      <param name="enabled">Indicates if the ScriptSettingItem is enabled.</param>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettingItem.Enabled">
      <summary>
            Get/set the items e 
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettingItem.TextAsObject">
      <summary>
            Whether the value of the text parameter is generated as an object or as text.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettingItem.Text">
      <summary>
            The text generated to the client
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettingItem.Name">
      <summary>
            The name of the setting generated to the client.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItem.LoadViewState(System.Object)">
      <summary>
            Restores the control state from view state information
            </summary>
      <param name="state">State information</param>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItem.SaveViewState">
      <summary>
            Get view state changes that have occured since last postback.
            </summary>
      <returns>The controls current view state</returns>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItem.TrackViewState">
      <summary>
            Starts tracking of the controls view state.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettingItem.IsTrackingViewState">
      <summary>
            Whether the control is tracking its view state
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItem.SetDirty">
      <summary>
            Set the controls view state information as dirty.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItem.GetHashCode">
      <summary>
            Get the controls hash code
            </summary>
      <returns>The items hash code</returns>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection">
      <summary>
            A collection of ScriptSettingItems with built-in storing and restoring of items to and from view state.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.GetKnownTypes">
      <summary>
            Get an array of types recognized by this collection
            </summary>
      <returns>An array of types</returns>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.CreateKnownType(System.Int32)">
      <summary>
            Create an instance of known type for the collection
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.SetDirtyObject(System.Object)">
      <summary>
            Set the viewstate of an object in the collection dirty 
            </summary>
      <param name="o">
      </param>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.OnValidate(System.Object)">
      <summary>
            Validates that items added are valid types for this collection. 
            Throws an <see cref="T:System.ArgumentException" /> if the item are not recognized as a valid type.
            </summary>
      <param name="o">The added item.</param>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.Add(EPiServer.ClientScript.WebControls.ScriptSettingItem)">
      <summary>
            Add an item to the collection
            </summary>
      <param name="item">
      </param>
      <returns>The position where the item was inserted</returns>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.Insert(System.Int32,EPiServer.ClientScript.WebControls.ScriptSettingItem)">
      <summary>
            Insert an item in the collection
            </summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="item">The <see cref="T:EPiServer.ClientScript.WebControls.ScriptSettingItem" /> to insert in the collection</param>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.Remove(EPiServer.ClientScript.WebControls.ScriptSettingItem)">
      <summary>
            Remove a <see cref="T:EPiServer.ClientScript.WebControls.ScriptSettingItem" /> from the collection
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.RemoveAt(System.Int32)">
      <summary>
            Remove an item at the specified index from the collection.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set. </param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.Contains(EPiServer.ClientScript.WebControls.ScriptSettingItem)">
      <summary>
            Returns tru if the collection contains the specific item.
            </summary>
      <param name="item">Item to look for</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.CopyTo(EPiServer.ClientScript.WebControls.ScriptSettingItem[],System.Int32)">
      <summary>
            Copies the collection to an array
            </summary>
      <param name="array">The <see cref="T:System.Array" /> used as destination.</param>
      <param name="arrayIndex">The start index in the array when copying</param>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.IsReadOnly">
      <summary>
            Returns a value indicating whether the collection is read only
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettingItemCollection.IndexOf(EPiServer.ClientScript.WebControls.ScriptSettingItem)">
      <summary>
            Returns the zero-based index of an item in the collection
            </summary>
      <param name="item">The item to look for</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptSettings">
      <summary>
            Sets script object properties for a control on the page
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettings.OnPreRender(System.EventArgs)">
      <summary>
            Adds property items to the <see cref="T:EPiServer.ClientScript.ScriptManager" /></summary>
      <param name="e">
      </param>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettings.AddScriptSetting(EPiServer.ClientScript.ScriptManager,System.Web.UI.Control,System.String,System.String,System.Boolean)">
      <summary>
            Add a client script setting to the ScriptManager. 
            If is this control the settings are registered as stand-alone settings in the context of this control. 
            If targetControl is a control other than this the settings is registered for the targetContol control.
            </summary>
      <param name="scriptManager">Reference to an ScriptManager instance.</param>
      <param name="targetControl">
      </param>
      <param name="name">
      </param>
      <param name="value">
      </param>
      <param name="isObjectSetting">
      </param>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettings.HasItems">
      <summary>
            Check if any child items exist without instantiating the item list
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettings.Items">
      <summary>
            A List containing custom script properties
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettings.HasAttributes">
      <summary>
            Gets a value indicating whether this instance has attributes.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettings.Attributes">
      <summary>
            Gets a dictionary containing script setting attributes set for this control.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettings.TargetControlID">
      <summary>
            Id of the control for which the supplied settings are registered for.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettings.TargetControlClientID">
      <summary>
            Client Side Id of the control for which the supplied settings are registered for.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettings.CommonSettingsControlID">
      <summary>
            Id of a control used for common settings when traversing the settings hierachy.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettings.Name">
      <summary>
            Sets the client side name setting to the specified string
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettings.Description">
      <summary>
            Sets the client side description setting to the specified string
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptSettings.ConfirmMessage">
      <summary>
            Sets the message used for confirm dialogs the specified string
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettings.SaveViewState">
      <summary>
            Get view state changes that have occured since last postback.
            </summary>
      <returns>The controls current view state</returns>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettings.LoadViewState(System.Object)">
      <summary>
            Restores the control state from view state information
            </summary>
      <param name="savedState">State information</param>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettings.TrackViewState">
      <summary>
            Starts tracking of the control changes in view state.
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettings.GetAttribute(System.String)">
      <summary>
            Gets the value of an script setting property.
            </summary>
      <param name="key">A <see cref="T:System.String"></see> that represents the name of the server control attribute.</param>
      <returns>The value of the specified attribute or <see cref="F:System.String.Empty" /> if the attribute is not set.</returns>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptSettings.SetAttribute(System.String,System.String)">
      <summary>
            Sets an script setting property and its value for the control.
            </summary>
      <param name="key">The name of the attribute to be set.</param>
      <param name="value">The value assigned to the attribute.</param>
    </member>
    <member name="T:EPiServer.ClientScript.WebControls.ScriptToggleDisplayEvent">
      <summary>
            Attaches a client side confirmation pop-up for the event and control specified
            </summary>
    </member>
    <member name="M:EPiServer.ClientScript.WebControls.ScriptToggleDisplayEvent.CreateEvent">
      <summary>
            Create an instance of the event this web control represents.
            </summary>
      <returns>An <see cref="T:EPiServer.ClientScript.Events.EventBase" /> derived event instance.</returns>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptToggleDisplayEvent.ToggleNodeId">
      <summary>
            Get or set the id of the node to toggle display for.
            </summary>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptToggleDisplayEvent.ToggleNodeVisible">
      <summary>
            Gets or sets a value indicating whether the node to toggle (ToggleNodeId) is visible when page is loaded.
            </summary>
      <value>
        <c>true</c> if [toggle node visible]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptToggleDisplayEvent.ToggleEnabled">
      <summary>
            Gets or sets a value indicating whether it's possible to both show and hide the node.
            </summary>
      <value>
        <c>true</c> if [toggle enabled]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.ClientScript.WebControls.ScriptToggleDisplayEvent.ToggleGroupName">
      <summary>
            Gets or sets if the event should toggle a group of nodes where one node at a time could be visible.
            </summary>
    </member>
    <member name="T:EPiServer.Core.AmbiguousTypeException">
      <summary>
            Represents errors that occur when the value of a required <see cref="T:System.Type" /> argument cannot be resolved from context.
            </summary>
    </member>
    <member name="M:EPiServer.Core.AmbiguousTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Core.AmbiguousTypeException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.AmbiguousTypeException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.AmbiguousTypeException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.AmbiguousTypeException" /> class with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:EPiServer.Core.AmbiguousTypeException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.AmbiguousTypeException" /> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The inner exception that is the cause of the current exception.</param>
    </member>
    <member name="T:EPiServer.Core.ExceptionManager">
      <summary>
            All unhandled exceptions are routed through this class when EPiServer error handling is enabled.
            </summary>
    </member>
    <member name="M:EPiServer.Core.ExceptionManager.RenderHttpRuntimeError(System.Exception)">
      <summary>
            Renders an error message to the user based on the exception.
            </summary>
      <param name="exception">The exception</param>
      <remarks>
            The actual exception message may not be rendered depending on the current user access rights. 
            </remarks>
    </member>
    <member name="M:EPiServer.Core.ExceptionManager.EPiServer#Core#IExceptionManager#RenderHttpRuntimeError(System.Exception)">
      <summary>
            Renders an error message to the user based on the exception.
            </summary>
      <param name="exception">The exception</param>
      <remarks>
            The actual exception message may not be rendered depending on the current user access rights.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.Html.AppendOnlyBuilder">
      <summary>
            A very simple implementatino of a StringBuilder that only supports Append operations. It outperforms
            the regular System.Text.StringBuilder in the Append-only scenario.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.AppendOnlyBuilder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.AppendOnlyBuilder" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.AppendOnlyBuilder.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.AppendOnlyBuilder" /> class.
            </summary>
      <param name="initialCapacity">The initial capacity of the builder.</param>
    </member>
    <member name="M:EPiServer.Core.Html.AppendOnlyBuilder.Append(System.Char)">
      <summary>
            Appends the specified character to the builder.
            </summary>
      <param name="ch">The character to append.</param>
      <returns>The current AppendOnlyBuilder instance.</returns>
    </member>
    <member name="M:EPiServer.Core.Html.AppendOnlyBuilder.Append(System.String)">
      <summary>
            Appends the specified string to the builder.
            </summary>
      <param name="s">The string to append.</param>
      <returns>The current AppendOnlyBuilder instance.</returns>
    </member>
    <member name="P:EPiServer.Core.Html.AppendOnlyBuilder.Length">
      <summary>
            Gets or sets the length of the builder.
            </summary>
      <value>The length.</value>
      <remarks>
            It is cheaper re-use an existing instance, by setting the Length to 0, than to create a new AppendOnlyBuilder instance.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.Html.AppendOnlyBuilder.LastChar">
      <summary>
            Gets the last character added to this instance.
            </summary>
      <value>The last character.</value>
      <remarks>
            If the instance is empty (Length is 0), character with value 0 is returned.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.Html.AppendOnlyBuilder.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="T:EPiServer.Core.Html.CloneableNameTable">
      <internal-API />
    </member>
    <member name="T:EPiServer.Core.Html.Constants">
      <summary>
            A class to store constants used for HTML parsing and rendering
            </summary>
    </member>
    <member name="F:EPiServer.Core.Html.Constants.REGEX_PCHAR_RFC3986">
      <summary>
            A regular expression that almost (we do not allow single quote "'") matches the pchar definition from RFC3986, i e any valid cahacter in a path part of a URI.
            </summary>
    </member>
    <member name="F:EPiServer.Core.Html.Constants.REGEX_EPISERVER_LINK">
      <summary>
            A regular expression to be used to identify an EPiServer link
            </summary>
    </member>
    <member name="T:EPiServer.Core.Html.HtmlParser">
      <summary>
            Parses any html into a valid xhtml document.
            </summary>
      <remarks>Results either in pure text or XmlDocument</remarks>
    </member>
    <member name="M:EPiServer.Core.Html.HtmlParser.#ctor(System.String)">
      <summary>
            Parses a string containing Html and converts it to Xhtml that can be returned
            as a string or a XmlDocument.
            </summary>
      <param name="htmlToIndex">The Html that will be parsed.</param>
    </member>
    <member name="M:EPiServer.Core.Html.HtmlParser.#ctor(System.String,System.Boolean)">
      <summary>
            Parses a string containing Html and converts it to Xhtml that can be returned
            as a string or a XmlDocument.
            </summary>
      <param name="htmlToIndex">The Html that will be parsed.</param>
      <param name="allowScriptTags">if set to <c>true</c> script tags will not be removed.</param>
    </member>
    <member name="M:EPiServer.Core.Html.HtmlParser.RecursiveCleanup(System.Xml.XmlNode,System.Boolean)">
      <summary>
            Deletes empty P, SPAN and DIV nodes and optionally script nodes.
            </summary>
      <param name="parentNode">The node where clean up should begin.</param>
      <param name="allowScriptNodes">if set to <c>true</c> script nodes are not deleted.</param>
      <returns>
            True if anything was deleted from the sub tree starting with parentNode.
            </returns>
    </member>
    <member name="M:EPiServer.Core.Html.HtmlParser.GetStringFromResource(System.String)">
      <summary>
            Get an embedded resource string.
            Note - the default namespace of the project must be set to "EPiServer".
            </summary>
      <param name="virtualResourcePath">Virtual path to resource file, for example Resources/Languages/English.txt</param>
      <returns>Contents of the resource file</returns>
    </member>
    <member name="M:EPiServer.Core.Html.HtmlParser.ToString">
      <summary>
            Retrive HTML converted to XHTML as a string.
            </summary>
      <returns>A string containing XHTML</returns>
    </member>
    <member name="M:EPiServer.Core.Html.HtmlParser.ToXmlDocument">
      <summary>
            Retrive HTML converted to XHTML as a XML document.
            </summary>
      <returns>A XML document containing XHTML</returns>
    </member>
    <member name="M:EPiServer.Core.Html.SgmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.SgmlException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Core.Html.SgmlException.#ctor">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.Html.SgmlException" /></summary>
    </member>
    <member name="M:EPiServer.Core.Html.SgmlException.#ctor(System.String)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.Html.SgmlException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:EPiServer.Core.Html.SgmlException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes the new instance of <see cref="T:EPiServer.Core.Html.SgmlException" /></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.Internal.VisitorGroupSecuredFragmentMarkupGeneratorFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Visitor group implementation of secured fragment markup generator factory
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.VisitorGroupSecuredFragmentMarkupGeneratorFactory.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.Internal.VisitorGroupSecuredFragmentMarkupGeneratorFactory" /> class.
            Sets default virtual role repository and uses visitor group store
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.VisitorGroupSecuredFragmentMarkupGeneratorFactory.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRoleRepository,EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,System.String,EPiServer.Framework.Localization.LocalizationService)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.Internal.VisitorGroupSecuredFragmentMarkupGeneratorFactory" /> class.
            </summary>
      <param name="virtualRoleRepository">The virtual role repository.</param>
      <param name="visitorGroupRepository">The visitor group repository.</param>
      <param name="localizationService">The resource locator that should be used by the instance to get localized strings.</param>
      <param name="contentGroup">The content group.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.Internal.VisitorGroupSecuredFragmentMarkupGeneratorFactory.CreateSecuredFragmentMarkupGenerator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the secured fragment markup generator.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.IStringFragmentControlResolver">
      <summary>
            Component that resolves a Web control for an <see cref="T:EPiServer.Core.Html.StringParsing.IStringFragment" /> implementation
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.IStringFragmentControlResolver.GetControl(EPiServer.Core.Html.StringParsing.IStringFragment,System.Web.UI.TemplateControl)">
      <summary>
            Gets the a web control that can be placed in Page Control collection
            </summary>
      <returns>A control that renders the fragment</returns>
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator">
      <summary>
            Generates markup for fragments that are restricted for a list of visitor groups.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,System.String,EPiServer.Security.IRoleSecurityDescriptor)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator" /> class.
            </summary>
      <param name="visitorGroupRepository">The visitor group repository.</param>
      <param name="contentGroup">The content group.</param>
      <param name="roleSecurityDescriptor">The role security descriptor.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,System.String,EPiServer.Security.IRoleSecurityDescriptor,EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator" /> class.
            </summary>
      <param name="visitorGroupRepository">The visitor group repository.</param>
      <param name="contentGroup">The content group.</param>
      <param name="roleSecurityDescriptor">The role security descriptor.</param>
      <param name="localizationService">The resource locator.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator" /> class.
            </summary>
      <param name="visitorGroupRepository">The visitor group repository.</param>
      <param name="contentGroup">The content group.</param>
      <param name="visitorGroups">The visitor groups.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,System.String,System.Collections.Generic.IEnumerable{System.String},EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator" /> class.
            </summary>
      <param name="visitorGroupRepository">The visitor group repository.</param>
      <param name="contentGroup">The content group.</param>
      <param name="visitorGroups">The visitor groups.</param>
      <param name="localizationService">The resource locator.</param>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,EPiServer.Personalization.VisitorGroups.IVisitorGroupRoleRepository,System.String,System.Collections.Generic.IEnumerable{System.String},EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.RoleSecurityDescriptor">
      <summary>
            Gets or sets the role security descriptor that has information on which groups the content should be restricted to.
            </summary>
      <value>The role security descriptor.</value>
    </member>
    <member name="P:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.ContentGroup">
      <summary>
            Gets or sets the content group.
            </summary>
      <value>The content group.</value>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.GenerateGroupDisplayInformation">
      <summary>
            Generates markup for an html editor to display the groups that the content is restricted to.
            </summary>
      <returns>
            Markup for an html editor to display the groups that the content is restricted to.
            </returns>
      <remarks>Used for block elements.</remarks>
      <seealso cref="M:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.GenerateCompressedGroupDisplayInformation" />
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.GenerateGroupStorageInformation">
      <summary>
            Generates a string that can be used to store the groups that the content should be restricted to.
            </summary>
      <returns>
            A string that can be used to store the groups that the content should be restricted to.
            </returns>
      <remarks>VisitorGroupMarkupGenerator uses a comma separated string with the id:s for the visitor groups.</remarks>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.GenerateCompressedGroupDisplayInformation">
      <summary>
            Generates markup for an html editor to display information that the content is restricted to groups.
            </summary>
      <returns>
            Markup for an html editor to display information that the content is restricted to groups.
            </returns>
      <remarks>Used for inline elements.</remarks>
      <seealso cref="M:EPiServer.Core.Html.StringParsing.VisitorGroupMarkupGenerator.GenerateGroupDisplayInformation" />
    </member>
    <member name="T:EPiServer.Core.Html.StringParsing.StringFragmentExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Core.Html.StringParsing.IStringFragment" /> with convenient methods
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.StringParsing.StringFragmentExtensions.GetControl(EPiServer.Core.Html.StringParsing.IStringFragment,System.Web.UI.TemplateControl)">
      <summary>
            Gets the control that can be placed in Page Control collection
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.Html.TextIndexer">
      <summary>
            Index Html into keywords.
            </summary>
    </member>
    <member name="M:EPiServer.Core.Html.TextIndexer.StripHtml(System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Strip all HTML elements from a HTML string and return text.
            </summary>
      <param name="htmlText">The HTML text.</param>
      <param name="maxTextLengthToReturn">The max text length to return.</param>
      <param name="maxWordSize">Maximum word size osed when placing the moreTextMarker at end of string.</param>
      <param name="moreTextMarker">The more text marker.</param>
      <returns>A string without HTML markup.</returns>
    </member>
    <member name="M:EPiServer.Core.Html.TextIndexer.StripHtml(System.String,System.Int32)">
      <summary>
            Strip all HTML elements from a HTML string and return text.
            </summary>
      <param name="htmlText">A HTML string</param>
      <param name="maxTextLengthToReturn">
            	Max string length to return. 0 returns all text in the HTML string.
            </param>
      <returns>A string with text</returns>
      <remarks>
        <para>
            Note that maxTextLengthToReturn will count a HTML entity as one character.
            </para>
        <para>
            If the stripped text is longer than the specified max length, the string will be truncated and "..." appended
            at the end.
            </para>
        <para>
            The algorithm in StripHTML works as follows:
            </para>
        <para>
            Remove all tags, replacing them with a space. All whitespaces are replaced by space. All consecutive whitespaces are merged into one space.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Core.IContentExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Core.IContent" /> with some convenient methods.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentExtensions.IsPropertyEditableInCurrentLanguage(EPiServer.Core.IContentData,System.String,System.Boolean)">
      <summary>
            Determines if the property is editable in the current language
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentExtensions.QueryAccess(EPiServer.Core.IContent)">
      <summary>
            Return the access level that the current user has to the content
            </summary>
      <param name="content">The content.</param>
      <returns>
            An AccessLevel
            </returns>
      <remarks>
            Note that this method also checks the published status of the page
            to determine the actual access that the user has. I e if the page is not published
            the user will not see it unless he has "more" access than Read.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.IContentExtensions.QueryDistinctAccess(EPiServer.Core.IContent,EPiServer.Security.AccessLevel)">
      <summary>
            Check for a distinct required access level. This is preferred to use over
            QueryAccess for performance reasons.
            </summary>
      <param name="content">The content.</param>
      <param name="requestedLevel">The requested level.</param>
      <returns>
            true if at least the requested access is held by the current user
            </returns>
      <remarks>
            This method is optimized for speed, by checking preconditions before calling expensive methods.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.IContentSource">
      <summary>
            Interface for providers of <see cref="T:EPiServer.Core.IContent" /> objects.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IContentSource.Get``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.IContent" /> object with information about a content, based on the
            <see cref="T:EPiServer.Core.ContentReference" /> parameter.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">Reference to the content being retrieved</param>
      <returns>
            IContent object requested
            </returns>
    </member>
    <member name="M:EPiServer.Core.IContentSource.GetChildren``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieve a <see cref="T:EPiServer.Core.IContent" /> listing
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">Reference to parent content</param>
      <returns>
            Returns a collection of IContent directly below the content referenced by
            the <see cref="T:EPiServer.Core.ContentReference" /> parameter.
            </returns>
    </member>
    <member name="P:EPiServer.Core.IContentSource.CurrentContent">
      <summary>
            Gets the currently loaded <see cref="T:EPiServer.Core.IContent">content</see>.
            </summary>
      <value>Returns information about the currently loaded content, or a content in 
            a collection when used inside a control.</value>
      <remarks>
        <para>
            The implementation of <c>CurrentContent</c> is strictly up to the implementing class. 
            Some of the templated Web controls implement <see cref="T:EPiServer.Core.IContentSource" />, and <c>CurrentContent</c> 
            will typically refer to the current content being iterated in a collection or an array.
            </para>
        <para>
            Another implementor is the <see cref="T:EPiServer.PageBase" /> class or one of it's subclasses like 
            <see cref="T:EPiServer.SimplePage" /> or <see cref="T:EPiServer.TemplatePage" />.
            <c>CurrentContent</c> in the context of <see cref="T:EPiServer.PageBase" /> refers to the currently 
            displayed content.
            </para>
        <para>
          <c>CurrentContent</c> may be null on sources that aren't connected through <c>ContentWebForm</c>.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Core.IContentSource`1">
      <summary>
            Generic interface for providers of <see cref="T:EPiServer.Core.IContent" /> objects.
            </summary>
      <typeparam name="T">The Type of the content to return.</typeparam>
    </member>
    <member name="P:EPiServer.Core.IContentSource`1.CurrentContent">
      <summary>
            Gets the currently loaded <see cref="T:EPiServer.Core.PageData">page</see> as the current type.
            </summary>
      <seealso cref="T:EPiServer.Core.IPageSource" />
    </member>
    <member name="T:EPiServer.Core.IExceptionManager">
      <summary>
            Defines signature for component that handles unhandled exceptions when EPiServer error handling is enabled.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IExceptionManager.RenderHttpRuntimeError(System.Exception)">
      <summary>
            Renders an error message to the user based on the exception.
            </summary>
      <param name="exception">The exception.</param>
      <remarks>
            The actual exception message may not be rendered depending on the current user access rights.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.Internal.ThumbnailManager">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents the thumbnail manager, for creating, cleaning thumbnail.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ThumbnailManager.#ctor(EPiServer.IContentRepository,EPiServer.Framework.Blobs.IBlobFactory,EPiServer.Web.IBlobResolver,EPiServer.Web.Internal.IBlobAssigner,EPiServer.ImageLibrary.ImageServiceOptions,EPiServer.Web.IMimeTypeResolver,EPiServer.Web.IImageDescriptorPropertyResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Core.Internal.ThumbnailManager" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Core.Internal.ThumbnailManager.ImageService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the image service.
            </summary>
      <remarks>
            This is mainly exposed for unit test purposes.
            </remarks>
      <value>
            The image service.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ThumbnailManager.GetDescendentsMedia">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns all content reference under media and asset folder roots.
            </summary>
      <returns>All content reference under media and asset folder roots.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ThumbnailManager.CleanThumbnail(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clean all content's thumbnail properties. If the <paramref name="contentLink" /> is not IContentMedia, nothing will be cleaned up.
            </summary>
      <param name="contentLink">Content link of the content to clean thumnail.</param>
      <param name="saveContent">Flag to indicate whether the content should be saved or not.</param>
      <returns>Number of thumbnail properties have been cleared.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ThumbnailManager.CleanThumbnail(EPiServer.Core.IContentMedia,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clean all content's thumbnail properties.
            </summary>
      <param name="content">Content to clean thumbnail.</param>
      <param name="saveContent">Flag to indicate whether the content should be saved or not.</param>
      <returns>Number of thumbnail properties have been cleared.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ThumbnailManager.CreateImageBlob(EPiServer.Framework.Blobs.Blob,System.String,EPiServer.DataAnnotations.ImageDescriptorAttribute)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get transparent-background thumbnail for content
            </summary>
      <param name="sourceBlob">Source blob to get scaled image from.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="descriptorAttribute">The descriptor attribute.</param>
      <returns>
            The blob thumbnail
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ThumbnailManager.CreateThumbnailUri(EPiServer.Framework.Blobs.Blob,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the <see cref="T:EPiServer.Framework.Blobs.Blob" /> identified for a thumbnail
            </summary>
      <param name="sourceBlob">The source blob / image</param>
      <param name="propertyName">The name of the property of the thumbnail</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ThumbnailManager.CreateBlob(System.Uri,EPiServer.Framework.Blobs.Blob,System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create a thumbnail image
            </summary>
      <param name="thumbnailUri">The Uri of thumbnail</param>
      <param name="blobSource">The source blob</param>
      <param name="width">The width of thumbnail</param>
      <param name="height">The height of thumbnail</param>
      <returns>The blob thumbnail</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ThumbnailManager.CreateBlob(System.Uri,EPiServer.Framework.Blobs.Blob,EPiServer.ImageLibrary.ImageOperation,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create a thumbnail image with custom mime type
            </summary>
      <param name="thumbnailUri">The Uri of thumbnail</param>
      <param name="blobSource">The source blob</param>
      <param name="imgOperation">The <see cref="T:EPiServer.ImageLibrary.ImageOperation" /> for generated thumbnail</param>
      <param name="mimeType">A supported mime type, see <seealso cref="T:EPiServer.Web.MimeMapping" /></param>
      <returns>The blob thumbnail</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentExtensions.IsModified(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the current content should be considered to have been modified.
            If the content implement <see cref="T:EPiServer.Core.IModifiedTrackable" /> the IsModified flag is checked;
            if not implemented, content will always be considered potentially modified.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.Internal.ContentExtensions.Language(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the language of the content if it implements <see cref="T:EPiServer.Core.ILocale" />.
            Otherwise or if null <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> is returned.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Core.IPageSource">
      <summary>
            Interface for providers of <see cref="T:EPiServer.Core.PageData" /> objects.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IPageSource.GetPage(EPiServer.Core.PageReference)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.PageData" /> object with information about a page, based on the 
            <see cref="T:EPiServer.Core.PageReference" /> parameter.
            </summary>
      <param name="pageLink">Reference to the page being retrieved</param>
      <returns>PageData object requested</returns>
      <example>
            The following code example demonstrates how to get a start page.
            <code source="../CodeSamples/EPiServer/Core/IPageSourceSamples.cs" region="GetPage1" lang="cs" />
            The following code example demonstrates how to get a page by ID.
            <code source="../CodeSamples/EPiServer/Core/IPageSourceSamples.cs" region="GetPage2" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.Core.IPageSource.GetChildren(EPiServer.Core.PageReference)">
      <summary>
            Retrieve a <see cref="T:EPiServer.Core.PageData" /> listing
            </summary>
      <param name="pageLink">Reference to parent page</param>
      <returns>Returns a collection of pages directly below the page referenced by 
            the <see cref="T:EPiServer.Core.PageReference" /> parameter.</returns>
      <example>
            The following code example demonstrates the usage of <b>GetChildren</b>.
            <code source="../CodeSamples/EPiServer/Core/IPageSourceSamples.cs" region="GetChildren" lang="cs" /></example>
    </member>
    <member name="P:EPiServer.Core.IPageSource.CurrentPage">
      <summary>
            Gets the currently loaded <see cref="T:EPiServer.Core.PageData">page</see>.
            </summary>
      <value>Returns information about the currently loaded page, or a page in 
            a collection when used inside a control.</value>
      <remarks>
        <para>
            The implementation of <c>CurrentPage</c> is strictly up to the implementing class. 
            Some of the templated Web controls implement <see cref="T:EPiServer.Core.IPageSource" />, and <c>CurrentPage</c> 
            will typically refer to the current page being iterated in a collection or an array.
            </para>
        <para>
            Another implementor is the <see cref="T:EPiServer.PageBase" /> class or one of it's subclasses like 
            <see cref="T:EPiServer.SimplePage" /> or <see cref="T:EPiServer.TemplatePage" />.
            <c>CurrentPage</c> in the context of <see cref="T:EPiServer.PageBase" /> refers to the currently 
            displayed page.
            </para>
        <para>
          <c>CurrentPage</c> may be null on sources that aren't connected through <c>PageBase</c>.
            </para>
      </remarks>
      <example>
            The following code example demonstrates the usage of <c>CurrentPage</c>.
            <code>
            Response.Write(CurrentPage.PageName); 
            </code></example>
    </member>
    <member name="T:EPiServer.Core.IPageSource`1">
      <summary>
            Generic interface for providers of <see cref="T:EPiServer.Core.PageData" /> objects.
            </summary>
      <typeparam name="T">The Type of the page to return.</typeparam>
    </member>
    <member name="P:EPiServer.Core.IPageSource`1.CurrentPage">
      <summary>
            Gets the currently loaded <see cref="T:EPiServer.Core.PageData">page</see> as the current type.
            </summary>
      <seealso cref="T:EPiServer.Core.IPageSource" />
    </member>
    <member name="T:EPiServer.Core.IPageStatistics">
      <summary>
            Defines signatures for page statistics component.
            </summary>
      <example>
            How to fetch page statistics
            The following code example demonstrates how to use the built-in statistics properties.
            <code source="../CodeSamples/EPiServer/DataFactory/DataFactorySamples.cs" region="Statistics" lang="cs" /></example>
    </member>
    <member name="P:EPiServer.Core.IPageStatistics.ListingFetchCacheHits">
      <summary>
            Total count of page children fetches on all PageProviders only for cached pages
            </summary>
    </member>
    <member name="P:EPiServer.Core.IPageStatistics.ListingFetchCount">
      <summary>
            Total count of page children fetches on all PageProviders included cached pages
            </summary>
    </member>
    <member name="P:EPiServer.Core.IPageStatistics.ListingFetchDatabaseReads">
      <summary>
            Total count of page children fetches on all PageProviders without cached pages
            </summary>
    </member>
    <member name="P:EPiServer.Core.IPageStatistics.PageFetchCacheHits">
      <summary>
            Total count of Page fetches on all PageProviders only for cached pages
            </summary>
    </member>
    <member name="P:EPiServer.Core.IPageStatistics.PageFetchCount">
      <summary>
            Total count of Page fetches on all PageProviders included cached pages
            </summary>
    </member>
    <member name="P:EPiServer.Core.IPageStatistics.PageFetchDatabaseReads">
      <summary>
            Total count of Page fetches on all PageProviders without cached pages
            </summary>
    </member>
    <member name="M:EPiServer.Core.IPageStatistics.ResetCounters">
      <summary>
            Resets all counters on all PageProviders
            </summary>
    </member>
    <member name="T:EPiServer.Core.IPropertyControl">
      <summary>
            Implemented by a Control that is used to display a user interface for a PropertyData class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IPropertyControl.SetupControl">
      <summary>
            Called when setting up the properties for a page.
            </summary>
      <remarks>If the control creates it's child controls in CreateChildControls(), EnsureChildControls() should be
            called in this method to make sure the child controls are created before loading post data.</remarks>
    </member>
    <member name="M:EPiServer.Core.IPropertyControl.ApplyChanges">
      <summary>
            Applies changes for the posted data to the page's properties.
            </summary>
      <remarks>This is only valid for web form based editors.</remarks>
    </member>
    <member name="P:EPiServer.Core.IPropertyControl.DisplayEditUI">
      <summary>
            Gets a value indicating whether the control should display an edit user interface.
            </summary>
      <value>
        <c>true</c> if the control should display an edit user interface.; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Core.IPropertyControl.PropertyData">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.PropertyData" /> for the IPropertyControl.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IPropertyControl.Properties">
      <summary>
            Sets the properties that are being edited for the IPropertyControl.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IPropertyControl.RenderType">
      <summary>
            Sets the RenderType for the IPropertyControl.
            </summary>
    </member>
    <member name="P:EPiServer.Core.IPropertyControl.RowLayout">
      <summary>
            Specifies how a property row is rendered in the edit user interface.
            </summary>
      <remarks>This is only valid for web form based editors.</remarks>
    </member>
    <member name="P:EPiServer.Core.IPropertyControl.ValidationGroup">
      <summary>
            Gets or sets the validation group.
            </summary>
      <value>The validation group.</value>
      <remarks>This is only valid for web form based editors.</remarks>
    </member>
    <member name="P:EPiServer.Core.IPropertyControl.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Core.IPropertyControl" /> is enabled.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
      <remarks>This is only valid for web form based editors.</remarks>
    </member>
    <member name="T:EPiServer.Core.TableRowLayout">
      <summary>
            Specifies different rendering modes for properties in the edit user interface.
            </summary>
    </member>
    <member name="F:EPiServer.Core.TableRowLayout.Default">
      <summary>
            Two cells in one row wich the first contains caption and the second
            is the responsibility of the control.
            </summary>
    </member>
    <member name="F:EPiServer.Core.TableRowLayout.Wide">
      <summary>
            Two rows where the first contain caption and the second
            is the responsibility of the control.
            </summary>
    </member>
    <member name="T:EPiServer.Core.IPropertyControlFactory">
      <summary>
            Factory responsible for registration and creation of web controls for <see cref="T:EPiServer.Core.PropertyData" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IPropertyControlFactory.Register``2">
      <summary>
            Registers an <see cref="T:EPiServer.Core.IPropertyControl" /> with a <see cref="T:EPiServer.Core.PropertyData" /> type. 
            </summary>
      <typeparam name="TPropertyData">The PropertyData</typeparam>
      <typeparam name="TPropertyControl">The property control</typeparam>
    </member>
    <member name="M:EPiServer.Core.IPropertyControlFactory.Register``1(System.Func{EPiServer.Core.IPropertyControl})">
      <summary>
            Registers an <see cref="T:EPiServer.Core.IPropertyControl" /> factory with a <see cref="T:EPiServer.Core.PropertyData" /> type. 
            </summary>
      <typeparam name="TPropertyData">The PropertyData</typeparam>
      <param name="controlFactory">The control factory to register with the property data instance</param>
    </member>
    <member name="M:EPiServer.Core.IPropertyControlFactory.IsRegistered``1">
      <summary>
            Check if a <see cref="T:EPiServer.Core.PropertyData" /> type has registered controls.
            </summary>
      <typeparam name="TPropertyData">The PropertyData</typeparam>
    </member>
    <member name="M:EPiServer.Core.IPropertyControlFactory.Unregister``1">
      <summary>
            Unregister a <see cref="T:EPiServer.Core.PropertyData" /> type. 
            </summary>
      <typeparam name="TPropertyData">The PropertyData</typeparam>
    </member>
    <member name="M:EPiServer.Core.IPropertyControlFactory.CreatePropertyControl(EPiServer.Core.PropertyData)">
      <summary>
            Creates an IPropertyControl for a given PropertyData.
            </summary>
      <param name="propertyData">The PropertyData.</param>
      <returns>A IPropertyControl that can be used to render an user interface for the PropertyData.</returns>
    </member>
    <member name="M:EPiServer.Core.IPropertyControlFactoryExtensions.TryRegister``2(EPiServer.Core.IPropertyControlFactory)">
      <summary>
            Try to register an <see cref="T:EPiServer.Core.IPropertyControl" /> with a <see cref="T:EPiServer.Core.PropertyData" /> type. If an existing registration exists nothing will be registered.
            </summary>
      <typeparam name="TPropertyData">The PropertyData</typeparam>
      <typeparam name="TPropertyControl">The property control</typeparam>
    </member>
    <member name="M:EPiServer.Core.IPropertyControlFactoryExtensions.TryRegister``1(EPiServer.Core.IPropertyControlFactory,System.Func{EPiServer.Core.IPropertyControl})">
      <summary>
            Try to register an <see cref="T:EPiServer.Core.IPropertyControl" /> factory with a <see cref="T:EPiServer.Core.PropertyData" /> type.  If an existing registration exists nothing will be registered.
            </summary>
      <typeparam name="TPropertyData">The PropertyData</typeparam>
      <param name="factory">
      </param>
      <param name="controlFactory">The control factory to register with the property data instance</param>
    </member>
    <member name="T:EPiServer.Core.ITranslate">
      <summary>
            Interface for translating texts based on language information.
            </summary>
      <remarks>
            If a control supports this interface it will automatically be translated by
            any page that derives from <see cref="T:EPiServer.PageBase" /> in the Page_PreRender event.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.ITranslate.LocalizedText">
      <summary>
            Used to access the text that should be translated.
            </summary>
    </member>
    <member name="T:EPiServer.Core.ITranslateFormat">
      <summary>
            Interface for translating texts based on language information.
            </summary>
    </member>
    <member name="P:EPiServer.Core.ITranslateFormat.StringFormatObjects">
      <summary>
            Set object references if the localized text is a format string with "{n}" style instructions.
            </summary>
      <remarks>
            Simply return null from the getter if no object references are set.
            </remarks>
    </member>
    <member name="T:EPiServer.Core.PageDataEnumerableExtensions">
      <summary>
            Contains extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" /></summary>
    </member>
    <member name="M:EPiServer.Core.PageDataEnumerableExtensions.Filter(System.Collections.Generic.IEnumerable{EPiServer.Core.PageData},EPiServer.Filters.IPageFilter)">
      <summary>
            Filters the specified pages using the given page filter.
            </summary>
      <param name="pages">The collection of pages to filter.</param>
      <param name="filter">The filter to apply to the collection.</param>
      <returns>A filtered collection of <see cref="T:EPiServer.Core.PageData" /> objects.</returns>
    </member>
    <member name="M:EPiServer.Core.PageDataExtensions.IsVisibleOnSite(EPiServer.Core.PageData)">
      <summary>
            Determines whether the specified content data is visible on site.
            </summary>
      <param name="page">The page data.</param>
      <returns>
        <c>true</c> if the specified content data is visible on site; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PageDataExtensions.HasTemplate(EPiServer.Core.PageData)">
      <summary>
            Determines whether the specified content data has template.
            </summary>
      <param name="pageData">The page data.</param>
      <returns>
        <c>true</c> if the specified content data has template; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PageDataExtensions.GetPageLanguage(EPiServer.Core.PageData,System.String)">
      <summary>
            Get a page in the requested language.
            </summary>
      <param name="page">The page</param>
      <param name="languageBranchId">The language branch id.</param>
      <returns>
        <see cref="T:EPiServer.Core.PageData" /> in requested language or <c>null</c> if a page on that language does not exist</returns>
    </member>
    <member name="T:EPiServer.Core.PagePath">
      <summary>
            A collection of <see cref="T:EPiServer.Core.PageReference" />s to represents the page and it's ancestors.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PagePath.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PagePath" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PagePath.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.PageReference})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PagePath" /> class.
            </summary>
      <param name="pageLinks">The page links for all ancestor pages to the actual page.</param>
    </member>
    <member name="M:EPiServer.Core.PagePath.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PagePath" /> class.
            </summary>
      <param name="capacity">The capacity.</param>
    </member>
    <member name="M:EPiServer.Core.PagePath.ToString">
      <summary>
            Generates a comma-separated list with page links
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.PagePath.Parse(System.String)">
      <summary>
            Parses a dot seperated list of page links which represent the acestry of a page.
            </summary>
      <param name="stringToParse">The string to parse</param>
      <returns>A new instance of <see cref="T:EPiServer.Core.PagePath" />.</returns>
    </member>
    <member name="T:EPiServer.Core.PagePathExtensions">
      <summary>
            Helper class for page path extensions.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PagePathExtensions.StartsWith(EPiServer.Core.PagePath,EPiServer.Core.PagePath)">
      <summary>
            Checks if the current <see cref="T:EPiServer.Core.PagePath" /> starts with all the pagelinks in the given <see cref="T:EPiServer.Core.PagePath" />.
            </summary>
      <param name="current">The current instance.</param>
      <param name="parentPath">The parent path to compare with.</param>
      <returns>
        <c>true</c> if the current <see cref="T:EPiServer.Core.PagePath" /> starts with all the pagelinks in the given <see cref="T:EPiServer.Core.PagePath" />; otherwise <c>false</c>.</returns>
    </member>
    <member name="T:EPiServer.Core.PageReferenceCollection">
      <summary>
            Represents a collection of <see cref="T:EPiServer.Core.PageReference" />s.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageReferenceCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageReferenceCollection" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageReferenceCollection.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageReferenceCollection" /> class.
            </summary>
      <param name="languageID">The language ID.</param>
    </member>
    <member name="M:EPiServer.Core.PageReferenceCollection.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.PageReference})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageReferenceCollection" /> class.
            </summary>
      <param name="pageLinks">The page links.</param>
    </member>
    <member name="M:EPiServer.Core.PageReferenceCollection.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.PageReference},System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageReferenceCollection" /> class.
            </summary>
      <param name="pageLinks">The page links.</param>
      <param name="languageID">The language ID.</param>
    </member>
    <member name="M:EPiServer.Core.PageReferenceCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageReferenceCollection" /> class.
            </summary>
      <param name="capacity">The capacity.</param>
    </member>
    <member name="M:EPiServer.Core.PageReferenceCollection.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PageReferenceCollection" /> class.
            </summary>
      <param name="capacity">The capacity.</param>
      <param name="languageID">The language ID.</param>
    </member>
    <member name="M:EPiServer.Core.PageReferenceCollection.ToString">
      <summary>
            Generates a comma-separated list with page links
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.PageReferenceCollection.Parse(System.String)">
      <summary>
            Parses a commaseparated list of page links
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Core.PageReferenceCollection.LanguageID">
      <summary>
            A string indicating what language this collection is sorted by. Null if the sorting isn't dependent of language.
            </summary>
      <returns>A string with the language ID, or null.</returns>
    </member>
    <member name="T:EPiServer.Core.PageStoreBase">
      <summary>
            The base class that defines the events for page providers / DataFactory.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PageStoreBase.#ctor">
      <summary>
            Default constructor. 
            </summary>
      <remarks>
            This is only meant to be used in test scenarios.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.LoadingChildren">
      <summary>
            Occurs when a list is requested from GetChildren
            </summary>
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.LoadedChildren">
      <summary>
            Occurs when a list has been loaded from GetChildren
            </summary>
      <remarks>
            This event is triggered before loading dynamic and personalized data.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.FinishedLoadingChildren">
      <summary>
            Occurs when a list has been loaded from GetChildren
            </summary>
      <remarks>
            This event is triggered after loading dynamic and personalized data.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.FailedLoadingChildren">
      <summary>
            Occurs when a page list failed for some reason.
            </summary>
      <remarks>
            This event is generated if a LoadingChildrem is NOT followed by a LoadedChildren, i e FailedLoadingChildren is 
            called instead of LoadedChildren. This is typically used if you need to clean up something that was
            initiated by LoadingChildren.
            </remarks>
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.LoadingContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.LoadedContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.FailedLoadingContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.LoadingDefaultContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.LoadedDefaultContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.PublishingContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.PublishedContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.CheckingInContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.CheckedInContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.RejectingContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.RejectedContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.RequestingApproval">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.RequestedApproval">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.CheckingOutContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.CheckedOutContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.SchedulingContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.ScheduledContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.DeletingContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.DeletedContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.DeletingContentVersion">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.DeletedContentVersion">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.CreatingContentLanguage">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.CreatedContentLanguage">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.DeletingContentLanguage">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.DeletedContentLanguage">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.MovingContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.MovedContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.CreatingContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.CreatedContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.SavingContent">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.Core.PageStoreBase.SavedContent">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PageStoreBase.RaisePageEvent(System.String,EPiServer.ContentEventArgs)">
      <summary>
            Raises the specified page event.
            </summary>
      <param name="key">The event identifier.</param>
      <param name="eventArgs">The <see cref="T:EPiServer.ContentEventArgs" /> instance containing the event data.</param>
      <returns>True if the event did not cancel.</returns>
    </member>
    <member name="M:EPiServer.Core.PageStoreBase.RaiseDeleteEvent(System.String,EPiServer.DeleteContentEventArgs)">
      <summary>
            Raises the specified delete event.
            </summary>
      <param name="key">The event identifier.</param>
      <param name="eventArgs">The <see cref="T:EPiServer.DeleteContentEventArgs" /> instance containing the event data.</param>
      <returns>True if the event did not cancel.</returns>
    </member>
    <member name="M:EPiServer.Core.PageStoreBase.RaiseCancellablePageEvent(System.String,System.String,EPiServer.ContentEventArgs)">
      <summary>
            Raises a cancellable page event.
            </summary>
      <param name="key">The event identifier.</param>
      <param name="defaultReason">The default cancel reason.</param>
      <param name="eventArgs">The <see cref="T:EPiServer.PageEventArgs" /> instance containing the event data.</param>
      <remarks>
            If the events is cancelled a <see cref="T:EPiServer.Core.EPiServerCancelException" /> is thrown. Unless the cancelling 
            handler sets the CancelReason of <see cref="T:EPiServer.PageEventArgs" />, the <paramref name="defaultReason" /> is
            used as exception message.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PageStoreBase.RaiseCancellableDeleteEvent(System.String,System.String,EPiServer.DeleteContentEventArgs)">
      <summary>
            Raises a cancellable delete event.
            </summary>
      <param name="key">The event identifier.</param>
      <param name="defaultReason">The default cancel reason.</param>
      <param name="eventArgs">The <see cref="T:EPiServer.DeleteContentEventArgs" /> instance containing the event data.</param>
      <remarks>
            If the events is cancelled a <see cref="T:EPiServer.Core.EPiServerCancelException" /> is thrown. Unless the cancelling 
            handler sets the CancelReason of <see cref="T:EPiServer.PageEventArgs" />, the <paramref name="defaultReason" /> is
            used as exception message.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.PageStoreBase.RaiseChildrenEvent(System.String,EPiServer.ChildrenEventArgs)">
      <summary>
            Raises a page children event.
            </summary>
      <param name="key">The event identifier.</param>
      <param name="eventArgs">The <see cref="T:EPiServer.ChildrenEventArgs" /> instance containing the event data.</param>
      <returns>True if the event did not cancel.</returns>
    </member>
    <member name="M:EPiServer.Core.PageStoreBase.CreateSaveEventArgs(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,EPiServer.Security.AccessLevel)">
      <summary>
            Creates an instance of <see cref="T:EPiServer.SavePageEventArgs" />.
            </summary>
      <param name="content">The content to save.</param>
      <param name="action">The requested save action.</param>
      <param name="access">The required access level.</param>
      <returns>A fully initialized <see cref="T:EPiServer.SavePageEventArgs" /> instance.</returns>
    </member>
    <member name="M:EPiServer.Core.PageStoreBase.Dispose">
      <summary>
            Implemenation of <see cref="T:System.IDisposable" /></summary>
    </member>
    <member name="M:EPiServer.Core.PageStoreBase.Dispose(System.Boolean)">
      <summary>
            Actual implementation of Dispose.
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="T:EPiServer.Core.PropertyControlClassFactory">
      <summary>
            Repository for <see cref="T:EPiServer.Core.IPropertyControlFactory" /></summary>
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertyControlClassFactory" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.CreateInstance(System.Type,System.Object[])">
      <internal-API />
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.TypeStringFromArguments(System.Object[])">
      <internal-API />
    </member>
    <member name="P:EPiServer.Core.PropertyControlClassFactory.Instance">
      <summary>
            Gets the global instance of PropertyControlClassFactory.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertyControlClassFactory.PropertyDefinitionRepository">
      <summary>
            Gets or sets the property definition repository.
            </summary>
      <value>The property definition repository.</value>
      <internal-API />
    </member>
    <member name="P:EPiServer.Core.PropertyControlClassFactory.TemplateControlLoaderService">
      <summary>
            Gets or sets the template control loaderk.
            </summary>
      <internal-API />
    </member>
    <member name="P:EPiServer.Core.PropertyControlClassFactory.PropertyDataSettingsHelper">
      <summary>
            Gets or sets the template control loaderk.
            </summary>
      <internal-API />
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.CreatePropertyControl(EPiServer.Core.PropertyData,System.Web.HttpContextBase,System.Web.UI.TemplateControl,System.String)">
      <summary>
            Creates an IPropertyControl for a given PropertyData.
            </summary>
      <param name="propertyData">The PropertyData.</param>
      <param name="httpContext">The HTTP context.</param>
      <param name="templateControl">The template control.</param>
      <param name="tag">The tag used to resolve the template.</param>
      <returns>
            A IPropertyControl that can be used to render an user interface for the PropertyData.
            </returns>
      <internal-API />
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.CreatePropertyControl(EPiServer.Core.PropertyData)">
      <summary>
            Creates an IPropertyControl for a given PropertyData.
            </summary>
      <param name="propertyData">The PropertyData.</param>
      <returns>A IPropertyControl that can be used to render an user interface for the PropertyData.</returns>
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.GetControls(System.Type)">
      <internal-API />
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.Register``2">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.Register``1(System.Func{EPiServer.Core.IPropertyControl})">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.Unregister``1">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.IsRegistered``1">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.RegisterClass(System.Type,System.Type)">
      <summary>
            Registers a class mapping (this legacy method never overrides existing registrations)
            </summary>
      <param name="baseType">Type of the base class.</param>
      <param name="mappedType">Type of the mapped class.</param>
      <remarks>The first registered control always wins, use Unregister to unregister an existing registration</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.IsRegistered(System.Type)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyControlClassFactory.ClearRegistrations">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="T:EPiServer.Core.PropertyControlClassFactoryException">
      <summary>
            Exceptions thrown by <see cref="T:EPiServer.Core.PropertyControlClassFactory" /></summary>
    </member>
    <member name="T:EPiServer.Core.PropertyDataExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.Core.PropertyData" /></summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataExtensions.GetSettingsContainer(EPiServer.Core.PropertyData)">
      <summary>
            Gets the settings container which have all settings objects stored for this property.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataExtensions.GetSettingsID(EPiServer.Core.PropertyData)">
      <summary>
            Gets or sets the settings ID used to load the settings container.
            </summary>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.IPropertySettingsUI">
      <summary>
            Interface that is used to create an ui to load and save property settings.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsUI.LoadSettingsUI(EPiServer.Core.PropertySettings.IPropertySettings)">
      <summary>
            Loads the user interface for the property settings.
            </summary>
      <param name="settings">The current settings for the property.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsUI.UpdateSettings(EPiServer.Core.PropertySettings.IPropertySettings)">
      <summary>
            Updates the settings with the values from the controls.
            </summary>
      <param name="settings">The settings to update.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.IPropertySettingsUI.SetEnabledState(System.Boolean)">
      <summary>
            Sets the enabled state for the child controls.
            </summary>
      <param name="enabled">if set to <c>true</c> child controls should be enabled; otherwise disabled.</param>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettingsControlBase">
      <summary>
            Abstract base class that inherits <see cref="T:System.Web.UI.WebControls.WebControl" /> and implements some of the interface methods of <see cref="T:EPiServer.Core.PropertySettings.IPropertySettingsUI" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsControlBase.LoadSettingsUI(EPiServer.Core.PropertySettings.IPropertySettings)">
      <summary>
            Loads the user interface for the property settings.
            </summary>
      <param name="settings">The current settings for the property.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsControlBase.UpdateSettings(EPiServer.Core.PropertySettings.IPropertySettings)">
      <summary>
            Saves the new settings.
            </summary>
      <returns>
            A <see cref="T:EPiServer.Core.PropertySettings.IPropertySettings" /> object with the updated settings.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsControlBase.SetEnabledState(System.Boolean)">
      <summary>
            Sets the enabled state for the child controls.
            </summary>
      <param name="enabled">if set to <c>true</c> child controls should be enabled; otherwise disabled.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsControlBase.SetEnableStateForChildControlsRecursive(System.Web.UI.Control,System.Boolean)">
      <summary>
            Sets the enable state for child controls.
            </summary>
      <param name="control">The control.</param>
      <param name="enabled">if set to <c>true</c> the input controls should be enabled.</param>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute">
      <summary>
            Attibute to specify a settings UI for a <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsAttribute" /> marked class.
            </summary>
      <remarks>
        <para>
            Use this attibute to specify which UI control a class or property should use in admin mode. 
            The control specified also needs to implement the <see cref="T:EPiServer.Core.PropertySettings.IPropertySettingsUI" /> interface.
            </para>
      </remarks>
      <example>
            Simple example of marking a settings class with a UI.
            <code source="../CodeSamples/EPiServer/PropertySettings/PropertySettingsSample.cs" region="PropertySettingsUI" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.#ctor(System.Type,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute" /> class.
            </summary>
      <param name="type">The type.</param>
      <param name="controlValue">The control value to use to set and get the settings value.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.LoadAdminControl(System.Web.UI.Page)">
      <summary>
            Loads the admin control.
            </summary>
      <param name="page">The page that the control should be added to.</param>
      <returns>If the url to a user control has been set this is loaded, otherwise a new instance of the control
            specified in <see cref="P:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.AdminControl" /> is loaded.</returns>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.AdminControl">
      <summary>
            Gets or sets the admin control.
            </summary>
      <value>The admin control.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.AdminControlValue">
      <summary>
            Gets or sets the name of the admin control property that is used to get and set the settings object.
            </summary>
      <value>The property name of the admin control that holds the value.</value>
      <remarks>For a <see cref="T:System.Web.UI.WebControls.TextBox" /> this should be set to "Text".</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.TryGetAttribute(System.Type,EPiServer.Core.PropertySettings.PropertySettingsUIAttribute@)">
      <summary>
            Tries to get a <see cref="T:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute" /> from a type.
            </summary>
      <param name="type">The type.</param>
      <param name="attribute">The attribute to set if succesfull.</param>
      <returns>
        <c>true</c> if an attribute was found.</returns>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.Url">
      <summary>
            The url to the user control.
            </summary>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.UrlFromUi">
      <summary>
            Gets and sets the url to the user control relative the UI folder.
            </summary>
      <value>The URL relative the UI folder.</value>
    </member>
    <member name="P:EPiServer.Core.PropertySettings.PropertySettingsUIAttribute.UrlFromUtil">
      <summary>
            Gets or sets the URL to the user control relative the util folder.
            </summary>
      <value>The URL relative the util folder.</value>
    </member>
    <member name="T:EPiServer.Core.PropertySettings.PropertySettingsUserControlBase">
      <summary>
            Abstract base class that inherits <see cref="T:System.Web.UI.UserControl" /> and implements some of the interface methods of <see cref="T:EPiServer.Core.PropertySettings.IPropertySettingsUI" />.
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsUserControlBase.LoadSettingsUI(EPiServer.Core.PropertySettings.IPropertySettings)">
      <summary>
            Loads the user interface for the property settings.
            </summary>
      <param name="settings">The current settings for the property.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsUserControlBase.UpdateSettings(EPiServer.Core.PropertySettings.IPropertySettings)">
      <summary>
            Saves the new settings.
            </summary>
      <returns>
            A <see cref="T:EPiServer.Core.PropertySettings.IPropertySettings" /> object with the updated settings.
            </returns>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsUserControlBase.SetEnabledState(System.Boolean)">
      <summary>
            Sets the enabled state for the child controls.
            </summary>
      <param name="enabled">if set to <c>true</c> child controls should be enabled; otherwise disabled.</param>
    </member>
    <member name="M:EPiServer.Core.PropertySettings.PropertySettingsUserControlBase.SetEnableStateForChildControlsRecursive(System.Web.UI.Control,System.Boolean)">
      <summary>
            Sets the enable state for child controls.
            </summary>
      <param name="control">The control.</param>
      <param name="enabled">if set to <c>true</c> the input controls should be enabled.</param>
    </member>
    <member name="T:EPiServer.Core.RenderType">
      <summary>
            Specifies the different rendering states a PropertyControl can be in.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RenderType.Unknown">
      <summary>
            Indicates that the current render state is unknown.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RenderType.Default">
      <summary>
            Indicates that the current render state is the default view type.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RenderType.Edit">
      <summary>
            Indicates that the current render state is for editing.
            </summary>
    </member>
    <member name="F:EPiServer.Core.RenderType.OnPageEdit">
      <summary>
            Indicates that the current render state is for on page inline editing.
            </summary>
    </member>
    <member name="T:EPiServer.Core.TranslateTextValue">
      <summary>
            Simple implementation of ITranslateFormat to support text / value pairs
            </summary>
    </member>
    <member name="M:EPiServer.Core.TranslateTextValue.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.TranslateTextValue" /> class.
            </summary>
      <param name="text">The text.</param>
      <param name="val">The val.</param>
    </member>
    <member name="P:EPiServer.Core.TranslateTextValue.LocalizedText">
      <summary>
            Used to access the text that should be translated.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:EPiServer.Core.TranslateTextValue.StringFormatObjects">
      <summary>
            Set object references if the localized text is a format string with "{n}" style instructions.
            </summary>
      <value>
      </value>
      <remarks>
            Simply return null from the getter if no object references are set.
            </remarks>
    </member>
    <member name="P:EPiServer.Core.TranslateTextValue.Value">
      <summary>
            Gets the value associated with the text.
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:EPiServer.Core.InvalidEmailException">
      <summary>
            Exception that is thrown by EPiServer when a non-fatal error occurs.
            </summary>
      <example>Example of throwing a exception with error message translated into different languages, 
            see <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for more information about adding custom language
            resources.
            <code lang="C#">
            throw new EPiServerException("My custom error","/customerror/genericfail");
            </code></example>
      <remarks>
        <para>All non-fatal exceptions in EPiServer is derived from this class.</para>
        <para>If an exception occurs while translating a message the default message will be displayed instead, 
            otherwise the actual cause of a exception could be hidden.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.InvalidEmailException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.InvalidEmailException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Core.InvalidEmailException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.InvalidEmailException" /> class.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Core.InvalidEmailException.#ctor(System.String)">
      <summary>
            Initializes a new instance with a specified error message.
            </summary>
      <param name="message">Error message</param>
    </member>
    <member name="M:EPiServer.Core.InvalidEmailException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">Error message</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
    </member>
    <member name="M:EPiServer.Core.InvalidEmailException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance with a specified error message and a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
    </member>
    <member name="M:EPiServer.Core.InvalidEmailException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception. 
            And a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
    </member>
    <member name="M:EPiServer.Core.InvalidEmailException.#ctor(System.String,System.String,System.String[])">
      <summary>
            Initializes a new instance with a specified error message and a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="list">Parameter list to substitute values in error text using <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
    </member>
    <member name="M:EPiServer.Core.InvalidEmailException.#ctor(System.String,System.String,System.Exception,System.String[])">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception. 
            And a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
      <param name="list">Parameter list to substitute values in error text using <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
    </member>
    <member name="T:EPiServer.Core.InvalidPasswordException">
      <summary>
            Exception that is thrown by EPiServer when a non-fatal error occurs.
            </summary>
      <example>Example of throwing a exception with error message translated into different languages, 
            see <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for more information about adding custom language
            resources.
            <code lang="C#">
            throw new EPiServerException("My custom error","/customerror/genericfail");
            </code></example>
      <remarks>
        <para>All non-fatal exceptions in EPiServer is derived from this class.</para>
        <para>If an exception occurs while translating a message the default message will be displayed instead, 
            otherwise the actual cause of a exception could be hidden.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.InvalidPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of <see cref="T:EPiServer.Core.InvalidPasswordException" /></summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:EPiServer.Core.InvalidPasswordException.#ctor">
      <summary>
            Initializes a new instance
            </summary>
    </member>
    <member name="M:EPiServer.Core.InvalidPasswordException.#ctor(System.String)">
      <summary>
            Initializes a new instance with a specified error message.
            </summary>
      <param name="message">Error message</param>
    </member>
    <member name="M:EPiServer.Core.InvalidPasswordException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">Error message</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
    </member>
    <member name="M:EPiServer.Core.InvalidPasswordException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance with a specified error message and a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
    </member>
    <member name="M:EPiServer.Core.InvalidPasswordException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception. 
            And a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
    </member>
    <member name="M:EPiServer.Core.InvalidPasswordException.#ctor(System.String,System.String,System.String[])">
      <summary>
            Initializes a new instance with a specified error message and a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="list">Parameter list to substitute values in error text using <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
    </member>
    <member name="M:EPiServer.Core.InvalidPasswordException.#ctor(System.String,System.String,System.Exception,System.String[])">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception. 
            And a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
      <param name="list">Parameter list to substitute values in error text using <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
    </member>
    <member name="T:EPiServer.Core.MissmatchPasswordException">
      <summary>
            Exception that is thrown by EPiServer when a non-fatal error occurs.
            </summary>
      <example>Example of throwing a exception with error message translated into different languages, 
            see <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for more information about adding custom language
            resources.
            <code lang="C#">
            throw new EPiServerException("My custom error","/customerror/genericfail");
            </code></example>
      <remarks>
        <para>All non-fatal exceptions in EPiServer is derived from this class.</para>
        <para>If an exception occurs while translating a message the default message will be displayed instead, 
            otherwise the actual cause of a exception could be hidden.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Core.MissmatchPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of <see cref="T:EPiServer.Core.MissmatchPasswordException" /></summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:EPiServer.Core.MissmatchPasswordException.#ctor">
      <summary>
            Initializes a new instance
            </summary>
    </member>
    <member name="M:EPiServer.Core.MissmatchPasswordException.#ctor(System.String)">
      <summary>
            Initializes a new instance with a specified error message.
            </summary>
      <param name="message">Error message</param>
    </member>
    <member name="M:EPiServer.Core.MissmatchPasswordException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">Error message</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
    </member>
    <member name="M:EPiServer.Core.MissmatchPasswordException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance with a specified error message and a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
    </member>
    <member name="M:EPiServer.Core.MissmatchPasswordException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception. 
            And a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
    </member>
    <member name="M:EPiServer.Core.MissmatchPasswordException.#ctor(System.String,System.String,System.String[])">
      <summary>
            Initializes a new instance with a specified error message and a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="list">Parameter list to substitute values in error text using <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
    </member>
    <member name="M:EPiServer.Core.MissmatchPasswordException.#ctor(System.String,System.String,System.Exception,System.String[])">
      <summary>
            Initializes a new instance with a specified error message and a reference to the inner exception that is the cause of this exception. 
            And a language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation.
            </summary>
      <param name="message">Error message</param>
      <param name="languageKey">Language key passed to <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> for translation</param>
      <param name="innerException">The inner exception that is the cause of this exception</param>
      <param name="list">Parameter list to substitute values in error text using <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
    </member>
    <member name="T:EPiServer.Core.IEnterpriseSettings">
      <summary>
            Defines signatures for handling enterprise configuration settings.
            </summary>
    </member>
    <member name="M:EPiServer.Core.IEnterpriseSettings.GetSettingsFromContent(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Gets the (Enterprise) settings for a content. 
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="fallbackToStartPageId">if set to <c>true</c>, activate fallback to Start page for Settings. See Remarks for more details.</param>
      <returns>A <see cref="T:EPiServer.Configuration.Settings" /> instance for the site that <paramref name="contentLink" /> belongs to.</returns>
      <remarks>
        <para>
            This is done by
            traversing the page tree upwards from current link until a Page which has an Enterprise
            config's StartPage set as current page, or the StartPage of the current IIsInstanceId.
            </para>
        <para>
            If the <paramref name="contentLink" /> is not located beneath a start page, the search will fall back to the Settings instance
            for the current start page if <paramref name="fallbackToStartPageId" /> is set to True. If the search fails and fallbackToStartPageId
            is set to false, the method returns null.
            </para>
      </remarks>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.EnterpriseSettingsExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Core.IEnterpriseSettings" /> with convinent methods.
            </summary>
    </member>
    <member name="M:EPiServer.Core.EnterpriseSettingsExtensions.GetSettingsFromPage(EPiServer.Core.IEnterpriseSettings,EPiServer.Core.ContentReference)">
      <summary>
            Gets the (Enterprise) Settings from a PageReference object. This is done by
            traversing the page tree upwards from pageLink until a Page which has an Enterprise
            config's StartPage set as current page, or the StartPage of the current IIsInstanceId.
            </summary>
      <param name="enterpriseSettings">The page enterprise service.</param>
      <param name="contentLink">The content link.</param>
      <returns>
            An <see cref="T:EPiServer.Configuration.Settings" /> instance
            </returns>
    </member>
    <member name="T:EPiServer.Core.IPageStore">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.IPageStore.GetDefaultPageData(EPiServer.Core.PageReference,System.Int32,EPiServer.Core.ILanguageSelector)">
      <summary>
            Get a PageData object with default values and specify required access level manually.
            </summary>
      <param name="parentPageLink">The parent page of the "virtual" new page.</param>
      <param name="pageTypeID">The page type of the new page.</param>
      <param name="selector">The language to which page should be created</param>
      <returns>A PageData object that contains the default values for a new page of the indicated type that is about to be created under parentPageLink.</returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user does not have enough access right to perform this action.</exception>
    </member>
    <member name="M:EPiServer.Core.IPageStore.GetChildren(EPiServer.Core.PageReference,EPiServer.Core.ILanguageSelector,System.Int32,System.Int32)">
      <summary>
            Retrieve page listing.
            </summary>
      <param name="pageLink">List children of this page</param>
      <param name="selector">Select language for page</param>
      <param name="startIndex">
      </param>
      <param name="maxRows">
      </param>
      <returns>The pages that match the listing criteria</returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user does not have enough access right to perform this action</exception>
    </member>
    <member name="M:EPiServer.Core.IPageStore.GetPage(EPiServer.Core.PageReference,EPiServer.Core.ILanguageSelector)">
      <summary>
            Read a single page.
            </summary>
      <param name="pageLink">The page to read.</param>
      <param name="selector">The language to select</param>
      <returns>A PageData object with the page data.</returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user does not have enough access right to perform this action</exception>
    </member>
    <member name="M:EPiServer.Core.IPageStore.FindPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>
            Search for pages that fulfil specific criteria
            </summary>
      <param name="pageLink">The root page for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <param name="languageBranch">Only search for pages on specific language branch</param>
      <param name="selector">A language selector used to determine the language of pages to return</param>
      <returns>A collection of pages that fulfil the criteras, will be empty if no match is found.</returns>
    </member>
    <member name="M:EPiServer.Core.IPageStore.GetLanguageBranches(EPiServer.Core.PageReference)">
      <summary>
            Get all language branches for a page from database.
            </summary>
      <param name="pageLink">The page to read.</param>
      <returns>A collection of pages that contains the found language branches.</returns>
    </member>
    <member name="M:EPiServer.Core.IPageStore.CreateLanguageBranch(EPiServer.Core.PageReference,EPiServer.Core.ILanguageSelector)">
      <summary>
            Create a page language in database.
            </summary>
      <param name="pageLink">The link to the page to create a language branch for.</param>
      <param name="selector">The language to create.</param>
      <returns>A PageData object with the newly created page data.</returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user does not have enough access right to perform this action</exception>
    </member>
    <member name="M:EPiServer.Core.IPageStore.DeleteLanguageBranch(EPiServer.Core.PageReference,System.String)">
      <summary>
            Delete a page language from database
            </summary>
      <param name="pageLink">The link to the page which will be deleted</param>
      <param name="languageBranch">The language branch to delete</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user doesnt have enough access right to perform this action</exception>
      <remarks>You cannot delete the master language branch</remarks>
    </member>
    <member name="M:EPiServer.Core.IPageStore.DeleteVersion(EPiServer.Core.PageReference)">
      <summary>
            Delete a single version of a page
            </summary>
      <param name="pageLink">Link to the page and version which will be deleted</param>
      <remarks>The published version of page cannot be deleted</remarks>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user does not have enough access right to perform this action</exception>
    </member>
    <member name="M:EPiServer.Core.IPageStore.Delete(EPiServer.Core.PageReference,System.Boolean)">
      <summary>
            Delete a page from database
            </summary>
      <param name="pageLink">The link to the page which will be deleted</param>
      <param name="forceDelete">Delete page even if being linked by other pages</param>
      <returns>True if the delete was successful</returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user doesnt have enough access right to perform this action</exception>
    </member>
    <member name="M:EPiServer.Core.IPageStore.DeleteChildren(EPiServer.Core.PageReference,System.Boolean)">
      <summary>
            Delete children of a page from database.
            </summary>
      <param name="pageLink">The children of this page will be deleted.</param>
      <param name="forceDelete">Delete page even if referenced by other pages.</param>
      <returns>True if the delete was successful</returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user does not have enough access right to perform this action</exception>
    </member>
    <member name="M:EPiServer.Core.IPageStore.Move(EPiServer.Core.PageReference,EPiServer.Core.PageReference)">
      <summary>
            Move a page to another container
            </summary>
      <param name="pageLink">The link to the page to move</param>
      <param name="destinationLink">The container to which the page will be moved</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user does not have enough access right to perform this action.</exception>
    </member>
    <member name="M:EPiServer.Core.IPageStore.MoveToWastebasket(EPiServer.Core.PageReference)">
      <summary>
            Move a page to the Wastebasket
            </summary>
      <param name="pageLink">The link to the page to move</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user does not have 
            enough access right to perform this action.</exception>
      <remarks>
            Moves a page from its current location into the Recycle Bin.
            This is the same as doing:
            <code>
            Move(pageLink, EPiServer.Global.EPConfig.Wastebasket, AccessLevel.Delete, AccessLevel.NoAccess);
            </code><b>Note:</b>  You need Delete access to the page that is being moved.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.IPageStore.Copy(EPiServer.Core.PageReference,EPiServer.Core.PageReference,System.Boolean,System.Boolean)">
      <summary>
            Copy a page to another container.
            </summary>
      <param name="pageLink">The link to the page to copy.</param>
      <param name="destinationLink">The container where the page will be copied</param>
      <param name="publishOnDestination">If the new pages should be published on the destination</param>
      <param name="allowThreading">Run the local copy process on a separate thread (don't work for remote sites).</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            	Thrown when user doesnt have enough access right to perform this action
            </exception>
      <remarks>
            	Note, when a page is copied successfully the <see cref="E:EPiServer.Core.IContentEvents.CreatedContent" /> event is fired,
            	since a page is created in the copy process. But in contrast to the Save method, that also
            	fires the CreatedPage method and always passes an initialized PageData object in the 
            	<see cref="T:EPiServer.PageEventArgs" /> object to the event handler, the Copy method does not.
            	Instead it only passes a pagereference to the copied page and it is up to the handler to 
            	load the page data. The reason for this behavior in the Copy method is performance.
            </remarks>
    </member>
    <member name="M:EPiServer.Core.IPageStore.Save(EPiServer.Core.PageData,EPiServer.DataAccess.SaveAction)">
      <summary>
            Save page to database and specify required access level manually.
            </summary>
      <param name="page">A initalized <see cref="T:EPiServer.Core.PageData" /> object containing data to be saved</param>
      <param name="action">Action that will be performed</param>
      <remarks>If PageLink is empty a new page will be created</remarks>
      <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown when user doesnt have enough access right to perform this action</exception>
    </member>
    <member name="M:EPiServer.Core.IPageStore.ListVersions(EPiServer.Core.PageReference,System.String)">
      <summary>
            Lists all versions for a page for a specific language
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns> All matching versions</returns>
    </member>
    <member name="M:EPiServer.Core.IPageStore.ListVersions(EPiServer.Core.PageReference)">
      <summary>
            Lists all versions
            </summary>
      <param name="pageLink">The page link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IPageStore.ListPublishedVersions(EPiServer.Core.PageReference)">
      <summary>
            Lists the published versions
            </summary>
      <param name="pageLink">The page link.</param>
      <returns>All published versions for the page</returns>
    </member>
    <member name="M:EPiServer.Core.IPageStore.LoadVersion(EPiServer.Core.PageReference)">
      <summary>
            Loads the version.
            </summary>
      <param name="pageLink">The page link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IPageStore.LoadPublishedVersion(EPiServer.Core.PageReference)">
      <summary>
            Loads the published version (if the it is a MasterLanguageBranch).
            </summary>
      <param name="pageLink">The page link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IPageStore.LoadPublishedVersion(EPiServer.Core.PageReference,System.String)">
      <summary>
            Loads the published version a page with specific language Branch
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Core.IPageStore.ListDelayedPublish">
      <summary>
            Lists all pages that are set to delayed publish.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Core.PropertyDataExtension">
      <summary>
            Extends <see cref="T:EPiServer.Core.PropertyData" /> with convenient methods
            </summary>
    </member>
    <member name="M:EPiServer.Core.PropertyDataExtension.CreatePropertyControl(EPiServer.Core.PropertyData)">
      <summary>
            Creates an <see cref="T:EPiServer.Core.IPropertyControl" /> that is used to display a user interface for the property.
            </summary>
      <returns>An <see cref="T:EPiServer.Core.IPropertyControl" /> that is used to display a user interface for the property.</returns>
      <remarks>It is possible to change which control should be used by registering a different <see cref="T:EPiServer.Core.IPropertyControl" /> for the <see cref="T:EPiServer.Core.PropertyData" /> class in <see cref="T:EPiServer.Core.PropertyControlClassFactory" />.</remarks>
    </member>
    <member name="M:EPiServer.Core.PropertyDataExtension.GetSetting(EPiServer.Core.PropertyData,System.Type)">
      <summary>
            Gets a custom settings object if specified by either PropertyDefinition or PropertyControl.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Core.PropertyDataExtension.ReplaceHtmlLinks(EPiServer.Core.PropertyData,System.String,EPiServer.Core.PropertyData.TranslateUri)">
      <summary>
            Replaces the HTML links.
            </summary>
      <returns>A string where the html links have been replaced.</returns>
    </member>
    <member name="T:EPiServer.Core.SignalReason">
      <exclude />
    </member>
    <member name="F:EPiServer.Core.SignalReason.Success">
      <summary>
            The signal was raised as part of normal execution.
            </summary>
    </member>
    <member name="F:EPiServer.Core.SignalReason.Failure">
      <summary>
            The event was signalled due to exceptions in the execution flow or other abnormal conditions.
            </summary>
      <remarks>
            If this state is reported after a Wait, the recommended approach is to retry the operation again.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.SignalReason.NotFound">
      <summary>
            The Wait was for fetching information from backing store, but the item did not exist.
            </summary>
      <remarks>
            If this state is reported after wait, return and indicate that item is mssing.
            </remarks>
    </member>
    <member name="F:EPiServer.Core.SignalReason.Timeout">
      <summary>
            The event was signalled due to that the specified timeout elapsed.
            </summary>
    </member>
    <member name="T:EPiServer.Core.RefCountedEvent">
      <exclude />
    </member>
    <member name="M:EPiServer.Core.RefCountedEvent.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.RefCountedEvent" /> class.
            </summary>
      <param name="context">The context for the instance.</param>
    </member>
    <member name="M:EPiServer.Core.RefCountedEvent.#ctor(System.Int32,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.RefCountedEvent" /> class.
            </summary>
      <param name="millisecondsTimeout">The timeout in milliseconds.</param>
      <param name="context">The context for the instance.</param>
    </member>
    <member name="M:EPiServer.Core.RefCountedEvent.Wait">
      <summary>
            Enter wait state for calling thread.
            </summary>
      <returns>Reason for the outcome of the wait operation.</returns>
    </member>
    <member name="P:EPiServer.Core.RefCountedEvent.Context">
      <summary>
            Gets the context for which the instance was created with.
            </summary>
      <value>The context.</value>
    </member>
    <member name="M:EPiServer.Core.RefCountedEvent.Signal">
      <summary>
            Signals the event with Success reason.
            </summary>
    </member>
    <member name="M:EPiServer.Core.RefCountedEvent.Signal(EPiServer.Core.SignalReason)">
      <summary>
            Signals the event with specified reason.
            </summary>
      <param name="reason">The reason.</param>
    </member>
    <member name="M:EPiServer.Core.RefCountedEvent.CacheRemovalCallback(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
      <summary>
            If passed in value is an <see cref="T:EPiServer.Core.RefCountedEvent" /> instance, that instace is signalled with Failure
            reason indicating that the value was evicted from cache so waiting threads are released.
            </summary>
      <param name="key">The cache key for the object that was evicted.</param>
      <param name="value">The cached object that was evicted.</param>
      <param name="reason">The reason for the cache removal.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.ContentStore">
      <summary>
            Abstractions for loading data directly from the database bypassing the provider system, supports the ClonedContentProvider shipped with CMS 7-9
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Core.Internal.DefaultContentProviderDatabase" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.Load(EPiServer.Core.ContentReference,System.Int32)">
      <summary>
            Loads the content.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranchID">The language branch ID.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.LoadVersion(EPiServer.Core.ContentReference)">
      <summary>
            Loads the version.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.LoadVersion(EPiServer.Core.ContentReference,System.Int32)">
      <summary>
            Loads the version.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranchID">The language branch ID.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.ListContentOfContentType(EPiServer.DataAbstraction.ContentType,System.Boolean)">
      <summary>
            Lists the contents of the content type.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="onlyPublished">if set to <c>true</c> [only published].</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.IsContentTypeUsed(EPiServer.DataAbstraction.ContentType,System.Boolean)">
      <summary>
            Checks if a content type is used.
            </summary>
      <param name="contentType">Type of the content.</param>
      <param name="onlyPublished">if set to <c>true</c> only published content is checked.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.ListAll(EPiServer.Core.ContentReference)">
      <summary>
            Lists all.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.ListAll(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Lists all.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.ListAll">
      <summary>
            Lists all.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.CountDescendants(EPiServer.Core.ContentReference)">
      <summary>
            Counts the descendants.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.LoadChildrenReferencesAndTypes(System.Int32,System.String,EPiServer.Filters.FilterSortOrder@)">
      <summary>
            load content references and content types
            </summary>
      <param name="contentID">
      </param>
      <param name="languageID">
      </param>
      <param name="parentSortOrder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.LoadSpecificContentInstances(System.Collections.Generic.IList{EPiServer.Core.ContentReference},System.Int32)">
      <summary>
            Loads the specific content instances.
            </summary>
      <param name="contentLinks">The content links.</param>
      <param name="languageBranchID">The language branch ID.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.LoadSpecificContentVersions(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
      <summary>
            Batch loads specific versions of content.
            </summary>
      <remarks>
        <see cref="P:EPiServer.Core.ContentReference.WorkID" /> must be set on all versions otherwise <see cref="T:System.ArgumentException" /> is thrown.
            </remarks>
      <param name="contentLinks">The versions to load.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ContentStore.ListMatchingSegments(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Lists references to all children content items that have matching routing/url segments.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.ProjectResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves which projects that are active accoring to request.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.ProjectResolver.#ctor(EPiServer.Web.Internal.QueryParameterResolver,EPiServer.Web.Internal.ContextModeResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance of <see cref="T:EPiServer.DataAbstraction.Internal.ProjectResolver" />.
            </summary>
      <param name="queryParameterResolver">The query parameter resolver used.</param>
      <param name="contextModeResolver">The context mode resolver.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.ProjectResolver.GetCurrentProjects">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves which projects that are active according to request.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.Internal.DefaultTemplateRepository">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Repository for template information objects for render templates.
            </summary>
      <remarks>
            The repository is registered as Singleton in IOC container meaning you should not create new instances directly but instead get 
            instance from IOC container or preferably have it as a dependency in constructor and let the container create instances of the dependent class.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultTemplateRepository.#ctor(EPiServer.DataAbstraction.RuntimeModel.ITemplateModelComparerFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.Internal.DefaultTemplateRepository" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultTemplateRepository.AddTemplates(System.Type,EPiServer.DataAbstraction.TemplateModel[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers one or many templates for the provided model type.
            </summary>
      <param name="modelType">Type of the model that the template should be registered for.</param>
      <param name="templates">The templates that should be registered.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultTemplateRepository.AddModelType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers a model type to the repository.
            </summary>
      <remarks>
            During registration the inheritance chain will be traversed for <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> that are registered
            for base types and marked as Inherited.
            </remarks>
      <param name="modelType">Type of the model.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultTemplateRepository.List(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> for a type.
            </summary>
      <param name="modelType">Type of the model.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultTemplateRepository.RemoveTemplate(System.Type,EPiServer.DataAbstraction.TemplateModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes a <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> that has been registered for the specified model type.
            </summary>
      <param name="modelType">Type of the model.</param>
      <param name="template">The template model that should be removed.</param>
      <returns>true if the <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> existed and was removed, if it not existed false is returned</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.Internal.DefaultTemplateRepository.ClearCache(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clears the cache for all types that inherits from the specified model type.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ViewRegistrator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Scan views for partial block views.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ViewRegistrator.#ctor(EPiServer.Framework.TypeScanner.ITypeScannerLookup,EPiServer.DataAbstraction.RuntimeModel.IContentTypeModelScanner[],EPiServer.DataAbstraction.ITemplateRepository,EPiServer.Web.Mvc.CachingViewEnginesWrapper)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.ViewRegistrator" /> class.
            </summary>
      <param name="typeScannerLookup">The type scanner lookup.</param>
      <param name="contentTypeModelScanner">The content type model scanner.</param>
      <param name="templateModelRepository">The render template repository.</param>
      <param name="viewEngineWrapper">The view engine wrapper.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ViewRegistrator.RegisterViews(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers the scanned views in the <see cref="T:EPiServer.DataAbstraction.TemplateModelRepository" />.
            </summary>
      <param name="contextBase">The context base.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.ViewRegistrator.RegisterTemplate(System.Type,EPiServer.DataAbstraction.TemplateModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called when a template given by <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> is registered for a <see cref="T:System.Type" />.
            </summary>
      <param name="modelType">Type of the model.</param>
      <param name="templateModel">The template model.</param>
      <exception cref="T:System.NotSupportedException">
      </exception>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.Internal.TemplateModelComparerFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory class responsible for creating a <see cref="T:System.Collections.Generic.IComparer`1" /> for a specific model type.
            </summary>
      <remarks>
            The default implementation will create a comparer that looks at the inheritance chain for where the <see cref="T:EPiServer.Web.IRenderTemplate`1" />
            for the model type is implemented. And then compare the generic types in the inheritance chain and sort so the model with "shortest" 
            inheritance is inserted before in list. If no <see cref="T:EPiServer.Web.IRenderTemplate`1" /> is found (e.g. when explicitly registered partial MVC view) 
            it will be considered prioritized, e.g. inserted before the other item in the list.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.TemplateModelComparerFactory.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.TemplateModelComparerFactory" /> class.
            </summary>
      <remarks>
            Provided for use when testing or overriding the default implementation.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.TemplateModelComparerFactory.#ctor(EPiServer.Framework.TypeScanner.TypeRelater)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.Internal.TemplateModelComparerFactory" /> class.
            </summary>
      <param name="typeRelater">The type relater.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.Internal.TemplateModelComparerFactory.Create(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new <see cref="T:System.Collections.Generic.IComparer`1" /> for the specified model type.
            </summary>
      <param name="modelType">Type of the model that the comparison should be made on.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IRenderTemplateScanner">
      <summary>
            Defines the signature for a component that gets the list of supported renderers for a model type.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IRenderTemplateScanner.RegisterScannedRenders">
      <summary>
            Registers the scanned renders with <see cref="T:EPiServer.DataAbstraction.TemplateModelRepository" />.
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.IViewRegistrator">
      <summary>
            Registrates partial views
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.IViewRegistrator.RegisterViews(System.Web.HttpContextBase)">
      <summary>
            Registers the partial views.
            </summary>
      <param name="contextBase">The context base.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.RenderTemplateScanner">
      <summary>
            Default implementation of <see cref="T:EPiServer.DataAbstraction.RuntimeModel.IRenderTemplateScanner" />. This implementation locates all classes that implements <see cref="T:EPiServer.Web.IRenderTemplate`1" /> and
            registers them.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.RenderTemplateScanner.#ctor(EPiServer.Web.ITemplatePathResolver,EPiServer.Framework.TypeScanner.ITypeScannerLookup,EPiServer.DataAbstraction.ITemplateRepository,EPiServer.Framework.Modules.IModuleResourceResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.RuntimeModel.RenderTemplateScanner" /> class.
            </summary>
      <param name="templatePathResolver">The template path resolver.</param>
      <param name="typeScannerLookup">The scanned type repository.</param>
      <param name="templateModelRepository">The render template repository.</param>
      <param name="resourcePathResolver">The resource path resolver.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.RenderTemplateScanner.RegisterScannedRenders">
      <summary>
            Registers any render templates found by type scanner in the <see cref="T:EPiServer.DataAbstraction.ITemplateRepository" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.RenderTemplateScanner.RegisterTemplate(System.Type,EPiServer.DataAbstraction.TemplateModel[])">
      <summary>
            Called to register a model and the templates
            </summary>
      <param name="modelType">The model type</param>
      <param name="templates">A list of templates</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.RenderTemplateScanner.GetRenderTypes">
      <summary>
            Get a list of all types matching the basic rendering template requirements.
            </summary>
      <returns>A list of non-abstract types that implements <see cref="T:EPiServer.Web.IRenderTemplate" /> and that not has any unspecified generic type parameters.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.RenderTemplateScanner.GetAllTemplates">
      <summary>
            Gets all templates found in the system scan.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.RenderTemplateScanner.GetTemplates(System.Type)">
      <summary>
            Get all templates for the specified template type
            </summary>
    </member>
    <member name="T:EPiServer.DataAbstraction.RuntimeModel.ITemplateModelComparerFactory">
      <summary>
            Factory responsible for creating a <see cref="T:System.Collections.Generic.IComparer`1" /> for a specific model type.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.RuntimeModel.ITemplateModelComparerFactory.Create(System.Type)">
      <summary>
            Creates a new <see cref="T:System.Collections.Generic.IComparer`1" /> for the specified model type.
            </summary>
      <param name="modelType">Type of the model that the comparison should be made on.</param>
      <returns>A comparer that can be used to sort <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> instances.</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.TemplateModelSelector">
      <summary>
            Selects which <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> that should be used for a certain request.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelSelector.GetDefault(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.TemplateModel})">
      <summary>
            Gets the default template from the <paramref name="templates" /> collection.
            </summary>
      <param name="templates">The collection of templates to be evaulated.</param>
      <returns>
      </returns>
      <remarks>
            The default template is selected according to the following priority order. If an MVC template and a Web Form
            template are found at the same priority level the MVC renderer is returned.
            <list type="bullet"><item>Default-marked template that is not inherited.</item><item>Default-marked template regardless of inheritance.</item><item>Any template found.</item></list></remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelSelector.GetDefault(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.TemplateModel},System.Collections.Generic.IList{EPiServer.Web.DisplayChannel})">
      <summary>
            Gets the default template from the <paramref name="templates" /> collection.
            </summary>
      <param name="templates">The collection of templates to be evaulated.</param>
      <param name="activeChannels">The active channels.</param>
      <returns>
      </returns>
      <remarks>
            The default template is selected according to the following priority order. A <see cref="T:EPiServer.DataAbstraction.TemplateModel" />
            that has a tag that matches an active channel i s preferred. If an MVC template and a Web Form
            template are found at the same priority level the MVC renderer is returned.
            <list type="bullet"><item>Default-marked template that is not inherited.</item><item>Default-marked template regardless of inheritance.</item><item>Any template found.</item></list></remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelSelector.GetDefault(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.TemplateModel},System.Collections.Generic.IList{EPiServer.Web.DisplayChannel},System.Boolean)">
      <summary>
            Gets the default template from the <paramref name="templates" /> collection.
            </summary>
      <param name="templates">The templates.</param>
      <param name="activeChannels">The active channels.</param>
      <param name="filterOnAvailableWithoutTag">if set to <c>true</c> all templates that has <see cref="P:EPiServer.DataAbstraction.TemplateModel.AvailableWithoutTag" /> set 
            to false will be filtered away.</param>
      <returns>
      </returns>
      <remarks>
            The default template is selected according to the following priority order. A <see cref="T:EPiServer.DataAbstraction.TemplateModel" />
            that has a tag that matches an active channel i s preferred. If an MVC template and a Web Form
            template are found at the same priority level the MVC renderer is returned.
            <list type="bullet"><item>Default-marked template that is not inherited.</item><item>Default-marked template regardless of inheritance.</item><item>Any template found.</item></list></remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelSelector.SelectTemplate(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.TemplateModel},System.Collections.Generic.IList{EPiServer.Web.DisplayChannel},System.Boolean,EPiServer.DataAbstraction.TemplateModel)">
      <summary>
            Gets the default template from the <paramref name="templates" /> collection.
            </summary>
      <param name="templates">The templates.</param>
      <param name="activeChannels">The active channels.</param>
      <param name="filterOnAvailableWithoutTag">if set to <c>true</c> all templates that has <see cref="P:EPiServer.DataAbstraction.TemplateModel.AvailableWithoutTag" /> set
            to false will be filtered away.</param>
      <param name="preferredModel">The preferred model that is returned unless any active channel matches a template.</param>
      <returns>
      </returns>
      <remarks>
            The default template is selected according to the following priority order. A <see cref="T:EPiServer.DataAbstraction.TemplateModel" />
            that has a tag that matches an active channel i s preferred. If an MVC template and a Web Form
            template are found at the same priority level the MVC renderer is returned.
            <list type="bullet"><item>Default-marked template that is not inherited.</item><item>Default-marked template regardless of inheritance.</item><item>Any template found.</item></list></remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelSelector.SelectTemplate(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.TemplateModel},System.Boolean)">
      <summary>
            Gets the default template from the <paramref name="templates" /> collection.
            </summary>
      <param name="templates">The collection of templates to be evaulated.</param>
      <param name="filterOnAvailableWithoutTag">if set to <c>true</c> all templates that has <see cref="P:EPiServer.DataAbstraction.TemplateModel.AvailableWithoutTag" /> set
            to false will be filtered away.</param>
      <returns>
      </returns>
      <remarks>
            The default template is selected according to the following priority order. If an MVC template and a Web Form
            template are found at the same priority level the MVC renderer is returned.
            <list type="bullet"><item>Default-marked template that is not inherited.</item><item>Default-marked template regardless of inheritance.</item><item>Any template found.</item></list></remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.IWorkflowTaskRepository">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.IWorkflowTaskRepository.List(System.Security.Principal.IPrincipal)">
      <summary>
            Lists all tasks that related to the specified user name.
            </summary>
      <param name="user">Name of the user.</param>
      <returns>Collection of Task object</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.LanguageBranchExtensions">
      <summary>
            Represents a language that can be used in globalized solutions.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.LanguageBranchExtensions.SystemIconPath(EPiServer.DataAbstraction.LanguageBranch)">
      <summary>
             Path to icon used for admin and edit.
             </summary>
      <remarks>This property is not to be used outside admin/edit.
             Uses ThemeUtility.GetImageThemeUrl to get Icon path.
             </remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.TemplateModelRepository">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelRepository.RegisterTemplate(EPiServer.DataAbstraction.TemplateModel)">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelRepository.RegisterTemplate(System.Type,EPiServer.DataAbstraction.TemplateModel[])">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelRepository.RegisterModelType(System.Type)">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelRepository.List(System.Type)">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelRepository.UnregisterTemplate(System.Type,EPiServer.DataAbstraction.TemplateModel)">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelRepository.EPiServer#DataAbstraction#ITemplateRepository#List(System.Type)">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelRepository.EPiServer#DataAbstraction#ITemplateRepository#AddModelType(System.Type)">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelRepository.EPiServer#DataAbstraction#ITemplateRepository#AddTemplates(System.Type,EPiServer.DataAbstraction.TemplateModel[])">
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelRepository.EPiServer#DataAbstraction#ITemplateRepository#RemoveTemplate(System.Type,EPiServer.DataAbstraction.TemplateModel)">
      <exclude />
    </member>
    <member name="T:EPiServer.DataAbstraction.WorkflowTaskRepository">
      <summary>
            Default implementaion of <see cref="T:EPiServer.DataAbstraction.IWorkflowTaskRepository" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.WorkflowTaskRepository.#ctor(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAccess.Internal.TaskDB})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataAbstraction.WorkflowTaskRepository" /> class.
            </summary>
      <param name="taskDataAccess">The task data access.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAbstraction.WorkflowTaskRepository.List(System.Security.Principal.IPrincipal)">
      <summary>
            Gets all tasks which the principal has permission to view.
            </summary>
      <param name="user">The principal to list tasks for.</param>
      <returns>Collection of Task objects</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.ITemplateRepository">
      <summary>
            Repository for template information.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITemplateRepository.List(System.Type)">
      <summary>
            Gets a list of all <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> for a given model type.
            </summary>
      <param name="modelType">Type of the model.</param>
      <returns>A list of all templates registered.</returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITemplateRepository.AddModelType(System.Type)">
      <summary>
            Adds a model type to the repository.
            </summary>
      <remarks>
                Adding a model type ensures that any templates marked as inherited are registered against this type when 
                registered for an inherited model type.
            </remarks>
      <param name="modelType">Type of the model.</param>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITemplateRepository.AddTemplates(System.Type,EPiServer.DataAbstraction.TemplateModel[])">
      <summary>
            Adds one or many templates for the provided model type.
            </summary>
      <param name="modelType">The primary model type that the template should be registered for.</param>
      <param name="templates">The templates that should be registered.</param>
      <remarks>
                Each template that is marked as inherited will not only be registered for the provided model type, but also
                for any other added model type added to the current repository.
            </remarks>
    </member>
    <member name="M:EPiServer.DataAbstraction.ITemplateRepository.RemoveTemplate(System.Type,EPiServer.DataAbstraction.TemplateModel)">
      <summary>
            Removes a <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> that has been registered for the specified model type.
            </summary>
      <param name="modelType">Type of the model.</param>
      <param name="template">The template model that should be removed.</param>
      <returns>true if the <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> existed and was removed, if it not existed false is returned</returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.TemplateModelRepositoryExtensions">
      <summary>
            Provides extension methods for the <see cref="T:EPiServer.DataAbstraction.ITemplateRepository" /> interface.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelRepositoryExtensions.AddTemplate(EPiServer.DataAbstraction.ITemplateRepository,EPiServer.DataAbstraction.TemplateModel)">
      <summary>
            Registers a template for the model type specified by the <see cref="P:EPiServer.DataAbstraction.TemplateModel.ModelType" /> property of the template.
            </summary>
      <param name="repository">The repository that is extended</param>
      <param name="template">The template that should be registered.</param>
    </member>
    <member name="T:EPiServer.DataAbstraction.TemplateModel">
      <summary>
            Model describing a template.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.Name">
      <summary>
            Gets or sets the name of the template.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.DisplayName">
      <summary>
            Gets or sets the display name.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.Description">
      <summary>
            Gets or sets a text describing the template.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.Inherit">
      <summary>
            Gets or sets a value indicating whether this template can be inherited by other types.
            </summary>
      <value>
        <c>true</c> if the template can be inherited; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModel.IsInherited">
      <summary>
            Determines whether the template is inherited from another model type by setting the <see cref="P:Inherit" /> property when registering the template.
            </summary>
      <returns>
        <c>true</c> if this instance has been inherited from another model type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModel.MarkAsInherited">
      <summary>
            Sets the flag that indicates that this <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> was primarily registered for another model type and is inherited.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.ModelType">
      <summary>
            Gets or sets the type of the model that the template was registered for.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.TemplateType">
      <summary>
            Gets or sets the type of the template class that will render the model type.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.TemplateTypeCategory">
      <summary>
            Gets or sets the category of the type of the template.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.AvailableWithoutTag">
      <summary>
            Gets or sets a value indicating whether the renderer should be available even when no specific tag is requested.
            </summary>
      <value>
        <c>true</c> if renderer is available without tag specified; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.Tags">
      <summary>
            Gets or sets the supperted tags of the render.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModel.ToString">
      <inherit-doc />
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.Path">
      <summary>
            Gets or sets the path to the render.
            </summary>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.Default">
      <summary>
            Gets or sets a value indicating whether this template should be the default rendering template.
            </summary>
      <value>
        <c>true</c> if this template is a default template; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModel.CreateWritableClone">
      <summary>
            Creates the writable clone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModel.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
      <summary>
            Creates the writable clone.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.DataAbstraction.TemplateModel.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModel.MakeReadOnly">
      <summary>
            Makes the instance read only.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModel.ThrowIfReadOnly">
      <summary>
            Throws an <see cref="T:System.NotSupportedException" /> if this instance is set to read only.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelEqualityComparer.Equals(EPiServer.DataAbstraction.TemplateModel,EPiServer.DataAbstraction.TemplateModel)">
      <summary>
            Compares the property values of two <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> instances to check for equality.
            </summary>
      <remarks>
            The inherited and read only statuses are not considered in the comparison.
            </remarks>
    </member>
    <member name="T:EPiServer.DataAbstraction.TemplateModelsExtension">
      <summary>
            Extension methods for lists of <see cref="T:EPiServer.DataAbstraction.TemplateModel" />.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateModelsExtension.OfCategory(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.TemplateModel},EPiServer.Framework.Web.TemplateTypeCategories)">
      <summary>
            Filters the templates according to the specified <paramref name="categories" />.
            </summary>
      <param name="templates">The templates.</param>
      <param name="categories">The categories.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.DataAbstraction.TemplateTypeCategoriesExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Framework.Web.TemplateTypeCategories" /> with common checks.
            </summary>
    </member>
    <member name="M:EPiServer.DataAbstraction.TemplateTypeCategoriesExtensions.IsCategory(EPiServer.Framework.Web.TemplateTypeCategories,EPiServer.Framework.Web.TemplateTypeCategories)">
      <summary>
            Determines whether the type is one of the provided type categories.
            </summary>
      <param name="subject">The subject.</param>
      <param name="typeCategories">Type of templates to check for.</param>
      <returns>
        <c>true</c> if the specified type is contained in the provided types; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.DataFactory">
      <summary>
            Legacy data source in EPiServer CMS. This API has been replaced by the <see cref="T:EPiServer.IContentRepository" />,
            <see cref="T:EPiServer.Core.IContentEvents" /> and a number of related interfaces.
            </summary>
      <seealso cref="T:EPiServer.IContentRepository" />
    </member>
    <member name="F:EPiServer.DataFactory._instance">
      <summary>
            Points to the global instance of data factory
            </summary>
    </member>
    <member name="P:EPiServer.DataFactory.Instance">
      <summary>
            Gets the global instance of data factory
            </summary>
    </member>
    <member name="M:EPiServer.DataFactory.#ctor(EPiServer.Core.Internal.DefaultContentEvents)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.DataFactory" /> class.
            </summary>
      <param name="eventsHandler">The event handler.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.Initialize(EPiServer.Configuration.EPiServerSection)">
      <summary>
            Initializes the provider map and permanent link mapper using data factory.
            </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="P:EPiServer.DataFactory.PermanentLinkMapper">
      <summary>
            Gets the permanent link mapper.
            </summary>
      <value>The permanent link mapper.</value>
    </member>
    <member name="P:EPiServer.DataFactory.ProviderMap">
      <summary>
            Gets the mapping of Content providers.
            </summary>
      <value>The provider map.</value>
      <remarks>
            The Provider map contains mapping of the remote site information to IPageStore implementations.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.HasEntryPointChild(EPiServer.Core.ContentReference)">
      <summary>
            Check if this content reference is or has entry point as child.
            </summary>
      <param name="contentLink">
      </param>
      <returns>true if content itself or some of it's descendants is an entry point to a content provider</returns>
    </member>
    <member name="M:EPiServer.DataFactory.GetProvider(EPiServer.Core.ContentReference)">
      <summary>
            Gets the content provider for a provider name.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            The content provider as an <see cref="T:EPiServer.Core.ContentProvider" />.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.GetProvider(System.String)">
      <summary>
            Gets the content provider for a provider name.
            </summary>
      <param name="providerName">Name of the provider.</param>
      <returns>
            The content provider as an <see cref="T:EPiServer.Core.ContentProvider" />.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.IsCapabilitySupported(EPiServer.Core.ContentReference,EPiServer.Core.ContentProviderCapabilities)">
      <summary>
            Determines whether the page provider serving the specified page has the specified capability.
            </summary>
      <param name="contentLink">The page link.</param>
      <param name="capability">The capability.</param>
      <returns>
        <c>true</c> if the provider supprots the specified capability; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.IsWastebasket(EPiServer.Core.ContentReference)">
      <summary>
            Determines whether the specified page link is wastebasket for any page provider
            </summary>
      <param name="contentLink">The page link.</param>
      <returns>
        <c>true</c> if the specified page link is a wastebasket; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.ResolvePageFolder(System.Int32)">
      <summary>
            Resolves the page folder.
            </summary>
      <param name="pageFolderId">The page folder id.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.ResolveContentFolder(System.Int32)">
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentModelUsage#ListContentOfContentType(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Gets a list of references to pages of specified <see cref="T:EPiServer.DataAbstraction.PageType" />.
            <para>
            This method is for example called before a page type defined in code is deleted.
            </para></summary>
      <param name="contentType">The contentType to return references for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentModelUsage#ListContentWithPropertyDefinition(EPiServer.DataAbstraction.PropertyDefinition,System.Boolean,System.Boolean)">
      <summary>
            Gets the pages with instance of page definition.
            <para>
            This method is for example called before a page definition defined in code is deleted.
            </para></summary>
      <param name="propertyDefinition">The property definition.</param>
      <param name="onlyNoneMasterLanguage">if set to <c>true</c> only none master language are taken into account.</param>
      <param name="onlyPublished">if set to <c>true</c> only published versions are taken into account.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentModelUsage#IsContentTypeUsed(EPiServer.DataAbstraction.ContentType)">
      <summary>
            Performs a check if specified <see cref="T:EPiServer.DataAbstraction.ContentType" /> is used.
            <para>
            This method is for example called before a content type defined in code is deleted.
            </para></summary>
      <param name="contentType">The contentType to return references for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentModelUsage#IsPropertyDefinitionUsed(EPiServer.DataAbstraction.PropertyDefinition)">
      <summary>
            Performs a check if specified <see cref="T:EPiServer.DataAbstraction.PropertyDefinition" /> is used.
            <para>
            This method is for example called before a property definition type defined in code is deleted.
            </para></summary>
      <param name="propertyDefinition">The property definition.</param>
      <returns>
        <c>true</c> if property definition is used; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.DataFactory.CurrentPage">
      <summary>
            Get data for the current page.
            </summary>
      <value>The PageData object.</value>
      <remarks>
            This IPageSource implementation simply returns null since DataFactory has
            no concept of a "current" page.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetChildren(EPiServer.Core.PageReference)">
      <summary>
            Retrieve page listing.
            </summary>
      <param name="pageLink">The page that you want to list the children to.</param>
      <returns>All children to the given page.</returns>
      <remarks>This methods does not filter any pages due to access rights, but it will filter pages not published for the preferred culture</remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetPage(EPiServer.Core.PageReference)">
      <summary>
            Retrives a single page from the repository using the language selector retrieved from the current context.
            </summary>
      <param name="pageLink">A reference to the page that you want to retrieve.</param>
      <remarks>
            The retrieved page will be read-only.
            </remarks>
      <returns>
            A read-only <see cref="T:EPiServer.Core.PageData" /> object containing the page data.
            </returns>
      <exception cref="T:EPiServer.Core.PageNotFoundException">
            Throws a <see cref="T:EPiServer.Core.PageNotFoundException" /> if the page does not exist.
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetPages(System.Collections.Generic.IList{EPiServer.Core.PageReference},EPiServer.Core.LoaderOptions)">
      <summary>
            Retrives a collection of pages from the repository in the language determined by the provided loader settings.
            </summary>
      <param name="pageLinks">A list of references to the pages to retrieved.</param>
      <param name="loaderOptions">An <see cref="T:EPiServer.Core.LoaderOptions" /> that will be used to for example determine the language to retrieve the pages in.</param>
      <returns>
            A collection of read-only <see cref="T:EPiServer.Core.PageData" /> objects.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Globalization.CultureInfo)">
      <summary>
            Gets all content items that is represented by the provided references given the language.
            </summary>
      <remarks>
        <para>
            For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
            <paramref name="language" /> is ignored and that specific version is returned.
            </para>
        <para>
             If <paramref name="contentLinks" /> contain duplicate entries only one <see cref="T:EPiServer.Core.IContent" /> instance is returned for the duplicate entries.
            </para>
      </remarks>
      <param name="contentLinks">A list of references to content that should be fetched.</param>
      <param name="language">The language.</param>
      <returns>
            A list of content for the specifed references.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Core.LoaderOptions)">
      <summary>
            Gets all content items that is represented by the provided references
            in the language given by the provided loader setting.
            </summary>
      <remarks>
        <para>
            For references that specifies a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the
            <paramref name="settings" /> is ignored and that specific version is returned.
            </para>
        <para>
             If <paramref name="contentLinks" /> contain duplicate entries only one <see cref="T:EPiServer.Core.IContent" /> instance is returned for the duplicate entries.
            </para>
      </remarks>
      <param name="contentLinks">A list of references to content that should be fetched.</param>
      <param name="settings">The setting that for example provides the language to get the content in.</param>
      <returns>
            A list of content for the specifed references.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.GetParents(EPiServer.Core.PageReference)">
      <summary>
            Retrieves all pages located above the specified page in the form of a <see cref="T:EPiServer.Core.PagePath" />.
            </summary>
      <param name="pageLink">The page whose ascendents you want to retrieve.</param>
      <returns>
            A <see cref="T:EPiServer.Core.PagePath" /> containing all pages located above the specified page.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.GetAncestors(EPiServer.Core.PageReference)">
      <summary>
            Retrieves all content items located above the specified page.
            </summary>
      <param name="pageLink">The reference to the page whose ancestors you want to retrieve.</param>
      <returns>
            A list of all content items located above the specified reference.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.GetAncestors(EPiServer.Core.ContentReference)">
      <summary>
            Retrieves all content items located above the specified content.
            </summary>
      <param name="contentLink">The reference to the item whose ancestors you want to retrieve.</param>
      <returns>
            A list of all items located above the specified reference.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#IContentRepository#ListDelayedPublish">
      <summary>
            List all delayed publish contents from all registered content providers 
            </summary>
      <returns>
            A list of all delayed contents from all registered content providers.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.GetLinksToPages(EPiServer.Core.PageReference)">
      <summary>
            Retrieves a collection of all pages that references the provided page.
            </summary>
      <param name="pageLink">The page that you want to find all links to.</param>
      <returns>A collection of all pages that contains one or more references to the provided page.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.GetReferencesToContent(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Gets the reference information of the references to the specified content and optionally its decendents.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="includeDecendents">if set to <c>true</c> references to decendents is also checked.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataFactory.GetDefaultPageData(EPiServer.Core.PageReference,System.Int32,EPiServer.Core.ILanguageSelector)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.PageData" /> object for the given <see cref="T:EPiServer.DataAbstraction.PageType" />, placed at the location of the parent page provided
            and initialized with the default values for the page type. The language of the page is determined from the language selector provided.
            </summary>
      <param name="parentPageLink">The parent page of the "virtual" new page.</param>
      <param name="pageTypeID">The ID of the page type that the page should be created as.</param>
      <param name="selector">An <see cref="T:EPiServer.Core.ILanguageSelector" /> that will be used to determine the language of the created page.</param>
      <returns>
            A <see cref="T:EPiServer.Core.PageData" /> object for the given <see cref="T:EPiServer.DataAbstraction.PageType" />, initialized with the default values for the page type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesnt have access right to perform this action
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the parentPageLink is NOT vaild
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.GetDefault``1(EPiServer.Core.ContentReference)">
      <summary>
            Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from <see cref="P:EPiServer.Globalization.ContentLanguage.PreferredCulture" />.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesnt have access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetDefault``1(EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)">
      <summary>
            Gets a new default instance of an <see cref="T:EPiServer.Core.IContent" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from the language selector provided.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <param name="languageSelector">An <see cref="T:EPiServer.Core.ILanguageSelector" /> that will be used to determine the language of the created item.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:System.NotSupportedException">
            Thrown when there is no <see cref="T:EPiServer.DataAbstraction.ContentType" /> registered for <typeparamref name="T" />.
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetDefault``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Gets a new default instance of an <see cref="T:EPiServer.Core.IContent" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from the language selector provided.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <param name="language">The language of the created item.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:System.NotSupportedException">
            Thrown when there is no <see cref="T:EPiServer.DataAbstraction.ContentType" /> registered for <typeparamref name="T" />.
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetDefault``1(EPiServer.Core.ContentReference,System.Int32)">
      <summary>
            Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData" /> object for the given type, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from the <see cref="T:EPiServer.Globalization.LanguageResolver" />.
            </summary>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="parentLink">The parent link.</param>
      <param name="contentTypeID">The ID of the content type that the content item should be created as.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContent" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesn't have access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetDefault``1(EPiServer.Core.ContentReference,System.Int32,EPiServer.Core.ILanguageSelector)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.IContentData" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from the language selector provided.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="parentLink">The parent link.</param>
      <param name="contentTypeID">The ID of the content type that the content item should be created as.</param>
      <param name="selector">An <see cref="T:EPiServer.Core.ILanguageSelector" /> that will be used to determine the language of the created item.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContentData" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesnt have access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetDefault``1(EPiServer.Core.ContentReference,System.Int32,System.Globalization.CultureInfo)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.IContentData" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, placed at the location of the parent provided
            and initialized with the default values for the content type. The language of the content item is determined from the language selector provided.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="parentLink">The parent link.</param>
      <param name="contentTypeID">The ID of the content type that the content item should be created as.</param>
      <param name="language">The language of the created item.</param>
      <returns>
            A <see cref="T:EPiServer.Core.IContentData" /> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType" />, initialized with the default values for the content type.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesnt have access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetChildren(EPiServer.Core.PageReference,EPiServer.Core.LoaderOptions,System.Int32,System.Int32)">
      <summary>
            Retrieves a collection containing the child pages of the specified page using the provided 
            loader settings to determine what child pages to retrieve.
            </summary>
      <param name="pageLink">The page that you want to list the children to.</param>
      <param name="settings">An <see cref="T:EPiServer.Core.LoaderOptions" /> that will be used to for example determine the language for the child pages.</param>
      <param name="startIndex">The start index of the listing. Used to obtain paging.</param>
      <param name="maxRows">The maximum amout of pages returned.</param>
      <returns>A collection of pages that match the listing criteria.</returns>
      <remarks>This methods does not filter any pages due to access rights, but it will filter pages not published for the selected language.</remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetChildren``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieves a collection containing the child content of the specified link using the provided
            language selector to determine what child pages to retrieve.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">The content link.</param>
      <returns>
            A collection of pages that match the listing criteria.
            </returns>
      <remarks>This methods does not filter any content due to access rights, but it will filter content not published for the selected language.</remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetChildren``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Gets the children of the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="language">The language.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.GetChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions)">
      <summary>
            Retrieves a collection containing the child content of the specified link using the provided
            loader settings to determine what child pages to retrieve.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">The content link.</param>
      <param name="loaderOptions">An <see cref="T:EPiServer.Core.LoaderOptions" /> that will be used to determine the language for the child content.</param>
      <returns>
            A collection of pages that match the listing criteria.
            </returns>
      <remarks>This methods does not filter any content due to access rights, but it will filter content not published for the selected language.</remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetChildren``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,System.Int32,System.Int32)">
      <summary>
            Gets the children of the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of children to get.</typeparam>
      <param name="contentLink">A reference to the parent whose children should be returned.</param>
      <param name="language">The language.</param>
      <param name="startIndex">The index of the first child to return.</param>
      <param name="maxRows">The max number of children to return.</param>
      <returns>
            The children of the specifed parent, as the specified type.
            </returns>
      <remarks>
            This is the overload of GetChildren that supports paging.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions,System.Int32,System.Int32)">
      <summary>
            Retrieves a collection containing the child content of the specified link using the provided 
            loader setting to determine what child pages to retrieve.
            </summary>
      <param name="contentLink">The reference that you want to list the children to.</param>
      <param name="settings">An <see cref="T:EPiServer.Core.LoaderOptions" /> that will be used to for example determine the language for the child content.</param>
      <param name="startIndex">The start index of the listing. Used to obtain paging.</param>
      <param name="maxRows">The maximum amout of pages returned.</param>
      <returns>A collection of pages that match the listing criteria.</returns>
      <remarks>This methods does not filter any content due to access rights, but it will filter content not published for the selected language.</remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetDescendents(EPiServer.Core.PageReference)">
      <summary>
            Retrieves all pages located anywhere below the provided page.
            </summary>
      <param name="pageLink">The page whose descendents you want to retrieve.</param>
      <returns>A list of references to all descendents.</returns>
      <remarks>If only descendent for one level is needed GetChildren is probably more efficient
            since this method will get all descentents. In case of a large tree this can take some time.</remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetDescendents(EPiServer.Core.ContentReference)">
      <summary>
            Retrieves all references located anywhere below the provided reference.
            </summary>
      <param name="contentLink">The reference whose descendents you want to retrieve.</param>
      <returns>A list of references to all descendents.</returns>
      <remarks>If only descendent for one level is needed GetChildren is probably more efficient
            since this method will get all descentents. In case of a large tree this can take some time.</remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetPage(EPiServer.Core.PageReference,EPiServer.Core.LoaderOptions)">
      <summary>
            Retrives a single page from the repository in the language determined by the provided loader settings.
            </summary>
      <param name="pageLink">A reference to the page that you want to retrieve.</param>
      <param name="settings">An <see cref="T:EPiServer.Core.LoaderOptions" /> that will be used to for example determine the language to retrieve the page in.</param>
      <remarks>
            The retrieved page will be read-only.
            </remarks>
      <returns>
            A read-only <see cref="T:EPiServer.Core.PageData" /> object containing the page data.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.Get``1(System.Guid)">
      <summary>
            Retrives a single content item from the repository using the language selector retrieved from the current context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentGuid">The content GUID.</param>
      <returns>
            An <see cref="T:EPiServer.Core.IContentData" /> object containing data.
            </returns>
      <remarks>
            If content implements <see cref="T:EPiServer.Data.Entity.IReadOnly" /> then the retrieved content will be read-only.
            </remarks>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Thrown if the provided GUID is not recognized as being associated with a content item.</exception>
    </member>
    <member name="M:EPiServer.DataFactory.Get``1(System.Guid,System.Globalization.CultureInfo)">
      <summary>
            Gets the specific language of content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The content identifier.</param>
      <param name="language">The language.</param>
      <returns>
            The requested content item, as the specified type.
            </returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentGuid" /> as id.</exception>
    </member>
    <member name="M:EPiServer.DataFactory.Get``1(System.Guid,EPiServer.Core.LoaderOptions)">
      <summary>
            Retrives a single content item from the repository using the language selector retrieved from the current context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentGuid">The content GUID.</param>
      <param name="loaderOptions">An <see cref="T:EPiServer.Core.LoaderOptions" /> that will be used for example to determine the language to retrieve the content in.</param>
      <returns>
            An <see cref="T:EPiServer.Core.IContentData" /> object containing data.
            </returns>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Thrown if the provided GUID is not recognized as being associated with a content item.</exception>
      <remarks>
            If content implements <see cref="T:EPiServer.Data.Entity.IReadOnly" /> then the retrieved content will be read-only.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.Get``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrives a single content item from the repository using the language selector retrieved from the current context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">The content link.</param>
      <returns>
            An <see cref="T:EPiServer.Core.IContentData" /> object containing data.
            </returns>
      <remarks>
            If content implements <see cref="T:EPiServer.Data.Entity.IReadOnly" /> then the retrieved content will be read-only.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.Get``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Gets the specific language of content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="language">The language </param>
      <returns>The requested content item, as the specified type.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Is thrown if actual type is not assignable to T.</exception>
      <exception cref="T:EPiServer.Core.ContentNotFoundException">Is thrown if there is no <see cref="T:EPiServer.Core.IContent" /> instance with <paramref name="contentLink" /> as id.</exception>
      <remarks>
            If the <paramref name="contentLink" /> is a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the <paramref name="language" /> is ignored and that specific version is returned.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.Get``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions)">
      <summary>
            Retrives a single content item from the repository in the language determined by the provided language selector.
            </summary>
      <param name="contentLink">A reference to the content that you want to retrieve.</param>
      <param name="loaderOptions">An <see cref="T:EPiServer.Core.LoaderOptions" /> that will be used for example to determine the language to retrieve the content in.</param>
      <remarks>
            If content implements <see cref="T:EPiServer.Data.Entity.IReadOnly" /> then the retrieved content will be read-only.
            </remarks>
      <returns>
            An <see cref="T:EPiServer.Core.IContentData" /> object containing data.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.TryGet``1(EPiServer.Core.ContentReference,``0@)">
      <summary>
            Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.TryGet``1(System.Guid,``0@)">
      <summary>
            Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The unique identifier for the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.TryGet``1(System.Guid,System.Globalization.CultureInfo,``0@)">
      <summary>
            Gets the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The guid to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="language">The language.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.TryGet``1(System.Guid,EPiServer.Core.LoaderOptions,``0@)">
      <summary>
            Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentGuid">The unique identifier for the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="loaderOptions">The settings that specifies how the content should be loaded, e.g. the language to get the content in.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.TryGet``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo,``0@)">
      <summary>
            Gets the content item represented by the provided reference given the language.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <param name="language">The language.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <remarks>
            If the <paramref name="contentLink" /> is a specific version (that is where <see cref="P:EPiServer.Core.ContentReference.WorkID" /> is set) the <paramref name="language" /> is ignored and that specific version is returned.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.TryGet``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions,``0@)">
      <summary>
            Gets the content item represented by the provided reference.
            </summary>
      <typeparam name="T">The type of content to get.</typeparam>
      <param name="contentLink">The link to the content.</param>
      <param name="loaderOptions">The settings that provides for example the language to get the content in.</param>
      <param name="content">The content with given id or null if content not found or if type is not assignable to T.</param>
      <returns>
            True if content is found or false if content is not found or
            if found content is of a type not assignable to T.
            </returns>
      <exception cref="T:System.ArgumentNullException">contentLink;The provided content link does not have a value.</exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetBySegment(EPiServer.Core.ContentReference,System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets the child <see cref="T:EPiServer.Core.IContentData" /> instance that has a <see cref="P:EPiServer.Web.Routing.IRoutable.RouteSegment" />
            that matches <paramref name="urlSegment" />.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="language">The language</param>
      <returns>
            The content instance that matches <paramref name="urlSegment" /> or null if no match.
            </returns>
      <remarks>
            It is the passed in <paramref name="language" /> that is responsible to handle fallback and replacement settings for language.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetBySegment(EPiServer.Core.ContentReference,System.String,EPiServer.Core.LoaderOptions)">
      <summary>
            Gets the child <see cref="T:EPiServer.Core.IContentData" /> instance that has a <see cref="P:EPiServer.Web.Routing.IRoutable.RouteSegment" />
            that matches <paramref name="urlSegment" />.
            </summary>
      <param name="parentLink">The parent link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="settings">The settings to use.</param>
      <returns>
            The content instance that matches <paramref name="urlSegment" /> or null if no match.
            </returns>
      <remarks>
            It is the passed in <paramref name="settings" /> that is responsible to handle fallback and replacement settings for language.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.FindPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>
            Search for pages that fulfil specific criteria
            </summary>
      <param name="pageLink">The root page for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <param name="languageBranch">Only search for pages on specific language branch</param>
      <param name="selector">A language selector used to determine the language of pages to return</param>
      <returns>
            A collection of pages that fulfil the criteras, will be empty if no match is found.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the pageLink is NOT vaild
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.FindAllPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>
            Search for pages that fulfil specific criteria. Will not filter on access.
            </summary>
      <param name="pageLink">The root page for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <param name="languageBranch">Only search for pages on specific language branch</param>
      <param name="selector">A language selector used to determine the language of pages to return</param>
      <returns>
            A collection of pages that fulfil the criteras, will be empty if no match is found.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the pageLink is NOT vaild
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetLanguageBranches(EPiServer.Core.PageReference)">
      <summary>
            Retrieves a collection of <see cref="T:EPiServer.Core.PageData" /> objects for all languages of the provided page.
            </summary>
      <param name="pageLink">The page whose language branches you want to retrieve.</param>
      <returns>A collection of pages for all language branches for the page.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the pageLink is NOT vaild
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetLanguageBranches``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieves a collection of <see cref="T:EPiServer.Core.IContentData" /> objects for all languages of the provided content link.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">The reference whose language branches you want to retrieve.</param>
      <returns>
            A collection of <see cref="T:EPiServer.Core.IContentData" /> for all language branches.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.CreateLanguageBranch(EPiServer.Core.PageReference,EPiServer.Core.ILanguageSelector)">
      <summary>
            Create a page language in database.
            </summary>
      <param name="pageLink">The link to the page to create a language branch for.</param>
      <param name="selector">The language to create.</param>
      <remarks>Access right required <see cref="T:EPiServer.Security.AccessLevel" />.Edit</remarks>
      <returns>A PageData object with the newly created page data.</returns>
    </member>
    <member name="M:EPiServer.DataFactory.DeleteLanguageBranch(EPiServer.Core.PageReference,System.String)">
      <summary>
            Delete a page language
            </summary>
      <param name="pageLink">The link to the page which will be deleted</param>
      <param name="languageBranch">The language branch to delete</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesnt have enough access right to perform this action
            </exception>
      <remarks>
            You cannot delete the master language branch
            <para>Access right required <see cref="T:EPiServer.Security.AccessLevel" />.Delete</para></remarks>
    </member>
    <member name="M:EPiServer.DataFactory.DeleteVersion(EPiServer.Core.PageReference)">
      <summary>
            Delete a single version of a page
            </summary>
      <param name="pageLink">Link to the page and version which will be deleted</param>
      <remarks>
            The published version of page cannot be deleted
            <para>Access right required <see cref="T:EPiServer.Security.AccessLevel" />.Delete</para></remarks>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user does not have access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.Delete(EPiServer.Core.PageReference,System.Boolean)">
      <summary>
            Delete a page
            </summary>
      <param name="pageLink">The link to the page which will be deleted</param>
      <param name="forceDelete">Delete page even if being linked by other pages</param>
      <remarks>
            Access right required <see cref="T:EPiServer.Security.AccessLevel" />.Delete
            </remarks>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesnt have access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.DeleteChildren(EPiServer.Core.PageReference,System.Boolean)">
      <summary>
            Delete children of a page.
            </summary>
      <param name="pageLink">The children of this page will be deleted.</param>
      <param name="forceDelete">Delete page even if referenced by other pages.</param>
      <remarks>
            Access right required <see cref="T:EPiServer.Security.AccessLevel" />.Delete
            </remarks>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user does not have access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.Move(EPiServer.Core.PageReference,EPiServer.Core.PageReference)">
      <summary>
            Move a page to another container
            </summary>
      <param name="pageLink">The link to the page to move</param>
      <param name="destinationLink">The container to which the page will be moved</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the moved content.</returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user does not have enough access right to perform this action.
            </exception>
      <remarks>
        <para>
            Access rights required:
            <list type="bullet"><item><description>For the <b>pageLink</b> required access levels are <see cref="T:EPiServer.Security.AccessLevel" />.Read | <see cref="T:EPiServer.Security.AccessLevel" />.Delete</description></item><item><description>
                        For the destinationLink page: if it is not published and it is not trashed access level is <see cref="T:EPiServer.Security.AccessLevel" />.Create
                        otherwise it is <see cref="T:EPiServer.Security.AccessLevel" />.Create | <see cref="T:EPiServer.Security.AccessLevel" />.Publish
                    </description></item></list></para>
      </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.MoveToWastebasket(EPiServer.Core.PageReference)">
      <summary>
            Moves a page to the wastebasket.
            </summary>
      <param name="pageLink">The page that should be moved to the wastebasket.</param>
    </member>
    <member name="M:EPiServer.DataFactory.MoveToWastebasket(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Moves a page to the wastebasket.
            </summary>
      <param name="contentLink">The content that should be moved to the wastebasket.</param>
      <param name="deletedBy">The user who deleted the content.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the contentLink is NOT vaild
              </exception>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown when the user does not have access rights to delete the content
            </exception>
      <exception cref="T:EPiServer.Core.CannotMoveProviderException">
            Thrown when this page or some of it's descendants is parent to a content provider and it can't be deleted.
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.Copy(EPiServer.Core.PageReference,EPiServer.Core.PageReference,System.Boolean,System.Boolean)">
      <summary>
            Copy a page to another container.
            </summary>
      <param name="pageLink">The link to the page to copy.</param>
      <param name="destinationLink">The container where the page will be copied</param>
      <param name="publishOnDestination">If the new pages should be published on the destination</param>
      <param name="allowThreading">Run the local copy process on a separate thread (don't work for remote sites).</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            	Thrown AccessDeniedException when user doesnt have enough access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.Save(EPiServer.Core.PageData,EPiServer.DataAccess.SaveAction)">
      <summary>
            Save page
            </summary>
      <param name="page">An initialized <see cref="T:EPiServer.Core.PageData" /> object containing data to be saved</param>
      <param name="action">Action that will be performed</param>
      <remarks>
        <para>
          <b>Note:</b>  The action parameter is a SaveAction enumeration that is located in a 
            non-documented part of the SDK. You can however use it as it is a part of the EPiServer API 
            and available from code.
            </para>
        <para>
            If <b>PageLink</b> is empty a new page will be created
            </para>
        <para>
            Access right required:
            <list type="bullet"><item><description>If <see cref="T:EPiServer.DataAccess.SaveAction" />.Save: if it is new page <see cref="T:EPiServer.Security.AccessLevel" />.Create, if it is new version of the page <see cref="T:EPiServer.Security.AccessLevel" />.Create | <see cref="T:EPiServer.Security.AccessLevel" />.Edit</description></item><item><description>If <see cref="T:EPiServer.DataAccess.SaveAction" />.CheckIn: if it is new page and check in is required <see cref="T:EPiServer.Security.AccessLevel" />.Edit, otherwise <see cref="T:EPiServer.DataAccess.SaveAction" />.Save applies</description></item><item><description>If <see cref="T:EPiServer.DataAccess.SaveAction" />.Publish: if pubblishing is required access level is <see cref="T:EPiServer.Security.AccessLevel" />.Publish, otherwise  <see cref="T:EPiServer.DataAccess.SaveAction" />.Save case applies</description></item></list></para>
        <example>
            The following example shows how to programmatically create a page.
            <code source="../CodeSamples/EPiServer/DataFactory/createPage.aspx" lang="aspnet" /><code source="../CodeSamples/EPiServer/DataFactory/createPage.aspx.cs" lang="cs" /></example>
        <example>
            The following example shows how to edit and save en existing page.
            <code source="../CodeSamples/EPiServer/DataFactory/DataFactorySamples.cs" region="EditSave" lang="cs" /></example>
      </remarks>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesn't have enough access rights to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetDefaultPageData(EPiServer.Core.PageReference,System.String)">
      <summary>
            Get a PageData object with default values.
            </summary>
      <param name="parentPageLink">The parent page of the "virtual" new page.</param>
      <param name="pageTypeName">The page type name of the new page.</param>
      <returns>
            A PageData object that contains the default values for a new page of the indicated type.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.GetDefaultPageData(EPiServer.Core.PageReference,System.Int32)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.PageData" /> object for the given <see cref="T:EPiServer.DataAbstraction.PageType" />, placed at the location of the parent page provided
            and initialized with the default values for the page type.
            </summary>
      <param name="parentPageLink">The parent page of the "virtual" new page.</param>
      <param name="pageTypeID">The ID of the page type that the page should be created as.</param>
      <returns>
            A <see cref="T:EPiServer.Core.PageData" /> object for the given <see cref="T:EPiServer.DataAbstraction.PageType" />, initialized with the default values for the page type.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.GetDefaultPageData(EPiServer.Core.PageReference,System.String,EPiServer.Core.ILanguageSelector)">
      <summary>
            Get a PageData object with default values.
            </summary>
      <param name="parentPageLink">The parent page of the "virtual" new page.</param>
      <param name="pageTypeName">The page type of the new page.</param>
      <param name="selector">A selector to help select language</param>
      <returns>
            A PageData object that contains the default values for a new page of the indicated type.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.GetDefaultPageData``1(EPiServer.Core.PageReference,EPiServer.Core.ILanguageSelector)">
      <summary>
            Retrieves a page object for the <see cref="T:EPiServer.DataAbstraction.PageType" /> that matches the generic type parameter.
            The page will be placed at the location of the parent page provided and initialized with the default values for the page type.
            The language of the page is decided from the language selector provided.
            </summary>
      <typeparam name="T">The type associated with the <see cref="T:EPiServer.DataAbstraction.PageType" /> and the type of the <see cref="T:EPiServer.Core.PageData" /> object to return.</typeparam>
      <param name="parentPageLink">The parent page of the "virtual" new page.</param>
      <param name="selector">An <see cref="T:EPiServer.Core.ILanguageSelector" /> that will be used to determine the language of the created page.</param>
      <returns>
            A page object for the given <see cref="T:EPiServer.DataAbstraction.PageType" /> of the same type as the generic type parameter, 
            initialized with the default values for the page type.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.GetDefaultPageData``1(EPiServer.Core.PageReference)">
      <summary>
            Retrieves a page object for the <see cref="T:EPiServer.DataAbstraction.PageType" /> that matches the generic type parameter.
            The page will be placed at the location of the parent page provided and initialized with the default values for the page type.
            </summary>
      <typeparam name="T">The type associated with the <see cref="T:EPiServer.DataAbstraction.PageType" /> and the type of the <see cref="T:EPiServer.Core.PageData" /> object to return.</typeparam>
      <param name="parentPageLink">The parent page of the "virtual" new page.</param>
      <returns>
            A page object for the given <see cref="T:EPiServer.DataAbstraction.PageType" /> of the same type as the generic type parameter, 
            initialized with the default values for the page type.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.GetChildren(EPiServer.Core.PageReference,EPiServer.Core.LoaderOptions)">
      <summary>
            Retrive page listing.
            </summary>
      <param name="pageLink">The page that you want to list the children to.</param>
      <param name="settings">An <see cref="T:EPiServer.Core.LoaderOptions" /> that will be used to for example determine the language for the child pages.</param>
      <returns>All children to the given page.</returns>
      <remarks>This methods does not filter any pages due to access rights, but it will filter pages not published for the selected language.</remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetChildren(EPiServer.Core.PageReference,System.Int32,System.Int32)">
      <summary>
            Retrieves a collection containing the child pages of the specified page.
            </summary>
      <param name="pageLink">The page whose children you want to retrieve.</param>
      <param name="startIndex">The start index of the listing. Used to obtain paging.</param>
      <param name="maxRows">The maximum amout of pages returned.</param>
      <returns>A collection of pages that match the listing criteria.</returns>
      <remarks>
            This methods does not filter any pages due to access rights, but it will filter pages not published for the selected language.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.FindPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection)">
      <summary>
            Search for pages that fulfil a specific criterias
            </summary>
      <param name="pageLink">The root page for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <returns>A collection of pages that fulfil the criteras, will be empty if no match is found.</returns>
    </member>
    <member name="M:EPiServer.DataFactory.FindPagesWithCriteria(EPiServer.Core.PageReference,EPiServer.PropertyCriteriaCollection,System.String)">
      <summary>
            Search for pages that fulfil a specific criterias
            </summary>
      <param name="pageLink">The root page for which the search will be performed</param>
      <param name="criterias">The criterias for pages</param>
      <param name="languageBranch">Only search for pages on specific language branch</param>
      <returns>A collection of pages that fulfil the criteras, will be empty if no match is found.</returns>
    </member>
    <member name="M:EPiServer.DataFactory.CreateLanguageBranch(EPiServer.Core.PageReference,EPiServer.Core.ILanguageSelector,EPiServer.Security.AccessLevel)">
      <summary>
            Creates a new language branch for a page in the specified language
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="pageLink">The link to the page to create a language branch for.</param>
      <param name="selector">A selector that specifies what language to create the branch for.</param>
      <param name="access">The required access level that the current user must have to be allowed to create a language branch.</param>
      <returns>
            A <see cref="T:EPiServer.Core.PageData" /> object for the newly created page in the specified language.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user does not have access right to perform this action
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the pageLink is NOT vaild
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.CreateLanguageBranch``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Creates a new language branch for a content item in the specified language
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <remarks>Access checks are performed during Save. CreateLanguageBranch method returns not persisted in-memory instance.</remarks>
      <typeparam name="T">The type of content to create.</typeparam>
      <param name="contentLink">The link to the content to create a language branch for.</param>
      <param name="language">The language.</param>
      <returns>
            An <see cref="T:EPiServer.Core.IContentData" /> object for the newly created content in the specified language.
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.DeleteLanguageBranch(EPiServer.Core.PageReference,System.String,EPiServer.Security.AccessLevel)">
      <summary>
            Deletes the specified language branch for a page from the repository
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="pageLink">The link to the page which will be deleted.</param>
      <param name="languageBranch">The language branch to delete.</param>
      <param name="access">The required access level that the current user must have on the page to be allowed to delete the language branch.</param>
    </member>
    <member name="M:EPiServer.DataFactory.DeleteLanguageBranch(EPiServer.Core.ContentReference,System.String,EPiServer.Security.AccessLevel)">
      <summary>
            Deletes the specified language branch for a page from the repository 
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The link to the page which will be deleted.</param>
      <param name="languageBranch">The language branch to delete.</param>
      <param name="access">The required access level that the current user must have on the page to be allowed to delete the language branch.</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesnt have access right to perform this action
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the pageLink is NOT vaild
            </exception>
      <exception cref="T:EPiServer.Core.EPiServerCancelException">
            Thrown when the DeletingPageLanguageEvent be canceled
            </exception>
      <remarks>You cannot delete the master language branch</remarks>
    </member>
    <member name="M:EPiServer.DataFactory.Delete(EPiServer.Core.PageReference,System.Boolean,EPiServer.Security.AccessLevel)">
      <summary>
            Deletes a page from the repository first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="pageLink">The link to the page that should be be deleted.</param>
      <param name="forceDelete">If set to <c>true</c>, deletes the page even if it is being referenced by other pages.</param>
      <param name="access">The required access level that the current user must have to be allowed to delete the page.</param>
    </member>
    <member name="M:EPiServer.DataFactory.Delete(EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
      <summary>
            Deletes a page from the repository first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The link to the page that should be be deleted.</param>
      <param name="forceDelete">If set to <c>true</c>, deletes the page even if it is being referenced by other pages.</param>
      <param name="access">The required access level that the current user must have to be allowed to delete the page.</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesnt have access right to perform this action
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the pageLink is NOT vaild
            </exception>
      <exception cref="T:EPiServer.Core.EPiServerCancelException">
            Thrown when the DeletingEvent be canceled
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.DeleteVersion(EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel)">
      <summary>
            Delete a single version of a page
            </summary>
      <param name="contentLink">Link to the page and version which will be deleted</param>
      <param name="access">The required access level to perform this operation</param>
      <remarks>The published version of page cannot be deleted</remarks>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user does not have access right to perform this action
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the pageLink is NOT vaild
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.DeleteChildren(EPiServer.Core.PageReference,System.Boolean,EPiServer.Security.AccessLevel)">
      <summary>
            Deletes all the children of a page from the repository
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="pageLink">The page whose children will be deleted.</param>
      <param name="forceDelete">If set to <c>true</c>, deletes child pages even if they are being referenced by other pages.</param>
      <param name="access">The required access level that the current user must have to be allowed to delete the child page.</param>
    </member>
    <member name="M:EPiServer.DataFactory.DeleteChildren(EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
      <summary>
            Deletes all the children of a page from the repository 
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The page whose children will be deleted.</param>
      <param name="forceDelete">If set to <c>true</c>, deletes child pages even if they are being referenced by other pages.</param>
      <param name="access">The required access level that the current user must have to be allowed to delete the child page.</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user does not have access right to perform this action
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the pageLink is NOT vaild
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.Move(EPiServer.Core.PageReference,EPiServer.Core.PageReference,EPiServer.Security.AccessLevel,EPiServer.Security.AccessLevel)">
      <summary>
            Moves a page from it's current location to another position in the page structure
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="pageLink">The page that should be moved.</param>
      <param name="destination">The destination page where the page will be moved as a child to.</param>
      <param name="requiredSourceAccess">The minimal access rights required on the source page that is to be moved.</param>
      <param name="requiredDestinationAccess">The minimal access rights required on the destination page.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the moved content.</returns>
    </member>
    <member name="M:EPiServer.DataFactory.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel,EPiServer.Security.AccessLevel)">
      <summary>
            Moves a page from it's current location to another position in the page structure
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The page that should be moved.</param>
      <param name="destinationLink">The destination page where the page will be moved as a child to.</param>
      <param name="requiredSourceAccess">The minimal access rights required on the source page that is to be moved.</param>
      <param name="requiredDestinationAccess">The minimal access rights required on the destination page.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the moved content.</returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user does not have access right to perform this action.
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.Copy(EPiServer.Core.PageReference,EPiServer.Core.PageReference,EPiServer.Security.AccessLevel,EPiServer.Security.AccessLevel,System.Boolean,System.Boolean)">
      <summary>
            Creates a copy of a page and it's eventual children and adds the new page(s) under the specicalized destination page
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="pageLink">The page that should be copied.</param>
      <param name="destinationLink">The destination page where the page will be copied as a child to.</param>
      <param name="requiredSourceAccess">The access rights required on the source page that is to be copied.</param>
      <param name="requiredDestinationAccess">The access rights required on the destination page.</param>
      <param name="publishOnDestination">If the new page(s) should be published on the destination.</param>
      <param name="allowThreading">Run the local copy process on a separate thread (doesn't work for remote sites).</param>
      <returns>A reference to the new copy of the page.</returns>
      <remarks>
        <para>
            If <paramref name="publishOnDestination" /> is <c>true</c> the new page will be published immediately at the destination.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.Copy(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel,EPiServer.Security.AccessLevel,System.Boolean)">
      <summary>
            Creates a copy of a content and it's eventual children and adds the new content(s) under the specicalized destination
            first ensuring that the current user meets the minimal access right requirements.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="destinationLink">The destination where the content will be copied as a child to.</param>
      <param name="requiredSourceAccess">The access rights required on the source content that is to be copied.</param>
      <param name="requiredDestinationAccess">The access rights required on the destination content.</param>
      <param name="publishOnDestination">If the new content(s) should be published on the destination.</param>
      <returns>A reference to the new copy of the conent.</returns>
      <remarks>
            If <paramref name="publishOnDestination" /> is <c>true</c> the new content will be published immediately at the destination.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.Copy(EPiServer.Core.PageReference,EPiServer.Core.PageReference)">
      <summary>
            Copy a page to another container.
            </summary>
      <param name="pageLink">The link to the page to copy.</param>
      <param name="destinationLink">The container where the page will be copied</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            	Thrown AccessDeniedException when user doesnt have enough access right to perform this action
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.Copy(EPiServer.Core.PageReference,EPiServer.Core.PageReference,System.Boolean)">
      <summary>
            Copy a page to another container.
            </summary>
      <param name="pageLink">The link to the page to copy.</param>
      <param name="destinationLink">The container where the page will be copied</param>
      <param name="allowThreading">Run the local copy process on a separate thread (don't work for remote sites).</param>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            	Thrown AccessDeniedException when user doesnt have enough access right to perform this action
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.Save(EPiServer.Core.PageData,EPiServer.DataAccess.SaveAction,EPiServer.Security.AccessLevel)">
      <summary>
            Saves a page to the repository with the provided save action performed 
            first ensuring that the current user meets the mininum access rights requirements.
            </summary>
      <param name="page">An <see cref="T:EPiServer.Core.PageData" /> object containing all the data that should be saved.</param>
      <param name="action">The <see cref="T:EPiServer.DataAccess.SaveAction" /> that should be performed.</param>
      <param name="access">The minimum access level that the current user must have to the page.</param>
      <returns>A <see cref="T:EPiServer.Core.PageReference" /> to the saved page.</returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesnt have access right to perform this action
            </exception>
      <exception cref="T:EPiServer.Core.EPiServerCancelException">
            Thrown when the CreatingEvent, SavingEvent, PublishingEvent or SavingEvent is canceled
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the page is null
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,EPiServer.Security.AccessLevel)">
      <summary>
            Saves a content item to the repository with the provided save action performed
            first ensuring that the current user meets the mininum access rights requirements.
            </summary>
      <param name="content">The content.</param>
      <param name="action">The <see cref="T:EPiServer.DataAccess.SaveAction" /> that should be performed.</param>
      <param name="access">The minimum access level that the current user must have to the content item.</param>
      <returns>
            A <see cref="T:EPiServer.Core.ContentReference" /> to the saved content item.
            </returns>
      <exception cref="T:EPiServer.Core.AccessDeniedException">
            Thrown AccessDeniedException when user doesnt have access right to perform this action
            </exception>
      <exception cref="T:EPiServer.Core.EPiServerCancelException">
            Thrown when the CreatingEvent, SavingEvent, PublishingEvent or SavingEvent is canceled
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the content item is null
            </exception>
    </member>
    <member name="M:EPiServer.DataFactory.GetSettingsFromPage(EPiServer.Core.ContentReference)">
      <summary>
            Gets the (Enterprise) settings for a page. 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.GetSettingsFromPage(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Gets the (Enterprise) settings for a page. 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.GetSettingsFromContent(EPiServer.Core.ContentReference)">
      <summary>
            Gets the (Enterprise) settings for a content item. 
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>A <see cref="T:EPiServer.Configuration.Settings" /> instance for the site that <paramref name="contentLink" /> belongs to.</returns>
      <remarks>
            This is done by
            traversing the page tree upwards from contentLink until a Page which has an Enterprise
            config's StartPage set as current page, or the StartPage of the current IIsInstanceId.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.GetSettingsFromContent(EPiServer.Core.ContentReference,System.Boolean)">
      <summary>
            Gets the (Enterprise) settings for a content. 
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="fallbackToStartPageId">if set to <c>true</c>, activate fallback to Start page for Settings. See Remarks for more details.</param>
      <returns>A <see cref="T:EPiServer.Configuration.Settings" /> instance for the site that <paramref name="contentLink" /> belongs to.</returns>
      <remarks>
        <para>
            This is done by
            traversing the page tree upwards from current link until a Page which has an Enterprise
            config's StartPage set as current page, or the StartPage of the current IIsInstanceId.
            </para>
        <para>
            If the <paramref name="contentLink" /> is not located beneath a start page, the search will fall back to the Settings instance
            for the current start page if <paramref name="fallbackToStartPageId" /> is set to True. If the search fails and fallbackToStartPageId
            is set to false, the method returns null.
            </para>
      </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataFactory.ResetCounters">
      <summary>
            Resets all counters on all PageProviders
            </summary>
    </member>
    <member name="P:EPiServer.DataFactory.PageFetchCount">
      <summary>
            Total count of Page fetches on all PageProviders included cached pages
            </summary>
    </member>
    <member name="P:EPiServer.DataFactory.PageFetchDatabaseReads">
      <summary>
            Total count of Page fetches on all PageProviders without cached pages
            </summary>
    </member>
    <member name="P:EPiServer.DataFactory.PageFetchCacheHits">
      <summary>
            Total count of Page fetches on all PageProviders only for cached pages
            </summary>
    </member>
    <member name="P:EPiServer.DataFactory.ListingFetchCount">
      <summary>
            Total count of page children fetches on all PageProviders included cached pages
            </summary>
    </member>
    <member name="P:EPiServer.DataFactory.ListingFetchDatabaseReads">
      <summary>
            Total count of page children fetches on all PageProviders without cached pages
            </summary>
    </member>
    <member name="P:EPiServer.DataFactory.ListingFetchCacheHits">
      <summary>
            Total count of page children fetches on all PageProviders only for cached pages
            </summary>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentVersionRepository#Delete(EPiServer.Core.ContentReference)">
      <summary>
            Delete a single version of a Content
            </summary>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentVersionRepository#LoadPublished(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Loads the published version a page with current language selection if the languageBranch is null otherwise
            loads the published version a page for a specific language
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.PageVersion" /></returns>
      <remarks>
            In case content instance does not support <see cref="T:EPiServer.Core.ILocalizable" /> then underlying provider is called without language.
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentVersionRepository#LoadPublished(EPiServer.Core.ContentReference)">
      <summary>
            Loads the published version
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.PageVersion" /></returns>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentVersionRepository#List(EPiServer.Core.VersionFilter,System.Int32,System.Int32,System.Int32@)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentVersionRepository#Load(EPiServer.Core.ContentReference)">
      <summary>
            Loads the version.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.PageVersion" /></returns>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentVersionRepository#SetCommonDraft(EPiServer.Core.ContentReference)">
      <summary>
            Sets the specified version as common draft.
            </summary>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentVersionRepository#LoadCommonDraft(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Loads the common draft.
            </summary>
      <param name="contentLink">The content link to load common draft for.</param>
      <param name="language">The language.</param>
      <returns>
            CommonDraft if it exist, otherwise Published, If no published exist the latest saved version is returned
            </returns>
      <remarks>
            In case content instance does not support <see cref="T:EPiServer.Core.ILocalizable" /> then underlying provider is called with language=null
            </remarks>
    </member>
    <member name="M:EPiServer.DataFactory.ListVersions(EPiServer.Core.PageReference)">
      <summary>
            Lists all versions
            </summary>
      <param name="pageLink">The page link.</param>
      <returns> All matching versions</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.ListVersions(EPiServer.Core.PageReference,System.String)">
      <summary>
            Lists all versions for a page current language selection if the languageBranch is null otherwise
            Lists all versions for a page for a specific language
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="languageBranch">The language branch</param>
      <returns> All matching versions</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.ListPublishedVersions(EPiServer.Core.PageReference)">
      <summary>
            Lists the published versions for a page
            </summary>
      <param name="pageLink">The page link.</param>
      <returns>All published versions for the page</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.LoadVersion(EPiServer.Core.PageReference)">
      <summary>
            Loads the version.
            </summary>
      <param name="pageLink">The page link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.LoadPublishedVersion(EPiServer.Core.PageReference)">
      <summary>
            Loads the published version 
            </summary>
      <param name="pageLink">The page link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.LoadPublishedVersion(EPiServer.Core.PageReference,System.String)">
      <summary>
            Loads the published version a page with current language selection if the languageBranch is null otherwise
            Loads the published version a page for a specific language
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="languageBranch">The language branch.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.ListDelayedPublish">
      <summary>
            Lists all pages with a delayed publish date.
            </summary>
      <returns>A <see cref="T:EPiServer.Core.PageDataCollection" /> of all pages with a delayed publish date.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#DataAbstraction#IContentSecurityRepository#Get(EPiServer.Core.ContentReference)">
      <summary>
            Gets the specified content security descriptor object for the requested content link.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#DataAbstraction#IContentSecurityRepository#Save(EPiServer.Core.ContentReference,EPiServer.Security.IContentSecurityDescriptor,EPiServer.Security.SecuritySaveType)">
      <summary>
            Saves the specified content security descriptor.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="contentSecurityDescriptor">The content security descriptor.</param>
      <param name="securitySaveType">Type of the security save.</param>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#DataAbstraction#IContentSecurityRepository#Delete(System.String,EPiServer.Security.SecurityEntityType)">
      <summary>
            Deletes the specified user or role name.
            </summary>
      <param name="userOrRoleName">Name of the user or role.</param>
      <param name="entityUserRole">The entity user role.</param>
    </member>
    <member name="E:EPiServer.DataFactory.EPiServer#DataAbstraction#IContentSecurityRepository#ContentSecuritySaved">
      <inheritdoc />
    </member>
    <member name="E:EPiServer.DataFactory.EPiServer#DataAbstraction#IContentSecurityRepository#ContentSecuritySaving">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentSource#Get``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.IContent" /> object with information about a content, based on the
            <see cref="T:EPiServer.Core.ContentReference" /> parameter.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">Reference to the content being retrieved</param>
      <returns>
            IContent object requested
            </returns>
    </member>
    <member name="M:EPiServer.DataFactory.EPiServer#Core#IContentSource#GetChildren``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieve a <see cref="T:EPiServer.Core.IContent" /> listing
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">Reference to parent content</param>
      <returns>
            Returns a collection of IContent directly below the content referenced by
            the <see cref="T:EPiServer.Core.ContentReference" /> parameter.
            </returns>
    </member>
    <member name="P:EPiServer.DataFactory.EPiServer#Core#IContentSource#CurrentContent">
      <summary>
            Gets the currently loaded <see cref="T:EPiServer.Core.IContent">content</see>.
            </summary>
      <value>
            Returns information about the currently loaded content, or a content in
            a collection when used inside a control.
            </value>
    </member>
    <member name="M:EPiServer.Diagnostics.Internal.DefaultPerformanceCounter.CreateCategory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the category, if it does not already exist. Should be created by the installer. Requires adminstrator or system privileges
            to create the categories.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Editor.EditorExtensions">
      <summary>
            Extension methods used by the Editors.
            </summary>
    </member>
    <member name="M:EPiServer.Editor.EditorExtensions.GetEditorContext(EPiServer.Core.PageData)">
      <summary>
            Gets a context object used for propagating page information to editor dialogs.
            </summary>
      <param name="pageData">A <see cref="T:EPiServer.Core.PageData" /> object.</param>
      <returns>An object with page information suitable for serialization to JSON</returns>
    </member>
    <member name="M:EPiServer.Editor.EditorExtensions.GetEditorContext(EPiServer.Core.IContent)">
      <summary>
            Gets the editor context.
            </summary>
      <param name="content">The content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Editor.EditorExtensions.GetEditorCSSPaths(EPiServer.PageBase)">
      <summary>
            Gets the editor CSS paths for the current page.
            Will get the UIEditorCssPaths property for current page or from the value configured in settings of current site.
            </summary>
      <param name="page">The page.</param>
      <returns>A string array of resolved CSS paths for the given page</returns>
    </member>
    <member name="M:EPiServer.Editor.EditorExtensions.GetEditorCSSPaths(EPiServer.Core.ContentData)">
      <summary>
            Gets the editor CSS paths for the current ContentData.
            Will get the UIEditorCssPaths property for current ContentData or from the value configured in settings of current site.
            </summary>
      <param name="contentData">A <see cref="T:EPiServer.Core.ContentData" /> object.</param>
      <returns>
            A string array of resolved CSS paths for the given ContentData
            </returns>
    </member>
    <member name="M:EPiServer.Editor.EditorExtensions.GetEditorCSSPaths(EPiServer.PageBase,EPiServer.IContentRepository)">
      <summary>
            Gets the editor CSS paths for the current page.
            Will get the UIEditorCssPaths property for current page or from the value configured in settings of current site.
            </summary>
      <param name="page">The page.</param>
      <param name="contentRepository">The content repository.</param>
      <returns>
            A string array of resolved CSS paths for the given page
            </returns>
    </member>
    <member name="M:EPiServer.Editor.EditorExtensions.GetEditorCSSPaths(EPiServer.Core.ContentData,EPiServer.IContentRepository)">
      <summary>
            Gets the editor CSS paths for the current ContentData.
            Will get the UIEditorCssPaths property for current page or from the value configured in settings of current site.
            </summary>
      <param name="contentData">A <see cref="T:EPiServer.Core.ContentData" /> object.</param>
      <param name="contentRepository">A <see cref="T:EPiServer.IContentRepository" /> object.</param>
      <returns>
            A string array of resolved CSS paths for the given ContentData
            </returns>
    </member>
    <member name="M:EPiServer.Editor.EditorExtensions.ResolvePaths(System.String[])">
      <summary>
            Resolves each entry in an array so they become absolute paths from application root.
            </summary>
      <param name="paths">The array of paths to resolve.</param>
      <example>
            "~/Public/Styles/Default/Editor.css" will be resolved to "/Public/Styles/Default/Editor.css"
            </example>
      <returns>A string array of resolved paths.</returns>
    </member>
    <member name="T:EPiServer.Editor.PageEditing">
      <summary>
            Class that has helper functions for the EPiServer page editing view.
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiPropertyName">
      <summary>
            Name of the attribute that indicates what property that the html is connected to.
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiContentName">
      <summary>
            Name of the content inside property
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiUseMvc">
      <summary>
            Name of the attribute that indicates if the property should use Mvc when doing a partial re-rendering.
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiEditContainerCssClass">
      <summary>
            Default CSS class for property edit container that is used to indicate property data rendering in on-page-editing mode.
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiFullRefreshPropertyNames">
      <summary>
            Name of the attribute that indicates which properties require a full refresh of the page to render a correct preview.
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiPropertyRenderSettings">
      <summary> 
            Prefix of the attribute that indicates any custom render setting for the property.
            The format on the client is 'data-epi-property-customsetting' where the value will be JSON notation.
            CustomSettings dictionary on e.g. EPiServer.Web.WebControls.Property
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiPropertyEditorSettings">
      <summary>
            Will be used to display any custom editor settings as a JSON formatted string.
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiPropertyOverlaySettings">
      <summary>
            Will be used to display any custom overlay settings as a JSON formatted string.
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiBlockId">
      <summary>
            Will be used to display the id of a block in edit mode.
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiBlockInfo">
      <summary>
            Will be used to display additional info of a block in edit mode.
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.DataEPiBlockPersonalization">
      <summary>
            Will be used to configure personalization of blocks
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.EpiEditMode">
      <summary>
            Name on the query parameter indicating if the request is in edit mode.
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.EPiChannel">
      <summary>
            Name on the query parameter propagating the channel parameter in edit mode
            </summary>
    </member>
    <member name="F:EPiServer.Editor.PageEditing.EPiProjects">
      <summary>
            Name on the query parameter propagating the projects parameter in edit mode
            </summary>
    </member>
    <member name="P:EPiServer.Editor.PageEditing.PageIsInEditMode">
      <summary>
            Gets a value indicating whether the page is in edit mode.
            </summary>
      <value>
        <c>true</c> if the page is in edit mode; otherwise, <c>false</c>.</value>
      <remarks>Use <see cref="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.CurrentContextMode" /> to get the specific <see cref="T:EPiServer.Web.ContextMode" />.</remarks>
    </member>
    <member name="M:EPiServer.Editor.PageEditing.GetEditUrl(EPiServer.Core.ContentReference)">
      <summary>
            Gets the edit URL for a content link.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Editor.PageEditing.GetEditUrlForLanguage(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Gets the edit URL for a content link.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Editor.PageEditing.GetChannel(System.Web.HttpContextBase)">
      <summary>
            Gets the channel parameter.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>return the channel parameter</returns>
    </member>
    <member name="T:EPiServer.EditPage">
      <summary>
            Base class for EPiServer pages that needs to register javascripts and/or CSS files.
            </summary>
      <remarks>
            As <see cref="T:EPiServer.TemplatePage" /> inherits from <b>EditPage</b>, any 
            attributes or methods defined for <b>EditPage</b> will be available for <b>TemplatePage</b>. 
            </remarks>
      <seealso cref="N:EPiServer" />
    </member>
    <member name="M:EPiServer.EditPage.#ctor">
      <summary>
            Supports the internal infrastructure. Used to indicate that we are in the 
            process of creating a new page rather than editing an existing page.
            </summary>
    </member>
    <member name="M:EPiServer.EditPage.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.EditPage" /> class.
            </summary>
      <param name="options">The page options to enable.</param>
      <remarks>
            The options parameter is a bitmap constructed from the OptionFlag of Page plugin classes from
            the EPiServer.Web.PageExtensions namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.EditPage.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.EditPage" /> class.
            </summary>
      <param name="enable">The enable.</param>
      <param name="disable">The disable.</param>
    </member>
    <member name="M:EPiServer.EditPage.RegisterCssFile(System.String)">
      <summary>
            Registers a css file in the header of the html document.
            </summary>
      <param name="path">The path to the css file</param>
      <returns>
        <b>True</b> if the css file has been registrered or already is registered.
            <b>False</b> if no header node is found in the document.</returns>
      <remarks>
            The CSS file is shows up in a LINK element on the page when the page is rendered. 
            Behind the scenes, the provided CSS path is used as a key for the registration.     
            </remarks>
    </member>
    <member name="M:EPiServer.EditPage.IsCssFileRegistered(System.String)">
      <summary>
            Determines if the client startup script is registered with the <see cref="T:EPiServer.EditPage" /> object.
            </summary>
      <param name="path">The path to the css file</param>
      <returns>True if the css file is registered; otherwise, false.</returns>
    </member>
    <member name="M:EPiServer.EditPage.RegisterScriptFile(System.String)">
      <summary>
            Registers a script file in the header of the html document.
            </summary>
      <param name="path">The path to the script file</param>
      <returns>True if the script file has been registrered or already is registered.
            False if no header node is found in the document.</returns>
    </member>
    <member name="M:EPiServer.EditPage.IsScriptFileRegistered(System.String)">
      <summary>
            Determines if the client startup script is registered with the <see cref="T:EPiServer.EditPage" /> object.
            </summary>
      <param name="path">The path to the script file</param>
      <returns>True if the script file is registered; otherwise, false.</returns>
    </member>
    <member name="M:EPiServer.Filters.CompositeFilter.Filter(System.Object,EPiServer.Filters.ContentFilterEventArgs)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Filters.CompositeFilter.Filter(System.Collections.Generic.IList{EPiServer.Core.IContent})">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Filters.CompositeFilter.ShouldFilter(EPiServer.Core.IContent)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Filters.ContentFilterEventArgs">
      <summary>
            The event arguments used by the Filter event.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.ContentFilterEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.ContentFilterEventArgs" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.ContentFilterEventArgs.#ctor(System.Collections.Generic.IList{EPiServer.Core.IContent})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.ContentFilterEventArgs" /> class.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="P:EPiServer.Filters.ContentFilterEventArgs.Contents">
      <summary>
            Gets the contents.
            </summary>
    </member>
    <member name="T:EPiServer.Filters.FilterAccess">
      <summary>
            Filter pages for the current user based on a required access level
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterAccess.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterAccess" /> class.
            </summary>
      <remarks>
            Will default to AccessLevel.Read, i e the current user must have at least read access to the page otherwise it will be removed from the list.
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterAccess.#ctor(EPiServer.Security.AccessLevel)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterAccess" /> class.
            </summary>
      <param name="requiredAccess">The required access level.</param>
    </member>
    <member name="P:EPiServer.Filters.FilterAccess.RequiredAccess">
      <summary>
            Gets or sets the required access level.
            </summary>
      <value>The required access.</value>
    </member>
    <member name="P:EPiServer.Filters.FilterAccess.SimpleFilter">
      <summary>
            A simple filter only checks explicit access rights and ignores published state
            </summary>
      <value>True to enable simple filtering, default is false</value>
    </member>
    <member name="M:EPiServer.Filters.FilterAccess.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.Filters.FilterAccess.QueryDistinctAccessEdit(EPiServer.Core.PageData,EPiServer.Security.AccessLevel)">
      <summary>
            Return the distinct access level that the current user has to this page.
            </summary>
      <param name="page">The page to check accesslevel against</param>
      <param name="requestedLevel">The requested level</param>
      <returns>true if user has access else false</returns>
      <remarks>Note that this method also checks the published status of the page
            to determine the actual access that the user has. I e if the page is not published
            the user will not see it unless he has "more" access than Read.</remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterAccess.QueryDistinctAccessEdit(EPiServer.Core.IContent,EPiServer.Security.AccessLevel)">
      <summary>
            Return the distinct access level that the current user has to this content.
            </summary>
      <param name="content">The content.</param>
      <param name="requestedLevel">The requested level</param>
      <returns>
            true if user has access else false
            </returns>
      <remarks>
            Note that this method also checks the published status of the page
            to determine the actual access that the user has. I e if the page is not published
            the user will not see it unless he has "more" access than Read.
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterAccess.QueryDistinctAccessEdit(EPiServer.Core.IContent,EPiServer.Security.AccessLevel,System.Nullable{System.DateTime})">
      <summary>
            Queries the distinct access edit.
            </summary>
      <param name="content">The content.</param>
      <param name="requestedLevel">The requested level.</param>
      <param name="requestTime">The request time.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Filters.FilterAccess.QueryDistinctAccessEdit(EPiServer.Core.IContent,EPiServer.Security.AccessLevel,System.Security.Principal.IPrincipal)">
      <summary>
            Queries the distinct access edit.
            </summary>
      <param name="content">The content.</param>
      <param name="requestedLevel">The requested level.</param>
      <param name="principal">The principal.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Filters.FilterAccess.QueryDistinctAccessEdit(EPiServer.Core.IContent,EPiServer.Security.AccessLevel,System.Security.Principal.IPrincipal,System.Nullable{System.DateTime})">
      <summary>
            Queries the distinct access edit.
            </summary>
      <param name="content">The content.</param>
      <param name="requestedLevel">The requested level.</param>
      <param name="principal">The principal</param>
      <param name="requestTime">The request time.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Filters.FilterAccess.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            Should filter.
            </summary>
      <param name="content">The content.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Filters.FilterCompareTo">
      <summary>
            Filter for removing items depending on the value of a property.
            </summary>
      <remarks>
            Will remove all items where the property PropertyName does not have the value
            PropertyValue.
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterCompareTo.#ctor(System.String,System.String)">
      <summary>
            Create a compare filter and initialize the data used in comparisons.
            </summary>
      <param name="propertyName">The name of the property to compare.</param>
      <param name="propertyValue">The value that is used to compare the property value against.</param>
    </member>
    <member name="P:EPiServer.Filters.FilterCompareTo.PropertyValue">
      <summary>
            The value used to compare PropertyName against.
            </summary>
      <value>
            The value must always be a string. If the value is a number, a date etc, convert it to a string. 
            </value>
      <remarks>
        <para>
            If the value is text, define type of comparison in the <see cref="P:EPiServer.Filters.FilterCompareTo.StringComparison" /> property. 
            </para>
        <para>
            If the value is non-textual (numeric, date etc), define type of comparison in the <see cref="P:EPiServer.Filters.FilterCompareTo.Condition" /> 
            property. 
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Filters.FilterCompareTo.PropertyName">
      <summary>
            The name of the property to compare the value to.
            </summary>
    </member>
    <member name="P:EPiServer.Filters.FilterCompareTo.Condition">
      <summary>
            Filter comparer for non-text comparisons. 
            </summary>
      <value>
        <see cref="T:EPiServer.Filters.CompareCondition" />
      </value>
      <remarks>
        <para>
            Use this class to compare numeric and date properties. See the <see cref="T:EPiServer.Filters.CompareCondition" /> enum for possible values. 
            </para>
        <para>
            For text comparisons, see the <see cref="P:EPiServer.Filters.FilterCompareTo.StringComparison" /> property.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Filters.FilterCompareTo.StringComparison">
      <summary>
            Gets or sets the string comparison that is used to compare strings.
            </summary>
      <value>The string comparison that is used to compare strings.</value>
    </member>
    <member name="M:EPiServer.Filters.FilterCompareTo.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.Filters.FilterCompareTo.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Filters the specified pages.
            </summary>
      <param name="pages">The pages that should be filtered.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterCompareTo.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the content should be filtered.
            </summary>
      <param name="content">
      </param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="T:EPiServer.Filters.FilterContentForVisitor">
      <summary>
            A filter that removes any content that the current user does not have access to or that
            is not currently published or there is no defined render or not existed in current view language for the content
            </summary>
      <remarks>
            Even though the content is in published status this filter will also remove
            any content items that are not currently between its start and stop publish dates.
            Content items without a template will also be filtered.
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterContentForVisitor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterContentForVisitor" /> class.
            </summary>
      <remarks>
            By default filter to return content that is Published, has Read access rights and there is a valid renderer.
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterContentForVisitor.#ctor(EPiServer.Framework.Web.TemplateTypeCategories,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterContentForVisitor" /> class using a default set of filters.
            </summary>
      <param name="templateTypeCategories">The template type categories set on the <see cref="T:EPiServer.Filters.FilterTemplate" /> filter.</param>
      <param name="tag">The tag used to select template set on the <see cref="T:EPiServer.Filters.FilterTemplate" /> filter.</param>
      <remarks>
            The default set of filters will check that content is <see cref="F:EPiServer.Core.PagePublishedStatus.Published" />, has Read access rights 
            and there is a valid render for the specified <paramref name="templateTypeCategories" />.
            </remarks>
      <seealso cref="M:EPiServer.Filters.FilterAccess.#ctor" />
      <seealso cref="T:EPiServer.Filters.FilterPublished" />
      <seealso cref="T:EPiServer.Filters.FilterTemplate" />
    </member>
    <member name="M:EPiServer.Filters.FilterContentForVisitor.#ctor(EPiServer.Filters.FilterPublished,EPiServer.Filters.FilterAccess,EPiServer.Filters.FilterTemplate)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterContentForVisitor" /> class.
            </summary>
      <param name="filterPublished">The filter implementation used to assess the publish status for a content item.</param>
      <param name="filterAccess">The filter implementation used to assess the access rights for a content item.</param>
      <param name="filterTemplate">The filter implementation used to assess whether the content item has a template or not.</param>
      <seealso cref="T:EPiServer.Filters.FilterAccess" />
      <seealso cref="T:EPiServer.Filters.FilterPublished" />
      <seealso cref="T:EPiServer.Filters.FilterTemplate" />
    </member>
    <member name="M:EPiServer.Filters.FilterContentForVisitor.Filter(System.Object,EPiServer.Filters.ContentFilterEventArgs)">
      <summary>
            Event handler that applies the filter for contents.
            </summary>
      <param name="sender">The class/instance that initiated the Filter event.</param>
      <param name="e">The <see cref="T:EPiServer.Filters.ContentFilterEventArgs" /> argument containing the event data.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterContentForVisitor.Filter(System.Collections.Generic.IList{EPiServer.Core.IContent})">
      <summary>
            Filters the specified contents.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterContentForVisitor.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the content should be filtered.
            </summary>
      <param name="content">The content.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="T:EPiServer.Filters.FilterCount">
      <summary>
            Filter that only keeps the first x number of pages.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterCount.#ctor">
      <summary>
            Create a new FilterCount filter.
            </summary>
      <remarks>
            Note that you have to set the Count property before adding this filter.
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterCount.#ctor(System.Int32)">
      <summary>
            Create a new FilterCount filter and initialize its Count property.
            </summary>
      <param name="count">The number of pages to keep.</param>
    </member>
    <member name="P:EPiServer.Filters.FilterCount.Count">
      <summary>
            Set the number of items that the filer should keep in the list.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterCount.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Filters the specified pages.
            </summary>
      <param name="pages">The pages that should be filtered.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterCount.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
      <remarks>FilterCount does not support ShouldFilter method.</remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterCount.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the content should be filtered.
            </summary>
      <param name="content">
      </param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="T:EPiServer.Filters.FilterEventArgs">
      <summary>
            The event arguments used by the Filter event.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterEventArgs" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterEventArgs.#ctor(EPiServer.Core.PageDataCollection)">
      <summary>
            Constructor that uses the referenced PageDataCollection.
            </summary>
      <param name="pages">The list of pages to pass to the event handlers.</param>
      <remarks>
            Note that the passed PageDataCollection is used directly and may be modified
            by the event handlers.
            </remarks>
    </member>
    <member name="P:EPiServer.Filters.FilterEventArgs.Pages">
      <summary>
            Get the list of pages to operate on.
            </summary>
    </member>
    <member name="T:EPiServer.Filters.FilterForVisitor">
      <summary>
            A filter that removes any pages that the current user does not have access to or that
            is not currently published.
            </summary>
      <remarks>Even though the page is in published status the filter will also remove
            any pages that does not meet the requirements for start and stop publish dates.</remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterForVisitor.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Filters the specified pages, removing those that should not be shown to the current user.
            </summary>
      <param name="pages">The pages that should be filtered.</param>
      <returns>A collection of filtered pages.</returns>
      <remarks>The <see cref="T:EPiServer.Core.PageDataCollection" /> that is sent in to the method is also filtered.</remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterForVisitor.Filter(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent})">
      <summary>
            Filters the specified content items, removing those that should not be shown to the current user.
            </summary>
      <param name="contentItems">The content items that should be filtered.</param>
      <returns>Content available for the current user.</returns>
    </member>
    <member name="T:EPiServer.Filters.FilterPropertySort">
      <summary>
            A filter to sort a <see cref="T:EPiServer.Core.PageDataCollection" /> by the values for a property.
            </summary>
      <remarks>
            If you want to define your own sort filter on a webcontrol that inherits from <see cref="T:EPiServer.Web.WebControls.PageListData" />, 
            you must ensure that the default sort filter is not added to the filter queue. Should you 
            forget to do this the results of your sort filter will be resorted by the default sort 
            filter which always executes last. 
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterPropertySort.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterPropertySort" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterPropertySort.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterPropertySort" /> class.
            </summary>
      <param name="sortBy">The name of the property that should be used to sort the pages.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterPropertySort.#ctor(System.String,EPiServer.Filters.FilterSortDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterPropertySort" /> class.
            </summary>
      <param name="sortBy">The name of the property that should be used to sort the pages.</param>
      <param name="sortDirection">The sort direction.</param>
    </member>
    <member name="P:EPiServer.Filters.FilterPropertySort.SortBy">
      <summary>
            Gets or sets the name of the property that is used to sort the pages.
            </summary>
      <value>The name of the property that is used to sort the pages.</value>
    </member>
    <member name="P:EPiServer.Filters.FilterPropertySort.SortDirection">
      <summary>
            The sort direction.
            </summary>
    </member>
    <member name="P:EPiServer.Filters.FilterPropertySort.CompareInfo">
      <summary>
            Define this object to do culture-sensitive string-comparison. 
            When this <see cref="T:System.Globalization.CompareInfo" /> object is defined, all 
            string-comparisons use this object. 
            </summary>
      <remarks>
            Only strings are sorted using this object. All other datatypes are sorted using default culture.
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterPropertySort.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Filters the specified pages.
            </summary>
      <param name="pages">The pages that should be filtered.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterPropertySort.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
      <remarks>FilterPropertySort does not support ShouldFilter method.</remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterPropertySort.Compare(EPiServer.Core.PageData,EPiServer.Core.PageData)">
      <summary>
            Compares the specified pages.
            </summary>
      <param name="page1">The first page.</param>
      <param name="page2">The second page.</param>
      <returns>An integer with the results of the comparison.</returns>
    </member>
    <member name="M:EPiServer.Filters.FilterPropertySort.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the content should be filtered.
            </summary>
      <param name="content">
      </param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="T:EPiServer.Filters.FilterPublished">
      <summary>
            Filter to remove pages based on published status.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterPublished.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterPublished" /> class.
            </summary>
      <remarks>
            Will create a filter with filter condition PagePublishedStatus.Published.
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterPublished.#ctor(EPiServer.Core.PagePublishedStatus)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterPublished" /> class with given filtering condition.
            </summary>
      <param name="publishedStatus">The published status that pages should have to remain after this filter has executed.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterPublished.#ctor(EPiServer.IContentRepository)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterPublished" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Filters.FilterPublished.#ctor(EPiServer.Core.IPublishedStateAssessor)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterPublished" /> class.
            </summary>
      <param name="publishedStateAssessor">The publish status validator used to validate the published state.</param>
    </member>
    <member name="P:EPiServer.Filters.FilterPublished.PublishedStatus">
      <summary>
            Gets or sets the filter condition to use.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterPublished.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.Filters.FilterPublished.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the content should be filtered.
            </summary>
      <param name="content">
      </param>
      <returns>
            True if the filter will remove the content; otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.Filters.FilterPublished.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Filters the specified pages.
            </summary>
      <param name="pages">The pages that should be filtered.</param>
      <remarks>
            Will remove all pages in e.Pages that do not fulfill the PublishedStatus criteria.
            If the page points to other page via PageShortcutType.FetchData <see cref="T:EPiServer.Core.PageShortcutType" /> 
            then the fetched page should fulfill the PublishedStatus criteria.
            </remarks>
    </member>
    <member name="T:EPiServer.Filters.FilterRemoveNullValues">
      <summary>
            Filter to remove pages based on Null values for properties.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterRemoveNullValues.#ctor">
      <summary>
            Default constructor.
            </summary>
      <remarks>
             Sets the property name to empty string, i e you need to set the PropertyName property.
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterRemoveNullValues.#ctor(System.String)">
      <summary>
            Constructor that sets the property name to check.
            </summary>
      <param name="propertyName">Name of the property to check for null values.</param>
    </member>
    <member name="P:EPiServer.Filters.FilterRemoveNullValues.PropertyName">
      <summary>
            Name of the property to check for null values.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterRemoveNullValues.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Filters the specified pages.
            </summary>
      <param name="pages">The pages that should be filtered.</param>
      <remarks>
            Will remove all pages that has Property[PropertyName] set to null.
            </remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterRemoveNullValues.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.Filters.FilterRemoveNullValues.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the content should be filtered.
            </summary>
      <param name="content">
      </param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="T:EPiServer.Filters.FilterReplacementLanguage">
      <summary>
            Filter pages so that pages that have a replacement language is filtered away.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterReplacementLanguage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterReplacementLanguage" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterReplacementLanguage.#ctor(EPiServer.Core.IContentLanguageSettingsHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterReplacementLanguage" /> class.
            </summary>
      <param name="pageLanguageSettingsHandler">The page language settings handler.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterReplacementLanguage.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.Filters.FilterReplacementLanguage.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the content should be filtered.
            </summary>
      <param name="content">
      </param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="T:EPiServer.Filters.FilterSkipCount">
      <summary>
            Filter that removes the first x number of pages from the <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
    </member>
    <member name="P:EPiServer.Filters.FilterSkipCount.SkipCount">
      <summary>
            Gets or sets the amount of pages that should be removed.
            </summary>
      <value>The amount of pages that should be removed.</value>
    </member>
    <member name="M:EPiServer.Filters.FilterSkipCount.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterSkipCount" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterSkipCount.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterSkipCount" /> class.
            </summary>
      <param name="skipCount">The amount of pages that should be removed.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterSkipCount.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Filters the specified pages.
            </summary>
      <param name="pages">The pages that should be filtered.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterSkipCount.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
      <remarks>FilterSkipCount does not support ShouldFilter method.</remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterSkipCount.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the content should be filtered.
            </summary>
      <param name="content">
      </param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="T:EPiServer.Filters.FilterSort">
      <summary>
            A filter to sort a PageDataCollection using a predefined <see cref="T:EPiServer.Filters.FilterSortOrder" />.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterSort.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterSort" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterSort.#ctor(EPiServer.Filters.FilterSortOrder)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterSort" /> class.
            </summary>
      <param name="sortOrder">The sort order.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterSort.#ctor(EPiServer.Filters.FilterSortOrder,System.Globalization.CompareInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.FilterSort" /> class.
            </summary>
      <param name="sortOrder">The sort order.</param>
      <param name="comparer">The <see cref="T:System.Globalization.CompareInfo" /> that is used for comparison.</param>
    </member>
    <member name="P:EPiServer.Filters.FilterSort.SortOrder">
      <summary>
            The sort order for the filter.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterSort.Sort(EPiServer.Core.PageDataCollection)">
      <summary>
            Sorts a collection of pages
            </summary>
      <param name="pages">The pages that should be sorted.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterSort.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Sorts the specified pages.
            </summary>
      <param name="pages">The pages that should be sorted.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterSort.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
      <remarks>FilterSort does not support ShouldFilter method.</remarks>
    </member>
    <member name="M:EPiServer.Filters.FilterSort.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the content should be filtered.
            </summary>
      <param name="content">
      </param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="T:EPiServer.Filters.FilterSortDirection">
      <summary>
            Direction for sorting.
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortDirection.Ascending">
      <summary>
            Ascending sorting, ie normal sort order.
            </summary>
    </member>
    <member name="F:EPiServer.Filters.FilterSortDirection.Descending">
      <summary>
            Descending sorting, ie inverted sort order.
            </summary>
    </member>
    <member name="T:EPiServer.Filters.FilterTemplate">
      <summary>
            Filter pages that does not have a page template defined.
            </summary>
    </member>
    <member name="P:EPiServer.Filters.FilterTemplate.TemplateResolver">
      <summary>
            Gets or sets the template resolver.
            </summary>
    </member>
    <member name="P:EPiServer.Filters.FilterTemplate.Tag">
      <summary>
            Tag used for selecting template
            </summary>
    </member>
    <member name="M:EPiServer.Filters.FilterTemplate.Filter(System.Object,EPiServer.Filters.FilterEventArgs)">
      <summary>
            Event handler that applies the filter for a PageDataCollection.
            </summary>
      <param name="sender">The class/instance that initiated the Filter event.</param>
      <param name="e">The <see cref="T:EPiServer.Filters.FilterEventArgs" /> argument containing the event data.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterTemplate.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Filters the specified pages.
            </summary>
      <param name="pages">The pages that should be filtered.</param>
    </member>
    <member name="M:EPiServer.Filters.FilterTemplate.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.Filters.FilterTemplate.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the content should be filtered.
            </summary>
      <param name="content">
      </param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="P:EPiServer.Filters.FilterTemplate.TemplateTypeCategories">
      <summary>
            Gets or sets the template type categories.
            </summary>
      <value>
            The template type categories.
            </value>
    </member>
    <member name="T:EPiServer.Filters.IContentFilter">
      <summary>
            Interface for filters that can be applied to remove or sort contents.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.IContentFilter.Filter(System.Object,EPiServer.Filters.ContentFilterEventArgs)">
      <summary>
            Eventhandler that applies the filter for a PageDataCollection.
            </summary>
      <param name="sender">The class/instance that initiated the Filter event.</param>
      <param name="e">The <see cref="T:EPiServer.Filters.FilterEventArgs" /> arguments containing the event data.</param>
    </member>
    <member name="M:EPiServer.Filters.IContentFilter.Filter(System.Collections.Generic.IList{EPiServer.Core.IContent})">
      <summary>
            Filters the specified pages.
            </summary>
      <param name="contents">The contents.</param>
    </member>
    <member name="M:EPiServer.Filters.IContentFilter.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="content">The content.</param>
      <returns>
            True if the filter will remove the page; otherwise false.
            </returns>
    </member>
    <member name="T:EPiServer.Filters.IPageFilter">
      <summary>
            Interface for filters that can be applied to remove or sort pages for a PageDataCollection.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.IPageFilter.Filter(System.Object,EPiServer.Filters.FilterEventArgs)">
      <summary>
            Event handler that applies the filter for a PageDataCollection.
            </summary>
      <param name="sender">The class/instance that initiated the Filter event.</param>
      <param name="e">The <see cref="T:EPiServer.Filters.FilterEventArgs" /> arguments containing the event data.</param>
    </member>
    <member name="M:EPiServer.Filters.IPageFilter.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Filters the specified pages.
            </summary>
      <param name="pages">The pages that should be filtered.</param>
    </member>
    <member name="M:EPiServer.Filters.IPageFilter.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            If the page should be filtered.
            </summary>
      <param name="page">The page that you want to check.</param>
      <returns>True if the filter will remove the page; otherwise false.</returns>
    </member>
    <member name="T:EPiServer.Filters.PageFilterBase">
      <summary>
            Base class for filters implementing IPageFilter
            </summary>
    </member>
    <member name="M:EPiServer.Filters.PageFilterBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Filters.PageFilterBase" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Filters.PageFilterBase.Filter(System.Object,EPiServer.Filters.FilterEventArgs)">
      <summary>
            Event handler that applies the filter on a PageDataCollection.
            </summary>
      <param name="sender">The class/instance that initiated the Filter event.</param>
      <param name="e">The <see cref="T:EPiServer.Filters.FilterEventArgs" /> arguments containing the event data.</param>
    </member>
    <member name="M:EPiServer.Filters.PageFilterBase.Filter(EPiServer.Core.PageDataCollection)">
      <summary>
            Filters the specified pages.
            </summary>
      <param name="pages">The pages that should be filtered.</param>
    </member>
    <member name="M:EPiServer.Filters.PageFilterBase.ShouldFilter(EPiServer.Core.PageData)">
      <summary>
            Determines whether the page should be filtered.
            </summary>
      <param name="page">The page to be checked.</param>
      <returns>
        <c>true</c> if the filter should remove the page; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Filters.PageFilterBase.ShouldFilter(EPiServer.Core.IContent)">
      <summary>
            Determines whether the content should be filtered.
            </summary>
      <param name="content">
      </param>
      <returns>
        <c>true</c> if the filter should remove the page; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.Filters.PageFilterBase.RequestTime">
      <summary>
            Gets or sets the request time used for filters dependent on the request time.
            </summary>
      <value>
            The request time.
            </value>
    </member>
    <member name="T:EPiServer.Global">
      <summary>
            Base class for global.asax that supports EPiServer-specific features.
            </summary>
      <remarks>
        <para>
            The global.asax.cs file on an EPiServer site should inherit from <see cref="T:EPiServer.Global" />. 
            This is a requirement for the site to work.
            </para>
      </remarks>
      <example>
            The following code example demonstrates the usage of <b>Global</b> to read the BaseDiretory.
            <code>
            BaseDirectory:
            <![CDATA[<%= EPiServer.Global.BaseDirectory %>]]></code></example>
    </member>
    <member name="M:EPiServer.Global.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Global" /> class.
            </summary>
    </member>
    <member name="E:EPiServer.Global.RoutesRegistrating">
      <summary>
            Occurs before the CMS content routes are registered. Routes can be accessed through property Routes on event argument.
            </summary>
    </member>
    <member name="E:EPiServer.Global.RoutesRegistered">
      <summary>
            Occurs after the CMS content routes are registered. Routes can be accessed through property Routes on event argument.
            </summary>
    </member>
    <member name="M:EPiServer.Global.OnRoutesRegistrating(System.Web.Routing.RouteCollection)">
      <summary>
            Called to raise <see cref="E:EPiServer.Global.RoutesRegistrating" /> event.
            </summary>
      <param name="routes">The routes.</param>
    </member>
    <member name="M:EPiServer.Global.OnRoutesRegistered(System.Web.Routing.RouteCollection)">
      <summary>
            Called to raise <see cref="E:EPiServer.Global.RoutesRegistered" /> event.
            </summary>
      <param name="routes">The routes.</param>
    </member>
    <member name="P:EPiServer.Global.UrlRewriteProvider">
      <summary>
            Gets or sets the URL rewrite provider.
            </summary>
      <value>
            Instance of the URLRewriteProvider <see cref="T:EPiServer.Web.UrlRewriteProvider" /> Type
            </value>
      <remarks>
            Initial configuration of the UrlRewriteProvider is done from the Initialize method on <see cref="T:EPiServer.Web.InitializationModule" />. I e if running
            outside of a web server you must first call the INitialize method before you can read a valid value from this property.
            </remarks>
    </member>
    <member name="P:EPiServer.Global.BaseDirectory">
      <summary>
            The physical root directory where the site is installed, e.g. "D:/INetpub/WWWRoot/Example/", 
            when using Internet Information Services (IIS) folder. 
            </summary>
      <remarks>
        <b>Note:</b>  Slashes are used instead of backslashes.
            </remarks>
    </member>
    <member name="P:EPiServer.Global.InstanceName">
      <summary>
            IIS Metabase key path for the application, e.g. "_LM_W3SVC_1_ROOT_Example". 
            </summary>
      <remarks>
        <note>
          <b>Note:</b>  Underscore is used instead of slash.
            </note>
      </remarks>
    </member>
    <member name="M:EPiServer.Global.GetVaryByCustomString(System.Web.HttpContext,System.String)">
      <summary>
            Provides an application-wide implementation of the <see cref="P:System.Web.UI.PartialCachingAttribute.VaryByCustom" /> property.
            </summary>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> object that contains information about the current Web request.</param>
      <param name="custom">The custom string that specifies which cached response is used to respond to the current request.</param>
      <returns>
            If the value of the <paramref name="custom" /> parameter is "path", the requsets path will be returned.
            If the value of the <paramref name="custom" /> parameter is "browser", the browser's <see cref="P:System.Web.Configuration.HttpCapabilitiesBase.Type" />; otherwise, null.
            </returns>
    </member>
    <member name="M:EPiServer.Global.Init">
      <summary>
            This Init method is called AFTER Application_Start and AFTER the Init methot on HttpModules
            Executes custom initialization code after all event handler modules have been added.
            </summary>
      <remarks>
            Note! You cannot count on HttpContext being available - i e do NOT attempt to access it.
            </remarks>
    </member>
    <member name="M:EPiServer.Global.RegisterRoutes(System.Web.Routing.RouteCollection)">
      <summary>
            Register all the routes needed in order for it to be possible to create CMS templates using MVC.
            Override this method if you want to replace our routes with custom ones.
            </summary>
      <param name="routes">The global collection of routes that is used to lookup the route to a controller/action.</param>
    </member>
    <member name="M:EPiServer.Global.HandleAccessDenied">
      <summary>
            Handles the exception <see cref="T:System.UnauthorizedAccessException" /> globally by calling <see cref="T:EPiServer.DefaultAccessDeniedHandler" />.
            </summary>
      <remarks>Even though the method name and its base class suggests it would handle all access denied globally it will only be called for unhandled exceptions of type <see cref="T:System.UnauthorizedAccessException" /></remarks>
    </member>
    <member name="M:EPiServer.Global.DefaultDocumentHandling(System.Object,System.EventArgs)">
      <summary>
            Code to emulate IIS handling of folders / default documents.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
      <remarks>
            This is really only used/needed for access to edit / admin since file access thru VPP will not be affected by the 
            default document handling in IIS.
            </remarks>
    </member>
    <member name="M:EPiServer.Global.Global_PreRequestHandlerExecute(System.Object,System.EventArgs)">
      <summary>
            EPiServer support for restricting access to the UI folder and for precompiling .aspx files.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
      <remarks>
            The "precompile" feature is really obsolete as of ASP.NET 2.0, but is retained for backwards compatibility.
            </remarks>
    </member>
    <member name="M:EPiServer.Global.Global_Error(System.Object,System.EventArgs)">
      <summary>
            Handles the Error event of the Global control.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="evt">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="P:EPiServer.Global.EnableGlobalErrorHandling">
      <summary>
            Gets a value indicating whether show error message.
            </summary>
      <value>
        <c>true</c> If the GlobalErrorHandling flag is "on" or if it sets to "remoteonly" and the request is not locally; otherwise is <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Global.IsRequestLocal">
      <summary>
            Gets a value indicating whether the IP host address of the client is local.
            </summary>
      <value>
        <c>true</c> if IP host address of the remote client is local; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Global.DesignTimeLiveDataAvailable">
      <summary>
            Gets a value indicating whether the state of the global class has been initialized for design time environment and whether live data can be served.
            </summary>
    </member>
    <member name="P:EPiServer.Global.IsUnitTest">
      <summary>
            Gets a value indicating whether EPiServer is running under mstest.
            </summary>
    </member>
    <member name="P:EPiServer.Global.IsDesignTime">
      <summary>
            Gets a value indicating whether execution takes place in a designer context.
            </summary>
    </member>
    <member name="T:EPiServer.Globalization.ContentLanguage">
      <summary>
            Abstraction of the <see cref="T:EPiServer.Globalization.LanguageSelection" /> class for content
            </summary>
    </member>
    <member name="F:EPiServer.Globalization.ContentLanguage.PreferredCultureContextKey">
      <summary>
            The cache key used to store the contxt language
            </summary>
    </member>
    <member name="P:EPiServer.Globalization.ContentLanguage.Instance">
      <summary>
            Gets or sets the instance of Contentlanguage to use.
            </summary>
      <value>The instance.</value>
      <remarks>
            Assigning to this property allows you to completely replace how the preferred content language
            is determined by implementing the DeterminePreferredLanguage method.
            </remarks>
    </member>
    <member name="P:EPiServer.Globalization.ContentLanguage.PreferredCulture">
      <summary>
            Gets or sets the preferred content culture.
            </summary>
      <value>The current culture.</value>
      <remarks>
            To access the language code which is used to look up information in LocalizationService and/or
            LanguageBranch, simply read the Name property of the returned CultureInfo object.
            </remarks>
    </member>
    <member name="P:EPiServer.Globalization.ContentLanguage.SpecificCulture">
      <summary>
            Gets the specific culture.
            </summary>
      <value>The specific culture.</value>
      <remarks>
            If the PreferredCulture is a neutral culture and you need to get sort order and/or formatting information
            you should call this property to get the specific culture that is associated with the neutral culture. Note that
            if the PreferredCulture is already a specific culture, no extra object will be created.
            </remarks>
    </member>
    <member name="T:EPiServer.Globalization.GlobalizationSettings">
      <summary>
            Strongly typed access to the root globalization element in web.config.
            </summary>
    </member>
    <member name="P:EPiServer.Globalization.GlobalizationSettings.CultureLanguageCode">
      <summary>
            Gets or sets the culture language code in web.config.
            </summary>
      <value>The culture language code.</value>
    </member>
    <member name="P:EPiServer.Globalization.GlobalizationSettings.UICultureLanguageCode">
      <summary>
            Gets or sets the UI culture language code in web.config.
            </summary>
      <value>The UI culture language code.</value>
    </member>
    <member name="T:EPiServer.Globalization.Internal.ContentLanguageImplementation">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of the <see cref="T:EPiServer.Globalization.LanguageSelection" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.ContentLanguageImplementation.#ctor(EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Globalization.Internal.HostLanguageResolver,EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpRequestBase},EPiServer.Framework.ContextCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Globalization.ContentLanguage" /> class.
            </summary>
      <param name="languageBranchRepository">The language branch repository used by this instance.</param>
      <param name="hostLanguageResolver">The host language resolver used by this instance.</param>
      <param name="currentHttpRequest">An accessor to the current HTTP request instance.</param>
      <param name="contextCache">The context cache</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.ContentLanguageImplementation.SetCulture(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets preferred culture based on priority language
            </summary>
      <param name="priorityLanguage">
      </param>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.ContentLanguageImplementation.DetermineCulture(EPiServer.Globalization.LanguagePreferenceList)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines the preferred content language for the current request.
            </summary>
      <returns>A string with the language code for the CultureInfo set as PreferredCulture.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.ContentLanguageImplementation.LanguagePreferenceList(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get all preferred languages a list of language codes.
            </summary>
      <returns>An IList&lt;string&gt; with language codes in priority order.</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Globalization.Internal.ContentLanguageImplementation.FinalFallbackCulture">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the final fallback culture.
            </summary>
      <value>The final fallback culture.</value>
      <remarks>
            When all other culture/language resolution mechanisms fail, this is the final resort to get
            a valid culture for ContentLanguage.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Globalization.Internal.HostLanguageResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles mappings from host to language.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.HostLanguageResolver.#ctor(EPiServer.Web.ISiteDefinitionRepository,EPiServer.Events.Clients.IEventRegistry)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Globalization.Internal.HostLanguageResolver" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Globalization.Internal.HostLanguageResolver.HostLanguageMappings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the host language mappings.
            </summary>
      <value>The host language mappings.</value>
      <remarks>
            This property is used to map a host name, such as www.company.com, to a specific language.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.HostLanguageResolver.GetDefaultHostLanguage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the default host language.
            </summary>
      <returns>A string that is a culture name. If no language defined for default host (name="*"), returns null.</returns>
      <remarks>
            This code performs its work based on the information in the &lt;siteHostsMappings&gt; section in EPiServerFramework.config.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.HostLanguageResolver.IsHostLanguageMatch(System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the provided host is mapped to the provided language as defined either by direct hostname-to-language mapping
            or through wildcard language mapping.
            </summary>
      <param name="hostName">The name of the host to verify.</param>
      <param name="language">The language to check.</param>
      <returns>
        <c>true</c> if the languages math; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The hostname to language mapping is defined by the <see cref="T:EPiServer.Web.SiteDefinition" /> API .
            The purpose of this is that the language indicator segment in the URL is not needed when you have a match between 
            the requested language and the default language as indicated by the host name.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.HostLanguageResolver.GetLanguageFromRequest(System.Web.HttpRequestBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the language to use based on the host name.
            </summary>
      <returns>A string that is a culture name. If no match found, returns null.</returns>
      <remarks>
            This code performs its work based on the information in the &lt;siteHostsMappings&gt; section in EPiServerFramework.config.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.HostLanguageResolver.GetLanguageForHost(System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the language mapping defined for a host.
            </summary>
      <param name="hostName">Name of the host.</param>
      <param name="fallback">if set to <c>true</c> then it fallsback and checks if wildcard mapped host has language mapping.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Globalization.Internal.UpdateCurrentLanguage">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of IUpdateCurrentLanguage
            </summary>
      <remarks>
            Will set ContentLanguage, SystemLanguage and UserInterfaceLanguage
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.UpdateCurrentLanguage.#ctor(EPiServer.Core.IContentLanguageSettingsHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance of <see cref="T:EPiServer.Globalization.Internal.UpdateCurrentLanguage" />.
            </summary>
      <param name="contentLanguageSettingsHandler">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.UpdateCurrentLanguage.UpdateLanguage(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Updates the current language settings.
            </summary>
      <param name="languageId">The language id.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Globalization.Internal.UpdateCurrentLanguage.UpdateReplacementLanguage(EPiServer.Core.IContent,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Updates current language settings if a replacement language is used.
            </summary>
      <param name="currentContent">The content that we route to.</param>
      <param name="requestedLanguage">The requested language selection.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Globalization.IUpdateCurrentLanguage">
      <summary>
            Interface that controls how to set the current culture / language settings.
            </summary>
    </member>
    <member name="M:EPiServer.Globalization.IUpdateCurrentLanguage.UpdateLanguage(System.String)">
      <summary>
            Updates the current language for the current context (e.g. current web request)
            </summary>
      <param name="languageId">The language id.</param>
    </member>
    <member name="M:EPiServer.Globalization.IUpdateCurrentLanguage.UpdateReplacementLanguage(EPiServer.Core.IContent,System.String)">
      <summary>
            Updates current language settings if a replacement language is used.
            </summary>
      <param name="currentContent">The current content that we need to check for replacement language handling.</param>
      <param name="requestedLanguage">The requested language.</param>
    </member>
    <member name="T:EPiServer.Globalization.LanguagePreferenceList">
      <summary>
            Implements a list with language codes and handles some special semantics with language strings
            </summary>
    </member>
    <member name="M:EPiServer.Globalization.LanguagePreferenceList.ConditionalAdd(System.String)">
      <summary>
            Conditionally adds the language if not already present in the list
            </summary>
      <param name="languageCode">The language code.</param>
      <remarks>
            Any quality indicator will be removed before checking if the language already exists.
            </remarks>
    </member>
    <member name="M:EPiServer.Globalization.LanguagePreferenceList.ConditionalAddRange(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Conditionally adds a range of language code strings.
            </summary>
      <param name="range">The strings to add.</param>
    </member>
    <member name="M:EPiServer.Globalization.LanguagePreferenceList.RemoveQualityIndicator(System.String)">
      <summary>
            Removes the quality indicator from a language code.
            </summary>
      <param name="browserLanguageCode">The browser language code.</param>
      <returns>The language code without quality indicator.</returns>
      <remarks>
            A browser may append a quality indicator to the language code to indicate the preference
            level for a specific language. For example a browser may send "en;q=0.7" and "sv;q=1.0"
            This means that the highest preference is for Swedish (1.0) and English is second preference.
            The use of quality indicators is not currently supported, EPiServer simply assumes that language
            codes are sent in preference order.
            </remarks>
    </member>
    <member name="T:EPiServer.Globalization.LanguageResolver">
      <summary>
            Component that resolves languages.
            </summary>
    </member>
    <member name="M:EPiServer.Globalization.LanguageResolver.GetPreferredCulture">
      <summary>
            Gets the preffered culture for the request.
            </summary>
    </member>
    <member name="T:EPiServer.Globalization.LanguageSelection">
      <summary>
            The abstract base class for the various language selection features in EPiserver
            </summary>
      <summary>
            The abstract base class for the various language selection features in EPiserver
            </summary>
    </member>
    <member name="M:EPiServer.Globalization.LanguageSelection.SetCulture">
      <summary>
            Sets the culture for the specific language type.
            </summary>
    </member>
    <member name="M:EPiServer.Globalization.LanguageSelection.SetCulture(System.String)">
      <summary>
            Sets the culture for the specific language type.
            </summary>
      <param name="priorityLanguage">The priority language.</param>
      <returns>The CultureInfo object that has been stored for tyis language type.</returns>
      <remarks>
            The priorityLanguage parameter is available to help implementing simple overrides of
            the language selection mechanism by putting the priority language first in the language
            preference list.
            </remarks>
    </member>
    <member name="M:EPiServer.Globalization.LanguageSelection.LanguagePreferenceList(System.String)">
      <summary>
            Get a list of language codes.
            </summary>
      <param name="priorityLanguage">The priority language.</param>
      <returns>A LanguagePreferenceList sorted in preference order.</returns>
    </member>
    <member name="M:EPiServer.Globalization.LanguageSelection.DetermineCulture(EPiServer.Globalization.LanguagePreferenceList)">
      <summary>
            Determines the culture based on the language preferences.
            </summary>
      <param name="languagePreference">The language preferences.</param>
      <returns>A CultureInfo object representing the selected language.</returns>
    </member>
    <member name="P:EPiServer.Globalization.LanguageSelection.FinalFallbackCulture">
      <summary>
            Gets the final fallback culture.
            </summary>
      <value>The final fallback culture.</value>
      <remarks>
            This property is used as a final way out when the DetermineCulture method has failed to
            find a valid culture.
            </remarks>
    </member>
    <member name="M:EPiServer.Globalization.LanguageSelection.TryGetCulture(System.String,System.Globalization.CultureInfo@)">
      <summary>
            Tries to retrieve a culture from a language code.
            </summary>
      <param name="languageCode">The language code.</param>
      <param name="culture">The culture.</param>
      <returns>true if culture contains a valid culture; false if the process failed.</returns>
    </member>
    <member name="M:EPiServer.Globalization.LanguageSelection.IsCandidateMatch(System.String,System.String)">
      <summary>
            Determines whether there is a potential language match between the language codes.
            </summary>
      <param name="languageCode1">The first language code.</param>
      <param name="languageCode2">The second language code.</param>
      <returns>
        <c>true</c> if it is a candidate match between the strings; otherwise, <c>false</c>.
            </returns>
      <remarks>
      </remarks>
    </member>
    <member name="P:EPiServer.Globalization.LanguageSelection.HostLanguageMappings">
      <summary>
            Gets the host language mappings.
            </summary>
      <value>The host language mappings.</value>
      <remarks>
            This property is used to map a host name, such as www.company.com, to a specific language.
            </remarks>
    </member>
    <member name="M:EPiServer.Globalization.LanguageSelection.GetLanguageFromHost">
      <summary>
            Gets the language to use based on the host name.
            </summary>
      <returns>A string that is a culture name. If no match found, returns null.</returns>
      <remarks>
            This code performs its work based on the information in the &lt;siteHostsMappings&gt; section in EPiServerFramework.config.
            </remarks>
    </member>
    <member name="M:EPiServer.Globalization.LanguageSelection.GetDefaultHostLanguage">
      <summary>
            Gets the default host language.
            </summary>
      <returns>A string that is a culture name. If no language defined for default host (name="*"), returns null.</returns>
      <remarks>
            This code performs its work based on the information in the &lt;siteHostsMappings&gt; section in EPiServerFramework.config.
            </remarks>
    </member>
    <member name="M:EPiServer.Globalization.LanguageSelection.IsHostLanguageMatch(System.String)">
      <summary>
            Determines whether the requested language matches the default language as defined by a hostname-to-language mapping.
            </summary>
      <returns>
        <c>true</c> if the languages math; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            The hostname to language mapping is defined in the configuration file (by default EPiServerFramework.config, 
            &lt;siteHostsMapping&gt; section). The purpose of this is that the language indicator segment in the URL
            is not needed when you have a match between the requested language and the default language as indicated by 
            the host name.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Globalization.SystemLanguage">
      <summary>
            Implementation of the <see cref="T:EPiServer.Globalization.LanguageSelection" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Globalization.SystemLanguage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Globalization.SystemLanguage" /> class.
            </summary>
      <remarks>
            The constructor is protected to prevent this class from being instantiated directly, but it should 
            still be possible to inherit from this class. Access should be through the Instance property.
            </remarks>
    </member>
    <member name="P:EPiServer.Globalization.SystemLanguage.Instance">
      <summary>
            Gets or sets the instance of LanguageSelection to use.
            </summary>
      <value>The instance.</value>
      <remarks>
            Assigning to this property allows you to completely replace how the culture/user interface language
            is determined.
            </remarks>
    </member>
    <member name="M:EPiServer.Globalization.SystemLanguage.SetCulture(System.String)">
      <summary>
            Sets preferred culture based on priority language
            </summary>
      <param name="priorityLanguage">
      </param>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
    </member>
    <member name="M:EPiServer.Globalization.SystemLanguage.LanguagePreferenceList(System.String)">
      <summary>
            Creates a new <see cref="M:EPiServer.Globalization.SystemLanguage.LanguagePreferenceList(System.String)" /> and adds a new language to it.
            </summary>
      <param name="priorityLanguage">Language code</param>
      <returns>
        <see cref="M:EPiServer.Globalization.SystemLanguage.LanguagePreferenceList(System.String)" /> object.</returns>
    </member>
    <member name="M:EPiServer.Globalization.SystemLanguage.DetermineCulture(EPiServer.Globalization.LanguagePreferenceList)">
      <summary>
            Sets preferred culture based on priority language
            </summary>
      <param name="languagePreference">Language code</param>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
    </member>
    <member name="P:EPiServer.Globalization.SystemLanguage.FinalFallbackCulture">
      <summary>
            Read-only fallback culture <see cref="T:System.Globalization.CultureInfo" /> type property.
            </summary>
    </member>
    <member name="T:EPiServer.Globalization.UserInterfaceLanguage">
      <summary>
            Implementation of the <see cref="T:EPiServer.Globalization.LanguageSelection" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Globalization.UserInterfaceLanguage.#ctor(EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Globalization.LanguageSelection" /> class.
            </summary>
      <remarks>
            The constructor is protected to prevent this class from being instantiated directly, but it should 
            still be possible to inherit from this class. Access should be through the Instance property.
            </remarks>
    </member>
    <member name="P:EPiServer.Globalization.UserInterfaceLanguage.Instance">
      <summary>
            Gets or sets the instance of LanguageSelection to use.
            </summary>
      <value>The instance.</value>
      <remarks>
            Assigning to this property allows you to completely replace how the culture/user interface language
            is determined.
            </remarks>
    </member>
    <member name="M:EPiServer.Globalization.UserInterfaceLanguage.SetCulture(System.String)">
      <summary>
            Sets the culture for the user interface language.
            </summary>
      <param name="priorityLanguage">The priority language.</param>
      <remarks>
            The priorityLanguage parameter is available to help implementing simple overrides of
            the language selection mechanism by putting the priority language first in the language
            preference list.
            </remarks>
    </member>
    <member name="M:EPiServer.Globalization.UserInterfaceLanguage.LanguagePreferenceList(System.String)">
      <summary>
            Get a list of language codes.
            </summary>
      <param name="priorityLanguage">The priority language.</param>
      <returns>
            A LanguagePreferenceList sorted in preference order.
            </returns>
    </member>
    <member name="M:EPiServer.Globalization.UserInterfaceLanguage.DetermineEPiServerUserInterfaceCulture">
      <summary>
            Determines the user interface culture when inside the EPiServer CMS user interface url namespaces. This might be used if your outside
            the EPiServer user interfaces and want to determine the users UI language when inside the EPiServer user interfaces.
            </summary>
      <returns>The <see cref="T:System.Globalization.CultureInfo" /> that will be used inside the EPiServer user interfaces</returns>
    </member>
    <member name="M:EPiServer.Globalization.UserInterfaceLanguage.DetermineCulture(EPiServer.Globalization.LanguagePreferenceList)">
      <summary>
            Determines the culture based on the language preferences.
            </summary>
      <param name="languagePreference">The language preferences.</param>
      <returns>
            A CultureInfo object representing the selected language.
            </returns>
    </member>
    <member name="P:EPiServer.Globalization.UserInterfaceLanguage.FinalFallbackCulture">
      <summary>
            Read-only fallback culture <see cref="T:System.Globalization.CultureInfo" /> type property.
            </summary>
    </member>
    <member name="T:EPiServer.Globalization.LanguagePreferenceListExtensions">
      <summary>
            Implements a list with language codes and handles some special semantics with language strings
            </summary>
    </member>
    <member name="M:EPiServer.Globalization.LanguagePreferenceListExtensions.ConditionalAddCookie(EPiServer.Globalization.LanguagePreferenceList,System.Web.HttpCookie)">
      <summary>
            Conditionally adds the language from the given cookie.
            </summary>
      <remarks>
            Any quality indicator will be removed before checking if the language already exists.
            </remarks>
    </member>
    <member name="T:EPiServer.Initialization.Internal.AccessDeniedHandlerInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents the initialization module for <see cref="T:EPiServer.Web.IAccessDeniedHandler" />.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.BlobRouterInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents the initialization module for thumbnail image generator.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.LicenseInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents the initialization module for License.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.MembershipSecurityEntityProviderInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.MvcInitializationModule">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class and its members are reserved for internal use and are not intended to be used in your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.MvcInitializationModule.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Configures the container.
            </summary>
      <param name="context">The context.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.MvcInitializationModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes the specified context.
            </summary>
      <param name="context">The context.</param>
      <remarks>
        <para>
            Adds a view engine to the view engine collection, which makes it possible to find partial views in EPiServer UI folder.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.MvcInitializationModule.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Uninitializes the specified context.
            </summary>
      <param name="context">The context.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.ProfileInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents the initialization module for License.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.RouterInitializationModule">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class and its members are reserved for internal use and are not intended to be used in your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.RouterInitializationModule.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Configures the container.
            </summary>
      <param name="context">The context.</param>
      <exception cref="T:System.NotImplementedException">
      </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.RouterInitializationModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes the specified context.
            </summary>
      <param name="context">The context.</param>
      <remarks>
        <para>
            Adds a view engine to the view engine collection, which makes it possible to find partial views in EPiServer UI folder.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Initialization.Internal.RouterInitializationModule.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Uninitializes the specified context.
            </summary>
      <param name="context">The context.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Initialization.Internal.ThumbnailInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents the initialization module for thumbnail image generator.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Notification.Internal.QueryableMembershipUsers.#ctor(System.Web.Security.MembershipProvider)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create a instance of <see cref="T:EPiServer.Notification.Internal.QueryableMembershipUsers" /></summary>
      <param name="provider">The membership provider.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Notification.Internal.QueryableMembershipUsers.FindAsync(System.String,System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Notification.Internal.QueryableNotificationUsersProfileImpl">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.TranslateType">
      <summary>
            Define the type/level of translation to be done by the system.
            </summary>
    </member>
    <member name="F:EPiServer.TranslateType.None">
      <summary>
            No translation of controls.
            </summary>
    </member>
    <member name="F:EPiServer.TranslateType.OnlyExplicitControls">
      <summary>
            Only do translation for controls that implement ITranslate
            </summary>
    </member>
    <member name="F:EPiServer.TranslateType.AllControls">
      <summary>
            Translate all controls that implement ITranslate or has a property named "translate"
            </summary>
    </member>
    <member name="T:EPiServer.PageSetupEventHandler">
      <summary>
            The delegate type used to generate PageSetup event from the <see cref="T:EPiServer.PageBase" /> class.
            </summary>
    </member>
    <member name="T:EPiServer.PageBase">
      <summary>
            BasePage for EPiServer templates. Supports encoding settings and language translation.
            </summary>
      <remarks>
        <para>
            This class inherits from <see cref="T:System.Web.UI.Page" />, which has the core functionality for 
            setting up and rendering a standard Web form (.aspx file.) The <b>PageBase</b> class extends the 
            functionality of the <b>Page</b> class with EPiServer-specific features as access to configuration 
            settings (<b>Configuration</b> property), user information (<b>CurrentUser</b> property) and 
            information about the current EPiServer page (<b>CurrentPage</b> property.)
            </para>
            The <b>PageBase</b> class is an abstract class, meaning it cannot be instantiated. This class is 
            the base class of all template classes in EPiServer. <b>TemplatePage</b> is the most used class as base 
            for Web forms.
            <para><b>PageBase</b> also implements the <b>IPageSource</b> interface, which enables you to retrieve other 
            EPiServer pages easily. 
            </para><note>
            If you use anything apart from templates that inherit from <b>PageBase</b> to create EPiServer 
            page types, no dynamic content will be presented on the Web page.
            </note></remarks>
      <examples>
            The following code example demonstrates the usage of <b>PageBase</b>.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.cs" region="PageBase" lang="cs" /></examples>
    </member>
    <member name="M:EPiServer.PageBase.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageBase" /> class.
            </summary>
      <param name="options">The page options to enable.</param>
      <remarks>
            The options parameter is a bitmap constructed from the OptionFlag of Page plugin classes from
            the EPiServer.Web.PageExtensions namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageBase" /> class.
            </summary>
      <param name="enable">The page options to enable.</param>
      <param name="disable">The page options to disable.</param>
      <remarks>
            The disable bitmap will override enabled options in case of conflicting options.
            </remarks>
    </member>
    <member name="P:EPiServer.PageBase.Locate">
      <summary>
            Gets the object used to resolve services part of the public API.
            </summary>
    </member>
    <member name="P:EPiServer.PageBase.Options">
      <summary>
            Gets the page extension options, which is a bitmap constructed from the OptionFlag of Page plugin classes from
            the EPiServer.Web.PageExtensions namespace.
            </summary>
    </member>
    <member name="M:EPiServer.PageBase.IsOptionEnabled(System.Int32)">
      <summary>
            Determines whether the specific page extension option is enabled.
            </summary>
      <param name="option">The option to check.</param>
      <returns>
        <c>true</c> if option is an enabled option; otherwise, <c>false</c>.
            </returns>
      <remarks>
            option is the OptionFlag value for one of the page extensions defined with the [PagePlugIn] attribute.
            </remarks>
    </member>
    <member name="E:EPiServer.PageBase.PageSetup">
      <summary>
            Exposes the PageSetup event which is raised when a new page instance is created.
            </summary>
      <remarks>
            Attach to this event to be able to attach your code to specific events in the page lifecycle, allowing
            for your page extension to extend any page that derives from PageBase with your custom code.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.OnPageSetup">
      <summary>
            Called when a new page instance is created.
            </summary>
      <remarks>
            Will raise the PageSetup event to allow page extensions to hook into the page lifecycle.
            </remarks>
    </member>
    <member name="P:EPiServer.PageBase.CurrentPageHandler">
      <summary>
            Gets or sets the current page handler.
            </summary>
      <value>The current page handler.</value>
      <remarks>
            The page handler is used to retrieve the current page. By assignig your own implementation to this property
            you can take control over the process of retrieving the current page.
            </remarks>
    </member>
    <member name="P:EPiServer.PageBase.EditHints">
      <summary>
            Gets the list containing the names of properties that have been registered for full refresh.
            </summary>
      <remarks>
                This list will be read by the <see cref="T:EPiServer.Web.WebControls.FullRefreshPropertiesMetaData" /> and output as a comma separated list
                that that will be collected by the edit interface client.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.OnPreRenderComplete(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Page.PreRenderComplete" /> event after the <see cref="M:System.Web.UI.Page.OnPreRenderComplete(System.EventArgs)" /> event and before the page is rendered.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            We override this method to make sure that EPiServers script manager can render the script blocks needed.
            </remarks>
    </member>
    <member name="P:EPiServer.PageBase.LocalizationService">
      <summary>
            The localizationService used by the various Translate methods on <see cref="T:EPiServer.PageBase" />.
            </summary>
      <remarks>
            Will return the static property <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current" /> if not set.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.Translate(System.String)">
      <summary>
            Translate the given string to the current language.
            </summary>
      <param name="key">A string to translate</param>
      <returns>The translated string.</returns>
      <remarks>
        <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)" /> for more information on 
            the format of the string to translate.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.TranslateForScript(System.String)">
      <summary>
            Translate the given string to the current language, in a script-safe format.
            </summary>
      <param name="key">A string to translate</param>
      <returns>The translated string.</returns>
      <remarks>
        <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)" /> for more information on 
            the format of the string to translate.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.TranslateFallback(System.String,System.String)">
      <summary>
            Translate the given string to the current language. Will return supplied fallback string if no match is found.
            </summary>
      <param name="key">A string to translate</param>
      <param name="fallback">The string to return if no match was found for key.</param>
      <returns>The translated string.</returns>
      <remarks>
        <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)" /> for more information on 
            the format of the string to translate.
            </remarks>
    </member>
    <member name="P:EPiServer.PageBase.PageTranslation">
      <summary>
            Gets or sets the page translation object.
            </summary>
      <value>The page translation.</value>
    </member>
    <member name="P:EPiServer.PageBase.IsDefaultPageLink">
      <summary>
            Determine if the current page request was done without an "id=..." parameter.
            </summary>
      <remarks>
            The system will handle a missing id parameter by using the <b>pageStartId</b> value
            from <see cref="N:EPiServer.Configuration" />.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.SetValuesForPropertyControls(System.Web.UI.Control)">
      <summary>
            Get new data from property web controls into the actual property objects for all controls implementing IPropertyControl.
            </summary>
      <remarks>Used to update PagaData values when saving a page.</remarks>
    </member>
    <member name="M:EPiServer.PageBase.RequiredAccess">
      <summary>
            Determine the access level that is required for the current web request.
            </summary>
      <returns>The resulting access level.</returns>
      <remarks>This is the default implementation that simply requests Read access, regardless of the type of requested operation.</remarks>
    </member>
    <member name="M:EPiServer.PageBase.QueryAccess">
      <summary>
            The access level that the current user holds to the current page.
            </summary>
      <returns>The access level.</returns>
      <remarks>
            Will return the actual access level for the current page, or Read if there
            is no current page.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.QueryDistinctAccess">
      <summary>
            Verify that access control requirements are met for the current web request.
            </summary>
      <returns>True if access requirements are met.</returns>
      <remarks>
            This method simply checks that all bits set in <see cref="M:EPiServer.PageBase.RequiredAccess" /> 
            are set in <see cref="M:EPiServer.PageBase.QueryAccess" />.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.CheckAccess">
      <summary>
            Verify that access control requirements are met for the current web request.
            </summary>
      <remarks>
            This method is called as part of the PageBase.OnInit method. It determines the current user's 
            access level and compares it to the current page. If the user does not have sufficient access, 
            the PageBase.AccessDenied method will be called.
            <note>
            Will trigger an AccessDenied if the access requirements are not met.
            </note></remarks>
    </member>
    <member name="M:EPiServer.PageBase.ValidatePageTemplate">
      <summary>
            Makes sure that the right page template is used to present a page.
            </summary>
      <remarks>
            This method is called as part of the page load process. If a page (as determined by the ID query 
            string parameter on the URL) is accessed with an .aspx file that is not the correct page template 
            file, this method will throw an exception of type <b>EPiServerException</b>. If you have a page type that 
            should be displayed using different page templates, you should override this method and do your 
            custom validation. A validation error should be signalled by throwing an <b>EPiServerException</b>.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.AccessDenied">
      <summary>
            The method that is invoked when the current users access rights are not suffcient for the
            operation that he tries to perform.
            </summary>
      <remarks>
            This method will perform different functions depending on the authentication method in use. If
            forms authentication is used, then it will redirect the user to the login page as defined in web.config.
            If windows authentication is used, an Access Denied header (http status 401) will be sent to the client.
            </remarks>
      <example>
            The following code example demonstrates the usage of <b>AccessDenied</b> to deny access to a user that is not 
            logged on. The example is taken from the Web user control LoginStatus.ascx, which is delivered with 
            EPiServer. It must be understood that the click event for ASP.NET Server control Login has been linked 
            to the function Login_Click, so that when the user clicks the Login button, this function is executed. 
            Note that the call to AccessDenied does not necessarily mean that the user is denied access - it can also 
            be used to present the user with a login dialog. This happens in Web user control QuickBar.ascx.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.cs" region="AccessDenied" lang="cs" /></example>
    </member>
    <member name="P:EPiServer.PageBase.CurrentPage">
      <summary>
            Get page data for current page.
            </summary>
      <value>
            A <see cref="T:EPiServer.Core.PageData" /> object, null if failure.
            </value>
      <remarks>
        <para>
            A little caution is necessary when using <b>CurrentPage</b> in the HTML part of Web forms, as 
            <b>CurrentPage</b> is implemented from <b>IPageSource</b> and <see cref="T:EPiServer.UserControlBase" /> 
            also implements <b>IPageSource</b>. 
            This means that <b>CurrentPage</b> will have different meanings in the same Web form depending on 
            whether it's used outside any included EPiServer Web custom control in general and outside 
            any templated EPiServer Web custom control in particular.
            </para>
      </remarks>
      <example>
            The following code example demonstrates the usage of both <b>CurrentPage</b> and <b>Configuration</b>. 
            The example is used in EPiServer's sample Web site to send e-mail. <b>Configuration</b> is used 
            to initalize the mail server and also, together with <b>CurrentPage</b>, to send information to 
            the recipient of the e-mail.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.cs" region="ConfigurationSendEmail" lang="cs" />
            The following example demonstrates the usage of <b>CurrentPage</b> on a page template file, outside of any 
            included controls.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.aspx" region="ConfigurationPageTemplate" lang="aspnet" />
            The following example demonstrates the usage of <b>CurrentPage</b> on a page template file, 
            inside ContentFramework and Content controls.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.aspx" region="ConfigurationContentFramework" lang="aspnet" />
            The following example demonstrates the usage of <b>CurrentPage</b> inside an EPiServer templated control.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.aspx" region="ConfigurationTemplatedControl" lang="aspnet" />
            The following code example demonstrates the usage of <b>CurrentPage</b> and <b>IsValue</b>. 
            <b>CurrentPage</b> is used to read the content of two properties; NewsCount and MainImage. 
            To safeguard the property access, the presence and possible contents of both properties are 
            first tested using the <b>IsValue</b> method.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.cs" region="IsValue" lang="cs" /></example>
    </member>
    <member name="P:EPiServer.PageBase.CurrentPageLink">
      <summary>
            Get the reference to the current page.
            </summary>
      <value>A PageReference to the current page.</value>
      <remarks>
        <para>
            Parses the query string / form parameters to get the page reference.
            </para>
        <b>CurrentPageLink</b> has no place inside templated controls, since the <b>Container</b> 
            property is of the type <b>PageTemplateContainer</b>, which doesn't implement <b>CurrentPageLink</b>.
            </remarks>
      <example>
            The following code example demonstrates the usage of <b>CurrentPageLink</b> to 
            retrieve the <b>PageData</b> object.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.cs" region="CurrentPageLink" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.PageBase.GetPage(EPiServer.Core.PageReference)">
      <summary>
            Retrieves a PageData object based on supplied <see cref="T:EPiServer.Core.PageReference" /> 
            argument (from <see cref="T:EPiServer.Core.IPageSource" />).
            </summary>
      <param name="pageLink">
      </param>
      <returns>Returns the <see cref="T:EPiServer.Core.PageData" /> object for the specified <see cref="T:EPiServer.Core.PageReference" />  argument.</returns>
      <example>
            The following code example demonstrates the usage of <b>GetPage</b> to retrieve the <b>PageData</b> 
            object for the current page.
            <code>EPiServer PageData tmpPageData = GetPage( CurrentPageLink );</code>
            The following code example demonstrates the usage of <b>GetPage</b> and <b>CurrentPage</b> 
            to retrieve <b>PageData</b> information for the page specified in the <b>EventsContainer</b> attribute.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.cs" region="GetPage" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.PageBase.GetPage(EPiServer.Core.PageReference,EPiServer.Core.LoaderOptions)">
      <summary>
            Retrieves a PageData object based on supplied <see cref="T:EPiServer.Core.PageReference" />
            argument (from <see cref="T:EPiServer.Core.IPageSource" />).
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="loaderOptions">The loader settings that is used to load the correct language and version of the page.</param>
      <returns>
            Returns the <see cref="T:EPiServer.Core.PageData" /> object for the specified <see cref="T:EPiServer.Core.PageReference" />  argument.
            </returns>
      <example>
            The following code example demonstrates the usage of <b>GetPage</b> to retrieve the <b>PageData</b>
            object for the current page.
            <code>EPiServer PageData tmpPageData = GetPage( CurrentPageLink );</code>
            The following code example demonstrates the usage of <b>GetPage</b> and <b>CurrentPage</b>
            to retrieve <b>PageData</b> information for the page specified in the <b>EventsContainer</b> attribute.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.cs" region="GetPage" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.PageBase.GetChildren(EPiServer.Core.PageReference)">
      <summary>
            Retrieves a <b>PageData</b> listing based on supplied <see cref="T:EPiServer.Core.PageReference" /> 
            argument (from <see cref="T:EPiServer.Core.IPageSource" />).
            </summary>
      <param name="pageLink">
      </param>
      <returns>
      </returns>
      <remarks>
        <para>
            The <b>IPageSource</b> interface is implemented by many classes, such as <see cref="T:EPiServer.PageBase" /> 
            (and its descendants), <see cref="T:EPiServer.DataFactory" />, <see cref="T:EPiServer.Web.WebControls.PageControlBase" />. 
            You typically use the members of this interface to get information about the current page 
            (the <b>CurrentPage</b> property) or use either the <b>GetPage</b> or <b>GetChildren</b> methods to 
            retrieve page data. 
            </para>
        <para>
          <b>IPageSource</b> was created as an interface due to the fact that the <b>GetPage</b> and 
            <b>GetChildren</b> methods normally have the same implementation independently of the class 
            that implements <b>IPageSource</b>. The <b>CurrentPage</b> property has different meanings 
            for different implementations. As an example, <b>CurrentPage</b> on the <b>PageBase</b> 
            class refers to the currently loaded page (based on the ID in the query string). 
            </para>
        <note>
          <b>Note:</b>  As <b>IPageSource</b> is an interface, it doesn't implement any of its own attributes or 
            methods itself. This means that you must be aware of which class implementing <b>IPageSource</b> 
            that you're dealing with. For example, PageBase.CurrentPage returns a 
            <see cref="T:EPiServer.Core.PageData" /> object for the current page, the same for <see cref="T:EPiServer.UserControlBase" />. 
            However, in a templated control such as EPiServer.Web.WebControls.PageList, <b>CurrentPage</b>
            instead means the current page in the iteration.
            </note>
      </remarks>
      <example>
            The following code example demonstrates a specialized implementation of <b>IPageSource</b> to set 
            custom access level restrictions to the pages returned.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.cs" region="SetRestriction" /></example>
    </member>
    <member name="M:EPiServer.PageBase.LoadDisplayTemplate(EPiServer.Core.BlockData)">
      <summary>
            Resolves and instantiates the web or user control for the BlockData.
            </summary>
      <param name="blockData">The block data to populate the control with.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.PageBase.IsDesignMode">
      <summary>
            Gets a value indicating whether this instance is design mode.
            </summary>
      <value>
        <c>true</c> if this instance is design mode; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.PageBase.IsValue(System.String)">
      <summary>
            Determine if the named property exists and has a value.
            </summary>
      <param name="propertyName">The name of the page property to check.</param>
      <returns>True if the property exists with a valid (i e non-null) value.</returns>
      <remarks>
        <b>IsValue</b> can be seen as a safe way to check whether a property exists and has been assigned contents.
            </remarks>
      <example>
            The following code example demonstrates the usage of <b>CurrentPage</b> and <b>IsValue</b>. <b>CurrentPage</b> 
            is used to read the content of two properties; NewsCount and MainImage. To safeguard the property access, 
            the presence and possible contents of both properties are first tested using the <b>IsValue</b> method.
            <code source="../CodeSamples/EPiServer/PageBaseSamples.cs" region="IsValue" /></example>
    </member>
    <member name="M:EPiServer.PageBase.BuildUrlWithPageReference(System.String,EPiServer.Core.PageReference)">
      <summary>
            Helper method to construct a URL with a page reference parameter
            </summary>
      <param name="url">The original URL</param>
      <param name="pageLink">Page that should be referenced by the URL</param>
      <returns>A new URL</returns>
      <remarks>
            This method is primarily intended to be used with a URL read from the <b>PageURL</b> property 
            of a <see cref="T:EPiServer.Core.PageData" /> class. In some special cases you may need to retarget 
            the URL to another page or another version of the same page.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.SetCachePolicy">
      <summary>
            Sets the cache policy for this request based on parameters as current user and parameters.
            </summary>
      <remarks>
            Override this method if you wish to customize the cache policy for a page.
            The output cache is turned on based on the following criteria:
            <para>
            1. The <b>EPnCachePolicyTimeout</b> in web.config is &gt; 0.
            </para><para>
            2. The current user must not be logged on, aka Anonymous.
            </para><para>
            3. The request must be a GET type request. Hence, Postbacks and form postings will not be cached.
            </para><para>
            4. The current page must be the published version (the WorkID is == 0).
            </para>
            The cache parameters are fetched from web.config, more specifically the <b>EPsCacheVaryByCustom</b> and 
            <B>EPsCacheVaryByParams</B> settings. Additionally, a dependency to the <b>DataFactoryCache</b> is set. 
            When pages are changed, the cache is flushed. Cache item expiration is set to the <b>HttpCacheExpiration</b> 
            setting, which is the number of seconds the item should reside in the cache, as long as the <b>StopPublish</b> 
            value of the page is not less than the policy timeout (in which case, the <b>StopPublish</b> value is used).
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase.RegisterClientScriptFile(System.String)">
      <summary>
            Helper method to register a client script file. If the method is called multiple times using
            the same key, only a single instance of the file is registered.
            </summary>
      <param name="rootRelativePath">The script file that should be referenced.</param>
      <remarks>The relativePath will be used as the unique script key.</remarks>
    </member>
    <member name="M:EPiServer.PageBase.ResolveUrlFromUI(System.String)">
      <summary>
            Resolves the path relative the UI directory.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PageBase.ResolveUrlFromUtil(System.String)">
      <summary>
            Resolves the path relative the Util directory.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.PageBase.ScriptManager">
      <summary>
            Gets the script manager.
            </summary>
      <value>The script manager.</value>
    </member>
    <member name="M:EPiServer.PageBase.OnInit(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event to initialize the page.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:EPiServer.PageBase.SetupVisitorGroupImpersonation">
      <summary>
            Called to configure visitor group impersonation used from editing preview
            </summary>
    </member>
    <member name="M:EPiServer.PageBase.KeepUserLoggedOn">
      <summary>
            Makes sure windows authentication stay persistent even on anonymous pages when user has been logged in
            </summary>
    </member>
    <member name="M:EPiServer.PageBase.Get``1(EPiServer.Core.ContentReference)">
      <summary>
            Shortcut to retrieve an <see cref="T:EPiServer.Core.IContent" /> object from the currently configured <see cref="T:EPiServer.IContentRepository" />
            specified by the <see cref="T:EPiServer.Core.ContentReference" /> parameter.
            </summary>
      <typeparam name="T">The type of the content object to be retrieved.</typeparam>
      <param name="contentLink">Reference to the content to retrieve.</param>
      <returns>
            The <see cref="T:EPiServer.Core.IContent" /> object requested.
            </returns>
      <seealso cref="M:EPiServer.ServiceLocationHelperExtensions.ContentRepository(EPiServer.ServiceLocation.ServiceLocationHelper)" />
      <seealso cref="M:EPiServer.IContentLoader.Get``1(EPiServer.Core.ContentReference)" />
    </member>
    <member name="M:EPiServer.PageBase.GetChildren``1(EPiServer.Core.ContentReference)">
      <summary>
            Shortcut to retrieve an <see cref="T:EPiServer.Core.IContent" /> listing from the currently configured <see cref="T:EPiServer.IContentRepository" />.
            </summary>
      <typeparam name="T">The type of the content objects to be retrieved.</typeparam>
      <param name="contentLink">Reference to parent content whose children to retrieve.</param>
      <returns>
            Returns a collection of <see cref="T:EPiServer.Core.IContent" /> directly below the content referenced by
            the <see cref="T:EPiServer.Core.ContentReference" /> parameter.
            </returns>
      <seealso cref="M:EPiServer.ServiceLocationHelperExtensions.ContentRepository(EPiServer.ServiceLocation.ServiceLocationHelper)" />
      <seealso cref="M:EPiServer.IContentLoader.GetChildren``1(EPiServer.Core.ContentReference)" />
    </member>
    <member name="P:EPiServer.PageBase.EPiServer#Core#IContentSource#CurrentContent">
      <summary>
            Gets the content of the current page.
            </summary>
      <value>
            The content of the current page.
            </value>
      <seealso cref="T:EPiServer.Core.IContent" />
      <seealso cref="P:EPiServer.PageBase.CurrentPage" />
    </member>
    <member name="T:EPiServer.PageBase`1">
      <summary>
            Page Template class for supporting strongly typed PageData objects with an arbitrary type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The strongly typed PageData type.</typeparam>
    </member>
    <member name="M:EPiServer.PageBase`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageBase`1" /> class.
            </summary>
      <param name="options">The page options to enable.</param>
      <remarks>
            The options parameter is a bitmap constructed from the OptionFlag of Page plugin classes from
            the EPiServer.Web.PageExtensions namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.PageBase`1.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageBase`1" /> class.
            </summary>
      <param name="enable">The page options to enable.</param>
      <param name="disable">The page options to disable.</param>
      <remarks>
            The disable bitmap will override enabled options in case of conflicting options.
            </remarks>
    </member>
    <member name="P:EPiServer.PageBase`1.CurrentPage">
      <summary>
            Gets or sets the current page of T.
            </summary>
      <value>
            The current page.
            </value>
      <remarks>
            Replaces the CurrentPage from base with a strongly typed version.
            </remarks>
      <example>
            The following example demonstrates the usage of <b>CurrentPage</b> on a template page that uses a strongly typed model.
            <code source="../CodeSamples/EPiServer/TemplatePageSamples.cs" lang="cs" /></example>
    </member>
    <member name="P:EPiServer.PageBase`1.EditHints">
      <summary>
            Gets the list containing the names of properties that have been registered for full refresh.
            </summary>
      <remarks>
            Replaces the EditHints property in the base class and changes the return type.
            This list will be read by the <see cref="T:EPiServer.Web.WebControls.FullRefreshPropertiesMetaData" /> and output as a comma separated list
            that that will be collected by the edit interface client.
            </remarks>
    </member>
    <member name="T:EPiServer.PageSetupEventArgs">
      <summary>
            Event argument for page extensions that listen to the <see cref="E:EPiServer.PageBase.PageSetup" /> event.
            </summary>
    </member>
    <member name="M:EPiServer.PageSetupEventArgs.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageSetupEventArgs" /> class.
            </summary>
      <param name="options">The enabled options.</param>
    </member>
    <member name="P:EPiServer.PageSetupEventArgs.Options">
      <summary>
            Gets the enabled options.
            </summary>
      <value>The options.</value>
      <remarks>
            The options are a dynamically created bitmap for all the loaded page extensions. Note that the actual bit value
            assigned to a specific page extension may vary from time to time, since it is determined at plugin load time.
            </remarks>
    </member>
    <member name="M:EPiServer.PageSetupEventArgs.IsOptionEnabled(System.Int32)">
      <summary>
            Determines whether the specified option is enabled.
            </summary>
      <param name="option">The option.</param>
      <returns>
        <c>true</c> if the specified option is enabled; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.PageSiteMapNode">
      <summary>
            Represents a node in the hierarchical site map structure provided by the <see cref="T:EPiServer.PageSiteMapProvider" />.
            </summary>
    </member>
    <member name="M:EPiServer.PageSiteMapNode.#ctor(System.Web.SiteMapProvider,EPiServer.Core.PageData,EPiServer.Core.PageData)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PageSiteMapNode" /> class.
            </summary>
      <param name="provider">The provider.</param>
      <param name="page">The page.</param>
      <param name="parent">The parent page.</param>
    </member>
    <member name="P:EPiServer.PageSiteMapNode.CurrentPage">
      <summary>
            Gets the <see cref="T:EPiServer.Core.PageData" /> instance that this <see cref="T:EPiServer.PageSiteMapNode" /> represents.
            </summary>
      <value>The current page.</value>
    </member>
    <member name="P:EPiServer.PageSiteMapNode.ParentPage">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.PageData" /> instance that represents the parent of the current <see cref="T:EPiServer.PageSiteMapNode" />.
            </summary>
      <value>The parent page.</value>
    </member>
    <member name="T:EPiServer.PageSiteMapProvider">
      <summary>
            SiteMap provider for the EPiServer page structure
            </summary>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the <see cref="T:System.Web.SiteMapProvider"></see> implementation, including any resources that are needed to load site map data from persistent storage.
            </summary>
      <param name="name">The <see cref="P:System.Configuration.Provider.ProviderBase.Name"></see> of the provider to initialize.</param>
      <param name="attributes">A <see cref="T:System.Collections.Specialized.NameValueCollection"></see> that can contain additional attributes to help initialize the provider. These attributes are read from the site map provider configuration in the Web.config file.</param>
      <remarks>
            The attributes argument accepts the following entries
            <list type="bullet"><item>enableVisibleInMenu</item><item>startPageLink</item><item>startPageLinkProperty</item><item>allowNestedPageSiteMapProvider</item></list></remarks>
    </member>
    <member name="P:EPiServer.PageSiteMapProvider.PageSource">
      <summary>
            Gets the IPageSource used for accessing pages in the provider instance. When deriving from this class you can override this property to provide a different PageSource. The default PageSource used is the DataFactory Instance.
            </summary>
      <value>The IPageSource implementation.</value>
    </member>
    <member name="P:EPiServer.PageSiteMapProvider.StartPageLink">
      <summary>
            Gets the <see cref="T:EPiServer.Core.PageReference" /> representing the root page in the site map.
            </summary>
      <value>The start page link.</value>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.FindSiteMapNodeFromKey(System.String)">
      <summary>
            Retrieves a <see cref="T:EPiServer.PageSiteMapNode"></see> object based on a specified key.
            </summary>
      <param name="key">A lookup key with which a <see cref="T:EPiServer.PageSiteMapNode"></see> is created.</param>
      <returns>
            A <see cref="T:EPiServer.PageSiteMapNode"></see> that represents the page identified by key; otherwise, null, if no corresponding <see cref="T:System.Web.SiteMapNode"></see> is found or if security trimming is enabled and the <see cref="T:System.Web.SiteMapNode"></see> cannot be returned for the current user. The default is null.
            </returns>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.FindSiteMapNode(System.String)">
      <summary>
            Retrieves a <see cref="T:EPiServer.PageSiteMapNode"></see> object that represents the page at the specified URL.
            </summary>
      <param name="rawUrl">A URL that identifies the page for which to retrieve a <see cref="T:EPiServer.PageSiteMapNode"></see>.</param>
      <returns>
            A <see cref="T:System.Web.SiteMapNode"></see> that represents the page identified by rawURL; otherwise, null, if no corresponding <see cref="T:System.Web.SiteMapNode"></see> is found or if security trimming is enabled and the <see cref="T:System.Web.SiteMapNode"></see> cannot be returned for the current user.
            </returns>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.FindSiteMapNode(System.Web.HttpContext)">
      <summary>
            Finds the site map node based on the state of the current request provided by the http context.
            </summary>
      <param name="ctx">The HttpContext.</param>
      <returns>A <see cref="T:System.Web.SiteMapNode"></see></returns>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.GetChildNodes(System.Web.SiteMapNode)">
      <summary>
            Retrieves the child nodes of a specific <see cref="T:EPiServer.PageSiteMapNode"></see>.
            </summary>
      <param name="node">The <see cref="T:EPiServer.PageSiteMapNode"></see> for which to retrieve all child nodes.</param>
      <returns>
            A read-only <see cref="T:System.Web.SiteMapNodeCollection"></see> that contains the immediate child nodes of the specified <see cref="T:System.Web.SiteMapNode"></see>; otherwise, null or an empty collection, if no child nodes exist.
            </returns>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.GetParentNode(System.Web.SiteMapNode)">
      <summary>
            Retrieves the parent node of a specific <see cref="T:EPiServer.PageSiteMapNode"></see> object.
            </summary>
      <param name="node">The <see cref="T:EPiServer.PageSiteMapNode"></see> for which to retrieve the parent node.</param>
      <returns>
            A <see cref="T:EPiServer.PageSiteMapNode"></see> that represents the parent of node; otherwise, null, if the <see cref="T:EPiServer.PageSiteMapNode"></see> has no parent or security trimming is enabled and the parent node is not accessible to the current user.
            </returns>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.GetRootNodeCore">
      <summary>
            Retrieves the root node of all the nodes that are currently managed by the current provider.
            </summary>
      <returns>
            A <see cref="T:EPiServer.PageSiteMapNode"></see> that represents the root node of the set of nodes that the current provider manages.
            </returns>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.IsAccessibleToUser(System.Web.HttpContext,System.Web.SiteMapNode)">
      <summary>
            Retrieves a Boolean value indicating whether the specified <see cref="T:EPiServer.PageSiteMapNode"></see> object can be viewed by the user in the specified context.
            </summary>
      <param name="context">The <see cref="T:System.Web.HttpContext"></see> that contains user information.</param>
      <param name="node">The <see cref="T:EPiServer.PageSiteMapNode"></see> that is requested by the user.</param>
      <returns>
            true if security trimming is enabled and node can be viewed by the user or security trimming is not enabled; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">context is null.- or -node is null.</exception>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.GetProviderFromPage(EPiServer.Core.PageData)">
      <summary>
            Gets the <see cref="T:System.Web.SiteMapProvider" /> that serves the path represented by a specific <see cref="T:EPiServer.Core.PageData" /> instance.
            </summary>
      <param name="pageData">The <see cref="T:EPiServer.Core.PageData" /> instance.</param>
      <returns>The <see cref="T:System.Web.SiteMapProvider" /></returns>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.GetSiteMapNodeFromPage(EPiServer.Core.PageReference)">
      <summary>
            Gets a <see cref="T:System.Web.SiteMapNode" /> for a specific <see cref="T:EPiServer.Core.PageReference" /> instance.
            </summary>
      <param name="pageLink">The page link to get a sitemap node for</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.GetSiteMapNodeFromPage(EPiServer.Core.PageData,EPiServer.Core.PageData)">
      <summary>
            Creates a <see cref="T:EPiServer.PageSiteMapNode" /> for the provided page represented by a <see cref="T:EPiServer.Core.PageData" /> instance and its parent.
            </summary>
      <param name="pd">A <see cref="T:EPiServer.Core.PageData" /> representing the page to create a node for.</param>
      <param name="parent">A <see cref="T:EPiServer.Core.PageData" /> representing the parent page in the hierarchy.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.GetParentPageFromSiteMapNode(System.Web.SiteMapNode)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.PageData" /> instance representing the parent page of the specified <see cref="T:EPiServer.PageSiteMapNode" />.
            </summary>
      <param name="node">The <see cref="T:EPiServer.PageSiteMapNode" /> for which the parent page should be retrieved.</param>
      <returns>A <see cref="T:EPiServer.Core.PageData" /> instance representing the parent page.</returns>
    </member>
    <member name="M:EPiServer.PageSiteMapProvider.GetPageFromSiteMapNode(System.Web.SiteMapNode)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.PageData" /> instance representing the page of the specified <see cref="T:EPiServer.PageSiteMapNode" />.
            </summary>
      <param name="node">The <see cref="T:EPiServer.PageSiteMapNode" /> for which a page should be retrieved.</param>
      <returns>A <see cref="T:EPiServer.Core.PageData" /> instance representing the current page.</returns>
    </member>
    <member name="T:EPiServer.Personalization.EPiServerProfile">
      <summary>
            The base profile for users in EPiServer. Defines some basic information to implement common personalization
            solutions in a web site. Also contains personalization data needed for EPiServers edit mode.
            </summary>
      <example>
        <para>
            Example checks if the user is authenticated and passes some Current User property values for rendering:
            </para>
        <code source="../CodeSamples/EPiServer/Personalization/EPiServerProfileSamples.cs" region="CurrentUser" />
        <para>
            Example that is saving a dummy value in global scope, this information will be available on all 
            pages for this user. 
            </para>
        <code source="../CodeSamples/EPiServer/Personalization/EPiServerProfileSamples.cs" region="SaveDummy" />
        <para>
            Example of greeting a user with name.
            </para>
        <code source="../CodeSamples/EPiServer/Personalization/EPiServerProfileSamples.cs" region="FirstName" />
      </example>
    </member>
    <member name="M:EPiServer.Personalization.EPiServerProfile.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.EPiServerProfile" /> class.
            </summary>
      <exception cref="T:System.Configuration.Provider.ProviderException">
            The enabled attribute of the profile section of the Web.config file is false.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            A property type specified in the profile section of the Web.config file could not be created.
            -or-
            The allowAnonymous attribute for a property in the profile section of the Web.config file is set to true and the enabled attribute of the &lt;anonymousIdentification&gt; element is set to false.
            -or-
            The serializeAs attribute for a property in the profile section of the Web.config file is set to <see cref="F:System.Configuration.SettingsSerializeAs.Binary" /> and the <see cref="P:System.Type.IsSerializable" /> property of the specified type returns false.
            -or-
            The name of a provider specified using the provider attribute of a profile property could not be found in the <see cref="P:System.Web.Profile.ProfileManager.Providers" /> collection.
            -or-
            The type specified for a profile property could not be found.
            -or-
            A profile property was specified with a name that matches a property name on the base class specified in the inherits attribute of the profile section.
            </exception>
    </member>
    <member name="M:EPiServer.Personalization.EPiServerProfile.#ctor(System.Web.Profile.ProfileBase)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.EPiServerProfile" /> class.
            </summary>
      <param name="wrappedProfile">The wrapped profile.</param>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:System.Object" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="M:EPiServer.Personalization.EPiServerProfile.Save">
      <summary>
            Updates the profile data source with changed profile property values.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.PropertyValues">
      <summary>
            Gets a collection of settings property values.
            </summary>
      <value>
      </value>
      <returns>A collection of <see cref="T:System.Configuration.SettingsPropertyValue"></see> objects representing the actual data values for the properties managed by the <see cref="T:System.Configuration.SettingsBase"></see> instance.</returns>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Context">
      <summary>
            Gets the associated settings context.
            </summary>
      <value>
      </value>
      <returns>A <see cref="T:System.Configuration.SettingsContext"></see> associated with the settings instance.</returns>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Providers">
      <summary>
            Gets a collection of settings providers.
            </summary>
      <value>
      </value>
      <returns>A <see cref="T:System.Configuration.SettingsProviderCollection"></see> containing <see cref="T:System.Configuration.SettingsProvider"></see> objects.</returns>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Language">
      <summary>
            Typed access to the "Language" value. The language the user wants to see the UI in.
            </summary>
      <value>The language for the UI.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Culture">
      <summary>
            Gets or sets the users preferred UI language in the form of a <see cref="T:System.Globalization.CultureInfo" /> object.
            This is equivalent to the <see cref="P:EPiServer.Personalization.EPiServerProfile.Language" /> property.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Email">
      <summary>
            Typed access to the "email" value.
            </summary>
      <value>The email.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.FirstName">
      <summary>
            Typed access to the "FirstName" value.
            </summary>
      <value>The first name.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.LastName">
      <summary>
            Typed access to the "LastName" value.
            </summary>
      <value>The last name.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Title">
      <summary>
            Typed access to the "Title" value.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Company">
      <summary>
            Typed access to the "Company" value.
            </summary>
      <value>The company.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Country">
      <summary>
            Typed access to the "Country" value.
            </summary>
      <value>The country.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.SubscriptionInfo">
      <summary>
            Typed access to the "SubscriptionInfo" value. 
            The pages the user is subscribing to and the interval she wishes to get updates.
            </summary>
      <value>The subscription info.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.CustomExplorerTreePanel">
      <summary>
            Typed access to the "CustomExplorerTreePanel" value.
            The favorite pages for the user, displayed in the favorites tab in the page explorer.
            </summary>
      <value>The custom explorer tree panel.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.FileManagerFavourites">
      <summary>
            Typed access to the "FileManagerFavourites" value.
            The favorite locations in the file system for the user.
            </summary>
      <value>The file manager favourites.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.EditTreeSettings">
      <summary>
            Typed access to the "EditTreeSettings" value.
            What icons the user wishes to see in the page tree. 
            </summary>
      <value>The edit tree settings.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.ClientToolsActivationKey">
      <summary>
            Typed access to the "ClientToolsActivationKey" value.
            Key needed for the client tools.
            </summary>
      <value>The client tools activation key.</value>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.FrameworkName">
      <summary>
            Typed access to the "FrameworkName" value.
            Mode string for requested framework.
            </summary>
      <value>The name of the framework.</value>
    </member>
    <member name="M:EPiServer.Personalization.EPiServerProfile.TrySetProfileValue(System.String,System.Object)">
      <summary>
            Tries to set a profile value.
            </summary>
      <param name="profileProperty">The name of the profile property.</param>
      <param name="value">The value.</param>
      <returns>true if the value was set successfully, false otherwise.</returns>
      <remarks>
            This method can be used as a convenience to handle a flexible profile with optional properties.
            </remarks>
    </member>
    <member name="M:EPiServer.Personalization.EPiServerProfile.TryGetProfileValue(System.String,System.Object@)">
      <summary>
            Tries to get a profile value.
            </summary>
      <param name="profileProperty">The name of the profile property.</param>
      <param name="value">The value.</param>
      <returns>true if the value was read successfully, false otherwise.</returns>
      <remarks>
            This method can be used as a convenience to handle a flexible profile with optional properties.
            </remarks>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.DisplayName">
      <summary>
            Returns the user name in a format suitable for display.
            </summary>
      <value>The display name of the user.</value>
      <remarks>
            If FirstName is defined, will return "FirstName LastName (UserName)", otherwise return
            "UserName".
            </remarks>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.EmailWithMembershipFallback">
      <summary>
            Gets the email address of the current user.
            </summary>
      <value>The email address, or null if not defined.</value>
      <remarks>
        <para>Will first try to get email address from the profile data. If no email address defined, attempt
            to load email address from the current membership provider.
            </para>
        <para>
            Note that the membership provider might not be defined or the provider might not support email address
            information.
            </para>
        <para>
            In case of error we return null and log information with error level Error.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Personalization.EPiServerProfile.Wrap(System.Web.Profile.ProfileBase)">
      <summary>
            Gets an EPiServerProfile from the ProfileBase instance.
            </summary>
      <param name="profile">The ProfileBase instance.</param>
      <returns>An EPiServerProfile instance.</returns>
      <remarks>
            If the profile is already an EPiServerPrfile it is simply returned, otherwise it is wrapped in an EPiServerProfile
            instance.
            </remarks>
    </member>
    <member name="M:EPiServer.Personalization.EPiServerProfile.Get(System.String)">
      <summary>
            Gets the specified profile.
            </summary>
      <param name="username">The user name.</param>
      <returns>An EPiServerProfile with profile information for the given user.</returns>
      <remarks>
            This is a convenience wrapper to return a profile as an EPiServerProfile. If profiles are not configured or if
            the returned profile is not of the correct type, returns null. I e will not throw an exception on error.
            </remarks>
    </member>
    <member name="M:EPiServer.Personalization.EPiServerProfile.GetProfiles(System.String)">
      <summary>
            Gets the profiles for the passed username.
            </summary>
      <param name="userName">Name of the user or role</param>
      <remarks>If passed in userName is a user then the profile for that user is returned else
            if passed in userName represents a role profiles for all role members are returned</remarks>
      <returns>list of profiles</returns>
    </member>
    <member name="M:EPiServer.Personalization.EPiServerProfile.IsRole(System.String)">
      <summary>
            Determines whether the specified name represents a role or a user.
            </summary>
      <param name="username">The username.</param>
      <returns>
        <c>true</c> if the specified username is a role; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Current">
      <summary>
            Gets the profile for the current user.
            </summary>
      <value>The EPiServerProfile object.</value>
      <remarks>
            Pulls the current profile from ASP.NET, but will throw exceptions if profiles are not enabled or if the
            profile is of the wrong type.
            </remarks>
    </member>
    <member name="P:EPiServer.Personalization.EPiServerProfile.Enabled">
      <summary>
            Gets a value indicating whether profiles are enabled and there is a current profile record.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
      <remarks>
            If this property returns <c>true</c>, then a call to EPiServerProfile.Current will not throw an exception.
            </remarks>
    </member>
    <member name="M:EPiServer.Personalization.EPiServerProfile.EPiServer#Personalization#Internal#IQueryableProfile#Find(System.String)">
      <summary>
            Asynchronously finds a user by criterion.
            </summary>
      <param name="username">Find the user that match the profile.</param>
      <returns>The matched profile.</returns>
    </member>
    <member name="T:EPiServer.Personalization.GuiSettings">
      <summary>
            Settings for a user about what icons she wishes to see in the page tree.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowLanguageMissing">
      <summary>
            Gets or sets a value indicating whether to display the icon for page missing current language.
            </summary>
      <value>
        <c>true</c> if the icon for page missing current language should be shown; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowLanguageFallback">
      <summary>
            Gets or sets a value indicating whether to display the icon that shows that the page is displayed in another language.
            </summary>
      <value>
        <c>true</c> if the icon that the page is displayed in another language should be shown; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowNew">
      <summary>
            Gets or sets a value indicating whether to display the icon that shows that the page was created in the last 48 hours.
            </summary>
      <value>
        <c>true</c> if the icon that shows that the page has been created in the last 48 hours should be shown; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowNotPublished">
      <summary>
            Gets or sets a value indicating whether to display the icon that shows that the page has not been published.
            </summary>
      <value>
        <c>true</c> if the icon that shows that the page has not been published should be shown; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowNotStarted">
      <summary>
            Gets or sets a value indicating whether to display the icon that shows that the page's start publish time is in the future.
            </summary>
      <value>
        <c>true</c> if the icon that shows that the page's start publish time is in the future should be shown; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowExpired">
      <summary>
            Gets or sets a value indicating whether to display the icon that shows the page's stop publish time is in the past.
            </summary>
      <value>
        <c>true</c> if the icon that shows that the page's start publish time is in the future should be shown; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowReadOnly">
      <summary>
            Gets or sets a value indicating whether to display the icon for missing edit access.
            </summary>
      <value>
        <c>true</c> if the icon for missing edit access should be shown; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowNotVisibleInMenu">
      <summary>
            Gets or sets a value indicating whether to display the icon indicating if the page is not shown in menus.
            </summary>
      <value>
        <c>true</c> if the icon for not visible in menus should be shown; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowPageProviderIcon">
      <summary>
            Gets or sets a value indicating whether to display the icon for custom page providers.
            </summary>
      <value>
        <c>true</c> if the icon for custom page providers should be shown; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowShortcutIcon">
      <summary>
            Gets or sets a value indicating whether to display the icon for internal shortcuts.
            </summary>
      <value>
        <c>true</c> if the icon for internal shortcuts should be shown; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowExternalIcon">
      <summary>
            Gets or sets a value indicating whether to display the icon for external links.
            </summary>
      <value>
        <c>true</c> if the icon for internal shortcuts should be shown; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowInactiveIcon">
      <summary>
            Gets or sets a value indicating whether to display the icon for pages that are set as "no link, only text".
            </summary>
      <value>
        <c>true</c> if the icon for pages that are set as "no link, only text" should be shown; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowFetchDataIcon">
      <summary>
            Gets or sets a value indicating whether to display the icon for pages that fetches data from other pages.
            </summary>
      <value>
        <c>true</c> if the icon for pages that fetches data from other pages should be shown; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowEditingInProgressIcon">
      <summary>
            Gets or sets a value indicating whether the In Use icon should be displayed.
            </summary>
      <value>
        <c>true</c> if the icon should be displayed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.ShowContainerPageIcon">
      <summary>
            Gets or sets a value indicating whether the Container Page icon should be displayed.
            </summary>
      <value>
        <c>true</c> if the icon should be displayed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.GuiSettings.SettingsEnabled">
      <summary>
            Gets or sets a value indicating whether the user uses default or custom settings.
            </summary>
      <value>
        <c>true</c> if the user uses custom settings; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:EPiServer.Personalization.Internal.IQueryableProfile">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Define the members for  finding users.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.IQueryableProfile.Find(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Asynchronously finds a user by criterion.
            </summary>
      <param name="username">if the user name match then returns the profile.</param>
      <returns>The matched user.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.Internal.SubscriptionMail">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The class that handles sending of mail notifications for subscriptions, used by <see cref="T:EPiServer.Personalization.SubscriptionJob" />.
            </summary>
      <remarks>
        <para>This subscription handler is going to deliver one subscription mail for each subscription root and language for the subcription, if it exists changed pages for it.</para>
        <para>The text for the "Read More..." text is taken from the page property "MailReadMore" on the subscription root.</para>
        <para>The subject of the mail is generated from the page property "MailSubject" on the subscription root.</para>
        <para>The mail from address generated from the "MailFrom" page property on the subscription root.</para>
            The stylesheet is taken from the web.config 
            <code> 
            &lt;episerver xmlns="http://EPiServer.Configuration.EPiServerSection"&gt;
              &lt;sites&gt;
                &lt;site description="Example Site"&gt;
                  &lt;siteSettings 
                    ...
                    uiEditorCssPaths="~/MyCss.css"
            </code></remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.Internal.SubscriptionMail.UserData">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Personalized information
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.Internal.SubscriptionMail.User">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. SID
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.SubscriptionMail.IsValidEmailAddress(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Check if an email address conforms to the RFC 2822 email address protocol. 
            For more information, see http://rfc.net/rfc2822.html. 
            </summary>
      <param name="address">Email address to check</param>
      <returns>True if valid address, otherwise false</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.SubscriptionMail.Send(EPiServer.Core.PageData,EPiServer.Core.PageDataCollection)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Send an e-mail to user with information about changed pages.
            </summary>
      <param name="subscriptionRootPage">The root page for the subscription that this mail should be based on</param>
      <param name="changedPages">The changed pages to notify the user about</param>
      <remarks>Create the subscription part of the body by calling the <see cref="M:EPiServer.Personalization.Internal.SubscriptionMail.GenerateBody(EPiServer.Core.PageData,EPiServer.Core.PageDataCollection)" /> function. </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.SubscriptionMail.GetCSSContents">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Return the CSS data that is included in the subscription mail.
            By default this means fetching the contents of the file defined by the key
            EPsEditCSS in web.config. Any C style comments are automatically removed from the
            string before it is returned.
            </summary>
      <returns>A string with CSS data</returns>
      <remarks>Do not include any &lt;style&gt; tags in the string that is returned.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.SubscriptionMail.GenerateBody(EPiServer.Core.PageData,EPiServer.Core.PageDataCollection)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create the Html for the subscription mail body.
            </summary>
      <param name="subscriptionPage">The subscription template page.</param>
      <param name="changedPagesReadOnly">A collection of readonly pages that have changed.</param>
      <returns>The complete Html for the mail body ("&lt;html&gt;.... &lt;/html&gt;").</returns>
      <remarks>
            	Call the <see cref="M:EPiServer.Personalization.Internal.SubscriptionMail.GetCSSContents" /> function to fetch any CSS data that should be
            	included in the html.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.Internal.SubscriptionMail.FormatPageForBody(EPiServer.Core.PageData,EPiServer.Core.PageData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Format info for a page that has changed and will be included inside the body of 
            a subscription mail.
            </summary>
      <param name="subscriptionPage">The subscription page</param>
      <param name="page">Page that holds information that needs to be be formatted</param>
      <returns>A string that contains HTML by default</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Visitor group criterion that will match the geolocation based on request IP address with the location stored in the settings
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateCriterion.#ctor">
      <summary>
            Initializes an instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateCriterion" />.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateCriterion.#ctor(EPiServer.Personalization.IGeolocationProvider)">
      <summary>
            Initializes an instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateCriterion" />.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateCriterion.#ctor(EPiServer.Personalization.IGeolocationProvider,EPiServer.Web.IPAddressResolver)">
      <summary>
            Initializes an instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateCriterion" />.
            </summary>
      <param name="geolocationProvider">The geolocation provider.</param>
      <param name="addressResolver">The address resolver.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateCriterion.IsMatch(EPiServer.Personalization.IGeolocationResult,EPiServer.Personalization.Capabilities)">
      <summary>
            Determines whether the specified principal is match.
            Will match the geolocation of the client with the location stored in the settings
            </summary>
      <param name="location">The location of the client.</param>
      <param name="capabilities">The capabilities of the geolocation system in use.</param>
      <returns>
        <c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model class for geographic coordinate criterion
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateModel.Location">
      <summary>
            Textual description of the selected location
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateModel.Latitude">
      <summary>
            Selected latitude
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateModel.Longitude">
      <summary>
            Selected longitude
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateModel.Radius">
      <summary>
            Radius around specified longitude and latitude in kilometers
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateModel.RadiusUnit">
      <summary>
            Gets or sets which unit the Radius is specified in
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCoordinateModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.DistanceUnit">
      <summary>
            Units of distance
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.DistanceUnit.Kilometers">
      <summary>
            Kilometers
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.DistanceUnit.Miles">
      <summary>
            (English) Miles
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Base class for geographic criteria
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1.GeolocationProvider">
      <summary>
            Returns the configured geolocation provider.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1.#ctor">
      <summary>
            Initializes an instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1" />.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1.#ctor(EPiServer.Personalization.IGeolocationProvider)">
      <summary>
            Initializes an instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1" />.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1.#ctor(EPiServer.Personalization.IGeolocationProvider,EPiServer.Web.IPAddressResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1" /> class.
            </summary>
      <param name="geolocationProvider">The geolocation provider.</param>
      <param name="addressResolver">The address resolver.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1.#ctor(EPiServer.Personalization.IClientGeolocationResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified principal is match.
            Will look up the geolocation based on client IP and call a method in derived class to determine if location matches.
            </summary>
      <param name="principal">The principal.</param>
      <param name="httpContext">The HTTP context.</param>
      <returns>
        <c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1.IsMatch(EPiServer.Personalization.IGeolocationResult,EPiServer.Personalization.Capabilities)">
      <summary>
            Abstract method which should determine if the location of the client matches the location in settings
            </summary>
      <param name="location">The location of the client</param>
      <param name="capabilities">The capabilities of the geolocation provider</param>
      <returns>
        <c>true</c> if the looked up location matches the settings; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicCriterionBase`1.HasCapabilities(EPiServer.Personalization.Capabilities,EPiServer.Personalization.Capabilities)">
      <summary>
            Checks whether a set of capabilities are available
            </summary>
      <param name="capabilities">The available capabilities</param>
      <param name="capabilitiesMask">The capabilities to check for</param>
      <returns>
        <c>true</c> if the specified capabilities are available; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Visitor group criterion that will match the geolocation based on request IP address with the location stored in the settings
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationCriterion.#ctor">
      <summary>
            Initializes an instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationCriterion" />.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationCriterion.#ctor(EPiServer.Personalization.IGeolocationProvider)">
      <summary>
            Initializes an instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationCriterion" />.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationCriterion.#ctor(EPiServer.Personalization.IGeolocationProvider,EPiServer.Web.IPAddressResolver)">
      <summary>
            Initializes an instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationCriterion" />.
            </summary>
      <param name="geolocationProvider">The geolocation provider.</param>
      <param name="addressResolver">The address resolver.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationCriterion.IsMatch(EPiServer.Personalization.IGeolocationResult,EPiServer.Personalization.Capabilities)">
      <summary>
            Determines whether the specified principal is match.
            Will match the geolocation of the client with the location stored in the settings
            </summary>
      <param name="location">The location of the client.</param>
      <param name="capabilities">The capabilities of the geolocation system in use.</param>
      <returns>
        <c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A model that represents the settings required by <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationCriterion" />.
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationModel.Region">
      <summary>
            The chosen geographic region.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationModel.Country">
      <summary>
            The chosen country.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationModel.Continent">
      <summary>
            The chosen continent.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.GeographicLocationModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.Internal.ViewedCategoriesConverter.ToString(System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.HashSet{System.String}})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Build up string like "catID, page1, page2, page2 # catID, page2, page3"
            </summary>
      <param name="visitedCats">visited categories</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.Internal.ViewedCategoriesConverter.ToDictionary(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Build up a dictionary that key is cat id and value is hash set of visited pages
            </summary>
      <param name="visitedCats">The visited categories as string</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.Internal.VisitorGroupReferenceFinder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class with functionality to find references between visitor groups
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.Internal.VisitorGroupReferenceFinder.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.Internal.VisitorGroupReferenceFinder" /> class.
            </summary>
      <param name="visitorGroupRepository">The visitor group repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.Internal.VisitorGroupReferenceFinder.FindReferencesToMe(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds Visitor Group that has reference to me by VisitorGroupMembershipCriterion.
            </summary>
      <param name="referenceVisitorGroupId">The reference visitor group id.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.Internal.VisitorGroupReferenceFinder.Find(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds Visitor Group that has reference to me by VisitorGroupMembershipCriterion.
            </summary>
      <param name="visitorGroupId">The reference visitor group id.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.IVisitorGroupReferenceFinder">
      <summary>
            Find visitor group references by searching critera
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.IVisitorGroupReferenceFinder.Find(System.Guid)">
      <summary>
            Search all critieria in the system for references to a visitor group
            </summary>
      <param name="visitorGroupId">The identity of the visitor group</param>
      <returns>A list of visitor groups containing critera with a reference to the visitor group</returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Criterion that is used to count number of visits to the site. The criterion can act in three different modes:
            <see cref="F:EPiServer.Personalization.VisitorGroups.Criteria.TimeFrame.Total" />: Just count total amount of hits.
            <see cref="F:EPiServer.Personalization.VisitorGroups.Criteria.TimeFrame.Within" />: Count number of hits in the given X number of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.TimePeriod" />.
            <see cref="F:EPiServer.Personalization.VisitorGroups.Criteria.TimeFrame.Since" />: Count the number of hits in a given date.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsCriterion.NumberOfVisitsKey">
      <summary>
            The key used for the cookie that is used to keep track of site visits.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsCriterion.MaxTimeStampsInCookie">
      <summary>
            The maximum number of visit dates to keep track of. Count will still be updated even though this number
            has been hit, but the date for the oldest entry is removed when a new site visit happens.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsCriterion.Initialize(EPiServer.Personalization.VisitorGroups.VisitorGroupCriterion)">
      <summary>
            Initializes the specified visitor group criterion.
            </summary>
      <param name="visitorGroupCriterion">The visitor group criterion.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsCriterion.CookieKey">
      <summary>
            Gets the cookie key.
            </summary>
      <value>The cookie key.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsCriterion.SetCookieValue(System.Web.HttpCookie,System.Web.HttpContextBase)">
      <summary>
            Sets the cookie value.
            </summary>
      <param name="cookie">The cookie.</param>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsCriterion.CookieExpires">
      <summary>
            Gets the expire date for the cookie.
            </summary>
      <value>The expire date for the cookie.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified principal is match.
            </summary>
      <param name="principal">The principal.</param>
      <param name="httpContext">The HTTP context.</param>
      <returns>
        <c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.ComparisonType">
      <summary>
            How comparisions should be done.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.ComparisonType.Less">
      <summary>
            Less than the given threshold.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.ComparisonType.Equal">
      <summary>
            Equal to the given threshold.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.ComparisonType.More">
      <summary>
            More than the given threshold.
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeFrame">
      <summary>
            The logic for how to count site visits.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.TimeFrame.Total">
      <summary>
            No time frame, count total visit count.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.TimeFrame.Within">
      <summary>
            Count visits in a given time frame.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.TimeFrame.Since">
      <summary>
            Count visits since a given date and time.
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.TimePeriod">
      <summary>
            The time period that is used to count hits.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.TimePeriod.Day">
      <summary>
            X number of Days.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.TimePeriod.Week">
      <summary>
            X number of Weeks.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.TimePeriod.Month">
      <summary>
            X number of Month.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.TimePeriod.Year">
      <summary>
            X number of Years.
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model class for <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsCriterion" />.
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.Comparison">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ComparisonType" />.
            </summary>
      <value>The <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ComparisonType" />.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.Threshold">
      <summary>
            Gets or sets the amount of hits that matches the given conditions that are needed in order to be considered part of the visitor segment.
            </summary>
      <value>The threshold.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.TimeFrameSelection">
      <summary>
            Gets or sets the time frame selection. This affects how site hits are counted.
            </summary>
      <value>The time frame selection.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.FixTime">
      <summary>
            Gets or sets the fix time that is used when <see cref="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.TimeFrameSelection" /> is set to <see cref="F:EPiServer.Personalization.VisitorGroups.Criteria.TimeFrame.Since" />.
            </summary>
      <value>The fix time.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.FloatTimeValue">
      <summary>
            Gets or sets the float time value. This is used together with <see cref="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.FloatTimePeriod" /> to create a period for which hits are counted.
            </summary>
      <value>The float time value.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.FloatTimePeriod">
      <summary>
            Gets or sets the float time value. This is used together with <see cref="P:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.FloatTimeValue" /> to create a period for which hits are counted.
            </summary>
      <value>The float time value.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.Validate(EPiServer.Personalization.VisitorGroups.VisitorGroup)">
      <summary>
            Validate FixTime when TimeFrameSelection set to Since. Then its value should be savable into database.
            </summary>
      <param name="currentGroup">The current group.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.NumberOfVisitsModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.PageInfo">
      <summary>
            Conveys and stores information about a selected page.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.PageInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.PageInfo" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.PageInfo.#ctor(EPiServer.IContentRepository,EPiServer.Web.IPermanentLinkMapper)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.PageInfo" /> class.
            </summary>
      <param name="contentRepository">The page repository.</param>
      <param name="permanentLinkMapper">The permanent link mapper.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.PageInfo.Id">
      <summary>
            Gets or sets the database identifier of this model.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.PageInfo.PageLink">
      <summary>
            The <see cref="T:EPiServer.Core.PageReference" /> string representation of the selected page.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.PageInfo.PageName">
      <summary>
            The name of the selected page.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.PageInfo.PageGuid">
      <summary>
            Gets or sets the page GUID.
            </summary>
      <value>The page GUID.</value>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Criterion for visitor groups that checks the referrer
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerCriterion.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerCriterion" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerCriterion.#ctor(EPiServer.Personalization.VisitorGroups.IStateStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerCriterion" /> class.
            </summary>
      <param name="stateStorage">state storage</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerCriterion.SessionKey">
      <summary>
            Gets the session key.
            </summary>
      <value>The cookie key.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerCriterion.IsMatch(System.Uri)">
      <summary>
            Determines whether the specified URi referrer match specified value.
            </summary>
      <param name="urlReferrer">The URi referrer.</param>
      <returns>
        <c>true</c> if the specified URi referrer match specified value; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerCriterion.GetUri(System.Web.HttpContextBase)">
      <summary>
            Gets the request referrer URI from the http context.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Referrer type
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerType.HostName">
      <summary>
            Referrer host name
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerType.Url">
      <summary>
            Referrer Url
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model for referrer
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerModel.Value">
      <summary>
            Gets or sets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerModel.StringMatchType">
      <summary>
            Gets or sets the type to match.
            </summary>
      <value>The type of the match.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerModel.ReferrerType">
      <summary>
            Gets or sets the referrer type.
            </summary>
      <value>The referrer type.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ReferrerModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordReferrerCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Criterion for visitor groups that checks the referrer query string
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordReferrerCriterion.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordReferrerCriterion" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordReferrerCriterion.#ctor(EPiServer.Personalization.VisitorGroups.IStateStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordReferrerCriterion" /> class.
            </summary>
      <param name="stateStorage">
      </param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordReferrerCriterion.SessionKey">
      <summary>
            Gets the session key.
            </summary>
      <value>The cookie key.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordReferrerCriterion.SearchPatternRegex">
      <summary>
            Gets the search pattern regex for search engines matches.
            </summary>
      <value>The search pattern regex.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordReferrerCriterion.IsMatch(System.Uri)">
      <summary>
            Determines whether the specified URL referrer query match specified value.
            </summary>
      <param name="urlReferrer">The URL referrer.</param>
      <returns>
        <c>true</c> if the specified URL referrer query match specified value; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordReferrerCriterion.GetUri(System.Web.HttpContextBase)">
      <summary>
            Gets the request referrer URI from the http context.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model for Host name
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordModel.SearchWord">
      <summary>
            Gets or sets the search word.
            </summary>
      <value>The search word.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.SearchWordModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Visitor group criterion that will match the request parameters with the values stored in the settings
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlCriterion.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlCriterion" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlCriterion.#ctor(System.Func{System.Uri},EPiServer.Personalization.VisitorGroups.IStateStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlCriterion" /> class.
            </summary>
      <param name="GetExternalUrl">External dependency for resolving external URL through the URL rewriter</param>
      <param name="stateStorage">State storage</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlCriterion.SessionKey">
      <summary>
            Gets the session key.
            </summary>
      <value>The cookie key.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlCriterion.IsMatch(System.Uri)">
      <summary>
            Determines whether the specified URI is match.
            </summary>
      <param name="uri">The URI.</param>
      <returns>
        <c>true</c> if the specified URI is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlCriterion.GetUri(System.Web.HttpContextBase)">
      <summary>
            Gets the request URI from http context.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model for the request url
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlModel.Url">
      <summary>
            Gets or sets the value to match.
            </summary>
      <value>The match value.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlModel.MatchType">
      <summary>
            Gets or sets the type of string match.
            </summary>
      <value>The type of the match.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.StartUrlModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A criterion for matching a time range in day.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayCriterion.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayCriterion" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayCriterion.#ctor(EPiServer.Personalization.VisitorGroups.Criteria.ICurrentTimeProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayCriterion" /> class.
            </summary>
      <param name="currentTimeProvider">The current time provider.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
      <param name="principal">The principal.</param>
      <param name="httpContext">The current http context</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The context parameter may be null but can be used to transfer external context to a Virtual role provider
            </remarks>
      <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.ICurrentTimeProvider">
      <summary>
            Interface for providing current time. For example: server's time, browser's local time
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ICurrentTimeProvider.GetNow(System.Web.HttpRequestBase)">
      <summary>
            Gets the current time.
            </summary>
      <param name="request">Current http request.</param>
      <returns>Current time</returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model class of TimeOfDay criterion
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel.StartTime">
      <summary>
            Gets or sets the start time.
            </summary>
      <value>The start time.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel.EndTime">
      <summary>
            Gets or sets the end time.
            </summary>
      <value>The end time.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel.Monday">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel" /> is monday.
            </summary>
      <value>
        <c>true</c> if monday; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel.Tuesday">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel" /> is tuesday.
            </summary>
      <value>
        <c>true</c> if tuesday; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel.Wednesday">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel" /> is wednesday.
            </summary>
      <value>
        <c>true</c> if wednesday; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel.Thursday">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel" /> is thursday.
            </summary>
      <value>
        <c>true</c> if thursday; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel.Friday">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel" /> is friday.
            </summary>
      <value>
        <c>true</c> if friday; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel.Saturday">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel" /> is saturday.
            </summary>
      <value>
        <c>true</c> if saturday; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel.Sunday">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel" /> is sunday.
            </summary>
      <value>
        <c>true</c> if sunday; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.TimeOfDayModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Base class fro Uri criterion
            </summary>
      <typeparam name="T">
      </typeparam>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1.#ctor(EPiServer.Personalization.VisitorGroups.IStateStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1" /> class.
            </summary>
      <param name="stateStorage">
      </param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1.Subscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Called when a criteria instance is initialized.
            Starts listenen on session start
            </summary>
      <param name="criterionEvents">The criterion notifier.</param>
      <remarks>
            Any event subscribed to in this method should be unsubscribed in method Unsubscribe.
            The reason for this is that otherwise there will be "dangling" event handlers.
            </remarks>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1.Unsubscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Called when a criteria is unloaded, for example because it seetings has been updated.
            Unsubscribes the session start handler
            </summary>
      <param name="criterionEvents">
      </param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified principal is mathced the hostname referer criteria.
            </summary>
      <param name="principal">The principal.</param>
      <param name="httpContext">The HTTP context.</param>
      <returns>
        <c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1.GetSession(System.Web.HttpContextBase)">
      <summary>
            Gets the session.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1.IsMatch(System.Uri)">
      <summary>
            Determines whether the specified URI is match.
            </summary>
      <param name="uri">The URI.</param>
      <returns>
        <c>true</c> if the specified URI is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1.GetUri(System.Web.HttpContextBase)">
      <summary>
            Gets the URI.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.UriSessionStartCriterionBase`1.SessionKey">
      <summary>
            Gets or sets the session key.
            </summary>
      <value>The session key.</value>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A criterion for matching values in the user profile.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileCriterion.#cctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileCriterion" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileCriterion.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileCriterion" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileCriterion.#ctor(System.Web.Profile.ProfileBase)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileCriterion" /> class.
            </summary>
      <param name="profileRepository">The profile repository.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileCriterion.IgnoreUserProfileProperties">
      <summary>
            A list of user profile properties that should not be available to the visitor group criterion.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified principal is match.
            Will match the value in the user profile with the value stored in the settings.
            The settings also holds what profile value to match.
            </summary>
      <param name="principal">The principal.</param>
      <param name="httpContext">The HTTP context.</param>
      <returns>
        <c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model for the user profile criterion
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileModel.MatchType">
      <summary>
            Gets or sets the type of the matching that should be performed.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileModel.ProfileKey">
      <summary>
            Gets or sets the key to use when looking for the value in the users profile.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileModel.ProfileValue">
      <summary>
            Gets or sets value to match against the value in the users profile.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.UserProfileModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A criterion that matches after visiting a page with a category.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion" /></summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion.#ctor(EPiServer.IContentLoader)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion" /></summary>
      <param name="contentLoader">
      </param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion.#ctor(EPiServer.IContentLoader,EPiServer.Personalization.VisitorGroups.IStateStorage)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion" /></summary>
      <param name="contentLoader">
      </param>
      <param name="stateStorage">
      </param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Matches after the user has visited a page with one of the selected categories.
            </summary>
      <param name="principal">
      </param>
      <param name="httpContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion.Subscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Subscribes to the VisitedPage event.
            </summary>
      <param name="criterionEvents">
      </param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion.Unsubscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Unsubscribes from to the VisitedPage event.
            </summary>
      <param name="criterionEvents">
      </param>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Contains settings used by <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion" />.
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesModel.SelectedCategory">
      <summary>
            Gets or sets the categories to match for a certain criterion.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesModel.NumberOfPageViews">
      <summary>
            Gets or sets the number of different pages that has to be viewed.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesModel.CategoryGuid">
      <summary>
            Gets or sets the selected category.
            </summary>
      <remarks>Used in the export import context</remarks>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesModel.GetRootCategory">
      <summary>
            Gets the root category.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesModel.CategorySelectionFactory">
      <summary>
            Provides a list of categories to the drop down.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesModel.CategorySelectionFactory.GetSelectListItems(System.Type)">
      <summary>
            Gets a list op options for all categoreis.
            </summary>
      <param name="property">The type of the property.</param>
      <returns>A list of options for all categories on the site</returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Matches users who has at least once visited the selected page.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesCriterion.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesCriterion" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesCriterion.#ctor(EPiServer.Personalization.VisitorGroups.IStateStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesCriterion" /> class.
            </summary>
      <param name="stateStorage">The storage</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Returns true when the user has visited the selected page.
            </summary>
      <param name="principal">
      </param>
      <param name="httpContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesCriterion.Subscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Subscribes to the visited page event.
            </summary>
      <param name="criterionEvents">
      </param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesCriterion.Unsubscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Unsubscribes from the visited page event.
            </summary>
      <param name="criterionEvents">
      </param>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model for the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesCriterion" />.
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesModel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesModel" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesModel.#ctor(EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesModel" /> class.
            </summary>
      <param name="localizationService">The resource locator that should be used by the current instance. Can be <c>null</c>.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesModel.ViewedPage">
      <summary>
            The selected page.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesModel.GetViewedPageLink">
      <summary>
            Gets the page link referenced by this model.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesModel.Validate(EPiServer.Personalization.VisitorGroups.VisitorGroup)">
      <summary>
            Validates the specified current group.
            </summary>
      <param name="currentGroup">The current group.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipCriterion">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Criterion which checks if visitor is member or not member of another visitor group
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipCriterion.#ctor">
      <summary>
            Initializes an instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipCriterion" />.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipCriterion.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,EPiServer.Personalization.VisitorGroups.IVisitorGroupRoleRepository)">
      <summary>
            Initializes an instance of <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipCriterion" />.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipCriterion.IsMatch(System.Security.Principal.IPrincipal,System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified principal is match.
            </summary>
      <param name="principal">The principal.</param>
      <param name="httpContext">The HTTP context.</param>
      <returns>
        <c>true</c> if the specified principal is match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipCriterion.Subscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Subscribes the DeletingVisitorGroup event to prevent deleting of group that is used in this criterion.
            </summary>
      <param name="criterionEvents">The criterion events.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipCriterion.Unsubscribe(EPiServer.Personalization.VisitorGroups.ICriterionEvents)">
      <summary>
            Subscribes the DeletingVisitorGroup event
            </summary>
      <param name="criterionEvents">The criterion events.</param>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipCriterion.OnDeletingVisitorGroup(System.Object,EPiServer.Personalization.VisitorGroups.VisitorGroupEventArgs)">
      <summary>
            Called when deleting visitor group. Prevents deleting of the group that is used in this criterion.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroupEventArgs" /> visitor group event data.</param>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipStatus">
      <summary>
            Visitor group membership status
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipStatus.Member">
      <summary>
            Is a member
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipStatus.NotMember">
      <summary>
            Is not a member
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipModel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Visitor Group Membership model
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipModel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipModel" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipModel.#ctor(EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipModel" /> class.
            </summary>
      <param name="localizationService">The resource locator that should be used by the current instance. Can be <c>null</c>.</param>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipModel.VisitorGroupId">
      <summary>
            Gets or sets the Id of the selected <see cref="T:EPiServer.Personalization.VisitorGroups.VisitorGroup" /></summary>
    </member>
    <member name="P:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipModel.MembershipStatus">
      <summary>
            Gets or sets the <see cref="P:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipModel.MembershipStatus" /></summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipModel.Validate(EPiServer.Personalization.VisitorGroups.VisitorGroup)">
      <summary>
            Validates the specified current group.
            </summary>
      <param name="currentGroup">The current group.</param>
      <returns>Return CriterionValidationResult with true if there is not circle reference otherwise false.</returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.Criteria.VisitorGroupMembershipModel.Copy">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgsExtensions">
      <summary>
            Extension methods for CriterionEventArgs
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.CriterionEventArgsExtensions.GetPageLink(EPiServer.Personalization.VisitorGroups.CriterionEventArgs)">
      <summary>
            Gets the page link corresponding to the ICriterionEvent.PageVisited event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.Personalization.VisitorGroups.CriterionEventArgs" /> instance containing the event data.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.MatchStringType">
      <summary>
            How the user profile matching should be done
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.MatchStringType.Equals">
      <summary>
            The value in the criteria has to be the same as the setting value.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.MatchStringType.Contains">
      <summary>
            The value in the criteria has to contain the setting value.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.MatchStringType.StartsWith">
      <summary>
            The value in the criteria has to start with the setting value.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.VisitorGroups.MatchStringType.EndsWith">
      <summary>
            The value in the criteria has to end with the setting value.
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.VisitorGroups.StringMatchHelper">
      <summary>
            Determines whether the values match according to it's match type
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.StringMatchHelper.IsMatch(System.String,System.String,System.String)">
      <summary>
            Matches the value in a criteria with the value in a setting depending on the matchtype.
            </summary>
      <param name="criteriaValue">The value from the criteria.</param>
      <param name="settingsValue">The value from the setting.</param>
      <param name="matchType">How to perform the match.</param>
      <returns>
        <c>true</c> if the the values match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.StringMatchHelper.IsMatch(System.String,System.String,EPiServer.Personalization.VisitorGroups.MatchStringType)">
      <summary>
            Matches the value in a criteria with the value in a setting depending on the matchtype.
            </summary>
      <param name="criteriaValue">The value from the criteria.</param>
      <param name="settingsValue">The value from the setting.</param>
      <param name="matchType">How to perform the match.</param>
      <returns>
        <c>true</c> if the the values match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.StringMatchHelper.GetMatchStringType(System.String)">
      <summary>
            Gets the match string type from a string value.
            </summary>
      <param name="matchStringType">Type of the match as string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.StringMatchHelper.GetMatchOptions(EPiServer.Personalization.VisitorGroups.MatchStringType)">
      <summary>
            Gets the match options.
            </summary>
      <param name="selectedMatchType">Type of the selected match.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.StringMatchHelper.GetMatchOptions(EPiServer.Personalization.VisitorGroups.MatchStringType,EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Gets the match options.
            </summary>
      <param name="selectedMatchType">Type of the selected match.</param>
      <param name="localizationService">The resource locator that should be used by the method to get localized strings.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.VisitorGroups.StringMatchHelper.GetMatchOptions">
      <summary>
            Gets the match options.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Personalization.ISubscriptionHandler">
      <summary>
            Interface to support sending of customized subscriptions 
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.ISubscriptionHandler.User">
      <summary>
            Gets or sets the user name.
            </summary>
      <value>The user name.</value>
    </member>
    <member name="P:EPiServer.Personalization.ISubscriptionHandler.UserData">
      <summary>
            Gets or sets the personilized data of the recipient.
            </summary>
      <value>The personilized data.</value>
    </member>
    <member name="M:EPiServer.Personalization.ISubscriptionHandler.Send(EPiServer.Core.PageData,EPiServer.Core.PageDataCollection)">
      <summary>
            Sends the subscriptions for the specified subscription page.
            </summary>
      <param name="subscriptionPage">The root page for the subscription that this mail should be based on.</param>
      <param name="updatedPages">The changed pages to notify the user about.</param>
    </member>
    <member name="T:EPiServer.Personalization.Subscription">
      <summary>
            Handles subscription for the current user through personalization
            </summary>
      <remarks>
        <para>
            Subscription stores the state as <see cref="T:EPiServer.Personalization.SubscriptionInfo" /> in the personalized <see cref="T:EPiServer.Personalization.EPiServerProfile" /> object  
            </para>
        <para>
            This class uses internally the <see cref="T:EPiServer.Personalization.SubscriptionInfo" /> class that support reading 
            subscription information from a arbitrary user but passes in the currently online cached user.
            </para>
      </remarks>
      <example>Adds a subscription for a user
            <code source="../CodeSamples/EPiServer/Personalization/SubscriptionSamples.cs" region="AddSubscription" /></example>
    </member>
    <member name="M:EPiServer.Personalization.Subscription.SubscribeTo(EPiServer.Core.PageReference)">
      <summary>
            Subscribe to a page
            </summary>
      <param name="pageLink">The page to add subscription for</param>
    </member>
    <member name="M:EPiServer.Personalization.Subscription.SubscribeTo(EPiServer.Core.PageReference,System.String)">
      <summary>
            Subscribe to a page for a specific language
            </summary>
      <param name="pageLink">The page to add subscription for</param>
      <param name="language">The language.</param>
    </member>
    <member name="M:EPiServer.Personalization.Subscription.UnSubscribe(EPiServer.Core.PageReference)">
      <summary>
            Unsubscribe to a page
            </summary>
      <param name="pageLink">The page to remove subscription for</param>
    </member>
    <member name="M:EPiServer.Personalization.Subscription.UnSubscribe(EPiServer.Core.PageReference,System.String)">
      <summary>
            Unsubscribe to a page for a specific language
            </summary>
      <param name="pageLink">The page to remove subscription for</param>
      <param name="language">The language.</param>
    </member>
    <member name="M:EPiServer.Personalization.Subscription.CanSubscribeTo(EPiServer.Core.PageReference)">
      <summary>
            Check if current user can subscribe to this page
            </summary>
      <param name="pageLink">
      </param>
      <returns>
      </returns>
      <remarks>Checks that user is logged in and that page has enabled support for subscriptions</remarks>
    </member>
    <member name="M:EPiServer.Personalization.Subscription.IsSubscribingTo(EPiServer.Core.PageReference)">
      <summary>
            Check if current user is subscribing to a page
            </summary>
      <param name="pageLink">The page to check subscription for</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.Subscription.IsSubscribingTo(EPiServer.Core.PageReference,System.String)">
      <summary>
            Check if current user is subscribing to a page
            </summary>
      <param name="pageLink">The page to check subscription for</param>
      <param name="language">The language.</param>
      <returns>
        <c>true</c> if the current user is subscribing to the specified page link for the given language; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.Subscription.ListSubscriptions">
      <summary>
            List all pages that the current user subscribes to
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Personalization.Subscription.Interval">
      <summary>
            Set or get interval in days for which subscriptions will be generated
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.SubscriptionDescriptor">
      <summary>
            Definition of one subscription by a user.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionDescriptor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.SubscriptionDescriptor" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionDescriptor.#ctor(EPiServer.Core.PageReference,System.Collections.Generic.List{System.String})">
      <summary>
            Initializes the instance with specific Pagereference and languages
            </summary>
      <param name="page">The page to subscribe to.</param>
      <param name="languages">The languages of the specified page that the subscription concerns.</param>
    </member>
    <member name="F:EPiServer.Personalization.SubscriptionDescriptor.PageID">
      <summary>
            The id of the page the user subscribes to.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.SubscriptionDescriptor.Languages">
      <summary>
            A list of languages that the user is interested in for the specified page.
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.SubscriptionInfo">
      <summary>
            Handles subscription for a user other than the currently logged in. Use <see cref="T:EPiServer.Personalization.Subscription" /> for the currently
            logged on user.
            </summary>
      <example>Adds a subscription for a user with login "John".
            <code source="../CodeSamples/EPiServer/Personalization/SubscriptionInfoSamples.cs" region="AddSubscription" /></example>
    </member>
    <member name="F:EPiServer.Personalization.SubscriptionInfo.SUBSCRIBE_PROPERTY">
      <summary>
            The name of the property that activates subscription for a page.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.SubscriptionInfo.SUBSCRIBE_INTERVAL">
      <summary>
      </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Personalization.SubscriptionInfo.SUBSCRIBE_LASTMSG">
      <summary>
      </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Personalization.SubscriptionInfo.SUBSCRIBE_LANGUAGE">
      <summary>
      </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Personalization.SubscriptionInfo.SUBSCRIBE_LANG_SEP">
      <summary>
      </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Personalization.SubscriptionInfo.IsDirty">
      <summary>
            Gets or sets a value indicating whether this instance is dirty.
            </summary>
      <value>
        <c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.SubscriptionInfo.SubscribedPages">
      <summary>
            Gets or sets the list of pages the user subscribes to.
            </summary>
      <value>The pages the user subscribes to.</value>
    </member>
    <member name="P:EPiServer.Personalization.SubscriptionInfo.LastMessage">
      <summary>
            Gets or sets when the subscriptions were last sent.
            </summary>
      <value>When the subscriptions were last sent.</value>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionInfo.SubscribeTo(EPiServer.Core.PageReference)">
      <summary>
            Subscribe to a page
            </summary>
      <param name="pageLink">The page to add subscription for</param>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionInfo.SubscribeTo(EPiServer.Core.PageReference,System.String)">
      <summary>
            Subscribe to a page for a certain language
            </summary>
      <param name="pageLink">The page to add subscription for</param>
      <param name="language">The page language to add subscription for</param>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionInfo.UnSubscribe(EPiServer.Core.PageReference)">
      <summary>
            Unsubscribe to a page
            </summary>
      <param name="pageLink">The page to remove subscription for</param>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionInfo.UnSubscribe(EPiServer.Core.PageReference,System.String)">
      <summary>
            Unsubscribe to a page
            </summary>
      <param name="pageLink">The page to remove subscription for</param>
      <param name="language">
      </param>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionInfo.CanSubscribeTo(EPiServer.Core.PageReference)">
      <summary>
            Check if user can subscribe to this page
            </summary>
      <param name="pageLink">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionInfo.IsSubscribingTo(EPiServer.Core.PageReference)">
      <summary>
            Check if user is subscribing to a page
            </summary>
      <param name="pageLink">The page to check subscription for</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionInfo.IsSubscribingTo(EPiServer.Core.PageReference,System.String)">
      <summary>
            Check if user is subscribing to a page for a certain language
            </summary>
      <param name="pageLink">The page to check subscription for</param>
      <param name="language">The language string</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionInfo.ListSubscriptions">
      <summary>
            List all pages that the user subscribes to
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Personalization.SubscriptionInfo.Interval">
      <summary>
            Set or get interval in days for which subscriptions will be generated.
            Set to zero for "as fast as possible".
            Negative values are not allowed.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionInfo.HandleDefaultValues">
      <summary>
            Internal function to handle default values
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.SubscriptionJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Job that handles subscriptions, scheduled automatically by EPiServer Scheduler and should not be called in code.
             </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.SubscriptionJob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.#ctor(EPiServer.IContentRepository,EPiServer.Framework.Localization.LocalizationService,EPiServer.DataAccess.Internal.SubscriptionDB,EPiServer.Web.SiteDefinitionResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Personalization.SubscriptionJob" /> class.
            </summary>
      <param name="contentRepository">
      </param>
      <param name="localizationService">
      </param>
      <param name="subscriptionDataAccess">
      </param>
      <param name="siteDefinitionResolver">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.#ctor(EPiServer.IContentRepository,EPiServer.Framework.Localization.LocalizationService,EPiServer.DataAccess.Internal.SubscriptionDB,EPiServer.Web.ISiteDefinitionResolver,EPiServer.DataAbstraction.ILanguageBranchRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Personalization.SubscriptionJob" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.Execute">
      <summary>
            Service entrypoint
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.InternalExecute">
      <summary>
            Execute subscription job
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.SendSubscriptions(EPiServer.Personalization.EPiServerProfile)">
      <summary>
            Process subscriptions and send notification about changes to subscribers.
            </summary>
      <param name="profile">The profile for the subscriber</param>
      <returns>
            Actual number of subscription notification messages sent.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.GetPage(System.Int32,System.Collections.Generic.IList{System.String},System.String,System.Security.Principal.IPrincipal)">
      <summary>
            Gets the page. Will be filtered on access rights, start publish and if the page is explicitly excluded.
            </summary>
      <param name="pageID">The ID of the page.</param>
      <param name="pageLanguages">The page languages. [Obsolete parameter]</param>
      <param name="language">The language you want the page in.</param>
      <param name="principal">The principal for the user. Used to check access rights on the page.</param>
      <returns>A PageData if one matching the criterias exists, otherwise null.</returns>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.GetPage(System.Int32,System.String,System.Security.Principal.IPrincipal,System.Boolean)">
      <summary>
            Gets the page. Will be filtered on access rights, start publish and if the page is explicitly excluded.
            </summary>
      <param name="pageID">The ID of the page.</param>
      <param name="language">The language you want the page in.</param>
      <param name="principal">The principal for the user. Used to check access rights on the page.</param>
      <param name="filterSubscribeExclude">Filter based on EPSUBSCRIBE-EXCLUDE</param>
      <returns>A PageData if one matching the criterias exists, otherwise null.</returns>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.CreateLanguageBranchContainer(System.String)">
      <summary>
            Creates a dummy PageData object containing only a PageLanguageBranch property.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.GetChangedPages(EPiServer.Personalization.EPiServerProfile,System.String,EPiServer.Personalization.SubscriptionDescriptor,System.Security.Principal.IPrincipal)">
      <summary>
            Gets the changed pages under one subscription root for a specific user.
            </summary>
      <param name="profile">The profile for a user.</param>
      <param name="language">The requested language.</param>
      <param name="subscribedPage">The subscribed subscription root.</param>
      <param name="principal">The principal for the user.</param>
      <returns>A collection of pages that have been changed and are children of the subscribedPage.</returns>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.CanSendSubscription(EPiServer.Personalization.EPiServerProfile,EPiServer.Core.PageData,EPiServer.Core.PageDataCollection)">
      <summary>
            Controls if a user can be notified about page changes. Called for each subscription being processed.
            </summary>
      <param name="profile">User's profile</param>
      <param name="rootPage">The root page for the suscription</param>
      <param name="changedPages">The pages that has changed</param>
      <returns>
        <b>True</b> if the subscription notification can be sent.
            Returning <b>false</b> cancels the notification for this user.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.IsPageExcluded(EPiServer.Core.PageData)">
      <summary>
            Determines whether the specified page should be excluded from the subscription.
            </summary>
      <param name="page">The page that may be excluded.</param>
      <returns>
        <c>true</c> if the page should be excluded; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.SendToHandler(EPiServer.Personalization.EPiServerProfile,EPiServer.Core.PageData,EPiServer.Core.PageDataCollection)">
      <summary>
            Send subscription data to handler
            </summary>
      <param name="profile">The profile for a subscriber</param>
      <param name="rootPage">Root for subscription</param>
      <param name="changedPages">The pages that has changed</param>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionJob.IsInInterval(System.Int32,System.DateTime)">
      <summary>
            Check if DateTime.Now is within the interval from the last e-mail sent
            </summary>
      <param name="interval">The interval.</param>
      <param name="lastmessage">last message sent</param>
      <returns>
        <c>true</c> if DateTime.Now is within specified interval from the last e-mail sent; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Personalization.SubscriptionPlugInAttribute">
      <summary>
            A plug-in attribute to have a custom subscription sender class available under system settings. 
            </summary>
      <remarks>
        <para>
            A subscription plug-in must implement the <see cref="T:EPiServer.Personalization.ISubscriptionHandler" /> interface.
            </para>
        <para>
          <note>
            This plug-in will not activate this handler, it will only show up as a new 
            alternative that have to be manually selected under System settings in administration mode.
            </note>
        </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Personalization.SubscriptionPlugInAttribute.Match(System.Object)">
      <summary>
            Checks if the specified object is of this typs (SubscriptionPlugInAttribute).
            </summary>
      <param name="o">The object to match.</param>
      <returns>True if the specified object is of the type SubscriptionPlugInAttribute, otherwis false.</returns>
    </member>
    <member name="T:EPiServer.Personalization.Task">
      <summary>
            A task assignable to users in the system 
            </summary>
    </member>
    <member name="E:EPiServer.Personalization.Task.StatusChanged">
      <summary>
            Occurs when the status of a task has changed.
            </summary>
    </member>
    <member name="E:EPiServer.Personalization.Task.TaskDeleting">
      <summary>
            Occurs when a task is beeing deleted.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.Task.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.Task" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.Task.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.Task" /> class.
            </summary>
      <param name="taskID">The task ID.</param>
    </member>
    <member name="M:EPiServer.Personalization.Task.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.Task" /> class.
            </summary>
      <param name="handler">The handler.</param>
    </member>
    <member name="M:EPiServer.Personalization.Task.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Personalization.Task" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:EPiServer.Personalization.Task.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
    </member>
    <member name="P:EPiServer.Personalization.Task.LocalizationService">
      <summary>
            Gets or sets the localization service used by the current instance.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.LanguageBranchRepository">
      <summary>
            Gets or sets the language branch repository that should be used by the current instance.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.Task.OnStatusChanged(System.Object,System.EventArgs)">
      <summary>
            Raises the StatusChanged event.
            </summary>
      <param name="source">The source of the event.</param>
      <param name="args">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Personalization.Task.OnTaskDeleting(System.Object,System.EventArgs)">
      <summary>
            Raises the TaskDeleting event.
            </summary>
      <param name="source">The source of the event.</param>
      <param name="args">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Personalization.Task.Save">
      <summary>
            Save or create task, this method will not save any activity
            </summary>
      <remarks>Notification will automatically be sent if status is changed</remarks>
    </member>
    <member name="M:EPiServer.Personalization.Task.Save(System.Boolean)">
      <summary>
            Save or create task, this method will not save any activity
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.Task.SaveActivity">
      <summary>
            Save activity changes
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.Task.Load(System.Int32)">
      <summary>
            Load a task from database
            </summary>
      <param name="taskID">The identifier for the task to be loaded</param>
      <returns>A task object or null if task doesn't exist</returns>
    </member>
    <member name="M:EPiServer.Personalization.Task.List(System.String)">
      <summary>
            Lists the tasks for the specified user.
            </summary>
      <param name="userName">Name of the user.</param>
      <returns>A list of tasks.</returns>
    </member>
    <member name="M:EPiServer.Personalization.Task.List(System.Guid)">
      <summary>
            Lists all task for the specified workflow instance id.
            </summary>
      <param name="workflowInstanceId">The workflow instance id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.Task.UnassignTasks(System.String)">
      <summary>
            Unassigns all tasks from specified user.
            </summary>
      <param name="userOrRoleName">Username or rolename that will be unassigned.</param>
      <remarks>Also removes ownership of tasks from user.</remarks>
    </member>
    <member name="T:EPiServer.Personalization.Task.ListFilterPredicate">
      <summary>
            Private class used to filter tasks for a specific user.
            Handles the case that the task may be assigned to a group.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.Task.Delete(System.Int32)">
      <summary>
            Delete task
            </summary>
      <param name="taskID">The identifier for the task to be deleted</param>
      <returns>Return <b>true</b> if task was deleted</returns>
    </member>
    <member name="P:EPiServer.Personalization.Task.TaskID">
      <summary>
            Identifier of task
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.Subject">
      <summary>
            Subject or title of task as displayed to the user
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.Description">
      <summary>
            Full description containing the nature of the task
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.Activity">
      <summary>
            Comments made by the user that has been assigned to the task
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.AssignedTo">
      <summary>
            Security identifier for user or group that has been assigned to this task
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.AssignedIsRole">
      <summary>
            Gets or sets a value indicating whether this task is assigned to a role or a user.
            </summary>
      <value>
        <c>true</c> if the task is assigned to a role; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Personalization.Task.Owner">
      <summary>
            Security identifier for user that created this task or is responsible
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.Status">
      <summary>
            Current status of task
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.PreviousStatus">
      <summary>
            Previous status of task
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.DueDate">
      <summary>
            The date when task must be finished
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.Created">
      <summary>
            The date when task was created
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.PlugInID">
      <summary>
            The identifier for the plugin that handles this task
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.Changed">
      <summary>
            The date when task was changed
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.Task.StateBag">
      <summary>
            Used to persist custom data for a task
            </summary>
      <remarks>Data must be serializable</remarks>
    </member>
    <member name="P:EPiServer.Personalization.Task.WorkflowInstanceId">
      <summary>
            If associated with a workflow this gives workflow instance id
            </summary>
      <remarks>If not associated with workflow Guid.Empty is returned</remarks>
    </member>
    <member name="P:EPiServer.Personalization.Task.EventActivityName">
      <summary>
            If task is created through workflow activity CreateTask then it
            is possible to associate task with a specific event activity.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.Task.TranslateStatus(EPiServer.Personalization.TaskStatus)">
      <summary>
            Translates a TaskStatus into a display friendly text.
            </summary>
      <param name="status">The status to be translated.</param>
      <returns>A translated text</returns>
    </member>
    <member name="M:EPiServer.Personalization.Task.TranslateStatus(EPiServer.Personalization.TaskStatus,System.String)">
      <summary>
            Translates a TaskStatus into a display friendly text.
            </summary>
      <param name="status">The status to be translated.</param>
      <param name="language">The language to translate into.</param>
      <returns>A translated text</returns>
    </member>
    <member name="M:EPiServer.Personalization.Task.TranslateStatus(EPiServer.Personalization.TaskStatus,System.Globalization.CultureInfo)">
      <summary>
            Translates a TaskStatus into a display friendly text.
            </summary>
      <param name="status">The status to be translated.</param>
      <param name="culture">The culture to translate into.</param>
      <returns>A translated text</returns>
    </member>
    <member name="M:EPiServer.Personalization.Task.SendNotification">
      <summary>
            Send information about new task to owner
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.Task.SendReminder">
      <summary>
            Send reminder e-mail to owner
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.Task.SendUpdate">
      <summary>
            Send updated task information to owner by e-mail
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.Task.SendScheduledReminder">
      <summary>
            For internal use only
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.TaskStatus">
      <summary>
            Status of a task 
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.TaskStatus.NotStarted">
      <summary>
            The tast has not started yet.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.TaskStatus.InProgress">
      <summary>
            The task is in progress.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.TaskStatus.Completed">
      <summary>
            The task has been completed.
            </summary>
    </member>
    <member name="F:EPiServer.Personalization.TaskStatus.Rejected">
      <summary>
            The task has been rejected.
            </summary>
    </member>
    <member name="T:EPiServer.PlugIn.GuiPlugInAttribute">
      <summary>
            Settings for plugins in graphical modes
            </summary>
      <remarks>
        <para>
            To translate <b>DisplayName</b> and <b>Description</b> of a plug-in you have to add
            your own xml file in the â€œlang/â€ directory and set the property LanguagePath. 
            If you for example set LanguagePath to /myplugin/sample the xml paths you add should 
            be /myplugin/sample/displayname and /myplugin/sample/description.
            </para>
        <para>
            There may be some plug-ins that requires special security roles or other
            circumstances that the plug-in framework doesnâ€™t have knowledge of, in these cases
            you may implement <b>ICustomPlugInLoader</b> on you plug-in. This will allow you to control
            loading of the plug-in yourself.
            </para>
        <para>
            Some plug-ins need to store some kind of internal settings or state, there are
            different approaches to this. If you only need to store simple system settings, for
            example the mail server name in your brand new mail plug-in you probably want to use
            web.config. If you have large amout of data the obvious choice is to store it in a
            database. When your need fits in between these two, you need to store small sets of
            relational data and donâ€™t want to use your own database for this simple purpose you
            have <see cref="T:EPiServer.PlugIn.PlugInSettings" />. <b>PlugInSettings</b> is used to store
            plug-in settings and information in a DataSet, these will be persisted as xml together
            will the plug-in definition in the EpiServer database.
            </para>
        <para>
            See <see cref="T:EPiServer.PlugIn.PlugInAttribute" /> class for more information
            on how the plug-ins are located and matched.
            </para>
      </remarks>
      <example>
            Sample plug-in that will show up in the administration menu.
            <code source="../CodeSamples/EPiServer/PlugIn/PlugInAttributeSamples.cs" region="AdminMenu" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.PlugIn.GuiPlugInAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PlugIn.GuiPlugInAttribute" /> class.
            </summary>
      <remarks>
            You must use named parameters to initialize the properties.
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.GuiPlugInAttribute.Area">
      <summary>
            The area this plugin supports.
            </summary>
    </member>
    <member name="T:EPiServer.PlugIn.GuiPlugInAttribute.ResolvePathDelegate">
      <summary>
            Delegate to resolve resource path for plug-in.
            </summary>
      <param name="path">The path.</param>
      <returns>Resolved path.</returns>
    </member>
    <member name="M:EPiServer.PlugIn.GuiPlugInAttribute.ResolvePathInternal(System.String,EPiServer.PlugIn.GuiPlugInAttribute.ResolvePathDelegate)">
      <summary>
            Resolves the path to plug-in resources.
            </summary>
      <param name="path">The path.</param>
      <param name="resolvePathDelegate">The resolve path delegate.</param>
      <returns>Resolved path.</returns>
    </member>
    <member name="P:EPiServer.PlugIn.GuiPlugInAttribute.Url">
      <summary>
            The url to the resource defined by Area.
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.GuiPlugInAttribute.UrlFromUi">
      <summary>
            Gets and sets the url relative the UI directory to the resource
            </summary>
      <value>The URL relative the UI directory</value>
    </member>
    <member name="P:EPiServer.PlugIn.GuiPlugInAttribute.UrlFromUtil">
      <summary>
            Sets the URL relative the util directory to the resource
            </summary>
      <value>The URL relative the util directory</value>
    </member>
    <member name="P:EPiServer.PlugIn.GuiPlugInAttribute.UrlFromModuleFolder">
      <summary>
            Gets or sets the URL relative the folder of EPiServer Shell module that plug-in belongs to.
            ModuleType property must be defined to resolve the path to module folder.
            </summary>
      <value>
            The URL relative the corresponding Shell module folder.
            </value>
    </member>
    <member name="P:EPiServer.PlugIn.GuiPlugInAttribute.RequiredAccess">
      <summary>
            The required page access to view plugin (currently only supported by EditPanel).
            </summary>
    </member>
    <member name="P:EPiServer.PlugIn.GuiPlugInAttribute.Category">
      <summary>
            The category of the plugin (currently only supported by Report and Visitor Group Criterion).
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.GuiPlugInAttribute.Match(System.Object)">
      <summary>
            Returns a value indicating whether this instance equals a specified object. 
            </summary>
      <param name="o">The object to match.</param>
      <returns>
        <b>True</b> if the object matches this instance.</returns>
      <remarks>Used internally to selectively load plugins.</remarks>
    </member>
    <member name="M:EPiServer.PlugIn.GuiPlugInAttribute.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:EPiServer.PlugIn.PlugInArea">
      <summary>
            The different areas currently supported
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.None">
      <summary>
            No plug in area defined
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.ActionWindow">
      <summary>
            Item in listing on action window in edit mode
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.EditPanel">
      <summary>
            A custom tab item on the edit panel tab strip
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.EditTree">
      <summary>
            A custom tab item on the edit tree tab strip
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.SystemSettings">
      <summary>
            A custom tab item on the system settings tab strip
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.AdminMenu">
      <summary>
            A custom item on the administration menu
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.AdminConfigMenu">
      <summary>
            A custom item on the administration configuration menu
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.SidSettingsArea">
      <summary>
            A custom tab item on the sid settings tab strip
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.WorkRoom">
      <summary>
            A custom item on the workroom tab strip
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.DynamicContent">
      <summary>
            A custom GUI plugin for creating/editing dynamic content objects
            </summary>
    </member>
    <member name="F:EPiServer.PlugIn.PlugInArea.ReportMenu">
      <summary>
            A custom item on the report center menu
            </summary>
    </member>
    <member name="T:EPiServer.PlugIn.IUserSettings">
      <summary>
            Implemented by security settings plug-ins
            </summary>
    </member>
    <member name="M:EPiServer.PlugIn.IUserSettings.LoadSettings(System.String,EPiServer.Personalization.EPiServerProfile)">
      <summary>
            Called to let a plugin populate its fields from either the personalized 
            data provided or any external source. 
            </summary>
      <param name="userName">Name of user.</param>
      <param name="data">The profile for the given user.</param>
      <remarks>
            Assumes that information is read from data.
            </remarks>
    </member>
    <member name="M:EPiServer.PlugIn.IUserSettings.SaveSettings(System.String,EPiServer.Personalization.EPiServerProfile)">
      <summary>
            Called to let a plugin save its data as entered by the user to either the 
            provided personalized information or to any external data source.
            </summary>
      <param name="userName">Name of the user.</param>
      <param name="data">The profile for the given user.</param>
      <remarks>
            It is allowed (and expected) that the implementation writes information back to data.
            </remarks>
    </member>
    <member name="P:EPiServer.PlugIn.IUserSettings.SaveRequiresUIReload">
      <summary>
            Gets or sets a value indicating whether caller needs to do a reload on UI/Page.
            </summary>
      <value>
        <c>true</c> if a UI reload is required; otherwise, <c>false</c>.</value>
      <remarks>
            This can be used to tell to caller that we have done something in a plugin that requires a reload on page.
            </remarks>
    </member>
    <member name="T:EPiServer.PreviewPage">
      <summary>
            Base class for previewing pages with capability to preview other content than pages by hosting it in another page
            </summary>
      <remarks>Returns the start page as CurrentPage when hosting other content than pages, so <see cref="T:EPiServer.Core.IContentSource" /> and <see cref="T:EPiServer.Core.IPageSource" /> will return different content.</remarks>
    </member>
    <member name="M:EPiServer.PreviewPage.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:EPiServer.PreviewPage" /></summary>
    </member>
    <member name="M:EPiServer.PreviewPage.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PreviewPage" /> class.
            </summary>
      <param name="options">The page options to enable.</param>
      <remarks>
            The options parameter is a bitmap constructed from the OptionFlag of Page plugin classes from
            the EPiServer.Web.PageExtensions namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.PreviewPage.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.PreviewPage" /> class.
            </summary>
      <param name="enable">The enable.</param>
      <param name="disable">The disable.</param>
    </member>
    <member name="P:EPiServer.PreviewPage.CurrentContentLink">
      <summary>
            Exposes the content link used to route to this web form
            </summary>
    </member>
    <member name="P:EPiServer.PreviewPage.CurrentPageLink">
      <summary>
            The current page, which if hosting a block is a the start page by default
            </summary>
    </member>
    <member name="M:EPiServer.PreviewPage.GetHostPage">
      <summary>
            Gets the page used for hosting when the content type is not a page itself
            </summary>
      <returns>A page reference to use as default</returns>
    </member>
    <member name="P:EPiServer.PreviewPage.CurrentLoaderOptions">
      <summary>
            Gets the loader options used for <see cref="P:EPiServer.PreviewPage.CurrentData" /></summary>
    </member>
    <member name="P:EPiServer.PreviewPage.CurrentData">
      <summary>
            The data that is being previewed
            </summary>
    </member>
    <member name="T:EPiServer.Security.ActiveDirectoryRoleProvider">
      <summary>
            ASP.NET 2.0 Role provider for Microsofts Active Directory.
            </summary>
      <remarks>
            This role provider is designed to work together with the default Systwm.Web.Security.ActiveDirectoryMembershipProvider, although
            there are no hard dependencies. 
            </remarks>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
      <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
    </member>
    <member name="P:EPiServer.Security.ActiveDirectoryRoleProvider.ApplicationName">
      <summary>
            Gets or sets the name of the application to store and retrieve role information for.
            </summary>
      <value>
      </value>
      <returns>The name of the application to store and retrieve role information for.</returns>
    </member>
    <member name="P:EPiServer.Security.ActiveDirectoryRoleProvider.DirectoryDataFactory">
      <summary>
            Gets or sets the directory data factory.
            </summary>
      <value>The directory data factory.</value>
      <remarks>
            This is used to access the actual Directory service class that contains the directory service specifics.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.FindUsersInRole(System.String,System.String)">
      <summary>
            Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
      <param name="roleName">The role to search in.</param>
      <param name="usernameToMatch">The user name to search for.</param>
      <returns>
            A string array containing the names of all the users where the user name matches usernameToMatch and the user is a member of the specified role.
            </returns>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.GetAllRoles">
      <summary>
            Gets a list of all the roles for the configured applicationName.
            </summary>
      <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.GetRolesForUser(System.String)">
      <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
      <param name="username">The user to return a list of roles for.</param>
      <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.GetUsersInRole(System.String)">
      <summary>
            Gets a list of users in the specified role for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to get the list of users for.</param>
      <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.IsUserInRole(System.String,System.String)">
      <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
      <param name="userName">The user name to search for.</param>
      <param name="roleName">The role to search in.</param>
      <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.RoleExists(System.String)">
      <summary>
            Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to search for in the data source.</param>
      <returns>
            true if the role name already exists in the data source for the configured applicationName; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.AddUsersToRoles(System.String[],System.String[])">
      <summary>
            Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
      <param name="usernames">A string array of user names to be added to the specified roles.</param>
      <param name="roleNames">A string array of the role names to add the specified user names to.</param>
      <remarks>This method is not supported in this provider.</remarks>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.CreateRole(System.String)">
      <summary>
            Adds a new role to the data source for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to create.</param>
      <remarks>This method is not supported in this provider.</remarks>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.DeleteRole(System.String,System.Boolean)">
      <summary>
            Removes a role from the data source for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to delete.</param>
      <param name="throwOnPopulatedRole">If true, throw an exception if roleName has one or more members and do not delete roleName.</param>
      <returns>
            true if the role was successfully deleted; otherwise, false.
            </returns>
      <remarks>This method is not supported in this provider.</remarks>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
      <summary>
            Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
      <param name="usernames">A string array of user names to be removed from the specified roles.</param>
      <param name="roleNames">A string array of role names to remove the specified user names from.</param>
      <remarks>This method is not supported in this provider.</remarks>
    </member>
    <member name="M:EPiServer.Security.ActiveDirectoryRoleProvider.ExtractUsername(System.String)">
      <summary>
            Extracts the username. If the user name contains domain name then it tries to
            return the simple username without domain name. 
            The filter on DirectorySearcher take simple username if the _userNameAttribute is sAMAccountName.
            </summary>
      <param name="username">The username.</param>
      <returns>username without domain name</returns>
    </member>
    <member name="T:EPiServer.Security.AdsiDataFactory">
      <summary>
            Concrete implementation of the <see cref="T:EpiServer.Security.DirectoryDataFactory" /> base class, using 
            ActiveDirectory Services Interface (ADSI) to interface with a LDAP server.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.AdsiDataFactory" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.DirectoryDataFactory" /> class.
            </summary>
      <param name="connectionString">The connection string.</param>
      <param name="username">The username.</param>
      <param name="password">The password.</param>
      <param name="connectionProtection">The connection protection.</param>
      <param name="absoluteCacheTimeout">The absolute cache timeout.</param>
      <remarks>
            Create and initialize an instance of this class for accessing Active Directory data.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.Initialize(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes an instance of the <see cref="T:EPiServer.Security.DirectoryDataFactory" /> class.
            </summary>
      <param name="config">The configuration data to use.</param>
      <remarks>
            This method is intended to be called from within a providers Initialize method. It will read its settings from the config parameter and
            initialize this instance. 
            Required settings in config are:
            connectionStringName = name of the connection string to use for connecting to the Active Directory server.
            connectionUsername = username for the connection.
            connectionPassword = password for the connection.
            
            Optional settings in config are:
            connectionProtection = level of protection and security for the Active Directory connection. None or Secure (default).
            cacheTimeout = how long cached Active Directory entries stys in the cache. Default is 10 minutes.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AdsiDataFactory.ConnectionString">
      <summary>
            Gets or sets the connection string.
            </summary>
      <value>The connection string.</value>
      <remarks>
            The string for connecting to the Active Directory server. It should be in the format LDAP://dns.name.for.machine or LDAP://dns.name.for.active.directory.domain
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AdsiDataFactory.Username">
      <summary>
            Gets or sets the user name.
            </summary>
      <value>The user name.</value>
      <remarks>
            The user name to use for connecting to the Active Directory domain as defined by ConnectionString.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AdsiDataFactory.Password">
      <summary>
            Gets or sets the password.
            </summary>
      <value>The password.</value>
      <remarks>
            The password used, together with the Username, to connect to the Active Directory domain.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AdsiDataFactory.ConnectionProtection">
      <summary>
            Gets or sets the connection protection.
            </summary>
      <value>The connection protection.</value>
      <remarks>
            Defines the type and level of protection for the Active Directory communications.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AdsiDataFactory.PageSize">
      <summary>
            Gets or sets the page size
            </summary>
      <remarks>
            The maximum number of objects the server can return in a paged search. The default is zero, which means do not do a paged search.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.AddPropertyToLoad(System.String)">
      <summary>
            Adds a property to load on access to Active Directory.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <remarks>
            This class keeps a list of property names to query for whenever an Active Directory entry is retrieved. By calling this method you
            can expand this list with custom properties.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.ClearCache">
      <summary>
            Clears the Active Directory cache.
            </summary>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.GetEntry(System.String)">
      <summary>
            Gets a specific Active Directory entry as a DirectoryData object.
            </summary>
      <param name="distinguishedName">Distinguished name of the entry.</param>
      <returns>A DirectoryData instance containing the properties defined by PropertiesToLoad.</returns>
      <remarks>
            This method uses caching to speed up the operation, if the DirectoryData object is found in the cache, 
            no communication with the Active Directory domain will take place.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.FindOne(System.String,System.DirectoryServices.SearchScope)">
      <summary>
            Find on Active Directory entry based on search filter.
            </summary>
      <param name="filter">The filter, which is a LDAP query.</param>
      <param name="scope">The scope at which to search.</param>
      <returns>A DirectoryData instance with the entry, or null if the search did not find an entry.</returns>
      <remarks>
            This method uses caching to speed up the operation, if the DirectoryData object is found in the cache, 
            no communication with the Active Directory domain will take place.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.FindAll(System.String,System.DirectoryServices.SearchScope,System.String)">
      <summary>
            Finds all directory entries that match the filter criteria.
            </summary>
      <param name="filter">The LDAP filter.</param>
      <param name="scope">The search scope.</param>
      <param name="sortByProperty">The property to sort directory entries by.</param>
      <returns>
            An IList of DirectoryData objects, sorted by the indicated property.
            </returns>
      <remarks>
            If sortByProperty is set to null, the list will be returned without sorting. This method will make use of caching, if the serach has already beem
            done, the result will be returned without accessing Active Directory.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.CreateDirectoryEntry">
      <summary>
            Creates a directory entry.
            </summary>
      <returns>An initialized <see cref="T:System.DirectoryServices.DirectoryEntry" /></returns>
      <remarks>
            The directory entry is configured with connection string, user credentials etc.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.CreateDirectoryEntry(System.String)">
      <summary>
            Creates a directory entry.
            </summary>
      <param name="rootDistinguishedName">Distinguished name of the root where the directory entry is used.</param>
      <returns>An initialized <see cref="T:System.DirectoryServices.DirectoryEntry" />, or null if <paramref name="rootDistinguishedName" />
            is not within the specified subtree for this instance.</returns>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.EscapeDistinguishedName(System.String)">
      <summary>
            Escapes reserved characters in the distinguished name.
            </summary>
      <param name="distinguishedName">The distinguished name.</param>
      <returns>The escaped representation of the string.</returns>
      <remarks>
            The following characters will be escaped by prefixing them with a backslash (\): Carriage return, Linefeed, '+', '\', '"', '&lt;', '&gt;', ';', '/'
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.CreateDirectoryDataFromDirectoryEntry(System.DirectoryServices.DirectoryEntry)">
      <summary>
            Creates a directory data object from a directory entry.
            </summary>
      <param name="entry">The <see cref="T:System.DirectoryServices.DirectoryEntry" />.</param>
      <returns>A DirectoryData object populated with information from <paramref name="entry" />.</returns>
      <remarks>
            DirectoryData can be viewed as a Data Transfer Object, craeting an implementation-independent representation of
            the data to avoid tying the implementetation too tightly to the System.DirectoryServices namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.CreateDirectoryDataFromSearchResult(System.DirectoryServices.SearchResult)">
      <summary>
            Creates a directory data instance from search result.
            </summary>
      <param name="result">The result.</param>
      <returns>The populated <see cref="T:EPiServer.Security.DirectoryData" /> instance.</returns>
      <remarks>
            DirectoryData can be viewed as a Data Transfer Object, craeting an implementation-independent representation of
            the data to avoid tying the implementetation too tightly to the System.DirectoryServices namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.DistinguishedName(System.Collections.Generic.Dictionary{System.String,System.String[]})">
      <summary>
            Gets the distinguisheds name from a dictionary.
            </summary>
      <param name="properties">The properties as collected from a <see cref="T:System.DirectoryServices.DirectoryEntry" />.</param>
      <returns>A string with the distinguished name.</returns>
      <remarks>
            Primarily used internally when converting from DirectoryEntry to DirectoryData.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.SchemaClassName(System.Collections.Generic.Dictionary{System.String,System.String[]})">
      <summary>
            Gets the schema class name from a dictionary.
            </summary>
      <param name="properties">The properties as collected from a <see cref="T:System.DirectoryServices.DirectoryEntry" />.</param>
      <returns>A string with the schema class name.</returns>
      <remarks>
            Primarily used internally when converting from DirectoryEntry to DirectoryData.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.StoreInCache(System.String,System.Object)">
      <summary>
            Stores the data in cache.
            </summary>
      <param name="cacheKey">The cache key.</param>
      <param name="data">The data.</param>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.TryGetDestructive(System.Collections.Specialized.NameValueCollection,System.String,System.String@)">
      <summary>
            Get value from from config and remove it if found.
            </summary>
      <param name="config">The collection of configuration values.</param>
      <param name="name">The name of the parameter.</param>
      <param name="value">The value of the parameter.</param>
      <returns>True if the parameter was found, False otherwise.</returns>
    </member>
    <member name="M:EPiServer.Security.AdsiDataFactory.Initialize">
      <summary>
            Final initialization steps for a newly created instance.
            </summary>
    </member>
    <member name="T:EPiServer.Security.BasicAuthentication">
      <summary>
            Handle basic authentication logons with EPiServers extranet functionality.
            </summary>
    </member>
    <member name="M:EPiServer.Security.BasicAuthentication.Init(System.Web.HttpApplication)">
      <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
      <param name="application">An <see cref="T:System.Web.HttpApplication" /> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application </param>
    </member>
    <member name="M:EPiServer.Security.BasicAuthentication.Dispose">
      <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule" />.
            </summary>
    </member>
    <member name="M:EPiServer.Security.BasicAuthentication.DecodeAuthenticationHeader(System.String,System.String@,System.String@)">
      <summary>
            Decodes the authentication header for Basic authentication.
            </summary>
      <param name="authenticationHeader">The authentication from the request.</param>
      <param name="username">The username extracted from the authentication header.</param>
      <param name="password">The password extracted from the authentication header.</param>
      <returns>
        <c>true</c> if username and password could be retreived from the authentication header; otherwise <c>false</c></returns>
    </member>
    <member name="M:EPiServer.Security.BasicAuthentication.IsAlreadyAuthenticated(System.Security.Principal.IPrincipal)">
      <summary>
            Determines whether the aupplied principal is authenticated.
            </summary>
      <param name="currentUser">The current user.</param>
      <returns>
        <c>true</c> if the current user is authenticated; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Security.BasicAuthentication.Application_AuthenticateRequest(System.Object,System.EventArgs)">
      <summary>
            Handles the AuthenticateRequest event of the Application to authenticate a user using basic authentication headers.
            If the has already been authenticated the authorization header is not checked.
            </summary>
      <param name="source">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Security.BasicAuthentication.Application_EndRequest(System.Object,System.EventArgs)">
      <summary>
            Handles the EndRequest event of the Application control to send a basic authentication challenge.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Security.ConfigSectionProtection">
      <summary>
            Wrapper around the ASP.NET 2.0 feature of protecting data in web.config (as in encrypt).
            This class handles the sections which is supported in EPiServer. This meens it handles
            the sections which are connected with the checkbox for web.config protection in the
            admin UI.
            </summary>
    </member>
    <member name="M:EPiServer.Security.ConfigSectionProtection.SaveConfigSectionsProtected(System.Configuration.Configuration,System.Boolean)">
      <summary>
            Saves the sections in Configuration supported and potential security
            threat protected or in clear text.
            </summary>
      <remarks>
            NOTE that this method also saves the config file to the physical drive.
            </remarks>
      <param name="config">Configuration to save.</param>
      <param name="protect">Flag indicating protection.</param>
    </member>
    <member name="M:EPiServer.Security.ConfigSectionProtection.HasProtectedConfigSections(System.Configuration.Configuration)">
      <summary>
            By "scanning" the supported sections for protection checks is any
            is currently protected.
            </summary>
      <param name="config">Configuration to scan.</param>
      <returns>Flag indicating protected section(s).</returns>
    </member>
    <member name="M:EPiServer.Security.ConfigSectionProtection.GetProtectedConfigSections(System.Configuration.Configuration)">
      <summary>
            From the list of supported config sections for protection scans the
            config and returns the list of currently protected sections.
            </summary>
      <param name="config">Configuration to scan.</param>
      <returns>List of config section names which have protected data.</returns>
    </member>
    <member name="P:EPiServer.Security.ConfigSectionProtection.ProtectionSectionsSupported">
      <summary>
            Gets a list of the section groups supported for protection.
            </summary>
    </member>
    <member name="P:EPiServer.Security.ConfigSectionProtection.DefaultProtectionProvider">
      <summary>
            Gets the default protection provider used.
            </summary>
    </member>
    <member name="T:EPiServer.Security.DirectoryData">
      <summary>
            A class that holds data for an LDAP entry.
            </summary>
    </member>
    <member name="M:EPiServer.Security.DirectoryData.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String[]})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.DirectoryData" /> class.
            </summary>
      <param name="distinguishedName">Distinguished name that is associated with this data.</param>
      <param name="schemaClassName">Name of the schema class.</param>
      <param name="properties">The properties for this directory data.</param>
    </member>
    <member name="P:EPiServer.Security.DirectoryData.Item(System.String)">
      <summary>
            Gets the property values associated with the specified property name.
            </summary>
      <value>A String[] with the values for the property.</value>
    </member>
    <member name="M:EPiServer.Security.DirectoryData.TryGetValue(System.String,System.String[]@)">
      <summary>
            Tries to get values for <paramref name="propertyName" />.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="propertyValue">The property values.</param>
      <returns>True if the parameter was found; False otherwise.</returns>
    </member>
    <member name="M:EPiServer.Security.DirectoryData.GetFirstPropertyValue(System.String)">
      <summary>
            Gets the first property value.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A string with the first property value, or null if the property was not found.</returns>
      <remarks>
            Properties can be multi-valued but many (most) properties are only single-valued. In order to simplify access
            to these single-valued properties use this method.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.DirectoryData.PropertyNames">
      <summary>
            A collection of all property names in the current instance.
            </summary>
      <value>The property names.</value>
    </member>
    <member name="P:EPiServer.Security.DirectoryData.SchemaClassName">
      <summary>
            Gets or sets the name of the schema class.
            </summary>
      <value>The name of the schema class.</value>
    </member>
    <member name="P:EPiServer.Security.DirectoryData.DistinguishedName">
      <summary>
            Gets or sets the distinguished name.
            </summary>
      <value>The distinguished name.</value>
    </member>
    <member name="P:EPiServer.Security.DirectoryData.Properties">
      <summary>
            Gets or sets the properties.
            </summary>
      <value>The properties.</value>
    </member>
    <member name="T:EPiServer.Security.DirectoryDataFactory">
      <summary>
            Abstract ase class for specialized directory service adapters. The main purpose of these adapters is to
            return DirectoryData instances with information about specific entries in the directory service.
            </summary>
    </member>
    <member name="P:EPiServer.Security.DirectoryDataFactory.RootDistinguishedName">
      <summary>
            Gets or sets the distinguished name of the root for directory service searches.
            </summary>
      <value>The name of the root.</value>
    </member>
    <member name="M:EPiServer.Security.DirectoryDataFactory.IsWithinSubtree(System.String)">
      <summary>
            Determines whether the specified distinguished name is part of the directory tree used for searches.
            </summary>
      <param name="distinguishedName">Distinguished name of a directory service entry.</param>
      <returns>
        <c>true</c> if the specified distinguished name is within subtree; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Security.DirectoryDataFactory.FindAll(System.String,System.DirectoryServices.SearchScope)">
      <summary>
            Finds all directory entries that match the filter criteria.
            </summary>
      <param name="filter">The LDAP filter.</param>
      <param name="scope">The scope to search.</param>
      <returns>A collection of DirectoryData items.</returns>
      <remarks>This method simply delegates to the sorting implementation of FindAll with sortByProperty set to null.</remarks>
    </member>
    <member name="M:EPiServer.Security.DirectoryDataFactory.Initialize(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes an instance of the <see cref="T:EPiServer.Security.DirectoryDataFactory" /> class.
            </summary>
      <param name="config">The configuration data to use.</param>
      <remarks>
            This method is intended to be called from within a providers Initialize method. It will read its settings from the config parameter and
            initialize this instance. 
            Required settings in config are:
            connectionStringName = name of the connection string to use for connecting to the Active Directory server.
            connectionUsername = username for the connection.
            connectionPassword = password for the connection.
            
            Optional settings in config are:
            connectionProtection = level of protection and security for the Active Directory connection. None or Secure (default).
            cacheTimeout = how long cached Active Directory entries stys in the cache. Default is 10 minutes.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.DirectoryDataFactory.AddPropertyToLoad(System.String)">
      <summary>
            Adds a property to load on access to directory.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <remarks>
            This class keeps a list of property names to query for whenever a directory entry is retrieved. By calling this method you
            can expand this list with custom properties.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.DirectoryDataFactory.GetEntry(System.String)">
      <summary>
            Gets a specific directory entry as a DirectoryData object.
            </summary>
      <param name="distinguishedName">Distinguished name of the entry.</param>
      <returns>A DirectoryData instance containing the properties defined by PropertiesToLoad.</returns>
    </member>
    <member name="M:EPiServer.Security.DirectoryDataFactory.FindOne(System.String,System.DirectoryServices.SearchScope)">
      <summary>
            Find one directory entry based on search filter.
            </summary>
      <param name="filter">The filter, which is a LDAP query.</param>
      <param name="scope">The scope at which to search.</param>
      <returns>A DirectoryData instance with the entry, or null if the search did not find an entry.</returns>
    </member>
    <member name="M:EPiServer.Security.DirectoryDataFactory.FindAll(System.String,System.DirectoryServices.SearchScope,System.String)">
      <summary>
            Finds all directory entries that match the filter criteria.
            </summary>
      <param name="filter">The LDAP filter.</param>
      <param name="scope">The search scope.</param>
      <param name="sortByProperty">The name of the property to sort directory entries by.</param>
      <returns>An IList of DirectoryData objects, sorted by the indicated property.</returns>
      <remarks>
            If sortByProperty is set to null, the list will be returned without sorting.
            </remarks>
    </member>
    <member name="T:EPiServer.Security.FormsSettings">
      <summary>
            Convenience class to access authentication mode settings from the configuration system.
            </summary>
    </member>
    <member name="M:EPiServer.Security.FormsSettings.#cctor">
      <summary>
            Static constructor, initialized at Runtime.
            </summary>
    </member>
    <member name="P:EPiServer.Security.FormsSettings.LogOffTimeout">
      <summary>
            Gets the "logoff timeout" from the FomsAuthentication timeout attribute.
            </summary>
    </member>
    <member name="P:EPiServer.Security.FormsSettings.IsFormsAuthentication">
      <summary>
            Gets a value indicating this application si configured for forms authentication.
            </summary>
      <value>
        <c>true</c> if this instance is forms authentication; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Security.FormsSettings.IsWindowsAuthentication">
      <summary>
            Gets a value indicating this application si configured for Windows authentication.
            </summary>
      <value>
        <c>true</c> if this instance is forms authentication; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Security.IHashHandler">
      <summary>
            Interface for securing data by providing hash support.
            </summary>
    </member>
    <member name="M:EPiServer.Security.IHashHandler.GenerateStringHash(System.Byte[])">
      <summary>
            Generate a hash based on the input 
            </summary>
      <param name="input">The data that should be signed</param>
      <returns>A 256 bit array (32 bytes)</returns>
    </member>
    <member name="M:EPiServer.Security.IHashHandler.VerifyHash(System.Byte[],System.String)">
      <summary>
            Verifies a hash based on the input
            </summary>
      <param name="input">The data that should be verified</param>
      <param name="hash">The hash</param>
      <returns>True if the hash is valid</returns>
    </member>
    <member name="T:EPiServer.Security.Internal.PathAccessChecker">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.PathAccessChecker.HasEditAccess(System.Security.Principal.IPrincipal)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks for user access to the /edit pages.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.PathAccessChecker.HasPathAccess(System.String,System.Security.Principal.IPrincipal)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the contained principal has access to the specified path.
            </summary>
      <param name="path">The path to check.</param>
      <param name="principal">The user to check access for</param>
      <returns>
        <c>true</c> if the contained principal has access to the specified path; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.VirtualRoleHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helps manage roles, virtual roles and the repository
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VirtualRoleHelper.#ctor(EPiServer.Security.IVirtualRoleRepository,System.Web.Security.RoleProvider)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Security.Internal.VirtualRoleHelper" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VirtualRoleHelper.GetRoleNameForClass(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the virtual role name for the specified class (if many exists you may receive any of them)
            </summary>
      <param name="classType">Type of the class.</param>
      <returns>The role name.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VirtualRoleHelper.GetAllVirtualRoles">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a list of all virtual roles.
            </summary>
      <returns>A string array with the virtual role names.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VirtualRoleHelper.GetAllRoles">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all virtual roles and all roles defined by the Role provider.
            </summary>
      <returns>A string array with all role names.</returns>
      <remarks>
            If you want to get a list of all roles, both from the Roles provider and virtual roles, use this method
            since it will filter out any duplicates caused by overloading role names from virtual roles. I e if you 
            have a virtual role named "Administrators" and Roles.GetAllRoles() contains an entry named "Administrators"
            the final array returned by this method will only contain a single reference to the "Administrators" name.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VirtualRoleHelper.SearchRoles(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Find virtual roles and roles defined by the Role provider.
            </summary>
      <param name="query">Query to find roles in.</param>
      <returns>A list of roles that match the roleName</returns>
      <remarks>
        <para>
            Matching of role names is simply a substring check - if the role contains the string passed in roleName
            anywhere in the string, it is considered a match. A Null or empty roleName will return all roles.
            </para>
        <para>
            If you want to get a list of roles from the Roles provider and virtual roles, use this method
            since it will filter out any duplicates caused by overloading role names from virtual roles. I e if you 
            have a virtual role named "Administrators" and Roles.GetAllRoles() contains an entry named "Administrators"
            the final enumerator returned by this method will only contain a single reference to the "Administrators" name.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VirtualRoleHelper.GetAllRolesForUser(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all available roles for a user.
            </summary>
      <param name="username">The username.</param>
      <returns>
            An enumberable of strings with the names of all available roles for the user, 
            regardless if she is a member of the role or not.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VirtualRoleHelper.IsPrincipalInVirtualRole(System.Security.Principal.IPrincipal,System.String,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified principal is in the virtual role
            </summary>
      <param name="principal">The principal.</param>
      <param name="virtualRole">The role.</param>
      <param name="context">The context of the request</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.VisitorGroupSecurityDescriptor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Virtual role security descriptor, which determains if a principal is member of any of the supplied roles
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VisitorGroupSecurityDescriptor.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRoleRepository,EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Security.Internal.VisitorGroupSecurityDescriptor" /> class.
            </summary>
      <param name="virtualRoleRepository">The virtual role repository.</param>
      <param name="visitorGroupRepository">The visitor group repository.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VisitorGroupSecurityDescriptor.HasAccess(System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified principal is member of any of the supplied roles
            </summary>
      <param name="principal">The principal to authorize.</param>
      <param name="access">The requested access level.</param>
      <returns>
        <c>true</c> if the specified principal has access; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VisitorGroupSecurityDescriptor.GetAccessLevel(System.Security.Principal.IPrincipal)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the access level for the specified principal.
            </summary>
      <param name="principal">The principal to check access against.</param>
      <returns>The access level.</returns>
      <remarks>
            This method will always return AccessLevel.Undefined
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.VisitorGroupSecurityDescriptor.RoleIdentities">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the identities.
            </summary>
      <value>The identities.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.LogonUserSafeNativeMethods.LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,EPiServer.Security.UserTokenSafeHandle@)">
      <summary>
            Logons the user.
            </summary>
      <param name="lpszUsername">The LPSZ username.</param>
      <param name="lpszDomain">The LPSZ domain.</param>
      <param name="lpszPassword">The LPSZ password.</param>
      <param name="dwLogonType">Type of the dw logon.</param>
      <param name="dwLogonProvider">The dw logon provider.</param>
      <param name="phToken">The ph token.</param>
      <returns>True if logon was successful, false otherwise.</returns>
      <remarks>
            Refer to the Microsoft SDK regarding details for this API.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.LogonUserSafeNativeMethods.CloseHandle(System.IntPtr)">
      <summary>
            Closes the handle.
            </summary>
      <param name="handle">The handle.</param>
      <returns>True if the handle was successfully closed, false otherwise.</returns>
    </member>
    <member name="T:EPiServer.Security.UserTokenSafeHandle">
      <summary>
            Interface to the unmanaged LogonUser API and corresponding UserHandle
            </summary>
    </member>
    <member name="P:EPiServer.Security.UserTokenSafeHandle.IsInvalid">
      <summary>
            Gets a value indicating whether the handle value is invalid.
            </summary>
      <value>
      </value>
      <returns>true if the handle value is invalid; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.UserTokenSafeHandle.ReleaseHandle">
      <summary>
            Executes the code required to free the handle.
            </summary>
      <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
    </member>
    <member name="T:EPiServer.Security.MembershipExtensions">
      <summary>
            Extensions for membership classes
            </summary>
    </member>
    <member name="M:EPiServer.Security.MembershipExtensions.ToList(System.Web.Security.MembershipUserCollection)">
      <summary>
            Creates a list of <see cref="T:System.Web.Security.MembershipUser" /> elements from <see cref="T:System.Web.Security.MembershipUserCollection" />.
            </summary>
      <param name="collection">The collection.</param>
      <returns>The generic list of <see cref="T:System.Web.Security.MembershipUser" /></returns>
    </member>
    <member name="M:EPiServer.Security.MembershipExtensions.CreateMembershipUserCollection(System.Collections.Generic.IEnumerable{System.Web.Security.MembershipUser})">
      <summary>
            Creates the membership user collection from generic collection of <see cref="T:System.Web.Security.MembershipUser" />.
            </summary>
      <param name="collection">The collection.</param>
      <returns>The <see cref="T:System.Web.Security.MembershipUserCollection" /></returns>
    </member>
    <member name="M:EPiServer.Security.MembershipExtensions.GetWildcardSymbolFromDefaultProvider">
      <summary>
            Gets the wildcard symbol from the default membership provider or default - '%'
            </summary>
      <returns>Wildcard symbol</returns>
    </member>
    <member name="M:EPiServer.Security.MembershipExtensions.CombineIntersect(System.Web.Security.MembershipUserCollection,System.Web.Security.MembershipUserCollection)">
      <summary>
            Combines two <see cref="T:System.Web.Security.MembershipUserCollection" />'s in one collection with elements which were included in both source collections
            </summary>
      <param name="first">The first <see cref="T:System.Web.Security.MembershipUserCollection" />.</param>
      <param name="second">The second <see cref="T:System.Web.Security.MembershipUserCollection" />.</param>
      <returns>The combined <see cref="T:System.Web.Security.MembershipUserCollection" /></returns>
    </member>
    <member name="M:EPiServer.Security.MembershipExtensions.CombineDistinct(System.Web.Security.MembershipUserCollection,System.Web.Security.MembershipUserCollection)">
      <summary>
            Combines two <see cref="T:System.Web.Security.MembershipUserCollection" />'s in one collection with elements which were included in any of source collections
            </summary>
      <param name="first">The first <see cref="T:System.Web.Security.MembershipUserCollection" />.</param>
      <param name="second">The second <see cref="T:System.Web.Security.MembershipUserCollection" />.</param>
      <returns>The combined <see cref="T:System.Web.Security.MembershipUserCollection" /></returns>
    </member>
    <member name="T:EPiServer.Security.MembershipExtensions.MembershipEqualityComparer">
      <summary>
            Equality comparer for <see cref="T:System.Web.Security.MembershipUser" /> objects. Comparison performed by the UserName property
            </summary>
    </member>
    <member name="T:EPiServer.Security.MembershipExtensions.ProviderUserKeyComparer">
      <summary>
            IEqualityComparer class for comparing ProviderUserKey objects (with special handling of GUIDs and byte arrays)
            </summary>
    </member>
    <member name="T:EPiServer.Security.MembershipSecurityEntityProvider">
      <summary>
            Implemantation of <see cref="T:EPiServer.Security.SecurityEntityProvider" /> that delegates calls to configured <see cref="T:System.Web.Security.Membership" /> and <see cref="T:System.Web.Security.Roles" /> providers.
            </summary>
    </member>
    <member name="M:EPiServer.Security.MembershipSecurityEntityProvider.#ctor">
      <summary>
            Default constuctor, will use <see cref="P:System.Web.Security.Membership.Provider" /> and <see cref="P:System.Web.Security.Roles.Provider" />.
            </summary>
    </member>
    <member name="M:EPiServer.Security.MembershipSecurityEntityProvider.#ctor(System.Web.Security.MembershipProvider,System.Web.Security.RoleProvider)">
      <summary>
            Constructor with dependencies.
            </summary>
      <param name="membershipProvder">The membership provider to use.</param>
      <param name="roleProvider">The membership provider to use.</param>
    </member>
    <member name="M:EPiServer.Security.MembershipSecurityEntityProvider.#ctor(System.Web.Security.MembershipProvider,System.Web.Security.RoleProvider,System.Boolean)">
      <summary>
            Constructor with dependencies.
            </summary>
      <param name="membershipProvder">The membership provider to use.</param>
      <param name="roleProvider">The membership provider to use.</param>
      <param name="rolesEnabled">Specifies if Roles feature is enabled/&gt;</param>
    </member>
    <member name="M:EPiServer.Security.MembershipSecurityEntityProvider.#ctor(System.Web.Security.MembershipProvider,System.Web.Security.RoleProvider,System.Boolean,EPiServer.Security.ClaimTypeOptions)">
      <summary>
            Constructor with dependencies.
            </summary>
      <param name="membershipProvder">The membership provider to use.</param>
      <param name="roleProvider">The membership provider to use.</param>
      <param name="rolesEnabled">Specifies if Roles feature is enabled/&gt;</param>
      <param name="claimTypeOptions">The claim type options to use.</param>
    </member>
    <member name="P:EPiServer.Security.MembershipSecurityEntityProvider.ClaimOptions">
      <summary>
            Reason for having this as injected is that at runtime provider is created by ASPNET out of our control
            </summary>
    </member>
    <member name="M:EPiServer.Security.MembershipSecurityEntityProvider.GetRolesForUser(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.MembershipSecurityEntityProvider.FindUsersInRole(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.MembershipSecurityEntityProvider.Search(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.MembershipSecurityEntityProvider.Search(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Security.PrincipalInfo">
      <summary>
            A class that encapsulates some of the details dealing with the IPrincipal interface and corresponding
            issues with permissions and role/membership management.
            </summary>
    </member>
    <member name="M:EPiServer.Security.PrincipalInfo.#ctor(System.Security.Principal.IPrincipal)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.PrincipalInfo" /> class.
            </summary>
      <param name="principal">The principal object that you want to work with.</param>
    </member>
    <member name="P:EPiServer.Security.PrincipalInfo.Principal">
      <summary>
            Gets the principal used by this instance.
            </summary>
      <value>The principal.</value>
    </member>
    <member name="P:EPiServer.Security.PrincipalInfo.Name">
      <summary>
            Gets the name of the principal.
            </summary>
      <value>The name.</value>
      <remarks>
            This is a convenience method to directly access the Name property of the contained Indentity.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.PrincipalInfo.RoleList">
      <summary>
            Gets the list of roles that the principal belongs to.
            </summary>
      <value>The role list.</value>
      <remarks>
            Uses <see cref="T:System.Security.Claims.ClaimsPrincipal" /> to get a list of all role claims
            </remarks>
    </member>
    <member name="M:EPiServer.Security.PrincipalInfo.GetCachedRolesFromPrincipal(System.Security.Claims.ClaimsPrincipal)">
      <summary>
            Patch: Cached roles in RolePrincipal are not added as claims for some mysterious reason
            </summary>
    </member>
    <member name="M:EPiServer.Security.PrincipalInfo.WindowsIdentityRoles(System.Security.Principal.WindowsIdentity)">
      <summary>
            Gets the identity roles for a WindowsIdentity.
            </summary>
      <param name="wi">The WindowsIdentity object.</param>
      <returns>A collection of role names.</returns>
      <remarks>
            In most cases you should use the <see cref="P:EPiServer.Security.PrincipalInfo.RoleList" /> method.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.PrincipalInfo.Current">
      <summary>
            Gets a PrincipalInfo object initialized with the current principal.
            </summary>
      <value>The PrincipalInfo object.</value>
    </member>
    <member name="P:EPiServer.Security.PrincipalInfo.AnonymousPrincipal">
      <summary>
            Gets a principal object representing the an anonoymous principal.
            </summary>
      <value>The anonymous principal.</value>
    </member>
    <member name="P:EPiServer.Security.PrincipalInfo.CurrentPrincipal">
      <summary>
            Gets or sets the current principal.
            </summary>
      <value>The current principal.</value>
      <remarks>
            This method will use the user from the http context an HttpContext exists, otherwise
            it will fall back to the the Thread.CurrentPrincipal setting.
            <para>
            When you get the current principal you are assured to always get a valid IPrincipal.
            </para></remarks>
    </member>
    <member name="M:EPiServer.Security.PrincipalInfo.HasPathAccess(System.String)">
      <summary>
            Determines whether the contained principal has access to the specified path.
            </summary>
      <param name="path">The path to check.</param>
      <returns>
        <c>true</c> if the contained principal has access to the specified path; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Security.PrincipalInfo.IsPermitted(EPiServer.Security.PermissionType)">
      <summary>
            Determines whether the specified permission is granted to the current principal.
            </summary>
      <param name="permissionType">The permission type.</param>
      <returns>
        <c>true</c> if the specified permission is granted; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Security.PrincipalInfo.CreatePrincipal(System.String)">
      <summary>
            Creates a principal object for a user.
            </summary>
      <param name="username">The name of the user.</param>
      <returns>An IPrincipal with the associated roles initialized.</returns>
      <remarks>
            The Roles system must be enabled in order for this method to work. Note that there is no check 
            that the passed username exists in the current Membership provider, a non-existing username will
            return a principal object with the given name and an empty role list. If role system is disabled
            then a principal without roles is returned.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.PrincipalInfo.RecreatePrincipalForThreading">
      <summary>
            Recreates the principal for threading.
            <remarks>
            This function should be used before the worker thread is created 
            to avoiding get System.ObjectDisposedException or run under AnonymousPrincipal
            <example>
            ... 
            ...
            RecreatePrincipalForThreading();
            ThreadPool.QueueUserWorkItem(new WaitCallback(ThreadStart), State);
            
            </example></remarks></summary>
    </member>
    <member name="P:EPiServer.Security.PrincipalInfo.HasEditAccess">
      <summary>
            Checks for user access to the /edit pages.
            </summary>
    </member>
    <member name="P:EPiServer.Security.PrincipalInfo.HasEditorAccess">
      <summary>
            Checks for user access to the /editor pages.
            </summary>
    </member>
    <member name="P:EPiServer.Security.PrincipalInfo.HasAdminAccess">
      <summary>
            Checks for user access to the /admin pages.
            </summary>
    </member>
    <member name="T:EPiServer.Security.ProviderCapabilities">
      <summary>
            A class to see if provider has support for <see cref="T:EPiServer.Security.ProviderActions" /> actions.
            </summary>
      <remarks>SqlServerMembershipProvider, SqlServerRoleProvider and ActiveDirectoryMembershipProvider are added with default values.
             WindowsMembershipProvider, WindowsRoleProvider and ActiveDirectoryRoleProvider are also added if among the configured providers
            in confic, with values extracted from their <see cref="T:EPiServer.Security.ProviderCapabilityAttribute" /> settings.
            Enables you to check if a provider has support for different action in code.</remarks>
    </member>
    <member name="M:EPiServer.Security.ProviderCapabilities.#cctor">
      <summary>
            Add role and membership providers from RoleProviderCollection and MembershipProviderCollection into Dictionary
            </summary>
    </member>
    <member name="P:EPiServer.Security.ProviderCapabilities.HasConfiguredMembershipProviders">
      <summary>
            Returns true when there are more than one working membership provider configured
            </summary>
    </member>
    <member name="M:EPiServer.Security.ProviderCapabilities.AddProvider(System.Type,EPiServer.Security.ProviderCapabilitySettings)">
      <summary>
            Adds capabilities for a custom provider. Alternatively, decorate the custom
            provider with the <see cref="T:EPiServer.Security.ProviderCapabilityAttribute" /></summary>
      <param name="providerType">The type of the provider.</param>
      <param name="settings">The provider capabilities settings.</param>
    </member>
    <member name="T:EPiServer.Security.ProviderCapabilities.Action">
      <summary>
            Actions that are supported by the provider.
            </summary>
    </member>
    <member name="F:EPiServer.Security.ProviderCapabilities.Action.Update">
      <summary>
            Update action on provider
            </summary>
    </member>
    <member name="F:EPiServer.Security.ProviderCapabilities.Action.Create">
      <summary>
            Create action on provider
            </summary>
    </member>
    <member name="F:EPiServer.Security.ProviderCapabilities.Action.Delete">
      <summary>
            Delete action on provider
            </summary>
    </member>
    <member name="P:EPiServer.Security.ProviderCapabilities.Providers">
      <summary>
            Generic Dictionary with role and member providers
            </summary>
    </member>
    <member name="M:EPiServer.Security.ProviderCapabilities.IsSupported(System.String,EPiServer.Security.ProviderActions)">
      <summary>
            Determines whether a provider supports a specific <see cref="T:EPiServer.Security.ProviderActions" />.
            </summary>
      <param name="providerName">Name on provider.</param>
      <param name="action">Action on provider <see cref="T:EPiServer.Security.ProviderActions" /></param>
      <returns>
            	Returns true if action on provider is supported otherwise false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.ProviderCapabilities.IsSupported(System.String,System.String)">
      <summary>
            Determines whether the specified provider has support for the property been sent in.
            </summary>
      <param name="providerName">Name of the provider.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>
      </returns>
      <remarks>Default we have 2 properties defined email and comment.</remarks>
    </member>
    <member name="M:EPiServer.Security.ProviderCapabilities.FindSettingsFromName(System.String)">
      <summary>
            Finds the provider capability settings from a provider name.
            </summary>
      <param name="providerName">Name of the provider.</param>
      <returns>The correspronding ProviderCapabilitySettings for the provider.</returns>
    </member>
    <member name="T:EPiServer.Security.ProviderCapabilitySettings">
      <summary>
            Implements information about capabilities that various Mamberhip and Role providers supports. 
            </summary>
      <remarks>
            How to use:
            Question for property on provider: 
            ProviderCapabilities.IsSupported(membershipUser.ProviderName, "comment")
            Question if provider supports create:
            ProviderCapabilities.IsSupported(providerMemberName, ProviderActions.Create)
            </remarks>
    </member>
    <member name="T:EPiServer.Security.ProviderCapabilitySettings.NullCapabililtySettings">
      <summary>
            A class that implements the Null Object pattern for ProviderCapabilitySettings. Default behavior is to allow anything.
            </summary>
    </member>
    <member name="M:EPiServer.Security.ProviderCapabilitySettings.#ctor(EPiServer.Security.ProviderActions,System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.ProviderCapabilitySettings" /> class.
            </summary>
      <param name="allowedActions">Provider supported actions.</param>
      <param name="properties">Key-value pairs that describes custom properties.</param>
    </member>
    <member name="P:EPiServer.Security.ProviderCapabilitySettings.NullCapability">
      <summary>
            Gets the null capability object.
            </summary>
      <value>The null capability object.</value>
    </member>
    <member name="P:EPiServer.Security.ProviderCapabilitySettings.WildcardSymbol">
      <summary>
            Wildcard symbol used when searching for Users
            </summary>
      <remarks>
            Default wildcard symbol is %
            </remarks>
    </member>
    <member name="M:EPiServer.Security.ProviderCapabilitySettings.AllowsAction(EPiServer.Security.ProviderActions)">
      <summary>
            Check if the action is allowed.
            </summary>
      <param name="action">The action.</param>
      <returns>
        <c>true</c> if the action is allowed; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Security.ProviderCapabilitySettings.AllowsProperty(System.String)">
      <summary>
            Check if the property is supported.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>
        <c>true</c> if the action is allowed; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:EPiServer.Security.ProviderFacade">
      <summary>
            This a helper class that is used to get provider information.
            </summary>
      <remarks>
            The primary purpose is to hide all complexities related to working with the multiplexing 
            role / membership providers.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.ProviderFacade.GetDefaultRoleProviderName">
      <summary>
            Gets the name of the default role provider.
            </summary>
      <returns>Name of provider</returns>
      <remarks>If provider is multiplexing provider the method returns DefaultProviderName</remarks>
    </member>
    <member name="M:EPiServer.Security.ProviderFacade.GetDefaultMembershipProviderName">
      <summary>
            Gets the name of the default membership provider.
            </summary>
      <returns>Name of provider</returns>
      <remarks>If provider is multiplexing provider the method returns DefaultProviderName</remarks>
    </member>
    <member name="M:EPiServer.Security.ProviderFacade.GetDefaultRoleProviderName(System.Web.Security.RoleProvider)">
      <summary>
            Gets the name of the default role provider.
            </summary>
      <param name="provider">The provider.</param>
      <returns>Name of provider</returns>
      <remarks>
            If provider is multiplexing provider the method returns the name of the Default Provider 
            for the multiplexing provider
            </remarks>
    </member>
    <member name="M:EPiServer.Security.ProviderFacade.GetDefaultRoleProviderName(System.String)">
      <summary>
            Gets the name of the default role provider.
            </summary>
      <param name="membershipProviderName">The membership provider that is currently in use or null if the membership provider shouldn't be taken into account.</param>
      <returns>Name of provider</returns>
      <remarks>If provider is multiplexing provider the method returns DefaultProviderName</remarks>
    </member>
    <member name="M:EPiServer.Security.ProviderFacade.GetDefaultRoleProviderName(System.Web.Security.RoleProvider,System.String)">
      <summary>
            Gets the name of the default role provider.
            </summary>
      <param name="provider">The provider.</param>
      <param name="membershipProviderName">The membership provider that is currently in use or null if the membership provider shouldn't be taken into account.</param>
      <returns>Name of provider</returns>
      <remarks>If provider is multiplexing provider the method returns DefaultProviderName</remarks>
    </member>
    <member name="M:EPiServer.Security.ProviderFacade.GetDefaultRoleProvider(System.Web.Security.RoleProvider)">
      <summary>
            Gets the default role provider.
            </summary>
      <param name="provider">The provider to check.</param>
      <returns>
            It is recommended that you use this method when you want to extract a role provider
            for manipulating roles, since it will "bypass" the multiplexing role provider in case
            it is currently in use. If the multiplexing role provider is not used, this method will
            do nothing. I e it will return the provider passed in.
            </returns>
    </member>
    <member name="M:EPiServer.Security.ProviderFacade.GetDefaultRoleProvider(System.Web.Security.RoleProvider,System.String)">
      <summary>
            Gets the default role provider.
            </summary>
      <param name="provider">The provider to check.</param>
      <param name="membershipProviderName">The membership provider that is currently in use or null if the membership provider shouldn't be taken into account.</param>
      <returns>
            It is recommended that you use this method when you want to extract a role provider
            for manipulating roles, since it will "bypass" the multiplexing role provider in case
            it is currently in use. If the multiplexing role provider is not used, this method will
            do nothing. I e it will return the provider passed in.
            </returns>
    </member>
    <member name="M:EPiServer.Security.ProviderFacade.GetDefaultMembershipProviderName(System.Web.Security.MembershipProvider)">
      <summary>
            Gets the name of the default membership provider.
            </summary>
      <param name="provider">The provider.</param>
      <returns>Name of provider</returns>
      <remarks>
            If provider is multiplexing provider the method returns the name of the Default Provider 
            for the multiplexing provider.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.ProviderFacade.GetDefaultMembershipProvider(System.Web.Security.MembershipProvider)">
      <summary>
            Gets the default membership provider.
            </summary>
      <param name="provider">The provider to check.</param>
      <returns>
            It is recommended that you use this method when you want to extract a membership provider
            for manipulating users, since it will "bypass" the multiplexing membership provider in case
            it is currently in use. If the multiplexing membership provider is not used, this method will
            do nothing. I e it will return the provider passed in.
            </returns>
    </member>
    <member name="T:EPiServer.Security.RoleProviderUtility">
      <summary>
            Extended utility methods for Role provider
            </summary>
    </member>
    <member name="M:EPiServer.Security.RoleProviderUtility.GetAllRolesWithProviders">
      <summary>
            Gets all roles with providers.
            This method is a extension to roleprovider model.
            </summary>
      <returns>IList&lt;RoleItem&gt;</returns>
    </member>
    <member name="T:EPiServer.Security.RoleItem">
      <summary>
            Structure describing a common representation of MembershipUsers and Roles.
            </summary>
    </member>
    <member name="M:EPiServer.Security.RoleItem.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.RoleItem" /> class.
            </summary>
      <param name="roleName">Name of the role.</param>
      <param name="providerName">Name of the provider which this RoleItem belongs to.</param>
    </member>
    <member name="M:EPiServer.Security.RoleItem.#ctor(System.String,EPiServer.Security.SecurityEntityType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.RoleItem" /> class.
            </summary>
      <param name="roleName">Name of the role.</param>
      <param name="securityEntityType">The <see cref="T:EPiServer.Security.SecurityEntityType">SecurityEntityType</see> of the MembershipUser or Role.</param>
    </member>
    <member name="M:EPiServer.Security.RoleItem.#ctor(System.String,System.String,EPiServer.Security.SecurityEntityType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.RoleItem" /> class.
            </summary>
      <param name="roleName">Name of the role.</param>
      <param name="providerName">Name of the provider which this RoleItem belongs to.</param>
      <param name="securityEntityType">The <see cref="T:EPiServer.Security.SecurityEntityType">SecurityEntityType</see> of the MembershipUser or Role.</param>
    </member>
    <member name="P:EPiServer.Security.RoleItem.SecurityEntityType">
      <summary>
            The <see cref="T:EPiServer.Security.SecurityEntityType">SecurityEntityType</see> of the MembershipUser or Role.
            </summary>
      <value>The type of the security entity.</value>
    </member>
    <member name="P:EPiServer.Security.RoleItem.ProviderName">
      <summary>
            Gets or sets the name of the provider.
            </summary>
      <value>The name of the provider.</value>
    </member>
    <member name="P:EPiServer.Security.RoleItem.RoleName">
      <summary>
            Gets or sets name of the MembershipUser or Role.
            </summary>
    </member>
    <member name="T:EPiServer.Security.SiteSecurity">
      <summary>
            Helper class to create secure hashes over custom data using the site secret
            </summary>
    </member>
    <member name="T:EPiServer.Security.SiteSecurity.SiteSecretDelegate">
      <summary>
            Use to iterate over site secrets
            </summary>
      <param name="siteId">The siteId that the site secret belongs to</param>
      <param name="siteSecret">The actual site secret which is highly sensitive data</param>
    </member>
    <member name="P:EPiServer.Security.SiteSecurity.SiteSecret">
      <summary>
            The site secret which is highly sensitive information
            </summary>
      <remarks>Only use this value for cryptograhpic functions. This method is cached.</remarks>
    </member>
    <member name="M:EPiServer.Security.SiteSecurity.ForEachSiteSecret(EPiServer.Security.SiteSecurity.SiteSecretDelegate)">
      <summary>
            Iterate over all site secrets that are stored in the database
            </summary>
      <param name="handleSiteSecret">A delegate to you handler which will be called for every site secret that has been stored.  This method is not cached.</param>
    </member>
    <member name="M:EPiServer.Security.SiteSecurity.GenerateHash(System.Byte[])">
      <summary>
            Generate a SHA256 hash based on the input using the site secret
            </summary>
      <param name="input">The data that should be signed</param>
      <returns>A 256 bit array (32 bytes)</returns>
    </member>
    <member name="M:EPiServer.Security.SiteSecurity.GenerateStringHash(System.Byte[])">
      <summary>
            Generate a SHA256 hash based on the input using the site secret
            </summary>
      <param name="input">The data that should be signed</param>
      <returns>A 256 bit array (32 bytes)</returns>
    </member>
    <member name="M:EPiServer.Security.SiteSecurity.VerifyHash(System.Byte[],System.Byte[])">
      <summary>
            Verify a SHA256 hash based on the input using the site secret
            </summary>
      <param name="input">The data that should be verified</param>
      <param name="hash">The hash to compare with.</param>
      <returns>True if the hash is valid</returns>
    </member>
    <member name="M:EPiServer.Security.SiteSecurity.VerifyHash(System.Byte[],System.String)">
      <summary>
            Verify a SHA256 hash based on the input using the site secret
            </summary>
      <param name="input">The data that should be verified</param>
      <param name="hash">The hash to compare with.</param>
      <returns>True if the hash is valid</returns>
    </member>
    <member name="T:EPiServer.Security.VirtualRoles">
      <summary>
            Handles the virtual role configuration and role checks for registered providers.
            </summary>
    </member>
    <member name="M:EPiServer.Security.VirtualRoles.GetRoleNameForClass(System.Type)">
      <summary>
            Gets the virtual role name for the specified class (if many exists you may receive any of them)
            </summary>
      <param name="classType">Type of the class.</param>
      <returns>The role name.</returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRoles.GetAllVirtualRoles">
      <summary>
            Get a list of all virtual roles.
            </summary>
      <returns>A string array with the virtual role names.</returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRoles.GetAllRoles">
      <summary>
            Gets all virtual roles and all roles defined by the Role provider.
            </summary>
      <returns>A string array with all role names.</returns>
      <remarks>
            If you want to get a list of all roles, both from the Roles provider and virtual roles, use this method
            since it will filter out any duplicates caused by overloading role names from virtual roles. I e if you 
            have a virtual role named "Administrators" and Roles.GetAllRoles() contains an entry named "Administrators"
            the final array returned by this method will only contain a single reference to the "Administrators" name.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.VirtualRoles.GetAllRolesForUser(System.String)">
      <summary>
            Gets all available roles for a user.
            </summary>
      <param name="username">The username.</param>
      <returns>
            A string array with the names of all available roles for the user, 
            regardless if she is a member of the role or not.
            </returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRoles.IsPrincipalInVirtualRole(System.Security.Principal.IPrincipal,System.String,System.Object)">
      <summary>
            Determines whether the specified principal is in the virtual role
            </summary>
      <param name="principal">The principal.</param>
      <param name="virtualRole">The role.</param>
      <param name="context">The context of the request</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.Security.VirtualRoles.IsReplacePrincipal">
      <summary>
            Gets a value indicating whether we will replace the current principal with a VirtualRolePrincipal.
            </summary>
      <value>
        <c>true</c> if we will replace the current principal; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Security.VirtualRoles.SearchRoles(System.String)">
      <summary>
            Search in virtual roles and roles defined by the Role provider.
            </summary>
      <param name="query">The role to find.</param>
      <returns>A list of roles that match the roleName</returns>
      <remarks>
        <para>
            Matching of role names is simply a substring check - if the role contains the string passed in roleName
            anywhere in the string, it is considered a match. A Null or empty roleName will return all roles.
            </para>
        <para>
            If you want to get a list of roles from the Roles provider and virtual roles, use this method
            since it will filter out any duplicates caused by overloading role names from virtual roles. I e if you 
            have a virtual role named "Administrators" and Roles.GetAllRoles() contains an entry named "Administrators"
            the final enumerator returned by this method will only contain a single reference to the "Administrators" name.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Security.WindowsMembershipProvider">
      <summary>
            A Windows membership provider that will support "offline" role membership requests
            with the corresponding WindowsRoleProvider.
            </summary>
      <internal-API />
    </member>
    <member name="F:EPiServer.Security.WindowsMembershipProvider.invalidUsernameCharacters">
      <summary>
            Contains characters that are not valid in usernames strings passed to SplitAndValidateUsernameString()
            </summary>
    </member>
    <member name="F:EPiServer.Security.WindowsMembershipProvider.invalidUserOrDomainCharacters">
      <summary>
            Contains characters that, in addition to illegalUsernameCharacters, are invalid in the individual user or domain/computer name parts
            </summary>
    </member>
    <member name="T:EPiServer.Security.WindowsMembershipProvider.UsernameFormat">
      <summary>
            Represents the username format settings.
            </summary>
    </member>
    <member name="F:EPiServer.Security.WindowsMembershipProvider.UsernameFormat.Name">
      <summary>
            For example "mkl"
            </summary>
    </member>
    <member name="F:EPiServer.Security.WindowsMembershipProvider.UsernameFormat.DomainAndName">
      <summary>
            For example "EP\mkl"
            </summary>
    </member>
    <member name="F:EPiServer.Security.WindowsMembershipProvider.UsernameFormat.UserPrincipalName">
      <summary>
            For example "mkl@ep.se"
            </summary>
    </member>
    <member name="F:EPiServer.Security.WindowsMembershipProvider.UsernameFormat.Any">
      <summary>
            Allows all of the above.
            </summary>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.WindowsMembershipProvider" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.DeletePrefix">
      <summary>
            Gets or sets the delete prefixes.
            </summary>
      <value>The delete prefixes.</value>
      <remarks>
            When reading the Windows groups there are some group names that have prefixes that you may want to remove. 
            For example the Administrators group is reported as "BUILTIN\Administrators" and by setting the DeletePrefix
            to "BUILTIN\" the group will instead be reported as "Administrators".
            <para>
            The primary way to set this property is by setting the attribute deletePrefix for the membership provider
            configuration in web.config. The attribute is a comma-separated string with the prefixes to check.
            </para></remarks>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
      <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.ApplicationName">
      <summary>
            The name of the application using the custom membership provider.
            </summary>
      <value>
      </value>
      <returns>The name of the application using the custom membership provider.</returns>
      <remarks>
            The current implementation ignores the ApplicationName. All users are placed in the same store
            regardless of the ApplicationName. Since the windows account database is the same regardless of
            the application in use it makes no sense to partition the user store.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.ChangePassword(System.String,System.String,System.String)">
      <summary>
            Not supported by this provider. Processes a request to update the password for a membership user.
            </summary>
      <param name="username">The user to update the password for.</param>
      <param name="oldPassword">The current password for the specified user.</param>
      <param name="newPassword">The new password for the specified user.</param>
      <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
      <summary>
            Not supported by this provider. Processes a request to update the password question and answer for a membership user.
            </summary>
      <param name="username">The user to change the password question and answer for.</param>
      <param name="password">The password for the specified user.</param>
      <param name="newPasswordQuestion">The new password question for the specified user.</param>
      <param name="newPasswordAnswer">The new password answer for the specified user.</param>
      <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
      <summary>
            Not supported by this provider. Adds a new membership user to the data source.
            </summary>
      <param name="username">The user name for the new user.</param>
      <param name="password">The password for the new user.</param>
      <param name="email">The e-mail address for the new user.</param>
      <param name="passwordQuestion">The password question for the new user.</param>
      <param name="passwordAnswer">The password answer for the new user</param>
      <param name="isApproved">Whether or not the new user is approved to be validated.</param>
      <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
      <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.DeleteUser(System.String,System.Boolean)">
      <summary>
            Not supported by this provider. Removes a user from the membership data source.
            </summary>
      <param name="username">The name of the user to delete.</param>
      <param name="deleteAllRelatedData">true to delete data related to the user from the database; false to leave data related to the user in the database.</param>
      <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.EnablePasswordReset">
      <summary>
            Indicates whether the membership provider is configured to allow users to reset their passwords.
            </summary>
      <value>
      </value>
      <returns>true if the membership provider supports password reset; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.EnablePasswordRetrieval">
      <summary>
            Indicates whether the membership provider is configured to allow users to retreive their passwords.
            </summary>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Supported by this provider only if the searchByEmail is set to True. Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
      <param name="emailToMatch">The e-mail address to search for.</param>
      <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
      <param name="pageSize">The size of the page of results to return.</param>
      <param name="totalRecords">The total number of matched users.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
      <param name="usernameToMatch">The user name to search for.</param>
      <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
      <param name="pageSize">The size of the page of results to return.</param>
      <param name="totalRecords">The total number of matched users.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
      <summary>
            Gets a collection of all the users in the data source in pages of data.
            </summary>
      <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
      <param name="pageSize">The size of the page of results to return.</param>
      <param name="totalRecords">The total number of matched users.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.GetNumberOfUsersOnline">
      <summary>
            Not supported by this provider. Gets the number of users currently accessing the application.
            </summary>
      <returns>
            The number of users currently accessing the application.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.GetPassword(System.String,System.String)">
      <summary>
            Not supported by this provider. Gets the password for the specified user name from the data source.
            </summary>
      <param name="username">The user to retrieve the password for.</param>
      <param name="answer">The password answer for the user.</param>
      <returns>
            The password for the specified user name.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.GetUser(System.String,System.Boolean)">
      <summary>
            Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
      <param name="username">The name of the user to get information for.</param>
      <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.GetUser(System.Object,System.Boolean)">
      <summary>
            Gets information from the data source for a user based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
      <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
      <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
      <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.GetNTAccount(System.Object)">
      <summary>
            Translates a user key from a provider to an <see cref="T:System.Security.Principal.NTAccount" /></summary>
      <param name="providerUserKey">The user key to translate.</param>
      <returns>An <see cref="T:System.Security.Principal.NTAccount" /> corresponding to the user key.</returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.GetUserNameByEmail(System.String)">
      <summary>
            Not supported by this provider. Gets the user name associated with the specified e-mail address.
            </summary>
      <param name="email">The e-mail address to search for.</param>
      <returns>
            The user name associated with the specified e-mail address. If no match is found, return null.
            </returns>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.MaxInvalidPasswordAttempts">
      <summary>
            Not supported by this provider. Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
      <value>
      </value>
      <returns>The number of invalid password or password-answer attempts allowed before the membership user is locked out.</returns>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.MinRequiredNonAlphanumericCharacters">
      <summary>
            Not supported by this provider. Gets the minimum number of special characters that must be present in a valid password.
            </summary>
      <value>
      </value>
      <returns>The minimum number of special characters that must be present in a valid password.</returns>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.MinRequiredPasswordLength">
      <summary>
            Not supported by this provider. Gets the minimum length required for a password.
            </summary>
      <value>
      </value>
      <returns>The minimum length required for a password. </returns>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.PasswordAttemptWindow">
      <summary>
            Not supported by this provider. Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
      <value>
      </value>
      <returns>The number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.</returns>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.PasswordFormat">
      <summary>
            Gets the format of the password
            </summary>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.PasswordStrengthRegularExpression">
      <summary>
            Not supported by this provider. Gets the regular expression used to evaluate a password.
            </summary>
      <value>
      </value>
      <returns>A regular expression used to evaluate a password.</returns>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.RequiresQuestionAndAnswer">
      <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
      <value>
      </value>
      <returns>true if a password answer is required for password reset and retrieval; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:EPiServer.Security.WindowsMembershipProvider.RequiresUniqueEmail">
      <summary>
            Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.
            </summary>
      <value>
      </value>
      <returns>true if the membership provider requires a unique e-mail address; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.ResetPassword(System.String,System.String)">
      <summary>
            Not supported by this provider. Resets a user's password to a new, automatically generated password.
            </summary>
      <param name="username">The user to reset the password for.</param>
      <param name="answer">The password answer for the specified user.</param>
      <returns>The new password for the specified user.</returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.UnlockUser(System.String)">
      <summary>
            Not supported by this provider. Clears a lock so that the membership user can be validated.
            </summary>
      <param name="userName">The membership user to clear the lock status for.</param>
      <returns>
            true if the membership user was successfully unlocked; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
      <summary>
            Not supported by this provider. Updates information about a user in the data source.
            </summary>
      <param name="user">A <see cref="T:System.Web.Security.MembershipUser"></see> object that represents the user to update and the updated information for the user.</param>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.ValidateUser(System.String,System.String)">
      <summary>
            Verifies that the specified user name and password exist in the data source.
            </summary>
      <param name="username">The name of the user to validate.</param>
      <param name="password">The password for the specified user.</param>
      <returns>
            true if the specified username and password are valid; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.GroupNamesFromIdentity(System.Security.Principal.WindowsIdentity)">
      <summary>
            Get names of the groups that the WindowsIdentity belongs to.
            </summary>
      <param name="identity">The identity.</param>
      <returns>A string[] with the groups names.</returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.GroupNamesFromIdentity(System.Security.Principal.WindowsIdentity,System.String[])">
      <summary>
            Get names of the groups that the WindowsIdentity belongs to.
            </summary>
      <param name="identity">The identity.</param>
      <param name="deletePrefix">The delete prefix.</param>
      <returns>A string[] with the groups names.</returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.GetDeletePrefix">
      <summary>
            Gets the delete prefixes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsMembershipProvider.SplitAndValidateUsernameString(System.String,System.String@,System.String@,EPiServer.Security.WindowsMembershipProvider.UsernameFormat)">
      <summary>
            Performs initial checks on a username string. Use this before attempting to call LogonUser.
            </summary>
    </member>
    <member name="T:EPiServer.Security.WindowsRoleProvider">
      <summary>
            Role provider to be used together with <see cref="T:EPiServer.Security.WindowsMembershipProvider" />.
            Note that this provider does not really interact with Windows groups, but simply stores group
            information in the database. The database information is then updated by the WindowsMembershipProvider.
            </summary>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.WindowsRoleProvider" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.string,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
      <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
    </member>
    <member name="P:EPiServer.Security.WindowsRoleProvider.ApplicationName">
      <summary>
            Gets or sets the name of the application to store and retrieve role information for.
            </summary>
      <value>The name of the application.</value>
      <returns>The name of the application to store and retrieve role information for.</returns>
      <remarks>
            In the current implementation, the ApplicationName is ignored.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.CreateRole(System.String)">
      <summary>
            Adds a new role to the data source for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to create.</param>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.DeleteRole(System.String,System.Boolean)">
      <summary>
            Removes a role from the data source for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to delete.</param>
      <param name="throwOnPopulatedRole">If true, throw an exception if roleName has one or more members and do not delete roleName.</param>
      <returns>
            true if the role was successfully deleted; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.FindUsersInRole(System.String,System.String)">
      <summary>
            Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
      <param name="roleName">The role to search in.</param>
      <param name="usernameToMatch">The user name to search for.</param>
      <returns>
            A string array containing the names of all the users where the user name matches usernameToMatch and the user is a member of the specified role.
            </returns>
      <remarks>
            The usernameToMatch can handle wildcard search according to the rules for the SQL LIKE
            operator. I e setting usernameToMatch to "adam%" will match any username staring with adam.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.GetAllRoles">
      <summary>
            Gets a list of all the roles for the configured applicationName.
            </summary>
      <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.GetRolesForUser(System.String)">
      <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
      <param name="username">The user to return a list of roles for.</param>
      <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.GetUsersInRole(System.String)">
      <summary>
            Gets a list of users in the specified role for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to get the list of users for.</param>
      <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.IsUserInRole(System.String,System.String)">
      <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
      <param name="username">The user name to search for.</param>
      <param name="roleName">The role to search in.</param>
      <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.RoleExists(System.String)">
      <summary>
            Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
      <param name="roleName">The name of the role to search for in the data source.</param>
      <returns>
            true if the role name already exists in the data source for the configured applicationName; otherwise, false.
            </returns>
      <remarks>
            Note that this method only checks if the given roleName is present in the database. The Windows group may
            exist, but if no user belonging to that group has logged on, this method will return false.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.AddUsersToRoles(System.String[],System.String[])">
      <summary>
            Not supported by this provider. Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
      <param name="usernames">A string array of user names to be added to the specified roles.</param>
      <param name="roleNames">A string array of the role names to add the specified user names to.</param>
    </member>
    <member name="M:EPiServer.Security.WindowsRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
      <summary>
            Not supported by this provider. Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
      <param name="usernames">A string array of user names to be removed from the specified roles.</param>
      <param name="roleNames">A string array of role names to remove the specified user names from.</param>
    </member>
    <member name="T:EPiServer.Security.RawACEExtensions">
      <summary>
            Raw data contained in AccessControlList
            </summary>
    </member>
    <member name="M:EPiServer.Security.RawACEExtensions.AutomaticEntryType(EPiServer.Security.RawACE)">
      <summary>
            Gets the type of the entry.
            </summary>
      <value>The type of the entry.</value>
      <remarks>
            Since the type is not encoded in the SID nor the name, we simply check if the current Role provider has the name
            defined as a role. If not we consider it a user name.
            </remarks>
    </member>
    <member name="T:EPiServer.SimplePage">
      <summary>
            Base class for EPiServer pages with read-only functionality.
            </summary>
      <remarks>
            Pages that inherit from <b>SimplePage</b> have all the other capabilities that 
            <b>TemplatePage</b> descendents have, meaning that you can still add EPiServer 
            properties and edit their contents. However, when a Web page inheriting 
            from <b>SimplePage</b> is displayed, you will not have access to Admin mode or 
            Edit mode from the shortcut menu.
            </remarks>
      <example>
            The following example demonstrates a Web form that inherits from SimplePage.
            <code source="../CodeSamples/EPiServer/SimplePageSamples.cs" region="WebForm" /></example>
    </member>
    <member name="M:EPiServer.SimplePage.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:EPiServer.SimplePage" /></summary>
    </member>
    <member name="M:EPiServer.SimplePage.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SimplePage" /> class.
            </summary>
      <param name="options">The page options to enable.</param>
      <remarks>
            The options parameter is a bitmap constructed from the OptionFlag of Page plugin classes from
            the EPiServer.Web.PageExtensions namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.SimplePage.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.SimplePage" /> class.
            </summary>
      <param name="enable">The enable.</param>
      <param name="disable">The disable.</param>
    </member>
    <member name="T:EPiServer.SiteBase">
      <summary>
            Base class for site-specific overrideable methods that control site behavior via HttpApplication pipe-line
            events. This class is included in the EPiServer SDK to serve as a basis for adapted implementations where
            a different behavior is required. Override in Global.asax.cs as required.
            </summary>
    </member>
    <member name="F:EPiServer.SiteBase.ENABLE_DEFAULT_DOCUMENTS">
      <summary>
            Set HttpContext.Current.Items[ENABLE_DEFAULT_DOCUMENTS] = false; to disable default default
            document handling.
            </summary>
    </member>
    <member name="E:EPiServer.SiteBase.ValidateRequestAccess">
      <summary>
            Attach an event-handler to this event to be able to cancel an access to a resource located in
            a system directory with an access denied message.
            </summary>
    </member>
    <member name="P:EPiServer.SiteBase.IsDefaultDocumentsEnabled">
      <summary>
            Gets or sets a value indicating whether this instance has default documents enabled.
            </summary>
      <value>
        <c>true</c> if this instance has default documents enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.SiteBase.GetDefaultDocuments(System.Uri)">
      <summary>
            Gets a list of default documents. Override if you need to change which documents are actually
            tried.
            </summary>
      <param name="url">The URL of the request that is determined to need a default document</param>
      <returns>null or a list of default documents to try</returns>
      <remarks>
            Set HttpContext.Current.Items[ENABLE_DEFAULT_DOCUMENTS] = false; to disable default default
            document handling.
            </remarks>
    </member>
    <member name="M:EPiServer.SiteBase.SchemeHostPortMatch(System.Uri,System.Uri)">
      <summary>
            Checks if the scheme, host and port matches between two URI:s.
            </summary>
      <param name="url1">The URL to compare.</param>
      <param name="url2">The URL to compare against.</param>
      <returns>true if they match</returns>
    </member>
    <member name="M:EPiServer.SiteBase.OnValidateRequestAccess(EPiServer.ValidateRequestAccessEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.SiteBase.ValidateRequestAccess" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.ValidateRequestAccessEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="P:EPiServer.SiteBase.SkipUiHostPortMatch">
      <summary>
            Gets a value indicating whether secure edit / admin validation should be disabled.
            </summary>
      <value>
        <c>true</c> if edit / admin validation should be performed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.ValidateRequestAccessEventArgs">
      <summary>
            Event arguments used to validate if a request should be blocked or allowed.
            </summary>
    </member>
    <member name="M:EPiServer.ValidateRequestAccessEventArgs.#ctor(System.Web.HttpRequest)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ValidateRequestAccessEventArgs" /> class.
            </summary>
      <param name="request">The request to validate</param>
      <remarks>
            Check the Cancel property before doing anything. Set it if the request should be cancelled
            with 'Access Denied'.
            </remarks>
    </member>
    <member name="P:EPiServer.ValidateRequestAccessEventArgs.Request">
      <summary>
            Gets the request. Although this may normally be fetched from HttpContext, it is passed
            as part of the EventArgs to enable other usage patterns for the event.
            </summary>
      <value>The Request object to validate</value>
    </member>
    <member name="P:EPiServer.ValidateRequestAccessEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.ValidateRequestAccessEventArgs" /> indicates that the
            request should be cancelled with an "Access Denied".
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:EPiServer.SpecializedProperties.AppSettingsOptionsLoader">
      <summary>
             Loads the options specified in web.config for properties of type 
             <see cref="T:EPiServer.SpecializedProperties.PropertyAppSettings" /> and <see cref="T:EPiServer.SpecializedProperties.PropertyAppSettingsMultiple" />.
             </summary>
      <example>
             The settings should be defined like this in web.config:
             <code source="../CodeSamples/EPiServerNET/WebControls/PropertySamples.aspx" region="PropAppSettings" /></example>
    </member>
    <member name="M:EPiServer.SpecializedProperties.AppSettingsOptionsLoader.GetCashedOptionList(System.String)">
      <summary>
             Gets the options for the specified propertyName from the appSettings section in web.config.
             </summary>
      <returns>A string with the possible options for this property.</returns>
      <example>
             The settings should be defined like this in web.config:
             <code source="../CodeSamples/EPiServerNET/WebControls/PropertySamples.aspx" region="PropAppSettings" /></example>
    </member>
    <member name="M:EPiServer.SpecializedProperties.AppSettingsOptionsLoader.TransformOption(System.String,System.String)">
      <summary>
            Transforms an option to a key value pair by splitting on the ';' character.
            </summary>
      <param name="optionString">The option that will be split.</param>
      <param name="nameOfProperty">The name of property that the value belongs to.</param>
      <returns>A key value pair where the first part is the key and the second the value.</returns>
      <remarks>
            The value for <paramref name="optionString" /> should look similar to to this: "text1;value1"
            </remarks>
    </member>
    <member name="P:EPiServer.SpecializedProperties.AppSettingsOptionsLoader.ApplicationPath">
      <summary>
            Gets the application path.
            </summary>
      <remarks>
            It gets the path from HttpContext.Current.Request.ApplicationPath.
            </remarks>
    </member>
    <member name="T:EPiServer.SpecializedProperties.LinkItemExtensions">
      <summary>
            Class that is used to represent and work with a html link.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemExtensions.GetMappedHref(EPiServer.SpecializedProperties.LinkItem,System.Boolean)">
      <summary>
            Tries to get a mapped representation of the "Href" property; otherwise returns the "Href".
            </summary>
      <returns>A mapped representation of the link.</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemExtensions.ToMappedLink(EPiServer.SpecializedProperties.LinkItem,System.Boolean)">
      <summary>
            Creates an external representation of the link.
            </summary>
      <returns>An external representation of the link.</returns>
    </member>
    <member name="M:EPiServer.SpecializedProperties.LinkItemExtensions.Language(EPiServer.SpecializedProperties.LinkItem)">
      <summary>
            Gets the language from the link item.
            </summary>
      <remarks>
            In case no language is specified <see cref="T:EPiServer.Globalization.LanguageResolver" /> is returned.
            </remarks>
      <value>The language.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.SpecializedProperties.PropertyXhtmlStringExtensions">
      <summary>
            A property representing a static or dynamic xhtml string value. This property has support to handle dynamic fragments like dynamic content, personalized content and permanent links.
            </summary>
    </member>
    <member name="M:EPiServer.SpecializedProperties.PropertyXhtmlStringExtensions.ParseToXhtmlString(EPiServer.SpecializedProperties.PropertyXhtmlString,System.String)">
      <summary>
            Parse a string to Xhtml. 
            This function is used internally by the class to convert values to Xhtml. 
            If you write your own class and inherit this class, you can modify the parser logic by 
            overriding this function.
            </summary>
      <returns>A string with the value converted to Xhtml.</returns>
    </member>
    <member name="T:EPiServer.TemplatePage">
      <summary>
            Base class for EPiServer page templates that enables the quick navigator to get to the EPiServer UI.
            </summary>
    </member>
    <member name="M:EPiServer.TemplatePage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.TemplatePage" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.TemplatePage.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.TemplatePage" /> class.
            </summary>
      <param name="options">The page options to enable.</param>
      <remarks>
            The options parameter is a bitmap constructed from the OptionFlag of Page plugin classes from
            the EPiServer.Web.PageExtensions namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.TemplatePage.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.TemplatePage" /> class.
            </summary>
      <param name="enable">The page options to enable.</param>
      <param name="disable">The page options to disable.</param>
    </member>
    <member name="T:EPiServer.TemplatePage`1">
      <summary>
            Base class for EPiServer page templates that enables the quick navigator to get to the EPiServer UI.
            </summary>
      <example>The following example demonstrates how you would make a template page that uses a strongly typed model.
            <code source="../CodeSamples/EPiServer/TemplatePageSamples.cs" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.TemplatePage`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.TemplatePage" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.TemplatePage`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.TemplatePage" /> class.
            </summary>
      <param name="options">The page options to enable.</param>
      <remarks>
            The options parameter is a bitmap constructed from the OptionFlag of Page plugin classes from
            the EPiServer.Web.PageExtensions namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.TemplatePage`1.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.TemplatePage" /> class.
            </summary>
      <param name="enable">The page options to enable.</param>
      <param name="disable">The page options to disable.</param>
      <remarks>
            The disable bitmap will override enabled options in case of conflicting options.
            </remarks>
    </member>
    <member name="T:EPiServer.UriSupport">
      <summary>
            Contains various support functionality for dealing with URIs.
            </summary>
    </member>
    <member name="F:EPiServer.UriSupport.HttpLocalhostUri">
      <summary>
            The HTTP URI to the local machine.
            </summary>
    </member>
    <member name="P:EPiServer.UriSupport.SiteDefinitionResolver">
      <summary>
            SiteDefinition Resolver
            </summary>
    </member>
    <member name="M:EPiServer.UriSupport.Clear">
      <summary>
            Resets cached values.
            </summary>
      <remarks>
            For performance reasons some configuration values are cached in the UriSupport class 
            (UIUrl and UtilUrl). If the corresponding configuration values 
            are updated without an application restart you should call this method to make sure that
            the new values are used.
            <para>
            Note: During normal circumstances you should never need to call this method.
            </para></remarks>
    </member>
    <member name="P:EPiServer.UriSupport.SiteUrl">
      <summary>
            Gets the site URL.
            </summary>
      <value>The site URL.</value>
    </member>
    <member name="P:EPiServer.UriSupport.UIUrl">
      <summary>
            Gets the UI URL.
            </summary>
      <value>The UI URL.</value>
    </member>
    <member name="P:EPiServer.UriSupport.UtilUrl">
      <summary>
            Gets the util URL.
            </summary>
      <value>The util URL.</value>
    </member>
    <member name="P:EPiServer.UriSupport.InternalUIUrl">
      <summary>
            Gets the URL to the UI folder.
            </summary>
      <value>The internal UI URL.</value>
      <remarks>
            Use this cached representation of the 'EPiServer.Configuration.Settings.UIUrl' since accessing
            the configuration settings is very slow, and here you get the benefit of the <see cref="T:EPiServer.Url" /> class
            as well.
            </remarks>
    </member>
    <member name="P:EPiServer.UriSupport.InternalUtilUrl">
      <summary>
            Gets the URL to the Util folder.
            </summary>
      <value>The internal util URL.</value>
      <remarks>
            Use this cached representation of the 'EPiServer.Configuration.Settings.UtilUrl' since accessing
            the configuration settings is very slow, and here you get the benefit of the <see cref="T:EPiServer.Url" /> class
            as well.
            </remarks>
    </member>
    <member name="M:EPiServer.UriSupport.CreateAbsoluteUri(EPiServer.Url)">
      <summary>
            Creates an absolute URI from a Url instance.
            </summary>
      <param name="url">The URL.</param>
      <returns>An absolute <see cref="T:System.Uri" /> for the Url.</returns>
    </member>
    <member name="M:EPiServer.UriSupport.IsStringWellFormedUri(System.String)">
      <summary>
            Uses <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" /> but treat relative links as http based links.
            </summary>
      <param name="uriString">The string to check for Uri complience</param>
      <returns>true if string is considered a well formed Uri else false</returns>
    </member>
    <member name="M:EPiServer.UriSupport.IsSchemeSpecified(System.String)">
      <summary>
            Checks if the provided string represents an absolute URI (begins with scheme)
            </summary>
      <param name="uri">String representing the URI</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.UriSupport.ResolveUrlFromUIBySettings(System.String)">
      <summary>
            Resolves the path relative the UI directory.
            </summary>
      <param name="path">The path.</param>
      <returns>A root-relative path</returns>
    </member>
    <member name="M:EPiServer.UriSupport.ResolveUrlFromUIAsRelativeOrAbsolute(System.String)">
      <summary>
            Resolves the URL from UI as relative or absolute.
            </summary>
      <param name="path">The path.</param>
      <returns>
            A string with the path resolved either as an absolute URL (with scheme, host etc) if the UIUrl is an absolute URL,
            or as a rooted, relative path (starting with /) if the UIUrl is not an absolute URL.
            </returns>
    </member>
    <member name="M:EPiServer.UriSupport.AbsoluteUrlFromUIBySettings(System.String)">
      <summary>
            Get the absolute URL from UI by settings, including scheme, host and port
            </summary>
      <param name="path">The path, will be resolved from UI if required.</param>
      <returns>A fully qualified URI starting with scheme, based on Web.Config settings</returns>
    </member>
    <member name="M:EPiServer.UriSupport.ResolveUrlFromUtilBySettings(System.String)">
      <summary>
            Resolves the path relative the Util directory.
            </summary>
      <param name="path">The path.</param>
      <returns>A root-relative path</returns>
    </member>
    <member name="M:EPiServer.UriSupport.AbsoluteUrlFromUtilBySettings(System.String)">
      <summary>
            Get the absolute URL from UI by settings, including scheme, host and port
            </summary>
      <param name="path">The path, will be resolved from Util if required.</param>
      <returns>A fully qualified URI starting with scheme, based on Web.Config settings</returns>
    </member>
    <member name="M:EPiServer.UriSupport.ResolveUrlBySettings(System.String)">
      <summary>
            Resolves the application relative path, using configuration settings.
            </summary>
      <param name="path">The path.</param>
      <returns>A root-relative path</returns>
      <remarks>Handles both relative and absolute URI's.</remarks>
    </member>
    <member name="M:EPiServer.UriSupport.AbsoluteUrlBySettings(System.String)">
      <summary>
            Get the absolute URL for the site by settings, including scheme, host and port
            </summary>
      <param name="path">The path, will be resolved if required.</param>
      <returns>A fully qualified URI starting with scheme, based on Web.Config settings</returns>
    </member>
    <member name="M:EPiServer.UriSupport.AbsolutePathForSite(System.String,EPiServer.Web.SiteDefinition)">
      <summary>
            Gets an absolute virtual path for the site given by <paramref name="siteDef" /> from the passed in virtual path.
            </summary>
      <remarks>
            If <paramref name="siteDef" /> then <see cref="P:SiteDefinition.Current" /> is used.
            </remarks>
      <param name="virtualPath">The virtual path.</param>
      <param name="siteDef">The SiteDefinition.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.UriSupport.IsSiteUrlByRequestOrSettings(System.Uri)">
      <summary>
            Determines whether an URL is local by comparing with current request or settings
            </summary>
      <param name="url">The URL.</param>
      <returns>
        <c>true</c> if the specified URL is URL local by request or settings; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.UriSupport.IsSiteUrlByRequestOrSettings(System.String)">
      <summary>
            Determines whether an URL is local by comparing with current request or settings
            </summary>
      <param name="url">The URL.</param>
      <returns>
        <c>true</c> if the specified URL is URL local by request or settings; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.UriSupport.GetSiteDefinition(EPiServer.UrlBuilder)">
      <summary>
            Determines whether the specified URL refers to any known configured enterprise sites, and returns
            the appropriate SiteDefinition if so.
            </summary>
      <param name="url">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.UriSupport.Combine(System.String,System.String)">
      <summary>
            Combine two HTTP-scheme URLs or paths. Use for simple and robust concatentation of slash-separated paths,
            even if part of a full http: URL.
            </summary>
      <param name="s1">First part, may include scheme, host etc</param>
      <param name="s2">Second part, may include traling query string, fragment etc</param>
      <returns>The correctly combined paths regardless of if s1 ends or not, or s2 starts or not, with "/"</returns>
    </member>
    <member name="M:EPiServer.UriSupport.Combine(System.Uri,System.Uri)">
      <summary>
            Combines the specified site root with a URL that can be absolute or application relative.
            </summary>
      <param name="siteRoot">The site root.</param>
      <param name="absoluteOrSiteRootRelative">The absolute or site root relative url.</param>
      <returns>The combined Uri</returns>
    </member>
    <member name="M:EPiServer.UriSupport.BuildQueryString(System.Collections.Specialized.NameValueCollection,System.Text.Encoding)">
      <summary>
            Builds a query string from a collection, no leading '?'
            </summary>
      <param name="nvc">The collection containing the query data.</param>
      <param name="encoding">The encoding to use.</param>
      <returns>The query string with URL encoding, or an empty string (not null)</returns>
    </member>
    <member name="M:EPiServer.UriSupport.BuildQueryString(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Make a query string from a collection, no leading '?'
            </summary>
      <param name="nvc">The collection containing the query data.</param>
      <returns>The query string with URL encoding, or an empty string (not null)</returns>
    </member>
    <member name="M:EPiServer.UriSupport.AddValuesToCollection(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Adds values to a NameValueCollection from another NameValueCollection.
            </summary>
      <param name="addTo">The collection where the values will be added</param>
      <param name="addFrom">The collection that contains the values that will be added</param>
    </member>
    <member name="M:EPiServer.UriSupport.AddValuesToCollection(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
      <summary>
            Adds values to a NameValueCollection from another NameValueCollection.
            </summary>
      <param name="addTo">The collection where the values will be added</param>
      <param name="addFrom">The collection that contains the values that will be added</param>
      <param name="includeKeys">List with the only keys that should be added. null = all keys in the addTo collection will be added</param>
      <param name="excludeKeys">List with the keys that not should be added. null = all keys in the addTo collection includeKeys will be added</param>
      <remarks>
            If includeKeys is null and lstDoNotAddKeys is null, all keys will be added
            If excludeKeys has keys and lstDoNotAddKeys has keys, all keys in includeKeys that is not contained in excludeKeys will be added
            </remarks>
    </member>
    <member name="M:EPiServer.UriSupport.AddValues(System.Collections.Specialized.NameValueCollection,System.String,System.String[])">
      <summary>
            Adds values to the NameValueCollection.
            </summary>
      <param name="addTo">The collection where the values will be added</param>
      <param name="key">The key where the values will be stored</param>
      <param name="keyValues">The values</param>
    </member>
    <member name="M:EPiServer.UriSupport.BuildQueryStringQ(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Make a query string from a collection, with leading '?'
            </summary>
      <returns>The query string with URL encoding and leading '?', or an empty string (not null)</returns>
    </member>
    <member name="M:EPiServer.UriSupport.RemoveQueryStringDelimeter(System.String)">
      <summary>
            Since the Framework can't decide on if to include the delimiter (?) or not,
            this little helper will remove it when necessary.
            </summary>
      <param name="query">null, empty, or string with or without delimiter '?'</param>
      <returns>null, empty or string without delimiter '?'</returns>
    </member>
    <member name="M:EPiServer.UriSupport.AppendQuerystring(System.Uri,System.Uri)">
      <summary>
            Append the query strings from two URIs.
            </summary>
      <param name="firstUri">The first URI.</param>
      <param name="secondUri">The second URI.</param>
      <returns>An appended query string without leading '?', but with appropriate URL-encoding</returns>
    </member>
    <member name="M:EPiServer.UriSupport.BuildUrlWithPageReference(System.String,EPiServer.Core.ContentReference)">
      <summary>
            Helper method to construct a URL with a content reference parameter
            </summary>
      <param name="url">The original URL</param>
      <param name="contentLink">Content that should be referenced by the URL</param>
      <returns>A new URL</returns>
      <remarks>
            This method is primarily intended to be used with a URL read from the "<b>PageURL</b>" property of a <b>PageData</b>
            class. In some special cases you may need to retarget the URL to another page or another version of
            the same page.
            </remarks>
    </member>
    <member name="M:EPiServer.UriSupport.AddQueryString(System.String,System.String,System.String)">
      <summary>
            Add query string parameter to given url
            </summary>
      <param name="url">The original url (may include query string parameters)</param>
      <param name="name">Name of the query string parameter (for example "status")</param>
      <param name="val">The value of the query string parameter</param>
      <returns>The new url with the query string added.</returns>
      <remarks>
            This method will replace the value of an existing query string with the same name.
            </remarks>
    </member>
    <member name="M:EPiServer.UriSupport.AddLanguageSelection(System.String,System.String)">
      <summary>
            Adds an epslanguage parameter to the query string of a URL.
            </summary>
      <param name="url">The URL to add the parameter to.</param>
      <param name="languageCode">The langauage code.</param>
      <returns>The resulting URL as a string.</returns>
    </member>
    <member name="M:EPiServer.UriSupport.EscapeUriSegments(System.String)">
      <summary>
            Converts all characters, except RFC 2396 reserved except '?' and unreserved characters, to their hexadecimal representation.
            This is equivalent to escaping all but RFC 2396 pchar characters in an abs_path. Use this method to escape paths in URI's.
            All Unicode characters are converted to UTF-8 format before being escaped. There must be no escaped characters in the string.
            </summary>
      <param name="s">The string to escape</param>
      <returns>The encoded representation</returns>
      <remarks>
            This method differs from Uri.EscapeUriString in that it also encodes '#', which although documented as doing,
            Uri.EscapeUriString does not. This is either a code-defect or a documentation issue in .NET framework 2.0.
            It also differs in that it encodes '?' and '&amp;', wich Uri.EscapeUriString does not claim to do, nor does.
            Note that this method does not allow the use of '/' in the separate segments.
            Use System.Uri.UnescapeDataString to get the original string back.
            </remarks>
    </member>
    <member name="M:EPiServer.UriSupport.Split(System.String)">
      <summary>
            Splits the specified escaped URL into three parts:
            [0] - The [scheme][host][path] portion -  before any fragment or query
            [1] - The query, if any, including the '?'
            [2] - The fragment, if any, including the '#'
            </summary>
      <param name="url">The URL.</param>
      <returns>A string[3] array with the parts, or empty strings if no such part</returns>
    </member>
    <member name="M:EPiServer.UriSupport.SplitNoDelim(System.String)">
      <summary>
            Splits the specified escaped URL into three parts:
            [0] - The [scheme][host][path] portion -  before any fragment or query
            [1] - The query, if any, excluding the '?'
            [2] - The fragment, if any, excluding the '#'
            </summary>
      <param name="url">The URL.</param>
      <returns>A string[3] array with the parts, or empty strings if no such part</returns>
    </member>
    <member name="M:EPiServer.UriSupport.IsDataUri(System.String)">
      <summary>
            Determines whether the provided URI string is a data URI, e.g. data:image;base64,ZWF0IG15IHNob3J0cyE=.
            </summary>
      <param name="uri">The URI string to test.</param>
      <returns>True if the string follows a data URI pattern; otherwise false.</returns>
    </member>
    <member name="T:EPiServer.UserControlBase">
      <summary>
            A utility class to simplify the code in user controls.
            </summary>
      <remarks>
        <para>
          <b>UserControlBase</b> is to EPiServer Web user controls what <b>PageBase</b> is to EPiServer 
            page templates - it provides access to the EPiServer infrastructure. Letting a Web 
            user control inherit EPiServer.UserControlBase instead of the default UserControl 
            turns the standard User Control class into a fully-fledged EPiServer Universe member, 
            with access to EPiServer Web pages and current configuration settings, among other things.
            </para>
        <para>
            By inheriting from the <b>UserControlBase</b> class you do not have to cast the <b>Page</b> property 
            of the <b>UserControl</b> class to a <b>PageBase</b> class. Instead use the <b>CurrentPage</b> and the other 
            members like you would directly from <b>PageBase</b> or <b>TemplatePage</b>.
            </para>
        <para>
            The purpose is to give access to frequently used methods and properties of the PageBase class
            without having to cast the Page property.
            </para>
        <note>
            This class does not implement IPageSource, even though it mimics the interface by having all the
            IPageSource methods. The reason for this is that if UserControlBase really implemented IPageSource, it would 
            cause controls such as Property to become contained and non-editable via dope.
            </note>
      </remarks>
      <example>
            The following example demonstrates how to inherit from the <b>UserControlBase</b> class.
            <code source="../CodeSamples/EPiServer/UserControlBaseSamples.cs" region="Inherit" /><code source="../CodeSamples/EPiServer/UserControlBaseSamples.cs" region="Part2Inherit" /></example>
    </member>
    <member name="M:EPiServer.UserControlBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.UserControlBase" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.UserControlBase.PageBase">
      <summary>
            Return the executing Page cast to a <b>PageBase</b> class.
            </summary>
      <remarks>
            Only <b>PageBase</b> differs between <see cref="T:EPiServer.UserControlBase" /> 
            and <see cref="T:EPiServer.PageBase" />. All the other properties and methods have 
            the same purpose in both <b>PageBase</b> and <b>UserControlBase</b>.
            </remarks>
    </member>
    <member name="P:EPiServer.UserControlBase.RenderSettings">
      <summary>
            Dictionary of key values that can be used to customize the rendering of the property.
            </summary>
      <value>
            The render settings.
            </value>
    </member>
    <member name="P:EPiServer.UserControlBase.LocalizationService">
      <summary>
            The localizationService used by the various Translate methods on <see cref="T:EPiServer.UserControlBase" />.
            </summary>
    </member>
    <member name="P:EPiServer.UserControlBase.Locate">
      <summary>
            Gets the object used to resolve services part of the public API.
            </summary>
    </member>
    <member name="M:EPiServer.UserControlBase.Translate(System.String)">
      <summary>
            Translate the key into a language specific text.
            </summary>
      <param name="key">A simplified XPath expression. See Remarks below.</param>
      <returns>A string with the translated text.</returns>
      <remarks>
        <see cref="M:EPiServer.PageBase.Translate(System.String)" />
      </remarks>
    </member>
    <member name="M:EPiServer.UserControlBase.TranslateForScript(System.String)">
      <summary>
            Translate the key into a language-specific and script-safe text.
            </summary>
      <param name="key">A simplified XPath expression. See Remarks below.</param>
      <returns>A string with the translated text.</returns>
      <remarks>
        <see cref="M:EPiServer.PageBase.TranslateForScript(System.String)" />
      </remarks>
    </member>
    <member name="M:EPiServer.UserControlBase.TranslateFallback(System.String,System.String)">
      <summary>
            Translate the key into a language specific text. Will return supplied fallback string if no match is found.
            </summary>
      <param name="key">A simplified XPath expression. See Remarks below.</param>
      <param name="fallback">The string to return if no match was found for key.</param>
      <returns>A string with the translated text.</returns>
      <remarks>
        <see cref="M:EPiServer.PageBase.Translate(System.String)" />
      </remarks>
    </member>
    <member name="M:EPiServer.UserControlBase.IsValue(System.String)">
      <summary>
            Determine if the named property exists and holds a non-null value.
            </summary>
      <param name="propertyName">The name of the page property to check.</param>
      <returns>
        <b>True</b> if the property exists with a valid value.</returns>
    </member>
    <member name="M:EPiServer.UserControlBase.RegisterClientScriptFile(System.String)">
      <summary>
            Helper method to register a client script file. If the method is called multiple times using
            the same key, only a single instance of the file is registered.
            </summary>
      <param name="rootRelativePath">The script file that should be referenced.</param>
      <remarks>The relativePath will be used as the unique script key.</remarks>
    </member>
    <member name="M:EPiServer.UserControlBase.LoadDisplayTemplate(EPiServer.Core.BlockData)">
      <summary>
            Resolves and instantiates the web or user control for the BlockData.
            </summary>
      <param name="blockData">The block data to populate the control with.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.UserControlBase.CurrentPage">
      <summary>
            Get the page data for the current page.
            </summary>
      <remarks>
        <see cref="P:EPiServer.PageBase.CurrentPage" />
      </remarks>
    </member>
    <member name="M:EPiServer.UserControlBase.GetPage(EPiServer.Core.PageReference)">
      <summary>
            Returns the corresponding <see cref="T:EPiServer.Core.PageData" /> object to the supplied 
            <see cref="T:EPiServer.Core.PageReference" /> reference (from <see cref="T:EPiServer.Core.IPageSource" />).
            </summary>
      <param name="pageLink">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.UserControlBase.GetChildren(EPiServer.Core.PageReference)">
      <summary>
            Returns a <see cref="T:EPiServer.Core.PageDataCollection" /> of child Pages to specified <see cref="T:EPiServer.Core.PageReference" /> (from <see cref="T:EPiServer.Core.IPageSource" />).
            </summary>
      <param name="pageLink">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.UserControlBase`1">
      <summary>
            User control class for supporting strongly typed PageData objects with an arbitrary type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The strongly typed PageData type.</typeparam>
    </member>
    <member name="P:EPiServer.UserControlBase`1.CurrentPage">
      <summary>
            Gets or sets the current page of T.
            </summary>
      <value>
            The current page.
            </value>
      <remarks>
            Replaces the CurrentPage from base with a strongly typed version.
            </remarks>
    </member>
    <member name="T:EPiServer.Util.ThumbnailPropertiesClearJob">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A job that clears thumbnail properties.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Util.ThumbnailPropertiesClearJob.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Util.ThumbnailPropertiesClearJob" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Util.ThumbnailPropertiesClearJob.#ctor(EPiServer.Core.Internal.ThumbnailManager)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Util.ThumbnailPropertiesClearJob" /> class.
            </summary>
      <param name="thumbnailManager">Thumbnail manager, which will be used to get all media, and clean up thumbnail.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Util.ThumbnailPropertiesClearJob.Execute">
      <summary>
            Start job
            </summary>
    </member>
    <member name="T:EPiServer.Util.PersistableDictionary">
      <exclude />
    </member>
    <member name="M:EPiServer.Util.PersistableDictionary.#ctor">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.Util.PersistableDictionary.Serialize">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.Util.PersistableDictionary.Deserialize(System.String)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="T:EPiServer.Util.PlugIns.TaskBase">
      <summary>
            Base class for tasks in the user interfaces
            </summary>
    </member>
    <member name="M:EPiServer.Util.PlugIns.TaskBase.AccessDenied">
      <summary>
            Helper method to send an access denied message
            </summary>
    </member>
    <member name="P:EPiServer.Util.PlugIns.TaskBase.CurrentTask">
      <summary>
            The current task
            </summary>
    </member>
    <member name="M:EPiServer.Util.PlugIns.TaskBase.NewTask">
      <summary>
            Create a new task
            </summary>
      <returns>An instance of the new task</returns>
    </member>
    <member name="P:EPiServer.Util.PlugIns.TaskBase.IsOwner">
      <summary>
            Check if the current user is the owner of the task
            </summary>
    </member>
    <member name="P:EPiServer.Util.PlugIns.TaskBase.IsAssignedTo">
      <summary>
            Check if the current user is assigned to the task
            </summary>
    </member>
    <member name="M:EPiServer.Util.PlugIns.TaskBase.OnInit(System.EventArgs)">
      <summary>
            ASP.NET initialization of this control
            </summary>
      <param name="e">The event arguments</param>
    </member>
    <member name="M:EPiServer.Util.PlugIns.TaskBase.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:EPiServer.Util.SimpleActivityLog">
      <summary>
            Simple logger class that exports and imports its data
            as xml. Useful for low intensity logging of user activity
            that needs to be stored as a string.
            </summary>
    </member>
    <member name="M:EPiServer.Util.SimpleActivityLog.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Util.SimpleActivityLog" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Util.SimpleActivityLog.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Util.SimpleActivityLog" /> class.
            </summary>
      <param name="xml">XML that will be parsed into an activity log</param>
    </member>
    <member name="M:EPiServer.Util.SimpleActivityLog.Add(System.Int32,System.String)">
      <summary>
            Add a log made by a currently logged in user
            </summary>
      <param name="type">Type of comment, may be any custom value</param>
      <param name="text">The text or information entered by the user</param>
    </member>
    <member name="M:EPiServer.Util.SimpleActivityLog.Add(System.String,System.Int32,System.String)">
      <summary>
            Add a log made by custom origin
            </summary>
      <param name="name">The display name of the origin of this action</param>
      <param name="type">Type of comment, may be any custom value</param>
      <param name="text">The text or information entered by the user</param>
    </member>
    <member name="M:EPiServer.Util.SimpleActivityLog.Merge(EPiServer.Util.SimpleActivityLog)">
      <summary>
            Merge values for another log
            </summary>
      <param name="baseLog">The rows to merge</param>
    </member>
    <member name="P:EPiServer.Util.SimpleActivityLog.DataSet">
      <summary>
            Internal data as a DataSet
            </summary>
    </member>
    <member name="P:EPiServer.Util.SimpleActivityLog.SortedView">
      <summary>
            Internal data as a DataSet
            </summary>
    </member>
    <member name="P:EPiServer.Util.SimpleActivityLog.Xml">
      <summary>
            Internal data as Xml
            </summary>
    </member>
    <member name="T:EPiServer.Web.BlobHttpHandler">
      <summary>
            A HTTP Handler that deliver binary large objects from <see cref="T:EPiServer.Framework.Blobs.Blob" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.BlobHttpHandler.GetBlob(System.Web.HttpContextBase)">
      <summary>
            Gets the routed BLOB from the request.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.BlockControlBase`1">
      <summary>
            Base class for usercontrols that renders <see cref="T:EPiServer.Core.BlockData" />.
            </summary>
      <typeparam name="TBlock">The type of the block.</typeparam>
    </member>
    <member name="P:EPiServer.Web.BlockControlBase`1.CurrentBlock">
      <summary>
            Gets or sets the block that the usercontrol is associated with.
            </summary>
      <remarks>
            This property is equivalent as using <see cref="P:EPiServer.Web.ContentControlBase`2.CurrentData" /></remarks>
    </member>
    <member name="T:EPiServer.Web.CachedUrlHandler">
      <summary>
            Handler for cached URL rewrite requests.
            </summary>
      <remarks>
        <para>
            A class deriving from CachedUrlHandler can implement the IHandleUrlForRewrite interface. Usually you will have some overlap
            in functionality between the RewriteFromCachedData method and the TryHandleUrl method on IHandleUrlForRewrite
            and thus implemeting that interface on the handler class usually makes sense.
            </para>
        <para>
            NOTE! If you do implement the interface on a CachedUrlHandler instance you should conceptually (and usually in practice)
            treat the IHandleUrlForRewrite and CachedUrlHandler as distinct and disjunct objects.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.CachedUrlHandler.RewriteFromCachedData(EPiServer.Web.UrlRewriteContext,System.Object@)">
      <summary>
            Rewrites the URL from cached data.
            </summary>
      <param name="context">The context.</param>
      <param name="internalObject">The internal object.</param>
      <returns>True if the URL was rewritten, false otherwise.</returns>
      <remarks>
            You may optionally return an internal representation of the page in internalObject. This will usually
            be a PageReference, but you should always check the type and not assume that it is a PageReference
            since internalObject may contain anything depending on the actual CachedUrlHandler implementation.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.ContentControlBase`2">
      <summary>
            Base class for usercontrols that renders <see cref="T:EPiServer.Core.ContentData" />.
            </summary>
      <typeparam name="TPage">The type of the page.</typeparam>
      <typeparam name="TContentData">The type of the <see cref="T:EPiServer.Core.IContentData" /> type.</typeparam>
      <remarks>
        <para>
                If the partial content control is using output cache and is loaded through
                the Property control, the CurrentData property is not guaranteed 
                to be initialized until after the <see cref="E:Page.Init" /> event.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.ContentControlBase`2.CurrentData">
      <summary>
            Gets or sets the content data that the usercontrol is associated with.
            </summary>
    </member>
    <member name="P:EPiServer.Web.ContentControlBase`2.EPiServer#Web#IContentDataControl#CurrentData">
      <summary>
            Gets or sets the current data.
            </summary>
      <value>The current data.</value>
    </member>
    <member name="T:EPiServer.Web.ContentControlBase`1">
      <summary>
            Base class for usercontrols that renders <see cref="T:EPiServer.Core.IContentData" />.
            </summary>
      <typeparam name="TContentData">The type of the content data.</typeparam>
    </member>
    <member name="T:EPiServer.Web.ContentPageBase`1">
      <summary>
            Base class for WebForms that renders routed <see cref="T:EPiServer.Core.IContent" /> instances.
            </summary>
      <typeparam name="TContent">The type of the content.</typeparam>
    </member>
    <member name="M:EPiServer.Web.ContentPageBase`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.ContentPageBase`1" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.ContentPageBase`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.ContentPageBase`1" /> class.
            </summary>
      <param name="options">The options.</param>
      <remarks>
            The options parameter is a bitmap constructed from the OptionFlag of Page plugin classes from
            the EPiServer.Web.PageExtensions namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.ContentPageBase`1.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.ContentPageBase`1" /> class.
            </summary>
      <param name="enable">The enable.</param>
      <param name="disable">The disable.</param>
      <remarks>
            The disable bitmap will override enabled options in case of conflicting options.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.ContentPageBase`2">
      <summary>
            Base class for WebForms that renders routed <see cref="T:EPiServer.Core.IContent" /> instances.
            </summary>
      <typeparam name="TPage">The type of the page.</typeparam>
      <typeparam name="TContent">The type of the content.</typeparam>
    </member>
    <member name="M:EPiServer.Web.ContentPageBase`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.ContentPageBase`2" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.ContentPageBase`2.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.ContentPageBase`2" /> class.
            </summary>
      <param name="options">The page options to enable.</param>
      <remarks>
            The options parameter is a bitmap constructed from the OptionFlag of Page plugin classes from
            the EPiServer.Web.PageExtensions namespace.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.ContentPageBase`2.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.ContentPageBase`2" /> class.
            </summary>
      <param name="enable">The page options to enable.</param>
      <param name="disable">The page options to disable.</param>
      <remarks>
            The disable bitmap will override enabled options in case of conflicting options.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.ContentPageBase`2.EPiServer#Core#IContentSource#CurrentContent">
      <summary>
            Gets the content that was routed to for current request.
            </summary>
      <remarks>
            The content can either have been routed to directly or through an partial router.
            </remarks>
      <value>
            The content of the current.
            </value>
    </member>
    <member name="P:EPiServer.Web.ContentPageBase`2.CurrentContent">
      <summary>
            Gets the content that was routed to for current request.
            </summary>
      <remarks>
            The content can either have been routed to directly or through an partial router.
            </remarks>
      <value>
            The content of the current.
            </value>
    </member>
    <member name="T:EPiServer.Web.ContextModeScope">
      <summary>
            A helper object that can be used when setting <see cref="T:EPiServer.Web.ContextMode" /> for current <see cref="T:System.Web.Routing.RequestContext" />. 
            </summary>
      <remarks>
            This class implements <see cref="T:System.IDisposable" /> and should be used inside a using statement. When disposed
            it will set <see cref="T:EPiServer.Web.ContextMode" /> back to its previous value.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.ContextModeScope.#ctor(System.Web.Routing.RequestContext,EPiServer.Web.ContextMode)">
      <summary>
            Constructor that creates a new instance of <see cref="T:EPiServer.Web.ContextModeScope" /> which will 
            set <see cref="T:EPiServer.Web.ContextMode" /> to specified value for the <paramref name="requestContext" /> during
            the scope of this instance.
            </summary>
      <param name="requestContext">The <see cref="T:System.Web.Routing.RequestContext" /> for which <see cref="T:EPiServer.Web.ContextMode" /> will be set.</param>
      <param name="contextMode">The mode to set.</param>
    </member>
    <member name="M:EPiServer.Web.ContextModeScope.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:EPiServer.Web.ContextModeScope.Dispose(System.Boolean)">
      <summary>
            Resets the <see cref="T:EPiServer.Web.ContextMode" /> to previous value when disposed.
            </summary>
      <param name="disposing">
        <c>true</c> to reset <see cref="T:EPiServer.Web.ContextMode" /> to previous state.</param>
    </member>
    <member name="T:EPiServer.Web.ControlExtension">
      <summary>
            Extension methods to the Control class, needed by the auto save function.
            </summary>
    </member>
    <member name="M:EPiServer.Web.ControlExtension.FindControl``1(System.Web.UI.Control,System.String,System.Int32,System.Int32@)">
      <summary>
            Finds control number n of the requested type that has a specific id.
            Try to locate control of type T with ID==id.
            Recurses into each childcontrol until first match is found.
            </summary>
      <typeparam name="T">A type of control</typeparam>
      <param name="control">The object this method extends.</param>
      <param name="id">The id of the control to find.</param>
      <param name="index">The index of that control.
            Used to identify which control to return on a page that has several controls of the request type.</param>
      <param name="foundIndex">Internal counter of how many hits there has been.</param>
      <returns>A typed control</returns>
    </member>
    <member name="M:EPiServer.Web.ControlExtension.FindControl``1(System.Web.UI.Control,System.String,System.Int32)">
      <summary>
            Finds control number n of the requested type that has a specific id.
            </summary>
      <typeparam name="T">A type of control</typeparam>
      <param name="control">The object this method extends.</param>
      <param name="id">The id of the control to find.</param>
      <param name="index">The index of that control. 
            Used to identify which control to return on a page that has several controls of the request type.
            </param>
      <returns>A typed control</returns>
    </member>
    <member name="M:EPiServer.Web.ControlExtension.FindControl``1(System.Web.UI.Control,System.String)">
      <summary>
            Finds the first control of the requested type and the requested id.
            </summary>
      <typeparam name="T">A type of control</typeparam>
      <param name="control">The object this method extends.</param>
      <param name="id">The id of the control to find.</param>
      <returns>A typed control</returns>
    </member>
    <member name="M:EPiServer.Web.ControlExtension.FindControl``1(System.Web.UI.Control,System.Int32)">
      <summary>
            Finds control number n of the requested type.
            </summary>
      <typeparam name="T">A type of control</typeparam>
      <param name="control">The object this method extends.</param>
      <param name="index">The index of that control. 
            Used to identify which control to return on a page that has several controls of the request type.
            </param>
      <returns>A typed control</returns>
    </member>
    <member name="M:EPiServer.Web.ControlExtension.ApplyEditAttributes``1(System.Web.UI.Control,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Applies the attributes needed to make the content of this control editable.
            </summary>
      <typeparam name="TContentData">The type of the content data.</typeparam>
      <param name="control">The object this method extends.</param>
      <param name="propertyNameExpression">An expresion indicationg the property name. Must be a MemberExpression or a UnaryExpression.</param>
    </member>
    <member name="M:EPiServer.Web.ControlExtension.ApplyEditAttributes(System.Web.UI.Control,System.String)">
      <summary>
            Applies the attributes needed to make the content of this control editable.
            </summary>
      <param name="control">The object this method extends.</param>
      <param name="propertyName">Name of the property that this editable control should be connected to.</param>
    </member>
    <member name="M:EPiServer.Web.ControlExtension.IsEditable(EPiServer.Web.PropertyControls.PropertyDataControl)">
      <summary>
            Determines whether the specified property data control is editable.
            </summary>
      <param name="propertyDataControl">The property data control.</param>
      <returns>
        <c>true</c> if the specified property data control is editable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.ControlExtension.IsEditable(System.Web.UI.Control,EPiServer.Core.IContentData,System.String)">
      <summary>
            Determines whether the specified control is editable.
            </summary>
      <param name="control">The control.</param>
      <param name="contentData">The content.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>
        <c>true</c> if the specified control is editable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.ControlExtension.FindControl``1(System.Web.UI.Control)">
      <summary>
            Finds the first control of the requested type.
            </summary>
      <typeparam name="T">A type of control</typeparam>
      <param name="control">The object this method extends.</param>
      <returns>A typed control</returns>
    </member>
    <member name="T:EPiServer.Web.DisplayChannel">
      <summary>
            Base class for display channel implementations. A display channel can be used to
            control which render templates that should be used for a request.
            </summary>
      <example>
            The following example shows a simple channel implemented for WebForms that is active for mobile request.
            <code source="../CodeSamples/EPiServerNET/Web/DisplayChannelSample.cs" region="WebForms" lang="cs" />
            The following example shows the registration of a simple channel for MVC that is active for mobile request.
            <code source="../CodeSamples/EPiServerNET/Web/DisplayChannelSample.cs" region="MVC" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.Web.DisplayChannel.IsActive(System.Web.HttpContextBase)">
      <summary>
            Determines whether the specified channel is active given the specified context.
            </summary>
      <param name="context">The context.</param>
      <returns>
        <c>true</c> if the specified channel is active; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.Web.DisplayChannel.ChannelName">
      <summary>
            Gets the name of the channel.
            </summary>
      <remarks>
            When a <see cref="T:EPiServer.Web.DisplayChannel" /> is active then when resolving which <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> (e.g. an page or user control) 
            that should be used to render a request, models where <see cref="P:EPiServer.Web.DisplayChannel.ChannelName" /> have a matching entry in <see cref="P:EPiServer.DataAbstraction.TemplateModel.Tags" />
            will be prefered.
            </remarks>
      <value>The name of the channel.</value>
    </member>
    <member name="P:EPiServer.Web.DisplayChannel.ResolutionId">
      <summary>
            Gets the resolution.
            </summary>
      <remarks>
        <para>
            Default value is null meaning channel has no preferred resolution.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.DisplayChannel.LocalizationService">
      <summary>
            Gets or sets the localization service to use.
            </summary>
      <remarks>
            By default it will use <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current" />.
            </remarks>
      <value>The localization service.</value>
    </member>
    <member name="P:EPiServer.Web.DisplayChannel.DisplayName">
      <summary>
            Gets the name of this DisplayChannel localized to the current language.
            If no localized name exist <see cref="P:EPiServer.Web.DisplayChannel.ChannelName" /> will be returned.
            </summary>
      <remarks>
        <para>
            To localize the DisplayChannel name it should be located at the language path
            "/displaychannels/displaychannel[@name='ChannelName']/name", where ChannelName matches
            the <see cref="P:EPiServer.Web.DisplayChannel.ChannelName" /> of the DisplayChannel.<br /></para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.DisplayChannel.NameLocalizationFormat">
      <summary>
            Gets the name localization format.
            </summary>
      <remarks>
            The format that is used when localizing the <see cref="P:EPiServer.Web.DisplayChannel.DisplayName" />.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.EditContainer">
      <summary>
            Creates an wrapper element in edit mode
            </summary>
    </member>
    <member name="M:EPiServer.Web.EditContainer.#ctor(System.Web.Routing.RequestContext,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.EditContainer" /> class.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="epiPropertyKey">Key of the episerver property.</param>
      <param name="epiPropertyName">Name of the episerver property.</param>
      <param name="editElementName">Name of the edit element.</param>
      <param name="editElementCssClass">The CSS class for edit element.</param>
      <param name="useMvc">if set to <c>true</c> use MVC for partial rendering.</param>
    </member>
    <member name="M:EPiServer.Web.EditContainer.CreateStartElementForEditMode(System.Func{System.String})">
      <summary>
            Creates the start element for edit mode.
            </summary>
      <param name="firstAttibuteWriter">The first attibute writer.</param>
    </member>
    <member name="M:EPiServer.Web.EditContainer.CreateStartElementForEditMode(System.Func{System.String},System.Func{System.String})">
      <summary>
            Creates an wrapper element in context mode.
            </summary>
      <param name="firstAttibuteWriter">The first attibute writer.</param>
      <param name="secondAttibuteWriter">The second attibute writer.</param>
    </member>
    <member name="M:EPiServer.Web.EditContainer.Dispose">
      <summary>
            Triggers the end element
            </summary>
    </member>
    <member name="M:EPiServer.Web.EditContainer.Dispose(System.Boolean)">
      <summary>
            Triggers the end element when <paramref name="disposing" /> is true
            </summary>
      <param name="disposing">
        <c>true</c> to write the end element.</param>
    </member>
    <member name="M:EPiServer.Web.EditContainer.WriteStartElement(System.String)">
      <summary>
            Writes the start element.
            </summary>
      <param name="startElement">The start element.</param>
    </member>
    <member name="M:EPiServer.Web.EditContainer.WriteEndElement(System.String)">
      <summary>
            Writes the end element.
            </summary>
      <param name="endElement">The end element.</param>
    </member>
    <member name="T:EPiServer.Web.Routing.EditUrlResolver">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.EditUrlResolver.GetEditViewUrl">
      <summary>
            Gets the URL to the edit view of the current site.
            </summary>
      <returns>An absolute or relative URL</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.EditUrlResolver.GetEditViewUrl(EPiServer.Web.SiteDefinition)">
      <summary>
            Gets the URL to the edit view of the provided site.
            </summary>
      <returns>An absolute or relative URL</returns>
      <exception cref="T:System.ArgumentNullException">site</exception>
    </member>
    <member name="M:EPiServer.Web.Routing.EditUrlResolver.GetEditViewUrl(EPiServer.Web.Routing.EditUrlArguments)">
      <summary>
            Gets the URL to the edit view of the current site using the specified arguments.
            </summary>
      <returns>An absolute or relative URL</returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:EPiServer.Web.Routing.EditUrlResolver.GetEditViewUrl(EPiServer.Web.SiteDefinition,EPiServer.Web.Routing.EditUrlArguments)">
      <summary>
            Gets the URL to the edit view of the provided site using the specified arguments.
            </summary>
      <returns>An absolute or relative URL</returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:EPiServer.Web.Routing.EditUrlResolver.GetEditViewUrl(EPiServer.Core.ContentReference)">
      <summary>
            Gets the URL to the edit view for the specified content.
            </summary>
      <returns>An absolute or relative URL</returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:EPiServer.Web.Routing.EditUrlResolver.GetEditViewUrl(EPiServer.Core.ContentReference,EPiServer.Web.Routing.EditUrlArguments)">
      <summary>
            Gets the URL to the edit view for the specified content and arguments.
            </summary>
      <returns>An absolute or relative URL</returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:EPiServer.Web.Routing.EditUrlResolver.ResolveUrl(EPiServer.Web.SiteDefinition,EPiServer.Core.ContentReference,EPiServer.Web.Routing.EditUrlArguments)">
      <summary>
            Should get the URL to the edit view for the specified site, content and arguments.
            </summary>
      <param name="site">The site. A null value implies the current site.</param>
      <param name="contentLink">The content link. A null value implies that the base edit view URL should be returned.</param>
      <param name="editUrlArguments">Arguments to use for resolving the URL</param>
      <returns>An absolute or relative URL</returns>
    </member>
    <member name="T:EPiServer.Web.Routing.EditUrlArguments">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.EditUrlArguments.ForceEditHost">
      <summary>
            Gets or sets a value indicating whether to force the use of a edit host if present (but never primary site hosts)
            </summary>
      <remarks>
        <para>The primary use case for this property is linking to edit mode from templates.</para>
        <para>Note that the edit host will always be preferred if requested edit URL isn't for the current site.</para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.EditUrlArguments.ForceHost">
      <summary>
            Gets or sets a value indicating whether to force the use of a site host (prefers edit hosts but fallbacks to primary host)
            </summary>
      <remarks>
        <para>The primary use case for this property is linking from external systems, such as links in e-mails.</para>
        <para>If language is specified hosts from the specified language will used, but fallbacks to hosts not locked to languages.</para>
        <para>Note that if no site can be detected an URL without host will be returned, use an overload that takes <see cref="T:EPiServer.Web.SiteDefinition" /> to be sure a host can be resolved. </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.EditUrlArguments.Language">
      <summary>
            Gets or sets the specific language that should be requested.
            </summary>
      <remarks>This property will add language information to the URL but also try to select a language specific host if matched with ForceHost property.</remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.EditUrlArguments.ModuleName">
      <summary>
            Gets or sets the name of the module that should be used for the edit URL. The default is 'CMS'.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.EditUrlArguments.ModuleRelativePath">
      <summary>
            Gets or sets a module relative path that should be used for the edit URL.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.ClassicLinkRoute">
      <summary>
            A route that can be added to support incoming routing of classic links like 
            for example "/templates/Page.aspx?id=12&amp;epslanguage=sv"
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.ClassicLinkRoute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.ClassicLinkRoute" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.ClassicLinkRoute.#ctor(System.Web.Routing.IRouteHandler,EPiServer.Web.IPermanentLinkMapper,EPiServer.Globalization.IUpdateCurrentLanguage)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.ClassicLinkRoute" /> class.
            </summary>
      <param name="routeHandler">The object that processes requests for the route.</param>
      <param name="permanentLinkMapper">The permanent link mapper.</param>
      <param name="updateCurrentLanguage">The update current language.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.ClassicLinkRoute.#ctor(System.Web.Routing.IRouteHandler,EPiServer.Web.IPermanentLinkMapper,EPiServer.Globalization.IUpdateCurrentLanguage,EPiServer.Framework.Modules.IModuleResourceResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.ClassicLinkRoute" /> class.
            </summary>
      <param name="routeHandler">The object that processes requests for the route.</param>
      <param name="permanentLinkMapper">The permanent link mapper.</param>
      <param name="updateCurrentLanguage">The update current language.</param>
      <param name="moduleResourceResolver">The module resource resolver</param>
    </member>
    <member name="M:EPiServer.Web.Routing.ClassicLinkRoute.GetRouteData(System.Web.HttpContextBase)">
      <summary>
            Returns information about the requested route.
            </summary>
      <param name="httpContext">An object that encapsulates information about the HTTP request.</param>
      <returns>
            An object that contains the values from the route definition.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.ClassicLinkRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Web.Routing.IBasePathResolver">
      <summary>
            Resolves a virtual base path.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.IBasePathResolver.Resolve(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>
            Resolves the base path from the request context
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.IContentRoute">
      <summary>
            Signature for a <see cref="T:System.Web.Routing.RouteBase" /> implementations for <see cref="T:EPiServer.Core.IContent" /> instances
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.IContentRoute.Name">
      <summary>
            The name of the <see cref="T:System.Web.Routing.Route" /></summary>
    </member>
    <member name="M:EPiServer.Web.Routing.IContentRoute.RouteSegmentContext(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>
            Routes an <see cref="T:EPiServer.Core.IContent" /> instance from the context.
            </summary>
      <param name="segmentContext">The segment context</param>
      <returns>A routedata associated witha content instance if match else null.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.IContentRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>
            Generates an url for an <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <param name="requestContext">Current request context</param>
      <param name="values">The route values</param>
      <returns>An url for an <see cref="T:EPiServer.Core.IContent" /> instance or null if no content was associated</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.IContentRoute.MatchConstraints(EPiServer.Web.Routing.Segments.SegmentContext,System.Web.HttpContextBase)">
      <summary>
            Determines if the route matches all constraints.
            </summary>
      <param name="segmentContext">The segment context</param>
      <param name="context">The http context</param>
      <returns>true if constraint matches else false</returns>
    </member>
    <member name="P:EPiServer.Web.Routing.IContentRoute.Defaults">
      <summary>
            Default values for the route
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.IContentRouteConstraint">
      <summary>
            Can be used as constraint in <see cref="T:EPiServer.Web.Routing.IContentRoute" />. Called after a <see cref="T:EPiServer.Core.IContent" /> has been routed
            to determine if the routed instance fullfills the specified constraint.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.IContentRouteConstraint.Match(System.Web.Routing.Route,EPiServer.Web.Routing.Segments.SegmentContext,System.String)">
      <summary>
            Evaluates if the routed <see cref="T:EPiServer.Core.IContent" /> matches the implemented constraint.
            </summary>
      <param name="route">The route.</param>
      <param name="segmentContext">The segment context.</param>
      <param name="parameterName">Name of the parameter.</param>
      <returns>true if the route matches the constraint else false.</returns>
    </member>
    <member name="T:EPiServer.Web.Routing.IContentRouteEvents">
      <summary>
            Defines events for content routing
            </summary>
    </member>
    <member name="E:EPiServer.Web.Routing.IContentRouteEvents.CreatingVirtualPath">
      <summary>
            Raised when outgoing virtual path is trying to be created by a route.
            </summary>
    </member>
    <member name="E:EPiServer.Web.Routing.IContentRouteEvents.CreatedVirtualPath">
      <summary>
            Raised when outgoing virtual path has been created.
            </summary>
    </member>
    <member name="E:EPiServer.Web.Routing.IContentRouteEvents.RoutingContent">
      <summary>
            Raised when outgoing virtual path has been created.
            </summary>
    </member>
    <member name="E:EPiServer.Web.Routing.IContentRouteEvents.RoutedContent">
      <summary>
            Raised when an incoming request have been routed to a content instance.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.IContentRouteHelper">
      <summary>
            Provides information about the routed content of the current web request.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.IContentRouteHelper.LanguageID">
      <summary>
            Gets the language string for the current routed content.
            </summary>
      <remarks>The property will be set the first time it gets called, and cached for the current instance.</remarks>
      <example>
            The following code example demonstrates how to get information about the requested CMS page for the current web request.
            <code source="../CodeSamples/EPiServer/Web/Routing/PageRouteHelperExample.cs" region="PageRouteInformation" lang="cs" /></example>
    </member>
    <member name="P:EPiServer.Web.Routing.IContentRouteHelper.ContentLink">
      <summary>
            Gets the reference to the current routed <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.IContentRouteHelper.Content">
      <summary>
            Gets the current routed <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.BasePathResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.BasePathResolver.Resolve(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The implementation resolves root dir by comparing the <see cref="T:EPiServer.Web.SiteDefinition" /> for the routed content with <see cref="P:EPiServer.Web.SiteDefinition.Current" />
            if they are same the root dir vill be <see cref="P:EPiServer.Web.Hosting.GenericHostingEnvironment.ApplicationVirtualPath" />. If they differ (typically when cross linking in
            an enterprise setup) then RootDir will be resolved as SiteUrl to the site linking to.
            </summary>
      <param name="request">The request.</param>
      <param name="routeValues">The route values.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.BlobRouter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Routes to Blobs on <see cref="T:EPiServer.Core.IContent" /> instances.
            </summary>
      <remarks>
            For Blob properties with <see cref="T:EPiServer.DataAnnotations.ImageDescriptorAttribute" /> (as for example for <see cref="P:EPiServer.Core.IContentMedia.Thumbnail" /> 
            autogeneration of scaled images is performed. 
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.BlobRouter.#ctor(EPiServer.Web.IBlobResolver,EPiServer.Core.Internal.ThumbnailManager,EPiServer.IContentRepository,EPiServer.Core.IContentProviderManager,EPiServer.Data.IDatabaseMode,EPiServer.Web.Internal.IBlobAssigner)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Internal.BlobRouter" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.BlobRouter.RoutePartial(EPiServer.Core.IContent,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The partial router for Blobs on any IContent, the format should be [content URL]/BlobPropertyName.
            </summary>
      <param name="content">The source content that holds the Blob property.</param>
      <param name="segmentContext">The context for routing.</param>
      <returns>A Blob object, represents the <paramref name="content" />'s thumbnail image.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.BlobRouter.GetPartialVirtualPath(EPiServer.Framework.Blobs.Blob,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Generate the correspond links to the thumbnails
            </summary>
      <param name="content">The Blob object represent the thumbnail image</param>
      <param name="language">The language code expected</param>
      <param name="routeValues">A dictionary of route</param>
      <param name="requestContext">The context contains request's information</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.CrossSiteContentRouteContraint">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A route constraint used for the content route starting from <see cref="P:EPiServer.Web.SiteDefinition.RootPage" />. It validates
            that the routed content is not under another site than current resolved site.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.CrossSiteContentRouteContraint.#ctor(EPiServer.Web.ISiteDefinitionResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance of <see cref="T:EPiServer.Web.Routing.Internal.CrossSiteContentRouteContraint" /></summary>
      <param name="siteDefinitionResolver">The site definition to use.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.CrossSiteContentRouteContraint.Match(System.Web.Routing.Route,EPiServer.Web.Routing.Segments.SegmentContext,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Evaluates that the routed content does not belong to another site than the current resolved site.
            </summary>
      <param name="route">The current route</param>
      <param name="segmentContext">The routing context</param>
      <param name="parameterName">The name of the paramenter</param>
      <returns>true if the routed data matches the constraint else false.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.DefaultContentRoute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A route that maps an url to a structure node. When the node corresponds to a controller this the controller route value is set, otherwise the route is assumed to be a web form route.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.#ctor(System.Web.Routing.IRouteHandler,EPiServer.Web.Routing.Segments.ISegment[],System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,EPiServer.Web.Routing.SupportedDirection,System.Func{System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,System.String},EPiServer.DataAbstraction.RuntimeModel.IViewRegistrator,EPiServer.Globalization.IUpdateCurrentLanguage,EPiServer.Web.Routing.Internal.RouteRedirector,EPiServer.Web.Routing.Internal.VirtualPathHostResolver,EPiServer.Web.Routing.Internal.IContentRouteEventsRaiser,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.Routing.RoutingOptions})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Internal.DefaultContentRoute" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultContentRoute.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the name that this <see cref="T:EPiServer.Web.Routing.Internal.DefaultContentRoute" /> instance was registered with.
            </summary>
      <value>The name.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultContentRoute.Url">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Hides the possibility to use the 'Url' property in the Route since we do not want to use it.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultContentRoute.StrictLanguageRoutingResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the strict language handling resolver.
            </summary>
      <remarks>
            This is exposed for testability purpose. At runtime it returns <see cref="P:EPiServer.Configuration.Settings.StrictLanguageRouting" /></remarks>
      <value>The strict language handling resolver.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.GetRouteData(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Incoming Routing
            </summary>
      <param name="httpContext">Context</param>
      <returns>RouteData from the incoming request</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.RouteSegmentContext(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to route the specified <paramref name="segmentContext" /> to an content instance.
            </summary>
      <param name="segmentContext">The segment context.</param>
      <returns>RouteData if routing succeds else null</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.FirstIncomingRequest(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when the firsts incoming request comes to the page route.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Outgoing Routing
            </summary>
      <param name="requestContext">Context</param>
      <param name="values">Route values</param>
      <returns>Virtual path</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.MatchSegments(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Matches the segments.
            </summary>
      <param name="segmentContext">The segment context.</param>
      <returns>True if all segments matches their segment type</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.MatchConstraints(EPiServer.Web.Routing.Segments.SegmentContext,System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks if all constrains matches the route
            </summary>
      <param name="segmentContext">The segment context.</param>
      <param name="context">The context.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.SetQueryParameters(System.Text.StringBuilder,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.HashSet{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds unused values as query parameters
            </summary>
      <param name="virtualPath">The output path</param>
      <param name="values">Route values</param>
      <param name="usedValues">Used values</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.AddQueryParameter(System.Text.StringBuilder,System.Web.Routing.RouteValueDictionary,System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a query parameter to the writer
            </summary>
      <param name="virtualPath">Writer</param>
      <param name="values">Route values</param>
      <param name="name">The name of the parameter</param>
      <param name="first">Indicates if it's the first query parameter</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.AddVirtualPathFromSegments(System.Text.StringBuilder,System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.HashSet{System.String},System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Add virtual path from segment to the writer
            </summary>
      <param name="virtualPath">The writer</param>
      <param name="requestContext">Request context</param>
      <param name="values">Route values</param>
      <param name="usedValues">Used values from the route</param>
      <param name="lastNonDefaultIndex">The last index where the route not matching the default value</param>
      <returns>True if virtual path was added to the writer</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.GetLastNoneDefaultIndex(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.HashSet{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the last index where the route not matching the default value
            </summary>
      <param name="requestContext">Request context</param>
      <param name="values">Route values</param>
      <param name="usedValues">Used values from the route</param>
      <returns>The last index where the route not matching the default value</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.IsDefaultValue(System.String,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determain if a value is a default value for the route
            </summary>
      <param name="name">The name of the route segment</param>
      <param name="value">The value to check</param>
      <returns>True if the value is the default value</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.OnRoutingContent(EPiServer.Web.Routing.RoutingEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise <see cref="E:EPiServer.Web.Routing.IContentRouteEvents.RoutingContent" /> event.
            </summary>
      <param name="routingEventArgs">The <see cref="T:EPiServer.Web.Routing.RoutingEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.OnRoutedContent(EPiServer.Web.Routing.RoutingEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise <see cref="E:EPiServer.Web.Routing.IContentRouteEvents.RoutedContent" /> event.
            </summary>
      <param name="routingEventArgs">The <see cref="T:EPiServer.Web.Routing.RoutingEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.OnVirtualPathCreated(EPiServer.UrlBuilder,System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise <see cref="E:EPiServer.Web.Routing.IContentRouteEvents.CreatedVirtualPath" /> event.
            </summary>
      <param name="virtualPathBuilder">The virtual path builder.</param>
      <param name="requestContext">The request context.</param>
      <param name="routeValues">The route values.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.OnCreatingVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Called to raise <see cref="E:EPiServer.Web.Routing.IContentRouteEvents.CreatingVirtualPath" /> event.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="values">The route values.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRoute.IsDirectionSupported(EPiServer.Web.Routing.SupportedDirection)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether this instance supports requested route direction.
            </summary>
      <param name="direction">The direction.</param>
      <returns>
        <c>true</c> if direction is supported; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.DefaultContentRouteHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The ContentRouteHelper class provides information about the requrested content of the current web request.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRouteHelper.#ctor(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,EPiServer.Web.IViewContentRetriever,EPiServer.IContentLoader)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Internal.DefaultContentRouteHelper" /> class.
            </summary>
      <param name="context">The context.</param>
      <param name="routes">The routes.</param>
      <param name="viewContentRetriever">The view content retriever.</param>
      <param name="contentLoader">The content loader</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultContentRouteHelper.LanguageID">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the language string for the current page.
            </summary>
      <remarks>The property will be set the first time it gets called, and cached for the current instance.</remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultContentRouteHelper.ContentLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content link.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultContentRouteHelper.Content">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultContentRouteHelper.SetRouteDataIfPageNotRouted">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the route data if page not routed yet.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultContentRouteHelper.RequestContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets information about an HTTP request that matches the defined route.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultContentRouteHelper.ContentRetriever">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the view content retriever.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultContentRouteHelper.ContentLoader">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the Content Loader
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultEditUrlResolver.GetFallbackSite(System.Boolean,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolve Site with according to this priority 
            1- Take a site that its host type is Edit
            2- Otherwise take a site that its host match the language
            3- Otherwise take first site
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.DefaultPageRouteHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultPageRouteHelper.#ctor(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,EPiServer.Web.IViewContentRetriever,EPiServer.IContentLoader)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultPageRouteHelper.PageLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the page link for the current page.
            </summary>
      <remarks>
        <para>
            Webform pages, inheriting from <see cref="T:EPiServer.PageBase" />, can use the property <see cref="P:EPiServer.PageBase.CurrentPageLink" /> 
            instead of this class, to receive the <see cref="T:EPiServer.Core.PageReference" /> of the current web request.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.DefaultPageRouteHelper.Page">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the current page.
            </summary>
      <remarks>The property will be set the first time it gets called, and cached for the current instance.</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.DefaultSimpleAddressRouteHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.Web.Routing.ISimpleAddressRouteHandler" />, which handles simple address in CMS.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultSimpleAddressRouteHandler.#ctor(EPiServer.Web.ISiteDefinitionResolver,EPiServer.Web.IAggregatedSimpleAddressResolver,EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter,EPiServer.Web.ITemplateResolver,EPiServer.IContentLoader)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the DefaultSimpleAddressRouter class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultSimpleAddressRouteHandler.GetRouteValues(System.String,EPiServer.Core.ContentReference,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to handle a segment value as a simple address.
            </summary>
      <param name="urlSegment">The simple address</param>
      <param name="routeRoot">The route root</param>
      <param name="segmentContext">The segment context</param>
      <returns>
        <c>
          <see cref="T:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues" />
        </c> if <paramref name="urlSegment" /> was handled, otherwise <c>null</c></returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.DefaultUrlResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The default implementation of <see cref="T:EPiServer.Web.Routing.UrlResolver" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultUrlResolver.#ctor(System.Web.Routing.RouteCollection,EPiServer.IContentLoader,EPiServer.Web.ISiteDefinitionRepository,EPiServer.Web.TemplateResolver,EPiServer.Web.IPermanentLinkMapper,EPiServer.Core.IContentLanguageSettingsHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instace of <see cref="T:EPiServer.Web.Routing.Internal.DefaultUrlResolver" /></summary>
      <param name="routes">The registered routes to use.</param>
      <param name="contentLoader">The content loader to use</param>
      <param name="siteDefinitionRepository">The site definition repository to use</param>
      <param name="templateResolver">The template resolver to use</param>
      <param name="permanentLinkMapper">The permanent link mapper to use</param>
      <param name="contentLanguageSettingsHandler">The content language settings handler</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultUrlResolver.Route(EPiServer.UrlBuilder,EPiServer.Web.ContextMode)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultUrlResolver.GetVirtualPathForNonContent(System.Object,System.String,EPiServer.Web.Routing.VirtualPathArguments)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultUrlResolver.GetVirtualPath(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.VirtualPathArguments)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultUrlResolver.GetUrl(EPiServer.UrlBuilder,EPiServer.Web.Routing.VirtualPathArguments)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultUrlResolver.TryToPermanent(System.String,System.String@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DefaultUrlResolver.ConvertToPermanent(EPiServer.UrlBuilder,EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.DownloadMediaRouter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Download media router that routes to IContentMedia on <see cref="T:EPiServer.Core.IContentMedia" /> instances
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Routing.Internal.DownloadMediaRouter.DownloadSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The default download segment
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DownloadMediaRouter.RoutePartial(EPiServer.Core.IContentMedia,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The partial router for download IContentMedia the format should be [content public URL]/[DownloadSegment].
            </summary>
      <param name="content">The source content that holds the Blob property.</param>
      <param name="segmentContext">The context for routing.</param>
      <returns>A <see cref="T:EPiServer.Core.IContentMedia" /> object</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.DownloadMediaRouter.GetPartialVirtualPath(EPiServer.Core.IContentMedia,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the partial virtual path.
            </summary>
      <param name="content">The content.</param>
      <param name="language">The language.</param>
      <param name="routeValues">The route values.</param>
      <param name="requestContext">The request context.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.HttpRouteHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Wrapper to pass a raw <see cref="T:System.Web.IHttpHandler" /> into the routing system
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.IContentRouteEventsRaiser">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents a <see cref="T:System.Web.Routing.IRouteHandler" /> that can handle request to both webforms and MVC.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.#ctor(EPiServer.IContentLoader,EPiServer.Web.IPermanentLinkMapper,EPiServer.Web.TemplateResolver,EPiServer.Globalization.IUpdateCurrentLanguage,EPiServer.Framework.Localization.LocalizationService,EPiServer.Globalization.LanguageResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the MultiplexingRouteHandler class.
            </summary>
      <param name="contentLoader">The content loader.</param>
      <param name="permanentLinkMapper">The <see cref="T:EPiServer.Web.IPermanentLinkMapper" /> used in <see cref="M:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.GetRouteHandler(System.Web.Routing.RequestContext)" />.</param>
      <param name="templateResolver">The control resolver to use to resolve which template or controller that should handle the request.</param>
      <param name="languageResolver">The language resolver.</param>
      <param name="updateCurrentLanguage">The language selection implementation.</param>
      <param name="current">The localization service to use</param>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.PageRouteHandlerCreator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies the delegate used to create PageRouteHandler instances
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.Translator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the translator that is used to translate string resources.
            </summary>
      <value>The translator.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.TemplateResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the template resolver.
            </summary>
      <value>The template resolver.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the http handler from the specified <paramref name="requestContext" />.
            </summary>
      <remarks>
            Will get the http handler from the <see cref="T:System.Web.Routing.IRouteHandler" /> returned by <see cref="M:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.GetRouteHandler(System.Web.Routing.RequestContext)" />.
            </remarks>
      <param name="requestContext">The request context</param>
      <returns>IHttpHandler from <see cref="T:System.Web.Mvc.MvcRouteHandler" /> or <see cref="T:System.Web.Routing.PageRouteHandler" />.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.GetRouteHandler(System.Web.Routing.RequestContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns a route handler for MVC or webforms.
            </summary>
      <param name="requestContext">The request context</param>
      <returns>An instance of <see cref="T:System.Web.Mvc.MvcRouteHandler" /> if a controller is found among routed values in <paramref name="requestContext" />.
            Otherwise return an instance of <see cref="T:System.Web.Routing.PageRouteHandler" />.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.GetRouteHandlerOrRedirect(System.Web.Routing.RequestContext,System.Object,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the route handler for the request or redirects the request in case <see cref="M:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.RedirectIfNeeded(System.Web.Routing.RequestContext,EPiServer.Core.PageData)" /> returns true.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="routedData">The content.</param>
      <param name="throw404IfNotFound">if set to <c>true</c> a 404 HttpException is thrown if no page is found else null is returned.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.RedirectIfNeeded(System.Web.Routing.RequestContext,EPiServer.Core.PageData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Redirects the request if the page is an external shortcut or does not have a trailing slash.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="page">The page.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.GetPageRouteHandler(System.Object,System.String,System.String,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the page route handler for a web form.
            </summary>
      <param name="routedData">The routed data.</param>
      <param name="path">The path.</param>
      <param name="language">The language.</param>
      <param name="return404">if set to <c>true</c> then a 404 HttpException is raised</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.MultiplexingRouteHandler.GetRoutedData(System.Web.Routing.RequestContext,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets content object from a request context
            </summary>
      <param name="requestContext">The request context to receive the page from</param>
      <param name="language">Prefered language to load the page with</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.OutgoingOnlyRoute">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Route that only supports outgoing routing, that is creating virtual paths. 
            Purpose of it is to support HtmlHelper methods Action and RenderAction but
            prevent direct browsing for registered url like for example {controller}/{action/
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.OutgoingOnlyRoute.#ctor(System.String,System.Web.Routing.IRouteHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Internal.OutgoingOnlyRoute" /> class.
            </summary>
      <param name="url">The URL.</param>
      <param name="routeHandler">The route handler.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.OutgoingOnlyRoute.GetRouteData(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. When overridden in a derived class, returns route information about the request.
            </summary>
      <remarks>
            Implementation will always return null.
            </remarks>
      <param name="httpContext">An object that encapsulates information about the HTTP request.</param>
      <returns>
            An object that contains the values from the route definition if the route matches the current request, or null if the route does not match the request.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.OutgoingOnlyRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. When overridden in a derived class, checks whether the route matches the specified values, and if so, generates a URL and retrieves information about the route.
            </summary>
      <param name="requestContext">An object that encapsulates information about the requested route.</param>
      <param name="values">An object that contains the parameters for a route.</param>
      <returns>
            An object that contains the generated URL and information about the route, or null if the route does not match <paramref name="values" />.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.RouteParser">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parses a route into an array of <see cref="T:EPiServer.Web.Routing.Segments.ISegment" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.RouteParser.Parse(System.String,System.Collections.Generic.IDictionary{System.String,EPiServer.Web.Routing.Segments.ISegment})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parses the specified URL into segments.
            </summary>
      <remarks>
        <para>
            Will split the incoming url on '/' to create different sections. 
            </para>
        <para>
            The sections will each be matched against <paramref name="segmentMappings" /> to add the matching <see cref="T:EPiServer.Web.Routing.Segments.ISegment" /> to the return array. 
            If no match is found it will add an instance of <see cref="T:EPiServer.Web.Routing.Segments.Internal.ParameterSegment" />.
            </para>
        <para>
            If a section contains no curly braces an instance of <see cref="T:EPiServer.Web.Routing.Segments.Internal.StaticSegment" /> will be added.
            </para>
      </remarks>
      <param name="url">The URL to parse.</param>
      <param name="segmentMappings">The dictionary to use when mapping segments.</param>
      <returns>An array of segments corresponding to the sections of <paramref name="url" />.</returns>
      <exception cref="T:System.ArgumentException">When a specific segment is invalid.</exception>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.RouteRedirector">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.RouteRedirector.#ctor(EPiServer.Web.ISiteDefinitionResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Internal.RouteRedirector" /> class.
            </summary>
      <param name="siteDefinitionResolver">The site definition resolver.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.RouteRedirector.EvaluateRequest(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Evaluates if the currently requested route should be redirected to a new location.
            If its found to require a redirect, the redirect method on the provided context is called.
            </summary>
      <param name="context">The context of the current route.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Internal.VirtualPathHostResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Internal.VirtualPathHostResolver.#ctor(System.Func{System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,System.String},EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Web.ISiteDefinitionRepository,EPiServer.Web.Routing.RoutingOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Internal.VirtualPathHostResolver" /> class.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.SegmentNode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class to hold the contentReference and its segment
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.SegmentNode.Segment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The contents segment
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.SegmentNode.ContentLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The content reference.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.SegmentNodeExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extensions method for segmentnode
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.ContentSegmentLoader">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads routing segments for contentlink
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.ContentSegmentLoader.#ctor(EPiServer.IContentRepository,EPiServer.Web.TemplateResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.Internal.ContentSegmentLoader" /> class with required parameters.
            </summary>
      <param name="contentRepository">The content repository.</param>
      <param name="templateResolver">The template resolver.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.ContentSegmentLoader.GetRoutingSegments(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets route segment information for a content.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
      <returns>
            An enumeration of routing segments matching the requested context.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default <see cref="T:EPiServer.Web.Routing.Segments.IUrlSegmentRouter" /> which resolves incoming/outgoing content for the request segment
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter.Create(EPiServer.ServiceLocation.IServiceLocator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates an instance of <see cref="T:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter" />.
            </summary>
      <param name="locator">The service locator used to fill constructor arguments.</param>
      <returns>
            An instance of DefaultUrlSegmentRouter.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter.#ctor(EPiServer.IContentLoader,EPiServer.Web.Routing.Segments.IRoutingSegmentLoader,EPiServer.Web.Routing.AncestorReferencesLoader)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter" /> class.
            </summary>
      <param name="contentQueryable">The content queryable.</param>
      <param name="routingSegmentLoader">The routing segment loader.</param>
      <param name="ancestorLoader">The ancestor loader.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter.RootResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the root resolver.
            </summary>
      <value>
            The root resolver.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter.ResolveContentForIncoming(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves the content for incoming.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="segmentContext">The segment context.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter.ResolveContentForOutgoing(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves the node representing the preceding url segment
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            Node representing the preceding url segment
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter.GetRoutingSegment(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the routing specific data for a node.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="preferredLanguageBranch">The preferred language branch.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter.IsContentUnderRoot(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified contentLink is located under the <see cref="P:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter.RootResolver" /> for this router instance.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
        <c>true</c> the specified contentLink is located under the <see cref="P:EPiServer.Web.Routing.Segments.Internal.DefaultUrlSegmentRouter.RootResolver" />; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.GuidSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.GuidSegment.#ctor(System.String,System.String,EPiServer.Web.Routing.Segments.IUrlSegmentRouter,EPiServer.Web.IPermanentLinkMapper,System.Web.Routing.RouteCollection,EPiServer.IContentLoader,EPiServer.Web.Routing.UrlResolver,EPiServer.Core.IContentLanguageSettingsHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the Node segment class.
            </summary>
      <param name="name">Name of the segment.</param>
      <param name="friendlyUrlExtension">he extension used for friendly URL generation.</param>
      <param name="urlSegmentRouter">The router used when resolving nodes.</param>
      <param name="permanentLinkMapper">The permanent link mapper.</param>
      <param name="routeCollection">The route collection.</param>
      <param name="contentLoader">The content loader.</param>
      <param name="urlResolver">The URL resolver.</param>
      <param name="contentSettingsLanguageHandler">Content language settings handler to use</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.GuidSegment.PreferredLanguageAccessor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Exposes the accessor used to get PreferredLanguage.
            </summary>
      <remarks>
            This is primarly exposed to make it possible to change in unit tests. By
            default the value is set <see cref="P:EPiServer.Globalization.ContentLanguage.PreferredCulture" />.
            </remarks>
      <value>The preferred language accessor.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.GuidSegment.RouteDataMatch(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set the node, language and controller value to the segment context.
            </summary>
      <param name="context">The segment context</param>
      <returns>
            It will always return true.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.GuidSegment.TryParse(System.String,System.Guid@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to parse the string to a guid by using Guid.TryParseExact(guidString, "N", out permanentGuid)
            </summary>
      <param name="guidString">The GUID string.</param>
      <param name="permanentGuid">The permanent GUID.</param>
      <returns>
        <c>True</c> if parsed, otherwise <c>false</c></returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.LanguageSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.LanguageSegment.#ctor(System.String,EPiServer.Web.Routing.Segments.ILanguageSegmentMatcher,EPiServer.Globalization.Internal.HostLanguageResolver,EPiServer.Web.Routing.Internal.VirtualPathHostResolver,EPiServer.Web.HostNameResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.Internal.LanguageSegment" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.LanguageSegment.EnabledLanguages">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the enabled languages.
            </summary>
      <remarks>
            If not explicitly set is <see cref="P:EPiServer.Web.UrlRewriteContext.Languages" /> used.
            </remarks>
      <value>The enabled languages.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.LanguageSegment.RouteDataMatch(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the language segment from the url, if there is any and puts it in the RouteData collection.
            </summary>
      <param name="context">The routing context</param>
      <returns>
            True
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.LanguageSegment.HandleNoLanguageFoundStrict(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines how the case when no language is found and running with strict language routing.
            </summary>
      <param name="context">The context.</param>
      <returns>false</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.LanguageSegment.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the string representation of this segments virtual path.
            </summary>
      <param name="requestContext">The request</param>
      <param name="values">Custom values</param>
      <returns>
            Virtual path from this segment.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.LanguageSegmentMatcher">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This interface supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.LanguageSegmentMatcher.#ctor(EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Globalization.Internal.HostLanguageResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.Internal.LanguageSegmentMatcher" /> class.
            </summary>
      <param name="languageBranchRepository">The language branch repository.</param>
      <param name="hostLanguageResolver">The host language resolver.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.LanguageSegmentMatcher.TryGetLanguageId(System.String,System.String@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.LanguageSegmentMatcher.TryGetLanguageUrlSegment(System.String,System.String@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeEditSegment.RouteDataMatch(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set the node, language and controller value to the segment context.
            </summary>
      <remarks>
             It will traverse the URL and resolve a node for the last segment. The node will correspond to a page in the page tree.
             If no node is found, the root node from the <see cref="T:EPiServer.Web.Routing.Segments.IUrlSegmentRouter" /> supplied in the constructor is used.
            </remarks>
      <param name="context">The segment context</param>
      <returns>It will always return true.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.NodeSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A Segment representing a contentLink as node in the pagetree when routing.
            The parameter segment will be created by the <see cref="T:EPiServer.Web.Routing.RouteParser" /> when the route contains '{node}'.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.#ctor(System.String,System.String,EPiServer.Web.Routing.Segments.IUrlSegmentRouter,EPiServer.IContentLoader,EPiServer.Web.Routing.UrlResolver,EPiServer.Core.IContentLanguageSettingsHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the Node segment class.
            </summary>
      <param name="name">Name of the segment.</param>
      <param name="friendlyUrlExtension">he extension used for friendly URL generation.</param>
      <param name="urlSegmentRouter">The router used when resolving nodes.</param>
      <param name="contentLoader">The content loader.</param>
      <param name="urlResolver">The url resolver to use</param>
      <param name="contentLanguageSettingsHandler">ContentLanguageSettingsHandler to use.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.NodeSegment.IsStartPageResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the is start page resolver.
            </summary>
      <value>
            The is start page resolver.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.NodeSegment.UrlSegmentRouter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the URL segment router.
            </summary>
      <value>The URL segment router.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.NodeSegment.ContentLoader">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content loader.
            </summary>
      <value>
            The content loader.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.RouteDataMatch(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set the node, language and controller value to the segment context.
            </summary>
      <remarks>
             It will traverse the URL and resolve a node for the last segment. The node will correspond to a page in the page tree.
             If no node is found, the root node from the <see cref="T:EPiServer.Web.Routing.Segments.IUrlSegmentRouter" /> supplied in the constructor is used.
            </remarks>
      <param name="context">The segment context</param>
      <returns>It will always return true.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.PermanentRedirectForDefaultMode(System.String,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Does a permanent redirect to <paramref name="redirectUrl" /> if the context is <see cref="F:EPiServer.Web.ContextMode.Default" />.
            </summary>
      <param name="redirectUrl">The url to redirect to</param>
      <param name="context">current request context</param>
      <returns>true if the request was redirected else false.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.RedirectionEnabled(EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines if redirection is enabled for the context.
            </summary>
      <param name="context">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.GetIncomingNode(EPiServer.Core.ContentReference,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get all visited Node within the context.
            </summary>
      <remarks>
            It will recursively traverse the URL to find the last node.
            </remarks>
      <param name="contentLink">contentlink </param>
      <param name="context">Segment context</param>
      <returns>The all visited node of the incoming URL </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.GetNextValue(System.String,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds the next value in the URL by looking for the forward slash character.
            When the friendly url extension is used, the extension will be removed.
            </summary>
      <param name="remainingUrl">The URL to get next value from.</param>
      <param name="context">The context.</param>
      <returns>
            A <see cref="T:EPiServer.Web.Routing.Segments.SegmentPair" /> containing the next value and the calculated remaining url.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.SetRoutingData(EPiServer.Web.Routing.Segments.SegmentContext,System.String,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set the node, language and controller value to the segment context.
            </summary>
      <param name="context">The segment context.</param>
      <param name="lang">The language to set.</param>
      <param name="contentLink">The node to set.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.GetContextMode(System.Web.HttpContextBase,System.Web.Routing.RouteData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the context mode from query string.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="routeData">The route data.</param>
      <returns>
            The context mode
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the string representation of this segments virtual path.
            </summary>
      <remarks>
            The returned virtual path will contain language information where applicable.
            </remarks>
      <param name="requestContext">The request</param>
      <param name="values">Route values</param>
      <returns>Virtual path from this segment.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.GetLanguage(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the language.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="values">The values.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.HashSet{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the string representation of this segments virtual path.
            </summary>
      <remarks>
            The returned virtual path will contain language information where applicable.
            </remarks>
      <param name="requestContext">The request</param>
      <param name="values">Route values</param>
      <param name="usedValues">Route values that are handled and should not be added to the query string.</param>
      <returns>Virtual path from this segment.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.AppendTrailingSlash(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will add a trailing slash unless there is a Friendly url extension defined or last
            content is IBinaryStorable
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="values">The values.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.GetContentLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content link from the request context of route values.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="values">The values.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.GetRoutedContent(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the routed content from the request context of route values.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="values">The values.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.GetOutgoingUrl(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the outgoing URL.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
      <returns>
            The outgoing url for the content reference
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.NodeSegment.GetOutgoingUrlSegment(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the outgoing URL segment for a content item on specified language.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.ParameterSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Custom segments. 
            The parameter segment will be created by the <see cref="T:EPiServer.Web.Routing.RouteParser" /> when the route contains a custom action inside curly brackets.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.ParameterSegment.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the ParameterSegment class.
            </summary>
      <param name="name">Name of the segment.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.ParameterSegment.RouteDataMatch(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set the parameter in the value list, if a value exist in the url, or as a default
            If the value exist, the value gets removed from the remaining path.
            </summary>
      <param name="context">RoutingContext</param>
      <returns>True if value exist in url or as a default</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.ParameterSegment.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the string representation of this segments virtual path.
            </summary>
      <remarks>
            Will return null if <paramref name="values" /> does not contain this segments <see cref="P:EPiServer.Web.Routing.Segments.SegmentBase.Name" /></remarks>
      <param name="requestContext">The request context</param>
      <param name="values">Route values</param>
      <returns>Virtual path from this segment</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.PartialSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Segment implementation that handles partial routing.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.PartialSegment.#ctor(System.String,EPiServer.IContentLoader,EPiServer.Web.Routing.PartialRouteHandler,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.Routing.RoutingOptions})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.Internal.PartialSegment" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.PartialSegment.RouteDataMatch(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Route incoming segment.
            </summary>
      <param name="context">Routing context</param>
      <returns>
            True if the segment part matches the pattern
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.PartialSegment.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.HashSet{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the string representation of this segments virtual path.
            </summary>
      <param name="requestContext">The request</param>
      <param name="values">Custom values</param>
      <param name="usedValues">Route values that are handled and should not be added to the query string.</param>
      <returns>
            Virtual path from this segment.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.PartialSegment.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the string representation of this segments virtual path.
            </summary>
      <param name="requestContext">The request</param>
      <param name="values">Custom values</param>
      <returns>
            Virtual path from this segment.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Encapsulates information about a HTTP request that is used when determining segments during routing.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext._editRouteRegex">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The regular expression to find if we are inside a route that's used by the editorial system.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.EpiEditMode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name on the query parameter indicating if the request is in edit mode.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.#ctor(System.Web.HttpContextBase,System.Web.Routing.RouteData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the SegmentContext class.
            </summary>
      <param name="httpContextBase">An object that contains information about the HTTP request.</param>
      <param name="routeData">An object that contains information about the route that matched the current.</param>
      <exception cref="T:System.ArgumentNullException">httpContext or routeData is null.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.#ctor(System.Web.HttpContextBase,System.Web.Routing.RouteData,EPiServer.Globalization.IUpdateCurrentLanguage)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the SegmentContext class.
            </summary>
      <param name="httpContextBase">An object that contains information about the HTTP request.</param>
      <param name="routeData">An object that contains information about the route that matched the current.</param>
      <param name="updateCurrentLanguage">The update current language.</param>
      <exception cref="T:System.ArgumentNullException">httpContext or routeData is null.</exception>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.HttpContextGetter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set this function to test the GetOrResolveContextMode method.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.CurrentContextModeGetter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Replace this function to return a specific context mode in tests.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.CurrentContextMode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the context mode for the current request.
            </summary>
      <value>
            The context mode as defined in <see cref="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.ContextMode" />.
            </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.Language">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This property states the language for the request.
            </summary>
      <value>
      </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.RoutedContentLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This property states the <see cref="T:EPiServer.Core.ContentReference" /> for the route.
            </summary>
      <value>
      </value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.OriginalRoutedLink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. In case a partial router sets <see cref="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.RoutedContentLink" /> or a page with shortcut sets <see cref="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.RoutedContentLink" /> then
            this will contain the <see cref="T:EPiServer.Core.ContentReference" /> root for the partial route.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.ContextMode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the context mode for the route.
            </summary>
      <value>The context mode.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.QueryString">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the query string for the route.
            </summary>
      <value>The query string.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.RoutedObject">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the route data.
            </summary>
      <value>The route data.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.PermanentRedirect(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Does a permanent redirect.
            </summary>
      <param name="url">The URL.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.TemporaryRedirect(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Does a temporary redirect.
            </summary>
      <param name="url">The URL.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.RoutedSiteDefinition">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the site definition that matches the route.
            </summary>
      <remarks>Will update <see cref="P:EPiServer.Web.SiteDefinition.Current" /></remarks>
      <value>
            The routed site definition.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.SetCustomRouteData``1(System.String,``0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets custom route data in context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="code">The code.</param>
      <param name="value">The value.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.GetCustomRouteData``1(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets custom route data from context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="code">The code.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.Copy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Copies this instance.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.GetOrResolveContextMode(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines which <see cref="P:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.ContextMode" /> the request is execued under.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
            The context mode
            </returns>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Routing.Segments.Internal.RequestSegmentContext.CmsPathGetter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The function that returns the path to the cms editorial interface.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The segment representing a <see cref="T:EPiServer.Web.SimpleAddress" /> when routing.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegment.#ctor(System.String,System.String,EPiServer.Web.Routing.Segments.IUrlSegmentRouter,EPiServer.IContentLoader,EPiServer.Web.Routing.UrlResolver,EPiServer.Core.IContentLanguageSettingsHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the SimpleAddressSegment class.
            </summary>
      <param name="name">Name of the segment.</param>
      <param name="friendlyUrlExtension">The extension used for friendly URL generation.</param>
      <param name="urlSegmentRouter">The router used when resolving nodes.</param>
      <param name="contentLoader">The content loader.</param>
      <param name="urlResolver">The url resolver to use.</param>
      <param name="contentSettingsLanguageHandler">Content language settings handler to use</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegment.RouteDataMatch(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set the node, language, and controller value.
            </summary>
      <param name="context">Segment context</param>
      <returns>True if a node is found that matches the url</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegment.GetIncomingNode(EPiServer.Core.ContentReference,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the next Node within the context.
            </summary>
      <param name="contentLink">structure Node</param>
      <param name="context">Segment context</param>
      <returns>structure Node</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegment.MatchOneSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets a value indicating whether only one segment should be matched for simple address.
            </summary>
      <value>
        <c>true</c> if only one segment is matched for simple address; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles cache items for the simple address segment
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentCache.#ctor(EPiServer.Framework.Cache.IObjectInstanceCache,EPiServer.Core.IContentCacheKeyCreator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the SimpleAddressSegmentCache class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentCache.TryGetIncomingNode(System.String,EPiServer.Web.Routing.Segments.SimpleAddressRouteValues@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to get simple address from cache
            </summary>
      <param name="cacheKey">The cache key.</param>
      <param name="routeValues">The route values</param>
      <returns>
        <c>True</c> if simple address was found and received from cache.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentCache.SetIncomingCacheNode(System.String,EPiServer.Web.Routing.Segments.SimpleAddressRouteValues)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds simple address object to cache
            </summary>
      <param name="cacheKey">The cache key.</param>
      <param name="routeValues">The simple address segment cache object</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentCache.GetCacheKey(System.String,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the incoming cache key
            </summary>
      <param name="simpleAddress">The simple address</param>
      <param name="context">The context.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentRouter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A structure implementation over simple addresses.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentRouter.#ctor(System.Func{EPiServer.Web.SiteDefinition,EPiServer.Core.ContentReference})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a a <see cref="T:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentRouter" /> with required parameters.
            </summary>
      <param name="rootResolver">The root resolver.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentRouter.#ctor(EPiServer.IContentRepository,EPiServer.Web.Routing.AncestorReferencesLoader,System.Func{EPiServer.Web.SiteDefinition,EPiServer.Core.ContentReference},EPiServer.Web.Routing.Segments.IRoutingSegmentLoader,EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentCache,System.Collections.Generic.IEnumerable{EPiServer.Web.Routing.ISimpleAddressRouteHandler})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentRouter" /> class.
            </summary>
      <param name="contentRepository">The content repository.</param>
      <param name="ancestorRequestCachedLoader">The ancestor request cached loader.</param>
      <param name="rootResolver">The root resolver.</param>
      <param name="routingSegmentLoader">The routing segment loader.</param>
      <param name="simpleAddressSegmentCache">The simple address cache.</param>
      <param name="simpleAddressRouters">The simple address resolvers.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.SimpleAddressSegmentRouter.ResolveContentForIncoming(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolve a contentlink which match urlsegment.
            </summary>
      <param name="contentlink">The contentlink.</param>
      <param name="urlSegment">The url.</param>
      <param name="context">The segment context.</param>
      <returns>The resolved content link</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.StaticSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Static segments. The static segment will be created by the <see cref="T:EPiServer.Web.Routing.RouteParser" /> when the route contains a value without curly brackets.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.StaticSegment.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the StaticSegment class.
            </summary>
      <param name="name">The name of the segment.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.StaticSegment.RouteDataMatch(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Remove the segment from the remaining Path, if the segment matches the url.
            When route data match, ramaining path will be changed.
            </summary>
      <param name="context">Segment context</param>
      <returns>True if the segment matches the url</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.StaticSegment.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the string representation of this segments virtual path.
            </summary>
      <remarks>
            The virtual path of this segment is the same as it's name.
            </remarks>
      <param name="requestContext">The request</param>
      <param name="values">Route values</param>
      <returns>Virtual path from this segement.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.Internal.UrlSegmentContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. <see cref="T:EPiServer.Web.Routing.Segments.SegmentContext" /> implementation used to route from an url.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.UrlSegmentContext.#ctor(EPiServer.UrlBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.Internal.UrlSegmentContext" /> class.
            </summary>
      <param name="urlBuilder">The URL builder.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.Internal.UrlSegmentContext.QueryString">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the query string for the route.
            </summary>
      <value>The query string.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.Internal.UrlSegmentContext.Copy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Copies this instance.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.ILanguageSegmentMatcher">
      <summary>
            This interface supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.ILanguageSegmentMatcher.TryGetLanguageId(System.String,System.String@)">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            Tries to get a language id from an url segment.
            </summary>
      <param name="urlSegment">The url segment to check</param>
      <param name="languageId">The id of the langauge branch if it exists, otherwise <c>null</c>.</param>
      <returns>
            True if the language is enabled
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.ILanguageSegmentMatcher.TryGetLanguageUrlSegment(System.String,System.String@)">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            Tries to get an url segment from a language id.
            </summary>
      <param name="languageId">The language id to check</param>
      <param name="urlSegment">The url segment (with fallback to language ID) of the langauge branch if it exists, otherwise <c>null</c>.</param>
      <returns>
            True if the language is enabled
            </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.IRoutingSegmentLoader">
      <summary>
            Represents a certain type of relation between a contentLink and data (e.g. content).
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.IRoutingSegmentLoader.GetRoutingSegments(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Gets the routing segments.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.ISegment">
      <summary>
            Interface used when routing requests.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.ISegment.RouteDataMatch(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>
            Route incoming segment.
            </summary>
      <param name="context">Routing context</param>
      <returns>True if the segment part matches the pattern</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.ISegment.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.HashSet{System.String})">
      <summary>
            Gets the virtual path segment.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="values">The route values.</param>
      <param name="usedRouteValueKeys">Route values that are handled and should not be added to the query string.</param>
      <returns>A path segment string.</returns>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.ISegment.Name">
      <summary>
            The name of a segment. It is used to determine if a specific segment should be used when routing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.ISegment.AppendTrailingSlash(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>
            Called for the last segment that outputs anything in virtualpath. The
            segment implementation can then decide wether a trailing slash should be added.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="values">The values.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.IUrlSegmentRouter">
      <summary>
            Specifies methods to resolve content from a URL
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.IUrlSegmentRouter.RootResolver">
      <summary>
            The resolver for root content where url resolving starts
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.IUrlSegmentRouter.ResolveContentForIncoming(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>
            Resolves a related contentLink with given url segment.
            </summary>
      <param name="contentReference">The content reference.</param>
      <param name="urlSegment">The URL segment.</param>
      <param name="segmentContext">The segment context.</param>
      <returns>ContentLink if exist else null</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.IUrlSegmentRouter.ResolveContentForOutgoing(EPiServer.Core.ContentReference)">
      <summary>
            Resolves the node representing the preceding url segment
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
            the contentlink representing the preceding url segment
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.IUrlSegmentRouter.GetRoutingSegment(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Gets the routing specific data for a contentLink.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="preferredLanguageBranch">The preferred language branch.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.IUrlSegmentRouter.IsContentUnderRoot(EPiServer.Core.ContentReference)">
      <summary>
            Determines whether the specified contentLink is located under the reference given by <see cref="P:EPiServer.Web.Routing.Segments.IUrlSegmentRouter.RootResolver" /> for this router instance.
            </summary>
      <param name="contentLink">The content link.</param>
      <returns>
        <c>true</c> the specified contentLink is located under the root given by <see cref="P:EPiServer.Web.Routing.Segments.IUrlSegmentRouter.RootResolver" />; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.SegmentBase">
      <summary>
            The abstract base class used in EPiServers Segment classes.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentBase.#ctor(System.String)">
      <summary>
            Constructor for the SegmentBase class.
            </summary>
      <param name="name">Name of the segment.</param>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentBase.Name">
      <summary>
            The name of a segment. It is used to determine if a specific segment should be used when routing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentBase.RouteDataMatch(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>
            Route incoming segment.
            </summary>
      <param name="context">Routing context</param>
      <returns>True if the segment part matches the pattern</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentBase.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>
            Gets the string representation of this segments virtual path.
            </summary>
      <param name="requestContext">The request</param>
      <param name="values">Custom values</param>
      <returns>Virtual path from this segment.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentBase.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.HashSet{System.String})">
      <summary>
            Gets the string representation of this segments virtual path.
            </summary>
      <remarks>
            Adds this segment's <see cref="P:EPiServer.Web.Routing.Segments.SegmentBase.Name" /> to <paramref name="usedValues" /> and calls <see cref="M:EPiServer.Web.Routing.Segments.SegmentBase.GetVirtualPathSegment(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)" /></remarks>
      <param name="requestContext">The request</param>
      <param name="values">Custom values</param>
      <param name="usedValues">Route values that are handled and should not be added to the query string.</param>
      <returns>Virtual path from this segment.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentBase.AppendTrailingSlash(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>
            Called for the last segment that outputs anything in virtualpath. The
            segment implementation can then decide wether a trailing slash should be added.
            </summary>
      <remarks>
            This base implementation returns true, meaning a trailing slash is added when the segment is last.
            </remarks>
      <param name="requestContext">The request context.</param>
      <param name="values">The values.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.SegmentContext">
      <summary>
            Encapsulates information about a HTTP/Url request that is used when determining segments during routing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentContext.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.SegmentContext" /> class.
            </summary>
      <param name="requestUrl">The request URL.</param>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.RequestUrl">
      <summary>
            Gets the request URI that is routed.
            </summary>
      <value>
            The request URI.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.LastConsumedFragment">
      <summary>
            Gets or sets the last consumed fragment.
            </summary>
      <remarks>
            This value is updated when <see cref="P:EPiServer.Web.Routing.Segments.SegmentContext.RemainingPath" /> is updated. 
            </remarks>
      <value>The last consumed fragment.</value>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.RemainingPath">
      <summary>
            This property is used to keep track of what parts of URL that has been handled by different segments.
            </summary>
      <remarks>
        <see cref="P:EPiServer.Web.Routing.Segments.SegmentContext.LastConsumedFragment" /> is updated when this property is set. When overriding this update <see cref="P:EPiServer.Web.Routing.Segments.SegmentContext.LastConsumedFragment" /> as well.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.NonContentPath">
      <summary>
            The path remaining after content routing is done. Can be for partial route, action, parameter etc.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.RoutedContentLink">
      <summary>
            This property states the <see cref="T:EPiServer.Core.ContentReference" /> for the route.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.OriginalRoutedLink">
      <summary>
            In case a partial router or a page with shortcut sets <see cref="P:EPiServer.Web.Routing.Segments.SegmentContext.RoutedContentLink" /> then
            this will contain the original <see cref="T:EPiServer.Core.ContentReference" /> that matched the route.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.Language">
      <summary>
            This property states the language for the route.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.ContentLanguage">
      <summary>
            Gets or sets the language for the content that was routed to.
            </summary>
      <remarks>
            Note that <see cref="P:EPiServer.Web.Routing.Segments.SegmentContext.ContentLanguage" /> and <see cref="P:EPiServer.Web.Routing.Segments.SegmentContext.Language" /> might be differ since <see cref="P:EPiServer.Web.Routing.Segments.SegmentContext.Language" /> also
            takes language segment and language host mapping in consideration.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.Defaults">
      <summary>
            Gets or sets the values to use if the URL does not contain all the parameters.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.RouteData">
      <summary>
            Gets or sets the route data.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.ContextMode">
      <summary>
            Gets or sets the context mode for the route.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.RoutedObject">
      <summary>
            Gets or sets the route data.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.QueryString">
      <summary>
            Gets the query string for the route.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.StrictLanguageRoutingResolver">
      <summary>
            Gets or sets the strict language handling resolver.
            </summary>
      <remarks>
            This is exposed for testability purpose. At runtime it returns <see cref="P:EPiServer.Configuration.Settings.StrictLanguageRouting" /></remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.RedirectShortcutPages">
      <summary>
            Gets or sets if routes to pages that is set as shortcut to other page should be redirected.
            </summary>
      <remarks>
            This is exposed for testability purpose. At runtime it uses <see cref="P:EPiServer.Configuration.Settings.UseLegacyShortcutRouting" />.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentContext.Copy">
      <summary>
            Copies this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentContext.PermanentRedirect(System.String)">
      <summary>
            Does a permanent redirect.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentContext.TemporaryRedirect(System.String)">
      <summary>
            Does a temporary redirect.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentContext.RoutedSiteDefinition">
      <summary>
            Gets or sets the site definition that matches the route.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentContext.GetCustomRouteData``1(System.String)">
      <summary>
            Gets custom route data from context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="code">The code.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentContext.SetCustomRouteData``1(System.String,``0)">
      <summary>
            Sets custom route data in context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="code">The code.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentContext.GetNextValue(System.String)">
      <summary>
            Finds the next value in the URL by looking for the forward slash character.
            </summary>
      <param name="remainingPath">The URL to get next value from.</param>
      <returns>A <see cref="T:EPiServer.Web.Routing.Segments.SegmentPair" /> containing the next value and the calculated remaining url.</returns>
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.SegmentHelper">
      <summary>
            Helper class for routing segments.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentHelper.TryGetIncomingNodeInEditOrPreviewMode(EPiServer.Web.Routing.Segments.SegmentContext,EPiServer.Web.Routing.Segments.SegmentPair,EPiServer.Core.ContentReference@)">
      <summary>
            Tries to get the incoming node in edit/preview mode.
            </summary>
      <param name="context">The context.</param>
      <param name="segmentPair">The segment pair to use.</param>
      <param name="versionSpecificContentReference">The returned content reference.</param>
      <returns>
        <c>True</c> if the context is in edit/preview mode, and a version specific content reference was found. Otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SegmentHelper.GetModifiedVirtualPathInEditOrPreviewMode(EPiServer.Core.ContentReference,System.String,EPiServer.Web.ContextMode)">
      <summary>
            Gets a modified virtual path in edit/preview mode, if the <paramref name="contextMode" /> is in edit or preview mode.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="virtualPath">The original virtual path.</param>
      <param name="contextMode">The context mode.</param>
      <returns>A modified virtual path if the <paramref name="contextMode" /> is in edit/preview mode, otherwise the <paramref name="virtualPath" /></returns>
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.SegmentPair">
      <summary>
            Class to hold return values from <see cref="M:EPiServer.Web.Routing.Segments.SegmentContext.GetNextValue(System.String)" /></summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentPair.Next">
      <summary>
            The next value to be used when matching for routedata.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SegmentPair.Remaining">
      <summary>
            The remaining URL that is yet to be parsed.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues">
      <summary>
            Object containing information from a simple address route handler
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.#ctor(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues" /> class.
            </summary>
      <param name="routedContentLink">The routed content link.</param>
      <param name="language">The content language.</param>
      <remarks>Sets contentLanguage equal to language.</remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.String,System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues" /> class.
            </summary>
      <param name="routedContentLink">The routed content link.</param>
      <param name="originalRoutedLink">The original routed content link</param>
      <param name="language">The language.</param>
      <param name="contentLanguage">The content language.</param>
      <param name="routedObject">The routed object.</param>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.RoutedContentLink">
      <summary>
            The content link for routed content.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.OriginalRoutedLink">
      <summary>
            The content link for routed content.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.Language">
      <summary>
            The language for the route.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.ContentLanguage">
      <summary>
            Gets or sets the language for the content that was routed to.
            </summary>
      <remarks>
            Note that <see cref="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.ContentLanguage" /> and <see cref="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.Language" /> might theoretically differ in routes
            but in the case of simple address they should be the same if the simple address is unique per language,
            in which case the content is found by the simple address segment and <see cref="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.Language" /> (the language
            in the routing context) would be determined by the <see cref="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.ContentLanguage" /> (the language of the
            routed content).
            </remarks>
      <value>The content langauge.</value>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.RoutedObject">
      <summary>
            The routed object.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.CustomRouteData">
      <summary>
            Custom route data which will be merged into the route context.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.GetCustomRouteData``1(System.String)">
      <summary>
            Gets custom route data.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="code">The code.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.SetCustomRouteData``1(System.String,``0)">
      <summary>
            Sets custom route data.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="code">The code.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.ApplyTo(EPiServer.Web.Routing.Segments.SegmentContext,System.Boolean)">
      <summary>
            Applies the stored values to the context. The values in the <see cref="P:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues.CustomRouteData" /> dictionary
            are merged with the custom values in the <see cref="T:EPiServer.Web.Routing.Segments.SegmentContext" />, overwriting any values that
            exist in both objects.
            </summary>
      <param name="context">The segment context.</param>
      <param name="setRoutedContentLink">Wheter to set the <see cref="P:EPiServer.Web.Routing.Segments.SegmentContext.RoutedContentLink" />
            property.</param>
    </member>
    <member name="T:EPiServer.Web.Routing.IPageRouteHelper">
      <summary>
            Provides information about the routed page and content of the current web request.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.IPageRouteHelper.PageLink">
      <summary>
            Gets the page link for the current routed page.
            </summary>
      <remarks>
        <para>
            Webform pages, inheriting from <see cref="T:EPiServer.PageBase" />, can use the property <see cref="P:EPiServer.PageBase.CurrentPageLink" /> 
            instead of this class, to receive the <see cref="T:EPiServer.Core.PageReference" /> of the current web request.
            </para>
      </remarks>
      <example>
            The following code example demonstrates how to get information about the requested CMS page for the current web request.
            <code source="../CodeSamples/EPiServer/Web/Routing/PageRouteHelperExample.cs" region="PageRouteInformation" lang="cs" /></example>
    </member>
    <member name="P:EPiServer.Web.Routing.IPageRouteHelper.Page">
      <summary>
            Gets the current routed page.
            </summary>
      <remarks>
        <para>
            The property will be set the first time it gets called, and cached for the current instance.
            </para>
        <para>
            When a request is partial routed to another content instance, the partial routed instance can be retreived from <see cref="P:EPiServer.Web.Routing.IContentRouteHelper.Content" /></para>
      </remarks>
      <example>
            The following code example demonstrates how to get information about the requested CMS page for the current web request.
            <code source="../CodeSamples/EPiServer/Web/Routing/PageRouteHelperExample.cs" region="PageRouteInformation" lang="cs" /></example>
    </member>
    <member name="T:EPiServer.Web.Routing.IPartialRouter`2">
      <summary>
            Defines the signature for a component that extends routing to <see cref="T:EPiServer.Core.IContent" />.
            </summary>
      <remarks>
        <para>
            TContent specifies for which content types this implementation can partially route. 
            An example would be an url like 'http://sitehost/aPage/extendedPart/extendedContent/'. If there is a page matching url
            'http://sitehost/aPage/' then if the page can be assigned to TContent the instance of IPartialRouter can be called 
            to route the part 'extendedPart/extendedContent/'.
            </para>
        <para>
            TRoutedData specifies for which content types this implementation can extend outgoing url for. 
            An example would be the generation of an url like 'http://sitehost/aPage/extendedPart/extendedContent/'. If TRoutedData is assignable
            for the type matching extendedContent then this instance can be called to generate a partial virtual path. 
            </para>
      </remarks>
      <example>
            The below example is a partial router that routes URLs like 'http://sitehost/News/Sport/A%20News/'. In the example
            the URL part 'http://sitehost/News/' is to a page of type NewsContainer (the reference to that page is given by field _newsContainer)
            while the part 'Sport/A%20News' is handled by the partial router.
            <code source="../CodeSamples/Additional content/HowTo/PartialRouting/NewsPartialRouter.cs" region="NewsPartialRouter" lang="cs" /></example>
      <typeparam name="TContent">The type of <see cref="T:EPiServer.Core.IContent" /> for which routing can be extended.</typeparam>
      <typeparam name="TRoutedData">The type of <see cref="T:EPiServer.Core.IContent" /> for which outgoing URL generation can be extended.</typeparam>
    </member>
    <member name="M:EPiServer.Web.Routing.IPartialRouter`2.RoutePartial(`0,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>
            Implement to take care of partial routing below a routed content instance.
            </summary>
      <remarks>
        <para>
            During routing of an incoming request first the url will be parsed from left for pages as long as there is matches.
            If there is a remaining part (not matched by any page) after page routing then there is a check if there is any 
            IPartialRouter registered for the the type of the found page. If so that implementation is called to se if it can
            route the remaining part.
            </para>
        <para>
            An example would be an url like http://sitehost/aPage/extendedPart/extendedContent/. If there is a page matching url
            http://sitehost/aPage/ then if an IPartialRouter is registered for the type matching aPage that instance will be called 
            to route the part extendedPart/extendedContent/.
            </para>
        <para>
            Most commonly the returned data is of type TRoutedData. But there might be cases where it is something else, an example
            is in the Relate package where the returned object is in parameter <paramref name="content" />.
            </para>
      </remarks>
      <example>
            The below example is a partial router that routes URLs like 'http://sitehost/News/Sport/A%20News/'. In the example
            the URL part 'http://sitehost/News/' is to a page of type NewsContainer while the part 'Sport/A%20News' is handled
            by the partial router.
            <code source="../CodeSamples/Additional content/HowTo/PartialRouting/NewsPartialRouter.cs" region="RoutePartial" lang="cs" /></example>
      <param name="content">The content that the page route has been able to route to.</param>
      <param name="segmentContext">The segment context containing the remaining part of url.</param>
      <returns>A <see cref="T:EPiServer.Core.ContentReference" /> to the mathced data or null if the remaining part did not match.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.IPartialRouter`2.GetPartialVirtualPath(`1,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)">
      <summary>
            Gets a partial virtual path for a content item during routing.
            </summary>
      <param name="content">The content to generate a virtual path for.</param>
      <param name="language">The language to generate the url for.</param>
      <param name="routeValues">The route values.</param>
      <param name="requestContext">The request context.</param>
      <returns>
            A <see cref="T:EPiServer.Web.Routing.PartialRouteData" /> containing the partial virtual path for the content and a <see cref="T:EPiServer.Core.ContentReference" /> to the item to get base path from or null if the remaining part did not match.
            </returns>
      <remarks>
        <para>
            During construction of an URL for a <see cref="T:EPiServer.Core.IContent" /> instance there is a check if any IPartialRouter instance is registered
            for the type of the content. If so the IPartialRouter instance is called to generate a partial path of the URL.
            </para>
        <para>
            An example would be the generation of an url like http://sitehost/aPage/extendedPart/extendedContent/. If there is an IPartialRouter
            registered for the type matching extendedContent that instance will be called to generate a partial virtual path. In the example the
            implementation could return <see cref="P:EPiServer.Web.Routing.PartialRouteData.PartialVirtualPath" /> as 'extendedPart/extendedContent/' and
            <see cref="P:EPiServer.Web.Routing.PartialRouteData.BasePathRoot" /> set as a reference to the page that matches the url http://sitehost/aPage/.
            </para>
      </remarks>
      <example>
            The below example is a partial router that generates partial URLs like 'Sport/A%20News/'. In the example
            the URL part 'http://sitehost/News/' is to a page of type NewsContainer the reference to that page is given by field _newsContainer.
            The part 'Sport/A%20News' is handled by the partial router.
            <code source="../CodeSamples/Additional content/HowTo/PartialRouting/NewsPartialRouter.cs" region="GetPartialVirtualPath" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.Web.Routing.IRouteParser.Parse(System.String,System.Collections.Generic.IDictionary{System.String,EPiServer.Web.Routing.Segments.ISegment})">
      <summary>
            Parses the specified URL into segments
            </summary>
      <param name="url">
      </param>
      <param name="segmentMappings">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.ISimpleAddressRouteHandler">
      <summary>
            Handles simple address for outgoing requests.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.ISimpleAddressRouteHandler.GetRouteValues(System.String,EPiServer.Core.ContentReference,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>
            Tries to handle a segment value as a simple address.
            </summary>
      <param name="urlSegment">The simple address</param>
      <param name="routeRoot">The route root</param>
      <param name="segmentContext">The segment context. Note: This should be treated as read-only. Only values of
            the returned <see cref="T:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues" /> instance will be used.</param>
      <returns>
        <c>
          <see cref="T:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues" />
        </c> if <paramref name="urlSegment" /> was handled, otherwise <c>null</c></returns>
      <remarks>Don't change values on the <see cref="T:EPiServer.Web.Routing.Segments.SegmentContext" />, they will be lost on subsequent requests
            when the <see cref="T:EPiServer.Web.Routing.Segments.SimpleAddressRouteValues" /> is cached.</remarks>
    </member>
    <member name="T:EPiServer.Web.Routing.MapContentRouteParameters">
      <summary>
            Contains the optional parameter values for calls to MapContentRoute".
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.MapContentRouteParameters.#ctor">
      <summary>
            Creates a <see cref="T:EPiServer.Web.Routing.MapContentRouteParameters" /> object with the default values. Use the property accessors to change the default values.
            </summary>
      <remarks>
            The default values for the properties are:
            <list type="table"><listheader><term>Property name</term><description>Default value</description></listheader><item><term>ActionHandlers</term><description>null</description></item><item><term>Constraints</term><description>null</description></item><item><term>ControllerFinder</term><description>null</description></item><item><term>ControllerTypeMap</term><description>null</description></item><item><term>Direction</term><description>SupportedDirection.Both</description></item><item><term>RootDir</term><description>"/"</description></item><item><term>RouteHandler</term><description>null</description></item><item><term>RouteParser</term><description>null</description></item><item><term>SegmentMappings</term><description>null</description></item><item><term>ServiceLocator</term><description>null</description></item><item><term>UrlSegmentRouter</term><description>null</description></item><item><term>LanguageBranchRepository</term><description>null</description></item><item><term>ContentQueryable</term><description>null</description></item><item><term>PartialRouteHandler</term><description>null</description></item></list></remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.ActionHandlers">
      <summary>
            Handlers for unknown actions
            </summary>
      <remarks>
            Default value is null. A null value means that action handlers will be looked up via the service locator specified in <see cref="P:EPiServer.Web.Routing.MapContentRouteParameters.ServiceLocator" />.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.Constraints">
      <summary>
            Constrains for the route.
            </summary>
      <remarks>
            Default value is null. A constraint for the key "action" will automatically set up if the key is missing.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.ControllerTypeMap">
      <summary>
            Controler type map to use.
            </summary>
      <remarks>
            Default value is null. A null value means that the controller type map to use will be looked up via the service locator specified in <see cref="P:EPiServer.Web.Routing.MapContentRouteParameters.ServiceLocator" />.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.Direction">
      <summary>
            The supported route direction for this page route.
            </summary>
      <remarks>
            Default value is Both.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.BasePathResolver">
      <summary>
            Gets or sets the base path resolver.
            </summary>
      <value>
            The base path resolver.
            </value>
      <remarks>
            Default resolves as "/".
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.RouteHandler">
      <summary>
            The controller finder to use.
            </summary>
      <remarks>
            Default value is null. A null value means that the route handler to use will be looked up via the service locator specified in <see cref="P:EPiServer.Web.Routing.MapContentRouteParameters.ServiceLocator" />.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.RouteParser">
      <summary>
            The route parser to use.
            </summary>
      <remarks>
            Default value is null. A null value means that the route parser to use will be looked up via the service locator specified in <see cref="P:EPiServer.Web.Routing.MapContentRouteParameters.ServiceLocator" />.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.SegmentMappings">
      <summary>
            Segment mappings that will be used to parse a route.
            </summary>
      <remarks>
            Default value is null. Mappings for "node" and "simpleadress" will automatically be added.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.ServiceLocator">
      <summary>
            The route handler to use.
            </summary>
      <remarks>
            Default value is null. A null value means that <see cref="P:EPiServer.ServiceLocation.ServiceLocator.Current" /> will be used.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.UrlSegmentRouter">
      <summary>
            The url segment router to use.
            </summary>
      <remarks>
            Default value is null. A null value means that the url segment router to use will be looked up via the service locator specified in <see cref="P:EPiServer.Web.Routing.MapContentRouteParameters.ServiceLocator" />.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.LanguageBranchRepository">
      <summary>
            Gets or sets the language branch repository.
            </summary>
      <remarks>
            Default value is null. A null value means that <see cref="P:EPiServer.ServiceLocation.ServiceLocator.Current" /> will be used.
            </remarks>
      <value>The language branch repository.</value>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.ViewRegistrator">
      <summary>
            Gets or sets the view registrator.
            </summary>
      <value>
            The view registrator.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.ContentLoader">
      <summary>
            Gets or sets the content loader.
            </summary>
      <value>
            The content queryable.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.PartialRouteHandler">
      <summary>
            Gets or sets the partial route handler.
            </summary>
      <value>
            The partial route handler.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.TemplateResolver">
      <summary>
            Gets or sets the template resolver.
            </summary>
      <value>
            The template resolver.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.PermanentLinkMapper">
      <summary>
            Gets or sets the permanent link mapper.
            </summary>
      <value>
            The permanent link mapper.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.UrlResolver">
      <summary>
            Gets or sets the URL resolver.
            </summary>
      <value>
            The URL resolver.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.ContentVersionRepository">
      <summary>
            Gets or sets the content version repository.
            </summary>
      <value>
            The content version repository.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.UpdateCurrentLanguage">
      <summary>
            Gets or sets the implementation to update the current language.
            </summary>
      <value>
            The implementation of current language updating.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.MapContentRouteParameters.StrictLanguageRoutingResolver">
      <summary>
            Gets or sets the strict language handling resolver.
            </summary>
      <value>
            The strict language handling resolver.
            </value>
    </member>
    <member name="T:EPiServer.Web.Routing.PartialRouteData">
      <summary>
            When an outgoing virtual path is extended through implementations of <see cref="M:EPiServer.Web.Routing.IPartialRouter`2.GetPartialVirtualPath(`1,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)" />
            this states the partial virtual path and the <see cref="T:EPiServer.Core.ContentReference" /> for the content that should be used for base path.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.PartialRouteData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.PartialRouteData" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.PartialRouteData.BasePathRoot">
      <summary>
            Gets or sets the base path root of the generated virtual path.
            </summary>
      <remarks>
            An example would be the generation of an url like http://sitehost/aPage/extendedPart/extendedContent/ where http://sitehost/aPage/
            is the url for a page and 'extendedPart/extendedContent/' is an extension. In the example the 
            <see cref="P:EPiServer.Web.Routing.PartialRouteData.BasePathRoot" /> is set as a reference to the page that matches the url http://sitehost/aPage/.
            </remarks>
      <value>The base path root.</value>
    </member>
    <member name="P:EPiServer.Web.Routing.PartialRouteData.PartialVirtualPath">
      <summary>
            Gets or sets the partial virtual path for the generated virtual path.
            </summary>
      <remarks>
            An example would be the generation of an url like http://sitehost/aPage/extendedPart/extendedContent/ where http://sitehost/aPage/
            is the url for a page and 'extendedPart/extendedContent/' is an extension. In the example the
            implementation could return <see cref="P:EPiServer.Web.Routing.PartialRouteData.PartialVirtualPath" /> as 'extendedPart/extendedContent/'.
            </remarks>
      <value>The partial virtual path.</value>
    </member>
    <member name="P:EPiServer.Web.Routing.PartialRouteData.AdditionalUsedValues">
      <summary>
            Gets any additional used values consumed by the partial router. Generally you don't need to add anything to this,
            but you can add a key to mark data that would otherwise appear on the querystring as consumed.
            </summary>
      <value>
            The additional used values.
            </value>
    </member>
    <member name="T:EPiServer.Web.Routing.PartialRouteHandler">
      <summary>
            Handler that manages registered instances of <see cref="T:EPiServer.Web.Routing.IPartialRouter`2" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.PartialRouteHandler.#ctor(EPiServer.Framework.TypeScanner.TypeRelater)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.PartialRouteHandler" /> class.
            </summary>
      <param name="typeRelater">The type relater.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.PartialRouteHandler.RegisterPartialRouter(EPiServer.Web.Routing.PartialRouter)">
      <summary>
            Registers an instance of <see cref="T:EPiServer.Web.Routing.PartialRouter" />.
            </summary>
      <param name="partialRouter">The partial router.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.PartialRouteHandler.GetIncomingRouters(System.Type)">
      <summary>
            Gets the encapulated <see cref="T:EPiServer.Web.Routing.IPartialRouter`2" /> instances where TIncoming matches type for incoming routing.
            </summary>
      <remarks>
            In case there is <see cref="T:EPiServer.Web.Routing.IPartialRouter`2" /> routers where TIncoming is equal to <paramref name="type" /> those implementations are
            the first in the returned list. Other instances of <see cref="T:EPiServer.Web.Routing.IPartialRouter`2" /> where <paramref name="type" /> can be
            assigned to TIncoming is also returned.
            </remarks>
      <param name="type">The type.</param>
      <returns>An list of registered routers that match type.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.PartialRouteHandler.GetOutgoingRouters(System.Type)">
      <summary>
            Gets the encapulated <see cref="T:EPiServer.Web.Routing.IPartialRouter`2" /> instances where TOutgoing matches type for outgoing routing.
            </summary>
      <remarks>
            In case there is <see cref="T:EPiServer.Web.Routing.IPartialRouter`2" /> routers where TIncoming is equal to <paramref name="type" /> those implementations are
            the first in the returned list. Other instances of <see cref="T:EPiServer.Web.Routing.IPartialRouter`2" /> where <paramref name="type" /> can be
            assigned to TIncoming is also returned.
            </remarks>
      <param name="type">The type.</param>
      <returns>An list of registered routers that match type.</returns>
    </member>
    <member name="P:EPiServer.Web.Routing.PartialRouteHandler.HasOutgoingRouters">
      <summary>
            Gets a value indicating whether this instance has outgoing routers.
            </summary>
      <value>
        <c>true</c> if this instance has outgoing routers; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.PartialRouteHandler.HasInComingRouters">
      <summary>
            Gets a value indicating whether this instance has in coming routers.
            </summary>
      <value>
        <c>true</c> if this instance has in coming routers; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Web.Routing.PartialRouter">
      <summary>
            Encapsulates an instance of <see cref="T:EPiServer.Web.Routing.IPartialRouter`2" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.PartialRouter.RoutePartial(EPiServer.Core.IContent,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>
            Delegates a request to <see cref="M:EPiServer.Web.Routing.IPartialRouter`2.RoutePartial(`0,EPiServer.Web.Routing.Segments.SegmentContext)" />.
            </summary>
      <param name="content">The content to extend routing for.</param>
      <param name="segmentContext">The segment context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.PartialRouter.GetPartialVirtualPath(System.Object,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)">
      <summary>
            Delegates a request to the encapsulated <see cref="M:EPiServer.Web.Routing.IPartialRouter`2.GetPartialVirtualPath(`1,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)" />.
            </summary>
      <param name="linkedData">The data to get a url for.</param>
      <param name="language">The language.</param>
      <param name="routeValues">The route values.</param>
      <param name="requestContext">The request context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.PartialRouter`2">
      <summary>
            The concrete typed implementation of <see cref="T:EPiServer.Web.Routing.PartialRouter" />.
            </summary>
      <typeparam name="TIncoming">The type for which incoming routing is extended.</typeparam>
      <typeparam name="TOutgoing">The type for which outgoing routing is extended.</typeparam>
    </member>
    <member name="M:EPiServer.Web.Routing.PartialRouter`2.#ctor(EPiServer.Web.Routing.IPartialRouter{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.PartialRouter`2" /> class.
            </summary>
      <param name="partialRouter">The partial router.</param>
    </member>
    <member name="P:EPiServer.Web.Routing.PartialRouter`2.Router">
      <summary>
            Gets the encapsulated <see cref="T:EPiServer.Web.Routing.IPartialRouter`2" /> instance.
            </summary>
      <value>The router.</value>
    </member>
    <member name="M:EPiServer.Web.Routing.PartialRouter`2.RoutePartial(EPiServer.Core.IContent,EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>
            Delegates the request to encapulated <see cref="M:EPiServer.Web.Routing.IPartialRouter`2.RoutePartial(`0,EPiServer.Web.Routing.Segments.SegmentContext)" />.
            </summary>
      <param name="content">The content.</param>
      <param name="segementContext">The segement context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.PartialRouter`2.GetPartialVirtualPath(System.Object,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)">
      <summary>
            Delegates the request to the encapsulated <see cref="M:EPiServer.Web.Routing.IPartialRouter`2.GetPartialVirtualPath(`1,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)" />.
            </summary>
      <param name="linkedData">The data to create a FURL for.</param>
      <param name="language">The language.</param>
      <param name="routeValues">The route values.</param>
      <param name="requestContext">The request context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextEventArgs.#ctor(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.RequestContextEventArgs" /> class.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="P:EPiServer.Web.Routing.RequestContextEventArgs.RequestContext">
      <summary>
            Gets the request context.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.RequestContextEventArgs.RouteValues">
      <summary>
            Gets the route values.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.RequestContextExtension">
      <summary>
            Extension methods on request Context such as et/Set Node, Lang, Controller
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RequestContextExtension.RenderingTagName">
      <summary>
            The rendering tag name
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetRoutedData``1(System.Web.Routing.RequestContext)">
      <summary>
            Gets the data that the content route routed to from request context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="requestContext">The request context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetRoutedData(System.Web.Routing.RequestContext,System.Object)">
      <summary>
            Sets the data that the content route routed to from request context.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="routedData">The routed data.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetContentLink(System.Web.Routing.RequestContext)">
      <summary>
            Gets the node from request Context.
            </summary>
      <param name="reqContext">The req context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetContentLink(System.Web.Routing.RequestContext,EPiServer.Core.ContentReference)">
      <summary>
            Sets the content link.
            </summary>
      <param name="reqContext">The req context.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetOriginalRoutedLink(System.Web.Routing.RequestContext)">
      <summary>
            Gets the <see cref="T:EPiServer.Core.ContentReference" /> for the "ordinary" CMS routing. This will
            be the root before partial routing or a page with a shortcut.
            In case a partial router or a page with shortcut
            replaces <see cref="P:EPiServer.Web.Routing.Segments.SegmentContext.RoutedContentLink" /> then this will contain the "ordinary" routed reference.
            </summary>
      <param name="reqContext">The req context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetOriginalRoutedLink(System.Web.Routing.RequestContext,EPiServer.Core.ContentReference)">
      <summary>
            Sets the <see cref="T:EPiServer.Core.ContentReference" /> for the "ordinary" CMS routing. This will
            be the root before partial routing or shortcut handling. In case a partial router or a page with shortcut
            replaces <see cref="P:EPiServer.Web.Routing.Segments.SegmentContext.RoutedContentLink" /> then this will contain the "ordinary" routed reference.
            </summary>
      <param name="reqContext">The req context.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetIgnorePartialRouting(System.Web.Routing.RequestContext)">
      <summary>
            Sets the ignore partial routing.
            </summary>
      <param name="reqContext">The req context.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetIgnorePartialRouting(System.Web.Routing.RequestContext)">
      <summary>
            Gets the ignore partial routing.
            </summary>
      <param name="reqContext">The req context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetLanguage(System.Web.Routing.RequestContext)">
      <summary>
            Gets the lang from request context.
            </summary>
      <param name="reqContext">The req context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetLanguage(System.Web.Routing.RequestContext,System.String)">
      <summary>
            Sets the lang as custom data on request conetx .
            </summary>
      <param name="reqContext">The req context.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetController(System.Web.Routing.RequestContext)">
      <summary>
            Gets the controller name from required data on request conetxt.
            </summary>
      <param name="reqContext">The req context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetControllerType(System.Web.Routing.RequestContext,System.Type)">
      <summary>
            Sets the type of the controller in the <see cref="T:System.Web.Routing.RouteData" /> values.
            </summary>
      <param name="requestContext">The request context containing the <see cref="T:System.Web.Routing.RouteData" /> values.</param>
      <param name="controller">The controller.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetControllerType(System.Web.Routing.RequestContext)">
      <summary>
            Gets the type of the controller from the <see cref="T:System.Web.Routing.RouteData" /> values.
            </summary>
      <param name="requestContext">The request context containing the <see cref="T:System.Web.Routing.RouteData" /> values.</param>
      <returns>The type of the controller that is stored in the <see cref="T:System.Web.Routing.RouteData" /> values.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetController(System.Web.Routing.RequestContext,System.String)">
      <summary>
            Sets the controller name on required data on request conetxt.
            </summary>
      <param name="reqContext">The req context.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetCustomRouteData``1(System.Web.Routing.RequestContext,System.String)">
      <summary>
            Gets the custom route data from request context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="reqContext">The req context.</param>
      <param name="code">The code.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetCustomRouteData``1(System.Web.Routing.RequestContext,System.String,``0)">
      <summary>
            Sets the custom route data on request context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="reqContext">The req context.</param>
      <param name="code">The code.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetRequiredString(System.Web.Routing.RequestContext,System.String)">
      <summary>
            Gets the required string from request context.
            </summary>
      <param name="reqContext">The req context.</param>
      <param name="code">The code.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetRequiredString(System.Web.Routing.RequestContext,System.String,System.String)">
      <summary>
            Sets the required string on request conetxt.
            </summary>
      <param name="reqContext">The req context.</param>
      <param name="code">The code.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetContextMode(System.Web.Routing.RequestContext)">
      <summary>
            Gets the context mode.
            </summary>
      <param name="reqContext">The request context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.IsInEditMode(System.Web.Routing.RequestContext)">
      <summary>
            Determines if the request context is in edit mode.
            </summary>
      <param name="requestContext">The request context</param>
      <returns>
        <code>true</code> if the context is in edit mode; otherwise <code>false</code></returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetContextMode(System.Web.Routing.RequestContext,EPiServer.Web.ContextMode)">
      <summary>
            Sets the lang as custom data on request context.
            </summary>
      <param name="reqContext">The req context.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.SetContextEditMode(System.Web.Routing.RequestContext)">
      <summary>
            Sets the context mode to 'edit'.
            </summary>
      <param name="reqContext">The request context.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetRouteValue(System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>
            Gets a value based on <see cref="T:EPiServer.Web.Routing.RoutingConstants" /> from a route segment from the route value dictionary, the route data values, or route data tokens
            </summary>
      <param name="name">The name of the route segment</param>
      <param name="requestContext">Reques context</param>
      <param name="values">Route values</param>
      <returns>The value from the route segment. Null if there is no value</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RequestContextExtension.GetRequestContext(System.Web.HttpContext)">
      <summary>
            Gets the request context.
            </summary>
      <param name="context">The context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.RequiredDefaultsConstraint">
      <summary>
            A constraint used to determine if the supplied route values does not differ from the default route values.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.RequiredDefaultsConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
      <summary>
            Tries to match the <paramref name="values" /> with the <paramref name="route" /> default values.
            </summary>
      <remarks>
            First checks if <paramref name="values" /> contains a controller value. If a controller value is found it will not match against <paramref name="route" /> default values.
            </remarks>
      <param name="httpContext">Not used in this constraint.</param>
      <param name="route">The route whose defaults is used to determine a match.</param>
      <param name="parameterName">Not used in this constraint.</param>
      <param name="values">The values to match against the <paramref name="route" /> default values.</param>
      <param name="routeDirection">Not used in this constraint.</param>
      <returns>True if <paramref name="values" /> contains a controller value or if it matches <paramref name="route" /> default values with the same key. Otherwise false.</returns>
    </member>
    <member name="T:EPiServer.Web.Routing.RouteCollectionExtensions">
      <summary>
            Contains extension methods for <see cref="T:System.Web.Routing.RouteCollection" />.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RouteCollectionExtensions.GlobalAssetStaticSegment">
      <summary>
            Specifies the static segment that by default is used for global media.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RouteCollectionExtensions.SiteAssetStaticSegment">
      <summary>
            Specifies the static segment that by default is used for site specific media.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.RouteCollectionExtensions.MediaStaticSegmentPlaceHolder">
      <summary>
            Specifies the placeholder for the static segment that will be exchanged for <see cref="F:EPiServer.Web.Routing.RouteCollectionExtensions.GlobalAssetStaticSegment" /> or
            <see cref="F:EPiServer.Web.Routing.RouteCollectionExtensions.SiteAssetStaticSegment" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapContentRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,EPiServer.Web.Routing.MapContentRouteParameters)">
      <summary>
            Creates and adds a content route to the route collection.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <param name="parameters">Additional parameter values for the route.</param>
      <returns>The content route that was added to the collection.</returns>
      <remarks>If a content route with the same name exists, it will be overwritten.</remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapContentRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>
            Creates and adds a content route to the route collection.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <returns>The content route that was added to the collection.</returns>
      <remarks>If a content route with the same name exists, it will be overwritten.</remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapSimpleAddressRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>
            Creates and adds a simple adress route to the route collection.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <param name="constraints">Constraints that a URL request must meet in order to be processed as this route.</param>
      <remarks>If a page route with the same name exists, it will be overwritten.</remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapContentAssetsRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>
            Creates and adds a route for content assets to the route collection.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <remarks>
            If a page route with the same name exists, it will be overwritten.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapSimpleAddressRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>
            Creates and adds a simple adress route to the route collection.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <remarks>If a page route with the same name exists, it will be overwritten.</remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapEnterpriseRoutes(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>
            Creates and adds site page routes to the route collection. One route will be added for each site instance found in the configuration.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <param name="constraints">Constraints that a URL request must meet in order to be processed as this route.</param>
      <remarks>
        <para>
                    For each site other than the one running in this application (i.e. another site in an Enterprise setup)
                    its SiteId will be appended to <paramref name="name" /> before the route is added to the collection.
                </para>
        <para>If a page route with the same name exists, it will be overwritten.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapEnterpriseRoutes(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>
            Creates and adds site page routes to the route collection. One route will be added for each site instance found in the configuration.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <remarks>
        <para>
                    For each site other than the one running in this application (i.e. another site in an Enterprise setup)
                    its SiteId will be appended to <paramref name="name" /> before the route is added to the collection.
                </para>
        <para>If a page route with the same name exists, it will be overwritten.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapAssetRoutes(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.String,System.String,System.String)">
      <summary>
            Creates and adds site media routes to the route collection. One route will be added for each media root found in the <see cref="T:EPiServer.Web.SiteDefinition" />.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <param name="staticSegmentPlaceHolder">The static segment place holder that should be part of url if not null</param>
      <param name="globalReplacement">The global replacement that will replace staticSegmentPlaceHolder for global media roots</param>
      <param name="siteReplacement">The site replacement that will replace staticSegmentPlaceHolder for site media roots</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapContentRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Func{EPiServer.Web.SiteDefinition,EPiServer.Core.ContentReference})">
      <summary>
            Creates and adds a route below content root to the route collection.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <param name="contentRootResolver">The content root resolver.</param>
      <remarks>
            If a content route with the same name exists, it will be overwritten.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.GetVirtualPath(System.Web.Routing.RouteCollection,EPiServer.Core.ContentReference,System.String)">
      <summary>
            Returns the virtual path for the page as it is specified by the first matching route.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="contentLink">The content reference for which to the virtual path.</param>
      <param name="language">The language code that should be used when creating the virtual path.</param>&gt;
            <returns>The virtual path for the page if it handled by a route in the collection; otherwise, <c>null</c>.</returns></member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.GetVirtualPath(System.Web.Routing.RouteCollection,EPiServer.Core.ContentReference,System.String,System.Boolean,System.Boolean)">
      <summary>
            Returns the virtual path for the page as it is specified by the first matching route.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="contentLink">The content reference for which to the virtual path.</param>
      <param name="language">The language code that should be used when creating the virtual path.</param>
      <param name="setIdAsQueryParameter">if set to <c>true</c> the page id is set as query parameter.</param>
      <param name="forceIsInEditMode">if set to <c>true</c> the virtual path will be created as if it was created in edit mode.</param>
      <returns>
            The virtual path for the page if it handled by a route in the collection; otherwise, <c>null</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.GetVirtualPath(System.Web.Routing.RouteCollection,EPiServer.Core.ContentReference,System.String,System.Boolean)">
      <summary>
            Returns the virtual path for the page as it is specified by the first matching route.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="contentLink">The content reference for which to the virtual path.</param>
      <param name="language">The language code that should be used when creating the virtual path.</param>
      <param name="forceIsInEditMode">if set to <c>true</c> the virtual path will be created as if it was created in edit mode.</param>
      <returns>
            The virtual path for the page if it handled by a route in the collection; otherwise, <c>null</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.GetVirtualPath(System.Web.Routing.RouteCollection,EPiServer.Core.ContentReference,System.String,EPiServer.Web.ContextMode)">
      <summary>
            Returns the virtual path for the page as it is specified by the first matching route.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="contentLink">The content reference for which to the virtual path.</param>
      <param name="language">The language code that should be used when creating the virtual path.</param>
      <param name="contextMode">Either a specific context mode or <see cref="F:EPiServer.Web.ContextMode.Undefined" /> to follow the context mode for the current request.</param>
      <returns>
            The virtual path for the page if it handled by a route in the collection; otherwise, <c>null</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.GetVirtualPath(System.Web.Routing.RouteCollection,EPiServer.Core.ContentReference,System.String,EPiServer.Web.ContextMode,System.Object)">
      <summary>
            Returns the virtual path for the page as it is specified by the first matching route.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="contentLink">The content reference for which to the virtual path.</param>
      <param name="language">The language code that should be used when creating the virtual path.</param>
      <param name="contextMode">Either a specific context mode or <see cref="F:EPiServer.Web.ContextMode.Undefined" /> to follow the context mode for the current request.</param>
      <param name="routeValues">The route values.</param>
      <returns>
            The virtual path for the page if it handled by a route in the collection; otherwise, <c>null</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapPageRootRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>
            Creates and adds a route that handles the pages outside of the start page to the route collection.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <remarks>
            This registration should be last of all items for better performance. It acts for both incoming and outgoing requests.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.MapPageRootRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>
            Creates and adds a route that handles the pages outside of the start page to the route collection.
            </summary>
      <param name="routes">The route collection instance that this method extends.</param>
      <param name="name">The name of the route.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">Default values for the route parameters.</param>
      <param name="constraints">Constraints that a URL request must meet in order to be processed as this route.</param>
      <remarks>
            This registration should be last of all items for better performance. It acts for both incoming and outgoing requests.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.RegisterRoutes(System.Web.Routing.RouteCollection)">
      <summary>
            Registers the routes. 
            Register routes which can handle pages which are as simpleadder 
            Or inside of an enterprise site or outside of start page
            </summary>
      <param name="routes">The routes.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.RegisterPartialRouter``2(System.Web.Routing.RouteCollection,EPiServer.Web.Routing.IPartialRouter{``0,``1})">
      <summary>
            Registers an instance of <see cref="T:EPiServer.Web.Routing.IPartialRouter`2" /> that extends routing for <see cref="T:EPiServer.Core.IContent" /> instances.
            </summary>
      <typeparam name="TContent">The type of <see cref="T:EPiServer.Core.IContent" /> for which incoming routing can be extended.</typeparam>
      <typeparam name="TRoutedData">The type for which outgoing routing is extended to.</typeparam>
      <param name="routes">The routes</param>
      <param name="partialRouter">The partial router that extends content routing.</param>
      <returns>The routecollection</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteCollectionExtensions.HandleRouteData(System.Web.Routing.RouteCollection,System.Web.HttpContextBase)">
      <summary>
            Tries the get route data and save the route data inside the context which can be used for incoming calls to GetRoutedata.
            </summary>
      <param name="routes">The routes.</param>
      <param name="context">The context.</param>
      <returns>
            true if the request path is handled by registers routes otherwise return false.
            </returns>
      <remarks>
            If there is a registered route for the context (request path) then the related routedata is kept inside the context.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.Routing.RouteRegistrationEventArgs">
      <summary>
            Event arguments used in <see cref="E:EPiServer.Global.RoutesRegistrating" /> and <see cref="E:EPiServer.Global.RoutesRegistered" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.RouteRegistrationEventArgs.#ctor(System.Web.Routing.RouteCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.RouteRegistrationEventArgs" /> class.
            </summary>
      <param name="routes">The routes.</param>
    </member>
    <member name="P:EPiServer.Web.Routing.RouteRegistrationEventArgs.Routes">
      <summary>
            Gets the registered routes.
            </summary>
      <value>
            The routes.
            </value>
    </member>
    <member name="T:EPiServer.Web.Routing.RoutingEventArgs">
      <summary>
            Arument used during content routing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.RoutingEventArgs.#ctor(EPiServer.Web.Routing.Segments.SegmentContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.RoutingEventArgs" /> class.
            </summary>
      <param name="segmentContext">The segment context.</param>
    </member>
    <member name="P:EPiServer.Web.Routing.RoutingEventArgs.RoutingSegmentContext">
      <summary>
            Gets the routing segment context.
            </summary>
      <value>The routing segment context.</value>
    </member>
    <member name="P:EPiServer.Web.Routing.RoutingEventArgs.CancelFurtherRouting">
      <summary>
            Gets or sets a value indicating whether further routing should be cancelled.
            </summary>
      <remarks>
            This can be used e.g. if RoutedContentLink has been set on <see cref="P:EPiServer.Web.Routing.RoutingEventArgs.RoutingSegmentContext" /> and no further routing is needed.
            </remarks>
      <value>
        <c>true</c> if further routing should be cancelled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.Routing.RoutingOptions.UseTrailingSlash">
      <summary>
            Gets or sets a value indicating whether a trailing slash should be added for urls to content.
            </summary>
      <remarks>Default value is true.</remarks>
      <value>
        <c>true</c> if a trailing slash should be used; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.Routing.RoutingOptions.EnableRecursivePartialRouting">
      <summary>
            Specifies if the result of a successful partial routing should be propagated to further partial routing.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.RoutingOptions.UsePrimaryHostForEditAndPreviewUrls">
      <summary>
            Specifies that the <see cref="T:EPiServer.Web.HostDefinitionType" /> that is <see cref="F:EPiServer.Web.HostDefinitionType.Primary" /> should be used when generating edit and preview urls.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.RoutingOptions.UsePrimaryHostForOutgoingUrls">
      <summary>
            Specifies that the <see cref="T:EPiServer.Web.HostDefinitionType" /> that is <see cref="F:EPiServer.Web.HostDefinitionType.Primary" /> should be used when generating outgoing url.
            </summary>
      <remarks>This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.</remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.RoutingOptions.ConfigureForExternalTemplates">
      <summary>
            Configures routing to support that templates are deployed in a separate application
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.SupportedDirection">
      <summary>
            Specifies which route directions the Route supports
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.SupportedDirection.None">
      <summary>
            No direction supported
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.SupportedDirection.Incoming">
      <summary>
            Supports routing for incoming URLs
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.SupportedDirection.Outgoing">
      <summary>
            Supports routing for outgoing URLs
            </summary>
    </member>
    <member name="F:EPiServer.Web.Routing.SupportedDirection.Both">
      <summary>
            Supports routing for both incoming and outgoing URLs
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.UrlBuilderEventArgs">
      <summary>
            Event args for the <see cref="T:EPiServer.UrlBuilder" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlBuilderEventArgs.#ctor(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary,EPiServer.UrlBuilder)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.UrlBuilderEventArgs" /> class.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="routeValues">The route values.</param>
      <param name="urlBuilder">The URL builder.</param>
    </member>
    <member name="P:EPiServer.Web.Routing.UrlBuilderEventArgs.UrlBuilder">
      <summary>
            Gets the URL builder.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Routing.VirtualPathArguments">
      <summary>
            Used as argument in for example <see cref="M:EPiServer.Web.Routing.UrlResolver.GetUrl(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.VirtualPathArguments)" /> to create an outgoing url.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.VirtualPathArguments.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Routing.VirtualPathArguments" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.VirtualPathArguments.ContextMode">
      <summary>
             Gets or sets the mode for the links.
             </summary>
      <remarks>If not explicitly set it will use current <see cref="P:EPiServer.Web.Routing.VirtualPathArguments.ContextMode" /></remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.VirtualPathArguments.RequestContext">
      <summary>
             Gets or sets the request context.
             </summary>
      <remarks>If not explicitly a new instance of <see cref="P:EPiServer.Web.Routing.VirtualPathArguments.RequestContext" /> will be created.</remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.VirtualPathArguments.RouteValues">
      <summary>
             Gets or sets the route values.
             </summary>
      <remarks>If not explicitly a new instance of <see cref="T:System.Web.Routing.RouteValueDictionary" /> will be created.</remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.VirtualPathArguments.ValidateTemplate">
      <summary>
            Gets or sets a value indicating whether there should be a validation that checks if the <see cref="T:EPiServer.Core.IContent" /> type has a template.
            If the type has no template and ValidateTemplate is true, the <see cref="T:EPiServer.Web.Routing.UrlResolver" /> will return null as the URL.
            </summary>
      <remarks>
        <para>
                The default value is true.
            </para>
        <para>
                To get Url for a <see cref="T:EPiServer.Core.ContentFolder" /> (which has no template) set ValidateTemplate = false.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.Routing.VirtualPathArguments.Action">
      <summary>
            Gets or sets the action method that should be linked to.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.VirtualPathArguments.ForceCanonical">
      <summary>
            Gets or sets a value indicating whether the canonical URL should be returned if there are multiple hostnames
            defined for the site.
            </summary>
      <remarks>
        <para>
                If not set explicitly, the hostname of the resolved URL will be dependent on the current context.
                If the resolved content is on a different site than the current, the canonical URL will always be returned.
                If the content is on the same site, the canonical URL will only be returned if the current hostname is set
                to be redirected.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Web.Routing.UrlResolver">
      <summary>
            Class that routes an url to the corresponding <see cref="T:EPiServer.Core.IContent" /> instance or vice versa.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.UrlResolver.RoutedQueryParameters">
      <summary>
            Contains a list of query parameters that are passed on to routing.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.UrlResolver.Current">
      <summary>
            Gets the current instance from the <see cref="T:EPiServer.ServiceLocation.ServiceLocator" />.
            </summary>
      <value>
            The current instance.
            </value>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.Route(EPiServer.UrlBuilder)">
      <summary>
            Routes the URL to the corresponding <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <param name="urlBuilder">The URL builder.</param>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.Route(EPiServer.UrlBuilder,EPiServer.Web.ContextMode)">
      <summary>
            Routes the URL to the corresponding <see cref="T:EPiServer.Core.IContent" /> instance.
            </summary>
      <param name="urlBuilder">The URL builder.</param>
      <param name="contextMode">The ContextMode</param>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetUrl(EPiServer.Core.ContentReference)">
      <summary>
            Gets the URL for a <see cref="T:EPiServer.Core.IContent" /> instance that is given by reference <paramref name="contentLink" />.
            </summary>
      <remarks>
        <para>
            This method will get the URL for the language given by <see cref="P:EPiServer.Globalization.ContentLanguage.PreferredCulture" />.
            </para>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="contentLink" /> is on current site
            and current request matches host that matches content and language. Overload GetVirtualPath can be used to always get relative virtual path.
            </para>
      </remarks>
      <param name="contentLink">The content link.</param>
      <returns>A string representing the URL or <c>null</c> if it was not possible to create a route to the content (for example the content does not exist or has no template)</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetUrl(EPiServer.Core.IContent)">
      <summary>
            Gets the URL for the <paramref name="content" /> instance.
            </summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="content" /> is on current site
            and current request matches host that matches content and language. Overload GetVirtualPath can be used to always get relative virtual path.
            </para>
      </remarks>
      <param name="content">The content instance.</param>
      <returns>A string representing the URL or <c>null</c> if it was not possible to create a route to the content (for example the content does not exist or has no template)</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetUrl(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Gets the URL for a <see cref="T:EPiServer.Core.IContent" /> instance that is given by reference <paramref name="contentLink" /></summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="contentLink" /> is on current site
            and current request matches host that matches content and language. Overload GetVirtualPath can be used to always get relative virtual path.
            </para>
      </remarks>
      <param name="contentLink">The content.</param>
      <param name="language">The language.</param>
      <returns>A string representing the URL or <c>null</c> if it was not possible to create a route to the content (for example the content does not exist or has no template)</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetUrl(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.VirtualPathArguments)">
      <summary>
            Gets the URL for a <see cref="T:EPiServer.Core.IContent" /> instance that is given by argument <paramref name="virtualPathArguments" />.
            </summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="contentLink" /> is on current site
            and current request matches host that matches content and language. Overload GetVirtualPath can be used to always get relative virtual path.
            </para>
      </remarks>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
      <param name="virtualPathArguments">The virtual path arguments.</param>
      <returns>A string representing the URL or <c>null</c> if it was not possible to create a route to the content (for example the content does not exist or has no template)</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetVirtualPath(EPiServer.Core.ContentReference)">
      <summary>
            Gets the url for a <see cref="T:EPiServer.Core.IContent" /> instance that is given by reference <paramref name="contentLink" /></summary>
      <remarks>
        <para>
            This method will get the url for the language given by <see cref="P:EPiServer.Globalization.ContentLanguage.PreferredCulture" />.
            </para>
        <para>
            The returned value <see cref="P:System.Web.Routing.VirtualPathData.VirtualPath" /> is always a relative path (host and application is not included), call extension method GetUrl on
            VirtualPathData to get an absolute path (there is an overload that can be used if authority part should not be included).
            </para>
      </remarks>
      <param name="contentLink">The content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetVirtualPath(EPiServer.Core.IContent)">
      <summary>
            Gets the url for the <paramref name="content" /> instance.
            </summary>
      <remarks>
        <para>
            The returned value <see cref="P:System.Web.Routing.VirtualPathData.VirtualPath" /> is always a relative path (host and application is not included), call extension method GetUrl on
            VirtualPathData to get an absolute path (there is an overload that can be used if authority part should not be included).
            </para>
      </remarks>
      <param name="content">The content instance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetVirtualPath(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Gets the url for a <see cref="T:EPiServer.Core.IContent" /> instance that is given by reference <paramref name="contentLink" /></summary>
      <remarks>
        <para>
            The returned value <see cref="P:System.Web.Routing.VirtualPathData.VirtualPath" /> is always a relative path (host and application is not included), call extension method GetUrl on
            VirtualPathData to get an absolute path (there is an overload that can be used if authority part should not be included).
            </para>
      </remarks>
      <param name="contentLink">The content.</param>
      <param name="language">The language.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetVirtualPath(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.VirtualPathArguments)">
      <summary>
            Gets the url for a <see cref="T:EPiServer.Core.IContent" /> instance that is given by reference <paramref name="virtualPathArguments" /></summary>
      <remarks>
        <para>
            The returned value <see cref="P:System.Web.Routing.VirtualPathData.VirtualPath" /> is always a relative path (host and application is not included), call extension method GetUrl on
            VirtualPathData to get an absolute path (there is an overload that can be used if authority part should not be included).
            </para>
      </remarks>
      <param name="contentLink">The content link.</param>
      <param name="language">The language.</param>
      <param name="virtualPathArguments">The virtual path arguments.</param>
      <returns>A virtual path or <c>null</c> if it was not possible to create a route to the content (for example the content does not exist or has no template)</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetUrl(System.String)">
      <summary>
            Resolves the URL for an item from an URL with internal format.
            </summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="internalUrl" /> is on current site
            and current request matches host that matches content and language. Overload GetVirtualPath can be used to always get relative virtual path.
            </para>
      </remarks>
      <param name="internalUrl">The URL with a internal format.</param>
      <returns>A URL in string representation.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetUrl(EPiServer.UrlBuilder,EPiServer.Web.ContextMode)">
      <summary>
            Resolves the URL for an item from an URL with internal format.
            </summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="urlBuilderWithInternalUrl" /> is on current site
            and current request matches host that matches content and language. Overload GetVirtualPath can be used to always get relative virtual path.
            </para>
      </remarks>
      <param name="urlBuilderWithInternalUrl">The URL with a internal format.</param>
      <param name="mode">The <see cref="T:EPiServer.Web.ContextMode" /> that determines the format of the link.</param>
      <returns>
            A URL in string representation.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetUrl(EPiServer.UrlBuilder,EPiServer.Web.Routing.VirtualPathArguments)">
      <summary>
            Resolves the URL for an item from an URL with internal format.
            </summary>
      <remarks>
        <para>
            The returned url can be relative or absolute (including host) depending on if the <paramref name="urlBuilderWithInternalUrl" /> is on current site
            and current request matches host that matches content and language. Overload GetVirtualPath can be used to always get relative virtual path.
            </para>
      </remarks>
      <param name="urlBuilderWithInternalUrl">The URL with a internal format.</param>
      <param name="arguments">The <see cref="T:EPiServer.Web.Routing.VirtualPathArguments" /> that determines the format of the link.</param>
      <returns>
            A URL in string representation.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetPermanent(System.String,System.Boolean)">
      <summary>
            Tries to resolve the URL to a permanent URL. If this does not possible it returns the original URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="enableFallback">If set to <c>true</c> returns the given URL if the conversion fails.</param>
      <returns>Either a permanent URL or the given URL/String.Empty depending on if fallback is enabled.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.TryToPermanent(System.String,System.String@)">
      <summary>
            Tries to convert a URL with either a public, preview or permanent format to a permanent URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="permanentUrl">The permanent URL.</param>
      <returns>True if the conversion succeded, otherwise; false.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.EPiServer#Web#Routing#IUrlResolver#GetUrl(EPiServer.Core.ContentReference,System.String,EPiServer.Web.Routing.UrlResolverArguments)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.EPiServer#Web#Routing#IUrlResolver#GetUrl(EPiServer.UrlBuilder,EPiServer.Web.Routing.UrlResolverArguments)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetVirtualPathForNonContent(System.Object,System.String,EPiServer.Web.Routing.VirtualPathArguments)">
      <summary>
            Gets the virtual path for an object that is not an <see cref="T:EPiServer.Core.IContent" /> object
            but has been routed by a partial router.
            </summary>
      <param name="partialRoutedObject">The partial routed object.</param>
      <param name="language">The language.</param>
      <param name="virtualPathArguments">The virtual path arguments.</param>
      <returns>
      </returns>
      <remarks>
        <para>
            For virtual path to <see cref="T:EPiServer.Core.IContent" />, use the GetVirtualPath method
            with the content's ContentReference, which also handles cases where the content
            is partial routed.
            </para>
        <para>
            The returned value <see cref="P:System.Web.Routing.VirtualPathData.VirtualPath" /> is always a relative path (host and application is not included), call extension method GetUrl on
            VirtualPathData to get an absolute path (there is an overload that can be used if authority part should not be included).
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.Routing.UrlResolver.GetVirtualPath(EPiServer.Core.ContentReference,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RequestContext)">
      <summary>
            Gets the url for a <see cref="T:EPiServer.Core.IContent" /> instance that is given by reference <paramref name="contentLink" /></summary>
      <remarks>
        <para>
            The returned value <see cref="P:System.Web.Routing.VirtualPathData.VirtualPath" /> is always a relative path (host and application is not included), call extension method GetUrl on
            VirtualPathData to get an absolute path (there is an overload that can be used if authority part should not be included).
            </para>
      </remarks>
      <param name="contentLink">The content.</param>
      <param name="language">The language.</param>
      <param name="routeValues">The route values.</param>
      <param name="requestContext">The request context.</param>
      <returns>A virtual path or <c>null</c> if it was not possible to create a route to the content (for example the content does not exist or has no template)</returns>
    </member>
    <member name="T:EPiServer.Web.Routing.VirtualPathDataExtensions">
      <summary>
                Contains extension methods that are useful when working with <see cref="T:System.Web.Routing.VirtualPathData" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Routing.VirtualPathDataExtensions.GetUrl(System.Web.Routing.VirtualPathData)">
      <summary>
                Returns a URL from the routing information stored in the virtual path data. 
            </summary>
      <remarks>
                You should use this method instead of the <see cref="P:System.Web.Routing.VirtualPathData.VirtualPath" /> property 
                as it will take multiple site configuration (CMS enterprise sites) into consideration.
            </remarks>
      <param name="virtualPathData">The VirtualPathData instance this method extends.</param>
      <returns>A string containing the URL.</returns>
    </member>
    <member name="M:EPiServer.Web.Routing.VirtualPathDataExtensions.GetUrl(System.Web.Routing.VirtualPathData,System.Boolean)">
      <summary>
                Returns a URL from the routing information stored in the virtual path data. 
            </summary>
      <param name="virtualPathData">The VirtualPathData instance this method extends.</param>
      <param name="multiSiteSupport">If value is true then will the host for the site be added in case the virtual path is to another site than current http request (or
            if no http context is available).</param>
      <returns>A string containing the relative path.</returns>
    </member>
    <member name="T:EPiServer.Web.Routing.ContentRoute">
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.ContentRouteHelper">
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Routing.PageRouteHelper">
      <exclude />
    </member>
    <member name="M:EPiServer.Web.FullRefreshEditHintCollection`1.#ctor(System.Collections.Generic.IList{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.FullRefreshEditHintCollection`1" /> class.
            </summary>
      <param name="fullRefreshHints">The full refresh hints.</param>
    </member>
    <member name="P:EPiServer.Web.FullRefreshEditHintCollection`1.FullRefreshProperties">
      <summary>
            Gets the list containing the names of properties that have been registered for full refresh.
            </summary>
    </member>
    <member name="M:EPiServer.Web.FullRefreshEditHintCollection`1.AddFullRefreshFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
            Adds a property to the collection of properties that needs full refresh in edit mode.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="contentDataProperty">The content data property.</param>
    </member>
    <member name="T:EPiServer.Web.HierarchicalUrlRewriteProvider">
      <summary>
            The UrlRewriteProvider that handles rewriting of urls.
            </summary>
    </member>
    <member name="M:EPiServer.Web.HierarchicalUrlRewriteProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.HierarchicalUrlRewriteProvider" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.HierarchicalUrlRewriteProvider.#ctor(EPiServer.IContentRepository,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Web.TemplateResolver,EPiServer.Web.Routing.UrlResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.HierarchicalUrlRewriteProvider" /> class.
            </summary>
      <param name="contentRepository">The <see cref="T:EPiServer.IContentRepository" /> to use</param>
      <param name="contentTypeRepository">The <see cref="T:EPiServer.DataAbstraction.PageTypeRepository" /> to use.</param>
      <param name="templateResolver">The template resolver.</param>
      <param name="urlResolver">The URL resolver.</param>
    </member>
    <member name="M:EPiServer.Web.HierarchicalUrlRewriteProvider.ConvertToInternal(EPiServer.UrlBuilder,System.Object@)">
      <summary>
            Converts to internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            There is no support for changing encoding when converting to internal, since there is no requirement for this.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.HierarchicalUrlRewriteProvider.TryConvertToInternal(EPiServer.UrlBuilder,System.Globalization.CultureInfo@,System.Object@)">
      <summary>
            Converts to internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="preferredCulture">The preferred culture.</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            There is no support for changing encoding when converting to internal, since there is no requirement for this.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.HierarchicalUrlRewriteProvider.ConvertToExternal(EPiServer.UrlBuilder,System.Object,System.Text.Encoding)">
      <summary>
            Converts from internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <param name="toEncoding">The current encoding</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            When converting to external, we may need to change the encoding used for escaped characters in the URL to conform
            to response encoding requirements which may differ from the internally stored format - which should always be UTF-8.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.HierarchicalUrlRewriteProvider.GetHtmlRewriter">
      <summary>
            Gets an instance of a Html-rewriter to use when emitting HTML from EPiServer.
            </summary>
      <returns>
            A new instance of a HtmlRewriteToExternal-derived class
            </returns>
    </member>
    <member name="M:EPiServer.Web.HierarchicalUrlRewriteProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes
            specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
      <exception cref="T:System.InvalidOperationException">
            An attempt is made to call System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
            on a provider after the provider has already been initialized.
            </exception>
      <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
    </member>
    <member name="M:EPiServer.Web.HierarchicalUrlRewriteProvider.ConvertToExternalInternal(EPiServer.UrlBuilder,System.Object,System.Text.Encoding)">
      <summary>
            Converts from internal EPiServer classic to the external 'friendly' URL representation.
            This is the only method that defines this mapping. It includes all globally valid rules for this
            transformation in the context of EPiServer, but not rules dependent on for example on the current
            running mode, i.e. view mode, edit mode etc or similar. The conversion must take language preferences
            into account when determining language.
            </summary>
      <param name="url">The URL.</param>
      <param name="internalObject">The internal representation of the object, if any. Typically it may be a PageReference.</param>
      <param name="toEncoding">To encoding.</param>
      <returns>True if any changes done to the url, False otherwise.</returns>
      <remarks>
            This is the only method that defines this mapping. It includes all globally valid rules for this
            transformation in the context of EPiServer, but not rules dependent on for example on the current
            running mode, i.e. view mode, edit mode etc or similar. The conversion must take language preferences
            into account when determining language.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.HierarchicalUrlRewriteProvider.GetFriendlyPagePath(EPiServer.Core.ContentReference,System.String)">
      <summary>
            Gets the friendly page path.
            </summary>
      <param name="contentReference">The page reference.</param>
      <param name="currentLanguageBranch">The current language branch.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Web.HierarchicalUrlRewriteProvider.UrlIdentifiers">
      <summary>
            Gets the list of URL identifiers.
            </summary>
      <value>The URL identifiers.</value>
      <remarks>
            The URL identifiers are scanned sequentially until one is found that will handle the current URL.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.HostNameResolver">
      <summary>
            Abstract class for resolving host name from uri.
            </summary>
    </member>
    <member name="M:EPiServer.Web.HostNameResolver.Get(System.Uri)">
      <summary>
            Get the host name for the the <paramref name="uri" />.
            </summary>
      <remarks>
            If the <paramref name="uri" /> is absolute path then the host name is authority part of uri. 
            If the <paramref name="uri" /> is relative then host name resolves from current httpcontext part.
            If the <paramref name="uri" /> is relative and the hosting environment is none web context (e.g. scheduler service) then host name resolves from <see cref="T:EPiServer.Web.SiteDefinitionResolver" />.
            </remarks>
      <param name="uri">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.HtmlRewriteElementType">
      <summary>
            An html element types enumeration for the types used by <see cref="T:EPiServer.Web.UrlRewriteProvider" /></summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.other">
      <summary>
            An element type other than the specified in the enumeration
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.A">
      <summary>
            An anchor element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.SCRIPT">
      <summary>
            A script element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.IMG">
      <summary>
            An image element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.FORM">
      <summary>
            A form element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.INPUT">
      <summary>
            An input element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.BASE">
      <summary>
            A BASE element.
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.AREA">
      <summary>
            An Area element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.LINK">
      <summary>
            A link element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.OBJECT">
      <summary>
            An object element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.HEAD">
      <summary>
            A head element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.BLOCKQUOTE">
      <summary>
            A blockquote element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.Q">
      <summary>
            A q element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.INSDEL">
      <summary>
            An insdel element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.FRAME">
      <summary>
            A frame element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.IFRAME">
      <summary>
            An iframe element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.BODY">
      <summary>
            A body element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.STYLE">
      <summary>
            A style element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.APPLET">
      <summary>
            An applet element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.PARAM">
      <summary>
            A param element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.EMBED">
      <summary>
            An embed element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.AUDIO">
      <summary>
            An audio element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.SOURCE">
      <summary>
            A source element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.TRACK">
      <summary>
            A track element
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteElementType.VIDEO">
      <summary>
            A video element
            </summary>
    </member>
    <member name="T:EPiServer.Web.HtmlRewriteEventArgs">
      <summary>
            Arguments for various events raised by the HTML rewriter-parser
            </summary>
    </member>
    <member name="T:EPiServer.Web.HtmlRewriteEventArgs.StringMorph">
      <summary>
            Small helper to bridge between String and StringBuilder. The idea
            is that an original value may be presented as either a String or
            a StringBuilder. This value may subsequently be modified via a
            StringBuilder.
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteEventArgs.StringMorph._string">
      <summary>
            The original value, if passed as a string to the constructor, or a cache
            of the StringBuilder value, if we have not given out a reference to the
            StringBuilder.
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteEventArgs.StringMorph._resultBuilder">
      <summary>
            The original value, if passed as a StringBuilder to the constructor, or
            the potentially updated value if we have given out a reference to it.
            </summary>
    </member>
    <member name="F:EPiServer.Web.HtmlRewriteEventArgs.StringMorph._hasReturnedBuilderReference">
      <summary>
            Flag to keep track of if we can use _string as a cache for the string
            representation of the builder value. This can only be done when we have
            not given out an external reference to the StringBuilder. In a perfect
            world we would have access to the reference count, but we don't...
            </summary>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteEventArgs.StringMorph.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.HtmlRewriteEventArgs.StringMorph" /> class using a String.
            </summary>
      <param name="s">The string</param>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.StringMorph.ResultBuilder">
      <summary>
            Gets the StringBuilder representation of the string
            </summary>
      <value>The result builder.</value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.StringMorph.CurrentString">
      <summary>
            Gets the current string as a String
            </summary>
      <value>The current string.</value>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteEventArgs.#ctor(EPiServer.Web.RewritePipe)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> class.
            </summary>
      <param name="rewritePipe">The rewrite pipe.</param>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteEventArgs.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> class.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteEventArgs.#ctor(EPiServer.Web.RewritePipe,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> class.
            </summary>
      <param name="rewritePipe">The rewrite pipe.</param>
      <param name="context">The context.</param>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.QuoteChar">
      <summary>
            Gets or sets the quote char used in attribute value definitions.
            </summary>
      <value>The quote char.</value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.IsInsidePreventUrlElement">
      <summary>
            Gets or sets the flag telling if itÂ´s inside an element with the prevent url attrebute.
            </summary>
      <value>The quote char.</value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.HtmlElementType">
      <summary>
            Gets or sets the type of the element.
            </summary>
      <value>The type of the element.</value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.NodeType">
      <summary>
            Gets or sets the type of the node.
            </summary>
      <value>The type of the node.</value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.IsHoldingOutput">
      <summary>
            Gets or sets a value indicating whether we should be holding output.
            This requires the external event handlers to take care of things.
            </summary>
      <value>
        <c>true</c> if this instance is holding output; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.Name">
      <summary>
            Gets or sets the name of the element, attribute etc.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.NameBuilder">
      <summary>
            Gets or sets the StringBuilder aspect of the Name.
            </summary>
      <value>The StringBuilder</value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.IsEmptyElement">
      <summary>
            Gets or sets a value indicating whether this is an empty element.
            </summary>
      <value>
        <c>true</c> if this is empty element; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.Value">
      <summary>
            Gets or sets the value of the element, attribute etc.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.ValueBuilder">
      <summary>
            Gets or sets the StringBuilder aspect of the Value
            </summary>
      <value>The StringBuilder</value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.RewritePipe">
      <summary>
            Gets or sets the HtmlRewritePipe instance.
            </summary>
      <value>The HtmlRewritePipe instance.</value>
    </member>
    <member name="P:EPiServer.Web.HtmlRewriteEventArgs.Context">
      <summary>
            Gets or sets an opaque context
            </summary>
    </member>
    <member name="T:EPiServer.Web.HtmlRewriteToExternal">
      <summary>
            Abstract base class for URL-rewriting of URIs in streams and strings.
            </summary>
    </member>
    <member name="E:EPiServer.Web.HtmlRewriteToExternal.HtmlRewritingUrl">
      <summary>
            Raised when rewriting a URL in HTML. Use this event to do preliminary rewriting, or replace the rewriting
            entirely, or even cancel the rewriting entirely.
            </summary>
    </member>
    <member name="E:EPiServer.Web.HtmlRewriteToExternal.HtmlRewroteUrl">
      <summary>
            Raised when we've rewritten a URL in HTML. Use this event to do post-processing of the now rewritten URL.
            </summary>
    </member>
    <member name="E:EPiServer.Web.HtmlRewriteToExternal.HtmlRewriteInit">
      <summary>
            Raised to enable subscribers to subscribe to specific HtmlRewritePipe and HtmlRewriteFromInternal events.
            </summary>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteToExternal.GetRewriteFilter(EPiServer.UrlBuilder,EPiServer.UrlBuilder,System.Text.Encoding,System.IO.Stream,EPiServer.Web.RewritePipe@)">
      <summary>
            Gets a rewrite filter stream
            </summary>
      <param name="internalUrl">The internal URL.</param>
      <param name="externalUrl">The external URL.</param>
      <param name="encoding">The encoding to use when escaping URI:s</param>
      <param name="stream">The incoming stream.</param>
      <param name="rewritePipe">The rewrite pipe.</param>
      <returns>The filtered, rewritten, stream</returns>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteToExternal.RewriteString(EPiServer.UrlBuilder,EPiServer.UrlBuilder,System.Text.Encoding,System.String)">
      <summary>
            Rewrites the URIs in a HTML string. It does so in the context of an internal and external URL, providing
            the necessary rebasing for relative URIs.
            </summary>
      <param name="internalUrl">The internal context URL.</param>
      <param name="externalUrl">The external context URL.</param>
      <param name="encoding">The encoding used to escape URIs, and for initial PI if such is included</param>
      <param name="html">The HTML to be parsed and rewritten</param>
      <returns>The rewritten string</returns>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteToExternal.OnHtmlRewriteInit(EPiServer.Web.HtmlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.HtmlRewriteToExternal.HtmlRewriteInit" /> event. Override in derived classes to add your handlers.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteToExternal.RaiseEvent(System.EventHandler{EPiServer.Web.UrlRewriteEventArgs},EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Helper to raise an event.
            </summary>
      <param name="handler">The handler.</param>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteToExternal.OnHtmlRewritingUrl(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.HtmlRewriteToExternal.HtmlRewritingUrl" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.HtmlRewriteToExternal.OnHtmlRewroteUrl(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.HtmlRewriteToExternal.HtmlRewroteUrl" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Web.HttpContextExtensions">
      <summary>
            Extension methods for <see cref="T:System.Web.HttpContext" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.HttpContextExtensions.ContextBaseOrNull(System.Web.HttpContext)">
      <summary>
            Extension method that wraps <see cref="T:System.Web.HttpContext" /> in a <see cref="T:System.Web.HttpContextWrapper" /> or returns 
            null if <paramref name="httpContext" /> is null.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.HttpContextExtensions.RequestBaseOrNull(System.Web.HttpContext)">
      <summary>
            Extension method that wraps <see cref="P:System.Web.HttpContext.Request" /> object in a <see cref="T:System.Web.HttpRequestWrapper" /> or returns 
            null if <paramref name="httpContext" /> is null.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.HttpContextExtensions.HostName(System.Web.HttpRequestBase)">
      <summary>
            Attempts to get the hostname that was requested, either from the headers or the URL of the current request.
            </summary>
      <param name="request">The request to extract the hostname from.</param>
      <returns>The hostname as extracted from the request or null if not found or if the request is null.</returns>
    </member>
    <member name="T:EPiServer.Web.HttpRequestSupport">
      <summary>
            Static utility class to identify if a request / URL refers to an EPiServer system folder.
            </summary>
    </member>
    <member name="P:EPiServer.Web.HttpRequestSupport.IsRequestSystemDirectory">
      <summary>
            Gets a value indicating whether the current request refers to a system directory.
            </summary>
      <value>
        <c>true</c> if this request is system directory; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Web.HttpRequestSupport.IsSystemDirectory(System.String)">
      <summary>
            Determines whether the path refers to a system directory.
            </summary>
      <param name="urlPath">The path</param>
      <returns>
        <c>true</c> if the given path refers to a system directory; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Web.IAccessDeniedHandler">
      <summary>
            Component that will handle access denied reporting for the current request context.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IAccessDeniedHandler.AccessDenied(System.Web.HttpContextBase)">
      <summary>
            Called by different components when the current request should result in an 
            access denied response.
            </summary>
    </member>
    <member name="T:EPiServer.Web.IContentControl">
      <summary>
            Indicates that a control is responsible for maintaining its render context state.
            </summary>
    </member>
    <member name="P:EPiServer.Web.IContentControl.CurrentContext">
      <summary>
            Gets the current render context of the control instance.
            </summary>
    </member>
    <member name="T:EPiServer.Web.IContentDataControl">
      <summary>
            Defines the signature that a webcontrol/usercontrol that renders content data must implement
            </summary>
    </member>
    <member name="P:EPiServer.Web.IContentDataControl.CurrentData">
      <summary>
            Gets or sets the data of the content that should be rendered by the control.
            </summary>
      <value>The block data.</value>
    </member>
    <member name="T:EPiServer.Web.IContentDataControl`1">
      <summary>
            Defines the signature that a webcontrol/usercontrol that renders content data should implement.
            </summary>
      <typeparam name="T">The type of content data that is rendering.</typeparam>
    </member>
    <member name="P:EPiServer.Web.IContentDataControl`1.CurrentData">
      <summary>
            Gets or sets the content data that should be rendered by the control.
            </summary>
      <value>The block data.</value>
    </member>
    <member name="T:EPiServer.Web.IContentAreaItemAttributeAssembler">
      <summary>
            Constructs client side edit activation attributes for <see cref="T:EPiServer.Core.ContentAreaItem" />s. 
            </summary>
    </member>
    <member name="M:EPiServer.Web.IContentAreaItemAttributeAssembler.GetAttributes(EPiServer.Core.ContentAreaItem,System.Boolean,System.Boolean)">
      <summary>
            Gets a dictionary containing markup attributes necessary for supporting editable <see cref="T:EPiServer.Core.ContentAreaItem" />s in rendered markup.
            </summary>
      <param name="contentAreaItem">The content area item to assemble attributes for.</param>
      <param name="isRenderedInEditMode">set to <c>true</c> when the fragment is rendered in edit mode.</param>
      <param name="hasRenderer">A value stating whether a renderer exists for the fragment.</param>
      <returns>A dictionary with attribute names and values for a content fragment</returns>
    </member>
    <member name="T:EPiServer.Web.IDisplayChannelService">
      <summary>
            Service that handles <see cref="T:EPiServer.Web.DisplayChannel" /> instances.
            </summary>
    </member>
    <member name="P:EPiServer.Web.IDisplayChannelService.Channels">
      <summary>
            Gets all registered channels.
            </summary>
      <remarks>
            The property is not thread safe meaning all modifications should occour during Initialization.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.IDisplayChannelService.GetActiveChannels(System.Web.HttpContextBase)">
      <summary>
            Gets all <see cref="T:EPiServer.Web.DisplayChannel" /> instances that are considered active for specified <paramref name="context" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IDisplayChannelService.RegisterDisplayMode(System.Web.WebPages.IDisplayMode,System.Int32,System.String)">
      <summary>
            Registers an <see cref="T:System.Web.WebPages.IDisplayMode" /> instance as an <see cref="T:EPiServer.Web.DisplayChannel" />.
            </summary>
      <param name="displayMode">The display mode.</param>
      <param name="index">The index of where the instance is registered.</param>
      <param name="resolutionId">The resolution id.</param>
      <example>
            The following example shows the registration of a simple channel for MVC that is active for mobile request.
            <code source="../CodeSamples/EPiServerNET/Web/DisplayChannelSample.cs" region="MVC" lang="cs" /></example>
    </member>
    <member name="T:EPiServer.Web.DisplayChannelServiceExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Web.IDisplayChannelService" /> with convenient methods
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayChannelServiceExtensions.RegisterDisplayMode(EPiServer.Web.IDisplayChannelService,System.Web.WebPages.IDisplayMode)">
      <summary>
            Registers an <see cref="T:System.Web.WebPages.IDisplayMode" /> instance as an <see cref="T:EPiServer.Web.DisplayChannel" />.
            </summary>
      <example>
            The following example shows the registration of a simple channel for MVC that is active for mobile request.
            <code source="../CodeSamples/EPiServerNET/Web/DisplayChannelSample.cs" region="MVC" lang="cs" /></example>
      <param name="displayChannelService">The service that is being extended</param>
      <param name="displayMode">The display mode.</param>
    </member>
    <member name="M:EPiServer.Web.DisplayChannelServiceExtensions.RegisterDisplayMode(EPiServer.Web.IDisplayChannelService,System.Web.WebPages.IDisplayMode,System.Int32)">
      <summary>
            Registers an <see cref="T:System.Web.WebPages.IDisplayMode" /> instance as an <see cref="T:EPiServer.Web.DisplayChannel" />.
            </summary>
      <example>
            The following example shows the registration of a simple channel for MVC that is active for mobile request.
            <code source="../CodeSamples/EPiServerNET/Web/DisplayChannelSample.cs" region="MVC" lang="cs" /></example>
      <param name="displayChannelService">The service that is being extended</param>
      <param name="displayMode">The display mode.</param>
      <param name="index">The index of where the instance is registered.</param>
    </member>
    <member name="T:EPiServer.Web.IHandleUrlForRewrite">
      <summary>
            Interface for handling URL rewriting in the <see cref="T:EPiServer.Web.HierarchicalUrlRewriteProvider" />.
            </summary>
      <remarks>
            This interface handles non-cached requests for a specific URL
            </remarks>
    </member>
    <member name="M:EPiServer.Web.IHandleUrlForRewrite.TryHandleUrl(EPiServer.Web.UrlRewriteContext,System.Object@,EPiServer.Web.CachedUrlHandler@)">
      <summary>
            Tries to handle the URL gven in the context.
            </summary>
      <param name="context">The context for the rewrite. Note that the URL of the context may be modified.</param>
      <param name="internalObject">The internal object representation.</param>
      <param name="handler">The cached handler.</param>
      <returns>True if the URL was recognized and handled, False otherwise.</returns>
      <remarks>
        <para>
            If this method returns False (URL not handled), then the context, internalObject and handler should be unaffected.
            </para>
        <para>
            If the method returns True (URL handled), then UrlRewritten will indicate if the context.Url property has been modified. The 
            method may optionally return a CachedUrlHandler in the handler parameter in this case as well.
            </para>
        <para>
            Returning a non-null value in handler is how you indicate that you have want to cache expensive url lookups
            and reuse for subsequent calls. 
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.IHandleUrlForRewrite.UrlRewritten">
      <summary>
            Gets a value indicating whether the URL was rewritten as a result of the TryHandleUrl method.
            </summary>
      <value>
        <c>true</c> if URL was rewritten; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:EPiServer.Web.InitializationModule">
      <summary>
            Initialization of the EPiServer CMS runtime.
            </summary>
    </member>
    <member name="P:EPiServer.Web.InitializationModule.HostType">
      <summary>
            Gets or sets the type of the host.
            </summary>
      <value>The type of the host.</value>
    </member>
    <member name="M:EPiServer.Web.InitializationModule.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.InitializationModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="context">The context.</param>
      <remarks>
            Gets called as part of the EPiServer Framework initialization sequence. Note that it will be called
            only once per AppDomain, unless the method throws an exception. If an exception is thrown, the initialization
            method will be called repeadetly for each request reaching the site until the method succeeds.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.InitializationModule.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>
            Resets the module into an uninitialized state.
            </summary>
      <param name="context">The context.</param>
      <remarks>
        <para>
            This method is usually not called when running under a web application since the web app may be shut down very
            abruptly, but your module should still implement it properly since it will make integration and unit testing
            much simpler.
            </para>
        <para>
            Any work done by <see cref="M:EPiServer.Web.InitializationModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)" /> as well as any code executing on <see cref="E:EPiServer.Framework.Initialization.InitializationEngine.InitComplete" /> should be reversed.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Web.Internal.VirtualPathProviderHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. URL handler implementation for Virtual Paths
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.VirtualPathProviderHandler.RewriteFromCachedData(EPiServer.Web.UrlRewriteContext,System.Object@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the URL from cached data.
            </summary>
      <param name="context">The context.</param>
      <param name="internalObject">The internal object.</param>
      <returns>
            True if the URL was rewritten, false otherwise.
            </returns>
      <remarks>
            For Virtual Paths, no rewriting will be done, so this implementation will always return False.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.VirtualPathProviderHandler.TryHandleUrl(EPiServer.Web.UrlRewriteContext,System.Object@,EPiServer.Web.CachedUrlHandler@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to handle the URL gven in the context.
            </summary>
      <param name="context">The context for the rewrite. Note that the URL of the context may be modified.</param>
      <param name="internalObject">The internal object representation.</param>
      <param name="handler">The cached handler.</param>
      <returns>
            True if the URL was recognized and handled, False otherwise.
            </returns>
      <remarks>
        <para>
            If this method returns False (URL not handled), then the context, internalObject and handler should be unaffected.
            </para>
        <para>
            If the method returns True (URL handled), then UrlRewritten will indicate if the context.Url property has been modified. The
            method may optionally return a CachedUrlHandler in the handler parameter in this case as well.
            </para>
        <para>
            Returning a non-null value in handler is how you indicate that you have want to cache expensive url lookups
            and reuse for subsequent calls.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.VirtualPathProviderHandler.UrlRewritten">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether the URL was rewritten as a result of the TryHandleUrl method.
            </summary>
      <value>
        <c>true</c> if URL was rewritten; otherwise, <c>false</c>.</value>
      <remarks>
            For Virtual paths, the URL is never rewritten so this implementation will always return false.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.SimpleAddressHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. URL handler implementation for "simple address to page"
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.SimpleAddressHandler.#ctor(EPiServer.IContentRepository,System.Func{EPiServer.UrlBuilder,System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.SimpleAddressHandler" /> class.
            </summary>
      <param name="contentRepository">The <see cref="T:EPiServer.IContentRepository" /> to use.</param>
      <param name="simpleAddressToInternal">A function that converts a UrlBuilder to internal representation (in this case a PageReference).</param>
      <remarks>
            This constructor is used when crearing an instance to be used in the URL handler lookup chain.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.SimpleAddressHandler.#ctor(EPiServer.IContentRepository,System.Uri,System.Object,System.Func{EPiServer.UrlBuilder,System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.SimpleAddressHandler" /> class to be cached.
            </summary>
      <param name="contentRepository">The <see cref="T:EPiServer.IContentRepository" /> to use.</param>
      <param name="rewrittenUrl">The rewritten URL.</param>
      <param name="actualInternalObject">The actual internal object.</param>
      <param name="simpleAddressToInternal">A function that converts a UrlBuilder to internal representation (in this case a PageReference).</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.SimpleAddressHandler.RewriteFromCachedData(EPiServer.Web.UrlRewriteContext,System.Object@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the URL from cached data.
            </summary>
      <param name="context">The context.</param>
      <param name="internalObject">The internal object.</param>
      <returns>
            True if the URL was rewritten, false otherwise.
            </returns>
      <remarks>
            This implementation will always rewrite the URL and therefore always returns True.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.SimpleAddressHandler.TryHandleUrl(EPiServer.Web.UrlRewriteContext,System.Object@,EPiServer.Web.CachedUrlHandler@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to handle the URL gven in the context.
            </summary>
      <param name="context">The context for the rewrite. Note that the URL of the context may be modified.</param>
      <param name="internalObject">The internal object representation.</param>
      <param name="handler">The cached handler.</param>
      <returns>
            True if the URL was recognized and handled, False otherwise.
            </returns>
      <remarks>
        <para>
            If this method returns False (URL not handled), then the context, internalObject and handler should be unaffected.
            </para>
        <para>
            If the method returns True (URL handled), then UrlRewritten will indicate if the context.Url property has been modified. The
            method may optionally return a CachedUrlHandler in the handler parameter in this case as well.
            </para>
        <para>
            Returning a non-null value in handler is how you indicate that you have want to cache expensive url lookups
            and reuse for subsequent calls.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.SimpleAddressHandler.UrlRewritten">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether the URL was rewritten as a result of the TryHandleUrl method.
            </summary>
      <value>
        <c>true</c> if URL was rewritten; otherwise, <c>false</c>.</value>
      <remarks>
            If a URL is handled, then it is always rewritten. I e this implementation will always return True.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.NoHitUrlHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of no-hit caching
            </summary>
      <remarks>
            Put at the very end of URL handlers to cache requests for non-existing URL:s. These URL:s will otherwise be the most 
            expensive to process since every handler must check its namespace to verify non-existence.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.NoHitUrlHandler.RewriteFromCachedData(EPiServer.Web.UrlRewriteContext,System.Object@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the URL from cached data.
            </summary>
      <param name="context">The context.</param>
      <param name="internalObject">The internal object.</param>
      <returns>
            Will always return <c>false</c>, since non-existing URL:s should not be rewritten.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.NoHitUrlHandler.TryHandleUrl(EPiServer.Web.UrlRewriteContext,System.Object@,EPiServer.Web.CachedUrlHandler@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to handle the URL gven in the context.
            </summary>
      <param name="context">The context for the rewrite. Note that the URL of the context may be modified.</param>
      <param name="internalObject">The internal object representation.</param>
      <param name="handler">The cached handler.</param>
      <returns>
            True if the URL was recognized and handled, False otherwise.
            </returns>
      <remarks>
            Since we are handling a non-existing URL (this will be the last handler in the chain), we will always return True
            to indicate that it was handled.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.NoHitUrlHandler.UrlRewritten">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether the URL was rewritten as a result of the TryHandleUrl method.
            </summary>
      <value>Will always return <c>false</c>, since non-existing URL:s should not be rewritten.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.ContentMediaHttpHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A HTTP Handler that deliver binary large objects from IContentMedia.BinaryData.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.ContentMediaHttpHandler.GetBlob(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the routed BLOB from the request.
            </summary>
      <remarks>
            The implementation returns IContentMedia.BinaryData.
            </remarks>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.ContextModeResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.ContextModeResolver.EPiServer#Web#IContextModeResolver#CurrentMode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.ControlRenderContextBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Responsible for building a <see cref="T:EPiServer.Web.PropertyContext" /> for the current location of a specific <see cref="T:System.Web.UI.Control" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.ControlRenderContextBuilder.BuildContext(System.Web.UI.Control,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Builds up a render context object from the location of the control and property name.
            </summary>
      <param name="control">The control that we should build the context for.</param>
      <param name="propertyName">Name of the property that the control represents.</param>
      <returns>A ContentContext object representing the current context of the control.</returns>
      <remarks>
        <para>
                The control needs to be added to the control tree for this method to return a
                proper context object.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.ControlRenderContextBuilder.BuildContext(System.Web.UI.Control,System.String,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Builds up a context object from the location of the control and property name
            plus optional data from a previous data binding.
            </summary>
      <param name="control">The control that we should build the context for.</param>
      <param name="propertyName">Name of the property that the control represents.</param>
      <param name="boundData">Information on the bound context data. Normally a page ID.</param>
      <returns>
            A ContentContext object representing the current context of the control.
            </returns>
      <remarks>
        <para>
            The control needs to be added to the control tree for this method to return a
            proper context object.
              </para>
        <para>
            The <paramref name="boundData" /> is used when rebuilding the context after a postback.
              </para>
      </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.DefaultContentAreaItemAttributeAssembler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructs client side edit activation attributes for <see cref="T:EPiServer.Core.Html.StringParsing.ContentFragment" />s. 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultContentAreaItemAttributeAssembler.#ctor(EPiServer.Framework.Serialization.IObjectSerializerFactory,EPiServer.Web.IContentAreaLoader)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.DefaultContentAreaItemAttributeAssembler" /> class.
            </summary>
      <param name="serializerFactory">The serializer factory. Used when serializing some attribute values into JSON</param>
      <param name="contentAreaLoader">The registered context area loader</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultContentAreaItemAttributeAssembler.GetAttributes(EPiServer.Core.ContentAreaItem,System.Boolean,System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a dictionary containing markup attributes necessary for supporting editable <see cref="T:EPiServer.Core.Html.StringParsing.ContentFragment" />s in rendered markup.
            </summary>
      <param name="contentAreaItem">The fragment to assemble attributes for.</param>
      <param name="isRenderedInEditMode">set to <c>true</c> when the fragment is rendered in edit mode.</param>
      <param name="hasRenderer">A value stating whether a renderer exists for the fragment.</param>
      <returns>A dictionary with attribute names and values for a content fragment</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultContentAreaItemAttributeAssembler.AppendPersonalizationAttributes(System.Collections.Generic.IDictionary{System.String,System.String},EPiServer.Core.ContentAreaItem)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Appends the personalization attributes to the attributes collection.
            </summary>
      <param name="attributes">The attribute collection to which the persionalization attibutes are appended.</param>
      <param name="contentAreaItem">The fragment to create personalization attributes for.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultContentAreaItemAttributeAssembler.Serialize(System.Object,EPiServer.Framework.Serialization.IObjectSerializerFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Serializes the specified data to JSON format using a serializer found in the provided serializer factory. 
            </summary>
      <param name="data">The data to serialize.</param>
      <param name="serializerFactory">The serializer factory.</param>
      <returns>A string containing with the serialized data</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.DefaultDisplayChannelService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Service that handles <see cref="T:EPiServer.Web.DisplayChannel" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultDisplayChannelService.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.DefaultDisplayChannelService" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.DefaultDisplayChannelService.Channels">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all registered channels.
            </summary>
      <value>The channels.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultDisplayChannelService.RegisterDisplayMode(System.Web.WebPages.IDisplayMode)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers an <see cref="T:System.Web.WebPages.IDisplayMode" /> instance as an <see cref="T:EPiServer.Web.DisplayChannel" />.
            </summary>
      <example>
            The following example shows the registration of a simple channel for MVC that is active for mobile request.
            <code source="../CodeSamples/EPiServerNET/Web/DisplayChannelSample.cs" region="MVC" lang="cs" /></example>
      <param name="displayMode">The display mode.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultDisplayChannelService.RegisterDisplayMode(System.Web.WebPages.IDisplayMode,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers an <see cref="T:System.Web.WebPages.IDisplayMode" /> instance as an <see cref="T:EPiServer.Web.DisplayChannel" />.
            </summary>
      <example>
            The following example shows the registration of a simple channel for MVC that is active for mobile request.
            <code source="../CodeSamples/EPiServerNET/Web/DisplayChannelSample.cs" region="MVC" lang="cs" /></example>
      <param name="displayMode">The display mode.</param>
      <param name="index">The index of where the instance is registered.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultDisplayChannelService.RegisterDisplayMode(System.Web.WebPages.IDisplayMode,System.Int32,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers an <see cref="T:System.Web.WebPages.IDisplayMode" /> instance as an <see cref="T:EPiServer.Web.DisplayChannel" />.
            </summary>
      <param name="displayMode">The display mode.</param>
      <param name="index">The index of where the instance is registered.</param>
      <param name="resolutionId">The resolution id.</param>
      <example>
            The following example shows the registration of a simple channel for MVC that is active for mobile request.
            <code source="../CodeSamples/EPiServerNET/Web/DisplayChannelSample.cs" region="MVC" lang="cs" /></example>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultDisplayChannelService.GetActiveChannels(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all <see cref="T:EPiServer.Web.DisplayChannel" /> instances that are considered active for specified <paramref name="context" />.
            </summary>
      <param name="context">The context.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.DefaultDisplayChannelService.EditPath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the edit path
            Sets the edit path. Main purpose forusing it in tests.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultHostNameResolver.#ctor(EPiServer.Web.ISiteDefinitionResolver,EPiServer.Web.IRequestHostResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.DefaultHostNameResolver" /> type.
            </summary>
      <param name="siteDefinitionResolver">The SiteDefinitionResolver.</param>
      <param name="requesthostResolver">A resolver for hostname from request</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultHostNameResolver.Get(System.Uri)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the hostname from <paramref name="uri" />.
            If <paramref name="uri" /> is null or relative then try to get from HttpRequest.
            If it is called from none web context such as scheduler service then the hostname be resolved by <see cref="T:EPiServer.Web.SiteDefinitionResolver" />.
            </summary>
      <param name="uri">The request uri.</param>
      <returns>Returns the hostname or null</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.DisplayModeChannel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A <see cref="T:EPiServer.Web.DisplayChannel" /> implementation that wraps a <see cref="T:System.Web.WebPages.IDisplayMode" /> 
            instance.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DisplayModeChannel.#ctor(System.Web.WebPages.IDisplayMode)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.DisplayModeChannel" /> class.
            </summary>
      <param name="displayMode">The display mode.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DisplayModeChannel.#ctor(System.Web.WebPages.IDisplayMode,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.DisplayModeChannel" /> class.
            </summary>
      <param name="displayMode">The display mode.</param>
      <param name="resolutionId">The resolution id.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DisplayModeChannel.IsActive(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified channel is active given the specified context.
            </summary>
      <remarks>
            The call will be delegated to the wrapped <see cref="M:System.Web.WebPages.IDisplayMode.CanHandleContext(System.Web.HttpContextBase)" /></remarks>
      <param name="context">The context.</param>
      <returns>
        <c>true</c> if the specified channel is active; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.DisplayModeChannel.ChannelName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the name of the channel.
            </summary>
      <value>The name of the channel.</value>
      <remarks>
            When a <see cref="T:EPiServer.Web.DisplayChannel" /> is active then when resolving which <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> (e.g. an page or user control)
            that should be used to render a request, models where <see cref="P:EPiServer.Web.Internal.DisplayModeChannel.ChannelName" /> have a matching entry in <see cref="P:EPiServer.DataAbstraction.TemplateModel.Tags" />
            will be prefered.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.DisplayModeChannel.ResolutionId">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the resolution.
            </summary>
      <value>
      </value>
      <remarks>
            Default value is null meaning channel has no preferred resolution.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.DisplayModeChannel.DisplayMode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Exposes the wrapped <see cref="T:System.Web.WebPages.IDisplayMode" /> instance.
            </summary>
      <value>The display mode.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DisplayModeChannel.System#Web#WebPages#IDisplayMode#CanHandleContext(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether this instance [can handle context] the specified HTTP context.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
        <c>true</c> if this instance [can handle context] the specified HTTP context; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.DisplayModeChannel.System#Web#WebPages#IDisplayMode#DisplayModeId">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the display mode id.
            </summary>
      <value>The display mode id.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DisplayModeChannel.System#Web#WebPages#IDisplayMode#GetDisplayInfo(System.Web.HttpContextBase,System.String,System.Func{System.String,System.Boolean})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the display info.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="virtualPath">The virtual path.</param>
      <param name="virtualPathExists">The virtual path exists.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.FormsAuthenticationAccessDeniedHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles access denied for forms authentication scenarios by redirecting to the logon form.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrite HTML URI:s in streams and strings.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal.#ctor(EPiServer.Web.RebaseKind)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal" /> class.
            </summary>
      <param name="rebaseKind">The type of rebasing to perform on the rewritten URL:s.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal.#ctor(EPiServer.Web.RebaseKind,EPiServer.Web.IPermanentLinkMapper)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal" /> class.
            </summary>
      <param name="rebaseKind">The type of rebasing to perform on the rewritten URL:s.</param>
      <param name="permanentLinkMapper">Used to map links</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal.GetRewriteFilter(EPiServer.UrlBuilder,EPiServer.UrlBuilder,System.Text.Encoding,System.IO.Stream,EPiServer.Web.RewritePipe@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a rewrite filter stream
            </summary>
      <param name="internalUrl">The internal URL.</param>
      <param name="externalUrl">The external URL.</param>
      <param name="encoding">The encoding to use when escaping URI:s</param>
      <param name="stream">The incoming stream.</param>
      <param name="rewritePipe">The rewrite pipe.</param>
      <returns>The filtered, rewritten, stream</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal.OnHtmlRewriteInit(EPiServer.Web.HtmlRewriteEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal.OnHtmlRewritingUrl(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal.IsHtmlUrlValidForRewrite(EPiServer.UrlBuilder,EPiServer.UrlBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether a given url is valid for rewrite, when interpreted in the context of the provided context URL.
            </summary>
      <param name="contextUrl">The url for the context that the url is present in</param>
      <param name="url">The URL.</param>
      <returns>
        <c>true</c> if [is HTML URL valid for rewrite] [the specified internal URL]; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal.IsUrlSchemeValid(EPiServer.UrlBuilder,EPiServer.UrlBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether URL scheme is valid for rewrite.
            Override this method if you want to add more valid schemes.
            </summary>
      <param name="contextUrl">The context URL.</param>
      <param name="url">The URL to validate.</param>
      <returns>
        <c>true</c> if URL scheme is valid; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Valid Url schemes are http, https and empty.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal.HtmlRewriteUrl(EPiServer.UrlBuilder,EPiServer.UrlBuilder,EPiServer.UrlBuilder,System.Text.Encoding,System.Object@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites an URL found as an URI in HTML text.
            </summary>
      <param name="internalUrl">The internal context URL.</param>
      <param name="externalUrl">The external context URL.</param>
      <param name="url">The URL to rewrite</param>
      <param name="encoding">The encoding to use when escaping the URL</param>
      <param name="internalObject">The internal object representation that may be returned (parameter is no being used)</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.FriendlyHtmlRewriteToExternal.rewritePipe_HtmlRewriteUrl(System.Object,EPiServer.Web.HtmlRewriteEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles the HtmlRewriteUrl event of the rewritePipe object.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> instance containing the event data.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.HierarchicalUrlHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An implementation of a URL handler that supports hierarchical URL:s (a k a Friendly URL:s)
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HierarchicalUrlHandler.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.HierarchicalUrlHandler" /> class.
            </summary>
      <param name="friendlyUrlExtension">The friendly URL extension.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HierarchicalUrlHandler.#ctor(System.Uri,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.HierarchicalUrlHandler" /> class for handling cached requests
            </summary>
      <param name="cachedUri">The resolved URL</param>
      <param name="cachedInternalObject">The data returned in internalObject, which is a page reference in this case.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HierarchicalUrlHandler.#ctor(EPiServer.UrlBuilder,EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.HierarchicalUrlHandler" /> class.
            </summary>
      <param name="url">The URL.</param>
      <param name="cachedInternalObject">The cached internal object.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HierarchicalUrlHandler.FriendlyUrlExtension">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the friendly URL extension.
            </summary>
      <value>The friendly URL extension.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HierarchicalUrlHandler.RewriteFromCachedData(EPiServer.Web.UrlRewriteContext,System.Object@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the URL from cached data.
            </summary>
      <param name="context">The context.</param>
      <param name="internalObject">The internal object.</param>
      <returns>
            True if the URL was rewritten, false otherwise.
            </returns>
      <remarks>
            You may optionally return an internal representation of the page in internalObject. This will usually
            be a PageReference, but you should always check the type and not assume that it is a PageReference
            since internalObject may contain anything depending on the actual CachedUrlHandler implementation.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HierarchicalUrlHandler.RewriteHierarchicalUrl(EPiServer.Web.UrlRewriteContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the hierarchical URL.
            </summary>
      <param name="context">The context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HierarchicalUrlHandler.TransferQueryStringsToConvertedUrl(EPiServer.UrlBuilder,System.Uri)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Transfers the query strings to converted URL.
            </summary>
      <param name="externalUrl">The external URL.</param>
      <param name="internalUri">The internal URI.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HierarchicalUrlHandler.TryHandleUrl(EPiServer.Web.UrlRewriteContext,System.Object@,EPiServer.Web.CachedUrlHandler@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Tries to handle the URL gven in the context.
            </summary>
      <param name="context">The context for the rewrite. Note that the URL of the context may be modified.</param>
      <param name="internalObject">The internal object representation.</param>
      <param name="handler">The cached handler.</param>
      <returns>
            True if the URL was recognized and handled, False otherwise.
            </returns>
      <remarks>
        <para>
            If this method returns False (URL not handled), then the context, internalObject and handler should be unaffected.
            </para>
        <para>
            If the method returns True (URL handled), then UrlRewritten will indicate if the context.Url property has been modified. The
            method may optionally return a CachedUrlHandler in the handler parameter in this case as well.
            </para>
        <para>
            Returning a non-null value in handler is how you indicate that you have want to cache expensive url lookups
            and reuse for subsequent calls.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HierarchicalUrlHandler.UrlRewritten">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether the URL was rewritten as a result of the TryHandleUrl method.
            </summary>
      <value>
        <c>true</c> if URL was rewritten; otherwise, <c>false</c>.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HierarchicalUrlHandler.GetFromStartByPath(System.String,System.String,EPiServer.IContentRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a page based on URL as defined by the PageData.URLSegment. Try begin with both start page and root page.
            </summary>
      <param name="path">The friendly URL path to find a page for</param>
      <param name="languageId">The language we prefer</param>
      <param name="contentRepository">The page repository.</param>
      <returns>
            A PageData object that was found based on the URL, or NULL if not found
            </returns>
      <remarks>A language branch prefix will always be scanned and if found used as a language selector for the returned page</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HierarchicalUrlHandler.GetReferenceBySegments(EPiServer.Core.ContentReference,System.String[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content by segments.
            </summary>
      <param name="rootPageRef">The root page ref.</param>
      <param name="segments">The segments.</param>
      <returns>
            The content as found by following the path of the segments
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.HtmlRewritePipe">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Parses a HTML source stream and raise appropriate events enabling rewriting and modification.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Use a local derivation to get access to protected accessors
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs.#ctor(EPiServer.Web.Internal.HtmlRewritePipe)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs" /> class.
            </summary>
      <param name="htmlRewritePipe">The HTML rewrite pipe.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs.#ctor(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs" /> class.
            </summary>
      <param name="context">The context.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs.#ctor(EPiServer.Web.Internal.HtmlRewritePipe,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs" /> class.
            </summary>
      <param name="htmlRewritePipe">The HTML rewrite pipe.</param>
      <param name="context">The context.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the name of the element, attribute etc.
            </summary>
      <value>The name.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs.NameBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the name builder.
            </summary>
      <value>The name builder.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs.Value">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the value of the element, attribute etc.
            </summary>
      <value>The value.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs.ValueBuilder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the value builder.
            </summary>
      <value>The value builder.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HtmlRewritePipe.Context">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The opaque context provided via the constructor
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.HtmlRewritePipe.sgmlDtd">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Performance optimizing single-instance-per-thread of the Dtd and associated
            XmlNameTable (which is not thread-safe).
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.HtmlRewritePipe._source">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The backing Stream for the source stream
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HtmlRewritePipe.Source">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets and sets the source Stream to use
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HtmlRewritePipe.CaseFolding">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the case folding to use when parsing source stream.
            </summary>
      <value>The case folding.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.HtmlRewritePipe.SpecialElementType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Associate a string HTML element name with noteworthy attributes and the element type from the SpecialElementTypes enumeration
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.SpecialElementType.#ctor(System.String,EPiServer.Web.HtmlRewriteElementType,System.String[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.HtmlRewritePipe.SpecialElementType" /> class.
            </summary>
      <param name="name">The name.</param>
      <param name="type">The type.</param>
      <param name="attributes">The attributes.</param>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.HtmlRewritePipe.SpecialElementType.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The HTML text name of a tag
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.HtmlRewritePipe.SpecialElementType.HtmlType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The <see cref="F:EPiServer.Web.Internal.HtmlRewritePipe.SpecialElementTypes" /> enumeration type associated with this Name
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.HtmlRewritePipe.SpecialElementType.Attributes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The name of an attribute that may contain an URL in the context of this element type, or an empty string
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.SpecialElementType.CompareTo(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Compares the current instance with another object of the same type.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj.
            </returns>
      <exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.HtmlRewritePipe.SpecialElementTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. We handle these element types with special non-default code
            </summary>
      <remarks>These MUST be ordered! (Except for the magic first one)</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.GetElementType(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the type of the element.
            </summary>
      <param name="elementTypeName">Name of the element type.</param>
      <returns>The <see cref="T:EPiServer.Web.Internal.HtmlRewritePipe.SpecialElementType" /> enumeration value for this element name</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.#ctor(System.Object,System.Text.Encoding)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.HtmlRewritePipe" /> class.
            </summary>
      <param name="context">The context passed to event handlers</param>
      <param name="encoding">The encoding to be used for URI escaping, and inital PI if included</param>
      <remarks>
            Note that the encoding is only intended to control how URIs are escaped, and what is written in the initial
            PI - it does not control the actual encoding of the input or output character streams. This is controlled by
            the respective TextReader and TextWriter provided to the RewriteToEnd() method.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.RewriteToEnd(System.IO.TextReader,System.IO.TextWriter)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the source stream to the end, sending the result to the writer.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.IsInsidePreventUrlElement(Sgml.SgmlReader,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean}@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Controls if the element is a preventUrlElement or inside a preventUrlElement.
            </summary>
      <param name="htmlReader">The html reader containing the element</param>
      <param name="startElement">Flag indicating if itÂ´s the start or the end of the tag</param>
      <param name="preventRewriteUrlInsideElement">Stack of preventRewriteUrl-elements</param>
      <returns>
        <c>true</c> if the element is inside a preventRewriteUrl element</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.WriteElement(EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs,Sgml.SgmlReader,System.IO.TextWriter)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Writes an element.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.RewriteValue(EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the Value, raising events and handling IsHoldingOutput
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.RewriteValue(System.IO.TextWriter,EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the Value, raising events and handling IsHoldingOutput
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.RewriteValueBuilder(EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs,System.Text.StringBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the ValueBuilder, raising events and handling IsHoldingOutput
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewritePipe.RewriteValueBuilder(System.IO.TextWriter,EPiServer.Web.Internal.HtmlRewritePipe.MyHtmlRewriteEventArgs,System.Text.StringBuilder)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the ValueBuilder, raising events and handling IsHoldingOutput
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.HtmlRewriteStream">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Stream used while parsing outgoing HTML
            </summary>
      <remarks>
        <para>
            Use this as a Response.Filter-filter. It will parse outgoing HTML and find links to the site and
            transform them to friendly urls and/or language-specifying urls according to what was done during
            the rewriting of the original request. It is dependent on information in Context.Item-collection
            to determine just how the rewriting is to occur. This is set by UrlRewriteModule normally.
            </para>
        <para>
            For efficiency reasons, this stream will primarily attempt to buffer in memory first, and failing that,
            should switch over to a separate intermediary threaded pipe-implementation (not yet implemented).
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.HtmlRewriteStream.sink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HtmlRewriteStream.Sink">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the sink, I.e. the final destination for the data written to us,
            after it has been rewritten (the consumer).
            </summary>
      <value>The sink (the original output stream)</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.HtmlRewriteStream.HtmlRewritePipe">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the HTML rewrite pipe to be used when parsing
            </summary>
      <value>The HTML rewrite pipe.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewriteStream.#ctor(System.Object,System.IO.Stream,System.Text.Encoding)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.HtmlRewriteStream" /> class.
            </summary>
      <param name="context">The context of the rewrite</param>
      <param name="sink">The sink (the original output stream)</param>
      <param name="encoding">The encoding.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewriteStream.Close">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Close the stream and Dispose() of the memory buffers. This is where we actually call the
            <see cref="P:EPiServer.Web.Internal.HtmlRewriteStream.HtmlRewritePipe" /> class to rewrite from a complete source stream to the
            provided sink stream. We can't connect them directly, since the SgmlReader must be able to
            read the stream to end, so we must buffer or implement a thread or co-routine based pipe.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.HtmlRewriteStream.Dispose(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clean up. This is important since we want to keep track of re-usable buffers from the
            backing memory store.
            </summary>
      <param name="disposing">true of called via Dispose(), false if called by framework Finalize()</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.IRoutableEvaluator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines if a content instance is routable given state and context
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.IRoutableEvaluator.IsRoutable(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines if specified content is routable in current context.
            </summary>
      <param name="content">The content item</param>
      <returns>true if content is routable else false</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.Net45HostResolver.HostName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.NullRewritePipe">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A RewritePipe implementation that does nothing.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.NullRewriteStream">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Represents a stream used when no rewriting is specified
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.NullRewriteStream.RewritePipe">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the rewrite pipe to be used by this instance
            </summary>
      <value>The rewrite pipe.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.OutputCacheHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Handles output cache settings. Used from <see cref="T:EPiServer.PageBase" /> in WebForms and <see cref="T:EPiServer.Web.Mvc.ContentOutputCacheAttribute" /> in MVC.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.OutputCacheHandler.SetCachePolicy(System.Security.Principal.IPrincipal,EPiServer.Core.ContentReference,System.Web.HttpContextBase,EPiServer.Configuration.Settings,System.Nullable{System.DateTime})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sets the cache policy for this request based on parameters as current user and parameters.
            </summary>
      <remarks>
            Override this method if you wish to customize the cache policy for a page.
            The output cache is turned on based on the following criteria:
            <para>
            1. The <b>EPnCachePolicyTimeout</b> in web.config is &gt; 0.
            </para><para>
            2. The current user must not be logged on, aka Anonymous.
            </para><para>
            3. The request must be a GET type request. Hence, Postbacks and form postings will not be cached.
            </para><para>
            4. The current page must be the published version (the WorkID is == 0).
            </para>
            The cache parameters are fetched from web.config, more specifically the <b>EPsCacheVaryByCustom</b> and 
            <B>EPsCacheVaryByParams</B> settings. Additionally, a dependency to the <b>DataFactoryCache</b> is set. 
            When pages are changed, the cache is flushed. Cache item expiration is set to the <b>HttpCacheExpiration</b> 
            setting, which is the number of seconds the item should reside in the cache, as long as the <b>StopPublish</b> 
            value of the page is not less than the policy timeout (in which case, the <b>StopPublish</b> value is used).
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.OutputCacheHandler.UseOutputCache(System.Security.Principal.IPrincipal,System.Web.HttpContextBase,System.TimeSpan)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Decides if the output cache should be used.
            </summary>
      <param name="principal">The current principal.</param>
      <param name="context">The current context.</param>
      <param name="duration">The duration.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.OutputCacheHandler.ValidateOutputCache(System.Web.HttpContext,System.Object,System.Web.HttpValidationStatus@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the output cache.
            </summary>
      <param name="context">The context.</param>
      <param name="data">The data.</param>
      <param name="validationStatus">The validation status.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.OutputCacheHandler.KeepUserLoggedOn(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Makes sure windows authentication stay persistent even on anonymous pages when user has been logged in
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.PartialRoutedBlobHttpHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A HTTP Handler that deliver binary large objects from that has been partial routed through <see cref="T:EPiServer.Web.Routing.Internal.BlobRouter" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PartialRoutedBlobHttpHandler.GetBlob(System.Web.HttpContextBase)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the routed BLOB from the request.
            </summary>
      <remarks>
            The implementation returns the Blob routed to.
            </remarks>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.PooledMemoryBufferArea">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Manage a collection of pooled memory buffers such that it is convenient to read
            and write to it, as if it was one large contiguous area.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferArea._disposed">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Keep track of disposed state. It's important to Dispose()
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferArea.buffers">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The list of buffers representing the total memory area. No
            assumption is made on the size of each and every buffer.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferArea.pool">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The MemoryBufferPool where we allocate memory from (and release
            it when we're disposed).
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferArea.poolSize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The total capacity of the current pool
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferArea.currentBufferOffset">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The offset of the current buffer as defined by currentBufferIndex
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferArea.currentBufferPosition">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The offset into the current buffer as defined by currentBufferIndex
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferArea.currentBufferIndex">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The index into _buffers for the current buffer (or -1 if not set)
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferArea.Finalize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:EPiServer.Web.Internal.PooledMemoryBufferArea" /> is reclaimed by garbage collection.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferArea.Dispose">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Does a release of the buffers to the MemoryPool for potential re-use.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferArea.Dispose(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. You should call Dispose() from your code (which will call here)
            to ensure that memory buffers are returned correctly to the
            pool. If this object is not explicitly disposed, the buffers
            will not be re-used by the pool (but will instead be taken
            by the garbage collector - no leak occurs).
            </summary>
      <param name="disposing">true when called from code, false when called by GC</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferArea.#ctor(EPiServer.Core.Internal.MemoryBufferPool)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.PooledMemoryBufferArea" /> class.
            </summary>
      <param name="pool">The pool.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.PooledMemoryBufferArea.BlockCopyDelegate">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. We need to reverse the argument order depending on reading or writing, thus a delegate for
            the <see cref="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" /> method.
            </summary>
      <param name="array1">
      </param>
      <param name="offset1">
      </param>
      <param name="array2">
      </param>
      <param name="offset2">
      </param>
      <param name="count">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferArea.ReadOrWrite(System.Int64,System.Byte[],System.Int32,System.Int32,EPiServer.Web.Internal.PooledMemoryBufferArea.BlockCopyDelegate)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Read or Write at a specified location in the buffer list. We maintain state between calls
            to optimize the typical case of sequential writing followed by sequential reading. This also
            allows a stream implementation using this as backing store to manage it's position witout any
            side effects until data is actually written.
            </summary>
      <param name="position">The position.</param>
      <param name="buffer">The buffer.</param>
      <param name="offset">The offset.</param>
      <param name="count">The count.</param>
      <param name="blockCopy">The block copy delegate determining if we're reading to the parameter buffer or writing to it.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferArea.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Writes a buffer of data at the specified position.
            </summary>
      <param name="position">The position.</param>
      <param name="buffer">The buffer.</param>
      <param name="offset">The offset.</param>
      <param name="count">The count.</param>
      <exception cref="T:System.ArgumentException" />
      <returns>The number of bytes actually written</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferArea.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Reads a buffer of data at the specified position.
            </summary>
      <param name="position">The position.</param>
      <param name="buffer">The buffer.</param>
      <param name="offset">The offset.</param>
      <param name="count">The count.</param>
      <exception cref="T:System.ArgumentException" />
      <returns>The number of bytes actually read</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.PooledMemoryBufferStream">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Readable and writeable stream implementation backed by a pooled memory area
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferStream._position">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The current Position in the stream for next read or write
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferStream._length">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The total length of the stream. Updated at Write, not when position is set.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferStream._disposed">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. True when we're already disposed
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferStream._closed">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. True when we're closed
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.PooledMemoryBufferStream._bufferArea">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The backing store of memory buffers
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferStream.#ctor(EPiServer.Core.Internal.MemoryBufferPool)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the PooledMemoryBufferStream class 
            </summary>
      <param name="pool">Use this pool to allocate memory from</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferStream.Close">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Close the stream and Dispose() of the memory buffers
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferStream.Flush">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Do nothing
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set the position of next read and write
            </summary>
      <param name="offset">Whence the seek is relative to</param>
      <param name="origin">The amount to seek from the offset</param>
      <returns>The new position</returns>
      <remarks>
            No actual allocation of space is done by Seeking
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferStream.SetLength(System.Int64)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Set the length of stream.
            </summary>
      <param name="value">The length</param>
      <remarks>
            No actual allocation of space is done, this just limits how far you can read
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Read from the stream
            </summary>
      <param name="buffer">Where to put the result</param>
      <param name="offset">Offset into the buffer to place the result</param>
      <param name="count">How many bytes to read</param>
      <returns>The actual number of bytes read. 0 for end of file.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Write to the stream
            </summary>
      <param name="buffer">The buffer to write from</param>
      <param name="offset">The offset in the buffer to start from</param>
      <param name="count">The number of bytes to write</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferStream.Finalize">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:EPiServer.Web.Internal.PooledMemoryBufferStream" /> is reclaimed by garbage collection.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferStream.Dispose">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Releases all resources used by the <see cref="T:System.IO.Stream"></see>.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.PooledMemoryBufferStream.Dispose(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Clean up. This is important since we want to keep track of re-usable buffers from the
            backing memory store.
            </summary>
      <param name="disposing">true of called via Dispose(), false if called by framework Finalize()</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PooledMemoryBufferStream.CanRead">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. True if not closed
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PooledMemoryBufferStream.CanSeek">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. True if not closed
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PooledMemoryBufferStream.CanWrite">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. True if not closed
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PooledMemoryBufferStream.Length">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The length of the stream. (How many bytes you can read from position 0).
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.PooledMemoryBufferStream.Position">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the next position to read or write from or to.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.QueryParameterResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves a query parameter value from a <see cref="P:System.Web.HttpContextBase.Request" />.
            </summary>
      <remarks>
            Purpose of class it to make it easier to write tests for dependents.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.QueryParameterResolver.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.QueryParameterResolver" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.QueryParameterResolver.#ctor(EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpRequestBase})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.QueryParameterResolver" /> class.
            </summary>
      <param name="httpRequest">The HTTP request used to get query parameters from.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.QueryParameterResolver.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.QueryParameterResolver" /> class.
            </summary>
      <param name="parameters">The parameters to resolve values from.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.QueryParameterResolver.GetParameterValue(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the value for the query parameter named <paramref name="queryKey" /> from the current request.
            </summary>
      <param name="queryKey">The name of the query parameter.</param>
      <returns>The value of the query parameter or null if parameter is not present.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.QueryParameterResolver.TryGet(System.String,System.Int32@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Attempts to extract the value from a given query parameter to an integer.
            </summary>
      <param name="queryKey">The query key.</param>
      <param name="result">The parsed result.</param>
      <returns>
        <c>true</c> if the request instance exist and the request query contains the key and it can be parsed to an integer; otherwise <c>false</c>.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.QueryParameterResolver.TryGet(System.String,System.Collections.Generic.IEnumerable{System.Int32}@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Attempts to extract the value from a given query parameter to a list of integers.
            </summary>
      <param name="queryKey">The query key.</param>
      <param name="result">The parsed result.</param>
      <returns>
        <c>true</c> if the request instance exist and the request query contains the key and it can be parsed to a list of integers; otherwise <c>false</c>.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.ResponseStatusAccessDeniedHandler">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Sends an access denied message when using bowser-based authentication (Basic Auth or NTLM).
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.TemplateControlLoader">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.TemplateControlLoader.#ctor(EPiServer.Web.TemplateResolver,EPiServer.Web.DisplayOptions)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.TemplateControlLoader" /> class.
            </summary>
      <param name="templateResolver">The template resolver that should be used to resolve the control to load.</param>
      <param name="displayOptions">The display options service.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.TemplateControlLoader.LoadControl(System.Web.HttpContextBase,EPiServer.Core.IContentData,System.Web.UI.TemplateControl)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the template control that is associated with the provided content item.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentData">The content data that the template should be associated with.</param>
      <param name="templateControl">The template control used to load any user controls with.</param>
      <returns>
            A new template control instance or null if no template existed.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.TemplateControlLoader.LoadControl(System.Web.HttpContextBase,EPiServer.Core.IContentData,System.Web.UI.TemplateControl,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the template control that is associated with the provided content item.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentData">The content data that the template should be associated with.</param>
      <param name="templateControl">The template control used to load any user controls with.</param>
      <param name="tag">The tag to match for on templates.</param>
      <param name="renderSettings">The render settings.</param>
      <returns>
            A new template control instance or null if no template existed.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.TemplateControlLoader.LoadControl(System.Web.HttpContextBase,System.Type,System.Object,System.Web.UI.TemplateControl,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{System.Web.UI.Control,System.Object})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads the template control that is associated with the provided content item.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="renderType">Type of the render.</param>
      <param name="renderData">The render data.</param>
      <param name="templateControl">The template control used to load any user controls with.</param>
      <param name="tag">The tag.</param>
      <param name="renderSettings">The render settings.</param>
      <param name="bindDataAction">Delegate called after control creation where data can be bound to control</param>
      <returns>
            A new template control instance or null if no template existed.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.TemplatePathResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The TemplatePathResolver resolves path to the requested render type.
            </summary>
      <example>
            The following code example demonstrates how to exchange the template path for requests.
            <code source="../CodeSamples/EPiServer/Web/TemplatePathResolverSample.cs" region="ResolvingTemplatePath" lang="cs" /></example>
      <exclude />
    </member>
    <member name="E:EPiServer.Web.Internal.TemplatePathResolver.ResolvingTemplatePath">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when [template path resolver event].
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.TemplatePathResolver.#ctor(EPiServer.Web.Hosting.IHostingEnvironment,EPiServer.Framework.Modules.IModuleResourceResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance of <see cref="T:EPiServer.Web.Internal.TemplatePathResolver" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.TemplatePathResolver.ResolvePath(System.Type,EPiServer.Framework.Web.TemplateTypeCategories)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves the path for the requested render type.
            </summary>
      <param name="type">The render type.</param>
      <param name="templateTypeCategory">The type of template.</param>
      <returns>
            returns path to the render template.
            </returns>
      <remarks>
            The ResolvePath resolves path by following order
            1. Resolves path by raising ResolvingTemplatePath event
            2. Resolves path from root of application according to namespace
                e.g. if the namespace is like A.B.C and the typename is X then the searching paths are (~/A/B/C/X, ~/B/C/X, ~/C/X, ~/X)
            3. Resolves path from root of corresponding Shell module according to namespace
                e.g. if the namespace is like A.B.C, typename is X and the Shell module path is M then the searching paths are (~/M/A/B/C/X, ~/M/B/C/X, ~/M/C/X, ~/M/X)
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.TemplatePathResolver.ResolvePathByTypeOfTemplate(System.Type,System.String,EPiServer.Framework.Web.TemplateTypeCategories)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resolves the path by type of template.
            </summary>
      <param name="type">The type.</param>
      <param name="basePath">The base path.</param>
      <param name="templateTypeCategory">The type of template.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.TemplatePathResolver.ResolvePath(System.Type,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates the path from namespace.
            </summary>
      <param name="type">The type.</param>
      <param name="basePath">The base path.</param>
      <param name="extension">The extension.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.TemplateResolverImplementation.#ctor(EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.DataAbstraction.ITemplateRepository,EPiServer.Web.IDisplayChannelService,EPiServer.DataAbstraction.TemplateModelSelector)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.TemplateResolver" /> class.
            </summary>
      <param name="contentTypeRepository">The content type model repository that will be used by this instance.</param>
      <param name="templateModelRepository">The template model repository that will be used by this instance.</param>
      <param name="displayChannelService">The display channel service.</param>
      <param name="modelSelector">The model selector.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.UpdatePanelPostBackRewritePipe">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrite links for postback responses for UpdatePanel. 
            </summary>
      <remarks>
            The format of the Response from System.Web.UI.UpdatePanel is 
            content.length|type|id|content|
            e.g. 110|updatePanel|ctl00_MainRegion_MainContentRegion_MainBodyRegion_up|&lt;a href="/Templates/Public/Pages/Page.aspx?id=56&amp;epslanguage=en"&gt;a linker page&lt;/a&gt;|
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UpdatePanelPostBackRewritePipe.#ctor(System.Object,System.Text.Encoding,System.EventHandler{EPiServer.Web.HtmlRewriteEventArgs})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructor
            </summary>
      <param name="context">The context for the rewrite</param>
      <param name="encoding">The encoding to use</param>
      <param name="urlRewriteHandler">The event handler to be invoked when a URL should be rewritten.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.UpdatePanelPostBackRewritePipe.IsUpdatePanelPostback">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Indicates if current request is an ajax postback from an UpdatePanel.
            This is identified by checking for POST request with header "x-microsoftajax" and a response type text/plain
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UpdatePanelPostBackRewritePipe.RewriteToEnd(System.IO.TextReader,System.IO.TextWriter)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rewrites the source stream to the end, sending the result to the writer.
            The implementation will look for occurrences of format content.length|type|id|content| which is the output from UpdatePanel.
            For found occurrences the content part will be parsed for links which will be rewritten to FURL format.
            The output is in the same format as from the UpdatePanel but with FURL links.
            </summary>
      <param name="reader">
      </param>
      <param name="writer">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UrlBuilderExtensions.RebaseForWebForms(EPiServer.UrlBuilder,EPiServer.UrlBuilder,EPiServer.UrlBuilder,EPiServer.Web.RebaseKind)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rebases this instance assuming it is valid relative the fromBaseUrl to be valid relative toBaseUrl.
            </summary>
      <param name="fromBaseUrl">From base URL.</param>
      <param name="toBaseUrl">To base URL.</param>
      <param name="kind">The form of the result.</param>
      <param name="target">The extended class</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.UrlSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This class determines behavior for URL Segments, intended to be used by the UrlRewriter functionality.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UrlSegment.#ctor(EPiServer.IContentRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.UrlSegment" /> class.
            </summary>
      <param name="contentRepository">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UrlSegment.GetContentBySegment(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the content by segment.
            </summary>
      <param name="parentLink">The parent reference</param>
      <param name="urlSegment">The URL segment.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UrlSegment.VerifyContentHasSegment(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Verifies the content has segment.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="urlSegment">The URL segment.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="E:EPiServer.Web.Internal.UrlSegment.CreatingUrlSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when an url segment is to be created
            </summary>
      <exclude />
    </member>
    <member name="E:EPiServer.Web.Internal.UrlSegment.CreatedUrlSegment">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Occurs when an url segment has been created
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Internal.UrlSegment.UseLowerCaseSegments">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets a value indicating whether url segments should be created in lowercase.
            </summary>
      <remarks>Default value is true.</remarks>
      <value>
        <c>true</c> if url segment is created in lowercase; otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UrlSegment.GetUniqueURLSegment(EPiServer.Core.IContent)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a friendly URL segment based on the content name and possibly a sequence number.
            URL Segments may collide within a specific content, i.e. different languageBranches can have
            the same URL Segment, but sibling nodes may not.
            </summary>
      <returns>A valid URL segment for the content</returns>
      <remarks>
            There is potential for race here, since we don't save the segment once we've built it. The caller
            should probably lock for the duration.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.UrlSegment.GetUrlFriendlySegment(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Replace illegal chars with suggested replacements
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.ViewContentRetriever">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets pages from <see cref="T:EPiServer.IContentRepository" /> and modifies the result if the page has a shortcut to another page.
            </summary>
      <seealso cref="P:EPiServer.Core.PageData.LinkType" />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.ViewContentRetriever.#ctor(EPiServer.IContentRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Internal.ViewContentRetriever" /> class.
            </summary>
      <param name="contentRepository">The page repository used to get pages.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.ViewContentRetriever.GetPage(EPiServer.Core.PageReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a page that is shown in view mode by <see cref="T:EPiServer.Core.PageReference" />.
            </summary>
      <param name="pageLink">The page link to the page.</param>
      <returns>The page shown in view mode</returns>
      <remarks>
            This method respects shortcuts between pages and returns the <see cref="T:EPiServer.Core.PageData" /> of any page that a shortcut points to.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.ViewContentRetriever.GetPage(EPiServer.Core.PageReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a page that is shown in view mode by <see cref="T:EPiServer.Core.PageReference" /> and language id.
            </summary>
      <param name="pageLink">The page link to the page.</param>
      <param name="languageId">The language id of the page.</param>
      <returns>The page shown in view mode.</returns>
      <remarks>
        <para>
                This method respects shortcuts between pages and returns the <see cref="T:EPiServer.Core.PageData" /> of any page that a shortcut points to.
            </para>
        <para>
                If <paramref name="languageId" /> is <c>null</c> or empty, <see cref="M:EPiServer.Core.LanguageSelectorFactory.AutoDetect(System.Boolean)" /> is used.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.ViewContentRetriever.GetPage(EPiServer.Core.PageReference,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.ViewContentRetriever.GetContent(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the <see cref="T:EPiServer.Core.IContent" /> object with corresponding <paramref name="contentLink" /></summary>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.ViewContentRetriever.GetContent(EPiServer.Core.ContentReference,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the <see cref="T:EPiServer.Core.IContent" /> object with corresponding <paramref name="contentLink" /> and <paramref name="languageId" /></summary>
      <param name="contentLink">The content link.</param>
      <param name="languageId">The language id.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.ViewContentRetriever.GetContent(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.IdentityUrlRewriteProvider.ConvertToInternal(EPiServer.UrlBuilder,System.Object@)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts to internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            There is no support for changing encoding when converting to internal, since there is no requirement for this.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.IdentityUrlRewriteProvider.ConvertToExternal(EPiServer.UrlBuilder,System.Object,System.Text.Encoding)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts from internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL to convert</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <param name="toEncoding">The current encoding</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            When converting to external, we may need to change the encoding used for escaped characters in the URL to conform
            to response encoding requirements which may differ from the internally stored format - which should always be UTF-8.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.IdentityUrlRewriteProvider.GetHtmlRewriter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get's an instance of a Html-rewriter to use when emitting HTML from EPiServer.
            </summary>
      <returns>
            A new instance of a HtmlRewriteToExternal-derived class
            </returns>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.PropertyName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name of the attribute that indicates what property that the html is connected to.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.ContentName">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name of the content inside property
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.EditContainerCssClass">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default CSS class for property edit container that is used to indicate property data rendering in on-page-editing mode.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.FullRefreshPropertyNames">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name of the attribute that indicates which properties require a full refresh of the page to render a correct preview.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.PropertyRenderSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Prefix of the attribute that indicates any custom render setting for the property.
            The format on the client is 'data-epi-property-customsetting' where the value will be JSON notation.
            CustomSettings dictionary on e.g. EPiServer.Web.WebControls.Property
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.PropertyEditorSettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will be used to display any custom editor settings as a JSON formatted string.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.PropertyOverlaySettings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will be used to display any custom overlay settings as a JSON formatted string.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.BlockId">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will be used to display the id of a block in edit mode.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.BlockInfo">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will be used to display additional info of a block in edit mode.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.EditAttribute.BlockPersonalization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will be used to configure personalization of blocks
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.ShellQueryString.EditMode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name on the query parameter indicating if the request is in edit mode.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.ShellQueryString.Channel">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name on the query parameter propagating the channel parameter in edit mode
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.Internal.ShellQueryString.Projects">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Name on the query parameter propagating the projects parameter in edit mode
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.DefaultTemplateResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultTemplateResolver.#ctor(EPiServer.DataAbstraction.ITemplateRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance of <see cref="T:EPiServer.Web.Internal.DefaultTemplateResolver" /></summary>
      <param name="templateRepository">
      </param>
      <exclude />
    </member>
    <member name="E:EPiServer.Web.Internal.DefaultTemplateResolver.TemplateResolved">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inherit-doc />
      <exclude />
    </member>
    <member name="E:EPiServer.Web.Internal.DefaultTemplateResolver.TemplateResolving">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inherit-doc />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Internal.DefaultTemplateResolver.Resolve(System.Object,System.Type,EPiServer.Framework.Web.TemplateTypeCategories,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inherit-doc />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.IPAddressResolver">
      <summary>
            Component that resolves ip addresses.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IPAddressResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.IPAddressResolver" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IPAddressResolver.#ctor(EPiServer.Personalization.IClientIPAddressResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.IPAddressResolver" /> class.
            </summary>
      <param name="clientResolver">The resolver.</param>
    </member>
    <member name="M:EPiServer.Web.IPAddressResolver.ResolveClientAddress(System.Web.HttpContextBase)">
      <summary>
            Resolves the client address from a http context.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.IPropertyDataControl">
      <summary>
            Defines the signature that a webcontrol/usercontrol that renders property data should implement
            </summary>
    </member>
    <member name="P:EPiServer.Web.IPropertyDataControl.CurrentData">
      <summary>
            Gets or sets the data that should be rendered by the control.
            </summary>
      <value>The block data.</value>
    </member>
    <member name="T:EPiServer.Web.IPropertyDataControl`1">
      <summary>
            Defines the signature that a webcontrol/usercontrol that renders property data should implement.
            </summary>
      <typeparam name="T">The type of content data that is rendering.</typeparam>
    </member>
    <member name="P:EPiServer.Web.IPropertyDataControl`1.CurrentData">
      <summary>
            Gets or sets the data that should be rendered by the control.
            </summary>
      <value>The block data.</value>
    </member>
    <member name="T:EPiServer.Web.IQueryParameterResolver">
      <summary>
            Resolves a query parameter value from a Url.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IQueryParameterResolver.GetParameterValue(System.String)">
      <summary>
            Gets the value for the query parameter named <paramref name="queryKey" /> from the current request.
            </summary>
      <param name="queryKey">The name of the query parameter.</param>
      <returns>The value of the query parameter or null if parameter is not present.</returns>
    </member>
    <member name="M:EPiServer.Web.IQueryParameterResolver.TryGet(System.String,System.Int32@)">
      <summary>
            Attempts to extract the value from a given query parameter to an integer.
            </summary>
      <param name="queryKey">The query key.</param>
      <param name="result">The parsed result.</param>
      <returns>
        <c>true</c> if the request instance exist and the request query contains the key and it can be parsed to an integer; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Web.IQueryParameterResolver.TryGet(System.String,System.Collections.Generic.IEnumerable{System.Int32}@)">
      <summary>
            Attempts to extract the value from a given query parameter to a list of integers.
            </summary>
      <param name="queryKey">The query key.</param>
      <param name="result">The parsed result.</param>
      <returns>
        <c>true</c> if the request instance exist and the request query contains the key and it can be parsed to a list of integers; otherwise <c>false</c>.</returns>
    </member>
    <member name="T:EPiServer.Web.ITemplateControlLoader">
      <summary>
            Responsible for loading a <see cref="T:System.Web.UI.Control" /> for an object instance if such a template exist.
            </summary>
    </member>
    <member name="M:EPiServer.Web.ITemplateControlLoader.LoadControl(System.Web.HttpContextBase,System.Type,System.Object,System.Web.UI.TemplateControl,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{System.Web.UI.Control,System.Object})">
      <summary>
            Loads the template control that is associated with the provided content item.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="renderType">Type of the render.</param>
      <param name="renderData">The render data.</param>
      <param name="templateControl">The template control used to load any user controls with.</param>
      <param name="tag">The tag.</param>
      <param name="renderSettings">The render settings.</param>
      <param name="bindDataAction">Delegate called after control creation where data can be bound to control</param>
      <returns>
            A new template control instance or null if no template existed.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateControlLoaderExtensions.LoadControl(EPiServer.Web.ITemplateControlLoader,System.Web.HttpContextBase,EPiServer.Core.IContentData,System.Web.UI.TemplateControl)">
      <summary>
            Loads the template control that is associated with the provided content item.
            </summary>
      <param name="templateControlLoader">The loader that is being extended</param>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentData">The content data that the template should be associated with.</param>
      <param name="templateControl">The template control used to load any user controls with.</param>
      <returns>
            A new template control instance or null if no template existed.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateControlLoaderExtensions.LoadControl(EPiServer.Web.ITemplateControlLoader,System.Web.HttpContextBase,EPiServer.Core.IContentData,System.Web.UI.TemplateControl,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Loads the template control that is associated with the provided content item.
            </summary>
      <param name="templateControlLoader">The loader that is being extended</param>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentData">The content data that the template should be associated with.</param>
      <param name="templateControl">The template control used to load any user controls with.</param>
      <param name="tag">The tag to match for on templates.</param>
      <param name="renderSettings">The render settings.</param>
      <returns>
            A new template control instance or null if no template existed.
            </returns>
    </member>
    <member name="T:EPiServer.Web.ITemplatePathResolver">
      <summary>
            Interface to resolve template path for the requested render type
            </summary>
      <example>
            The following code example demonstrates how to create a template path resolver.
            <code source="../CodeSamples/EPiServer/Web/TemplatePathResolverSample.cs" region="FlattenTemplatePathResolver" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.Web.ITemplatePathResolver.ResolvePath(System.Type,EPiServer.Framework.Web.TemplateTypeCategories)">
      <summary>
            Resolves the path for the requested render type.
            </summary>
      <param name="type">The type.</param>
      <param name="templateTypeCategory">The type of template.</param>
      <returns>returns path to the control</returns>
    </member>
    <member name="E:EPiServer.Web.ITemplatePathResolver.ResolvingTemplatePath">
      <summary>
            Occurs when tries to resolve template path.
            </summary>
    </member>
    <member name="T:EPiServer.Web.IViewContentRetriever">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.IContent" /> instance for view usage with respect to shortcut and requested language
            </summary>
    </member>
    <member name="M:EPiServer.Web.IViewContentRetriever.GetContent(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
      <summary>
            Gets the <see cref="T:EPiServer.Core.IContent" /> object with corresponding <paramref name="contentLink" /> and <paramref name="culture" /></summary>
      <param name="contentLink">The content link.</param>
      <param name="culture">The language </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.IViewContentRetriever.GetPage(EPiServer.Core.PageReference,System.Globalization.CultureInfo)">
      <summary>
            Gets a page that is shown in view mode by <see cref="T:EPiServer.Core.PageReference" /> and culture.
            </summary>
      <param name="pageLink">The page link to the page.</param>
      <param name="culture">The language of the page.</param>
      <returns>The page shown in view mode.</returns>
      <remarks>
        <para>
                This method respects shortcuts between pages and returns the <see cref="T:EPiServer.Core.PageData" /> of any page that a shortcut points to.
            </para>
        <para>
                If <paramref name="culture" /> is <c>null</c>, <see cref="M:EPiServer.Core.LanguageSelectorFactory.AutoDetect(System.Boolean)" /> is used.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.ViewContentRetrieverExtensions.GetPage(EPiServer.Web.IViewContentRetriever,EPiServer.Core.PageReference)">
      <summary>
            Gets a page that is shown in view mode by <see cref="T:EPiServer.Core.PageReference" />.
            </summary>
      <param name="viewContentRetreiver">The retriever that is being extended</param>
      <param name="pageLink">The page link to the page.</param>
      <returns>The page shown in view mode</returns>
      <remarks>
            This method respects shortcuts between pages and returns the <see cref="T:EPiServer.Core.PageData" /> of any page that a shortcut points to.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.ViewContentRetrieverExtensions.GetContent(EPiServer.Web.IViewContentRetriever,EPiServer.Core.ContentReference)">
      <summary>
            Gets the <see cref="T:EPiServer.Core.IContent" /> object with corresponding <paramref name="contentLink" /></summary>
      <param name="viewContentRetreiver">The retriever that is being extended</param>
      <param name="contentLink">The content link.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.ActionControllerBase">
      <summary>
            Provides the base implementation for for controllers.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.ActionControllerBase.UnknownActionHandlers">
      <summary>
            Gets or sets the grouped list of located <see cref="T:EPiServer.Web.Mvc.IUnknownActionHandler" />s.
            </summary>
      <remarks>
        <para>
            The list is grouped according to action name, i.e. <code>UnknownActionHandlers["SomeAction"]</code> returns a collection
            of action handlers that are registered for the "SomeAction" action.
            </para>
        <para>
            This collection is used in the <see cref="M:EPiServer.Web.Mvc.ActionControllerBase.HandleUnknownAction(System.String)" /> method.
            </para>
        <para>
            The setter is only used to set up a mock collection for testing purposes.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.ActionControllerBase.HandleUnknownAction(System.String)">
      <summary>
            Iterates through the registred IUnknownActionHandlers and let them try to handle the action
            </summary>
      <param name="actionName">The name of the action</param>
      <remarks>
        <para>The list of IUnknownActionHandlers are fetched via the <see cref="P:EPiServer.Web.Mvc.ActionControllerBase.UnknownActionHandlers" /> property.</para>
        <para>
            The first handler that returns an action handler insted of null will get it's action result executed.
            If no handler returns a value, the base class will throw an 404.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Web.Mvc.AuthorizeContentAttribute">
      <summary>
            When added to an MVC controller this action filter checks authorization 
            for a previously routed node available through the request context.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.AuthorizeContentAttribute.#ctor">
      <summary>
            Creates a <see cref="T:EPiServer.Web.Mvc.AuthorizeContentAttribute" /> attribute.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.AuthorizeContentAttribute.RequiredLevel">
      <summary>
            The required access level to execute this controller or action.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.AuthorizeContentAttribute.DisableAccessCheck">
      <summary>
            Gets or sets a value indicating whether [disable access check] for an action.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.AuthorizeContentAttribute.ContentLoader">
      <summary>
            Gets or sets the content loader.
            </summary>
      <value>
            The content loader.
            </value>
    </member>
    <member name="M:EPiServer.Web.Mvc.AuthorizeContentAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>
            Authorizes the request and sets the result to <see cref="T:System.Web.Mvc.HttpUnauthorizedResult" /> 
            if the user doesn't have the required access level.
            </summary>
      <param name="filterContext">The filter context to set results to.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.AuthorizeContentAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>
            Called by the ASP.NET MVC framework before the action method executes.
            </summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.AuthorizePermissionAttribute">
      <summary>
            When added to an MVC controller this action filter checks permissions to functions
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.AuthorizePermissionAttribute.#ctor">
      <summary>
            Creates a <see cref="T:EPiServer.Web.Mvc.AuthorizePermissionAttribute" /> attribute.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.AuthorizePermissionAttribute.#ctor(System.String,System.String)">
      <summary>
            Creates a <see cref="T:EPiServer.Web.Mvc.AuthorizePermissionAttribute" /> attribute.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.AuthorizePermissionAttribute.Permission">
      <summary>
            The permission to check for
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.AuthorizePermissionAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>
            Authorizes the request and sets the result to <see cref="T:System.Web.Mvc.HttpUnauthorizedResult" /> if the user doesn't have the required permission
            </summary>
      <param name="filterContext">The filter context to set results to.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.BlockController`1">
      <summary>
            Provides the base implementation for for block controllers.
            </summary>
      <typeparam name="TBlockData">The type of the block data.</typeparam>
      <example>
            The following code example demonstrates two simple block controllers.
            <code source="../CodeSamples/EPiServerNET/Web/Mvc/BlockControllerSample.cs" region="SimpleRenders" lang="cs" /></example>
    </member>
    <member name="T:EPiServer.Web.Mvc.CachingViewEnginesWrapper">
      <summary>
            Encapsulates <see cref="T:System.Web.Mvc.ViewEngineCollection" />. It has the addition that it caches "no-hits" (when runing in release mode) unlike the
            ordinary ViewEngine.Engines.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.CachingViewEnginesWrapper.#ctor(System.Web.Mvc.ViewEngineCollection,EPiServer.Framework.Cache.IObjectInstanceCache)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.CachingViewEnginesWrapper" /> class.
            </summary>
      <param name="viewEngines">The view engines.</param>
      <param name="cache">The cache.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.CachingViewEnginesWrapper.FindPartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>
            Finds the partial view with given name.
            </summary>
      <param name="controllerContext">The controller context.</param>
      <param name="partialViewName">Partial name of the view.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.CachingViewEnginesWrapper.FindView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>
            Finds the view with given name.
            </summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewName">Name of the view.</param>
      <param name="masterName">Name of the master.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.CachingViewEnginesWrapper.FindInternal(System.Web.HttpContextBase,System.Func{System.String},System.Func{System.Web.Mvc.ViewEngineResult})">
      <summary>
            The actual implementation. It delegates calls to the wrapped <see cref="T:System.Web.Mvc.ViewEngineCollection" /> but caches no-hits 
            when running in release mode.
            </summary>
      <param name="context">The context.</param>
      <param name="cacheKeyResolver">The cache key resolver.</param>
      <param name="viewResolver">The view resolver.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.ContentAreaContext">
      <summary>
            A helper object that can be used when rendering content in a <see cref="T:EPiServer.Core.ContentArea" />. It keeps track 
            of which content that is currently rendered. This is needed to be able to output edit attributes for
            correct elements.
            </summary>
      <remarks>
            This class implements <see cref="T:System.IDisposable" /> and should be used inside a using statement.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentAreaContext.#ctor(System.Web.Routing.RequestContext,EPiServer.Core.ContentReference)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.ContentAreaContext" /> class.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentAreaContext.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentAreaContext.Dispose(System.Boolean)">
      <summary>
            Triggers the end element when <paramref name="disposing" /> is true
            </summary>
      <param name="disposing">
        <c>true</c> to write the end element.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.ContentContext">
      <summary>
            Keeps track of the current context during rendering. This is used e.g. to output 
            edit attributes for correct properties.
            </summary>
      <remarks>
            In case rendering is done through helper method PropertyFor then this is taken care of automatically.
            </remarks>
    </member>
    <member name="F:EPiServer.Web.Mvc.ContentContext.ContentContextKey">
      <summary>
            Marker to indicate the text which is stored in httpContext.Items.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Mvc.ContentContext.ContentPropertiesStack">
      <summary>
            Contains information about current rendering context.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentContext.ContentPropertiesStack.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.ContentContext.ContentPropertiesStack" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.ContentContext.ContentPropertiesStack.StackedProperties">
      <summary>
            Gets or sets the stacked properties.
            </summary>
      <value>The stacked properties.</value>
    </member>
    <member name="P:EPiServer.Web.Mvc.ContentContext.ContentPropertiesStack.Content">
      <summary>
            Gets the current content rendering.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:EPiServer.Web.Mvc.ContentContext.ContentPropertiesStack.ContentLink">
      <summary>
            Gets or sets the content link that is currently rendered.
            </summary>
      <value>The content link.</value>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentContext.PushCurrentProperty(System.Web.Routing.RequestContext,System.String)">
      <summary>
            Adds to context that the property with given name is currently rendered.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentContext.PopCurrentProperty(System.Web.Routing.RequestContext)">
      <summary>
            Pops the current property from context. This should used in combination with <see cref="M:EPiServer.Web.Mvc.ContentContext.PushCurrentProperty(System.Web.Routing.RequestContext,System.String)" /> and called when
            the property is done rendered.
            </summary>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentContext.PushCurrentContent(System.Web.Routing.RequestContext,EPiServer.Core.ContentReference)">
      <summary>
            Pushes the current content rendered to context. This is needed when rendering a content area since then the current rendered might
            differ from the routed content. 
            </summary>
      <remarks>
            Instead of calling <see cref="M:EPiServer.Web.Mvc.ContentContext.PushCurrentContent(System.Web.Routing.RequestContext,EPiServer.Core.ContentReference)" /> and <see cref="M:EPiServer.Web.Mvc.ContentContext.PopCurrentContent(System.Web.Routing.RequestContext,EPiServer.Core.ContentReference)" /> can <see cref="T:EPiServer.Web.Mvc.ContentAreaContext" /> be used.
            </remarks>
      <param name="requestContext">The request context.</param>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentContext.PopCurrentContent(System.Web.Routing.RequestContext,EPiServer.Core.ContentReference)">
      <summary>
            Pops the current content rendered from context. This is needed when rendering a content area since then the current rendered might
            differ from the routed content. So this method should be used in combination with <see cref="M:EPiServer.Web.Mvc.ContentContext.PushCurrentContent(System.Web.Routing.RequestContext,EPiServer.Core.ContentReference)" />.
            </summary>
      <remarks>
            Instead of calling <see cref="M:EPiServer.Web.Mvc.ContentContext.PushCurrentContent(System.Web.Routing.RequestContext,EPiServer.Core.ContentReference)" /> and <see cref="M:EPiServer.Web.Mvc.ContentContext.PopCurrentContent(System.Web.Routing.RequestContext,EPiServer.Core.ContentReference)" /> can <see cref="T:EPiServer.Web.Mvc.ContentAreaContext" /> be used.
            </remarks>
      <param name="requestContext">The request context.</param>
      <param name="contentLink">The content link.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentContext.ShouldRenderEditAttributes(System.Web.Routing.RequestContext,System.String,EPiServer.IContentLoader)">
      <summary>
            This method can be used to determine if edit attributes should be added when rendering a property.
            </summary>
      <remarks>
            This method requires that the other push, pop methods on the context is used.
            </remarks>
      <param name="requestContext">The request context.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="contentLoader">The content loader.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.ContentController`1">
      <summary>
            Provides the base implementation for for content controllers.
            </summary>
      <remarks>
            The ContentController class is small, containing only a few methods and properties for handling three basic tasks:
            <list type="bullet"><item><description>Support for access checks.</description></item><item><description>Support for handling actions that are not available in the controller.</description></item><item><description>Setting up the capability of impersonating visitor groups.</description></item></list></remarks>
    </member>
    <member name="T:EPiServer.Web.Mvc.ContentOutputCacheAttribute">
      <summary>
            Attribute that can be used to specify that the output from a action should be put in output cache.
            </summary>
      <remarks>
        <para>
            This attibute cannot be used on child actions. The reason for this is that in MVC child actions are output cached in a memory cache
            and hence the output cache will not be invalidated when a content is changed.
            </para>
            The output cache is turned on based on the following criteria:
            <para>
            1. The <b>httpCacheExpiration</b> in web.config is &gt; 0.
            </para><para>
            2. The current user must not be logged on, aka Anonymous.
            </para><para>
            3. The request must be a GET type request. Hence, Postbacks and form postings will not be cached.
            </para><para>
            4. The current content must be the published version (the WorkID is == 0).
            </para><para>
            Some cache parameters are fetched from configruation if not present on attribute. More specifically if Duration is 0 then
            the <b>httpCacheExpiration</b> (on element/episerver/sites/site/SiteSetting) value from web.config is used. 
            And if VaryByCustom is null or empty then <b>httpCacheVaryByCustom</b> (on element/episerver/sites/site/SiteSetting) value
            from web.config is used.
            Cache item expiration is set to the <b>httpCacheExpiration</b> 
            setting, which is the number of seconds the item should reside in the cache, as long as the <b>IVersionable.StopPublish</b> 
            value of the content is not less than the policy timeout (in which case, the <b>StopPublish</b> value is used).
            </para></remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentOutputCacheAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.ContentOutputCacheAttribute" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.ContentOutputCacheAttribute.ConfigurationSettings">
      <summary>
            Gets or sets the configuration settings.
            </summary>
      <value>The configuration settings.</value>
    </member>
    <member name="P:EPiServer.Web.Mvc.ContentOutputCacheAttribute.ContentLoader">
      <summary>
            Gets or sets the content loader.
            </summary>
      <value>The content loader.</value>
    </member>
    <member name="P:EPiServer.Web.Mvc.ContentOutputCacheAttribute.Disable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Web.Mvc.ContentOutputCacheAttribute" /> is disabled.
            </summary>
      <remarks>
            This value is mainly used when a baseclass specifies that output cache should be used, then a subclass
            can put the attribute with Disable=true to prevent output cache to be used for the subclass.
            </remarks>
      <value>
        <c>true</c> if disable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.Mvc.ContentOutputCacheAttribute.UseOutputCacheValidator">
      <summary>
            Gets or sets the use output cache validator.
            </summary>
      <remarks>
            This is the function that is called to evaluate if a request should be added to output cache. 
            The default implementation calls <see cref="M:EPiServer.Web.Internal.OutputCacheHandler.UseOutputCache(System.Security.Principal.IPrincipal,System.Web.HttpContextBase,System.TimeSpan)" />.
            </remarks>
      <value>The use output cache validator.</value>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentOutputCacheAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>
            This method is an implementation of <see cref="M:System.Web.Mvc.IActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)" /> and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code.
            </summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.ContentOutputCacheAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>
            Called before the action result executes.
            </summary>
      <param name="filterContext">The filter context, which encapsulates information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="T:EPiServer.Web.Mvc.ControllerTypeControllerFactory">
      <summary>
            Controller factory, which tries to resolve the controller type from the <see cref="T:System.Web.Routing.RequestContext" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ControllerTypeControllerFactory.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.ControllerTypeControllerFactory" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ControllerTypeControllerFactory.#ctor(EPiServer.Web.Mvc.IControllerTypeMap)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.ControllerTypeControllerFactory" /> class.
            </summary>
      <param name="controllerTypeMap">The controller type map.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.ControllerTypeControllerFactory.GetControllerType(System.Web.Routing.RequestContext,System.String)">
      <summary>
            Gets the type of the controller to create.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="controllerName">Name of the controller.</param>
      <returns>
            The type of controller to use for the current request.
            </returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.ControllerTypeMap">
      <summary>
            Helps to find controller which match the request context and controller name
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ControllerTypeMap.TryGetControllerType(System.Web.Routing.RequestContext,System.Type@)">
      <summary>
            Tries to resolve the type for a certain controller name.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="controllerType">The matching controller type.</param>
      <returns>
            True if a controller type was matched.
            </returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.EditHint">
      <summary>
            Connection between view model property and content data property
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.EditHint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.EditHint" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.EditHint.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.EditHint" /> class.
            </summary>
      <param name="viewModelPropertyName">Name of the view model property.</param>
      <param name="contentDataPropertyName">Name of the content data property.</param>
    </member>
    <member name="P:EPiServer.Web.Mvc.EditHint.ViewModelPropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.EditHint.ContentDataPropertyName">
      <summary>
            Gets or sets the name of the content data property.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.EditHint.None">
      <summary>
            Gets an empty edit hint, indicating there should not be an editing hint.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Mvc.EditHintCollection`2">
      <summary>
            Collection of connections between view model properties and content data properties
            </summary>
      <typeparam name="TViewModel">The type of the view model.</typeparam>
      <typeparam name="TContentData">The type of the content data.</typeparam>
    </member>
    <member name="M:EPiServer.Web.Mvc.EditHintCollection`2.#ctor(System.Collections.Generic.IList{EPiServer.Web.Mvc.EditHint},System.Collections.Generic.IList{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.EditHintCollection`2" /> class.
            </summary>
      <param name="backingPropertyHints">The backing property hints.</param>
      <param name="fullRefreshEditHints">The full refresh edit hints.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.EditHintCollection`2.AddConnection``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>
            Adds a connection between a view model property and a content data property.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="viewModelProperty">The property on the view model.</param>
      <param name="contentDataProperty">The property on the content data object.</param>
    </member>
    <member name="P:EPiServer.Web.Mvc.EditHintCollection`2.Connections">
      <summary>
            Gets the property connections between the view model and IContent.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.AlternateLinksExtensions">
      <summary>
            Extension methods for rendering Alternative link elements for multilingual content.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.AlternateLinksExtensions.AlternateLinks(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentReference,System.String)">
      <summary>
            Renders a alternative link element for the provided parameters.
            </summary>
      <param name="html">The HTML.</param>
      <param name="contentLink">The content for which alternate links should be rendered. If null, the currently routed content will be used.</param>
      <param name="action">The controller action that should be appended to the url. If null the current action will be used. Use an empty string to remove the current action.</param>
      <returns>
            A canonical link element with the canonical url for the provided parameters.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.AlternateLinksExtensions.AlternateLinks(System.Web.Mvc.HtmlHelper)">
      <summary>
            Renders a canonical link element for the current context.
            </summary>
      <param name="html">The HTML.</param>
      <returns>A canonical link element with the canonical url for the current context.</returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.CanonicalLinkExtensions">
      <summary>
            Extension methods for rendering Canonical link tags for content.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.CanonicalLinkExtensions.CanonicalLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentReference,System.String,System.String)">
      <summary>
            Renders a canonical link element for the provided parameters.
            </summary>
      <param name="html">The HTML.</param>
      <param name="contentLink">The content link of the content. If null the current content will be used.</param>
      <param name="language">The content language. If null the current content language or preferred language will be used.</param>
      <param name="action">The controller action that should be appended to the url. If null the current action will be used. Use an empty string to remove the current action.</param>
      <returns>A canonical link element with the canonical url for the provided parameters.</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.CanonicalLinkExtensions.CanonicalLink(System.Web.Mvc.HtmlHelper)">
      <summary>
            Renders a canonical link element for the current context.
            </summary>
      <param name="html">The HTML.</param>
      <returns>A canonical link element with the canonical url for the current context.</returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.CategoryListExtensions">
      <summary>
            Contains extension methods related to <see cref="M:EPiServer.Web.Mvc.Html.CategoryListExtensions.CategoryList(System.Web.Mvc.HtmlHelper,EPiServer.Core.CategoryList)" /> for <see cref="T:System.Web.Mvc.HtmlHelper" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.CategoryListExtensions.CategoryList(System.Web.Mvc.HtmlHelper,EPiServer.Core.CategoryList)">
      <summary>Returns the value of the specified CategoryList as a comma separated list of category names.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="categoryList">The category list whose value to return.</param>
      <returns>
            The value of the <paramref name="categoryList" /> as a comma separated list of category names or <see cref="F:System.Web.Mvc.MvcHtmlString.Empty" /> if no value is set.
            </returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.ContentAreaExtensions">
      <summary>
            Extension methods for rendering content areas insode MVC views 
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaExtensions.RenderContentArea(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentArea)">
      <summary>
            Renders the content area on the stream.
            </summary>
      <param name="htmlHelper">The HTML.</param>
      <param name="contentArea">The content area.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.ContentAreaRenderer">
      <summary>
            The default implementation for rendering a <see cref="T:EPiServer.Core.ContentArea" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Html.ContentAreaRenderer" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.#ctor(EPiServer.Web.Mvc.IContentRenderer,EPiServer.Web.TemplateResolver,EPiServer.Web.IContentAreaItemAttributeAssembler,EPiServer.IContentRepository,EPiServer.Web.IContentAreaLoader)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Html.ContentAreaRenderer" /> class.
            </summary>
      <param name="contentRenderer">The content renderer.</param>
      <param name="templateResolver">The template resolver.</param>
      <param name="attributeAssembler">The attribute assembler generating fragment identification in edit mode.</param>
      <param name="contentRepository">The content repository.</param>
      <param name="contentAreaLoader">The content area loader</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.Render(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentArea)">
      <summary>
            Renders the <see cref="T:EPiServer.Core.ContentArea" /> to the writer on the current <see cref="T:System.Web.Mvc.HtmlHelper" />.
            </summary>
      <param name="htmlHelper">The Html helper</param>
      <param name="contentArea">The content area</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.RenderContentAreaItems(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentAreaItem})">
      <summary>
            Render the <see cref="T:EPiServer.Core.ContentAreaItem" />s.
            </summary>
      <param name="htmlHelper">The html helper</param>
      <param name="contentAreaItems">The content area items to render</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.RenderContentAreaItem(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentAreaItem,System.String,System.String,System.String)">
      <summary>
            Render a <see cref="T:EPiServer.Core.ContentAreaItem" />.
            </summary>
      <param name="htmlHelper">The html helper</param>
      <param name="contentAreaItem">The content area item to render</param>
      <param name="templateTag">The template tag used to resolve the display template</param>
      <param name="htmlTag">The html tag for the element wrapping the display template</param>
      <param name="cssClass">The css class for the element wrapping the display template</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.BeforeRenderContentAreaItemStartTag(System.Web.Mvc.TagBuilder,EPiServer.Core.ContentAreaItem)">
      <summary>
            Executed before the <see cref="T:EPiServer.Core.Html.StringParsing.ContentFragment" /> start tag has been written. Use this to modify the <see cref="T:EPiServer.Core.Html.StringParsing.ContentFragment" />s start tag.
            </summary>
      <param name="tagBuilder">The tag builder</param>
      <param name="contentAreaItem">The content area item</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.ShouldRenderWrappingElement(System.Web.Mvc.HtmlHelper)">
      <summary>
            Determine whether a container element should be rendered around the content fragments. Looks in the view data for the 
            RenderSettings.HasContainerElement setting. Defaults to true if not defined.
            </summary>
      <param name="htmlHelper">The html helper</param>
      <returns>The value set in the view data; otherwise true</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.ResolveTemplate(System.Web.Mvc.HtmlHelper,EPiServer.Core.IContent,System.String)">
      <summary>
            Resolve the template for the <see cref="T:EPiServer.Core.ContentAreaItem" /> based on the template tag.
            </summary>
      <param name="htmlHelper">The html helper</param>
      <param name="content">The content.</param>
      <param name="templateTag">The template tag used to resolve the display template</param>
      <returns>
            A template model
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.GetContentAreaTemplateTag(System.Web.Mvc.HtmlHelper)">
      <summary>
            Gets the template tag for the <see cref="T:EPiServer.Core.ContentArea" />. Looks in the view data for the RenderSettings.Tag setting.
            </summary>
      <param name="htmlHelper">The html helper</param>
      <returns>The template tag</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.GetContentAreaItemTemplateTag(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentAreaItem)">
      <summary>
            Gets the template tag for the <see cref="T:EPiServer.Core.ContentAreaItem" />. If a tag is defined on the display options for
            the <see cref="T:EPiServer.Core.ContentAreaItem" /> then that is used; otherwise it uses the content areas template tag.
            </summary>
      <param name="htmlHelper">The html helper</param>
      <param name="contentAreaItem">The content area item</param>
      <returns>The template tag for the content area item</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.GetContentAreaHtmlTag(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentArea)">
      <summary>
            Gets the html tag for the container. Looks in the view data for the RenderSettings.CustomTag setting.
            </summary>
      <param name="htmlHelper">The html helper</param>
      <param name="contentArea">The content area</param>
      <returns>The container html tag</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.GetContentAreaItemHtmlTag(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentAreaItem)">
      <summary>
            Gets the html tag for the content area item. Looks in the view data for the RenderSettings.ChildrenCustomTag setting.
            </summary>
      <param name="htmlHelper">The html helper</param>
      <param name="contentAreaItem">The content area item</param>
      <returns>The html tag for the content area item</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.GetContentAreaItemCssClass(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentAreaItem)">
      <summary>
            Gets the css class for the content area item. Looks in the view data for the RenderSettings.ChildrenCssClass setting.
            </summary>
      <param name="htmlHelper">The html helper</param>
      <param name="contentAreaItem">The content area item</param>
      <returns>The css class for the content area item</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.IsInEditMode(System.Web.Mvc.HtmlHelper)">
      <summary>
            Determines if the request context is in edit mode.
            </summary>
      <param name="htmlHelper">The html helper</param>
      <returns>
        <code>true</code> if the context is in edit mode; otherwise <code>false</code></returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.ContentAreaRenderer.AddNonEmptyCssClass(System.Web.Mvc.TagBuilder,System.String)">
      <summary>
            Add a css class to the <see cref="T:System.Web.Mvc.TagBuilder" /> if it is not null or white space.
            </summary>
      <param name="tagBuilder">The tag builder</param>
      <param name="cssClass">The class to addd</param>
      <returns>The given tag builder</returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions">
      <summary>
            Extensions related to page links for <see cref="T:System.Web.Mvc.HtmlHelper" />.
            </summary>
      <summary>
            Extensions related to page links for <see cref="T:System.Web.Mvc.HtmlHelper" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.ContentLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentReference)">
      <summary>
            Creates an html anchor to a node by page link using the name of the page as the link text.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="contentLink">A reference to the page that should be the target of the link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.ContentLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.ContentReference,System.Object,System.Object)">
      <summary>
            Creates an html anchor to the specified content.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="contentLink">The content link.</param>
      <param name="routeValues">The route values</param>
      <param name="htmlAttributes">The htmlAttributes</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.ContentLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.IContent)">
      <summary>
            Creates an html anchor to the specified content.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="content">The content that should be the target of the link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.ContentLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.IContent,System.Object,System.Object)">
      <summary>
            Creates an html anchor to the specified content.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="content">The content that should be the target of the link.</param>
      <param name="routeValues">The route values</param>
      <param name="htmlAttributes">The htmlAttributes</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.ContentLink(System.Web.Mvc.HtmlHelper,System.String,EPiServer.Core.ContentReference)">
      <summary>
            Creates an html anchor to a node by page link.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="text">The link text.</param>
      <param name="contentLink">A reference to the page that should be the target of the link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.ContentLink(System.Web.Mvc.HtmlHelper,System.String,EPiServer.Core.ContentReference,System.Object,System.Object)">
      <summary>
            Creates an html anchor to a node by content link.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="text">The link text.</param>
      <param name="contentLink">A reference to the content that should be the target of the link.</param>
      <param name="routeValues">The route values</param>
      <param name="htmlAttributes">The htmlAttributes</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.ContentLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PropertyData)">
      <summary>
            Creates an html ancor to a node by a property data
            </summary>
      <param name="htmlHelper">Html helper instance</param>
      <param name="propertyData">Property data to create the html ancor from</param>
      <returns>MvcHtmlString containing the page link</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.ContentLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PropertyContentReference)">
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.ContentLink(System.Web.Mvc.HtmlHelper,EPiServer.SpecializedProperties.LinkItem)">
      <summary>
            Creates an html ancor to a node by a link item
            </summary>
      <param name="htmlHelper">Html helper instance</param>
      <param name="item">Link item to create the html ancor from</param>
      <returns>MvcHtmlString containing the page link</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PageData)">
      <summary>
            Creates an html anchor to a node by page data.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="page">The page that should be the target of the link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PageData,System.Object,System.Object)">
      <summary>
            Creates an html anchor to a node by page data.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="page">The page that should be the target of the link.</param>
      <param name="routeValues">The route values</param>
      <param name="htmlAttributes">The htmlAttributes</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,System.String,EPiServer.Core.PageReference)">
      <summary>
            Creates an html anchor to a node by page link.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="text">The link text.</param>
      <param name="pageLink">A reference to the page that should be the target of the link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,System.String,EPiServer.Core.PageReference,System.Object,System.Object)">
      <summary>
            Creates an html anchor to a node by page link.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="text">The link text.</param>
      <param name="pageLink">A reference to the page that should be the target of the link.</param>
      <param name="routeValues">The route values</param>
      <param name="htmlAttributes">The htmlAttributes</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PageReference)">
      <summary>
            Creates an html anchor to a node by page link using the name of the page as the link text.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="pageLink">A reference to the page that should be the target of the link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PageReference,System.Object,System.Object)">
      <summary>
            Creates an html anchor to a node by page link using the name of the page as the link text.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="pageLink">A reference to the page that should be the target of the link.</param>
      <param name="routeValues">The route values</param>
      <param name="htmlAttributes">The html attributes to use in the page link.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PageReference,System.Object,System.Object,EPiServer.IContentRepository)">
      <summary>
            Creates an html anchor to a node by page link using the name of the page as the link text.
            </summary>
      <param name="htmlHelper">The html helper to attach the extension to.</param>
      <param name="pageLink">A reference to the page that should be the target of the link.</param>
      <param name="routeValues">The route values</param>
      <param name="htmlAttributes">The html attributes to use in the page link.</param>
      <param name="contentRepository">The page repository.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PropertyData)">
      <summary>
            Creates an html ancor to a node by a property data
            </summary>
      <param name="htmlHelper">Html helper instance</param>
      <param name="propertyData">Property data to create the html ancor from</param>
      <returns>MvcHtmlString containing the page link</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PropertyData,EPiServer.IContentRepository)">
      <summary>
            Creates an html ancor to a node by a property data
            </summary>
      <param name="htmlHelper">Html helper instance</param>
      <param name="propertyData">Property data to create the html ancor from</param>
      <param name="contentRepository">Data factory instance</param>
      <returns>MvcHtmlString containing the page link</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PropertyPageReference)">
      <summary>
            Creates an html ancor to a node by a property page reference
            </summary>
      <param name="htmlHelper">Html helper instance</param>
      <param name="propertyData">Property page reference to create the html ancor from</param>
      <returns>MvcHtmlString containing the page link</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.StructureHtmlHelperExtensions.PageLink(System.Web.Mvc.HtmlHelper,EPiServer.Core.PropertyPageReference,EPiServer.IContentRepository)">
      <summary>
            Creates an html ancor to a node by a property page reference
            </summary>
      <param name="htmlHelper">Html helper instance</param>
      <param name="propertyData">Property page reference to create the html ancor from</param>
      <param name="contentRepository">Optional page repository instance</param>
      <returns>MvcHtmlString containing the page link</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.HtmlFragmentExtensions">
      <summary>
            Extensions related to <see cref="T:EPiServer.Core.PropertyData" /> and property rendering for <see cref="T:System.Web.Mvc.HtmlHelper" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.HtmlFragmentExtensions.Fragment(System.Web.Mvc.HtmlHelper,EPiServer.HtmlParsing.HtmlFragment)">
      <summary>
            Renders partial views from fragment data and returns it on an MvcHtmlString object
            </summary>
      <param name="htmlHelper">HtmlHelper</param>
      <param name="fragment">The fragment to render.</param>
      <returns>An <see cref="T:System.Web.Mvc.MvcHtmlString" /> containing the rendered fragment.</returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.UrlExtensions">
      <summary>Contains extension methods related to friendly urls for <see cref="T:System.Web.Mvc.UrlHelper" />.</summary>
      <summary>Contains extension methods related to friendly urls for <see cref="T:System.Web.Mvc.UrlHelper" />.</summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.UrlExtensions.ContentLink(System.Web.Mvc.HtmlHelper,EPiServer.Url)">
      <summary>
            Renders a content link. Uses IContent.Name property as an anchor innerHTML
            </summary>
      <param name="htmlHelper">The HTML helper</param>
      <param name="url">The URL</param>
      <returns>An anchor tag with the specified url and content name in innerHTML.</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.UrlExtensions.ContentLink(System.Web.Mvc.HtmlHelper,EPiServer.Url,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Renders a content link. Uses IContent.Name property as an anchor innerHTML
            </summary>
      <param name="htmlHelper">The HTML helper</param>
      <param name="url">The URL</param>
      <param name="htmlAttributes">The HTML attributes.</param>
      <returns>An anchor tag with the specified url and content name in innerHTML.</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.UrlExtensions.UrlLink(System.Web.Mvc.HtmlHelper,EPiServer.Url)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.UrlExtensions.UrlLink(System.Web.Mvc.HtmlHelper,EPiServer.Url,System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.UrlExtensions.UrlLink(System.Web.Mvc.HtmlHelper,EPiServer.Url,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Returns an anchor tag with the specified url.
            </summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="url">The URL.</param>
      <param name="linkText">The link text.</param>
      <param name="htmlAttributes">The HTML attributes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> is <c>null</c>.</exception>
      <returns>An anchor tag with the specified url.</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.UrlExtensions.RenderGenericTag(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Renders the generic tag.
            </summary>
      <param name="innerText">The inner text.</param>
      <param name="htmlAttributes">The HTML attributes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.UrlExtensions.PageUrl(System.Web.Mvc.UrlHelper,System.String)">
      <summary>Legacy method: Returns the hierarchical URL representation of a classic URL.</summary>
      <param name="urlHelper">The URL helper instance that this method extends.</param>
      <param name="classicUrl">
        <para>The classic URL that should be converted into an hierarchical URL.</para>
        <para>The URL can be absolute or relative.</para>
      </param>
      <returns>
        <para>Depending on the value of <paramref name="classicUrl" /> this method returns:</para>
        <list type="bullet">
          <item>
            <description>a hierarchical representation of <paramref name="classicUrl" /> if it refers to a page in this application.</description>
          </item>
          <item>
            <description>
              <paramref name="classicUrl" /> if it refers to an external resource.</description>
          </item>
          <item>
            <description>
              <see cref="F:System.Web.Mvc.MvcHtmlString.Empty">MvcHtmlString.Empty</see> if <paramref name="classicUrl" /> could not be converten into an URL.</description>
          </item>
        </list>
      </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="classicUrl" /> is <c>null</c>.</exception>
      <remarks>
        <para>The string returned does not contain an anchor tag, it only contains the URL.</para>
        <para>This method exists for legacy reasons, event though it returns a MvcHtmlString the output is not either HTML or encoded.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.UrlExtensions.ContentUrl(System.Web.Mvc.UrlHelper,EPiServer.Core.ContentReference)">
      <summary>
            Resolves an URL using routing for a specific <see cref="T:EPiServer.Core.ContentReference" /></summary>
      <param name="urlHelper">The URL helper instance that this method extends</param>
      <param name="contentLink">The content reference to resolve</param>
      <returns>The URL or an empty string</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.UrlExtensions.ContentUrl(System.Web.Mvc.UrlHelper,EPiServer.Url)">
      <summary>
            Resolves an URL using routing for a <see cref="T:EPiServer.Url" /></summary>
      <param name="urlHelper">The URL helper instance that this method extends</param>
      <param name="url">The url to resolve</param>
      <returns>The URL or an empty string</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.HtmlString.GetMvcHtmlString(System.Action{System.IO.TextWriter})">
      <summary>
            Creates an Writer, runs the delegate that will use the writer, and return the writer as an MvcHtmlString
            </summary>
      <param name="action">The delegate that will write to the writer</param>
      <returns>MvcHtmlString containing the result from the delegate</returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.IContentDataExtensions">
      <summary>
            Contains extension methods related to <see cref="T:EPiServer.Core.IContentData" /> for <see cref="T:System.Web.Mvc.HtmlHelper" />.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Mvc.Html.IContentDataExtensions.InsideContentAreaMarker">
      <summary>
            Key that is used to define if a content instance is rendererd inside a content area.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.IContentDataExtensions.RenderContentData(System.Web.Mvc.HtmlHelper,EPiServer.Core.IContentData,System.Boolean)">
      <summary>
            Calls the render of the block to render the block context to the stream.
            </summary>
      <param name="html">The HTML.</param>
      <param name="contentData">The content data.</param>
      <param name="isContentInContentArea">Flag that indicates if the content is rendered inside a content area.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.IContentDataExtensions.RenderContentData(System.Web.Mvc.HtmlHelper,EPiServer.Core.IContentData,System.Boolean,System.String)">
      <summary>
            Calls the renderer of the block to render the block context to the stream.
            </summary>
      <param name="html">The HTML.</param>
      <param name="contentData">The content data.</param>
      <param name="isContentInContentArea">A flag indicating if the content is rendered inside a content area.</param>
      <param name="templateTag">A tag used to resolve the content template to use.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.IContentDataExtensions.RenderContentData(System.Web.Mvc.HtmlHelper,EPiServer.Core.IContentData,System.Boolean,EPiServer.DataAbstraction.TemplateModel,EPiServer.Web.Mvc.IContentRenderer)">
      <summary>
            Calls the render of the block to render the block context to the stream.
            </summary>
      <param name="html">The HTML.</param>
      <param name="contentData">The content data.</param>
      <param name="isContentInContentArea">Flag that indicates if the content is rendered inside a content area</param>
      <param name="templateModel">The template model.</param>
      <param name="contentRenderer">The content renderer.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.PropertyExtensions">
      <summary>
            Display extensions
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.Html.PropertyExtensions.PropertyRenderer">
      <summary>
            The property renderer
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.PropertyFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Returns HTML markup for each property in the object that is represented by the Expression expression.
            </summary>
      <typeparam name="TModel">The content data type.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper instance that this method extends..</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.PropertyFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>
            Returns HTML markup for each property in the object that is represented by the Expression expression.
            </summary>
      <typeparam name="TModel">The content data type.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper instance that this method extends..</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the ViewDataDictionary instance that is created for the template.</param>
      <returns>
            The HTML markup for each property in the object that is represented by the expression.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.PropertyFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>
            Returns HTML markup for each property in the object that is represented by the Expression expression.
            </summary>
      <typeparam name="TModel">The content data type.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper instance that this method extends..</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object..</param>
      <returns>
            The HTML markup for each property in the object that is represented by the expression.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.PropertyFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>
            Returns HTML markup for each property in the object that is represented by the Expression expression.
            </summary>
      <typeparam name="TModel">The content data type.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper instance that this method extends..</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object..</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the ViewDataDictionary instance that is created for the template.</param>
      <returns>
            The HTML markup for each property in the object that is represented by the expression.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.PropertyFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>
            Returns HTML markup for each property in the object that is represented by the Expression expression.
            </summary>
      <typeparam name="TModel">The content data type.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper instance that this method extends..</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <returns>
            The HTML markup for each property in the object that is represented by the expression.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.PropertyFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object,System.Object)">
      <summary>
            Returns HTML markup for each property in the object that is represented by the Expression expression.
            </summary>
      <typeparam name="TModel">The content data type.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper instance that this method extends..</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the ViewDataDictionary instance that is created for the template.</param>
      <param name="editorSettings">Any custom editor settings.</param>
      <returns>
            The HTML markup for each property in the object that is represented by the expression.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.CreateEditElement(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Func{System.String})">
      <summary>
            Creates an edit container. The object can create an element in edit mode
            </summary>
      <param name="helper">The html helper.</param>
      <param name="epiPropertyKey">Key of the epi property.</param>
      <param name="epiPropertyName">Name of the epi property.</param>
      <param name="editElementName">Name of the edit element.</param>
      <param name="editElementCssClass">The CSS class for edit element.</param>
      <param name="attributeWriter">The attribute writer.</param>
      <returns>
            EditContainer object. At dispose, the element end will be written.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.EditContainerClass(System.Web.Mvc.HtmlHelper)">
      <summary>
            Get the default CSS class for edit container.
            </summary>
      <param name="helper">The helper.</param>
      <returns>
            Default CSS class for edit container if in editing mode, otherwise returns empty string.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.EditContainerClass(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
            Get the CSS class for edit container.
            </summary>
      <param name="helper">The helper.</param>
      <param name="editContainerClass">The custom CSS class for edit container.</param>
      <returns>
            Specified custom CSS class for edit container if in editing mode, otherwise returns empty string.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.EditAttributes(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
            Get the required attribute to make an html element editable. Will return an empty string if not in edit context mode.
            </summary>
      <param name="helper">The html helper.</param>
      <param name="propertyName">The property name.</param>
      <returns>
            The required attribute to make an html element editable.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.EditAttributes``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Get the required attribute to make an html element editable. Will return an empty string if not in edit context mode.
            </summary>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="helper">The html helper.</param>
      <param name="expression">The expression.</param>
      <returns>
            The required attribute to make an html element editable.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.BeginEditSection(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>
            Writes the required attribute to make an html element editable (when in edit mode).
            <para>
            BeginEditSection/EndEditSection should be used instead of EditAttributes when rendering a block or inside
            partial views for blocks.
            </para><para>
            The difference between EditAttributes and BeginEditSection/EndEditSection is that when using BeginEditSection then no other
            edit hints for nested properties will be written out before EndEditSection is called.
            </para></summary>
      <param name="helper">The html helper.</param>
      <param name="htmlElement">The HTML element.</param>
      <param name="propertyName">The property name.</param>
      <returns>
            The required attribute to make an html element editable.
            </returns>
      <remarks>
            This should be used together with EndEditSection.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.BeginEditSection(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>
            Writes the required attribute to make an html element editable (when in edit mode).
            <para>
            BeginEditSection/EndEditSection should be used instead of EditAttributes when rendering a block or inside
            partial views for blocks.
            </para><para>
            The difference between EditAttributes and BeginEditSection/EndEditSection is that when using BeginEditSection then no other
            edit hints for nested properties will be written out before EndEditSection is called.
            </para></summary>
      <param name="helper">The html helper.</param>
      <param name="htmlElement">The HTML element.</param>
      <param name="propertyName">The property name.</param>
      <param name="htmlAttributes">An anonymus object with additional HTML attributes.</param>
      <returns>
            The required attribute to make an html element editable.
            </returns>
      <remarks>
            This should be used together with EndEditSection.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.BeginEditSection``2(System.Web.Mvc.HtmlHelper{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Writes the required attribute to make an html element editable (when in edit mode).
            <para>
            BeginEditSection/EndEditSection should be used instead of EditAttributes when rendering a block or inside
            partial views for blocks.
            </para><para>
            The difference between EditAttributes and BeginEditSection/EndEditSection is that when using BeginEditSection then no other
            edit hints for nested properties will be written out before EndEditSection is called.
            </para></summary>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="helper">The html helper.</param>
      <param name="htmlElement">The HTML element.</param>
      <param name="expression">The expression that points out the property to add edit hints for</param>
      <returns>
            The required attribute to make an html element editable.
            </returns>
      <remarks>
            This should be used together with EndEditSection.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.BeginEditSection``2(System.Web.Mvc.HtmlHelper{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>
            Writes the required attribute to make an html element editable (when in edit mode).
            <para>
            BeginEditSection/EndEditSection should be used instead of EditAttributes when rendering a block or inside
            partial views for blocks.
            </para><para>
            The difference between EditAttributes and BeginEditSection/EndEditSection is that when using BeginEditSection then no other
            edit hints for nested properties will be written out before EndEditSection is called.
            </para></summary>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="helper">The html helper.</param>
      <param name="htmlElement">The HTML element.</param>
      <param name="expression">The expression that points out the property to add edit hints for.</param>
      <param name="htmlAttributes">&gt;An anonymus object with additional HTML attributes.</param>
      <returns>
            The required attribute to make an html element editable.
            </returns>
      <remarks>
            This should be used together with EndEditSection.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.EndEditSection(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
            Marks that the corresponding BeginEditSection is ended.
            <para>
            BeginEditSection/EndEditSection should be used instead of EditAttributes when rendering a block or inside
            partial views for blocks.
            </para><para>
            The difference between EditAttributes and BeginEditSection is that when using BeginEditSection then no other
            edit hints for nested properties will be written out before EndEditSection is called.
            </para></summary>
      <param name="helper">The html helper.</param>
      <param name="htmlElement">The HTML element.</param>
      <returns>the end element.</returns>
      <remarks>
            This should be used together with BeginEditSection and outputs the end element.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.Mvc.Html.PropertyExtensions.CustomSettingsAttributeWriter">
      <summary>
            Gets or sets the function to use to output custom settings attribute.
            Returned value is expected to be in format 'data-epi-property-customsetting=value'.
            </summary>
      <value>The custom settings attribute writer.</value>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.FullRefreshPropertiesMetaData(System.Web.Mvc.HtmlHelper,System.String[])">
      <summary>
            Returns a hidden input element with a data-epi-full-refresh-property-names attribute containing a comma separated list of names of properties that requires a full page refresh when edited.
            </summary>
      <param name="helper">The html helper.</param>
      <param name="propertyNames">The names of the properties that require a full refresh.</param>
      <returns>A hidden input with a data-epi-full-refresh-property-names containing the list of propertiy names passed to <paramref name="propertyNames" />.</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyExtensions.FullRefreshPropertiesMetaData``1(System.Web.Mvc.HtmlHelper{``0})">
      <summary>
            Returns a hidden input element with a data-epi-full-refresh-property-names attribute containing a comma separated list of names of properties that requires a full page refresh when edited.
            </summary>
      <param name="helper">The html helper.</param>
      <returns>A hidden input with a data-epi-full-refresh-property-names containing the list of property names found in the ViewData.</returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.PropertyRenderer">
      <summary>
            Property rendering in MVC.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Html.PropertyRenderer" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyRenderer.#ctor(EPiServer.Web.Mvc.CachingViewEnginesWrapper,EPiServer.Framework.Serialization.IObjectSerializerFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Html.PropertyRenderer" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.Html.PropertyRenderer.CustomSettingsAttributeWriter">
      <summary>
            Gets or sets the function to use to output custom settings attribute.
            Returned value is expected to be in format 'data-epi-property-customsetting=value'.
            </summary>
      <value>The custom settings attribute writer.</value>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyRenderer.PropertyFor``2(System.Web.Mvc.HtmlHelper{``0},System.String,System.Object,System.Object,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.String,System.Web.Mvc.MvcHtmlString})">
      <summary>
            Returns HTML markup for each property in the object that is represented by the Expression expression.
            </summary>
      <typeparam name="TModel">The content data type.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="viewModelPropertyName">The property name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the ViewDataDictionary instance that is created for the template.</param>
      <param name="editorSettings">Any custom editor settings.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="displayForAction">The The displayFor action.</param>
      <returns>
            The HTML markup for each property in the object that is represented by the expression.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyRenderer.GetHtmlForEditMode``2(System.Web.Mvc.HtmlHelper{``0},System.String,System.Object,System.Func{System.String,System.Web.Mvc.MvcHtmlString},System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>
            Returns HTML markup for each property in the object that is represented by the Expression expression.
            </summary>
      <typeparam name="TModel">The content data type.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="editorSettings">Any custom editor settings.</param>
      <param name="viewModelPropertyName">The property name.</param>
      <param name="displayForAction">The The displayFor action.</param>
      <param name="templateName">The name of the template that should be called.</param>
      <param name="editElementName">The surrounded element name.</param>
      <param name="editElementCssClass">The css class element name.</param>
      <param name="additionalValues">Additional values.</param>
      <returns>
            The HTML markup for each property in the object that is represented by the expression.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyRenderer.GetHtmlForDefaultMode``2(System.String,System.String,System.String,System.String,System.Func{System.String,System.Web.Mvc.MvcHtmlString})">
      <summary>
            Returns HTML markup for the property when it's rendered in default mode.
            </summary>
      <typeparam name="TModel">The content data type.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="propertyName">The property name.</param>
      <param name="templateName">The name of the template that should be called.</param>
      <param name="elementName">The surrounded element name.</param>
      <param name="elementCssClass">The css class element name.</param>
      <param name="displayForAction">The displayFor action.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyRenderer.CurrentContentContainsProperty``1(System.Web.Mvc.HtmlHelper{``0},System.String)">
      <summary>
            Indicates if a property with the <paramref name="propertyName" /> exists on the current content.
            </summary>
      <typeparam name="TModel">The content type</typeparam>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="propertyName">The property name.</param>
      <returns>
        <c>True</c> if the current content contains a property with the property name.</returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyRenderer.CreateEditElement(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.Func{System.String},System.Func{System.String},System.IO.TextWriter)">
      <summary>
            Creates an edit container. The object can create an element in edit mode
            </summary>
      <param name="helper">The html helper.</param>
      <param name="epiPropertyKey">Key of the epi property.</param>
      <param name="epiPropertyName">Name of the epi property.</param>
      <param name="editElementName">Name of the edit element.</param>
      <param name="editElementCssClass">The CSS class for edit element.</param>
      <param name="renderSettingsAttributeWriter">The render settins attribute writer action.</param>
      <param name="editorSettingsAttributeWriter">The editor settins attribute writer action.</param>
      <param name="writer">The writer.</param>
      <returns>
            EditContainer object. At dispose, the element end will be written.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyRenderer.EditAttributes(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>
            Get the required attribute to make an html element editable. Will return an empty string if not in edit context mode.
            </summary>
      <param name="helper">The html helper.</param>
      <param name="propertyKey">The property key.</param>
      <param name="propertyName">The property name.</param>
      <returns>
            The required attribute to make an html element editable.
            </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyRenderer.BeginEditSection(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
      <summary>
            Writes the required attribute to make an html element editable (when in edit mode).
            <para>
            BeginEditSection/EndEditSection should be used instead of EditAttributes when rendering a block or inside
            partial views for blocks.
            </para><para>
            The difference between EditAttributes and BeginEditSection/EndEditSection is that when using BeginEditSection then no other
            edit hints for nested properties will be written out before EndEditSection is called.
            </para></summary>
      <param name="helper">The html helper.</param>
      <param name="htmlElement">The HTML element.</param>
      <param name="propertyKey">PageEditing.DataEPiPropertyName</param>
      <param name="propertyName">The property name.</param>
      <param name="htmlAttributes">An anonymous object with additional HTML attributes.</param>
      <returns>
            The required attribute to make an html element editable.
            </returns>
      <remarks>
            This should be used together with EndEditSection.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.PropertyRenderer.EndEditSection(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
            Marks that the corresponding BeginEditSection is ended.
            <para>
            BeginEditSection/EndEditSection should be used instead of EditAttributes when rendering a block or inside
            partial views for blocks.
            </para><para>
            The difference between EditAttributes and BeginEditSection is that when using BeginEditSection then no other
            edit hints for nested properties will be written out before EndEditSection is called.
            </para></summary>
      <param name="helper">The html helper.</param>
      <param name="htmlElement">The HTML element.</param>
      <returns>the end element.</returns>
      <remarks>
            This should be used together with BeginEditSection and outputs the end element.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.QuickNavigatorHtmlHelperExtensions">
      <summary>Contains extension methods related to <see cref="T:EPiServer.Web.Mvc.Html.QuickNavigatorHtmlHelperExtensions" /> for <see cref="T:System.Web.Mvc.HtmlHelper" />.</summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.QuickNavigatorHtmlHelperExtensions.RenderEPiServerQuickNavigator(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>
            Renders EPiServer quick navigator for a MVC page
            </summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">Partial name of the view.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.Html.XhtmlStringExtensions">
      <summary>
                Contains extension methods related to <see cref="M:EPiServer.Web.Mvc.Html.XhtmlStringExtensions.XhtmlString(System.Web.Mvc.HtmlHelper,EPiServer.Core.XhtmlString)" /> for <see cref="T:System.Web.Mvc.HtmlHelper" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.XhtmlStringExtensions.XhtmlString(System.Web.Mvc.HtmlHelper,EPiServer.Core.XhtmlString)">
      <summary>Returns the value of the specified XhtmlString as a string.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="xhtmlString">The XHTML string whose value to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xhtmlString" /> is <c>null</c>.</exception>
      <returns>The value of the <paramref name="xhtmlString" /> modified for external use.</returns>
      <remarks>
                To create the return value the property's permanent links are converted to external format, 
                dynamic content is rendered and personalized content considered.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.XhtmlStringExtensions.RenderXhtmlString(System.Web.Mvc.HtmlHelper,EPiServer.Core.XhtmlString)">
      <summary>Writes the value of the specified XhtmlString to the view context's output stream.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="xhtmlString">The XHTML string whose value to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xhtmlString" /> is <c>null</c>.</exception>
      <remarks>
                To create the return value the property's permanent links are converted to external format, 
                dynamic content is rendered and personalized content considered.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.Html.XhtmlStringExtensions.RenderXhtmlStringToWriter(System.Web.Mvc.HtmlHelper,EPiServer.Core.XhtmlString,EPiServer.Web.Routing.UrlResolver,EPiServer.IContentLoader,System.IO.TextWriter)">
      <summary>
            Writes value of the specified XhtmlString to the given stream.
            </summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="xhtmlString">The Xhtml string whose value to write.</param>
      <param name="urlResolver">The URL resolver.</param>
      <param name="contentLoader">contentloader to use</param>
      <param name="writer">The writer the xhtml string is written to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xhtmlString" /> is <c>null</c>.</exception>
      <remarks>
            To create the return value the property's permanent links are converted to external format,
            dynamic content is rendered and personalized content considered.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.Mvc.IContentRenderer">
      <summary>
            Renders partial content
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.IContentRenderer.Render(System.Web.Mvc.HtmlHelper,EPiServer.Web.Mvc.PartialRequest,EPiServer.Core.IContentData,EPiServer.DataAbstraction.TemplateModel)">
      <summary>
            Renders the content given by <paramref name="contentData" /> using the <see cref="P:System.Web.Mvc.HtmlHelper.ViewContext" />.
            </summary>
      <param name="helper">The helper.</param>
      <param name="partialRequestHandler">The partial request handler.</param>
      <param name="contentData">The content data.</param>
      <param name="templateModel">The template model.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.IControllerTypeMap">
      <summary>
            Resolves controller name to controller type.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.IControllerTypeMap.TryGetControllerType(System.Web.Routing.RequestContext,System.Type@)">
      <summary>
            Tries to resolve the type for a certain controller.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="controllerType">The matching controller type.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.IMvcFragmentRenderer">
      <summary>
            Renders a fragment data in an MVC context.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.IMvcFragmentRenderer.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>
            Renders the given fragment to the designated writer.
            </summary>
      <param name="context">The view context in which the fragment is being rendered.</param>
      <param name="writer">The writer to which to write the fragment.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.IMvcPropertyRenderer">
      <summary>
            Renders a property data in an MVC context.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.IMvcPropertyRenderer.Render(EPiServer.Core.IContentData,EPiServer.Core.PropertyData,System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>
            Renders the given property to the designated writer.
            </summary>
      <param name="propertyOwner">The content the property belongs to.</param>
      <param name="property">The property data to render.</param>
      <param name="context">The view context in which the property is being rendered.</param>
      <param name="writer">The writer to which to write the property.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.Internal.ContentDataModelBinder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Model binder for <see cref="T:EPiServer.Core.IContentData" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ContentDataModelBinder.#ctor(EPiServer.Web.IViewContentRetriever,EPiServer.Core.IExceptionManager)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Internal.ContentDataModelBinder" /> class.
            </summary>
      <param name="viewContentRetriever">The view page retriever.</param>
      <param name="exceptionManager">The exception manager.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ContentDataModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Binds the model of PageData types.
            </summary>
      <param name="controllerContext">The controller context.</param>
      <param name="bindingContext">The binding context.</param>
      <returns>PageData object or null if not found.</returns>
      <exception cref="T:EPiServer.Core.TypeMismatchException">Thrown if the retrieved page does not match the requested argument type.</exception>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.Internal.ContentDataModelBinderProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provider class for creating an <see cref="T:System.Web.Mvc.IModelBinder" /> for <see cref="T:EPiServer.Core.IContentData" /> models.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ContentDataModelBinderProvider.#ctor(EPiServer.ServiceLocation.IServiceLocator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Internal.ContentDataValueProviderFactory" /> class.
            </summary>
      <param name="serviceLocator">The service locator to use to create providers.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ContentDataModelBinderProvider.GetBinder(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets an instance of a <see cref="T:EPiServer.Web.Mvc.Internal.ContentDataModelBinder" /> if the requested type inherits from <see cref="T:EPiServer.Core.IContentData" />.
            </summary>
      <param name="modelType">Type of the requested model.</param>
      <returns>An instance of <see cref="T:EPiServer.Web.Mvc.Internal.ContentDataModelBinder" /> or null if type is not <see cref="T:EPiServer.Core.IContentData" /> or an inherited type.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.Internal.ContentDataValueProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. <see cref="T:System.Web.Mvc.IValueProvider" /> that extracts the current <see cref="T:EPiServer.Core.ContentReference" /> or <see cref="T:EPiServer.Core.IContentData" /> instance from the current request.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ContentDataValueProvider.#ctor(System.Web.Routing.RequestContext,EPiServer.Web.IViewContentRetriever)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Internal.ContentDataValueProvider" /> class.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="contentRetriever">The content loader.</param>
      <exception cref="T:System.ArgumentNullException">requestContext</exception>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Mvc.Internal.ContentDataValueProvider.CurrentPageKey">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the argument key that is associated with the current page.
            </summary>
      <value>The key associated with the current page.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Mvc.Internal.ContentDataValueProvider.CurrentBlockKey">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the argument key that is associated with the current block.
            </summary>
      <value>The key associated with the current block.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Web.Mvc.Internal.ContentDataValueProvider.CurrentContentKey">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the argument key that is associated with the current <see cref="T:EPiServer.Core.IContentData" /> instance.
            </summary>
      <value>The key associated with the current content data instance.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ContentDataValueProvider.ContainsPrefix(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the current provider contains the given prefix.
            </summary>
      <param name="prefix">The prefix to check for.</param>
      <returns>
        <c>true</c> if the current provider contains the prefix; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ContentDataValueProvider.GetValue(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the value that is associated with the given key.
            </summary>
      <param name="key">The key associated with the value.</param>
      <returns>A <see cref="T:System.Web.Mvc.ValueProviderResult" /> or null if no value was found for the given <paramref name="key" />.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.Internal.ContentDataValueProviderFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Factory class used to create a <see cref="T:EPiServer.Web.Mvc.Internal.ContentDataValueProvider" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ContentDataValueProviderFactory.#ctor(EPiServer.Web.IViewContentRetriever)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Internal.ContentDataValueProviderFactory" /> class.
            </summary>
      <param name="viewContentRetriever">The view content retriever.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ContentDataValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets an instance of a <see cref="T:EPiServer.Web.Mvc.Internal.ContentDataValueProvider" />.
            </summary>
      <param name="controllerContext">The current controller context.</param>
      <returns>
            An <see cref="T:EPiServer.Web.Mvc.Internal.ContentDataValueProvider" /> instance.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.Internal.DefaultMvcContentRenderer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Renders a block using the <see cref="T:EPiServer.Web.TemplateResolver" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.DefaultMvcContentRenderer.#ctor(EPiServer.Web.DisplayOptions,EPiServer.Web.Mvc.CachingViewEnginesWrapper,EPiServer.ServiceLocation.IServiceLocator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Internal.DefaultMvcContentRenderer" /> class.
            </summary>
      <param name="displayOptions">The display options.</param>
      <param name="cachingViewEngineWrapper">The caching view engine wrapper.</param>
      <param name="serviceLocator">The service locator to use</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.DefaultMvcContentRenderer.Render(System.Web.Mvc.HtmlHelper,EPiServer.Web.Mvc.PartialRequest,EPiServer.Core.IContentData,EPiServer.DataAbstraction.TemplateModel)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. <para>Renders the content given by <paramref name="contentData" /> using the <see cref="P:System.Web.Mvc.HtmlHelper.ViewContext" />.</para><para>Both partial controllers and partial views can be rendered.</para></summary>
      <param name="helper">The helper.</param>
      <param name="partialRequestHandler">The partial request handler.</param>
      <param name="contentData">The content data.</param>
      <param name="templateModel">The template model.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.Internal.DefaultMvcPropertyRenderer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.DefaultMvcPropertyRenderer.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Internal.DefaultMvcPropertyRenderer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.DefaultMvcPropertyRenderer.#ctor(EPiServer.Web.Mvc.CachingViewEnginesWrapper)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Internal.DefaultMvcPropertyRenderer" /> class.
            </summary>
      <param name="cachingViewEngineWrapper">The caching view engine wrapper.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.DefaultMvcPropertyRenderer.Render(EPiServer.Core.IContentData,EPiServer.Core.PropertyData,System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Renders the given property to the designated writer.
            </summary>
      <param name="propertyOwner">The content the property belongs to.</param>
      <param name="property">The property data to render.</param>
      <param name="context">The view context in which the property is being rendered.</param>
      <param name="writer">The writer to which to write the property.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.Internal.ExistingActionRouteConstraint">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks that the routed controller has an action with the specified name.
            </summary>
      <remarks>
            This constraint will not work for asynchronous controllers.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ExistingActionRouteConstraint.#ctor(EPiServer.Web.Routing.MapContentRouteParameters)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a <see cref="T:EPiServer.Web.Mvc.Internal.ExistingActionRouteConstraint" /> with required parameters.
            </summary>
      <param name="mapContentRouteParameters">The map page route parameters contains required dependencies.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.ExistingActionRouteConstraint.Match(System.Web.Routing.Route,EPiServer.Web.Routing.Segments.SegmentContext,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Evaluates if the routed <see cref="T:EPiServer.Core.IContent" /> matches the implemented constraint.
            </summary>
      <param name="route">The route.</param>
      <param name="routingContext">The routing context.</param>
      <param name="parameterName">Name of the parameter.</param>
      <returns>
            true if the route matches the constraint else false.
            </returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.Internal.MvcEditContainer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.MvcEditContainer.#ctor(System.Web.Routing.RequestContext,System.String,System.String,System.String,System.String,System.IO.TextWriter)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.Internal.MvcEditContainer" /> class.
            </summary>
      <param name="requestContext">The request context.</param>
      <param name="epiPropertyKey">Key of the episerver property.</param>
      <param name="epiPropertyName">Name of the episerver property.</param>
      <param name="editElementName">Name of the edit element.</param>
      <param name="editElementCssClass">The CSS class for edit element.</param>
      <param name="writer">The text writer.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.MvcEditContainer.WriteStartElement(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Writes the start element in the text writer.
            </summary>
      <param name="startElement">The start element.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.Internal.MvcEditContainer.WriteEndElement(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Writes the end element in the text writer.
            </summary>
      <param name="endElement">The end element.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.Internal.PartialViewRenderTemplate`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.IUnknownActionHandler">
      <summary>
            Handles actions without an action method in page controllers.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.IUnknownActionHandler.ActionName">
      <summary>
            The action this action handler handles.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.IUnknownActionHandler.HandleAction(System.Web.Mvc.Controller)">
      <summary>
            Handles unknown action when an action hasn't been found by the controller
            </summary>
      <param name="controller">The controller</param>
      <returns>ActionResult if handled otherwise null</returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.IViewTemplateModelRegistrator">
      <summary>
            Registres template models to a collection of template models.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.IViewTemplateModelRegistrator.Register(EPiServer.Web.Mvc.TemplateModelCollection)">
      <summary>
            Registers template models to the template model collection.
            </summary>
      <param name="viewTemplateModelRegistrator">The collection of template models.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.ModelClientValidationRuleCollection">
      <summary>
            A collection of <see cref="T:System.Web.Mvc.ModelClientValidationRule" />.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Mvc.MvcContentAreaValidator">
      <summary>
            Used to validate that content items are not rendered in a circular manner.
            </summary>
      <remarks>
            The though usage is to use the component in a using statement.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.MvcContentAreaValidator.#ctor(System.Web.HttpContextBase)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.MvcContentAreaValidator" /> class.
            </summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.MvcContentAreaValidator.ExistInParentHierarchy(EPiServer.Core.IContent,EPiServer.DataAbstraction.TemplateModel)">
      <summary>
            Does a check if the instance already exist in parent hierarchy.
            </summary>
      <param name="content">The content.</param>
      <param name="templateModel">The template model.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.Mvc.MvcContentAreaValidator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <remarks>
            This is used to indicate that the item called in <see cref="M:EPiServer.Web.Mvc.MvcContentAreaValidator.ExistInParentHierarchy(EPiServer.Core.IContent,EPiServer.DataAbstraction.TemplateModel)" /> has been written to output (that is including end element).
            </remarks>
    </member>
    <member name="M:EPiServer.Web.Mvc.MvcContentAreaValidator.Dispose(System.Boolean)">
      <summary>
            Triggers the end element when <paramref name="disposing" /> is true
            </summary>
      <param name="disposing">
        <c>true</c> to write the end element.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.MvcContentRenderer">
      <summary>
            The default implementation of <see cref="T:EPiServer.Web.Mvc.IContentRenderer" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.MvcContentRenderer.Render(System.Web.Mvc.HtmlHelper,EPiServer.Web.Mvc.PartialRequest,EPiServer.Core.IContentData,EPiServer.DataAbstraction.TemplateModel)">
      <summary>
        <para>Renders the content given by <paramref name="contentData" /> using the <see cref="P:System.Web.Mvc.HtmlHelper.ViewContext" />.</para>
        <para>Both partial controllers and partial views can be rendered.</para>
      </summary>
      <param name="helper">The helper.</param>
      <param name="partialRequestHandler">The partial request handler.</param>
      <param name="contentData">The content data.</param>
      <param name="templateModel">The template model.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.PageController`1">
      <summary>
            Provides the base implementation for for page controllers.
            </summary>
      <remarks>
            The PageControllerBase class is small, containing only a few methods and properties for handling three basic tasks:
            <list type="bullet"><item><description>Providing easy access to the <see cref="T:EPiServer.Web.Routing.IPageRouteHelper" /> instance for the current request.</description></item><item><description>Support for handling actions that are not available in the controller.</description></item><item><description>Setting up the capability of impersonating visitor groups.</description></item></list></remarks>
    </member>
    <member name="P:EPiServer.Web.Mvc.PageController`1.PageContext">
      <summary>
            Gets or sets a <see cref="T:EPiServer.Web.Routing.IPageRouteHelper" /> which conveys information about the routed page.
            </summary>
      <remarks>
            The setter is only used to set up a mock PageRouteHelper object for testing purposes.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.Mvc.PartialContentController`1">
      <summary>
            Provides the base implementation for for partial content controllers.
            </summary>
      <typeparam name="TContentData">The type of the content data.</typeparam>
      <example>
            The following code example demonstrates two simple block controllers.
            <code source="../CodeSamples/EPiServerNET/Web/Mvc/BlockControllerSample.cs" region="SimpleRenders" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.Web.Mvc.PartialContentController`1.Index(`0)">
      <summary>
            Default action, which tries to find a partial view with the same name as the content type.
            </summary>
      <param name="currentContent">The current content instance.</param>
      <returns>Content from the view</returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.PartialRequest">
      <summary>
            Creates a partial request to make it possible to invoke a partial controller
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.PartialRequest.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>
            Invokes a request for the specified action on the specified controller with given routevalues.
            </summary>
      <param name="helper">The helper.</param>
      <param name="action">The action.</param>
      <param name="controller">The controller.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.TemplateModelCollection">
      <summary>
            Collection of template models for model types.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.TemplateModelCollection.Add(System.Type,EPiServer.DataAbstraction.TemplateModel)">
      <summary>
            Addsa  template model to a model type
            </summary>
      <param name="modelType">The model type.</param>
      <param name="viewTemplateModel">The view template model.</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.TemplateModelCollection.Add(System.Type,EPiServer.DataAbstraction.TemplateModel[])">
      <summary>
            Adds template models to a model type.
            </summary>
      <param name="modelType">Type of the model.</param>
      <param name="viewTemplateModels">The view template models.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.ValidationRuleDescriptor">
      <summary>
            Describes a set of validation rules for a field.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ValidationRuleDescriptor.#ctor">
      <summary>
            Instantiates a <see cref="T:EPiServer.Web.Mvc.ValidationRuleDescriptor" /> with no validation rules.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ValidationRuleDescriptor.#ctor(System.String)">
      <summary>
            Instantiates a <see cref="T:EPiServer.Web.Mvc.ValidationRuleDescriptor" /> with field name.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ValidationRuleDescriptor.#ctor(System.String,System.Boolean)">
      <summary>
            Instantiates a <see cref="T:EPiServer.Web.Mvc.ValidationRuleDescriptor" /> with field name.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ValidationRuleDescriptor.#ctor(System.String,EPiServer.Web.Mvc.ModelClientValidationRuleCollection)">
      <summary>
            Instantiates a <see cref="T:EPiServer.Web.Mvc.ValidationRuleDescriptor" /> with validation rules.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ValidationRuleDescriptor.#ctor(System.String,System.Boolean,EPiServer.Web.Mvc.ModelClientValidationRuleCollection)">
      <summary>
            Instantiates a <see cref="T:EPiServer.Web.Mvc.ValidationRuleDescriptor" /> with validation rules.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.ValidationRuleDescriptor.FieldName">
      <summary>
            The name of the field whose validation rules to extend.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.ValidationRuleDescriptor.CreateIfNotFound">
      <summary>
            Gets or sets whether to create a validation value if one is not found.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Mvc.ValidationRuleDescriptor.Rules">
      <summary>
            Collection of validation rules.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Mvc.ValidationRuleDescriptorCollection">
      <summary>
            A collection of <see cref="T:EPiServer.Web.Mvc.ValidationRuleDescriptor" />.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Mvc.ViewDataDictionaryExtensions">
      <summary>
            Extensions on ViewDataDictionary
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ViewDataDictionaryExtensions.GetEditHints``2(System.Web.Mvc.ViewDataDictionary)">
      <summary>
            Gets a collection of edit hints, which can be used to to add connections between view data properties and content data properties.
            Will store the hints in the view data dictionary.
            </summary>
      <remarks>
            It's possible to access the hints directly by using ViewData[ViewDataKeys.PropertyConnections] or ViewData[ViewDataKeys.FullRefreshProperties].
            </remarks>
      <typeparam name="TViewModel">The type of the view model.</typeparam>
      <typeparam name="TContentData">The type of the content data.</typeparam>
      <param name="viewData">The view data.</param>
      <returns>Collection, where edit hints can be added.</returns>
      <example>
            The following example contains an controller which uses the EditHintCollection.
            <code source="../CodeSamples/EPiServerNET/Web/Mvc/EditHintSample.cs" region="EditHint" lang="cs" /></example>
    </member>
    <member name="T:EPiServer.Web.Mvc.ViewDataKeys">
      <summary>
            String constants used when working with edit hints in EPiServer.Web.Mvc.
            </summary>
    </member>
    <member name="F:EPiServer.Web.Mvc.ViewDataKeys.PropertyConnections">
      <summary>
            Connections between view model properties and content data properties
            </summary>
    </member>
    <member name="F:EPiServer.Web.Mvc.ViewDataKeys.FullRefreshProperties">
      <summary>
            Properties that requires full refresh.
            </summary>
    </member>
    <member name="T:EPiServer.Web.Mvc.ViewedPageCriterionAttribute">
      <summary>
            When added to an MVC controller this action filter will raise <see cref="E:EPiServer.Personalization.VisitorGroups.ICriterionEvents.VisitedPage" /> event.
            </summary>
      <remarks>
            This attribute is required for visitor groups based on page views, like 
            <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedPagesCriterion" /> or 
            <see cref="T:EPiServer.Personalization.VisitorGroups.Criteria.ViewedCategoriesCriterion" /></remarks>
    </member>
    <member name="T:EPiServer.Web.Mvc.ViewExtensions">
      <summary>
            Extensions to <see cref="T:System.Web.Mvc.IView" /> and <see cref="T:System.Web.Mvc.HtmlHelper" /> regarding rendering.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.ViewExtensions.Render``1(System.Web.Mvc.IView,System.Web.Mvc.ViewEngineResult,System.Web.Mvc.ViewContext,System.IO.TextWriter,``0)">
      <summary>
            Renders a view on the stream
            </summary>
      <param name="view">
      </param>
      <param name="viewEngineResult">The result from a view search</param>
      <param name="context">The context of the current view</param>
      <param name="writer">The writer to write to</param>
      <param name="data">Data to add to the context</param>
    </member>
    <member name="M:EPiServer.Web.Mvc.ViewExtensions.RenderPartial``1(System.Web.Mvc.HtmlHelper,``0)">
      <summary>
            Renders a partial view of the specified model.
            </summary>
      <typeparam name="T">The type of model to render.</typeparam>
      <param name="helper">The html helper that this method extends.</param>
      <param name="model">The model to render.</param>
      <remarks>
        <para>
                    This method will try to find a partial view that matches the name of the type <typeparamref name="T" /> 
                    and use that to render the specified <paramref name="model" />.
                </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Web.Mvc.VisitorGroupImpersonationAttribute">
      <summary>
            When added to an MVC controller this action filter will setup impersonation of visitor group 
            required to view a page as a custom visitor group.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroupImpersonationAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>
            Called before the controller action is executed.
            </summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:EPiServer.Web.Mvc.VisitorGroups.EnumSelectionFactory">
      <summary>
            Selection factory for enum types.
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroups.EnumSelectionFactory.GetSelectListItems(System.Type)">
      <summary>
            Gets the select list items.
            </summary>
      <param name="property">The property.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Mvc.VisitorGroups.Validation.Internal.VisitorGroupValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates visitor groups in MVC
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroups.Validation.Internal.VisitorGroupValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructor that sends parameters to base class and sets the IVisitorGroupRepository to a instance of the default type
            </summary>
      <param name="metadata">Provides a container for common metadata</param>
      <param name="context">Encapsulates information about an HTTP request</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroups.Validation.Internal.VisitorGroupValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructor that sends parameters to base class and sets the IVisitorGroupRepository
            </summary>
      <param name="metadata">Provides a container for common metadata</param>
      <param name="context">Encapsulates information about an HTTP request</param>
      <param name="visitorGroupRepository">Repository instance for the visitor group</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroups.Validation.Internal.VisitorGroupValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,EPiServer.Framework.Localization.LocalizationService)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructor that sends parameters to base class and sets the IVisitorGroupRepository
            </summary>
      <param name="metadata">Provides a container for common metadata</param>
      <param name="context">Encapsulates information about an HTTP request</param>
      <param name="visitorGroupRepository">Repository instance for the visitor group</param>
      <param name="localizationService">The resource locator that should be used by the instance to get localized strings.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroups.Validation.Internal.VisitorGroupValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository,EPiServer.Security.IVirtualRoleRepository,EPiServer.Framework.Localization.LocalizationService,System.Collections.Generic.IEnumerable{EPiServer.Personalization.VisitorGroups.Internal.IVisitorGroupValidator})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.Mvc.VisitorGroups.Validation.Internal.VisitorGroupValidator" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroups.Validation.Internal.VisitorGroupValidator.Validate(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates a visitor group in MVC
            </summary>
      <param name="container">The data to validate</param>
      <returns>Validation errors</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.VisitorGroups.Validation.Internal.VisitorGroupValidatorProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validation provider for validating VisitorGroup
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroups.Validation.Internal.VisitorGroupValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get validators for VisitorGroup
            </summary>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
      <returns>A list of validators.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Mvc.VisitorGroups.VisitorGroupModelBinder">
      <summary>
            Binds posted data against a VisitorGroup
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroups.VisitorGroupModelBinder.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroups.VisitorGroupModelBinder.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Web.Mvc.VisitorGroups.VisitorGroupModelBinder" /></summary>
    </member>
    <member name="M:EPiServer.Web.Mvc.VisitorGroups.VisitorGroupModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>
            Binds posted data to a VisitorGroup
            </summary>
      <param name="controllerContext">Encapsulates information about an HTTP request</param>
      <param name="bindingContext">Provides the context in which a model binder functions</param>
      <returns>VisitorGroup object</returns>
    </member>
    <member name="T:EPiServer.Web.PageClientResourceRegister">
      <summary>
            Base register class to request client resources for pages
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageClientResourceRegister.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Web.PageClientResourceRegister" /></summary>
    </member>
    <member name="M:EPiServer.Web.PageClientResourceRegister.#ctor(EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase})">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Web.PageClientResourceRegister" /></summary>
    </member>
    <member name="M:EPiServer.Web.PageClientResourceRegister.RegisterResources(EPiServer.Framework.Web.Resources.IRequiredClientResourceList)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.PageClientResourceRegister.RegisterResources(EPiServer.Framework.Web.Resources.IRequiredClientResourceList,System.Web.HttpContextBase,EPiServer.Core.PageData)">
      <summary>
            When implemented in deriven class registers client resources that are required for current page. 
            </summary>
      <remarks>
            This method is not called if current page data is null, which means that probably the current page is not the CMS page template.
            </remarks>
      <param name="requiredResources">The list of required client resources.</param>
      <param name="context">The context.</param>
      <param name="pageData">The page data.</param>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.AntiForgeryValidation">
      <summary>
            Protects postbacks with an anti-forgery token that is unique per user and stored in a cookie
            </summary>
      <remarks>A hidden field is injected on the page and a corresponding cookie is set to the browser</remarks>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.AntiForgeryValidation.Attach(System.Web.UI.Page)">
      <summary>
            Attach an instance of the <see cref="T:EPiServer.Web.PageExtensions.AntiForgeryValidation" /> class to a <see cref="T:EPiServer.PageBase" /> class.
            </summary>
      <param name="page">The page.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.AntiForgeryValidation.PreInit(System.Object,System.EventArgs)">
      <summary>
            Does the actual validation of the antiforgery tokens
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.AntiForgeryValidation.AddHiddenField(System.Object,System.EventArgs)">
      <summary>
            Adds the hidden field to the form with the same name as the cookie (OnPreRender)
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.AntiForgeryValidation.Initialize(System.Int32)">
      <summary>
            Method called at system startup to initialize this plug in.
            </summary>
      <param name="optionFlag">The option flag value assigned to this plug in.</param>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.AntiForgeryValidation.OptionFlag">
      <summary>
            The option flag for this page extension
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.AntiForgeryValidation.PageSetup(EPiServer.PageBase,EPiServer.PageSetupEventArgs)">
      <summary>
            Called every time a PageBase object is created, initializes this plug
            </summary>
      <param name="page">The page that we are attaching to</param>
      <param name="e">Event arguments</param>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.CultureSupport">
      <summary>
            Plug in that handles setting of .NET culture information to correspond with language settings in EPiServer.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.CultureSupport.Initialize(System.Int32)">
      <summary>
            Method called at system startup to initialize this plug in.
            </summary>
      <param name="optionFlag">The option flag value assigned to this plug in.</param>
      <remarks>
            Using the plugin attribute [PagePlugIn] requires the class to contain a
            static void method named "Initialize" which will be called to attach
            to suitable event handlers.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.CultureSupport.OptionFlag">
      <summary>
            Flag value to determine if this plug in should be enabled.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.CustomPageLink">
      <summary>
            Page option that makes it possible to load a page with a different template than the standard template for the page type.
            This is done by setting the query string "custompageid" to the page id that you want to load.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.CustomPageLink.OptionFlag">
      <summary>
            Flag value to determine if this plug in should be enabled.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.CustomPageLink.Initialize(System.Int32)">
      <summary>
            Method called at system startup to initialize this plug in.
            </summary>
      <param name="optionFlag">The option flag value assigned to this plug in.</param>
      <remarks>
            Using the plugin attribute [PagePlugIn] requires the class to contain a
            static void method named "Initialize" which will be called to attach
            to suitable event handlers.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.HtmlRewriteFilter">
      <summary>
            Enabled HTML rewriting through the Friendly URL pipeline
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.HtmlRewriteFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PageExtensions.HtmlRewriteFilter" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.HtmlRewriteFilter.Attach(EPiServer.PageBase)">
      <summary>
            Attach an instance of the <see cref="T:EPiServer.Web.PageExtensions.HtmlRewriteFilter" /> class to a <see cref="T:EPiServer.PageBase" /> class.
            </summary>
      <param name="page">The page.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.HtmlRewriteFilter.Initialize(System.Int32)">
      <summary>
            Method called at system startup to initialize this plug in.
            </summary>
      <param name="optionFlag">The option flag value assigned to this plug in.</param>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.HtmlRewriteFilter.OptionFlag">
      <summary>
            The option flag for this page extension
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.HtmlRewriteFilter.PageSetup(EPiServer.PageBase,EPiServer.PageSetupEventArgs)">
      <summary>
            Called every time a PageBase object is created, initializes this plug
            </summary>
      <param name="page">The page that we are attchin to</param>
      <param name="e">Event arguments</param>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.ICurrentPage">
      <summary>
            Defines the availability of the CurrentPage property.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.ICurrentPage.CurrentPage">
      <summary>
            Gets or sets the current <see cref="T:EPiServer.Core.PageData">page data</see>.
            </summary>
      <value>The current <see cref="T:EPiServer.Core.PageData">page data</see>.</value>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.ICurrentPage`1">
      <summary>
            Defines the availability of a strongly typed CurrentPage property.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> linked to the <see cref="T:EPiServer.DataAbstraction.PageType" /> of the <see cref="P:EPiServer.Web.PageExtensions.ICurrentPage`1.CurrentPage" /> property.</typeparam>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.ICurrentPage`1.CurrentPage">
      <summary>
            Gets or sets the current <see cref="T:EPiServer.Core.PageData">page data</see> of type <typeparamref name="T" />.
            </summary>
      <value>The current <see cref="T:EPiServer.Core.PageData">page data</see>of type <typeparamref name="T" />.</value>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.Internal.QuickNavigatorItemProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provides the "Go to Dashboard" and "Go to Edit" menu items.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.PageExtensions.Internal.QuickNavigatorItemProvider.#ctor(EPiServer.IContentLoader,EPiServer.Web.Routing.EditUrlResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Web.PageExtensions.Internal.QuickNavigatorItemProvider" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.PageExtensions.Internal.QuickNavigatorItemProvider.GetMenuItems(EPiServer.Core.ContentReference)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="P:EPiServer.Web.PageExtensions.Internal.QuickNavigatorItemProvider.SortOrder">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.PageExtensions.IQuickNavigatorItemProvider">
      <summary>
                Implement this interface in order to provide items to the quick navigator.
            </summary>
      <remarks>
                Implementations of this interface needs to be registered in the service locator in order to be found by the quick navigator.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.IQuickNavigatorItemProvider.GetMenuItems(EPiServer.Core.ContentReference)">
      <summary>
                Gets the menu items that should be added to the quick navigator.
            </summary>
      <param name="currentContent">The currently selected content.</param>
      <returns>
                A dictionary containing the menu items that should be added to the quick navigator.
            </returns>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.IQuickNavigatorItemProvider.SortOrder">
      <summary>
                Gets the sort priority of this provider.
            </summary>
      <remarks>
                The lower the number, the higher the items from this provider will be placed in the quick navigator.
            </remarks>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.LoadCurrentPage">
      <summary>
            Default implementation of the ICurrentPage interface, giving support for loading the current page data.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.LoadCurrentPage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PageExtensions.LoadCurrentPage" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.LoadCurrentPage.Attach(EPiServer.PageBase)">
      <summary>
            Attach to a <see cref="T:EPiServer.PageBase" /> class.
            </summary>
      <param name="page">The page to attach to.</param>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.LoadCurrentPage.Page">
      <summary>
            Gets or sets the executing page.
            </summary>
      <value>The executing page.</value>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.LoadCurrentPage.EnableMasterLanguageFallback">
      <summary>
            Gets or sets a value indicating whether master language fallback should be enabled when loading pages.
            </summary>
      <value>
        <c>true</c> if master language fallback should be enabled when loading pages; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.LoadCurrentPage.EnableLoadPageWithoutTemplate">
      <summary>
            Gets or sets a value indicating whether is should be possible to load a page that should not be visible on the public site.
            The class checks if the loaded <see cref="T:EPiServer.Core.PageData" /> has a template.
            </summary>
      <value>
        <c>true</c> if pages without template should be able to load; otherwise, <c>false</c>.
            </value>
      <remarks>Default value is false. If this setting is set to false and a page is loaded that has does not have a template a 404 will be rendered to the browser.</remarks>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.LoadCurrentPage.CurrentPage">
      <summary>
            Gets or sets the current EPiServer page.
            </summary>
      <value>The current EPiServer page.</value>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.LoadCurrentPage.Initialize(System.Int32)">
      <summary>
            Method called at system startup to initialize this plug in.
            </summary>
      <param name="optionFlag">The option flag value assigned to this plug in.</param>
      <remarks>
            Using the plugin attribute [PagePlugIn] requires the class to contain a
            static void method named "Initialize" which will be called to attach
            to suitable event handlers.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.LoadCurrentPage.OptionFlag">
      <summary>
            Flag value to determine if this plug in should be enabled.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.LoadCurrentPage.SelectionSource">
      <summary>
            Gets what selection source was used when selecting the language.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.LoadEmptyCurrentPage">
      <summary>
            Null implementation of the ICurrentPage interface. 
            </summary>
      <remarks>
            Used if the property <see cref="P:EPiServer.PageBase.CurrentPageHandler" /> has not been set prior to accessing the getter.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.LoadEmptyCurrentPage.CurrentPage">
      <summary>
            Gets or sets the current EPiServer page.
            </summary>
      <value>The current EPiServer page.</value>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.PageTranslation">
      <summary>
            PageExtension that handles translation for localized controls on a Page inherited from <see cref="T:EPiServer.PageBase" /></summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.PageTranslation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PageExtensions.PageTranslation" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.PageTranslation.Attach(System.Web.UI.Page)">
      <summary>
            Attaches the specified content base web form.
            </summary>
      <param name="page">The content base web form.</param>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.PageTranslation.Page">
      <summary>
            Gets the page which localized controls will be translated
            </summary>
      <value>The page.</value>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.PageTranslation.LocalizationService">
      <summary>
            Gets or sets the localization service.
            </summary>
      <value>
            The localization service.
            </value>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.PageTranslation.TranslateType">
      <summary>
            Select the type of automatic translation of controls that will take place.
            </summary>
      <remarks>
            If you know that there are no controls that contains text to be translated, set <see cref="P:EPiServer.Web.PageExtensions.PageTranslation.TranslateType" /> to <see cref="F:EPiServer.TranslateType.None" /> to improve performance.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.PageTranslation.TranslateSingleControl(System.Web.UI.Control)">
      <summary>
            Called to translate UI text for controls
            </summary>
      <param name="control">The control to translate</param>
      <returns>True if the control was of a type that can be translated</returns>
      <remarks>
            This method can be overridden to support custom controls that needs
            translation support. It currently supports
            <list type="bullet"><item><term>EPiServer.Core.ITranslate</term><description>LocalizedText property</description></item><item><term>System.Web.UI.HtmlControls.HtmlInputButton</term><description>Value property</description></item><item><term>System.Web.UI.HtmlControls.HtmlTableCell</term><description>InnerText property</description></item><item><term>System.Web.UI.WebControls.Button</term><description>Text property</description></item><item><term>System.Web.UI.WebControls.HyperLink</term><description>Text property</description></item><item><term>System.Web.UI.WebControls.Label</term><description>Text property</description></item><item><term>System.Web.UI.WebControls.LinkButton</term><description>Text property</description></item></list>        
            
            The method currently dont support System.Web.UI.WebControls.Literal since literal control inherits from 
            control class directly not from webcontrol. This makes it not possible to manipulate attributes on Literal control. 
            Instead use Resources or a Label control for translation. 
            
            For all controls that do not support the ITranslate interface, the translation mechanism uses
            the attribute "translate" to collect the translatable string. It will then set the indicated
            property of the control to the translated string.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.PageTranslation.TranslateExplicitControl(EPiServer.Core.ITranslate)">
      <summary>
            Called to translate a control implementing <see cref="T:EPiServer.Core.ITranslate" />.
            The implementation will check to see if control implements <see cref="T:EPiServer.Core.ITranslateFormat" /> and if
            so use <see cref="P:EPiServer.Core.ITranslate.LocalizedText" /> and <see cref="P:EPiServer.Core.ITranslateFormat.StringFormatObjects" />
            to do the translation.
            Else if control not implements <see cref="T:EPiServer.Core.ITranslateFormat" /> the translation will be performed using 
            <see cref="P:EPiServer.Core.ITranslate.LocalizedText" /></summary>
      <param name="translate">The translate.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.PageTranslation.TranslateHtmlControl(System.Web.UI.HtmlControls.HtmlControl)">
      <summary>
            Translates <see cref="T:System.Web.UI.HtmlControls.HtmlControl" /> that has translate attribute.
            Supported controls are <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton" />, <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell" />
            and <see cref="T:System.Web.UI.HtmlControls.HtmlImage" /></summary>
      <param name="htmlControl">The HTML control.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.PageTranslation.TranslateWebControl(System.Web.UI.WebControls.WebControl)">
      <summary>
            Translates <see cref="T:System.Web.UI.WebControls.WebControl" /> that has translate attribute.
            Supported controls are <see cref="T:System.Web.UI.WebControls.Label" />, <see cref="T:System.Web.UI.WebControls.Button" />
            , <see cref="T:System.Web.UI.WebControls.HyperLink" /> and <see cref="T:System.Web.UI.WebControls.LinkButton" /></summary>
      <param name="webControl">The web control.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.PageTranslation.TranslatePageControls">
      <summary>
            Translates all controls on the page.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.PageTranslation.Initialize(System.Int32)">
      <summary>
            Method called at system startup to initialize this plug in.
            </summary>
      <param name="optionFlag">The option flag value assigned to this plug in.</param>
      <remarks>
            Using the plugin attribute [PagePlugIn] requires the class to contain a
            static void method named "Initialize" which will be called to attach
            to suitable event handlers.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.PageTranslation.OptionFlag">
      <summary>
            Flag value to determine if this plug in should be enabled.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.PageVisited">
      <summary>
            Page extension that notify criterion when a page is visited.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.PageVisited.Initialize(System.Int32)">
      <summary>
            Method called at system startup to initialize this plug in.
            </summary>
      <param name="optionFlag">The option flag value assigned to this plug in.</param>
      <remarks>
            Using the plugin attribute [PagePlugIn] requires the class to contain a
            static void method named "Initialize" which will be called to attach
            to suitable event handlers.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.PageVisited.Page_PreInit(System.Object,System.EventArgs)">
      <summary>
            Triggers the VisitedPage event for visitor group criteria.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.PageVisited.OptionFlag">
      <summary>
            Flag value to determine if this plug in should be enabled.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.QuickNavigator">
      <summary>
            A page extension that handles a quick navigator menu for editor / admin purposes.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.QuickNavigator.Page">
      <summary>
            Gets or sets the page.
            </summary>
      <value>The page.</value>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.QuickNavigator.Menu">
      <summary>
            Gets or sets the menu.
            </summary>
      <value>The menu.</value>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.QuickNavigator.Attach(EPiServer.PageBase)">
      <summary>
            Attaches the specified page.
            </summary>
      <param name="page">The page.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.QuickNavigator.RegisterMenuScripts(System.Object,System.EventArgs)">
      <summary>
            Registers the menu scripts.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.QuickNavigator.RenderMenuScripts(System.Object,System.EventArgs)">
      <summary>
            Renders the menu scripts.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.QuickNavigator.Initialize(System.Int32)">
      <summary>
            Initializes the specified option flag.
            </summary>
      <param name="optionFlag">The option flag.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.QuickNavigator.QuickNavigator_PageSetup(EPiServer.PageBase,EPiServer.PageSetupEventArgs)">
      <summary>
            Setups the quick navigator for page.
            </summary>
      <param name="page">The page.</param>
      <param name="e">The <see cref="T:EPiServer.PageSetupEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.QuickNavigator.OptionFlag">
      <summary>
            Gets or sets the option flag.
            </summary>
      <value>The option flag.</value>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.SiteRedirect">
      <summary>
            Page extension to support preview navigation between enterpsrise sites
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.SiteRedirect.#ctor(EPiServer.IContentRepository)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PageExtensions.SiteRedirect" /> class.
            </summary>
      <param name="contentRepository">The page repository.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.SiteRedirect.Attach(EPiServer.PageBase)">
      <summary>
            Attach to a <see cref="T:EPiServer.PageBase" /> class.
            </summary>
      <param name="page">The page to attach to.</param>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.SiteRedirect.EnterpriseSettings">
      <summary>
            Gets or sets the page enterprise service.
            </summary>
      <value>The page enterprise service.</value>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.SiteRedirect.Page">
      <summary>
            Gets or sets the page for which this extension instance is loaded
            </summary>
      <value>The page.</value>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.SiteRedirect.IsRedirectEnabled">
      <summary>
            Gets a value indicating whether the currently executing Page instance has site redirect enabled.
            </summary>
      <value>
        <c>true</c> if this instance has redirect enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.SiteRedirect.Initialize(System.Int32)">
      <summary>
            Method called at system startup to initialize this plug in.
            </summary>
      <param name="optionFlag">The option flag value assigned to this plug in.</param>
      <remarks>
            Using the plugin attribute [PagePlugIn] requires the class to contain a
            static void method named "Initialize" which will be called to attach
            to suitable event handlers.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.SiteRedirect.Initialize(System.Int32,EPiServer.IContentRepository)">
      <summary>
            Method called at system startup to initialize this plug in.
            </summary>
      <param name="optionFlag">The option flag value assigned to this plug in.</param>
      <param name="contentRepository">The page repository.</param>
      <remarks>
            Using the plugin attribute [PagePlugIn] requires the class to contain a
            static void method named "Initialize" which will be called to attach
            to suitable event handlers.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.SiteRedirect.OptionFlag">
      <summary>
            Flag value to determine if this plug in should be enabled.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.ThemeUtility">
      <summary>
            page extension for theming support
            </summary>
    </member>
    <member name="T:EPiServer.Web.PageExtensions.ThemeUtility.FileType">
      <summary>
            Specifies the file type for the theming item
            </summary>
    </member>
    <member name="F:EPiServer.Web.PageExtensions.ThemeUtility.FileType.Image">
      <summary>
            An image theme
            </summary>
    </member>
    <member name="F:EPiServer.Web.PageExtensions.ThemeUtility.FileType.CssFile">
      <summary>
            A css file
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.ThemeUtility.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PageExtensions.ThemeUtility" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.ThemeUtility.Attach(System.Web.UI.Page)">
      <summary>
            Attach to a <see cref="T:EPiServer.PageBase" /> class.
            </summary>
      <param name="page">The page to attach to.</param>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.ThemeUtility.GetImageThemeUrl(System.Web.UI.Page,System.String,System.String)">
      <summary>
            Get the full url to an image with theming support using a specific theme.
            </summary>
      <param name="page">The currently executing page.</param>
      <param name="imagePath">The url relative to the theme Images folder.</param>
      <param name="theme">The name of the theme.</param>
      <returns>The full url to the image.</returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.ThemeUtility.GetImageThemeUrl(System.Web.UI.Page,System.String)">
      <summary>
            Get the full url to an image with theming support.
            </summary>
      <param name="page">The currently executing page.</param>
      <param name="imagePath">The url relative to the theme Images folder.</param>
      <returns>The full url to the image.</returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.ThemeUtility.GetCssThemeUrl(System.Web.UI.Page,System.String)">
      <summary>
            Get the full url to a css file with theming support.
            </summary>
      <param name="page">The currently executing page.</param>
      <param name="cssPath">The url relative to the theme Styles folder.</param>
      <returns>The full url to the css file.</returns>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.ThemeUtility.GetExtensionCssThemeUrl(System.Web.UI.Page,System.String)">
      <summary>
            Get the full url to a css file with theming support from the Extensions folder.
            </summary>
      <param name="page">The currently executing page.</param>
      <param name="cssPath">The url relative to the theme Styles/Extensions folder.</param>
      <returns>The full url to the css file.</returns>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.ThemeUtility.GetSystemTheme">
      <summary>
            Get name of system theme.
            </summary>
      <returns>System theme set up in configuration file, or "Default" if none specified.</returns>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.ThemeUtility.RegisterThemeCss(System.Web.UI.Page,System.String)">
      <summary>
            Add a css file to the page header.
            </summary>
      <param name="page">The currently executing page.</param>
      <param name="cssPath">The url to the css file.</param>
      <remarks>
            Will add a <see cref="T:EPiServer.Web.WebControls.ThemeCss" /> control to the Header of the page.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PageExtensions.ThemeUtility.Initialize(System.Int32)">
      <summary>
            Method called at system startup to initialize this plug in.
            </summary>
      <param name="optionFlag">The option flag value assigned to this plug in.</param>
      <remarks>
            Using the plugin attribute [PagePlugIn] requires the class to contain a
            static void method named "Initialize" which will be called to attach
            to suitable event handlers.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.PageExtensions.ThemeUtility.OptionFlag">
      <summary>
            Flag value to determine if this plug in should be enabled.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PropertyContext">
      <summary>
            Definies a context for content that is used to know what and how to render properties.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyContext" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyContext.#ctor(EPiServer.Web.PropertyContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyContext" /> class
            with the given parent context.
            </summary>
      <param name="parentContext">The parent context.</param>
    </member>
    <member name="P:EPiServer.Web.PropertyContext.ParentContext">
      <summary>
            Gets a reference to the parent render context.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyContext.CurrentContent">
      <summary>
            Gets or sets the current <see cref="T:EPiServer.Core.IContent" /> instance in this context.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyContext.PropertyContainer">
      <summary>
            Gets or sets the property container that contains properties in
            the current context.
            </summary>
      <remarks>
            If not set explicitly this will return the CurrentPage or the PropertyContainer from the parent
            </remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyContext.PropertyName">
      <summary>
            Gets or sets the name of the property that is current in this context.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyContext.IsEditable">
      <summary>
            Determines whether the content in this context should be editable.
            </summary>
      <returns>
        <c>true</c> if the content in this context is editable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Web.PropertyControlBase`1">
      <summary>
            Base class for usercontrols that renders properties
            </summary>
      <typeparam name="T">The type of the property value type.</typeparam>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter">
      <summary>
            Base class that is used to implement control adapters for controls deriving from <see cref="T:EPiServer.Web.PropertyControls.PropertyDataControl" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter" /> class.
            </summary>
      <remarks>The default constructor is needed by the framework to create the adapter.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.CreateChildControls">
      <summary>
            Creates the target-specific child controls for a composite control.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.ShouldCreateDefaultControls">
      <summary>
            If <see cref="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.CreateDefaultControls" /> should be called.
            </summary>
      <remarks>
            Default implementation checks the IsNull property on <see cref="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.PropertyData" />.
            </remarks>
      <returns>True if <see cref="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.CreateDefaultControls" /> should be called.</returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.CreateDefaultControls">
      <summary>
            Creates the default controls for the property. Used when the property is in view mode or in "on page edit"
            mode and the adapter does not support on page editing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
      <remarks>This is only valid for web form based editors.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.CreateOnPageEditControls">
      <summary>
            Creates the "on page edit" controls.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.SetValue(System.Object)">
      <summary>
            Sets a given value to the current PropertyData object.
            </summary>
      <param name="value">The value to be set.</param>
      <remarks>This is only valid for web form based editors.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.ToWebString">
      <summary>
            Get the web string representation of the property's value, on properties that do not
            use the editor this string will not contain any markup characters.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.PropertyDataControl">
      <summary>
            Gets the <see cref="T:EPiServer.Web.PropertyControls.PropertyDataControl" /> for this adapter.
            </summary>
      <value>The <see cref="T:EPiServer.Web.PropertyControls.PropertyDataControl" /> for this adapter.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.PropertyData">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.PropertyData" /> for the IPropertyControl.
            </summary>
      <value>The <see cref="T:EPiServer.Core.PropertyData" /> that is to be displayed or edited.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.TranslateDisplayName">
      <summary>
            Gets the translated display name of the property.
            </summary>
      <value>The translated display name of the property.</value>
      <remarks>This is only valid for web form based editors.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.Name">
      <summary>
            Gets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.RenderType">
      <summary>
            Sets the RenderType for the IPropertyControl.
            </summary>
      <value>A RenderType that is used to specify how the PropertyDataControl should be rendered.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.Properties">
      <summary>
            Sets the properties that are being edited for the IPropertyControl.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.SupportsOnPageEdit">
      <summary>
            Gets a value indicating whether this control supports "on page edit".
            </summary>
      <value>
        <c>true</c> if this control supports "on page edit"; otherwise, <c>false</c>.</value>
      <remarks>If this property returns false CreateDefaultControls() will be called instead of CreateOnPageEditControls() when in "on page edit" mode.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.ValidationGroup">
      <summary>
            Gets or sets the validation group.
            </summary>
      <value>The validation group.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Core.IPropertyControl" /> is enabled.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.SetupControl">
      <summary>
            This method is not used for PropertyDataControlAdapter as it is called directly
            for the <see cref="T:EPiServer.Web.PropertyControls.PropertyDataControl" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.ApplyChanges">
      <summary>
            Applies changes for the posted data to the page's properties.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.DisplayEditUI">
      <summary>
            Gets a value indicating whether the control should display an edit user interface.
            </summary>
      <value>
        <c>true</c> if the control should display an edit user interface.; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.RowLayout">
      <summary>
            Specifies how a property row is rendered in the edit user interface.
            </summary>
      <value>One of the values defined in <see cref="T:EPiServer.Core.TableRowLayout" />.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="P:EPiServer.Web.PropertyControls.Adapters.PropertyDataControlAdapter.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <remarks>This method is called from ApplyChanges().</remarks>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.ContentControlResolver">
      <summary>
            Component that resolves which webforms controls that should be used when rendering a xhtmlstring property.
            That include: PropertyXhtmlString, ContentArea,...
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.ContentControlResolver.ContentFilter">
      <summary>
            Gets or sets the filter published.
            </summary>
      <value>
            The filter published.
            </value>
      <remarks>When this value is <c>null</c> then <see cref="T:EPiServer.Filters.FilterContentForVisitor" /> will be used.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.ContentControlResolver.ContentValidator">
      <summary>
            Gets or sets the content validator that is used at validation.
            </summary>
      <value>The content validator.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.ContentControlResolver.ContentAreaLoader">
      <summary>
            Gets or sets the content area loader, which will be used to load the content item that is being rendered
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.ContentControlResolver.TemplateControlLoaderService">
      <summary>
            Gets or sets the template control loader, which will be used to find the correct controller for rendering the block.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.ContentControlResolver.DisplayOptions">
      <summary>
            Gets or sets the DisplayOptions
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.ContentControlResolver.StringFragmentResolver">
      <summary>
            Resolves web controls for string fragments
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.ContentControlResolver.ObjectSerializerFactory">
      <summary>
            Gets or sets the object serializer to use when serializing to Json.
            </summary>
      <value>The object serializer.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.ContentControlResolver.ResolveContentControls(EPiServer.Core.XhtmlString,System.Web.UI.Control,System.String,System.String,System.String)">
      <summary>
            Resolves the content controls.
            </summary>
      <param name="xhtmlString">The XHTML string.</param>
      <param name="parentControl">The parent control.</param>
      <param name="tag">The tag.</param>
      <param name="itemCssClass">The item CSS class.</param>
      <param name="itemTagName">Name of the item tag.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.ContentControlResolver.ResolveContentControls(EPiServer.Core.XhtmlString,System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Resolves the content controls.
            </summary>
      <param name="xhtmlString">The XHTML string.</param>
      <param name="parentControl">The parent control.</param>
      <param name="tag">The tag.</param>
      <param name="itemCssClass">The item CSS class.</param>
      <param name="itemTagName">Name of the item tag.</param>
      <param name="enableEditFeatures">if set to <c>true</c> [enable edit features].</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.ContentControlResolver.ResolveContentControls(System.Collections.Generic.IEnumerable{EPiServer.Core.Html.StringParsing.IStringFragment},System.Web.UI.Control,System.String,System.String,System.String)">
      <summary>
            Resolves which controls that should be used to render the <see cref="T:EPiServer.Core.Html.StringParsing.IStringFragment" /> instance in the <paramref name="filteredFragment" />.
            </summary>
      <param name="filteredFragment">The filtered fragment.</param>
      <param name="parentControl">The parent control.</param>
      <param name="tag">The tag.</param>
      <param name="itemCssClass">The item CSS class.</param>
      <param name="itemTagName">Name of the item tag.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.ContentControlResolver.ResolveContentControls(System.Collections.Generic.IEnumerable{EPiServer.Core.Html.StringParsing.IStringFragment},System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Resolves which controls that should be used to render the <see cref="T:EPiServer.Core.Html.StringParsing.IStringFragment" /> instance in the <paramref name="filteredFragment" />.
            In case a circular dependecy is detected by <see cref="P:EPiServer.Web.PropertyControls.ContentControlResolver.ContentValidator" /> the "ordinary" renderer for an item will not be used instead a warning is displayed if
            rendered in edit mode.
            </summary>
      <param name="filteredFragment">The filtered fragment.</param>
      <param name="parentControl">The parent control.</param>
      <param name="tag">The tag.</param>
      <param name="itemCssClass">The item CSS class.</param>
      <param name="itemTagName">Name of the item tag.</param>
      <param name="enableEditFeatures">if set to <c>true</c> edit attributes are applied.</param>
      <returns>
      </returns>
      <remarks>
            The contents are filtered using <see cref="P:EPiServer.Web.PropertyControls.ContentControlResolver.ContentFilter" /></remarks>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.IPropertyLinkCollectionEditControl">
      <summary>
            Interface for the PropertyLinkCollectionEditControl that is located in the UI and loaded when a PropertyLinkCollection is used in edit mode.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.IPropertyLinkCollectionEditControl.OriginalLinkCollection">
      <summary>
            Gets or sets the currently saved link collection.
            </summary>
      <value>The currently saved link collection.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.IPropertyLinkCollectionEditControl.NewLinkCollection">
      <summary>
            Gets or sets the complete new link collection.
            </summary>
      <value>The complete new link collection.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.JsonStringToPropertyEditorSettingsConverter">
      <summary>
            Provides a way to convert between JSON string and <see cref="T:EPiServer.Web.WebControls.PropertyEditorSettings" /></summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.JsonStringToPropertyEditorSettingsConverter.ObjectSerializerFactory">
      <summary>
            Gets or sets the object serializer to use when serializing to Json.
            </summary>
      <value>The object serializer.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.JsonStringToPropertyEditorSettingsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.PropertyControls.JsonStringToPropertyEditorSettingsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.PropertyControls.JsonStringToPropertyEditorSettingsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.PropertyControls.JsonStringToPropertyEditorSettingsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyAppSettingsControl">
      <summary>
             A property control that creates a drop down list with options that are defined in the appSettings section
             in web.config. The name of the property should match the key for the app setting.
             </summary>
      <example>
             The settings should be defined like this in web.config:
             <code source="../CodeSamples/EPiServerNET/WebControls/PropertySamples.aspx" region="PropAppSettings" /></example>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyAppSettingsControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyAppSettingsControl.GetCashedOptionList">
      <summary>
            Gets the options for this property from the appSettings section in web.config.
            </summary>
      <returns>A string with the possible options for this property.</returns>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyAppSettingsControl.CacheKey">
      <summary>
            Gets the cache key for the app settings value.
            </summary>
      <value>The cache key for the app settings value.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyAppSettingsControl.AutoGenerateEmptyValue">
      <summary>
            Gets or sets a value indicating whether an empty value should be created for the DropDownList.
            </summary>
      <value>
        <c>Always returns true for PropertyAppSettingsControl</c>.
            </value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyAppSettingsMultipleControl">
      <summary>
             A property control that creates check boxes with options that are defined in the appSettings section
             in web.config. The name of the property should match the key for the app setting.
             </summary>
      <example>
             The settings should be defined like this in web.config:
             <appSettings><add key="MyProperty" value="label1;value1|label2;value2" /><add key="AnotherProperty" value="label10;value10|label20;value20" /></appSettings></example>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyAppSettingsMultipleControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyAppSettingsMultipleControl.GetCashedOptionList">
      <summary>
            Gets the options for this property from the appSettings section in web.config.
            </summary>
      <returns>A string with the possible options for this property.</returns>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyAppSettingsMultipleControl.CacheKey">
      <summary>
            Gets the cache key for the app settings value.
            </summary>
      <value>The cache key for the app settings value.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyBlockControl">
      <summary>
            The control to render <see cref="T:EPiServer.SpecializedProperties.PropertyBlock`1" />.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyBlockControl.Tag">
      <summary>
            Gets or sets the current tag that should be used to select template
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyBlockControl.CreateDefaultControls">
      <summary>
            Creates a block controls for the property. Used when the property is in view mode or in "on page edit"
            mode and the PropertyDataControl does not support on page editing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyBlockControl.CreateOnPageEditControls">
      <summary>
            Creates the "on page edit" controls.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyBlockControl.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyBlockControl.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="T:EPiServer.Core.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyBlockControl.RowLayout">
      <summary>
            Specifies how a property row is rendered in the edit user interface.
            </summary>
      <value>
            One of the values defined in <see cref="T:EPiServer.Core.TableRowLayout" />.
            </value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyBooleanControl">
      <summary>
            A web control that is used to present a user interface for a property deriving from <see cref="T:EPiServer.Core.PropertyBoolean" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyBooleanControl.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyBooleanControl.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyBooleanControl.Boolean">
      <summary>
            Gets or sets the value from the corresponding <see cref="T:EPiServer.Core.PropertyData" />.
            </summary>
      <value>
        <c>true</c> or <c>false</c> depending on the value on the <see cref="T:EPiServer.Core.PropertyData" /> object.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyBooleanControl.EditControl">
      <summary>
            Gets or sets the control used to edit the property.
            </summary>
      <value>The control used to edit the property.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyBooleanResetControl">
      <summary>
            A web control that is used to present a user interface for a property deriving from <see cref="T:EPiServer.Core.PropertyBoolean" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyBooleanResetControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyBooleanResetControl.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyCategoryControl">
      <summary>
            A web control that is used to present a user interface for a property deriving from <see cref="T:EPiServer.Core.PropertyCategory" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyCategoryControl.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyCategoryControl.CreateDefaultControls">
      <summary>
            Creates the default controls for the property. Used when the property is in view mode or in "on page edit"
            mode and the PropertyDataControl does not support on page editing.
            Only display available categories
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyCategoryControl.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="T:EPiServer.Core.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyCategoryControl.SetEnableStateForChildControls(System.Web.UI.Control,System.Boolean)">
      <summary>
            Used to enable or disable input controls for any child controls.
            </summary>
      <param name="control">The control.</param>
      <param name="enabled">If the child controls should be enabled or disabled.</param>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyCategoryControl.PropertyCategory">
      <summary>
            Gets or sets the corresponding <see cref="T:EPiServer.Core.PropertyCategory" />.
            </summary>
      <value>The corresponding <see cref="T:EPiServer.Core.PropertyCategory" />.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyCategoryControl.Category">
      <summary>
            Gets or sets the categories for this property.
            </summary>
      <value>The categories for this property.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyCategoryControl.AvailableCategory">
      <summary>
            Gets the available category list.
            </summary>
      <value>The available category list.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyCategoryControl.IsVisible(EPiServer.DataAbstraction.Category)">
      <summary>
            Determines whether the specified category is visible.
            </summary>
      <param name="cat">The category.</param>
      <returns>
        <c>true</c> if the specified category is visible; otherwise, <c>false</c>.
            </returns>
      <remarks>A category is visible if it's available itself and all ancestors of it are available</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyCategoryControl.EditControl">
      <summary>
            Gets or sets the control used to edit the property.
            </summary>
      <value>The control used to edit the property.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyCheckBoxListControl">
      <summary>
            Property control that renders a list of check boxes in edit mode
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyCheckBoxListControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyCheckBoxListControl.TranslateNameIfPossible(System.String)">
      <summary>
            If the name starts with '/' we will attemt to translate it, using the name as a language key. 
            If no translation is found, fallback to the original name.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyColorControl">
      <summary>
            Property control that creates a drop down list with standard colors.
            </summary>
      <remarks>The list is populated from the struct <see cref="T:System.Drawing.Color" />.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyColorControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyContentAreaControl">
      <summary>
            Property control used to render ContentArea.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyContentAreaControl.ContentControlResolver">
      <summary>
            Gets or sets the content control resolver that is responsible for creating controls for each item
            in <see cref="T:EPiServer.Core.ContentArea" /></summary>
      <value>The content control resolver.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyContentAreaControl.Tag">
      <summary>
            Gets or sets the current tag that should be used to select template
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyContentAreaControl.CreateEditControls">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyContentAreaControl.ApplyEditChanges">
      <summary>
            Not implemented
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyContentAreaControl.CreateDefaultControls">
      <summary>
            Creates block controls for the blocks in the block area. Used when the property is in view mode or in "on page edit"
            mode and the PropertyDataControl does not support on page editing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyContentAreaControl.CreateOnPageEditControls">
      <summary>
            Creates the "on page edit" controls with the blocks. If no block exist, this method will do nothing.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyContentAreaControl.EnableEditFeaturesForChildren">
      <summary>
            Gets a value indicating whether editing of child properties should always be enabled.
            </summary>
      <value>
        <c>true</c> if editing of child properties should always be enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyContentAreaControl.GetContentRenderers(System.Boolean)">
      <summary>
            Gets the content renderers.
            </summary>
      <param name="enableEditFeatures">if set to <c>true</c> [enable edit features].</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyContentReferenceControl">
      <summary>
            Property control that is used to store a reference to a page in the web site.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyContentReferenceControl.ContentRepository">
      <summary>
            Gets or sets the page repository that should be used by the current instance.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyContentReferenceControl.CreateDefaultControls">
      <summary>
            Creates the default controls for the property. Used when the property is in view mode or in "on page edit"
            mode and the PropertyDataControl does not support on page editing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyContentReferenceControl.TryGetContent">
      <summary>
            Will try to get the page referenced in PageLink from the PageSource if it is set, else
            from the IPageRepository. If the page doesn't exist an exception will be caught and null will
            be returned.
            </summary>
      <returns>The page referenced by PageLink if it exists; else null.</returns>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyContentReferenceControl.PropertyContentReference">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.PropertyPageReference" />.
            </summary>
      <value>The <see cref="T:EPiServer.Core.PropertyPageReference" />.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyContentReferenceControl.ContentLink">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.ContentReference" />.
            </summary>
      <value>The <see cref="T:EPiServer.Core.ContentReference" />.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyContentReferenceListControl">
      <summary>
            Property control that displays the contents of a <see cref="T:EPiServer.SpecializedProperties.PropertyContentReferenceList" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyContentReferenceListControl.CreateDefaultControls">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyDataControl">
      <summary>
            Base class used to create a user interface for PropertyData objects.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.ObjectSerializerFactory">
      <summary>
            Gets or sets the object serializer to use when serializing to Json.
            </summary>
      <value>The object serializer.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.PropertyDataControl" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.ApplyEditAttributes">
      <summary>
            Applies the required data attributes to the first control to make the property editable.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.ShouldCreateDefaultControls">
      <summary>
            If <see cref="M:EPiServer.Web.PropertyControls.PropertyDataControl.CreateDefaultControls" /> should be called.
            </summary>
      <remarks>
            Default implementation checks the IsNull property on <see cref="P:EPiServer.Web.PropertyControls.PropertyDataControl.PropertyData" />.
            </remarks>
      <returns>True if <see cref="M:EPiServer.Web.PropertyControls.PropertyDataControl.CreateDefaultControls" /> should be called.</returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.CreateDefaultControls">
      <summary>
            Creates the default controls for the property. Used when the property is in view mode or in "on page edit"
            mode and the PropertyDataControl does not support on page editing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.CreateOnPageEditControls">
      <summary>
            Creates the "on page edit" controls.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.SetValue(System.Object)">
      <summary>
            Sets a given value to the current PropertyData object.
            </summary>
      <param name="value">The value to be set.</param>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.SetValue(System.Object,EPiServer.Core.PropertyData)">
      <summary>
            Sets a given value to the current PropertyData object.
            </summary>
      <param name="value">The value to be set.</param>
      <param name="property">The property that should have the value.</param>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.AddErrorValidator(System.String)">
      <summary>
            Adds an error validator to the control collection and to the Page.Validators collection.
            </summary>
      <param name="errorMessage">The error message.</param>
      <remarks>This method is used to indicate that invalid data has been entered by the user.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.CreateErrorValidator(System.String)">
      <summary>
            Creates an static validator for an error message.
            </summary>
      <param name="errorMessage">The error message.</param>
      <remarks>This method is used to indicate that invalid data has been entered by the user.</remarks>
      <returns>A static validator</returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.CopyWebAttributes(System.Web.UI.WebControls.WebControl)">
      <summary>
            Copies render attributes from a WebControl defined in the property <see cref="P:EPiServer.Web.PropertyControls.PropertyDataControl.AttributeSourceControl" />. 
            If this property is not set the attributes will be copied from the Control itself.
            </summary>
      <param name="target">The control to copy attributes to.</param>
      <remarks>
            This can be used for custom web controls to make them support standard rendering properties without
            having to explicitly implement code to handle those attributes.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.CopyWebAttributes(System.Web.UI.HtmlControls.HtmlControl)">
      <summary>
            Copies render attributes from a WebControl defined in the property <see cref="P:EPiServer.Web.PropertyControls.PropertyDataControl.AttributeSourceControl" />. 
            If this property is not set the attributes will be copied from the Control itself.
            </summary>
      <param name="target">The control to copy attributes to.</param>
      <remarks>
            This can be used for custom web controls to make them support standard rendering properties without
            having to explicitly implement code to handle those attributes.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
      <summary>
            Renders the HTML opening tag of the control to the specified writer. This method is used primarily by control developers.
            </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
      <remarks>PropertyDataControl does not render any tags itself</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.RenderEndTag(System.Web.UI.HtmlTextWriter)">
      <summary>
            Renders the HTML closing tag of the control into the specified writer. This method is used primarily by control developers.
            </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"></see> that represents the output stream to render HTML content on the client.</param>
      <remarks>PropertyDataControl does not render any tags itself</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.ApplyRequiredCssClass(System.Web.UI.WebControls.WebControl)">
      <summary>
            Applies a CSS class indicating that the input control is required.
            </summary>
      <param name="input">The input control.</param>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.ApplyControlAttributes(System.Web.UI.WebControls.WebControl)">
      <summary>
            Copies web attribues and style information. Also sets a css class indicating
            if this property is required if <see cref="P:EPiServer.Web.PropertyControls.PropertyDataControl.RenderType" /> is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <param name="control">The control to setup.</param>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.AttributeSourceControl">
      <summary>
            A WebControl that will be used to copy values from when copying attributes to
            WebControls for a PropertyControl.
            </summary>
      <remarks>EPiServer.Web.WebControls.Property set this property to itself
            to be able to act as source for attributes. This makes it possible to set for instance
            CssClass on a property and the value will be copied to the WebControl created for a PropertyControl.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.ToWebString">
      <summary>
            Get the web string representation of the property's value, on properties that do not
            use the editor this string will usually not contain any markup characters.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.ToString">
      <summary>
            Returns a string representation of the property's value..
            </summary>
      <returns>
            A string representation of the property's value..
            </returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.OnPreRender(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.SetEnableStateForChildControls(System.Web.UI.Control,System.Boolean)">
      <summary>
            Used to enable or disable input controls for any child controls.
            </summary>
      <param name="control">The control.</param>
      <param name="enabled">If the child controls should be enabled or disabled.</param>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.SetupControl">
      <summary>
            Called when setting up the properties for a page.
            </summary>
      <remarks>If the control creates it's child controls in CreateChildControls(), EnsureChildControls() should be
            called in this method to make sure the child controls are created before loading post data.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.ApplyChanges">
      <summary>
            Applies changes for the posted data to the page's properties.
            </summary>
      <remarks>If this control has an adapter that implements IPropertyControl the adapers ApplyChanges() method will be called.</remarks>
      <remarks>This is only valid for web form based editors.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="P:EPiServer.Web.PropertyControls.PropertyDataControl.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.PropertyData">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.PropertyData" /> for the IPropertyControl.
            </summary>
      <value>The <see cref="T:EPiServer.Core.PropertyData" /> that is to be displayed or edited.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.Properties">
      <summary>
            Sets the properties that are being edited for the IPropertyControl.
            </summary>
      <value>
      </value>
      <remarks>Properties is only set when editing multiple properties.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.RenderType">
      <summary>
            Sets the RenderType for the <see cref="T:EPiServer.Core.IPropertyControl" />.
            </summary>
      <value>A RenderType that is used to specify how the <see cref="T:EPiServer.Web.PropertyControls.PropertyDataControl" /> should be rendered.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.DisplayEditUI">
      <summary>
            Gets a value indicating whether the control should display an edit user interface.
            </summary>
      <value>
        <c>true</c> if the control should display an edit user interface.; otherwise, <c>false</c>.
            </value>
      <remarks>If the control has a adapter that implements IPropertyControl the adapters value will be returned.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.RowLayout">
      <summary>
            Specifies how a property row is rendered in the edit user interface.
            </summary>
      <value>One of the values defined in <see cref="T:EPiServer.Core.TableRowLayout" />.</value>
      <remarks>If the control has a adapter that implements IPropertyControl the adapters value will be returned.</remarks>
      <remarks>This is only valid for web form based editors.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.GetAdapterAsIPropertyControl">
      <summary>
            Gets the adapter as I property control.
            </summary>
      <returns>IPropertyControl</returns>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.CustomTagName">
      <summary>
            Gets or sets the tag name. If not set a span-tag will be used.
            </summary>
      <example>
                Set to "h1" to create a h1-tag around the content.
            </example>
      <value>
            	The custom tag name.
            </value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.IsRequired">
      <summary>
            Gets a value indicating whether the property is required.
            </summary>
      <value>
        <c>true</c> if the property is required; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.CurrentPage">
      <summary>
            Gets the current PageData object from the nearest parent that implements IPageSource.
            </summary>
      <value>The current PageData object.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.PageSource">
      <summary>
            Gets the nearest parent that implements IPageSource.
            </summary>
      <value>The nearest parent that implements IPageSource.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.CurrentContent">
      <summary>
            Gets the current content object from the nearest parent that implements IContentSource.
             </summary>
      <value>
             The content of the current.
             </value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.ContentSource">
      <summary>
            Gets the nearest parent that implements IContentSource.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.TranslateDisplayName">
      <summary>
            Gets the translated display name of the property.
            </summary>
      <value>The translated display name of the property.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.Name">
      <summary>
            Gets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.IsNull">
      <summary>
            Gets a value indicating whether the property is null.
            </summary>
      <value>
        <c>true</c> if the property is null; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.SupportsOnPageEdit">
      <summary>
            Gets a value indicating whether this control supports "on page edit".
            </summary>
      <value>
        <c>true</c> if this control supports "on page edit"; otherwise, <c>false</c>.</value>
      <remarks>If this property returns false CreateDefaultControls() will be called instead of CreateOnPageEditControls() when in "on page edit" mode.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.RequiredFieldCssClass">
      <summary>
            Gets or sets the CSS class that will be used to indicate a required field.
            </summary>
      <value>The CSS class that will be used to indicate a required field.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.ValidationGroup">
      <summary>
            Gets or sets the validation group.
            </summary>
      <value>The validation group.</value>
      <remarks>This is only valid for web form based editors.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.RenderSettings">
      <summary>
            Dictionary of key values that can be used to customize the rendering of the property.
            These settings will also be passed to the property editor.
            </summary>
      <value>The render settings.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.EditorSettings">
      <summary>
            Gets or sets the editor settings.
            </summary>
      <value>The editor settings.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDataControl.OverlaySettings">
      <summary>
            Gets or sets the overlay settings.
            </summary>
      <value>The overlay settings.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.FindParentControl``1(System.Web.UI.Control)">
      <summary>
            Finds the parent content control.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="control">The control.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDataControl.PropertyIsEditableForCurrentLanguage">
      <summary>
            Determines if the property is editable in the current language
            </summary>
      <returns>True if editable, false otherwise</returns>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyDateControl">
      <summary>
            A web control that is used to present a user interface for a property deriving from <see cref="T:EPiServer.Core.PropertyDate" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDateControl.CreateEditControls">
      <summary>
            Creates the edit controls.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDateControl.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="T:EPiServer.Core.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDateControl.Date">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value for the corresponding <see cref="T:EPiServer.Core.PropertyDate" />.
            </summary>
      <value>The <see cref="T:System.DateTime" /> value for the corresponding <see cref="T:EPiServer.Core.PropertyDate" />.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyDateControl.EditControl">
      <summary>
            Gets or sets the control used to edit the property.
            </summary>
      <value>The control used to edit the property.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyDocumentUrlControl">
      <summary>
            Displays a link to a media file.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDocumentUrlControl.CreateDefaultControls">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyDropDownListControl">
      <summary>
            Property control that creates a drop down list with custom content.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDropDownListControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyDropDownListControl.TranslateNameIfPossible(System.String)">
      <summary>
            If the name starts with '/' we will attemt to translate it, using the name as a language key. 
            If no translation is found, fallback to the original name.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyEnumSelectControl">
      <summary>
            Displays a drop down list for selection of enum values.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyEnumSelectControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.PropertyEnumSelectControl" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyEnumSelectControl.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.PropertyEnumSelectControl" /> class.
            </summary>
      <param name="enumType">The type of the enum that you want to display values for.</param>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyEnumSelectControl.#ctor(System.Type,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.PropertyEnumSelectControl" /> class.
            </summary>
      <param name="enumType">The type of the enum that you want to display values for.</param>
      <param name="translatePrefix">The translate prefix.</param>
      <param name="autoGenerateEmptyValue">if set to <c>true</c> to auto generate an empty value.</param>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyEnumSelectControl.EnumType">
      <summary>
            The type of enum to choose among with this property control.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyEnumSelectControl.TranslatePrefix">
      <summary>
            Setting this property causes the text representation of the enum value to be looked up 
            from translation. E.g. assigning it to "/myproperty/" will result in a lookup for 
            "/myproperty/mylowercaseenumname".
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyEnumSelectControl.Number">
      <summary>
            Gets or sets the numeric representation of the enum type.
            </summary>
      <value>The numeric representation of the enum type.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyEnumSelectControl.ToWebString">
      <summary>
            Returns the name of the selected value.
            </summary>
      <returns>The name of the selected value.</returns>
      <remarks>Returns either the name of the selected enum value or a translation for this if it exists.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyEnumSelectControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyFileSortOrderControl">
      <summary>
            Creates a user interface that displayes a drop down list with different sort orders for files.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyFileSortOrderControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyFileSortOrderControl.SortOrder">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Web.PropertyControls.FileSortOrder" /> for the corresponding <see cref="T:EPiServer.SpecializedProperties.PropertyFileSortOrder" />.
            </summary>
      <value>The <see cref="T:EPiServer.Web.PropertyControls.FileSortOrder" /> for the corresponding <see cref="T:EPiServer.SpecializedProperties.PropertyFileSortOrder" />.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyFileSortOrderControl.ToWebString">
      <summary>
            Gets a translated name of the selected the sort order.
            </summary>
      <returns>A translated name of the selected sort order.</returns>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyFrameControl">
      <summary>
            Creates a user interface with a drop down list containing the defined frames for the web site.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyFrameControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyFrameControl.Number">
      <summary>
            Gets or sets the integer value of the selected frame.
            </summary>
      <value>The integer value of the selected frame.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyFrameControl.FrameName">
      <summary>
            Gets the name of the selected frame.
            </summary>
      <returns>The name of the selected frame.</returns>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyFrameControl.PropertyFrame">
      <summary>
            Gets the <see cref="T:EPiServer.SpecializedProperties.PropertyFrame" />.
            </summary>
      <value>The PropertyFrame.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyFrameControl.AutoGenerateEmptyValue">
      <summary>
            Gets or sets a value indicating whether an empty value should be created for the DropDownList.
            </summary>
      <value>
        <c>true</c> if an empty value should be created; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyGenericControl">
      <summary>
            The control to render generic property controls that implements <see cref="T:EPiServer.Web.IPropertyDataControl" /></summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyGenericControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.PropertyGenericControl" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyGenericControl.#ctor(System.Web.UI.Control)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.PropertyGenericControl" /> class.
            </summary>
      <param name="control">The inner control to wrap</param>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyGenericControl.InnerControl">
      <summary>
            The inner control that is being wrapped by this generic property control
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyGenericControl.CreateDefaultControls">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyGenericControl.CreateEditControls">
      <summary>
            Legacy edit mode is not supported for generic controls
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyGenericControl.DisplayEditUI">
      <summary>
            Legacy edit mode is not supported for generic controls
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyGenericControl.ApplyEditChanges">
      <summary>
            Legacy edit mode is not supported for generic controls
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyImageReferenceControl.CreateDefaultControls">
      <summary>
            Creates the default controls for the property. Used when the property is in view mode or in "on page edit"
            mode and the PropertyDataControl does not support on page editing.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyImageUrlControl">
      <summary>
            Class for rendering image control
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyImageUrlControl.CreateDefaultControls">
      <summary>
            Creates the default controls for the property. Used when the property is in view mode or in "on page edit"
            mode and the PropertyDataControl does not support on page editing.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyLanguageBranchControl">
      <summary>
            Creates a user interface with a drop down list containing the enabled language branches for the web site.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLanguageBranchControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.PropertyLanguageBranchControl" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLanguageBranchControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyLanguageBranchListControl">
      <summary>
            Creates a user interface with check boxes for each of the defined language branches for the web site.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLanguageBranchListControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.PropertyLanguageBranchListControl" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLanguageBranchListControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyLanguageControl">
      <summary>
            Property control that is used to store a language.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLanguageControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.PropertyLanguageControl" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLanguageControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyLinkCollectionControl">
      <summary>
            The control for the PropertyLinkCollection.
            </summary>
      <remarks>
            Loads a control that is located in the UI, "Edit/PropertyLinkCollectionEditControl.ascx".
            </remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLinkCollectionControl.CreateEditControls">
      <summary>
            Loads the control "Edit/PropertyLinkCollectionEditControl.ascx" and assigns the current value of the property to it.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLinkCollectionControl.CreateDefaultControls">
      <summary>
            Creates the default controls for the property. Used when the property is in view mode or in "on page edit"
            mode and the PropertyDataControl does not support on page editing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLinkCollectionControl.ApplyEditChanges">
      <summary>
            Get the updated collection of links from the edit control and assigns it to the property.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyLinkCollectionControl.PropertyLinkCollection">
      <summary>
            Gets the PropertyData as a PropertyLinkCollection for convenience.
            </summary>
      <value>The PropertyData as a PropertyLinkCollection.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyLinkTypeControl">
      <summary>
            Property control that creates a user interface with a drop down list containing different types of links in EPiServer CMS.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLinkTypeControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLinkTypeControl.AddScripts">
      <summary>
            Adds the javascript that is needed.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyLinkTypeControl.Link">
      <summary>
            Gets the <see cref="T:EPiServer.Core.LinkType" />.
            </summary>
      <value>The <see cref="T:EPiServer.Core.LinkType" />.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLinkTypeControl.ToWebString">
      <summary>
            Get a translated name of the link type. For instance "External link".
            </summary>
      <returns>A translated name of the link type.</returns>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyListControl">
      <summary>
            Property control that displays the contents of a PropertyList property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyListControl.CreateDefaultControls">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyLongStringControl">
      <summary>
            Property control that creates a html editor. The control might load different editors depending on your browser.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControl.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControl.CreateTextBox">
      <summary>
            Creates a TextBox to be able to edit the property.
            </summary>
      <returns>A new TextBox.</returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControl.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="T:EPiServer.Core.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControl.ClearEmptyLinks(System.String)">
      <summary>
            Clears any link where the A tag is empty and it doesn't contain a name or id attribute.
            </summary>
      <param name="text">The text to clear any empty links from.</param>
      <returns>A string without any empty A tags.</returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControl.CheckNameOrId(System.Text.RegularExpressions.Match)">
      <summary>
            MatchEvaluator that evaluates if the empty A tag has a name or id attribute.
            </summary>
      <param name="m">A Regex Match containing an empty A tag.</param>
      <returns>String.Empty if match doesn't contain name or attribute, otherwise the original string.</returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControl.SetupControl">
      <summary>
            Called when setting up the properties for a page.
            </summary>
      <remarks>If the control creates it's child controls in CreateChildControls(), EnsureChildControls() should be
            called in this method to make sure the child controls are created before loading post data.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControl.InitializeData(EPiServer.Core.PropertyDataCollection)">
      <summary>
            Initializes private variables.
            </summary>
      <param name="properties">The properties that are beeing edited.</param>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControl.GetCssPaths">
      <summary>
            Use CSS-path in UIEditorCssPaths if defined, otherwise default CSS from configuration. The configuration value is a comma separated list of resolved paths.
            </summary>
      <returns>Relative CSS-path to be used in editor</returns>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControl.ResolveCssPaths(System.String)">
      <summary>
            Resolves a ',' separated string of relative CSS paths so they become absolute paths from application root.
            </summary>
      <param name="cssPath">The CSS path.</param>
      <example>
            "~/Public/Styles/Default/Editor.css" will be resolved to "/Public/Styles/Default/Editor.css"
            </example>
      <returns>A comma separated list of resloved CSS paths for the given page</returns>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyLongStringControl.PageLink">
      <summary>
            Gets or sets the page link for the page that the editor is contained in.
            </summary>
      <value>The page link for the page that the editor is contained in.</value>
      <remarks>This is used to specify the current page for external resources like the link editor.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyLongStringControl.ParentLink">
      <summary>
            Gets or sets the parent page link for the page that the editor is contained in.
            </summary>
      <value>The page link for the parent page for the page that the editor is contained in.</value>
      <remarks>This is used to specify the parent page for external resources like the link editor.
            This can be used when the page has not been created yet.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyLongStringControl.FolderID">
      <summary>
            Gets the ID of the page folder.
            </summary>
      <value>The ID of the page folder.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyLongStringControl.EditControl">
      <summary>
            Gets or sets the control used to edit the property.
            </summary>
      <value>The control used to edit the property.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyLongStringControlBase">
      <summary>
            Base class for controls that work with html data. For instance property controls for html editors.
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.PropertyLongStringControlBase._contentControlResolver">
      <summary>
            The content control resolver
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControlBase.CreateDefaultControls">
      <summary>
            Creates the default controls for the property. Used when the property is in view mode or in "on page edit"
            mode and the PropertyDataControl does not support on page editing.
            </summary>
      <remarks>PropertyLongStringControl will create a div tag instead of a span tag.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyLongStringControlBase.Tag">
      <summary>
            Gets or sets the current tag that should be used to select template
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyLongStringControlBase.GetFilteredFragments(EPiServer.SpecializedProperties.PropertyXhtmlString)">
      <summary>
            Gets the filtered fragments controls.
            </summary>
      <param name="xHtmlProperty">The XHTML property.</param>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyLongStringControlBase.SupportsOnPageEdit">
      <summary>
            Gets a value indicating whether this control supports "on page edit".
            </summary>
      <value>
        <c>true</c> if this control supports "on page edit"; otherwise, <c>false</c>.
            </value>
      <remarks>PropertyLongStringControl supports "on page edit".
            If this property returns false CreateDefaultControls() will be called instead of CreateOnPageEditControls() when in "on page edit" mode.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyLongStringControlBase.RowLayout">
      <summary>
            Specifies how a property row is rendered in the edit user interface.
            </summary>
      <value>
            One of the values defined in <see cref="T:EPiServer.Core.TableRowLayout" />.
            </value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyNumberControl">
      <summary>
            Property control that is used to store a numeric value.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyNumberControl.ApplyControlAttributes(System.Web.UI.WebControls.WebControl)">
      <summary>
            Copies web attribues and style information. Also sets a css class indicating
            if this property is required if <see cref="T:EPiServer.Core.RenderType" /> is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <param name="control">The control to setup.</param>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyPageReferenceControl">
      <summary>
            Property control that is used to store a reference to a page in the web site.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyPageReferenceControl.AddErrorValidator(System.String)">
      <summary>
            Adds an error validator to the control collection and to the Page.Validators collection.
            </summary>
      <param name="errorMessage">The error message.</param>
      <remarks>This method is used to indicate that invalid data has been entered by the user.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyPageReferenceControl.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyPageReferenceControl.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="T:EPiServer.Core.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyPageReferenceControl.PropertyPageReference">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Core.PropertyPageReference" />.
            </summary>
      <value>The <see cref="T:EPiServer.Core.PropertyPageReference" />.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyPageReferenceControl.PageLink">
      <summary>
            Gets or sets the actual <see cref="T:EPiServer.Core.PageReference" />.
            </summary>
      <value>The <see cref="T:EPiServer.Core.PageReference" />.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyPageReferenceControl.EditControl">
      <summary>
            Gets or sets the control used to edit the property.
            </summary>
      <value>The control used to edit the property.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyPageSortOrderControl">
      <summary>
            Property control that stores a sort order type for pages.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyPageSortOrderControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyPageSortOrderControl.Number">
      <summary>
            Gets or sets the numeric representation of the sort order type.
            </summary>
      <value>The numeric representation of the sort order type.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyPageSortOrderControl.ToWebString">
      <summary>
            Gets a translated name of selected the sort order.
            </summary>
      <returns>A translated name of selected the sort order.</returns>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyPageTypeControl">
      <summary>
            Property control that is used to select a page type.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyPageTypeControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.PropertyControls.PropertyPageTypeControl" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyPageTypeControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyPageTypeControl.PropertyPageType">
      <summary>
            Gets or sets the corresponding <see cref="T:EPiServer.Core.PropertyPageType" />.
            </summary>
      <value>The corresponding <see cref="T:EPiServer.Core.PropertyPageType" />.</value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyPageTypeControl.PageTypeID">
      <summary>
            Gets or sets the id for the page type.
            </summary>
      <value>The id for the page type.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyPasswordControl">
      <summary>
            Property control that is used to store a password.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyPasswordControl.Collapsed">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Web.PropertyControls.PropertyPasswordControl" /> is collapsed.
            </summary>
      <value>
        <c>true</c> if collapsed; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyPasswordControl.CreateDefaultControls">
      <summary>
            PropertyPasswordControl does not support showing a password in "view mode" and calls CreateEditControls
            to get an edit interface even in "view mode".
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyPasswordControl.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyPasswordControl.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="T:EPiServer.Core.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyPasswordControl.EditControl">
      <summary>
            Gets or sets the control used to edit the property.
            </summary>
      <value>The control used to edit the property.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertySelectControlBase">
      <summary>
            Abstract class that can be inherited from when you want to create a DropDownList with custom values.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySelectControlBase.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySelectControlBase.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertySelectControlBase.AutoGenerateEmptyValue">
      <summary>
            Gets or sets a value indicating whether an empty value should be created for the DropDownList.
            </summary>
      <value>
        <c>true</c> if an empty value should be created; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertySelectControlBase.EditControl">
      <summary>
            Gets or sets the control used to edit the property.
            </summary>
      <value>The control used to edit the property.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertySelectMultipleControlBase">
      <summary>
            Abstract class that can be inherited from when you want to create a CheckBoxList with custom values.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySelectMultipleControlBase.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySelectMultipleControlBase.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="T:EPiServer.Core.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySelectMultipleControlBase.SaveValuesForCheckBoxList(System.Web.UI.WebControls.CheckBoxList)">
      <summary>
            Saves the values for check box list.
            </summary>
      <param name="inputControl">The input control.</param>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertySelectMultipleControlBase.EditControl">
      <summary>
            Gets or sets the control used to edit the property.
            </summary>
      <value>The control used to edit the property.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySelectMultipleControlBase.IsValueActive(System.String)">
      <summary>
            Determines whether the specified value is active for the property.
            </summary>
      <param name="value">The value.</param>
      <returns>
        <c>true</c> if the specified value is active for the property.; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertySelectMultipleControlBase.PropertyMultipleValue">
      <summary>
            Gets the property cast as a <see cref="P:EPiServer.Web.PropertyControls.PropertySelectMultipleControlBase.PropertyMultipleValue" />.
            </summary>
      <value>The property cast as a <see cref="P:EPiServer.Web.PropertyControls.PropertySelectMultipleControlBase.PropertyMultipleValue" /></value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertySelectorControl">
      <summary>
            Property control that is used to select one or several properties from the current page.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySelectorControl.SetupEditControls">
      <summary>
            Creates a <see cref="T:System.Web.UI.WebControls.CheckBoxList" /> with all properties for the current page.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertySelectorControl.PropertySelector">
      <summary>
            Gets the property cast as a <see cref="P:EPiServer.Web.PropertyControls.PropertySelectorControl.PropertySelector" />.
            </summary>
      <value>The property cast as a <see cref="P:EPiServer.Web.PropertyControls.PropertySelectorControl.PropertySelector" />.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertySettings.IMultipleOptionsListSettingsUI">
      <summary>
            Interface used to connect the multiple options ui user control in the UI with the property control in the EPiServer core.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertySettings.IMultipleOptionsListSettingsUI.Settings">
      <summary>
            Gets or sets the property settings.
            </summary>
      <value>The property settings.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySettings.IMultipleOptionsListSettingsUI.GetUpdatedOptions">
      <summary>
            Gets the updated dictionary of options.
            </summary>
      <returns>A dictionary containing name and value of the options.</returns>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertySettings.InputMultipleOptionsList">
      <summary>
            Class used to input settings for the drop down list property
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySettings.InputMultipleOptionsList.OnLoad(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load" /> event.
            </summary>
      <param name="e">The <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySettings.InputMultipleOptionsList.LoadSettingsUI(EPiServer.Core.PropertySettings.IPropertySettings)">
      <summary>
            Stores the property settings in the local Settings property.
            </summary>
      <param name="propertySettings">The property settings object.</param>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySettings.InputMultipleOptionsList.UpdateSettings(EPiServer.Core.PropertySettings.IPropertySettings)">
      <summary>
            Loads the values from the input control into the property settings object.
            </summary>
      <param name="propertySettings">The property settings.</param>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertySettings.MultipleOptionsListSettings">
      <summary>
            Settings for the predefiened option lists properties.
            </summary>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertySettings.MultipleOptionsListSettings.ListOptions">
      <summary>
            Gets or sets the values of the options.
            </summary>
      <value>The values of the options.</value>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertySettings.MultipleOptionsListSettings.GetDefaultValues">
      <summary>
            Gets the default value.
            </summary>
      <returns>
            Programmatically determined default values
            </returns>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyStringControl">
      <summary>
            Property control that stores a short string (less than 255 characters).
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyStringControl.#ctor">
      <summary>
            Creates instance of PropertyStringControl with default texbox's length (default is 255 chars)
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyStringControl.#ctor(System.Int32)">
      <summary>
            Creates instance of PropertyStringControl with given maximum length of the textbox
            </summary>
      <param name="maxLength">Specifies the maximum length of the textbox. 0 or negative value means no max length for the textbox</param>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyStringControlMax">
      <summary>
            Property control that renders a long string (longer than 255 characters).
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyStringControlMax.#ctor">
      <summary>
            Creates instance of PropertyStringControl with default texbox's length
            </summary>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyTextBoxControlBase">
      <summary>
            Base control that creates a user interface for editing in a textbox.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyTextBoxControlBase.#ctor">
      <summary>
            Creates instance of PropertyTextBoxControlBase with default maxLength of 255
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyTextBoxControlBase.#ctor(System.Int32)">
      <summary>
            Creates instance of PropertyTextBoxControlBase with given maxLength of the textbox
            </summary>
      <param name="maxLength">Specifies the maximum length of the textbox. 0 or negative value means no max length for the textbox</param>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyTextBoxControlBase.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyTextBoxControlBase.SetupEditControls">
      <summary>
            Setups the text box.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyTextBoxControlBase.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="T:EPiServer.Core.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyTextBoxControlBase.SupportsOnPageEdit">
      <summary>
            Gets a value indicating whether this control supports "on page edit".
            </summary>
      <value>
        <c>true</c> if this control supports "on page edit"; otherwise, <c>false</c>.
            </value>
      <remarks>The default behaviour for controls that inherit from PropertyTextBoxControlBase is that they support "on page edit".
            If this property returns false CreateDefaultControls() will be called instead of CreateOnPageEditControls() when in "on page edit" mode.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyTextBoxControlBase.EditControl">
      <summary>
            Gets or sets the control used to edit the property.
            </summary>
      <value>The control used to edit the property.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyTimeSpanControl">
      <summary>
            Property control that is used to store time spans.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyTimeSpanControl.CreateEditControls">
      <summary>
            Creates an edit interface for the property.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyTimeSpanControl.ApplyEditChanges">
      <summary>
            Applies changes for the posted data to the page's properties when the <see cref="T:EPiServer.Core.RenderType" /> property is set to <see cref="F:EPiServer.Core.RenderType.Edit" />.
            </summary>
      <remarks>This method is called from ApplyChanges() if the control does not have an adapter.</remarks>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyTimeSpanControl.TimeUnit">
      <summary>
            Enumerator for different time invervals.
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.PropertyTimeSpanControl.TimeUnit.Undefined">
      <summary>
            Not defined.
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.PropertyTimeSpanControl.TimeUnit.Minute">
      <summary>
            Minutes.
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.PropertyTimeSpanControl.TimeUnit.Hour">
      <summary>
            Hours.
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.PropertyTimeSpanControl.TimeUnit.Day">
      <summary>
            Days.
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.PropertyTimeSpanControl.TimeUnit.Week">
      <summary>
            Weeks.
            </summary>
    </member>
    <member name="F:EPiServer.Web.PropertyControls.PropertyTimeSpanControl.TimeUnit.Month">
      <summary>
            Months.
            </summary>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyUILanguageControl">
      <summary>
            Property control that is used to store one of the languages that are defined in the translation files.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyUILanguageControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyUrlControl">
      <summary>
            Property control that is used to store an url.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyUrlControl.CreateDefaultControls">
      <summary>
            Creates the default controls for the property. Used when the property is in view mode or in "on page edit"
            mode and the PropertyDataControl does not support on page editing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyUrlControl.GetContent(System.String)">
      <summary>
            Gets content from <paramref name="permanentLink" />.
            </summary>
      <param name="permanentLink">Permanent link to parse content from.</param>
      <returns>A content if the <paramref name="permanentLink" /> is valid, otherwise, return null.</returns>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.PropertyWeekdayControl">
      <summary>
            Property control that is used to select one or several weekdays.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyWeekdayControl.SetupEditControls">
      <summary>
            Used to apply a custom setup to the edit controls.
            </summary>
      <remarks>This method is called from CreateEditControls after the edit control(s) have been created.</remarks>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.PropertyWeekdayControl.SaveValuesForCheckBoxList(System.Web.UI.WebControls.CheckBoxList)">
      <summary>
            Saves the values for check box list.
            </summary>
      <param name="EditControl">The edit control.</param>
      <remarks>The selected weekdays are stored as a bit array that is stored as an integer.</remarks>
    </member>
    <member name="P:EPiServer.Web.PropertyControls.PropertyWeekdayControl.Number">
      <summary>
            Gets or sets the value for the property.
            </summary>
      <value>The value for the property.</value>
    </member>
    <member name="T:EPiServer.Web.PropertyControls.WebFormsContentValidator">
      <summary>
            Validator that can be used for validation when rendering content in WebForms.
            </summary>
    </member>
    <member name="M:EPiServer.Web.PropertyControls.WebFormsContentValidator.ExistInControlHierarchy(System.Web.UI.Control,EPiServer.Core.IContent,System.Web.UI.Control)">
      <summary>
            Checks wehter a an content instance is already present with same control somewhere in ancestor control hierarchy.
            That indicates that there is a circular dependency.
            </summary>
      <param name="parentControl">The parent control.</param>
      <param name="content">The content.</param>
      <param name="contentControl">The content control.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.QuickNavigatorMenu">
      <summary>
            Class for rendering quick navigator menu 
            </summary>
    </member>
    <member name="M:EPiServer.Web.QuickNavigatorMenu.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.QuickNavigatorMenu" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.QuickNavigatorMenu.ObjectSerializerFactory">
      <summary>
            Gets or sets the object serializer to use when serializing to Json.
            </summary>
      <value>The object serializer.</value>
    </member>
    <member name="P:EPiServer.Web.QuickNavigatorMenu.Items">
      <summary>
            Gets the collection of menu items for the quick navigator.
            </summary>
      <value>The menu items.</value>
    </member>
    <member name="M:EPiServer.Web.QuickNavigatorMenu.Add(System.String,EPiServer.Web.QuickNavigatorMenuItem)">
      <summary>
            Add menu item
            </summary>
      <param name="name">Name of item</param>
      <param name="item">Initialized menu item</param>
    </member>
    <member name="P:EPiServer.Web.QuickNavigatorMenu.DefaultUrl">
      <summary>
            Gets the default URL of the QuickNavigator.
            </summary>
    </member>
    <member name="P:EPiServer.Web.QuickNavigatorMenu.EditPageUrl">
      <summary>
            Gets the URL to edit mode for the current content.
            </summary>
    </member>
    <member name="P:EPiServer.Web.QuickNavigatorMenu.CurrentContentLink">
      <summary>
            Gets or sets the content reference for the current content.
            </summary>
    </member>
    <member name="M:EPiServer.Web.QuickNavigatorMenu.RegisterRequiredResources">
      <summary>
            Renders the complete menu with JavaScript and surrounding script tags.
            </summary>
    </member>
    <member name="M:EPiServer.Web.QuickNavigatorMenu.SerializeSettings">
      <summary>
            Serializes the settings for the quicknavigator.
            </summary>
      <returns>The settings as a string in JSON format.</returns>
    </member>
    <member name="T:EPiServer.Web.QuickNavigatorMenuItem">
      <summary>
            Represents a data structure that holds information about a selectable menu item in the EPiServer menu on the site.
            </summary>
    </member>
    <member name="M:EPiServer.Web.QuickNavigatorMenuItem.#ctor(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.QuickNavigatorMenuItem" /> class.
            </summary>
      <param name="caption">Text to appear in menu.</param>
      <param name="url">URL to open on click (can be null).</param>
      <param name="javaScript">Code to execute on click (can be null).</param>
      <param name="enabledScript">Code to evaluate to determine if item is active.</param>
      <param name="imageUrl">URL to item image, null for empty.</param>
    </member>
    <member name="P:EPiServer.Web.QuickNavigatorMenuItem.Caption">
      <summary>
            Text to appear in menu (use null for separator)
            </summary>
    </member>
    <member name="P:EPiServer.Web.QuickNavigatorMenuItem.Url">
      <summary>
            URL to open on click (can be null)
            </summary>
    </member>
    <member name="P:EPiServer.Web.QuickNavigatorMenuItem.Javascript">
      <summary>
            Code to execute on click
            </summary>
    </member>
    <member name="P:EPiServer.Web.QuickNavigatorMenuItem.EnabledScript">
      <summary>
            Code to evaluate to determine if item is enabled, should return true or false
            </summary>
    </member>
    <member name="P:EPiServer.Web.QuickNavigatorMenuItem.ImageUrl">
      <summary>
            URL to item image, null for empty
            </summary>
    </member>
    <member name="T:EPiServer.Web.RebaseKind">
      <summary>
            An enumeration for the different kinds of URL rebasing to perform.
            </summary>
    </member>
    <member name="F:EPiServer.Web.RebaseKind.ToRootRelative">
      <summary>
            The URL should be root relative (starting with a '/')
            </summary>
    </member>
    <member name="F:EPiServer.Web.RebaseKind.ToRelative">
      <summary>
            The URL should be relative (not starting with '/')
            </summary>
    </member>
    <member name="F:EPiServer.Web.RebaseKind.IgnoreRootRelative">
      <summary>
            If the path is already root-relative, do nothing.
            </summary>
    </member>
    <member name="F:EPiServer.Web.RebaseKind.NoLeadingDotDot">
      <summary>
            If enabled together with ToRelative it will cause root-relative paths to be generated when a 
            leading "../" should otherwise have been generated.
            </summary>
    </member>
    <member name="F:EPiServer.Web.RebaseKind.Default">
      <summary>
            The default rebasing to use, which is ToRelative
            </summary>
    </member>
    <member name="T:EPiServer.Web.ResolvingTemplatePathEventArgs">
      <summary>
            Occurs when a Template Path Resolver try to resolve path to template. 
            </summary>
    </member>
    <member name="M:EPiServer.Web.ResolvingTemplatePathEventArgs.#ctor(System.Type,EPiServer.Framework.Web.TemplateTypeCategories)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.ResolvingTemplatePathEventArgs" /> class.
            </summary>
      <param name="renderType">Type of the render.</param>
      <param name="category">The type of the template.</param>
    </member>
    <member name="P:EPiServer.Web.ResolvingTemplatePathEventArgs.Type">
      <summary>
            The template type.
            </summary>
    </member>
    <member name="P:EPiServer.Web.ResolvingTemplatePathEventArgs.Category">
      <summary>
            Gets or sets the type category of the template.
            </summary>
    </member>
    <member name="P:EPiServer.Web.ResolvingTemplatePathEventArgs.Path">
      <summary>
            Gets or sets the path to template.
            </summary>
    </member>
    <member name="T:EPiServer.Web.RewritePipe">
      <summary>
            Exposes events that are fired during HTML parsing.
            </summary>
    </member>
    <member name="F:EPiServer.Web.RewritePipe._encoding">
      <summary>
            The encoding used for the HTML
            </summary>
    </member>
    <member name="P:EPiServer.Web.RewritePipe.Encoding">
      <summary>
            Gets the encoding.
            </summary>
      <value>The encoding.</value>
    </member>
    <member name="E:EPiServer.Web.RewritePipe.HtmlInit">
      <summary>
            Raised once at the start, for every instantiation of us.
            </summary>
    </member>
    <member name="E:EPiServer.Web.RewritePipe.HtmlRewriteBegin">
      <summary>
            Raised at the start of the HTML stream, before anything has been parsed or output.
            Subscribers may take this chance to initialize, do other tings before the actual
            parsing begins.
            </summary>
    </member>
    <member name="E:EPiServer.Web.RewritePipe.HtmlRewriteUrl">
      <summary>
            Give subscribers a chance to modify an URL
            </summary>
    </member>
    <member name="E:EPiServer.Web.RewritePipe.HtmlRewriteName">
      <summary>
            Raised when a an element or attribute name has been found. Subscribers may
            change the name, or do other things as a result of this event. This event
            together with HtmlRewriteValue is the most common event to subscribe to.
            </summary>
    </member>
    <member name="E:EPiServer.Web.RewritePipe.HtmlRewriteValue">
      <summary>
            Raised when a value has been found, such as an attribute value, but also when
            the text contents of an element is found, whitespace or any other item that has
            text. This event togheter with HtmlRewrietName is the most common event to
            subscribe to.
            Set IsHoldingOutput = true to suppress output of the value, modified or not.
            </summary>
    </member>
    <member name="E:EPiServer.Web.RewritePipe.HtmlRewriteEnd">
      <summary>
            Raised when all HTML has been parsed, just before flushing
            </summary>
    </member>
    <member name="M:EPiServer.Web.RewritePipe.OnHtmlInit(EPiServer.Web.HtmlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.RewritePipe.HtmlInit" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.RewritePipe.OnHtmlRewriteBegin(EPiServer.Web.HtmlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.RewritePipe.HtmlRewriteBegin" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.RewritePipe.OnHtmlRewriteUrl(EPiServer.Web.HtmlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.RewritePipe.HtmlRewriteUrl" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.RewritePipe.OnHtmlRewriteName(EPiServer.Web.HtmlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.RewritePipe.HtmlRewriteName" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.RewritePipe.OnHtmlRewriteValue(EPiServer.Web.HtmlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.RewritePipe.HtmlRewriteValue" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.RewritePipe.OnHtmlRewriteEnd(EPiServer.Web.HtmlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.RewritePipe.HtmlRewriteEnd" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.HtmlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Web.RoutingUrlRewriteModule">
      <summary>
            Url rewrite implementation for web forms that uses configured Routing
            for Url rewrite.
            </summary>
    </member>
    <member name="M:EPiServer.Web.RoutingUrlRewriteModule.HttpUrlRewriteToExternal(System.String,EPiServer.Web.RebaseKind)">
      <summary>
            Rewrite a URL om a HTTP request from internal to external.
            </summary>
      <param name="url">The URL.</param>
      <param name="typeOfUrl">The type of rebasing to perform on the url.</param>
      <returns>The rewritten request URL</returns>
    </member>
    <member name="M:EPiServer.Web.RoutingUrlRewriteModule.HtmlAddRewriteToExternalFilter(System.Web.HttpApplication)">
      <summary>
            Connect a filter for rewriting of outgoing HTML, and perform other actions before actually sending the HTML
            </summary>
      <param name="httpApplication">
      </param>
    </member>
    <member name="M:EPiServer.Web.RoutingUrlRewriteModule.ValidateRewriteHtmlToExternal(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Check if we should rewrite outgoing HTML. e.Cancel will be set to true if we should not.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.RoutingUrlRewriteModule.Init(System.Web.HttpApplication)">
      <summary>
            Called by the ASP.NET framework to initialize module
            </summary>
      <param name="application">
      </param>
    </member>
    <member name="M:EPiServer.Web.RoutingUrlRewriteModule.HttpUrlRewriteToInternal(EPiServer.UrlBuilder)">
      <summary>
            Not implemented. Routing is used to handle incoming requests.
            </summary>
      <param name="url">url</param>
      <exception cref="T:System.NotImplementedException">Always thrown</exception>
    </member>
    <member name="T:EPiServer.Web.ServiceLocationHelperExtensions">
      <summary>  
            Makes EPiServer.Web services part of the public API.  
            </summary>
    </member>
    <member name="M:EPiServer.Web.ServiceLocationHelperExtensions.PermanentLinkMapper(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="T:EPiServer.Web.IPermanentLinkMapper" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="T:EPiServer.Web.IPermanentLinkMapper" /> service.</returns>
    </member>
    <member name="M:EPiServer.Web.ServiceLocationHelperExtensions.TemplateResolver(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="M:EPiServer.Web.ServiceLocationHelperExtensions.TemplateResolver(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="M:EPiServer.Web.ServiceLocationHelperExtensions.TemplateResolver(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.</returns>
    </member>
    <member name="M:EPiServer.Web.ServiceLocationHelperExtensions.TemplatePathResolver(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="T:EPiServer.Web.ITemplatePathResolver" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="T:EPiServer.Web.ITemplatePathResolver" /> service.</returns>
    </member>
    <member name="M:EPiServer.Web.ServiceLocationHelperExtensions.TemplateControlLoader(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="M:EPiServer.Web.ServiceLocationHelperExtensions.TemplateControlLoader(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="M:EPiServer.Web.ServiceLocationHelperExtensions.TemplateControlLoader(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.</returns>
    </member>
    <member name="M:EPiServer.Web.ServiceLocationHelperExtensions.DisplayChannelService(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>  
            Resolves the <see cref="M:EPiServer.Web.ServiceLocationHelperExtensions.DisplayChannelService(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.
            </summary>
      <param name="serviceLocationHelper">The service location helper.</param>
      <returns>An instance of the currently registered <see cref="M:EPiServer.Web.ServiceLocationHelperExtensions.DisplayChannelService(EPiServer.ServiceLocation.ServiceLocationHelper)" /> service.</returns>
    </member>
    <member name="T:EPiServer.Web.ServiceLocatorExtensions">
      <summary>
            Extension methods to work with services from <see cref="T:EPiServer.ServiceLocation.IServiceLocator" /> directly on <see cref="T:System.Web.HttpContextBase" /></summary>
    </member>
    <member name="M:EPiServer.Web.ServiceLocatorExtensions.GetServiceLocator(System.Web.HttpContextBase)">
      <summary>
            Gets the service locator from context
            </summary>
      <param name="httpContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.ServiceLocatorExtensions.SetServiceLocator(System.Web.HttpContextBase,EPiServer.ServiceLocation.IServiceLocator)">
      <summary>
            Sets the service locator to context (this simplifies testing)
            </summary>
      <param name="httpContext">
      </param>
      <param name="serviceLocator">
      </param>
    </member>
    <member name="M:EPiServer.Web.ServiceLocatorExtensions.GetService``1(System.Web.HttpContextBase)">
      <summary>
            Gets an instance from the service locator
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="httpContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.ServiceLocatorExtensions.GetServices``1(System.Web.HttpContextBase)">
      <summary>
            Gets all instances from the service locator
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="httpContext">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.SiteDefinitionResolverExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Web.ISiteDefinitionResolver" /> with convenient methods
            </summary>
    </member>
    <member name="M:EPiServer.Web.SiteDefinitionResolverExtensions.Get(EPiServer.Web.ISiteDefinitionResolver,System.Web.HttpRequestBase)">
      <summary>
            Gets the <see cref="T:EPiServer.Web.SiteDefinition" /> that has a host that matches specified request.
            </summary>
      <param name="siteDefinitionResolver">The site definition resolver that is being extended</param>
      <param name="request">The request.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.TemplateResolver">
      <summary>
            The template resolver is responsible to find what template to use for a certain type.
            </summary>
      <remarks>
        <para>The template resolver can be extended using <see cref="E:EPiServer.Web.TemplateResolver.TemplateResolving" /> and <see cref="E:EPiServer.Web.TemplateResolver.TemplateResolved" /> events.</para>
      </remarks>
      <example>
            The following code example demonstrates how to exchange the template for mobile requests.
            <code source="../CodeSamples/EPiServer/Web/TemplateResolverSample.cs" region="TemplateChange" lang="cs" /></example>
    </member>
    <member name="E:EPiServer.Web.TemplateResolver.TemplateResolving">
      <summary>
            Occurs when a template is about to be resolved.
            </summary>
      <remarks>
            If an eventHandler sets the <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> on the eventargs to the event then that render is used without calling for registered renderers.
            </remarks>
    </member>
    <member name="E:EPiServer.Web.TemplateResolver.TemplateResolved">
      <summary>
            Occurs when tries to resolve control.
            This events raises after finding default or first supported template.
            One can change the selected template on the <see cref="T:EPiServer.Web.TemplateResolverEventArgs" /></summary>
      <example>
            The following code example demonstrates how to exchange the template for mobile requests.
            <code source="../CodeSamples/EPiServer/Web/TemplateResolverSample.cs" region="TemplateChange" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.Resolve(System.Web.HttpContextBase,EPiServer.DataAbstraction.ContentType,EPiServer.Framework.Web.TemplateTypeCategories,System.String)">
      <summary>
            Resolves what rendering template that should be used for the provided content type
            given that it is of the provided template type.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentType">The content type that the template should be associated with.</param>
      <param name="templateTypeCategory">The category of template type that should be returned.</param>
      <param name="tag">The tag to use when selecting renderer.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.Resolve(System.Web.HttpContextBase,System.Type,System.Object,EPiServer.Framework.Web.TemplateTypeCategories,System.String)">
      <summary>
            Resolves what rendering template that should be used for the provided content item
            given that it is of the provided template type.
            </summary>
      <param name="httpContext">The context.</param>
      <param name="itemType">Type of the item.</param>
      <param name="itemToRender">The routed item of which type the template should be associated with.</param>
      <param name="templateTypeCategory">The category of template type that should be returned.</param>
      <param name="tag">The tag to use when selecting renderer.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.Resolve(System.Web.HttpContextBase,EPiServer.DataAbstraction.ContentType,EPiServer.Framework.Web.TemplateTypeCategories)">
      <summary>
            Resolves what rendering template that should be used for the provided content type
            given that it is of the provided template type.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentType">The content type that the template should be associated with.</param>
      <param name="templateTypeCategory">The category of template type that should be returned.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.Resolve(System.Web.HttpContextBase,System.Object,EPiServer.Framework.Web.TemplateTypeCategories)">
      <summary>
            Resolves what rendering template that should be used for the provided content item
            given that it is of the provided template type.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="itemToRender">The routed item of which type the template should be associated with.</param>
      <param name="templateTypeCategory">The category of template type that should be returned.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.Resolve(System.Web.HttpContextBase,System.Object,EPiServer.Framework.Web.TemplateTypeCategories,System.String)">
      <summary>
            Resolves what rendering template that should be used for the provided content item
            given that it is of the provided template type.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="itemToRender">The routed item of which type the template should be associated with.</param>
      <param name="templateTypeCategory">The category of template type that should be returned.</param>
      <param name="tag">The tag to use when selecting renderer.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.Resolve(System.Web.HttpContextBase,System.Object,EPiServer.Framework.Web.TemplateTypeCategories,EPiServer.Web.ContextMode)">
      <summary>
            Resolves what rendering template that should be used for the provided content item
            given that it is of the provided template type and that it has a template for the specified <paramref name="contextMode" />.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="itemToRender">The routed item of which type the template should be associated with.</param>
      <param name="templateTypeCategory">The category of template type that should be returned.</param>
      <param name="contextMode">The context mode.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
      <remarks>
        <para>When <paramref name="contextMode" /> is <see cref="F:EPiServer.Web.ContextMode.Edit" /> first a template with tag <see cref="F:EPiServer.Framework.Web.RenderingTags.Edit" /> is searched for
            if no such is found a template with no tag is searched for and finally if no is found a template with tag <see cref="F:EPiServer.Framework.Web.RenderingTags.Preview" /> is searched for.
            </para>
        <para>When <paramref name="contextMode" /> is <see cref="F:EPiServer.Web.ContextMode.Preview" /> first a template with tag <see cref="F:EPiServer.Framework.Web.RenderingTags.Preview" /> is searched for
            if no such is found a template with no tag is searched for.
            </para>
        <para>When <paramref name="contextMode" /> is <see cref="F:EPiServer.Web.ContextMode.Default" /> or <see cref="F:EPiServer.Web.ContextMode.Default" /> first a template with tag <see cref="F:EPiServer.Framework.Web.RenderingTags.Edit" /> is searched for
            if no such is found a template with no tag is searched for and finally if no is found a template with tag <see cref="F:EPiServer.Framework.Web.RenderingTags.Preview" /> is searched for.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.ResolvePageTemplate(System.Web.HttpContextBase,EPiServer.DataAbstraction.ContentType)">
      <summary>
            Resolves what page template that should be used for the provided content type.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentType">The content type that the template should be associated with.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.ResolvePageTemplate(System.Web.HttpContextBase,EPiServer.DataAbstraction.ContentType,System.String)">
      <summary>
            Resolves what page template that should be used for the provided content type.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentType">The content type that the template should be associated with.</param>
      <param name="tag">The tag to use when selecting renderer.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.ResolvePageTemplate(System.Web.HttpContextBase,EPiServer.Core.IContentData)">
      <summary>
            Resolves what page template that should be used for the provided content item.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentItem">The content item of which type the template should be associated with.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.ResolvePageTemplate(System.Web.HttpContextBase,EPiServer.Core.IContentData,System.String)">
      <summary>
            Resolves what page template that should be used for the provided content item.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentItem">The content item of which type the template should be associated with.</param>
      <param name="tag">The tag to use when selecting renderer.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.ResolveMvcTemplate(System.Web.HttpContextBase,EPiServer.DataAbstraction.ContentType)">
      <summary>
            Resolves what MVC template that should be used for the provided content type.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentType">The content type that the template should be associated with.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.ResolveMvcTemplate(System.Web.HttpContextBase,EPiServer.DataAbstraction.ContentType,System.String)">
      <summary>
            Resolves what MVC template that should be used for the provided content type.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentType">The content type that the template should be associated with.</param>
      <param name="tag">The tag to use when selecting renderer.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.ResolveMvcTemplate(System.Web.HttpContextBase,EPiServer.Core.IContentData)">
      <summary>
            Resolves what MVC template that should be used for the provided content item.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentItem">The content item of which type the template should be associated with.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.ResolveMvcTemplate(System.Web.HttpContextBase,EPiServer.Core.IContentData,System.String)">
      <summary>
            Resolves what MVC template that should be used for the provided content item.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentItem">The content item of which type the template should be associated with.</param>
      <param name="tag">The tag to use when selecting renderer.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.HasTemplate(EPiServer.Core.IContentData,EPiServer.Framework.Web.TemplateTypeCategories,EPiServer.Web.ContextMode)">
      <summary>
            Determines whether the provided content data item has a template matching the provided template type in given <see cref="T:EPiServer.Web.ContextMode" /></summary>
      <param name="contentData">The content data.</param>
      <param name="templateTypeCategory">The category of template type that should be checked for.</param>
      <param name="contextMode">The context mode.</param>
      <returns>
        <c>true</c> if the specified render context has template; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.HasTemplate(EPiServer.Core.IContentData,EPiServer.Framework.Web.TemplateTypeCategories)">
      <summary>
            Determines whether the provided content data item has a template matching the provided template type.
            </summary>
      <param name="contentData">The content data.</param>
      <param name="templateTypeCategory">The category of template type that should be checked for.</param>
      <returns>
        <c>true</c> if the specified render context has template; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.HasTemplate(EPiServer.Core.IContentData,EPiServer.Framework.Web.TemplateTypeCategories,System.String)">
      <summary>
            Determines whether the provided content data item has a template matching the provided template type.
            </summary>
      <param name="contentData">The content data.</param>
      <param name="templateTypeCategory">The category of template type that should be checked for.</param>
      <param name="tag">The tag to use when selecting renderer.</param>
      <returns>
        <c>true</c> if the specified render context has template; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.HasPageTemplate(EPiServer.Core.PageData)">
      <summary>
            Determines whether the provided content data item has a page template.
            </summary>
      <param name="pageData">The page data that should be checked if it has a template.</param>
      <returns>
        <c>true</c> if the specified render context has template; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.HasPageTemplate(EPiServer.Core.PageData,System.String)">
      <summary>
            Determines whether the provided content data item has a page template.
            </summary>
      <param name="pageData">The page data that should be checked if it has a template.</param>
      <param name="tag">The tag to use when selecting renderer.</param>
      <returns>
        <c>true</c> if the specified render context has template; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.OnTemplateResolved(EPiServer.Web.TemplateResolverEventArgs)">
      <summary>
            Called raise the <see cref="E:TemplateResolved" /> event when the template has been resolved.
            </summary>
      <param name="eventArgs">The event arguments for the event.</param>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.OnTemplateResolving(EPiServer.Web.TemplateResolverEventArgs)">
      <summary>
            Called to raise the <see cref="E:TemplateResolving" /> event before attempting to resolve the template.
            </summary>
      <param name="eventArgs">The event arguments for the event.</param>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.ResolveCore(System.Web.HttpContextBase,EPiServer.DataAbstraction.ContentType,System.Type,System.Object,EPiServer.Framework.Web.TemplateTypeCategories,System.String)">
      <summary>
            Template resolver algorithm.
            </summary>
      <param name="httpContext">The HTTP Context (optional, can be null)</param>
      <param name="contentType">The content type (optional, can be null)</param>
      <param name="itemType">The item type (required)</param>
      <param name="itemToRender">The item to render (optional, can be null)</param>
      <param name="category">The category (required)</param>
      <param name="tag">The tag for the template (optional, can be null)</param>
      <returns>A template model if found or <c>null</c> if no model was found</returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.GetContentType(EPiServer.Core.IContentData)">
      <summary>
            Get content type for given <paramref name="contentData" /></summary>
      <param name="contentData">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolver.EPiServer#Web#ITemplateResolver#Resolve(System.Object,System.Type,EPiServer.Framework.Web.TemplateTypeCategories,System.Collections.Generic.IEnumerable{System.String})">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Web.HttpExtensions">
      <summary>
            Extension methods for <see cref="T:System.Web.HttpContext" />.
            </summary>
    </member>
    <member name="T:EPiServer.Web.UrlRewriteContext">
      <summary>
            Context class for URL rewriting by the HierarchicalUrlHandler and related classes.
            </summary>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteContext.RootDir">
      <summary>
            Gets or sets the root directory for the current web site.
            </summary>
      <value>The root dir.</value>
      <remarks>
            Rather than accessing external configuration, this information is injected into the context class for testability
            and performance reasons.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteContext.Languages">
      <summary>
            Gets the languages enabled on site.
            </summary>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteContext.InitializeLanguageResolving(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.LanguageBranch})">
      <summary>
            Initializes the language resolving.
            </summary>
      <param name="enabledLanguages">The enabled languages.</param>
      <remarks>
            The first segment of a hierarchical URL usually identifies the language. Calling this method with a list of
            language branches initializes the data structures needed to handle the resolving of language segments into
            actual language.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteContext.Url">
      <summary>
            Gets the URL that should be rewritten.
            </summary>
      <value>The URL.</value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteContext.Language">
      <summary>
            Gets the language that is associated with this URL.
            </summary>
      <value>The language.</value>
      <remarks>
            Note that this will only indicate language preference based on the URL. Other factors, such as user preferences, cookies
            etc may override the language defined in the URL.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteContext.CleanPath">
      <summary>
            Gets the clean path.
            </summary>
      <value>The clean path.</value>
      <remarks>
            The Clean path is defined as the path without the RootDir prefix, without any language prefix and a possible trailing
            slash has been stripped. 
            </remarks>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteContext.HasTrailingSlash">
      <summary>
            Gets a value indicating whether the URL has a trailing slash.
            </summary>
      <value>
        <c>true</c> if this instance has trailing slash; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteContext.IsValidPath">
      <summary>
            Gets a value indicating whether the URL is a valid path for rewriting.
            </summary>
      <value>
        <c>true</c> if this instance is a valid path; otherwise, <c>false</c>.
            </value>
      <remarks>
            To be considered valid, the URL must start with the value given in RootDir to identify it as belonging to
            the curren web application.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteContext.#ctor(EPiServer.UrlBuilder)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.UrlRewriteContext" /> class.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="T:EPiServer.Web.UrlRewriteEventArgs">
      <summary>
            Common event arguments for Url rewriting, both with and without context
            </summary>
    </member>
    <member name="T:EPiServer.Web.UrlRewriteEventArgs.Context">
      <summary>
            URL context, used to provide the context for rebasing
            </summary>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteEventArgs.Context.#ctor(EPiServer.UrlBuilder,EPiServer.UrlBuilder)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.UrlRewriteEventArgs.Context" /> class.
            </summary>
      <param name="internalUrl">The internal URL.</param>
      <param name="externalUrl">The external URL.</param>
    </member>
    <member name="F:EPiServer.Web.UrlRewriteEventArgs.Context.InternalUrl">
      <summary>
            The internal context URL
            </summary>
    </member>
    <member name="F:EPiServer.Web.UrlRewriteEventArgs.Context.ExternalUrl">
      <summary>
            The external context URL
            </summary>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteEventArgs.#ctor(EPiServer.UrlBuilder)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> class.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteEventArgs.#ctor(EPiServer.UrlBuilder,EPiServer.Web.UrlRewriteEventArgs.Context)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> class.
            </summary>
      <param name="url">The URL.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteEventArgs.#ctor(EPiServer.UrlBuilder,EPiServer.Web.UrlRewriteEventArgs.Context,System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> class.
            </summary>
      <param name="url">The URL.</param>
      <param name="context">The context.</param>
      <param name="encoding">The encoding.</param>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteEventArgs.UrlContext">
      <summary>
            Gets or sets the URL context for rebasing operations.
            </summary>
      <value>The URL context.</value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteEventArgs.Url">
      <summary>
            Gets or sets the URL to rewrite
            </summary>
      <value>The URL.</value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteEventArgs.Encoding">
      <summary>
            Gets or sets the encoding to use when escaping the URL
            </summary>
      <value>The encoding.</value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteEventArgs.Internal">
      <summary>
            Gets or sets an optional internal representation of the URL, or other information in the context
            of the specific event.
            </summary>
      <value>The internal.</value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether further processing should be cancelled.
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteEventArgs.ForceRewriteHtml">
      <summary>
                Get or Set a value indicating whether rewrite url should be continue regardless of cancel action.  
            </summary>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteEventArgs.OnlyRebaseUrl">
      <summary>
            Gets or sets a value indicating whether the only operation on the URL will be rebasing.
            </summary>
      <value>
        <c>true</c> if URL should be rebased; otherwise, <c>false</c>.</value>
      <remarks>
            This information is needed for relative URLs that reference "static" information that is not moved as a result of
            of Friendly URL handling. Typically ASP.NET autogenerated links for themes etc.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteEventArgs.IsModified">
      <summary>
            Gets or sets a value indicating whether this instance is modified.
            </summary>
      <value>
        <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteEventArgs.IsMappableUrl">
      <summary>
            Gets or sets a value indicating whether this Url represents a url 
            served by this site or another site in the same enterprise setup.
            </summary>
      <value>
        <c>true</c> if the url is served by this site (or another enterprise site); otherwise, <c>false</c>.
            </value>
      <exclude />
    </member>
    <member name="T:EPiServer.Web.UrlRewriteModuleBase">
      <summary>
            Responsible for raising appropriate events for mapping between internal and external formats of the
            request URLs.
            </summary>
      <remarks>
            Will parse outgoing HTML, and incoming and outgoing special urls and parameter strings, raising the
            appropriate events implemented by the implementation derived classes. It is this
            modules responsibility to identify all necessary urls for rewriting in one or the other direction. The
            descendant class must provide the actual rewriting functionality.
            </remarks>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteModuleBase.HttpRewriteInit">
      <summary>
            Initialize events. Use this handler to subscribe to the relevant events. Raised once
            per instance of the HttpModule.
            </summary>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteModuleBase.HttpRewritingToInternal">
      <summary>
            Raised before rewriting the request URL from external to internal
            </summary>
      <remarks>
            Extra validation can be performed here, as well as pre-steps in the rewriting
            process. Set e.Cancel to true to stop rewriting from ocurring.
            </remarks>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteModuleBase.HttpRewroteToInternal">
      <summary>
            Raised after rewriting the request URL from external to internal
            </summary>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteModuleBase.HttpRewritingToExternal">
      <summary>
            Raised before rewriting the request URL from internal to external
            </summary>
      <remarks>
            Extra validation can be performed here, as well as pre-steps in the rewriting
            process. Set e.Cancel to true to stop rewriting from ocurring.
            </remarks>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteModuleBase.HttpRewroteToExternal">
      <summary>
            Raised after rewriting the request URL from internal to external
            </summary>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteModuleBase.HtmlAddingRewriteToExternalFilter">
      <summary>
            Raised before adding the the HTML rewrite-filter.
            </summary>
      <remarks>
            Extra validation can be performed here. Set e.Cancel to true to stop rewriting from ocurring.
            </remarks>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteModuleBase.HtmlAddedRewriteToExternalFilter">
      <summary>
            Raised after the HTML rewriting filter has been added.
            </summary>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.OnHttpRewriteInit(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteModuleBase.HttpRewriteInit" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.OnHttpRewritingToInternal(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteModuleBase.HttpRewritingToInternal" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.OnHttpRewroteToInternal(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteModuleBase.HttpRewroteToInternal" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.OnHttpRewritingToExternal(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteModuleBase.HttpRewritingToExternal" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.OnHttpRewroteToExternal(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteModuleBase.HttpRewroteToExternal" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.OnHtmlAddingRewriteToExternalFilter(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteModuleBase.HtmlAddingRewriteToExternalFilter" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.OnHtmlAddedRewriteToExternalFilter(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteModuleBase.HtmlAddedRewriteToExternalFilter" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteModuleBase.FURLRewriteResponse">
      <summary>
            Gets or sets a value indicating whether the response to the current request should 
            be processed for rewriting of internal links to friendly urls.
            </summary>
      <value>
        <c>true</c> if the response will be processed by UrlRewriteProvider.
            </value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteModuleBase.UrlInternal">
      <summary>
            Gets or sets the internal URL.
            </summary>
      <value>The internal URL</value>
      <remarks>
            Used together with UrlExternal to provide the necessary context for rewriting relative
            URL's and to make them relative after rewriting, if required.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteModuleBase.UrlExternal">
      <summary>
            Gets or sets the external URL.
            </summary>
      <value>The external URL</value>
      <remarks>
            Used together with UrlInternal to provide the necessary context for rewriting relative
            URL's and to make them relative after rewriting, if required.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.Dispose">
      <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"></see>.
            </summary>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.Init(System.Web.HttpApplication)">
      <summary>
            Called by the ASP.NET framework to initialize module
            </summary>
      <param name="application">
      </param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.BeginRequestEventHandler(System.Object,System.EventArgs)">
      <summary>
            The BeginRequest event handler.
            We should only handle Friendly URL rewrites here, and it depends on the authentication mechanism
            where we actually do it. This is a TODO...
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.EndRequestEventHandler(System.Object,System.EventArgs)">
      <summary>
            The EndRequest event handler
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.PostRequestHandlerExecuteEventHandler(System.Object,System.EventArgs)">
      <summary>
            Handles the PostRequestHandlerExecute event of the application. This is where we decide whether to
            hookup the rewrite filter for the output stream, based on MIME-type.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.HttpUrlRewriteToExternal(System.String,EPiServer.Web.RebaseKind)">
      <summary>
            Rewrite a request URL to external.
            </summary>
      <param name="url">The URL.</param>
      <param name="typeOfUrl">The type of rebasing to perform on the url.</param>
      <returns>The rewritten request URL</returns>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.HttpUrlRewriteToInternal(EPiServer.UrlBuilder)">
      <summary>
            Rewrite the URL to internal.
            </summary>
      <param name="url">The URL, possibly rewritten</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModuleBase.HtmlAddRewriteToExternalFilter(System.Web.HttpApplication)">
      <summary>
            Connect a filter for rewriting of outgoing HTML, and perform other actions before actually sending the HTML
            </summary>
      <param name="httpApplication">The HttpApplication instance</param>
    </member>
    <member name="T:EPiServer.Web.UrlRewriteProvider">
      <summary>
            Provide basic URL rewrite functionality, mapping to and from an internal format.
            </summary>
      <remarks>
            The mapping performed is context-free in the sense that it just maps from internal or to internal, it does
            not rebase relative URLs dependning on the internal and external requesting context URL.
            </remarks>
      <example>
        <para>
            Get a friendly URL for the given PageData object.
            Returns the friendly Url for the given PageData object.
            </para>
      </example>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteProvider.IsFurlEnabled">
      <summary>
            Indicates if FURL (Friendly url) is enabled.
            </summary>
      <value>
        <c>true</c> if FURL enabled; otherwise, <c>false</c>.
            </value>
      <remarks>
            This property will be set from UrlRewriteModuleBase when it is initialized.
            So if an httpModule that inherits from UrlRewriteModuleBase is registered as an httpModule this returns true
            otherwise false
            </remarks>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteProvider.Module">
      <summary>
            Get the UrlRewriteModule instance currently executing
            </summary>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteProvider.FriendlyUrlExtension">
      <summary>
            Gets the extension used for friendly URL generation.
            </summary>
      <value>The friendly URL extension.</value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteProvider.UrlPreventRewriteAttribute">
      <summary>
            Gets the attribute used for prevent rewriting of url:s.
            </summary>
      <value>The friendly URL extension.</value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteProvider.RootDir">
      <summary>
            Gets the absolute path to the EPiServer root directory.
            </summary>
      <value>The root dir.</value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteProvider.RebaseKind">
      <summary>
            Gets the kind of rebase to perform for URLs
            </summary>
      <value>The kind of rebase.</value>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteProvider.ConvertingToInternal">
      <summary>
            Raised just before we're about to convert.
            </summary>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteProvider.ConvertedToInternal">
      <summary>
            Raised when we've done the conversion.
            </summary>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteProvider.ConvertingToExternal">
      <summary>
            Raised just before we're about to convert.
            </summary>
    </member>
    <member name="E:EPiServer.Web.UrlRewriteProvider.ConvertedToExternal">
      <summary>
            Raised when we've done the conversion.
            </summary>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteProvider.Description">
      <summary>
            Gets a brief, friendly description suitable for display in administrative
            tools or other user interfaces (UIs).
            </summary>
      <value>
            A brief, friendly description suitable for display in administrative tools
            or other UIs.
            </value>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="config">
            A collection of the name/value pairs representing the provider-specific attributes
            specified in the configuration for this provider.
            </param>
      <param name="name">
            The friendly name of the provider.
            </param>
      <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
      <exception cref="T:System.InvalidOperationException">
            An attempt is made to call System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
            on a provider after the provider has already been initialized.
            </exception>
      <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.CreateInstance(System.Configuration.ProviderSettings)">
      <summary>
            Creates an Instance of the registered/configured UrlRewriteProvider. Before
            instance can be created Reflection API is used to determine if configured class meets the
            minimun requirements in semantics.
            </summary>
      <param name="providerSettings">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.ClearExcludedPaths">
      <summary>
            Clears the excluded paths information.
            </summary>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.IsExcludedPath(System.String)">
      <summary>
            Determines whether the specified path is a path excluded from URL rewriting.
            </summary>
      <param name="path">The path.</param>
      <returns>
        <c>true</c> if the specified path is a path excluded from URL rewriting; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.AddExcludedPath(System.String)">
      <summary>
            Adds a path to the excluded list.
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteProvider.ExcludedPaths">
      <summary>
            Gets a list of all the excluded paths.
            </summary>
      <value>The excluded paths.</value>
    </member>
    <member name="P:EPiServer.Web.UrlRewriteProvider.PermanentLinkMapper">
      <summary>
            Gets or sets the permanent link mapper to use.
            </summary>
      <value>The permanent link mapper.</value>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.ConvertToInternal(EPiServer.UrlBuilder,System.Object@)">
      <summary>
            Converts to internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            There is no support for changing encoding when converting to internal, since there is no requirement for this.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.TryConvertToInternal(EPiServer.UrlBuilder,System.Globalization.CultureInfo@,System.Object@)">
      <summary>
            Converts to internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="preferredCulture">The preferred culture.</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            There is no support for changing encoding when converting to internal, since there is no requirement for this.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.TryConvertPermanentLink(EPiServer.UrlBuilder,EPiServer.Core.ContentReference@)">
      <summary>
            Tries to convert a link as a guid based link (permanent link).
            </summary>
      <param name="url">The URL.</param>
      <param name="contentLink">The page link. If the permanent link references a page, then the page reference is returned.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.ConvertToInternal(EPiServer.UrlBuilder)">
      <summary>
            Converts to internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <returns>true if any modifications were made</returns>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.ValidateRewriteToInternal(EPiServer.Web.UrlRewriteEventArgs,System.String)">
      <summary>
            Validates if the url should berewritten to internal format.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
      <param name="basePath">The base path.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.ValidateRewriteToExternal(EPiServer.Web.UrlRewriteEventArgs,System.String)">
      <summary>
            Validates if the url should be rewritten to external format.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
      <param name="basePath">The base path.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.ConvertToExternal(EPiServer.UrlBuilder,System.Object,System.Text.Encoding,System.Boolean)">
      <summary>
            Converts from internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL to possibly convert</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <param name="toEncoding">The current encoding</param>
      <param name="forceIsInEditMode">if set to <c>true</c> [force is in edit mode].</param>
      <returns>
            true if any modifications were made
            </returns>
      <remarks>
            When converting to external, we may need to change the encoding used for escaped characters in the URL to conform
            to response encoding requirements which may differ from the internally stored format - which should always be UTF-8.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.ConvertToExternal(EPiServer.UrlBuilder,System.Object,System.Text.Encoding)">
      <summary>
            Converts from internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL to possibly convert</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <param name="toEncoding">The current encoding</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            When converting to external, we may need to change the encoding used for escaped characters in the URL to conform
            to response encoding requirements which may differ from the internally stored format - which should always be UTF-8.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.GetHtmlRewriter">
      <summary>
            Gets an instance of a HTML-rewriter to use when emitting HTML from EPiServer.
            </summary>
      <returns>A new instance of a HtmlRewriteToExternal-derived class</returns>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.OnConvertingToInternal(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteProvider.ConvertingToInternal" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.OnConvertedToInternal(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteProvider.ConvertedToInternal" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.OnConvertingToExternal(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteProvider.ConvertingToExternal" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteProvider.OnConvertedToExternal(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.UrlRewriteProvider.ConvertedToExternal" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Web.VisitorGroupHelpers">
      <summary>
                Contains useful methods when working with the visitor group system.
            </summary>
    </member>
    <member name="F:EPiServer.Web.VisitorGroupHelpers.ImpersonatedVisitorGroupByName">
      <summary>
            Key to httpContext Items to get array of impersonated groups name for current request
            </summary>
    </member>
    <member name="F:EPiServer.Web.VisitorGroupHelpers.ImpersonatedVisitorGroupByID">
      <summary>
            Key to httpContext Items to get array of impersonated groups id for current request
            </summary>
    </member>
    <member name="F:EPiServer.Web.VisitorGroupHelpers.VisitorGroupKeyByName">
      <summary>
            Query string key to set impersonation to visitor groups by name
            </summary>
    </member>
    <member name="F:EPiServer.Web.VisitorGroupHelpers.VisitorGroupKeyByID">
      <summary>
            Internally used key to determine visitor groups id
            </summary>
    </member>
    <member name="M:EPiServer.Web.VisitorGroupHelpers.SetupVisitorGroupImpersonation(System.Web.HttpContextBase,EPiServer.Core.PageData,EPiServer.Security.AccessLevel)">
      <summary>Checks if any visitor group impersonation has been requested, and sets the needed information.</summary>
      <param name="httpContext">The context of the current request.</param>
      <param name="pageData">A page used to get the access level for the current user.</param>
      <param name="requiredAccess">The access level needed to perform the impersonation.</param>
      <returns>
        <c>true</c> if impersonation was done; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Web.VisitorGroupHelpers.SetupVisitorGroupImpersonation(System.Web.HttpContextBase,EPiServer.Core.IContent,EPiServer.Security.AccessLevel)">
      <summary>
            Setups the visitor group impersonation.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="content">The content.</param>
      <param name="requiredAccess">The required access.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.AlternateLinks">
      <summary>
            WebControl creating alternate link elements for multilingual content to be used in the html header.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.AlternateLinks.Render(System.Web.UI.HtmlTextWriter)">
      <summary> 
            Render this control to the output parameter specified.
            </summary>
      <param name="output"> The HTML writer to write out to </param>
    </member>
    <member name="T:EPiServer.Web.WebControls.CanonicalLink">
      <summary>
            WebControl creating a canonical link to be used in the html header.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.CanonicalLink.Render(System.Web.UI.HtmlTextWriter)">
      <summary> 
            Render this control to the output parameter specified.
            </summary>
      <param name="output"> The HTML writer to write out to </param>
    </member>
    <member name="T:EPiServer.Web.WebControls.CategoryHierarchicalEnumerable">
      <summary>
            Represents a hierarchical enumarable representation of categories
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.CategoryHierarchicalEnumerable.Categories">
      <summary>
            Gets the categories.
            </summary>
      <value>The categories.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.CategoryHierarchicalEnumerable.#ctor(EPiServer.DataAbstraction.CategoryCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.CategoryHierarchicalEnumerable" /> class.
            </summary>
      <param name="categories">The categories.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.CategoryHierarchicalEnumerable.GetHierarchyData(System.Object)">
      <summary>
            Returns a hierarchical data item for the specified enumerated item.
            </summary>
      <param name="enumeratedItem">The <see cref="T:System.Object"></see> for which to return an <see cref="T:System.Web.UI.IHierarchyData"></see>.</param>
      <returns>
            An <see cref="T:System.Web.UI.IHierarchyData"></see> instance that represents the <see cref="T:System.Object"></see> passed to the <see cref="M:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData(System.Object)"></see> method.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.CategoryHierarchicalEnumerable.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.CategoryHierarchyData">
      <summary>
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.CategoryHierarchyData.Category">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.CategoryHierarchyData.#ctor(EPiServer.DataAbstraction.Category)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.CategoryHierarchyData.Children">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.CategoryHierarchyData.Parent">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.CategoryHierarchyData.GetChildren">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.CategoryHierarchyData.GetParent">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.CategoryHierarchyData.HasChildren">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.CategoryHierarchyData.Item">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.CategoryHierarchyData.Path">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.CategoryHierarchyData.Type">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.ContentRenderer">
      <summary>
            Webcontrol for BlockData. The control with create a child control with the selected render for the block type.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.CustomTagName">
      <summary>
            Gets or sets the tag name. If not set a div-tag will be used. 
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.RenderType">
      <summary>
            Sets the RenderType for the <see cref="T:EPiServer.Web.WebControls.ContentRenderer" />.
            </summary>
      <value>A RenderType that is used to specify how the <see cref="T:EPiServer.Web.WebControls.ContentRenderer" /> should be rendered.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.ContentRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.ContentRenderer" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.ContentRenderer.DataBind">
      <summary>
            Binds a data source to the <see cref="T:EPiServer.Web.WebControls.ContentRenderer" /> and all its child controls.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.LocalizationService">
      <summary>
            Gets or sets the localization service.
            </summary>
      <value>The localization service.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.CurrentControl">
      <summary>
            Gets or sets the block, which will be rendered.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.CurrentData">
      <summary>
            Gets or sets the block, which will be rendered.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.ContentAreaItem">
      <summary>
            Gets or sets the content area item.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.RenderSettings">
      <summary>
            Gets or sets the render settings that should be passed on to the content template.
            </summary>
      <remarks>
            Note that the <see cref="P:Tag" /> property must be used to affect the template selection
            even if the <see cref="P:RenderSettings" /> dictionary contains a Tag or DisplayOptions (with Tag) entry. 
            </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.CurrentContent">
      <summary>
            Gets or sets the current content.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.Tag">
      <summary>
            Gets or sets the current tag.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.IsCircularReference">
      <summary>
            Gets or sets a value indicating whether the CurrentControl is in a chain with circular references.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.TemplateControlLoader">
      <summary>
            Gets or sets the template control loader, which will be used to find the correct controller for rendering the block.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.TemplateControlLoaderService">
      <summary>
            Gets or sets the template control loader, which will be used to find the correct controller for rendering the block.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ContentRenderer.AttributeAssembler">
      <summary>
            The attribute assembler
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.ContentRenderer.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
      <summary>
            Renders the HTML opening tag of the control to the specified writer if there is a current control available or if in edit mode.
            </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client. </param>
    </member>
    <member name="M:EPiServer.Web.WebControls.ContentRenderer.RenderEndTag(System.Web.UI.HtmlTextWriter)">
      <summary>
            Renders the HTML closing tag of the control into the specified writer if there is a current control available or if in edit mode.
            </summary>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client. </param>
    </member>
    <member name="M:EPiServer.Web.WebControls.ContentRenderer.CreateChildControls">
      <summary>
        <para>The <see cref="P:EPiServer.Web.WebControls.ContentRenderer.TemplateControlLoader" /> will try to resolve the block control, which will be added to control collection.</para>
      </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.ContentRenderer.Get``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.IContent" /> object with information about a content, based on the
            <see cref="T:EPiServer.Core.ContentReference" /> parameter.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">Reference to the content being retrieved</param>
      <returns>
            IContent object requested
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.ContentRenderer.GetChildren``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieve a <see cref="T:EPiServer.Core.IContent" /> listing
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">Reference to parent content</param>
      <returns>
            Returns a collection of IContent directly below the content referenced by
            the <see cref="T:EPiServer.Core.ContentReference" /> parameter.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.ContentRenderer.EnsureChildControlsCreated">
      <summary>
            Ensures that the child controls have been created, or create them.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.ControlLoader">
      <summary>
            Load a user control using an Url expression like "~/edit/FileManagement.ascx".
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.ControlLoader.OnInit(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.ControlLoader.Src">
      <summary>
            Gets or sets the source of the user control to load.
             </summary>
      <example>
        <para>
             The following are all valid values for Src:
             </para>
        <code>
             "foo.ascx"
             "app/controls/foo.ascx"
             "~/edit/foo.ascx"
             </code>
      </example>
    </member>
    <member name="P:EPiServer.Web.WebControls.ControlLoader.InnerControl">
      <summary>
            The usercontrol that was loaded by this webcontrol.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.ControlLoader.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
      <summary>
            Renders the HTML opening tag of the control to the specified writer. This method is used primarily by control developers.
            </summary>
      <remarks>The implemenation does not render any begin tag</remarks>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.ControlLoader.RenderEndTag(System.Web.UI.HtmlTextWriter)">
      <summary>
            Renders the HTML closing tag of the control into the specified writer. This method is used primarily by control developers.
            </summary>
      <remarks>The implemenation does not render any end tag</remarks>
      <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> that represents the output stream to render HTML content on the client.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.DataSourceHelper">
      <summary>
            Utility for implementing Data Source Controls.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.DataSourceHelper.TYPE">
      <summary>
            Type column name
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Web.WebControls.DataSourceHelper.TAB">
      <summary>
            Tab column name
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.GetAccessor(System.Type,System.String)">
      <summary>
            Gets the AccessorInfo for the property with name propertyName for type
            </summary>
      <param name="type">The type.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>AccessorInfo.Empty if type doesn't have given property</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.GetAccessors(System.Type)">
      <summary>
            Gets all property accessors for a type
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.SetProperty(System.Object,System.String,System.Object)">
      <summary>
            Sets a property on an object
            </summary>
      <param name="target">The target object</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <remarks>throws exception if property does not exist</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.SetProperty(System.Object,System.String,System.Object,System.Boolean)">
      <summary>
            Sets a property on an object
            </summary>
      <param name="target">The target.</param>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <param name="throwOnPropertyNotFound">if set to <c>true</c> [throw on property not found].</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.GetProperty(System.Object,System.String)">
      <summary>
            Gets a property value for an object
            </summary>
      <param name="target">The target.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>property value</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.SetProperties(System.Collections.IDictionary,System.Object,System.Boolean)">
      <summary>
            Sets properties on an object
            </summary>
      <param name="values">The values.</param>
      <param name="target">The target.</param>
      <param name="throwOnPropertyNotFound">if set to <c>true</c> [throw on property not found].</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.SetProperties(System.Collections.IDictionary,System.Object)">
      <summary>
            Sets properties on an object
            </summary>
      <param name="values">The values.</param>
      <param name="target">The target.</param>
      <remarks>Throws exception if property doesnot exist on object</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.Match(System.Object,System.Collections.Specialized.IOrderedDictionary)">
      <summary>
            Checks wether some property in parameters differs from properties on item
            </summary>
      <param name="item">The item.</param>
      <param name="parameters">The parameters.</param>
      <returns>true if all property values on item matches values in parameters, else false</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.MergeDictionaries(System.Collections.IDictionary,System.Collections.IDictionary)">
      <summary>
            Merges two dictionaries.
            </summary>
      <param name="source">The source.</param>
      <param name="destination">The destination.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.ConvertToBool(System.Object)">
      <summary>
            Converts object to bool.
            </summary>
      <param name="value">The value.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">If conversion fails</exception>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.ConvertToInt(System.Object)">
      <summary>
            Converts to int.
            </summary>
      <param name="value">The value.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">If conversion fails</exception>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.TryConvertInt(System.Object,System.Int32@)">
      <summary>
            Tries to convert object to int
            </summary>
      <param name="value">The value.</param>
      <param name="id">The id.</param>
      <returns>true if conversion succeeds else false</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.ConvertToPageReference(System.Object)">
      <summary>
            Converts object to page reference.
            </summary>
      <param name="o">The o.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">If conversion fails</exception>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.ConvertToContentReference(System.Object)">
      <summary>
            Converts object to content reference.
            </summary>
      <param name="o">The o.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">If conversion fails</exception>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.ConvertToEnum(System.Object,System.Type)">
      <summary>
            Converts object to enum.
            </summary>
      <param name="o">The o.</param>
      <param name="type">The type.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">If conversion fails</exception>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.ConvertToGuid(System.Object)">
      <summary>
            Converts object to GUID.
            </summary>
      <param name="o">The o.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">If conversion fails</exception>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.ConvertToType(System.Object)">
      <summary>
            Converts objetc to Type.
            </summary>
      <param name="o">The o.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">If conversion fails</exception>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.LoadPageDefinitionType(System.Collections.IDictionary)">
      <summary>
            Method to assure that if Type or PageDefinitionTypeId is present in dictionary then try assure Type is of type
            PageDefinitionType. 
            </summary>
      <param name="values">
      </param>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceHelper.LoadTabDefinition(System.Collections.IDictionary)">
      <summary>
            Method to assure that if Tab or TabDefinitionId is present in dictionary then try assure Tab is of type
            TabDefinition. 
            </summary>
      <param name="values">
      </param>
    </member>
    <member name="T:EPiServer.Web.WebControls.AccessorInfo">
      <summary>
            Represents a property on an object
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.AccessorInfo.Empty">
      <summary>
            If Property is not existing on object
            </summary>
      <value>The empty.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.AccessorInfo.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.AccessorInfo.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.AccessorInfo.op_Equality(EPiServer.Web.WebControls.AccessorInfo,EPiServer.Web.WebControls.AccessorInfo)">
      <summary>
            Operator ==s the specified x.
            </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.AccessorInfo.op_Inequality(EPiServer.Web.WebControls.AccessorInfo,EPiServer.Web.WebControls.AccessorInfo)">
      <summary>
            Operator !=s the specified x.
            </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.AccessorInfo.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj.
            </returns>
      <exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception>
    </member>
    <member name="T:EPiServer.Web.WebControls.DataSourceMethodEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Selecting" />, <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Updating" />, <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Inserting" />, or <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Deleting" /> event of the <see cref="T:EPiServer.Web.WebControls.GenericDataSource`3" /> control.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.DataSourceMethodEventArgs">
      <summary>
            Provides data for the <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Inserting" />, <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Updating" />, and <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Deleting" /> events of the <see cref="T:EPiServer.Web.WebControls.GenericDataSource`3" /> control.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceMethodEventArgs.#ctor(System.Collections.IDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.DataSourceMethodEventArgs" /> class using the specified input parameters collection.
            </summary>
      <param name="inputParameters">An <see cref="T:System.Collections.IDictionary" /> of Parameter objects that represent the names of the parameters of the object method and their associated values.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.DataSourceMethodEventArgs.InputParameters">
      <summary>
            Gets a collection that contains object method parameters and their values.
            </summary>
      <value>An <see cref="T:System.Collections.IDictionary" /> of name/value pairs that represent the object method parameters and their corresponding values.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.DataSourceSelectEventArgs">
      <summary>
            Arguments to event that occurs when Select is called on a DataSource control.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.DataSourceSelectEventArgs.Arguments">
      <summary>
            Gets or sets the arguments for the Select that is to be executed
            </summary>
      <value>The arguments.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceSelectEventArgs.#ctor(System.Web.UI.DataSourceSelectArguments)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.DataSourceSelectEventArgs" /> class.
            </summary>
      <param name="arguments">The arguments passed to select statement</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.DataSourceStatusEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Selected" />, <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Updated" />, <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Inserted" />, or <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Deleted" /> event of the <see cref="T:EPiServer.Web.WebControls.GenericDataSource`3" /> control.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.DataSourceStatusEventArgs">
      <summary>
            Provides data for the <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Selected" />, <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Inserted" />, <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Updated" />, and <see cref="E:EPiServer.Web.WebControls.GenericDataSource`3.Deleted" /> events of the <see cref="T:EPiServer.Web.WebControls.GenericDataSource`3" /> control.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceStatusEventArgs.#ctor(System.Collections.IDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.DataSourceStatusEventArgs" /> class using the specified output parameters.
            </summary>
      <param name="outputParameters">An <see cref="T:System.Collections.IDictionary" /> of name/value pairs of parameter objects.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.DataSourceStatusEventArgs.#ctor(System.Collections.IDictionary,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.DataSourceStatusEventArgs" /> class using the specified output parameters and exception.
            </summary>
      <param name="outputParameters">An <see cref="T:System.Collections.IDictionary" /> of name/value pairs of parameter objects.</param>
      <param name="exception">An <see cref="T:System.Exception" /> that wraps any internal exceptions thrown during the method call.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.DataSourceStatusEventArgs.AffectedRows">
      <summary>
            Gets or sets the number of rows that are affected by the data operation.
            </summary>
      <value>The number of rows affected by the data operation.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.DataSourceStatusEventArgs.Exception">
      <summary>
            Gets a wrapper for any exceptions that are thrown by the method that is called by the <see cref="T:EPiServer.Web.WebControls.GenericDataSource`3" /> control during a data operation.
            </summary>
      <value>An <see cref="T:System.Exception" /> that wraps any exceptions thrown by the business object in its <see cref="P:System.Exception.InnerException" />.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.DataSourceStatusEventArgs.ExceptionHandled">
      <summary>
            Gets or sets a value indicating whether an exception that was thrown by the business object has been handled.
            </summary>
      <value>true if an exception thrown by the business object has been handled and should not be thrown by the <see cref="T:EPiServer.Web.WebControls.GenericDataSource`3" />; otherwise, false.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.DataSourceStatusEventArgs.OutputParameters">
      <summary>
            Gets a collection that contains business object method parameters and their values.
            </summary>
      <value>An <see cref="T:System.Collections.IDictionary" /> of name/value pairs that represent the business object method parameters and their corresponding values.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.DayTemplateContainer">
      <summary>
            Template for a rendering information about a single day
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.DayTemplateContainer.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of <see cref="T:EPiServer.Web.WebControls.DayTemplateContainer" /></summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.DayTemplateContainer.#ctor(System.DateTime,EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.DayTemplateContainer" /> class.
            </summary>
      <param name="date">The date.</param>
      <param name="localizationService">The resource locator.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.DayTemplateContainer.MonthName">
      <summary>
            String representation of current month name.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.DayTemplateContainer.Date">
      <summary>
            Current date.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.DayTemplateContainer.DayName">
      <summary>
            String representation of current week day name.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.DayTemplateContainer.DayOfMonth">
      <summary>
            Current day in month.
            </summary>
      <value>Any number from 1 to 31</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.DayTemplateContainer.ShortDate">
      <summary>
            Short string representation of current date.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.EPiServerValidator">
      <summary>
            A server-side validator control that validates values for EPiServer controls. 
            </summary>
      <remarks>
            This validator can be used if you need to input data for controls derived from 
            <see cref="T:EPiServer.Core.PropertyData" />, and you are not using a PropertyDataForm. 
            </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.EPiServerValidator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.EPiServerValidator" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.EPiServerValidator.#ctor(System.String,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.EPiServerValidator" /> class.
            </summary>
      <param name="controlID">The control ID.</param>
      <param name="controlType">Type of the control.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.EPiServerValidator.#ctor(System.String,System.Type,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.EPiServerValidator" /> class.
            </summary>
      <param name="controlID">The control ID.</param>
      <param name="controlType">Type of the control.</param>
      <param name="isRequired">if set to <c>true</c> [is required].</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.EPiServerValidator.AddValidator(System.Web.UI.WebControls.WebControl,System.Type)">
      <summary>
            Adds an EPiServerValidator to a control
            </summary>
      <param name="control">The control.</param>
      <param name="controlType">Type of the control.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.EPiServerValidator.AddRequiredValidator(System.Web.UI.WebControls.WebControl,System.Type)">
      <summary>
            Adds the EPiServerValidator as a required validator.
            </summary>
      <param name="control">The control.</param>
      <param name="controlType">Type of the control.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.EPiServerValidator.PropertyType">
      <summary>
            Gets or sets the type of the control
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.EPiServerValidator.IsRequired">
      <summary>
            Gets or sets a value indicating whether this validator instance is of type required.
            </summary>
      <value>
        <c>true</c> if this instance is required; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.EPiServerValidator.DisplayName">
      <summary>
            Gets or sets the display name.
            </summary>
      <value>The display name.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.EPiServerValidator.EvaluateIsValid">
      <summary>
            Overrides the <see cref="M:System.Web.UI.MobileControls.BaseValidator.EvaluateIsValid"></see> method.
            </summary>
      <returns>
            true if the value in the input control is valid; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.EPiServerValidator.ParseValidation(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
      <summary>
            Tries to parse the value as a PropertyData. If parsing is successful validation passes.
            </summary>
      <param name="source">The source.</param>
      <param name="args">The <see cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.FormFieldStatistic">
      <summary>
            Helper class to keep track of information for a form field.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.FormFieldStatistic.#ctor(System.String)">
      <summary>
            Constructor for a field.
            </summary>
      <param name="fieldName">Name of field in form.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.FormFieldStatistic.AddVote(System.String)">
      <summary>
            Add a field value. Will aggregate identical answers with a counter.
            </summary>
      <param name="voteValue">The string value of the field.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.FormFieldStatistic.AddEmptyVote(System.String)">
      <summary>
            Adds an "empty" vote in order to show an alternative that has not got any votes.
            </summary>
      <param name="voteValue">The string value of the field.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.FormFieldStatistic.FieldName">
      <summary>
            The name of the field.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.FormFieldStatistic.Votes">
      <summary>
            Gets the votes.
            </summary>
      <value>The votes.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.GenericDataSource`3">
      <summary>
            Generic implementation of a DataSourceControl
            </summary>
      <typeparam name="TObject">Business object type</typeparam>
      <typeparam name="TCollection">Business object collection type</typeparam>
      <typeparam name="TKey">Business object primary key type</typeparam>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.SelectParameters">
      <summary>
            Gets the parameters collection that contains the parameters that are used when selecting tabDefinition.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.InsertParameters">
      <summary>
            Gets the parameters collection that contains the parameters that are used when inserting tabDefinition.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.UpdateParameters">
      <summary>
            Gets the parameters collection that contains the parameters that are used when updating tabDefinition.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.DeleteParameters">
      <summary>
            Gets the parameters collection that contains the parameters that are used when deleting tabDefinition.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.ParameterValues">
      <summary>
            Contains the parameters for operations
            </summary>
      <value>The parameter values.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.Method">
      <summary>
            Gets or sets the method to be used
            </summary>
      <value>The method.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.InsertItem">
      <summary>
            Gets the instance that will be inserted in a GridView insertion.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.InsertIndex">
      <summary>
            Gets or sets an index to be used as position for insertion of a new instance in a GridView insertion. Setting this property to anything other than -1 will set the data source in insertion state. The insertion state terminates when Update is performed on the data source or when this property is set to -1 explicitly.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.KeyName">
      <summary>
            Gets the name of the instance field that will be used as the primary key. Override this property to return a name that differs from the default primary key name "ID".
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.CreateItem(System.Collections.Generic.List{`0})">
      <summary>
            Override to provide new instance of the business object.
            </summary>
      <param name="items">the list of current instances in the given scope.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.ListItems">
      <summary>
            Override to return a list of instances.
            </summary>
      <returns> a list of instances.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.LoadItem(`2)">
      <summary>
            Override to load an item with the specified key.
            </summary>
      <param name="key">The key of the instance to load.</param>
      <returns>A object instance.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.SaveItem(`0)">
      <summary>
            Override to handle persisting of an item.
            </summary>
      <param name="item">The item to persist.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.DeleteItem(`0)">
      <summary>
            Override to handle deletion of an item.
            </summary>
      <param name="item">The item to delete.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.IsValid(`0,System.String@)">
      <summary>
            When overridden, provides validation of an item. 
            </summary>
      <param name="item">the item to validate.</param>
      <param name="message">set this parameter to provide a information about why validation failed.</param>
      <returns>true when the item is valid, otherwise false.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.ValidateItem(`0)">
      <summary>
            Asserts that the state of an item is valid.
            </summary>
      <param name="item">The item to validate.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.SetupParameters(System.Collections.IDictionary)">
      <summary>
            When overriden, provides ways to manipulate the parameter dictionary used for setting up the state of instance prior to saving it.
            </summary>
      <param name="values">Dictionary of properties to be used for setting the state of an instance.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.CanUpdate">
      <summary>
            Gets a value indicating whether a DataSource supports instance updates.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.CanDelete">
      <summary>
            Gets a value indicating whether a DataSource supports instance deletion.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.CanInsert">
      <summary>
            Gets a value indicating whether a DataSource supports instance inserts.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.OnInit(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"></see> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSource`3.Deleting">
      <summary>
            Occurs when an item is about to be deleted
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSource`3.Deleted">
      <summary>
            Occurs when an item was deleted
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSource`3.Inserting">
      <summary>
            Occurs when an item is about to be inserted
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSource`3.Inserted">
      <summary>
            Occurs when an item was inserted
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSource`3.Selecting">
      <summary>
            Occurs when a select is about to be executed
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSource`3.Selected">
      <summary>
            Occurs when a select was executed
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSource`3.Updating">
      <summary>
            Occurs when an item is about to be updated
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSource`3.Updated">
      <summary>
            Occurs when an item was updated
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.GetView(System.String)">
      <summary>
            Returns the view corresponding to given name, only supported view is DefaultView.
            </summary>
      <param name="viewName">The name of the view</param>
      <returns>The corresponding DataSourceView</returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSource`3.View">
      <summary>
            Gets the current data source view for the data source.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.Select(System.Web.UI.DataSourceSelectArguments)">
      <summary>
            Called by the GenericDataSouceView to retreive an enumeration of instances. Override this method to extend the functionality e.g. paging support.
            </summary>
      <param name="arguments">arguments specifying the query</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.Delete(System.Collections.IDictionary)">
      <summary>
            Called by the GenericDataSourceView when the bound control has requested a deletion of an instance.
            </summary>
      <param name="values">The parameters that specifies the instance to delete.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.Insert(System.Collections.IDictionary)">
      <summary>
            Called by the GenericDataSourceView when the bound control has requested to insert a new instance.
            </summary>
      <param name="values">The parameters that specifies</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.Update(System.Collections.IDictionary)">
      <summary>
            Called by the GenericDataSourceView when the bound control has requested an update of an instance.
            </summary>
      <param name="values">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.GetItem(System.Boolean)">
      <summary>
            Retreives an item specified by the ParameterValues collection or the InsertItem if present.
            </summary>
      <param name="required">Specifies that failing to retreive an item based on the ParameterValues should be treated as an error.</param>
      <returns>An object instance.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.Convert(System.Object)">
      <summary>
            Attempts to perform a conversion to the type of the primary key.
            </summary>
      <param name="o">The object to convert.</param>
      <returns>A key type object.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.ToList(`1)">
      <summary>
            Converts a strongly typed collection to a generic list
            </summary>
      <param name="collection">The collection to convert</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSource`3.ToCollection(System.Collections.Generic.List{`0})">
      <summary>
            Converts a generic list to a strongly typed collection
            </summary>
      <param name="list">The list to convert</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.DataSourceMethod">
      <summary>
            Enumeration for describing the different data source methods.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.DataSourceMethod.Select">
      <summary>
            Denotes a DataSource Select operation.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.DataSourceMethod.Insert">
      <summary>
            Denotes a DataSource Insert operation.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.DataSourceMethod.Update">
      <summary>
            Denotes a DataSource Update operation.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.DataSourceMethod.Delete">
      <summary>
            Denotes a DataSource Delete operation.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.GenericDataSourceView`1">
      <summary>
            Base class for EPiServer DataSource controls.
            </summary>
      <remarks>
            ViewState will contain an object array "o" with length 4. The elements will serve the different parameter collections
            o[0] - SelectParameters
            o[1] - InsertParameters
            o[2] - UpdateParameters
            o[3] - DeleteParameters
            </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.#ctor(System.Web.UI.IDataSource,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.GenericDataSourceView`1" /> class.
            </summary>
      <param name="dataSource">The data source.</param>
      <param name="viewName">Name of the view.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.#ctor(System.Web.UI.IDataSource,System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.GenericDataSourceView`1" /> class.
            </summary>
      <param name="dataSource">The data source.</param>
      <param name="viewName">Name of the view.</param>
      <param name="canUpdate">if set to <c>true</c> update is supported.</param>
      <param name="canDelete">if set to <c>true</c> delete is supported.</param>
      <param name="canInsert">if set to <c>true</c> insert is supported.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.#ctor(System.Web.UI.IDataSource,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.GenericDataSourceView`1" /> class.
            </summary>
      <param name="dataSource">The data source.</param>
      <param name="viewName">Name of the view.</param>
      <param name="canUpdate">if set to <c>true</c> update is supported.</param>
      <param name="canDelete">if set to <c>true</c> delete is supported.</param>
      <param name="canInsert">if set to <c>true</c> insert is supported.</param>
      <param name="canPage">if set to <c>true</c> paging is supported.</param>
      <param name="canRetrieveTotalCount">if set to <c>true</c> retrieving total count supported.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSourceView`1.SelectParameters">
      <summary>
            Gets the parameters that will be used for select operations.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSourceView`1.InsertParameters">
      <summary>
            Gets the parameters that will be used for insert operations.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSourceView`1.UpdateParameters">
      <summary>
            Gets the parameters that will be used for updated operations.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSourceView`1.DeleteParameters">
      <summary>
            Gets the parameters that will be used for delete operations.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.LoadViewState(System.Object)">
      <summary>
            Loads data from view state.
            </summary>
      <param name="savedState">The view state object.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.SaveViewState">
      <summary>
            Saves changes to the <see cref="T:EPiServer.Web.WebControls.GenericDataSourceView`1" /> to an <see cref="T:System.Object" /> for storing in the associated control's ViewState.
            </summary>
      <returns>
            The <see cref="T:System.Object" /> that contains the view state changes.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.TrackViewState">
      <summary>
            Instructs the <see cref="T:EPiServer.Web.WebControls.GenericDataSourceView`1" /> to track changes to its view state.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSourceView`1.CanDelete">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView" /> object associated with the current <see cref="T:System.Web.UI.DataSourceControl" /> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" /> operation.
            </summary>
      <value>
      </value>
      <returns>true if the operation is supported; otherwise, false. The base class implementation returns false.
            </returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSourceView`1.CanInsert">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView" /> object associated with the current <see cref="T:System.Web.UI.DataSourceControl" /> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)" /> operation.
            </summary>
      <value>
      </value>
      <returns>true if the operation is supported; otherwise, false. The base class implementation returns false.
            </returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSourceView`1.CanUpdate">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView" /> object associated with the current <see cref="T:System.Web.UI.DataSourceControl" /> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" /> operation.
            </summary>
      <value>
      </value>
      <returns>true if the operation is supported; otherwise, false. The default implementation returns false.
            </returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSourceView`1.CanPage">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView" /> object associated with the current <see cref="T:System.Web.UI.DataSourceControl" /> object supports paging through the data retrieved by the <see cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> method.
            </summary>
      <value>
      </value>
      <returns>true if the operation is supported; otherwise, false. The base class implementation returns false.
            </returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.GenericDataSourceView`1.CanRetrieveTotalRowCount">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView" /> object associated with the current <see cref="T:System.Web.UI.DataSourceControl" /> object supports retrieving the total number of data rows, instead of the data.
            </summary>
      <value>
      </value>
      <returns>true if the operation is supported; otherwise, false. The base class implementation returns false.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)">
      <summary>
            Selects items according to given DataSource implementation
            </summary>
      <param name="arguments">select arguments</param>
      <returns>Collection of items</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)">
      <summary>
            Deletes items according to given DataSource implementation
            </summary>
      <param name="keys">keys</param>
      <param name="oldValues">old values</param>
      <returns>number of deleted items</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.ExecuteInsert(System.Collections.IDictionary)">
      <summary>
            Inserts items according to given DataSource implementation
            </summary>
      <param name="values">values</param>
      <returns>number of inserted items</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)">
      <summary>
            Updates items according to given DataSource implementation
            </summary>
      <param name="keys">keys</param>
      <param name="values">values</param>
      <param name="oldValues">oldValues</param>
      <returns>number of updated records</returns>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Deleting">
      <summary>
            Occurs before a <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" /> operation.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Deleted">
      <summary>
            Occurs when a <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)" /> operation has completed.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Inserting">
      <summary>
            Occurs before a <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)" /> operation.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Inserted">
      <summary>
            Occurs when a <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)" /> operation has completed.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Selecting">
      <summary>
            Occurs before a <see cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> operation.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Selected">
      <summary>
            Occurs when a <see cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)" /> operation has completed.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Updating">
      <summary>
            Occurs before a <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" /> operation.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Updated">
      <summary>
            Occurs when a <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" /> operation has completed.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.OnEventOccurring(EPiServer.Web.WebControls.DataSourceMethodEventArgs,System.Object)">
      <summary>
            Raises an event notifying that an operation is occuring. The operation is specified by the eventKey which is one of the following.
            <list type="bulleted"><item><see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Deleting" /></item><item><see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Inserting" /></item><item><see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Selecting" /></item><item><see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Updating" /></item></list></summary>
      <param name="e">The <see cref="T:EPiServer.Web.WebControls.DataSourceMethodEventArgs" /> instance containing the event data.</param>
      <param name="eventKey">The event key.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.OnEventOccurred(EPiServer.Web.WebControls.DataSourceStatusEventArgs,System.Object)">
      <summary>
            Raises an event notifying that an operation has occurred. The operation is specified by the eventKey which is one of the following.
            <list type="bulleted"><item><see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Deleted" /></item><item><see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Inserted" /></item><item><see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Selected" /></item><item><see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Updated" /></item></list></summary>
      <param name="e">The <see cref="T:EPiServer.Web.WebControls.DataSourceStatusEventArgs" /> instance containing the event data.</param>
      <param name="eventKey">The event key.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.OnDeleting(EPiServer.Web.WebControls.DataSourceMethodEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Deleting" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.WebControls.DataSourceMethodEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.OnDeleted(EPiServer.Web.WebControls.DataSourceStatusEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Deleted" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.WebControls.DataSourceStatusEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.OnInserting(EPiServer.Web.WebControls.DataSourceMethodEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Inserting" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.WebControls.DataSourceMethodEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.OnInserted(EPiServer.Web.WebControls.DataSourceStatusEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Inserted" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.WebControls.DataSourceStatusEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.OnSelecting(EPiServer.Web.WebControls.DataSourceMethodEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Selecting" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.WebControls.DataSourceMethodEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.OnSelected(EPiServer.Web.WebControls.DataSourceStatusEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Selected" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.WebControls.DataSourceStatusEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.OnUpdating(EPiServer.Web.WebControls.DataSourceMethodEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Updating" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.WebControls.DataSourceMethodEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.GenericDataSourceView`1.OnUpdated(EPiServer.Web.WebControls.DataSourceStatusEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.Web.WebControls.GenericDataSourceView`1.Updated" /> event.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.WebControls.DataSourceStatusEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.HierarchicalPageLoader">
      <summary>
            Serves as a support class for loading hierarchical page structures. This class is used in Hierarchical controls like PageTreeData deriving classes and PageDataSource classes.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.HierarchicalPageLoader.Filter">
      <summary>
            Occurs when child page data has been loaded. Typically you attach an eventhandler to this event in order to exclude part of the result or sort the result.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.HierarchicalPageLoader.PageLink">
      <summary>
            Gets or sets the root page for a hierarchical view.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.HierarchicalPageLoader.IncludeRootPage">
      <summary>
            Gets or sets a value indicating whether the root page should be included in the hierarchy or not.
            </summary>
      <value>
        <c>true</c> if root page should be included in the hierarchy; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.HierarchicalPageLoader.ExecFilters(EPiServer.Core.PageDataCollection)">
      <summary>
            Execs the filters registered in <see cref="E:EPiServer.Web.WebControls.HierarchicalPageLoader.Filter" /> on a collection of <see cref="T:EPiServer.Core.PageData" />.
            </summary>
      <param name="pages">The collection of <see cref="T:EPiServer.Core.PageData" />.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.HierarchicalPageLoader.HierarchicalSelect(System.String)">
      <summary>
            Performs the selection of pages based on the viewPath parameter.
            </summary>
      <remarks>Override this method to implement custom hierarchical behavior.</remarks>
      <param name="viewPath">The hierarchical path of the node to enumerate.</param>
      <returns>An IHierarchicalEnumerable representing the child structure of the specified path.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.HierarchicalPageLoader.GetFilteredChildren(EPiServer.Core.PageReference)">
      <summary>
            Gets the filtered children of a specified page.
            Used when retreiving data for a hierarchical view.
            </summary>
      <param name="pageLink">pagelink representing the current node in the tree view</param>
      <returns>A collection of child pages</returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.HierarchicalPageLoader.EvaluateHasChildren">
      <summary>
            Gets or sets whether the hierarchical view should preevaluate the existens of child pages or always return true to let the HierarchicalDataBoundControl evaluate it as needed.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.HierarchicalPageLoader.AccessLevel">
      <summary>
            Gets/sets the page access level for datasource.
            </summary>
      <value>The page access level.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.HierarchicalPageLoader.IsRoot(EPiServer.Core.PageData)">
      <summary>
            Determines if a PageData instance represents a root in the current hierarchicla view.
            </summary>
      <param name="page">The PageData instance to match with.</param>
      <returns>
        <b>true</b> if instance is a root node in the hierarchy, otherwise false.</returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.HierarchicalPageLoader.GetChildrenMethod">
      <summary>
            Represents the method that will handle Child page lookup.
            </summary>
      <param name="pageLink">The PageReference whos child pages should be retreived.</param>
      <returns>A PageDataCollection of child pages.</returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.HierarchicalPageLoader.GetPageMethod">
      <summary>
            Represents the method that will handle loading of page data.
            </summary>
      <param name="pageLink">The PageReference whos data should be retreived.</param>
      <returns>A PageData object.</returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.HierarchicalPageLoader.InitializeMethod">
      <summary>
            Represents the method that will handle initialization of the PageLoader.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.HierarchicalPageLoader.GetChildrenCallback">
      <summary>
            Gets or sets the method used to retreive children for a specific page.
            </summary>
      <value>A GetChildrenMethod instance.</value>
      <remarks>
            If GetChildrenCallback is undefined, the <see cref="M:EPiServer.DataFactory.GetChildren(EPiServer.Core.PageReference)" /> method 
            of <see cref="T:EPiServer.DataFactory" /> is used.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.HierarchicalPageLoader.GetPageCallback">
      <summary>
            Gets or sets the method used for retreiving page data for a specific page.
            </summary>
      <value>A GetPageMethod instance.</value>
      <remarks>If no callback is provided the <see cref="M:EPiServer.DataFactory.GetPage(EPiServer.Core.PageReference)" /> method will be used.</remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.HierarchicalPageLoader.InitializeCallback">
      <summary>
            Gets or sets the method used to initialize the the Loader instance.
            </summary>
      <value>A InitializeMethod instance.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.HierarchicalPageLoader.GetChildrenDefault(EPiServer.Core.PageReference)">
      <summary>
            Fallback implementation for the GetChildrenCallback
            </summary>
      <param name="pageLink">The PageReference whos child pages should be retreived.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.HierarchicalPageLoader.GetPageDefault(EPiServer.Core.PageReference)">
      <summary>
            Fallback implementation for the GetPageCallback
            </summary>
      <param name="pageLink">The PageReference whos page data should be retreived.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.HierarchicalPageLoader.InitializeDefault">
      <summary>
            Empty fallback implementation for the InitializeCallback.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.IDataSourceMethods">
      <summary>
            Every datasource control that uses the GenericDataSourceView class must implement this interface.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.IDataSourceMethods.Select(System.Web.UI.DataSourceSelectArguments)">
      <summary>
            Makes a selection of items according to specified arguments. 
            </summary>
      <remarks>It is possible for DataSource class to expose SelectParameters collection as well</remarks>
      <param name="arguments">arguments</param>
      <returns>collection of items</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.IDataSourceMethods.Delete(System.Collections.IDictionary)">
      <summary>
            Deletes items according to the passed values. 
            </summary>
      <remarks>It is possible for DataSource class to expose DeleteParameters collection as well</remarks>
      <param name="values">arguments</param>
      <returns>number of deleted items</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.IDataSourceMethods.Insert(System.Collections.IDictionary)">
      <summary>
            Inserts new item(s) according to specified values.
            </summary>
      <remarks>It is possible for DataSource class to expose InsertParameters collection as well</remarks>
      <param name="values">arguments</param>
      <returns>number of inserted items</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.IDataSourceMethods.Update(System.Collections.IDictionary)">
      <summary>
            Updates item(s) according to specified values.
            </summary>
      <remarks>It is possible for DataSource class to expose UpdateParameters collection as well</remarks>
      <param name="values">arguments</param>
      <returns>number of updated items</returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.IFileSystemItem">
      <summary>
            Used to define which get-properties the wrapper for UnifiedFile and UnifiedDirectory should expose. 
            This means i.e. GridViews that databind to FileSystemDataSource control can display interface properties as columns.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.IsDirectory">
      <summary>
            Gets a value indicating whether this instance is a directory.
            </summary>
      <value>
        <c>true</c> if this instance is a directory; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.IsFile">
      <summary>
            Gets a value indicating whether this instance is a file.
            </summary>
      <value>
        <c>true</c> if this instance is a file; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Changed">
      <summary>
            Gets the date the item was changed.
            </summary>
      <value>The date the item was changed.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Created">
      <summary>
            Gets the date the item was created.
            </summary>
      <value>The date the item was created.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Length">
      <summary>
            Gets the length of the file.
            </summary>
      <value>Gets the length of the file.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Title">
      <summary>
            Gets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Subject">
      <summary>
            Gets the subject.
            </summary>
      <value>The subject.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Keywords">
      <summary>
            Gets the keywords.
            </summary>
      <value>The keywords.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Author">
      <summary>
            Gets the author.
            </summary>
      <value>The author.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Category">
      <summary>
            Gets the categories.
            </summary>
      <value>The categories.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Comments">
      <summary>
            Gets the comments.
            </summary>
      <value>The comments.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.HasChildren">
      <summary>
            Gets a value indicating whether this instance has children.
            </summary>
      <value>
        <c>true</c> if this instance has children; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.IFileSystemItem.Path">
      <summary>
            Gets the path to the item.
            </summary>
      <value>The path to the item.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.IHierarchicalPageDataSource">
      <summary>
            Defines the contract for how hierarchical loading of pages is performed in the PageTreeData and the PageDataSource controls.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.IHierarchicalPageDataSource.HierarchicalSelect(System.String)">
      <summary>
            Performs a selection based on a specified path. A blank path denotes the root of the page hierarchy.
            </summary>
      <param name="viewPath">The path to load.</param>
      <returns>A PageHierarchicalEnumerable that can enumerate the loaded pages.</returns>
      <remarks>If the provided path is an empty string it denotes the root of the page hierarchy. All other paths represent a Page ID.</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.IHierarchicalPageDataSource.GetFilteredChildren(EPiServer.Core.PageReference)">
      <summary>
            Returns a filtered PageDataCollection that represents the child pages of the provided PageReference.
            </summary>
      <param name="pageLink">Represents the node for which children are to be loaded.</param>
      <returns>A PageDataCollection of the filtered children.</returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.IHierarchicalPageDataSource.EvaluateHasChildren">
      <summary>
            Gets a value indicating if the HasChildren property should be determined for the associated PageHierarchyData instance. In some tree rendering situations it can cost a lot, performance wise, to perform this evaluation in which case this property can be implemeneted to return false.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.IHierarchicalPageDataSource.IsRoot(EPiServer.Core.PageData)">
      <summary>
            Calculates whether a PageData object corresponds to the hierarchical root.
            </summary>
      <param name="page">The PageData instance to compare.</param>
      <returns>true if page is the same as the hierarchical root, otherwise false.</returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.IHierarchicalPageDataSource.AccessLevel">
      <summary>
            Gets the page access level for datasource.
            </summary>
      <value>The page access level.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.IHierarchyParent">
      <summary>
            Contains methods a hierarchical datasource that should support EPiServer.UI.WebControls.PageTreeView must implement
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.IHierarchyParent.GetParent">
      <summary>
            Gets the parent IHierarchyData object
            </summary>
      <returns>An IHierarchyData instance.</returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputBase">
      <summary>
            Base class for web controls that provide a user interface for
            setting values for different types.
            </summary>
      <remarks>Used to privide a user interface by several of the built in property controls.</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputBase.CopyWebAttributes(System.Web.UI.Control,System.Web.UI.Control)">
      <summary>
            Copies the attributes from one control to another control.
            </summary>
      <param name="fromControl">The source control.</param>
      <param name="toControl">The destination control.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputBase.CopyWebAttributes(System.Web.UI.Control)">
      <summary>
            Copies the attributes from this control to another control.
            </summary>
      <param name="toControl">The destination control.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputBase.TagKey">
      <summary>
            We use a div as the container tag as the input controls create block elements
            which are not allowed in a span that is the default tag for WebControl.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputCategoryTree">
      <summary>
            Simple input control that displays a category selection.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputCategoryTree.Categories">
      <summary>
            Gets or sets a list of categories that the <see cref="T:EPiServer.Web.WebControls.InputCategoryTree" /> should render.
            If not set it will default to calling the <see cref="M:EPiServer.DataAbstraction.Category.GetList" /> method on
            the root category returned by <see cref="M:EPiServer.DataAbstraction.Category.GetRoot" />.
            </summary>
      <value>The category selection that are available.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputCategoryTree.SelectedCategories">
      <summary>
            Gets or sets the selected categories.
            </summary>
      <remarks>
        <para>
            The setter stores a copy of the category list so that the original list is not modified.
            </para>
        <para>
            Non existing category ids are removed from the category list before it's returned.
            </para>
      </remarks>
      <value>A <see cref="T:EPiServer.Core.CategoryList" /> containing the selected categories.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputCategoryTree.CreateChildControls">
      <summary>
            Create and adds the category selection controls to the control collection.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputCategoryTree.EnableSelectability">
      <summary>
            Set to false if you want the control to render unselectable categories as selectable.
            </summary>
      <remarks>
            Default value is true.
            </remarks>
      <value>
        <c>false</c> to render the unselectable categories as selectable; otherwise, <c>true</c>.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputCategoryTree.EnableVisibility">
      <summary>
            Set to false if you want the control to render invisible categories.
            </summary>
      <remarks>
            Default value is true.
            </remarks>
      <value>
        <c>false</c> to render the invisible categories; otherwise, <c>true</c>.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputDate">
      <summary>
            Provides a user interface for setting a <see cref="T:System.DateTime" /> value.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputDate.OnDataBinding(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.DataBinding"></see> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputDate.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputDate.OnPreRender(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputDate.DisplayName">
      <summary>
            Gets or sets the name that is used to create validation error messages.
            </summary>
      <value>The name that is used to create validation error messages.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputDate.Value">
      <summary>
            Gets or sets the value of input textbox.
            </summary>
      <value>The <see cref="T:System.DateTime" /> value.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputDate.ValidateInput">
      <summary>
            Gets or sets a value indicating whether the control should validate the input.
            </summary>
      <value>
        <c>true</c> if the control should validate the input; otherwise, <c>false</c>. Default value is true.</value>
      <remarks>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputDate.DisplayTime">
      <summary>
            Gets or sets a value indicating whether the control should render time selection field
            </summary>
      <value>
        <c>true</c> if the control should render time; otherwise, <c>false</c>. Default value is true.</value>
      <remarks>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputDate.DisplayButtons">
      <summary>
            Gets or sets a value indicating whether the control should render dialog buttons 
            </summary>
      <value>
        <c>true</c> if the control should render dialog button; otherwise, <c>false</c>. Default value is true.</value>
      <remarks>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputDate.Input">
      <summary>
            Gets the input <see cref="T:System.Web.UI.WebControls.TextBox" />.
            </summary>
      <value>The input <see cref="T:System.Web.UI.WebControls.TextBox" />.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputFrame">
      <summary>
            Create a drop down list with the available frames for the site.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputFrame.CurrentFrame">
      <summary>
            Gets or sets the currently selected frame.
            </summary>
      <value>The currently selected frame.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputFrame.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputLanguage">
      <summary>
            Create a drop down list with the available <see cref="T:EPiServer.DataAbstraction.LanguageBranch" /> for the site.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputLanguage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.InputLanguage" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputLanguage.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputLanguage.SelectedLanguage">
      <summary>
            Gets or sets the selected <see cref="T:EPiServer.DataAbstraction.LanguageBranch" />.
            </summary>
      <value>The selected <see cref="T:EPiServer.DataAbstraction.LanguageBranch" />.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputPageReference">
      <summary>
            Simple input type that displays a page selector.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.InputPageReference.ValueChanged">
      <summary>
            Occurs when the value of the input has changed.
            </summary>
      <remarks>
            For it to trigger you need to set AutoPostBack = true as well.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPageReference.PageLink">
      <summary>
            Gets or sets the pagelink.
            </summary>
      <value>The pagelink.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputPageReference.UpdateDisplayField">
      <summary>
            Updates the TextBox that displays the selected value.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputPageReference.CreateDisplayFriendlyPageLink">
      <summary>
            Creates the string that is displayed in the TextBox.
            </summary>
      <returns>A string containing the selected page name and ID.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputPageReference.CreateChildControls">
      <summary>
            Creates a HtmlInputHidden control to store the value and a disabled TextBox to show the selected value to the user.
            Also creates a button that opens the page browser dialog.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputPageReference.ValueControl_ServerChange(System.Object,System.EventArgs)">
      <summary>
            We need to clear some local variables if we change the selected page.
            </summary>
      <param name="sender">The event sender.</param>
      <param name="e">The event arguments.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPageReference.IsPageAccessDenied">
      <summary>
            Gets a value indicating whether the current user has read access to the selected page.
            </summary>
      <value>
        <c>true</c> if the user has read access; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPageReference.IsPageNotFound">
      <summary>
            Gets a value indicating whether the selected page still exists.
            </summary>
      <value>
        <c>true</c> if the page does not exist anymore; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPageReference.IsPageProviderNotFound">
      <summary>
            Gets a value indicating whether the selected page still exists.
            </summary>
      <value>
        <c>true</c> if the page does not exist anymore; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputPageReference.CheckPageAvailability">
      <summary>
            Checks if the selected page still exists and checks if the current user has access to it.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputPageReference.OnPreRender(System.EventArgs)">
      <summary>
            On the PreRender event we update the display field.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPageReference.ValueControl">
      <summary>
            Gets the <see cref="T:System.Web.UI.HtmlControls.HtmlInputHidden" /> that is used to store the value on the client.
            </summary>
      <value>The <see cref="T:System.Web.UI.HtmlControls.HtmlInputHidden" /> that is used to store the value on the client.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPageReference.DisplayControl">
      <summary>
            Gets the <see cref="T:System.Web.UI.WebControls.TextBox" /> that is used to display the selected page on the client.
            </summary>
      <value>The <see cref="T:System.Web.UI.WebControls.TextBox" /> that is used to display the selected page on the client.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPageReference.RequireUrlForSelectedPage">
      <summary>
            A value indicating whether pages that aren't visible on the site should be selectable in the page selection dialog.
            When true only pages that is visible on site will be selectable.
            </summary>
      <value>
        <c>true</c> if only pages visible on the site are selectable; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPageReference.DisableCurrentPageOption">
      <summary>
            Gets or sets a value indicating whether you should disable the current page option for the InputPageReference UI.
            </summary>
      <value>
        <c>true</c> if the current page option should be disabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPageReference.AutoPostBack">
      <summary>
            Gets or sets a value indicating whether the control should generate a post back when the value is changed.
            </summary>
      <value>
        <c>true</c> if post back should be generated; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputPassword">
      <summary>
            Simple input control that allows a user to enter / change passwords. 
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputPassword.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPassword.FirstPassword">
      <summary>
            Gets the first password.
            </summary>
      <value>The first password.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPassword.SecondPassword">
      <summary>
            Gets the second password.
            </summary>
      <value>The second password.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPassword.InputCssClass">
      <summary>
            Gets or sets the input CSS class that is used for the inner div tag.
            </summary>
      <value>The input CSS class that is used for the inner div tag.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPassword.Collapsed">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Web.WebControls.InputPassword" /> is collapsed.
            </summary>
      <value>
        <c>true</c> if collapsed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPassword.RenderPassword">
      <summary>
            Gets or sets a value indicating whether the input fields should render the password to the client on post backs.
            </summary>
      <value>
        <c>true</c> if the password should be rendered; otherwise, <c>false</c>.</value>
      <remarks>It may be a security issue to send the password in clear text to the client. It will only
            be sent on post backs if the client has already entered a value though.</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputPassword.Password_PreRender(System.Object,System.EventArgs)">
      <summary>
            Used to set the text for the password controls are these are removed for TextBoxes in password mode.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputPropertyDefinitionType">
      <summary>
            Simple input type that displays a property definition type dropdownlist.
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.InputPropertyDefinitionType.SelectedIndexChanged">
      <summary>
            Occurs when the dropdown selection is cahnged.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPropertyDefinitionType.IncludeDisabled">
      <summary>
            Gets or sets a value indicating whether to include types declared in plugins that were disabled.
            </summary>
      <value>
        <c>true</c> if types from disabled plugins should be included; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPropertyDefinitionType.Type">
      <summary>
            Gets or sets the selected <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />.
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <value>The selected <see cref="T:EPiServer.DataAbstraction.PropertyDefinitionType" />.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputPropertyDefinitionType.OnSelectedIndexChanged(System.Object,System.EventArgs)">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPropertyDefinitionType.AutoPostback">
      <summary>
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputPropertyDefinitionType.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputPropertyDefinitionType.TagKey">
      <summary>
            We use the <see cref="F:System.Web.UI.HtmlTextWriterTag.Span" /> tag for this control.
            <value>A <see cref="F:System.Web.UI.HtmlTextWriterTag.Span" /> tag</value></summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputSortOrder">
      <summary>
            Simple input type that displays available page sort orders.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputSortOrder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.InputSortOrder" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputSortOrder.SortOrder">
      <summary>
            Gets or sets the selected sort order.
            </summary>
      <value>The selected sort order.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputSortOrder.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputTab">
      <summary>
            Simple input type that displays a <see cref="T:System.Web.UI.WebControls.DropDownList" /> with the available tabs for the site.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputTab.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.InputTab" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputTab.TabID">
      <summary>
            Gets or sets the ID of the selected tab.
            </summary>
      <value>The ID of the selected tab.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputTab.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.InputTimeSpan">
      <summary>
            Provides a user interface to define a <see cref="T:System.TimeSpan" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputTimeSpan.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.InputTimeSpan" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputTimeSpan.Value">
      <summary>
            Gets or sets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.InputTimeSpan.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputTimeSpan.ValidateInput">
      <summary>
            Gets or sets a value indicating whether the control should validate the input.
            </summary>
      <value>
        <c>true</c> if the control should validate the input; otherwise, <c>false</c>. Default value is true.</value>
      <remarks>Set this to false if you want to handle the validation yourself.</remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.InputTimeSpan.DisplayName">
      <summary>
            Gets or sets the name that is used to create validation error messages.
            </summary>
      <value>The name that is used to create validation error messages.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.IPageControl">
      <summary>
            Interface for page bound controls
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.IPageControl.PageLink">
      <summary>
            The root page to read data from
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.IPageControl.PageLinkProperty">
      <summary>
            String representation of the root page to read data from
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.IPageControl.PageSource">
      <summary>
            Gets or sets the page source that handles pages
            </summary>
      <value>The page source.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.IPropertyControlsContainer">
      <summary>
            Creation of child controls could be triggered externally for controls marked with this interface 
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.IPropertyControlsContainer.EnsurePropertyControlsCreated">
      <summary>
            Triggers EnsureChildControls for the Property.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.FilterEventHandler">
      <summary>
            Represents the method that will handle the event that has no event data.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:EPiServer.Filters.FilterEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.PageControlBase">
      <summary>
            Serves as a base class for all controls that generate any type of <see cref="T:EPiServer.Core.PageData" /> collection.
            </summary>
      <remarks>
        <para>
            Classes that derive from PageControlBase have very rich data binding support. First they support
            .NET data binding to for example <see cref="T:System.Web.UI.WebControls.Repeater" /> and <see cref="T:System.Web.UI.WebControls.DataList" />.
            </para>
        <para>
            Second, PageControlBase supports data binding itself to another data source to extend its data.
            Can be very useful to serializing data through different controls using different filters, for example
            when you need to split data delivered from a EPiServer.Web.WebControls.PageList into two different controls. You may
            also find that data delivered from one control would be better rendered using an other control.
            </para>
      </remarks>
      <example>
            Simple example showing how data is read and displayed on a page. 
            The PageLink specifies which page the list will be retrieved from.
            <code source="../CodeSamples/EPiServer/WebControls/PageControlBaseSamples.aspx" region="ReadData" lang="aspnet" />
            Illustrates how data from one control can be used by several other controls, in this
            example it is only PageList1 that delivers data and the others are only used for presentation.
            <code source="../CodeSamples/EPiServer/WebControls/PageControlBaseSamples.aspx" region="deliverdata" lang="aspnet" /></example>
    </member>
    <member name="E:EPiServer.Web.WebControls.PageControlBase.Filter">
      <summary>
            Filters adding,removing or changing order of pages
            </summary>
      <remarks>
        <para>
            Filters can be called multiple times on different collections and should not contain any state.
            </para>
        <para>
            If you add your own <b>FilterPropertySort</b> to the filter queue, make sure to set SortBy = null, 
            otherwise the webcontrol's default sort filter is also executed and it would resort the data, 
            since it is always executed last.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:EPiServer.Web.WebControls.PageControlBase" /></summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.PageSource">
      <summary>
            Set or get where pages will be fetched from, defaults to base page on databind.
            </summary>
      <remarks>Normally you never need to modify PageSource, it will automatically be set.</remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.DataSource">
      <summary>
            DataSource supports reading <see cref="T:EPiServer.Core.PageDataCollection" /> from other controls using standard databinding through <see cref="T:System.Collections.IEnumerable" />.
            </summary>
      <remarks>
        <para>If current control has any internal pages the will be appended after reading from DataSource</para>
        <para>Used to serialize control containing data, or to rendering data from one control using another control</para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.PageLinkProperty">
      <summary>
            Set <see cref="P:EPiServer.Web.WebControls.PageControlBase.PageLinkProperty" /> to automatically populate <see cref="P:EPiServer.Web.WebControls.PageControlBase.PageLink" /> from a given property.
            </summary>
      <remarks>
            Set to the name of the page property that you want to fetch the page link from. 
            </remarks>
      <example>
            This code snippet assumes
            that CalendarContainer is defined as a page type property of type Page reference.
            <code lang="c#">
            &lt;episerver:Calendar PageLinkProperty="CalendarContainer" runat="server" ID="Calendar1" /&gt;
            </code></example>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.PageLink">
      <summary>
            The root page to read data from
            </summary>
      <example>
        <para>
            This example shows how to assign a value to the PageLink property of the PageTree 
            control through code. This code is a modified version of the UserControl 
            prefix.ascx.cs code-behind file in the EPiServer sample site. 
            </para>
        <para>
            We cannot assign to the PageLink property in the Page_Load event as it will be to 
            late for the control to see it. Instead we use the Control.Init event. 
            </para>
        <code source="../CodeSamples/EPiServer/WebControls/PageControlBaseSamples.aspx.cs" region="AssignData" lang="cs" />
      </example>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.AutoBind">
      <summary>
            Gets or sets a value indicating whether the control should DataBind automatically before rendering if the state of the control allows it.
            </summary>
      <value>
        <c>true</c> if control should DataBind automatically; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.PublishedStatus">
      <summary>
            Set or get the level of "publish status" filtering that will be done.
            </summary>
      <remarks>
            By default it will be set to Published, i e only pages that are
            published and is within the valid publish date range will be included.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.RequiredAccess">
      <summary>
            Set or get the level of access rights filtering that will be done.
            </summary>
      <remarks>
            By default it will be set to AccessLevel.Read, i e only pages that you have
            read access to will be included.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.RemoteSite">
      <summary>
            Set or get from which remote site pages will be fetched.
            </summary>
      <remarks>
        <para>
                To fetch local pages, do not set this property.
            </para>
        <para>
                If this property is set, the control will never load <see cref="P:EPiServer.Web.WebControls.PageControlBase.PageLinkProperty" />
                from any Block context.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.PropertyResolver">
      <summary>
            Gets or sets the <see cref="P:EPiServer.Web.WebControls.PageControlBase.PropertyResolver" /> that should be used by the current control instance.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.GetEnumerator">
      <summary>
            Get a enumeration of the pages in contained <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <remarks>Used to support standard data binding through <see cref="T:System.Collections.IEnumerable" /></remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.GetPages">
      <summary>
            Get the <see cref="T:EPiServer.Core.PageDataCollection" /> contained in this control
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.DataCount">
      <summary>
            Number of items in the control's list when the control is databound.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.PrepareData">
      <summary>
            Internal function called upon databinding
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.ReadFromDataSource(EPiServer.Core.PageDataCollection)">
      <summary>
            Internal function called when its time to populate pages to collection from DataSource.
            </summary>
      <param name="pages">
      </param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.SetupFields">
      <summary>
            Internal function called when access to internal variables is needed
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.InvalidateInternalState">
      <summary>
            Invalidates the internal state of the PageControlBase instance. Call this method to force a reinitialization of the control state.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.PopulatePages(EPiServer.Core.PageDataCollection)">
      <summary>
            Called once when the control is populating the collection of pages
            </summary>
      <param name="pages">Collection to populate with pages</param>
      <remarks>
        <para>Override this method to customize the population of pages, if this control has been data bound the collection may already contain pages.</para>
      </remarks>
      <example>Example how a list control may choose to implement this method
            <code lang="C#">
            protected override void PopulatePages(PageDataCollection pages)
            {
            	if(PageLink.ID!=0)
            		GetChildren(PageLink,pages);
            }
            </code></example>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.CreatePreSortFilters">
      <summary>
            Called once when the control needs access to pre sort filters used for modifying a <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <remarks>
        <para>Override this method to customize the population of filters to run before sorting occurs.</para>
        <para>Typical use is to add pages to create a combined list from two or more folders, or to remove pages based that should not appear in listing. For example by using <see cref="T:EPiServer.Filters.FilterCompareTo" /></para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.CreateSortFilters">
      <summary>
            Called once when the control needs access to sort filters used for modifying a <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <remarks>
        <para>Override this method to customize the population of sorting filters.</para>
        <para>Typically used to change the order between pages, for example with <see cref="T:EPiServer.Filters.FilterPropertySort" />.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.CreatePostSortFilters">
      <summary>
            Called once when the control needs access to post sort filters used for modifying a <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <remarks>
        <para>Override this method to customize the population of filters to run after sorting occurs.</para>
        <para>Typical use is to limit the number of pages, for example by using <see cref="T:EPiServer.Filters.FilterCount" /> or <see cref="T:EPiServer.Filters.FilterSkipCount" /></para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.ExecFilters(EPiServer.Core.PageDataCollection)">
      <summary>
            Call to execute filters on a given collection of pages
            </summary>
      <param name="pages">Collection to filter</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageControlBase.CurrentPage">
      <summary>
            Current loaded page for this web form
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.GetPage(EPiServer.Core.PageReference)">
      <summary>
            Retrieve a PageData object
            </summary>
      <param name="pageLink">Reference to the page being retrieved</param>
      <returns>PageData object requested</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.GetChildren(EPiServer.Core.PageReference)">
      <summary>
            Retrieve a PageData listing
            </summary>
      <param name="pageLink">Reference to parent page</param>
      <returns>PageDataCollection with listed pages</returns>
      <remarks>Filters will be executed against this collection.</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.GetChildren(EPiServer.Core.PageReference,EPiServer.Core.PageDataCollection)">
      <summary>
            Append a PageData listing to existing collection
            </summary>
      <param name="pageLink">Reference to parent page</param>
      <param name="pages">A page collection to append existing data</param>
      <remarks>
        <para>Filters will be executed against this collection.</para>
        <para>This version of GetChildren is useful when you have existing pages that need
            to be merged into the filtering proccess.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.DataBind">
      <summary>
            Binds a data source to the invoked server control and all its child controls.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.OnPreRender(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageControlBase.OnPropertyChanged(System.String)">
      <summary>
            Call when a properety has changed
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="E:EPiServer.Web.WebControls.PageControlBase.PropertyChanged">
      <summary>
            Occurs when a property is changed
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.PageHierarchicalEnumerable">
      <summary>
            A type that enables hierarchical enumeration from a specified location in a  page tree. This type is a wrapper type of the PageDataCollection to support hierarchical page data source controls.
            </summary>
      <remarks>Supports the PageDataSource control and provides an interface for hierarchical controls to extract hierarchical information from page data</remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageHierarchicalEnumerable.Pages">
      <summary>
            Gets the collection of pages associated with this <see cref="T:EPiServer.Web.WebControls.PageHierarchicalEnumerable" />.
            </summary>
      <value>The pages.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageHierarchicalEnumerable.Indent">
      <summary>
            Gets the indent level of the pages in the <see cref="T:EPiServer.Web.WebControls.PageHierarchicalEnumerable" /> instance.
            </summary>
      <value>The indent level.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchicalEnumerable.#ctor(EPiServer.Core.PageReference,EPiServer.Web.WebControls.IHierarchicalPageDataSource)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageHierarchicalEnumerable" /> class for a parent page.
            </summary>
      <param name="page">The root page.</param>
      <param name="dataSource">The associated data source.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchicalEnumerable.#ctor(EPiServer.Core.PageReference,EPiServer.Web.WebControls.IHierarchicalPageDataSource,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageHierarchicalEnumerable" /> class for a specified parent page with a given indent level.
            </summary>
      <param name="page">The root page.</param>
      <param name="dataSource">The associated data source.</param>
      <param name="indent">The indent.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchicalEnumerable.#ctor(EPiServer.Core.PageDataCollection,EPiServer.Web.WebControls.IHierarchicalPageDataSource)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageHierarchicalEnumerable" /> class with a set of pages. 
            </summary>
      <param name="pages">The pages.</param>
      <param name="dataSource">The associated data source.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchicalEnumerable.#ctor(EPiServer.Core.PageDataCollection,EPiServer.Web.WebControls.IHierarchicalPageDataSource,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageHierarchicalEnumerable" /> class with a set of pages with a given indent level.
            </summary>
      <param name="pages">The pages.</param>
      <param name="dataSource">The associated data source.</param>
      <param name="indent">The indent level.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchicalEnumerable.GetHierarchyData(System.Object)">
      <summary>
            Returns a hierarchical data item for the specified enumerated item.
            </summary>
      <param name="enumeratedItem">The <see cref="T:System.Object" /> for which to return an <see cref="T:System.Web.UI.IHierarchyData" />.</param>
      <returns>
            An <see cref="T:System.Web.UI.IHierarchyData" /> instance that represents the <see cref="T:System.Object" /> passed to the <see cref="M:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData(System.Object)" /> method.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchicalEnumerable.GetEnumerator">
      <summary>
            Gets the enumerator.
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;PageHierarchyData&gt;</see>.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchicalEnumerable.GetParent">
      <summary>
            Gets the parent IHierarchyData object
            </summary>
      <returns>An IHierarchyData instance.</returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.PageHierarchicalView">
      <summary>
            Supports the PageDataSource control and provides an hierarchical view used by HierarchicalDataBoundControls.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageHierarchicalView.ViewPath">
      <summary>
            A string that represents this views position in the hierarchical structure.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageHierarchicalView.DataSource">
      <summary>
            The IHierarchicalPageDataSource that owns this view
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchicalView.#ctor(EPiServer.Web.WebControls.IHierarchicalPageDataSource,System.String)">
      <summary>
            Creates a PageHierarchicalDataSourceView
            </summary>
      <param name="dataSource">The datasource that owns this view</param>
      <param name="viewPath">A string that represents created views position in the hierarchical structure.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchicalView.Select">
      <summary>
            Returns the actual data for this view
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.PageHierarchyData">
      <summary>
            Supports the PageDataSource control and provides an interface for hierarchical controls to extract hierarchical data from a PageData object.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchyData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageHierarchyData" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchyData.#ctor(EPiServer.Core.IPageSource)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageHierarchyData" /> class.
            </summary>
      <param name="pageSource">The page source to use for misc page requests.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchyData.#ctor(EPiServer.Core.PageData,EPiServer.Web.WebControls.IHierarchicalPageDataSource)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageHierarchyData" /> class.
            </summary>
      <param name="page">The PageData for the current node.</param>
      <param name="dataSource">The associated PageDataSource instance.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchyData.#ctor(EPiServer.Core.PageData,EPiServer.Web.WebControls.IHierarchicalPageDataSource,EPiServer.Core.IPageSource)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageHierarchyData" /> class.
            </summary>
      <param name="page">The PageData for the current node.</param>
      <param name="dataSource">The associated PageDataSource instance.</param>
      <param name="pageSource">The page source to use for misc page requests.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchyData.#ctor(EPiServer.Core.PageData,EPiServer.Web.WebControls.IHierarchicalPageDataSource,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageHierarchyData" /> class.
            </summary>
      <param name="page">The PageData for the current node.</param>
      <param name="dataSource">The associated PageDataSource instance.</param>
      <param name="indent">The indent level of the page in the current tree structure.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchyData.#ctor(EPiServer.Core.PageData,EPiServer.Web.WebControls.IHierarchicalPageDataSource,System.Int32,EPiServer.Core.IPageSource)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageHierarchyData" /> class.
            </summary>
      <param name="page">The PageData for the current node.</param>
      <param name="dataSource">The associated PageDataSource instance.</param>
      <param name="indent">The indent level of the page in the current tree structure.</param>
      <param name="pageSource">The page source to use for misc page requests.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchyData.GetChildren">
      <summary>
            Gets an enumeration object that represents all the child nodes of the current hierarchical node.
            </summary>
      <returns>
            An <see cref="T:System.Web.UI.IHierarchicalEnumerable"></see> collection of child nodes of the current hierarchical node.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchyData.GetParent">
      <summary>
            Gets an enumeration object that represents the parent node of the current hierarchical node.
            </summary>
      <returns>
            An <see cref="T:System.Web.UI.IHierarchicalEnumerable"></see> object that represents the parent node of the current hierarchical node.
            </returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageHierarchyData.HasChildren">
      <summary>
            Indicates whether the hierarchical data node that the <see cref="T:System.Web.UI.IHierarchyData"></see> object represents has any child nodes.
            </summary>
      <value>
      </value>
      <returns>true if the current node has child nodes; otherwise, false.</returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageHierarchyData.Item">
      <summary>
            Gets the hierarchical data node that the <see cref="T:System.Web.UI.IHierarchyData"></see> object represents.
            </summary>
      <value>
      </value>
      <returns>An <see cref="T:System.Object"></see> hierarchical data node object.</returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageHierarchyData.Path">
      <summary>
            Gets the hierarchical path of the node.
            </summary>
      <value>
      </value>
      <returns>A <see cref="T:System.String"></see> that identifies the hierarchical path relative to the current node.</returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageHierarchyData.Type">
      <summary>
            Gets the name of the type of <see cref="T:System.Object"></see> contained in the <see cref="P:System.Web.UI.IHierarchyData.Item"></see> property.
            </summary>
      <value>
      </value>
      <returns>The name of the type of object that the <see cref="T:System.Web.UI.IHierarchyData"></see> object represents.</returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageHierarchyData.Page">
      <summary>
            Gets the <see cref="T:EPiServer.Core.PageData" /> represented by the <see cref="T:EPiServer.Web.WebControls.PageHierarchyData" /> instance.
            </summary>
      <value>The <see cref="T:EPiServer.Core.PageData" /> instance.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageHierarchyData.Indent">
      <summary>
            Gets the indent level of the page in the current tree structure.
            </summary>
      <value>The indent.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageHierarchyData.EnsureChildrenLoaded">
      <summary>
            Ensures that the children of the current node is loaded.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.PageListData">
      <summary>
            Base data control for accessing page list.
            </summary>
      <remarks>You can derive from this class to create custom controls generating
            any type of listing.
            </remarks>
      <seealso cref="T:EPiServer.Web.WebControls.PageControlBase" />
    </member>
    <member name="M:EPiServer.Web.WebControls.PageListData.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:EPiServer.Web.WebControls.PageListData" /></summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageListData.OnInit(System.EventArgs)">
      <summary>
            Called when the page is in the init state of the lifecycle
            </summary>
      <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageListData.LoadControlState(System.Object)">
      <summary>
            Loads the paging index.
            </summary>
      <param name="savedState">The state from control state.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageListData.SaveControlState">
      <summary>
            Stores the paging index.
            </summary>
      <returns>The index to store in control state.</returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.MaxCount">
      <summary>
            Restrict listing to a maximum number of pages.
            </summary>
      <remarks>
            Default value is -1 which means "Show all pages".
            Note that 0 menas no pages.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.SkipCount">
      <summary>
            Skip the first x pages in listings
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.SortBy">
      <summary>
            Custom sorting on a property instead of using predefined sorting by setting <see cref="P:EPiServer.Web.WebControls.PageListData.SortOrder" /></summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.SortDirection">
      <summary>
            Direction for sorting listings specified by <see cref="P:EPiServer.Web.WebControls.PageListData.SortBy" /></summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.SortOrder">
      <summary>
            Predefined sort orders instead of using custom sorting by setting <see cref="P:EPiServer.Web.WebControls.PageListData.SortBy" /></summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.PageTypeID">
      <summary>
            Predefined sort orders instead of using custom sorting by setting <see cref="P:EPiServer.Web.WebControls.PageListData.SortBy" /></summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.EnableVisibleInMenu">
      <summary>
            Gets or sets whether to recognize the "visible in menu" setting for pages.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.PagingHeaderTemplate">
      <summary>
            Header template for the paging items.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.PagingFooterTemplate">
      <summary>
            Footer template for the paging items.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.Paging">
      <summary>
            Controls if paging is used.
            Set to true to enable paging.
            </summary>
      <remarks>
        <para>By default paging is disabled. </para>
        <para>
            If you are using paging in your PageListData control and you are using a data binding expression make sure to manually DataBind it
            as we cannot guarantee that <see cref="P:EPiServer.Web.WebControls.PageControlBase.AutoBind" /> works.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.PagesPerPagingItem">
      <summary>
            Number of pages that goes into one paging item. The default value is same as 
            <see cref="P:EPiServer.Web.WebControls.PagingControl.PagesPerPagingItem" />.
            </summary>
      <example>
            For example, if PagesPerPagingItem is 12, each paging item will list up to 12 pages.
            </example>
      <remarks>
        <para>This property overrides any similar values provided in any control defined in 
            the <see cref="P:EPiServer.Web.WebControls.PageListData.PagingControl" /> property.</para>
        <para>
            If you are using a data binding expression for this property, you need to manually DataBind this control as we cannot guarantee that <see cref="P:EPiServer.Web.WebControls.PageControlBase.AutoBind" /> works.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.CurrentPagingItemIndex">
      <summary>
            Storage for the PagingControl's CurrentPagingItemIndex property. 
            Since the children are deleted during databind (and the PagingControl is one of the children),
            we need to store the index in the parent, ie this control.
            <seealso cref="P:EPiServer.Web.WebControls.PagingControl.CurrentPagingItemIndex" />
            The value is zero-bound (0 means first paging item, 1 is second paging item, and so on). 
            </summary>
      <remarks>
        <para>This value is stored in control state.</para>
        <para>
            If you are using a data binding expression for this property, you need to manually DataBind this control as we cannot guarantee that <see cref="P:EPiServer.Web.WebControls.PageControlBase.AutoBind" /> works.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageListData.PagingControl">
      <summary>
            Control used to render paging controls.
            By default an instance of <see cref="T:EPiServer.Web.WebControls.PagingControl" /> is returned. 
            The default control can be replaced by a custom paging control.
            </summary>
      <remarks>
        <para>
            If you are using paging in your PageListData control and you are using a data binding expression make sure to manually DataBind it
            as we cannot guarantee that <see cref="P:EPiServer.Web.WebControls.PageControlBase.AutoBind" /> works.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageListData.PopulatePages(EPiServer.Core.PageDataCollection)">
      <summary>
            Called once when the control is populating the collection of pages
            </summary>
      <param name="pages">Collection to populate with pages</param>
      <remarks>
            Override this method to customize the population of pages, if this control has been data bound the collection may already contain pages.
            </remarks>
      <example>Example how a list control may choose to implement this method
            <code lang="C#">
            protected override void PopulatePages(PageDataCollection pages)
            {
            if(PageLink.ID!=0)
            GetChildren(PageLink,pages);
            }
            </code></example>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageListData.CreatePreSortFilters">
      <summary>
            Called once when the control needs access to pre sort filters used for modifying a <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <remarks>
        <para>Override this method to customize the population of filters to run before sorting occurs.</para>
        <para>Typical use is to add pages to create a combined list from two or more folders, or to remove pages based that should not appear in listing. For example by using <see cref="T:EPiServer.Filters.FilterCompareTo" /></para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageListData.CreateSortFilters">
      <summary>
            Called once when the control needs access to sort filters used for modifying a <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <remarks>
        <para>Override this method to customize the population of sorting filters.</para>
        <para>Typically used to change the order between pages, for example with <see cref="T:EPiServer.Filters.FilterPropertySort" />.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageListData.CreatePostSortFilters">
      <summary>
            Called once when the control needs access to post sort filters used for modifying a <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <remarks>
        <para>Override this method to customize the population of filters to run after sorting occurs.</para>
        <para>Typical use is to limit the number of pages, for example by using <see cref="T:EPiServer.Filters.FilterCount" /> or <see cref="T:EPiServer.Filters.FilterSkipCount" /></para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageListData.PreparePagingControls(EPiServer.Core.PageDataCollection)">
      <summary>
            Prepares the paging controls.
            </summary>
      <param name="pages">The pages.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageListData.CreatePagingControls(EPiServer.Core.PageDataCollection)">
      <summary>
            Creates the paging controls.
            </summary>
      <param name="pages">The pages.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.PageTemplateContainer">
      <summary>
            Used for template context on a page level.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTemplateContainer.#ctor(EPiServer.Core.PageData,System.Int32,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageTemplateContainer" /> class specifying an indent and whether the provided page has children to render.
            </summary>
      <param name="page">Page to host</param>
      <param name="indent">The indent.</param>
      <param name="hasChildren">if set to <c>true</c> [has children].</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTemplateContainer.#ctor(EPiServer.Core.PageData,System.Int32,System.Boolean,EPiServer.Core.IPageSource)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageTemplateContainer" /> class specifying an indent and whether the provided page has children to render.
            </summary>
      <param name="page">The page.</param>
      <param name="indent">The indent.</param>
      <param name="hasChildren">Specifies whether 'page' has children or not.</param>
      <param name="pageSource">The page source.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTemplateContainer.#ctor(EPiServer.Core.PageData)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageTemplateContainer" /> class.
            </summary>
      <param name="page">The page.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTemplateContainer.DataItem">
      <summary>
            To support same syntax as <see cref="T:System.Web.UI.WebControls.Repeater" /> and others the current page
            is also available through DataItem
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTemplateContainer.CurrentPage">
      <summary>
            Page that is being hosted by template
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTemplateContainer.PreviewText">
      <summary>
            Text representation of page.
            </summary>
      <value>Returns a String with preview of the page.</value>
      <remarks>
            The preview text is determined by the following:
            <list type=""><item>If the page has a MainIntro property, this string is returned.</item><item>If the page has a MainBody property, the first 400 characters of MainBody is returned with all HTML-formatting removed.</item><item>Otherwise an empty string is returned.</item></list></remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTemplateContainer.HasChildren">
      <summary>
            If the rendered/current page has any visible children in this context.
            </summary>
      <remarks>This value will only be valid for a control that evaluate a tree structure such as PageTree.</remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTemplateContainer.Indent">
      <summary>
            Gets the current indent.
            </summary>
      <value>The current indent.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTemplateContainer.InstantiateWithFallback(System.Web.UI.ITemplate[])">
      <summary>
            Instantiates the template container in the first non null ITemplate references passed in the templateChain
            </summary>
      <param name="templateChain">A chain of ITemplate objects</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTemplateContainer.Get``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.IContent" /> object with information about a content, based on the
            <see cref="T:EPiServer.Core.ContentReference" /> parameter.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">Reference to the content being retrieved</param>
      <returns>
            IContent object requested
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTemplateContainer.GetChildren``1(EPiServer.Core.ContentReference)">
      <summary>
            Retrieve a <see cref="T:EPiServer.Core.IContent" /> listing
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="contentLink">Reference to parent content</param>
      <returns>
            Returns a collection of IContent directly below the content referenced by
            the <see cref="T:EPiServer.Core.ContentReference" /> parameter.
            </returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTemplateContainer.CurrentContent">
      <summary>
            Gets the currently loaded <see cref="T:EPiServer.Core.IContent">content</see>.
            </summary>
      <value>
            Returns information about the currently loaded content, or a content in
            a collection when used inside a control.
            </value>
    </member>
    <member name="T:EPiServer.Web.WebControls.PageTreeData">
      <summary>
            Base data control for accessing page tree's
            <seealso cref="T:EPiServer.Web.WebControls.PageControlBase" /></summary>
      <remarks>You can derive from this class to create custom controls generating
            any type of trees.</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PageTreeData" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.NumberOfLevels">
      <summary>
            Number of levels to show in tree.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.OpenPages">
      <summary>
            The pages that should be expanded
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.OpenTopPage">
      <summary>
            Gets the open top page.
            </summary>
      <value>The open top page.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.EnableVisibleInMenu">
      <summary>
            Gets or sets whether the tree should filter page based on the "Visible in menus" property.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.FilterPagesWithoutTemplate">
      <summary>
            Gets or sets whether pages that does not have a template should be removed.
            </summary>
      <remarks>Default value is true.</remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.ShowRootPage">
      <summary>
            Gets or sets wheter to render the root page as part of the tree
            </summary>
      <remarks>
            This setting is only useful when data is data bound to another
            control that does rendering of the tree structure.</remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.SortBy">
      <summary>
            Gets or sets custom sorting on a property instead of using predefined sorting by setting <see cref="P:EPiServer.Web.WebControls.PageTreeData.SortOrder" /></summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.SortDirection">
      <summary>
            Direction for sorting listings specified by <see cref="P:EPiServer.Web.WebControls.PageTreeData.SortBy" /></summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.SortOrder">
      <summary>
            Predefined sort orders instead of using custom sorting by setting <see cref="P:EPiServer.Web.WebControls.PageTreeData.SortBy" /></summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.PageLinkProperty">
      <summary>
            Set <see cref="P:EPiServer.Web.WebControls.PageTreeData.PageLinkProperty" /> to automatically populate <see cref="P:EPiServer.Web.WebControls.PageTreeData.PageLink" /> from a given property.
            </summary>
      <remarks>
            Set to the name of the page property that you want to fetch the page link from. 
            </remarks>
      <example>
            This code snippet assumes
            that CalendarContainer is defined as a page type property of type Page reference.
            <code lang="c#">
            &lt;episerver:Calendar PageLinkProperty="CalendarContainer" runat="server" ID="Calendar1" /&gt;
            </code></example>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.PageLink">
      <summary>
            The root page to read data from
            </summary>
      <example>
        <para>
            This example shows how to assign a value to the PageLink property of the PageTree 
            control through code. This code is a modified version of the UserControl 
            prefix.ascx.cs code-behind file in the EPiServer sample site. 
            </para>
        <para>
            We cannot assign to the PageLink property in the Page_Load event as it will be to 
            late for the control to see it. Instead we use the Control.Init event. 
            </para>
        <code source="../CodeSamples/EPiServer/WebControls/PageControlBaseSamples.aspx.cs" region="AssignData" lang="cs" />
      </example>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.AutoBind">
      <summary>
            Gets or sets a value indicating whether the control should DataBind automatically before rendering if the state of the control allows it.
            </summary>
      <value>
        <c>true</c> if control should DataBind automatically; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.ExpandAll">
      <summary>
            Expand all tree nodes.
            </summary>
      <remarks>
        <para>
            If ExpandAll is false, the branch where CurrentPage is located in is expanded. 
            To find the right branch a search is being made from CurrentPage and up, towards 
            the root page. Note, if a non-published page is encountered during the search and 
            the current user is not allowed to access the page, the search fails and a login 
            prompt is shown to the user. 
            </para>
        <para>
            If ExpandAll is true, all branches are expanded. The pages in the tree are crawled 
            from top to bottom. If a non-published page is encountered in a branch and the current 
            user is not allowed to access the page, that particular branch is not expanded any further. 
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.PublishedStatus">
      <summary>
            Set or get the level of "publish status" filtering that will be done.
            </summary>
      <remarks>
            By default it will be set to Published, i e only pages that are
            published and is within the valid publish date range will be included.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.RequiredAccess">
      <summary>
            Set or get the level of access rights filtering that will be done.
            </summary>
      <remarks>
            By default it will be set to AccessLevel.Read, i e only pages that you have
            read access to will be included.
            </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.PageSource">
      <summary>
            Set or get where pages will be fetched from, defaults to base page on databind.
            </summary>
      <remarks>Normally you never need to modify PageSource, it will automatically be set.</remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.RootLink">
      <summary>
            Gets the PageReference that represents the root of the tree.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.PropertyResolver">
      <summary>
            Gets or sets the <see cref="P:EPiServer.Web.WebControls.PageTreeData.PropertyResolver" /> that should be used by the current control instance.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.Expand(EPiServer.Core.PageReference)">
      <summary>
            Expand tree node, will automatically expand all parent nodes up to root page.
            </summary>
      <param name="openPage">Page node to expand.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.Collapse(EPiServer.Core.PageReference)">
      <summary>
            Collapse tree node, will automatically expand all parent nodes up to root page.
            </summary>
      <param name="closePage">Page node to collapse.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.GetRootLink">
      <summary>
            Gets a PageReference that represents the root of the tree. This method considers (in order) PageLinkProperty, PageLink and CurrentPage to establish the root. Override this method to add your own root lookup mechanism.
            </summary>
      <returns>A PageReference representing the root in the tree.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.CreateTemplateControl(EPiServer.Core.PageData,System.Web.UI.ITemplate,System.Int32,System.Boolean)">
      <summary>
            Creates a template control based on template which is served with data from a PageData instance. If template is null no Control is added.
            </summary>
      <param name="page">The page.</param>
      <param name="template">The template.</param>
      <param name="level">The indent level of the page.</param>
      <param name="hasChildren">Specifies whether the page has children or not.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.IsExpanded(EPiServer.Core.PageReference)">
      <summary>
            Determines whether the specified page is expanded. 
            A page is considered expanded if the page is parent of the current page or the same as the current page and is part of the hierarchy having <see cref="P:EPiServer.Web.WebControls.PageTreeData.RootLink" /> as root.
            </summary>
      <param name="page">The page.</param>
      <returns>
        <c>true</c> if the specified page is expanded; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.IsExpanded(EPiServer.Core.PageReference,EPiServer.Web.WebControls.PageHierarchyData)">
      <summary>
            Determines whether the specified page is expanded. 
            A page is considered expanded if the page is parent of the current page or the same as the current page and is part of the hierarchy having <see cref="P:EPiServer.Web.WebControls.PageTreeData.RootLink" /> as root.
            </summary>
      <param name="pageLink">The page link.</param>
      <param name="pageHierarchyData">The page hierarchy data, used to check for children. If null PageSource is used to check for children instead</param>
      <returns>
        <c>true</c> if the specified page link is expanded; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.GetExpandedPages(EPiServer.Core.PageReference)">
      <summary>
            Gets the expanded pages.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.PageLoader">
      <summary>
            Gets an <see cref="T:EPiServer.Web.WebControls.HierarchicalPageLoader" /> that is used for hierarchically loading pages.
            </summary>
      <remarks>
            By default, the loader will use the GetPage and GetChildren methods of the <see cref="T:EPiServer.DataFactory" /> to load a page and child pages for a given PageReference. This default behavior can be changed by setting the GetPageCallback and GetChildrenCallback properties. 
            </remarks>
      <value>A <see cref="T:EPiServer.Web.WebControls.HierarchicalPageLoader" />.</value>
    </member>
    <member name="E:EPiServer.Web.WebControls.PageTreeData.Filter">
      <summary>
            Exposes the Filter event of the underlying HierarchicalPageLoader.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.SetLoaderProperties">
      <summary>
            Sets the loader properties. This method must be called prior to handing out the loader to the Hierarchical object model (PageHierarchicalEnumerable, PageHierarchicalView etc.)
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.CreateFilters">
      <summary>
            Attaches a filter to remove pages marked to be invisible in menus.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.CreatePreSortFilters">
      <summary>
            Called once when the control needs access to pre sort filters used for modifying a <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <remarks>
        <para>Override this method to customize the population of filters to run before sorting occurs.</para>
        <para>Typical use is to add pages to create a combined list from two or more folders, or to remove pages based that should not appear in listing. For example by using <see cref="T:EPiServer.Filters.FilterCompareTo" /></para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.CreateSortFilters">
      <summary>
            Called once when the control needs access to sort filters used for modifying a <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <remarks>
        <para>Override this method to customize the population of sorting filters.</para>
        <para>Typically used to change the order between pages, for example with <see cref="T:EPiServer.Filters.FilterPropertySort" />.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.CreatePostSortFilters">
      <summary>
            Called once when the control needs access to post sort filters used for modifying a <see cref="T:EPiServer.Core.PageDataCollection" />.
            </summary>
      <remarks>
        <para>Override this method to customize the population of filters to run after sorting occurs.</para>
        <para>Typical use is to limit the number of pages, for example by using <see cref="T:EPiServer.Filters.FilterCount" /> or <see cref="T:EPiServer.Filters.FilterSkipCount" /></para>
      </remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.EvaluateHasChildren">
      <summary>
            Gets or sets a value indicating whether a page should do an evaluation to see if it has children.
            </summary>
      <value>
        <c>true</c> if  a page should do an evaluation to see if it has children; otherwise, <c>false</c>.</value>
      <remarks>Turning this check on results in a performance penalty since each page has to check for children.</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the PageTreeData.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator{EPiServer.Core.PageData}"></see> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.GetPage(EPiServer.Core.PageReference)">
      <summary>
            Retrieves a <see cref="T:EPiServer.Core.PageData" /> object with information about a page, based on the
            <see cref="T:EPiServer.Core.PageReference" /> parameter.
            </summary>
      <param name="pageLink">Reference to the page being retrieved</param>
      <returns>PageData object requested</returns>
      <example>
            The following code example demonstrates how to get a start page.
            <code source="../CodeSamples/EPiServer/Core/IPageSourceSamples.cs" region="GetPage1" lang="cs" />
            The following code example demonstrates how to get a page by ID.
            <code source="../CodeSamples/EPiServer/Core/IPageSourceSamples.cs" region="GetPage2" lang="cs" /></example>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.GetChildren(EPiServer.Core.PageReference)">
      <summary>
            Retrieve a <see cref="T:EPiServer.Core.PageData" /> listing
            </summary>
      <param name="pageLink">Reference to parent page</param>
      <returns>
            Returns a collection of pages directly below the page referenced by
            the <see cref="T:EPiServer.Core.PageReference" /> parameter.
            </returns>
      <example>
            The following code example demonstrates the usage of <b>GetChildren</b>.
            <code source="../CodeSamples/EPiServer/Core/IPageSourceSamples.cs" region="GetChildren" lang="cs" /></example>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageTreeData.CurrentPage">
      <summary>
            The current <see cref="T:EPiServer.Core.PageData" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.DataBind">
      <summary>
            Binds a data source to the invoked server control and all its child controls.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageTreeData.OnPreRender(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.PagingControl">
      <summary>
            Paging of page lists.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PagingControl" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.#ctor(EPiServer.Web.WebControls.PageListData)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PagingControl" /> class.
            </summary>
      <param name="source">The source.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.Source">
      <summary>
            Gets or sets the data source for the paging control.
            </summary>
      <value>The source.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.CurrentPagingItemIndex">
      <summary>
            The current paging item index, used when paging has been turned on, during databind and 
            between postbacks to track current paging item.
            The value is zero-bound (0 means first paging item, 1 is second paging item, and so on). 
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.CurrentPagingItemCount">
      <summary>
            Number of paging items, based on total number of pages in pagelist. 
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.PagesPerPagingItem">
      <summary>
            Number of pages that goes into one paging item, by default 7.
            </summary>
      <example>
            For example, if PagesPerPagingItem is 12, each paging item will list up to 12 pages.
            </example>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.FirstPagingItemText">
      <summary>
            The first paging item text, by default "Â«".
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.LastPagingItemText">
      <summary>
            The last paging item text, by default "Â»".
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.PrevPagingItemText">
      <summary>
            The previous paging item text, by default <![CDATA["<"]]>.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.NextPagingItemText">
      <summary>
            The next paging item text, by default <![CDATA[">"]]>.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.CssClassSelected">
      <summary>
            The CSS class that is used to format a selected paging item, by default "SelectedPagingItem".
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.CssClassUnselected">
      <summary>
            The CSS class that is used to format unselected paging items and the first/prev/next/last links.
            Default value is "UnselectedPagingItem".
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.CssClassPagingContainer">
      <summary>
            The CSS class that is used to format the container that holds the paging items. 
            Default value is "PagingContainer".
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.AutoPaging">
      <summary>
            Defines whether paging should be turned on or off, depending on how many paging items are generated.
            If the value is true, paging is turned off when there is at most 1 paging item, that holds all pages. 
            If the value is false, paging items are always shown, even if there is just one paging item that shows 
            all pages, the paging items is displayed. By default the value is true, that is, show no more than needed.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PagingControl.LinkCounter">
      <summary>
            A counter used when generating the paging links.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.CreatePagingLink(System.Int32,System.String,System.String)">
      <summary>
            Creates a link button used for paging.
            </summary>
      <param name="pagingIndex">Index of the paging link, 1 is first paging item, 2 second and so on.</param>
      <param name="text">The text displayed in the paging link</param>
      <param name="altText">Alternate text, displayed when hovering over link with mouse cursor</param>
      <returns>The paging link</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.AddUnselectedPagingLink(System.Int32,System.String,System.String,System.Boolean)">
      <summary>
            Create a paging link and add it to the controls collection.
            </summary>
      <param name="pagingIndex">Index of the paging link, 1 is first paging item, 2 second and so on.</param>
      <param name="text">The text displayed in the paging link</param>
      <param name="altText">Alternate text, displayed when hovering over link with mouse cursor</param>
      <param name="visible">Indicates if link should be visible</param>
      <returns>The paging link that was created</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.AddSelectedPagingLink(System.Int32,System.String,System.String)">
      <summary>
            Create the currently active paging link and add it to the controls collection.
            </summary>
      <param name="pagingIndex">Index of the paging link, 1 is first paging item, 2 second and so on.</param>
      <param name="text">The text displayed in the paging link</param>
      <param name="altText">Alternate text, displayed when hovering over link with mouse cursor</param>
      <returns>The paging link that was created</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.AddLinkSpacing">
      <summary>
            Adds a span tag containing a white space
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.AddLinkSpacing(System.Boolean)">
      <summary>
            Adds a span tag containing a white space
            </summary>
      <param name="visible">if set to <c>true</c> the span tag is set to visible</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.CreatePagingContainer">
      <summary>
            Create the container control that holds the PagingControl including all paging items, 
            called by the PagingControl's parent control.
            By default a Panel is created, where the CssClass is set to the value of the
            <see cref="P:EPiServer.Web.WebControls.PagingControl.CssClassPagingContainer" /> property.
            </summary>
      <returns>A control</returns>
      <remarks>
            The container control is added to the parent's Controls collection and the
            PagingControl is added to the container's Controls collection.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.PreparePagingControls(EPiServer.Core.PageDataCollection)">
      <summary>
            Prepares the paging control by trimming the page collection to what should be displayed according to 
            CurrentPagingItemIndex.
            </summary>
      <param name="pages">The page collection to trim</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.CreatePagingControls(EPiServer.Core.PageDataCollection)">
      <summary>
            Create paging header, paging items and paging footer.
            </summary>
      <param name="pages">Pages used to create paging items</param>
      <remarks>
            The paging items creation task is delegated to the 
            <see cref="M:EPiServer.Web.WebControls.PagingControl.CreatePagingItems(EPiServer.Core.PageDataCollection)" /> method.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.CreatePagingItems(EPiServer.Core.PageDataCollection)">
      <summary>
            Create paging items.
            </summary>
      <remarks>
            When overriding this method make sure to set LinkCounter = 0 in your method.
            </remarks>
      <param name="pages">Pages used to create paging items</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PagingControl.PagingItemChanged(System.Object,System.Web.UI.WebControls.CommandEventArgs)">
      <summary>
            Event handler to handle navigation in PagingControl
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.ParseValidator">
      <summary>
            Summary description for ParseValidator.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.ParseValidator.EvaluateIsValid">
      <summary>
            Overrides the EvaluateIsValid method.
            </summary>
      <returns>
            true if the value in the input control is valid; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.ParseValidator.Render(System.Web.UI.HtmlTextWriter)">
      <summary>
            Renders the specified output.
            </summary>
      <param name="output">The output.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.ParseValidator.IsDOPE">
      <summary>
            Set to true to customize error handling for DOPE
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.PartialList`1">
      <summary>
            A partial list of objects that supports DataSourceControl paging.
            </summary>
      <typeparam name="T">The object type to track</typeparam>
    </member>
    <member name="M:EPiServer.Web.WebControls.PartialList`1.#ctor(EPiServer.Web.WebControls.PartialList{`0}.LoadCallback)">
      <summary>
            Initializes a new instance of the PartialList&lt;T&gt; class which handles incremental load of an enumerable range of objects"
            </summary>
      <param name="loadCallback">A callback method used for loading a specified part of the range</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PartialList`1.#ctor(EPiServer.Web.WebControls.PartialList{`0}.LoadCallback,EPiServer.Web.WebControls.PartialList{`0}.FilterCallback)">
      <summary>
            Initializes a new instance of the PartialList&lt;T&gt; class which handles incremental load of an enumerable range of objects"
            </summary>
      <param name="loadCallback">A callback method used for loading a specified part of the range</param>
      <param name="filterCallback">A callback method used for filtering specific items in the range</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PartialList`1.GetRange(System.Int32,System.Int32)">
      <summary>
            GetRange returns a specified part of the set of objects, if the requested range has not been loaded the load and filter callback will be used to populate missing parts. 
            </summary>
      <param name="startIndex">the start index in the set of objects</param>
      <param name="maxRows">the maximum number of objects to return</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PartialList`1.PopulateRange(System.Int32,System.Int32)">
      <summary>
            Loads missing objects in the range specified by startIndex and maxRows
            </summary>
      <param name="startIndex">the start index in the set of objects</param>
      <param name="maxRows">the maximum number of objects to return</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.PartialList`1.Count">
      <summary>
            Gets the total number of loaded objects. Use this to set the total row count in a data source control.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.PartialList`1.LoadCallback">
      <summary>
            Callback that is used to load objects in a specific range of a set
            </summary>
      <param name="startIndex">the start index in the set of objects</param>
      <param name="maxRows">the maximum number of objects to return</param>
      <returns>a list of objects</returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.PartialList`1.FilterCallback">
      <summary>
            Callback used to filter a specific object.
            </summary>
      <param name="item">The object to filter</param>
      <returns>true to keep the object in the set, otherwise false</returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.PropertyCriteriaControl">
      <summary>
            Holder of criteria information used by property searching
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyCriteriaControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyCriteriaControl" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyCriteriaControl.#ctor(EPiServer.PropertyCriteria)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyCriteriaControl" /> class.
            </summary>
      <param name="criteria">The criteria.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyCriteriaControl.Name">
      <summary>
            Name of the criteria.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyCriteriaControl.Value">
      <summary>
            Value of criteria
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyCriteriaControl.Type">
      <summary>
            Value of criteria
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyCriteriaControl.Condition">
      <summary>
            Comparisation condition to use
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyCriteriaControl.InnerCriteria">
      <summary>
            The inner <see cref="T:EPiServer.PropertyCriteria" />
            that holds the information.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyCriteriaControl.IsNull">
      <summary>
            Test for value set to null
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyCriteriaControl.Required">
      <summary>
            Is this criteria required
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.PropertyDataCollectionControl">
      <summary>
            Used to render forms for PropertyDataCollection.
            </summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.PropertyDataCollectionControl.TableCreated">
      <summary>
            Event raised before any rows will be added in <see cref="M:EPiServer.Web.WebControls.PropertyDataCollectionControl.CreatePropertyCollectionTable" /></summary>
    </member>
    <member name="E:EPiServer.Web.WebControls.PropertyDataCollectionControl.TableRowAdded">
      <summary>
            Event raised after each row is added in <see cref="M:EPiServer.Web.WebControls.PropertyDataCollectionControl.CreatePropertyCollectionTable" /></summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyDataCollectionControl.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyDataCollectionControl.DataBind">
      <summary>
            Binds a data source to the invoked server control and all its child controls.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyDataCollectionControl.Controls">
      <summary>
            Gets a <see cref="T:System.Web.UI.ControlCollection" /> object that represents the child controls for a specified server control in the UI hierarchy.
            </summary>
      <returns>The collection of child controls for the specified server control.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyDataCollectionControl.SetupPropertyControls(System.Web.UI.Control)">
      <summary>
            Calls SetupControl() for all child controls implementing IPropertyControl.
            </summary>
      <param name="control">The control which contains the controls.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyDataCollectionControl.CreatePropertyCollectionTable">
      <summary>
            Creates a <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> with the contents of <see cref="P:EPiServer.Web.WebControls.PropertyDataCollectionControl.Collection" />.
            </summary>
      <returns>A HtmlTable with properties</returns>
      <remarks>If <see cref="P:EPiServer.Web.WebControls.PropertyDataCollectionControl.Collection" /> is empty it will return <c>null</c>.</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyDataCollectionControl.SetupPropertyControl(EPiServer.Core.PropertyData)">
      <summary>
            Adds an IPropertyControl that handles the edit user interface for the given property.
            </summary>
      <param name="property">The property that the user interface should handle.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyDataCollectionControl.GenerateCommonImage">
      <summary>
            Generates the common image for properties that is not unique per language.
            </summary>
      <returns>The common image for properties that is not unique per language.</returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyDataCollectionControl.ShowLanguageIndication">
      <summary>
            Gets or sets a value indicating whether [show language indication].
            </summary>
      <value>
        <c>true</c> if [show language indication]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyDataCollectionControl.DisableNonLanguageSpecific">
      <summary>
            Gets or sets a value indicating whether non language specific fields should be disabled.
            </summary>
      <value>
        <c>true</c> if non language specific fields should be disabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyDataCollectionControl.RenderDynamicProperties">
      <summary>
            If dynamic properties in <see cref="P:EPiServer.Web.WebControls.PropertyDataCollectionControl.Collection" /> should be rendered.
            </summary>
      <value>
        <c>true</c> if dynamic properties should be rendered; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyDataCollectionControl.Collection">
      <summary>
            The collection to render.
            </summary>
      <value>The data.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyDataCollectionControl.CaptionTemplate">
      <summary>
            Template used for rendering property labels
            </summary>
      <value>The caption template.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyDataCollectionControl.MasterLanguageName">
      <summary>
            Gets or sets the name of the master language.
            </summary>
      <value>
            The name of the master language.
            </value>
    </member>
    <member name="T:EPiServer.Web.WebControls.PropertyTableEventArgs">
      <summary>
            Event argument used in <see cref="T:EPiServer.Web.WebControls.PropertyDataCollectionControl" /> when building the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyTableEventArgs.#ctor(System.Web.UI.HtmlControls.HtmlTable)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyTableEventArgs" /> class.
            </summary>
      <param name="table">The control that has just been created.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyTableEventArgs.Table">
      <summary>
            Gets the control that has just been created.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.PropertyTableRowEventArgs">
      <summary>
            Event argument used in <see cref="T:EPiServer.Web.WebControls.PropertyDataCollectionControl" /> when building the <see cref="T:System.Web.UI.HtmlControls.HtmlTable" /> within.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyTableRowEventArgs.#ctor(System.String,System.Web.UI.HtmlControls.HtmlTableRow)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyTableRowEventArgs" /> class.
            </summary>
      <param name="propertyName">Name of the property added.</param>
      <param name="tableRow">The table row added.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyTableRowEventArgs.PropertyName">
      <summary>
            Gets the name of the property added to the <see cref="P:EPiServer.Web.WebControls.PropertyTableRowEventArgs.TableRow" />.
            </summary>
      <value>
            The name of the property.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyTableRowEventArgs.TableRow">
      <summary>
            Gets the table row added.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.PropertyEditorSettings">
      <summary>
            Container class to be able to define editor settings on web control <c>EPiServer:Property</c></summary>
      <remarks>These settings can vary from property to property, consult the documentation for each property for more details on custom properties.</remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyEditorSettings.ObjectSerializerFactory">
      <summary>
            Gets or sets the object serializer to use when serializing to Json.
            </summary>
      <value>The object serializer.</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyEditorSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyEditorSettings" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyEditorSettings.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyEditorSettings" /> class.
            </summary>
      <param name="json">JSON values that will be used to initialize the Settings collection.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyEditorSettings.Settings">
      <summary>
            The underlying dictionary used to store all settings
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyEditorSettings.GetAttribute(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyEditorSettings.SetAttribute(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyEditorSettings.RemoveAttribute(System.String)">
      <summary>
            Removes the attribute specified by the key.
            </summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyEditorSettings.HasSettings">
      <summary>
            Determines whether the Settings collection has any settings.
            </summary>
      <returns>
        <c>true</c> if the Settings collection has settings; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyEditorSettings.HasSetting(System.String)">
      <summary>
            Determines whether the Settings collection has the setting specified by the key.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <c>true</c> if Settings collection has the setting; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyEditorSettings.FromJson(System.String)">
      <summary>
            Merges the data from the JSON string onto the Settings collection.
            </summary>
      <param name="json">string in JSON format.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyEditorSettings.ToJson">
      <summary>
            Serializes the Settings collection to JSON
            </summary>
      <returns>string in JSON format.</returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.PropertyParameter">
      <summary>
            Binds a EPiServer property to a parameter object.
            </summary>
      <remarks>
            You can use the PropertyParameter to bind the value of an EPiServer property, such as PageName, to a parameter used in a paremeterized DataSource scenarios.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyParameter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyParameter" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyParameter.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyParameter" /> class.
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="propertyName">The name of the EPiServer property.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyParameter.#ctor(EPiServer.Web.WebControls.PropertyParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyParameter" /> class as a copy of another.
            </summary>
      <param name="original">The original.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyParameter.Clone">
      <summary>
            Returns a duplicate of the current <see cref="T:System.Web.UI.WebControls.Parameter"></see> instance.
            </summary>
      <returns>
            A <see cref="T:System.Web.UI.WebControls.Parameter"></see> that is an exact duplicate of the current one.
            </returns>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyParameter.PropertyName">
      <summary>
            Gets or sets the name of the property to bind to.
            </summary>
      <value>The name of the property to bind to.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyParameter.ConvertPageReferenceToInt32">
      <summary>
            Gets or sets a value indicating whether a PageReference type property should be converted to an System.Int32 when evaluated.
            </summary>
      <value>
        <c>true</c> if a conversion should be performed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyParameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)">
      <summary>
            Updates and returns the value of the <see cref="T:System.Web.UI.WebControls.Parameter"></see> object.
            </summary>
      <param name="context">The current <see cref="T:System.Web.HttpContext"></see> of the request.</param>
      <param name="control">The <see cref="T:System.Web.UI.Control"></see> the parameter is bound to. If the parameter is not bound to a control, the control parameter is ignored.</param>
      <returns>
            An object that represents the updated and current value of the parameter.
            </returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.PropertyRenderSettings">
      <summary>
            Container class to be able to define render settings on web control <c>EPiServer:Property</c></summary>
      <remarks>These settings can vary from property to property, consult the documentation for each property for more details on custom properties.</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyRenderSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyRenderSettings" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyRenderSettings.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.PropertyRenderSettings" /> class.
            </summary>
      <param name="json">json values to intialize the attribute collection with.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyRenderSettings.Tag">
      <summary>
        <see cref="F:EPiServer.Web.WebControls.RenderSettings.Tag" />
      </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyRenderSettings.CustomTag">
      <summary>
        <see cref="F:EPiServer.Web.WebControls.RenderSettings.CustomTag" />
      </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyRenderSettings.CssClass">
      <summary>
        <see cref="F:EPiServer.Web.WebControls.RenderSettings.CssClass" />
      </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyRenderSettings.ChildrenCustomTag">
      <summary>
        <see cref="F:EPiServer.Web.WebControls.RenderSettings.ChildrenCustomTag" />
      </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyRenderSettings.ChildrenCssClass">
      <summary>
        <see cref="F:EPiServer.Web.WebControls.RenderSettings.ChildrenCssClass" />
      </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.PropertyTemplateContainer">
      <summary>
            Used for template context on property level
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PropertyTemplateContainer.#ctor(EPiServer.Core.PropertyData)">
      <summary>
            Constructor taking property as argument
            </summary>
      <param name="property">Property to host</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyTemplateContainer.Property">
      <summary>
            Property that is being hosted
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PropertyTemplateContainer.DataItem">
      <summary>
            To support same syntax as <see cref="T:System.Web.UI.WebControls.Repeater" /> and others the current property
            is also available through DataItem
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.RenderSettings">
      <summary>
            Definies constants for well known custom settings.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.RenderSettings.Tag">
      <summary>
            The string used to specify which template that should be used when rendering a content.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.RenderSettings.HasContainerElement">
      <summary>
            The string used to specify whether properties should be rendered within a container.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.RenderSettings.CustomTag">
      <summary>
            The string used to specify which tag that should be used when rendering a content.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.RenderSettings.CssClass">
      <summary>
            The string used to specify which css class attribute that should be used when rendering a content.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.RenderSettings.ChildrenCustomTag">
      <summary>
            The string used to specify which tag that should be used when rendering a content.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.RenderSettings.ChildrenCssClass">
      <summary>
            The string used to specify which css class attribute that should be used when rendering a content.
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.RenderSettings.MissingRenderer">
      <summary>
            The string used to specify that a content is currently missing a renderer
            </summary>
    </member>
    <member name="F:EPiServer.Web.WebControls.RenderSettings.CircularReference">
      <summary>
            The string used to specify that a content is will not be rendered because it would cause a circular reference.
            </summary>
    </member>
    <member name="T:EPiServer.Web.WebControls.SoftLinkDataSource">
      <summary>
            Provides SoftLink data to DataBoundControl implementations.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.SoftLinkDataSource.SoftLinkRepository">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Web.PropertyResolver" /> that should be used by the current control instance.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.SoftLinkDataSource.PageLink">
      <summary>
            Gets or sets a reference to a page that will scope the set of SoftLinks
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.SoftLinkDataSource.ListReferencing">
      <summary>
            Gets or sets a value indicating whether links referencing the page specified by PageLink should be listed. If not, all links present in the page specified by PageLink are listed which is the default behaviour.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.SoftLinkDataSource.CanDelete">
      <summary>
            Gets a value indicating whether SoftLinkDataSource supports instance deletion, which it does not.
            </summary>
      <value>false</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.SoftLinkDataSource.CanInsert">
      <summary>
            Gets a value indicating whether SoftLinkDataSource supports instance insertions, which it does not.
            </summary>
      <value>false</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.SoftLinkDataSource.CanUpdate">
      <summary>
            Gets a value indicating whether SoftLinkDataSource supports instance updates, which it does not.
            </summary>
      <value>false</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.SoftLinkDataSource.ListItems">
      <summary>
            Override to return a list of instances.
            </summary>
      <returns>a list of instances.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.SoftLinkDataSource.CreateItem(System.Collections.Generic.List{EPiServer.DataAbstraction.SoftLink})">
      <summary>
            Creates a new SoftLink instance
            </summary>
      <param name="items">the list of current instances in the given scope.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.SoftLinkDataSource.LoadItem(System.String)">
      <summary>
            Load an item with the specified key. Is not supported by SoftLinkDataSource
            </summary>
      <param name="key">The key of the instance to load.</param>
      <returns>NotSupportedException</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.SoftLinkDataSource.SaveItem(EPiServer.DataAbstraction.SoftLink)">
      <summary>
            Saves an item. Is not supported by SoftLinkDataSource. Throws NotSupportedException
            </summary>
      <param name="item">The item to persist.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.SoftLinkDataSource.DeleteItem(EPiServer.DataAbstraction.SoftLink)">
      <summary>
            Deletes an item. Is not supported by SoftLinkDataSource. Throws NotSupportedException
            </summary>
      <param name="item">The item to delete.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.StaticValidator">
      <summary>
            Validator that can be used to indicate validation errors that have been handled programmatically.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.StaticValidator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.StaticValidator" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.StaticValidator.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.StaticValidator" /> class.
            </summary>
      <param name="errorMessage">The error message.</param>
      <remarks>The error message will by default be HTML encoded</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.StaticValidator.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.StaticValidator" /> class.
            </summary>
      <param name="errorMessage">The error message.</param>
      <param name="htmlEncodeErrorMessage">If the error message should be encoded</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.StaticValidator.Render(System.Web.UI.HtmlTextWriter)">
      <summary>
            Writes the error message inside an &lt;span class=\"errormessage\"&gt; tag
            </summary>
      <param name="output">The output.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.StaticValidator.ControlPropertiesValid">
      <summary>
            Determines whether the control specified by the <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> property is a valid control.
            <remarks>
            Since this control is programatically added when an errormessage should be displayed it always returns true. 
            </remarks></summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.StaticValidator.EvaluateIsValid">
      <summary>
            When overridden in a derived class, this method contains the code to determine whether the value in the input control is valid.
            </summary>
      <remarks>
            Since this control is programatically added when an errormessage should be displayed it always returns false. 
            </remarks>
      <returns>
            true if the value in the input control is valid; otherwise, false.
            </returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.TabDefinitionDataSource">
      <summary>
            DataSource control that handles TabDefinition objects
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.TabDefinitionDataSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.TabDefinitionDataSource" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.TabDefinitionDataSource.CreateItem(System.Collections.Generic.List{EPiServer.DataAbstraction.TabDefinition})">
      <summary>
            Creates a new TabDefinition
            </summary>
      <param name="items">the list of current instances in the given scope.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.TabDefinitionDataSource.ListItems">
      <summary>
            Returns a list of all current tab definitions
            </summary>
      <returns>a list of instances.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.TabDefinitionDataSource.LoadItem(System.Int32)">
      <summary>
            Loads a specific tab definition with the specified key.
            </summary>
      <param name="key">The key of the instance to load.</param>
      <returns>A object instance.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.TabDefinitionDataSource.SaveItem(EPiServer.DataAbstraction.TabDefinition)">
      <summary>
            Saves an TabDefinition
            </summary>
      <param name="item">The item to persist.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.TabDefinitionDataSource.DeleteItem(EPiServer.DataAbstraction.TabDefinition)">
      <summary>
            Deletes an TabDefinition
            </summary>
      <param name="item">The item to delete.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.ThemeCss">
      <summary>
            A link to a css file that is located in the theming folders.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.ThemeCss.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.ThemeCss" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.ThemeCss.Href">
      <summary>
            Gets or sets the URL target of the link specified in the <see cref="T:System.Web.UI.HtmlControls.HtmlLink" /> control.
            </summary>
      <value>The URL target of the link</value>
      <returns>The URL target of the link.</returns>
    </member>
    <member name="T:EPiServer.Web.WebControls.ThemeImage">
      <summary>
            An image web control that has sets the search path for the image based on theming.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.ThemeImage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.ThemeImage" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.ThemeImage.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.ThemeImage" /> class.
            </summary>
      <param name="imageUrl">The image URL based from the current theme.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.ThemeImage.ImageUrl">
      <summary>
            Gets or sets the location of an image to display in the <see cref="T:System.Web.UI.WebControls.Image" /> control.
            </summary>
      <value>
      </value>
      <returns>The location of an image to display in the <see cref="T:System.Web.UI.WebControls.Image" /> control.</returns>
      <remarks>Should be based from the root of the current theme.</remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.ThemeImage.OnPreRender(System.EventArgs)">
      <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.ThemeImage.Render(System.Web.UI.HtmlTextWriter)">
      <summary>
            Renders the control to the specified HTML writer.
            </summary>
      <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the control content.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.ThemeImage.RichToolTip">
      <summary>
            Gets or sets the rich tool tip.
            </summary>
      <value>The rich tool tip.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.XmlNameValidator">
      <summary>
            A validator control that checks that the validated controls value conforms 
            with naming rules for av XML identifier.  
            </summary>
      <remarks>
            Since a lot of the names used by EPiServer needs to be mapped to XML files 
            (for example to support the translation functions) the names needs to be 
            compatible with XML naming rules. 
            </remarks>
    </member>
    <member name="M:EPiServer.Web.WebControls.XmlNameValidator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.XmlNameValidator" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.XmlNameValidator.DisplayName">
      <summary>
            Gets or sets the display name.
            </summary>
      <value>The display name.</value>
    </member>
    <member name="T:EPiServer.Web.WebControls.PageVersionDataSource">
      <summary>
            Provides PageVersion data to DataBoundControl implementations.
            </summary>
      <remarks>This class does not use the GenericDataSource base class since it lacks a public default ctor.</remarks>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageVersionDataSource.PageLink">
      <summary>
            Gets or sets a references to the page to view and edit versions for
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.PageVersionDataSource.LanguageBranch">
      <summary>
            Gets or sets a language branch to view and edit versions for
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageVersionDataSource.CreateItem(System.Collections.Generic.List{EPiServer.DataAbstraction.PageVersion})">
      <summary>
            Creation of <see cref="T:EPiServer.DataAbstraction.PageVersion" /> is not supported.
            </summary>
      <remarks>Since PageVersionDataSource not support creation of items it will alwys throw <exception cref="T:System.NotSupportedException" /></remarks>
      <param name="items">the list of current instances in the given scope.</param>
      <returns>
      </returns>
      <exception cref="T:System.NotSupportedException">Is always thrown</exception>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageVersionDataSource.ListItems">
      <summary>
            Lists all page versions for specified <see cref="P:EPiServer.Web.WebControls.PageVersionDataSource.PageLink" />. If
            <see cref="P:EPiServer.Web.WebControls.PageVersionDataSource.LanguageBranch" /> is given only version for that language is listed otherwise
            all versions for all languages are listed.
            </summary>
      <returns>a list of instances.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageVersionDataSource.LoadItem(EPiServer.Core.PageReference)">
      <summary>
            Loads a specific page version.
            </summary>
      <param name="key">The key of the instance to load.</param>
      <returns>A object instance.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageVersionDataSource.SaveItem(EPiServer.DataAbstraction.PageVersion)">
      <summary>
            Updates of <see cref="T:EPiServer.DataAbstraction.PageVersion" /> is not supported through PageVersionDataSource.
            </summary>
      <param name="item">The item to persist.</param>
      <exception cref="T:System.NotSupportedException">Is always thrown</exception>
    </member>
    <member name="M:EPiServer.Web.WebControls.PageVersionDataSource.DeleteItem(EPiServer.DataAbstraction.PageVersion)">
      <summary>
            Deletes a specific <see cref="T:EPiServer.DataAbstraction.PageVersion" /></summary>
      <param name="item">The item to delete.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.SubscriptionDataSource">
      <summary>
            Provides Subscription data to DataBoundControl implementations.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.SubscriptionDataSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.SubscriptionDataSource" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.SubscriptionDataSource.SubscriptionService">
      <summary>
            Gets or sets the subscription service.
            </summary>
      <value>
            The subscription service.
            </value>
    </member>
    <member name="P:EPiServer.Web.WebControls.SubscriptionDataSource.PageLink">
      <summary>
            Gets or sets a reference to the root page for subscription.
            <remarks>This property is required for non EPiServer pages. If no page link is specified the data source control attempts to load the root subsciption information from the current EPiServer page.</remarks></summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.SubscriptionDataSource.Language">
      <summary>
            Gets or sets the language for which subscriptions should be listed
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.SubscriptionDataSource.CanInsert">
      <summary>
            Indicates whether a SubscriptionDataSource supports instance inserts which it does not.
            </summary>
      <value>false</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.SubscriptionDataSource.CanUpdate">
      <summary>
            Indicates whether a SubscriptionDataSource supports instance updates which it does not.
            </summary>
      <value>false</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.SubscriptionDataSource.CanDelete">
      <summary>
            Indicates whether a SubscriptionDataSource supports instance deletions which it does not.
            </summary>
      <value>false</value>
    </member>
    <member name="M:EPiServer.Web.WebControls.SubscriptionDataSource.CreateItem(System.Collections.Generic.List{EPiServer.Web.WebControls.UserSubscriptionInfo})">
      <summary>
            SubscriptionDataSource does not support creation of items
            </summary>
      <param name="items">the list of current instances in the given scope.</param>
      <returns>NotSupportedException</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.SubscriptionDataSource.ListItems">
      <summary>
            Lists all subscription pages
            </summary>
      <returns>a list of instances.</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.SubscriptionDataSource.LoadItem(System.Int32)">
      <summary>
            Not supported by SubscriptionDataSource. Will throw NotSupportedException
            </summary>
      <param name="key">The item to load.</param>
      <returns>NotSupportedException</returns>
    </member>
    <member name="M:EPiServer.Web.WebControls.SubscriptionDataSource.SaveItem(EPiServer.Web.WebControls.UserSubscriptionInfo)">
      <summary>
            Not supported by SubscriptionDataSource. Will throw NotSupportedException
            </summary>
      <param name="item">The item to persist.</param>
    </member>
    <member name="M:EPiServer.Web.WebControls.SubscriptionDataSource.DeleteItem(EPiServer.Web.WebControls.UserSubscriptionInfo)">
      <summary>
            Not supported by SubscriptionDataSource. Will throw NotSupportedException
            </summary>
      <param name="item">The item to delete.</param>
    </member>
    <member name="T:EPiServer.Web.WebControls.SubscriptionList">
      <summary>
            Display a list of subscription options
            </summary>
      <example>
            If you want to change the presentation of the code produced by this control 
            you can override the CreateChildControls and SaveSubscriptions methods.
            <code source="../CodeSamples/EPiServer/WebControls/SubscriptionListSamples.cs" region="Override" /></example>
    </member>
    <member name="M:EPiServer.Web.WebControls.SubscriptionList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.WebControls.SubscriptionDataSource" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.SubscriptionList.SubscriptionService">
      <summary>
            Gets or sets the subscription service that fetches subsciption pages.
            </summary>
      <value>
            The subscription service.
            </value>
    </member>
    <member name="M:EPiServer.Web.WebControls.SubscriptionList.PopulatePages(EPiServer.Core.PageDataCollection)">
      <summary>
            Called once when the control is populating the collection of pages
            </summary>
      <param name="pages">Collection to populate with pages</param>
      <remarks>
            Override this method to customize the population of pages, if this control has been data bound the collection may already contain pages.
            </remarks>
      <example>Example how a list control may choose to implement this method
            <code lang="C#">
            protected override void PopulatePages(PageDataCollection pages)
            {
            if(PageLink.ID!=0)
            GetChildren(PageLink,pages);
            }
            </code></example>
    </member>
    <member name="M:EPiServer.Web.WebControls.SubscriptionList.CreateChildControls">
      <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
    </member>
    <member name="M:EPiServer.Web.WebControls.SubscriptionList.SaveSubscriptions(System.Object,System.EventArgs)">
      <summary>
            Saves the subscriptions.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="P:EPiServer.Web.WebControls.SubscriptionList.Language">
      <summary>
            Language for the subscription.
            </summary>
      <remarks>Only used for multilanguage</remarks>
    </member>
    <member name="T:EPiServer.Web.WebControls.UserSubscriptionInfo">
      <summary>
            wrapper class to hold data about subscription status for a specific page.
            </summary>
    </member>
    <member name="P:EPiServer.Web.WebControls.UserSubscriptionInfo.Page">
      <summary>
            The page that is subscribed for
            </summary>
      <value>The page.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.UserSubscriptionInfo.Subscribed">
      <summary>
            Gets or sets a value indicating whether the page associated with this instance is subscribed for.
            </summary>
      <value>
        <c>true</c> if subscribed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.UserSubscriptionInfo.ID">
      <summary>
            Gets the ID fo the page
            </summary>
      <value>The ID.</value>
    </member>
    <member name="P:EPiServer.Web.WebControls.UserSubscriptionInfo.PageName">
      <summary>
            Gets the name of the page.
            </summary>
      <value>The name of the page.</value>
    </member>
    <member name="T:EPiServer.Web.DisplayChannelService">
      <summary>
            Service that handles <see cref="T:EPiServer.Web.DisplayChannel" /> instances.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Web.DisplayChannelService.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.DisplayChannelService" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Web.DisplayChannelService.Channels">
      <summary>
            Gets all registered channels.
            </summary>
      <value>The channels.</value>
    </member>
    <member name="M:EPiServer.Web.DisplayChannelService.RegisterDisplayMode(System.Web.WebPages.IDisplayMode)">
      <summary>
            Registers an <see cref="T:System.Web.WebPages.IDisplayMode" /> instance as an <see cref="T:EPiServer.Web.DisplayChannel" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayChannelService.RegisterDisplayMode(System.Web.WebPages.IDisplayMode,System.Int32)">
      <summary>
            Registers an <see cref="T:System.Web.WebPages.IDisplayMode" /> instance as an <see cref="T:EPiServer.Web.DisplayChannel" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayChannelService.RegisterDisplayMode(System.Web.WebPages.IDisplayMode,System.Int32,System.String)">
      <summary>
            Registers an <see cref="T:System.Web.WebPages.IDisplayMode" /> instance as an <see cref="T:EPiServer.Web.DisplayChannel" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayChannelService.GetActiveChannels(System.Web.HttpContextBase)">
      <summary>
            Gets all <see cref="T:EPiServer.Web.DisplayChannel" /> instances that are considered active for specified <paramref name="context" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayResolutionServiceExtension.Initialize(EPiServer.Web.DisplayResolutionService,EPiServer.Framework.TypeScanner.ITypeScannerLookup,EPiServer.ServiceLocation.IServiceLocator)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.DisplayResolutionService" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayResolutionServiceExtension.Initialize(EPiServer.Web.DisplayResolutionService,EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>
            Initializes this instance
            </summary>
    </member>
    <member name="M:EPiServer.Web.DisplayResolutionServiceExtension.Uninitialize(EPiServer.Web.DisplayResolutionService,EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>
            Uninitializes the specified context.
            </summary>
    </member>
    <member name="T:EPiServer.Web.FriendlyUrlRewriteProvider">
      <summary>
            The UrlRewriteProvider that hanldes rewriting of urls.
            </summary>
    </member>
    <member name="F:EPiServer.Web.FriendlyUrlRewriteProvider._log">
      <summary>
            A logger instance.
            </summary>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.FriendlyUrlRewriteProvider" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.#ctor(EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.DataAbstraction.PageTypeRepository,EPiServer.Web.TemplateResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.FriendlyUrlRewriteProvider" /> class.
            </summary>
      <param name="languageBranchRepository">The language branch repository.</param>
      <param name="pageTypeRepository">The page type repository.</param>
      <param name="templateResolver">The template resolver.</param>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.ConvertToInternal(EPiServer.UrlBuilder,System.Object@)">
      <summary>
            Converts to internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            There is no support for changing encoding when converting to internal, since there is no requirement for this.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.TryConvertToInternal(EPiServer.UrlBuilder,System.Globalization.CultureInfo@,System.Object@)">
      <summary>
            Converts to internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="preferredCulture">The preferred culture if it can be dereived from the URL or the resource that is requested; otherwise null.</param>
      <param name="internalObject">The internal object.</param>
      <returns>
        <c>true</c> if the URL is converted to the internal format; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.ConvertToExternal(EPiServer.UrlBuilder,System.Object,System.Text.Encoding)">
      <summary>
            Converts from internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <param name="toEncoding">The current encoding</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            When converting to external, we may need to change the encoding used for escaped characters in the URL to conform
            to response encoding requirements which may differ from the internally stored format - which should always be UTF-8.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.GetHtmlRewriter">
      <summary>
            Get's an instance of a Html-rewriter to use when emitting HTML from EPiServer.
            </summary>
      <returns>
            A new instance of a HtmlRewriteToExternal-derived class
            </returns>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes
            specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
      <exception cref="T:System.InvalidOperationException">
            An attempt is made to call System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
            on a provider after the provider has already been initialized.
            </exception>
      <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.ConvertToInternalInternal(EPiServer.UrlBuilder,System.Object@)">
      <summary>
            Converts an URL to internal EPiServer-classic format. This method is the sole definition of the mapping
            between a rewritten "Friendly" URL and the internal format.
            </summary>
      <param name="internalObject">The internal representation, if any. Typically may be a PageReference.</param>
      <param name="url">The URL.</param>
      <returns>true if any conversion actually ocurred</returns>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.IsVppPath(EPiServer.UrlBuilder,System.Boolean@)">
      <summary>
            Determines whether the specified URL is handled by a virtual path provider.
            </summary>
      <param name="url">The URL.</param>
      <param name="isModified">if set to <c>true</c> [is modified].</param>
      <returns>
        <c>true</c> if the specified URL is handled by a virtual path provider; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.ConvertToExternalInternal(EPiServer.UrlBuilder,System.Object,System.Text.Encoding)">
      <summary>
            Converts from internal EPiServer classic to the external 'friendly' URL representation.
            </summary>
      <param name="internalObject">The internal representation of the object, if any. Typically it may be a PageReference.</param>
      <param name="url">The URL.</param>
      <param name="toEncoding">To encoding.</param>
      <returns>True if any changes done to the url, False otherwise.</returns>
      <remarks>
            This is the only method that defines this mapping. It includes all globally valid rules for this
            transformation in the context of EPiServer, but not rules dependent on for example on the current
            running mode, i.e. view mode, edit mode etc or similar. The conversion must take language preferences
            into account when determining language.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.GetPageFromStartByPath(System.String,EPiServer.DataAbstraction.LanguageBranch)">
      <summary>
            Get a page based on URL as defined by the PageData.URLSegment. Try begin with both start page and root page.
            </summary>
      <param name="path">The friendly URL path to find a page for</param>
      <param name="languageBranch">The language branch we prefer</param>
      <returns>A PageData object that was found based on the URL, or NULL if not found</returns>
      <remarks>A language branch prefix will always be scanned and if found used as a language selector for the returned page</remarks>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.GetFromStartByPath(System.String,EPiServer.DataAbstraction.LanguageBranch)">
      <summary>
            Get a page based on URL as defined by the PageData.URLSegment. Try begin with both start page and root page.
            </summary>
      <param name="path">The friendly URL path to find a page for</param>
      <param name="languageBranch">The language branch we prefer</param>
      <returns>A PageData object that was found based on the URL, or NULL if not found</returns>
      <remarks>A language branch prefix will always be scanned and if found used as a language selector for the returned page</remarks>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.GetLanguageBranchAndPath(System.String,System.String@)">
      <summary>
            Try to find if the path is prefixed with a URLSegment from a language branch
            </summary>
      <param name="pathRootRelative">The root-relative path to interpret</param>
      <param name="pathRelative">The remaining path after root dir, language prefix, and Friendly URL extension has been removed.</param>
      <returns>The language branch or null if not found or no globalization.</returns>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.GetLanguageBranchAndPath(System.String,EPiServer.DataAbstraction.ILanguageBranchRepository,System.String@)">
      <summary>
            Try to find if the path is prefixed with a URLSegment from a language branch
            </summary>
      <param name="languageBranchRepository">The language branch repository.</param>
      <param name="pathRootRelative">The root-relative path to interpret</param>
      <param name="pathRelative">The remaining path after root dir, language prefix, and Friendly URL extension has been removed.</param>
      <returns>
            The language branch or null if not found or no globalization.
            </returns>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.GetPageBySegments(EPiServer.Core.PageReference,System.String[],System.String)">
      <summary>
            Gets the page by segments.
            </summary>
      <param name="rootPageRef">The root page ref.</param>
      <param name="segments">The segments.</param>
      <param name="languageCode">The lang code.</param>
      <returns>
            The page as found by following the path of the segments
            </returns>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.GetBySegments(EPiServer.Core.ContentReference,System.String[])">
      <summary>
            Gets the page by segments.
            </summary>
      <param name="rootPageRef">The root page ref.</param>
      <param name="segments">The segments.</param>
      <returns>
            The page as found by following the path of the segments
            </returns>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.GetFriendlyPagePath(EPiServer.Core.PageReference,System.String)">
      <summary>
            Gets the friendly page path.
            </summary>
      <param name="pageReference">The page reference.</param>
      <param name="currentLanguageBranch">The current language branch.</param>
      <returns>A path representing the page, possibly with an extension</returns>
      <exception cref="T:EPiServer.Core.EPiServerException">If not possible to find a Friendly path</exception>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.GetFriendlyPagePath(EPiServer.Core.ContentReference,System.String,EPiServer.IContentRepository,EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.ILanguageBranchRepository)">
      <summary>
            Gets the friendly page path.
            </summary>
      <param name="contentReference">The page reference.</param>
      <param name="currentLanguageBranch">The current language branch.</param>
      <param name="contentRepository">The page repository.</param>
      <param name="permanentLinkMapper">The permanent link mapper.</param>
      <param name="languageBranchRepository">The language branch repository.</param>
      <returns>
            A path representing the page, possibly with an extension
            </returns>
      <exception cref="T:EPiServer.Core.EPiServerException">If not possible to find a Friendly path</exception>
    </member>
    <member name="M:EPiServer.Web.FriendlyUrlRewriteProvider.ShouldRewritePathForContent(EPiServer.Core.IContent,EPiServer.UrlBuilder)">
      <summary>
            Determine if the incoming request for <paramref name="content" /> should be rewritten to <paramref name="url" />.
            </summary>
      <remarks>
            Default implementation ony rewrites for pages. Other types of content are left untouched and thereby handled by routing.
            </remarks>
      <param name="content">The content.</param>
      <param name="url">The URL.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.NullUrlRewriteProvider">
      <summary>
            A RewriteProvider that does no actual rewrite but raises the corresponding events during parsing.
            </summary>
    </member>
    <member name="M:EPiServer.Web.NullUrlRewriteProvider.ConvertToInternal(EPiServer.UrlBuilder,System.Object@)">
      <summary>
            Converts to internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL.</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            There is no support for changing encoding when converting to internal, since there is no requirement for this.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.NullUrlRewriteProvider.ConvertToExternal(EPiServer.UrlBuilder,System.Object,System.Text.Encoding)">
      <summary>
            Converts from internal, without regard to the context of internal/external URL.
            </summary>
      <param name="url">The URL to possibly rewrite</param>
      <param name="internalObject">An optional internal representation of the URL, typically a PageReference</param>
      <param name="toEncoding">The current encoding</param>
      <returns>true if any modifications were made</returns>
      <remarks>
            When converting to external, we may need to change the encoding used for escaped characters in the URL to conform
            to response encoding requirements which may differ from the internally stored format - which should always be UTF-8.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.NullUrlRewriteProvider.GetHtmlRewriter">
      <summary>
            Get's an instance of a Html-rewriter to use when emitting HTML from EPiServer.
            </summary>
      <returns>
            A new instance of a HtmlRewriteToExternal-derived class that does absolutely nothing.
            </returns>
    </member>
    <member name="T:EPiServer.Web.PageClientResourceRegisterExtension">
      <summary>
            Base register class to request client resources for pages
            </summary>
    </member>
    <member name="M:EPiServer.Web.PageClientResourceRegisterExtension.RegisterResources(EPiServer.Web.PageClientResourceRegister,EPiServer.Framework.Web.Resources.IRequiredClientResourceList,System.Web.HttpContextBase)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Web.UrlRewriteModule">
      <summary>
            Implements UrlSegment-based URL rewriting.
            </summary>
      <remarks>
            Refer to "Routing" in the Developer Guide for more information and examples.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModule.Init(System.Web.HttpApplication)">
      <summary>
            Indicate no support
            </summary>
      <param name="application">
      </param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModule.HttpUrlRewriteToInternal(EPiServer.UrlBuilder)">
      <summary>
            Rewrite a URL in a HTTP request from external to internal representation
            </summary>
      <param name="url">The URL, possibly rewritten</param>
      <remarks>
            Rewrites to internal representation, typically EPiServer classic with id= and epslanguage=,
            taking care not to rewrite certain "untouchable" directories. Will also strip id= in all
            other cases to comply with the requirement that site enumeration should not be possible.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModule.HttpUrlRewriteToExternal(System.String,EPiServer.Web.RebaseKind)">
      <summary>
            Rewrite a URL om a HTTP request from internal to external.
            </summary>
      <param name="url">The URL.</param>
      <param name="typeOfUrl">The type of rebasing to perform on the url.</param>
      <returns>The rewritten request URL</returns>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModule.HtmlAddRewriteToExternalFilter(System.Web.HttpApplication)">
      <summary>
            Connect a filter for rewriting of outgoing HTML, and perform other actions before actually sending the HTML
            </summary>
      <param name="httpApplication">
      </param>
    </member>
    <member name="M:EPiServer.Web.UrlRewriteModule.ValidateRewriteHtmlToExternal(EPiServer.Web.UrlRewriteEventArgs)">
      <summary>
            Check if we should rewrite outgoing HTML. e.Cancel will be set to true if we should not.
            </summary>
      <param name="e">The <see cref="T:EPiServer.Web.UrlRewriteEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.Web.IRenderTemplate">
      <summary>
            Interface that all templates needs to 
            implement to be registered as a template for an instance of a <see cref="T:EPiServer.Core.ContentData" />.
            </summary>
    </member>
    <member name="T:EPiServer.Web.IRenderTemplate`1">
      <summary>
            Interface that all typed templates implement to be registered as a template for an instance of typed class.
            </summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="T:EPiServer.Web.ITemplateResolver">
      <summary>
            The template resolver is responsible to find what template to use for a certain type.
            </summary>
      <remarks>
        <para>The template resolver can be extended using <see cref="E:EPiServer.Web.ITemplateResolverEvents.TemplateResolving" /> and <see cref="E:EPiServer.Web.ITemplateResolverEvents.TemplateResolved" /> events on <see cref="T:EPiServer.Web.ITemplateResolverEvents" />.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Web.ITemplateResolver.Resolve(System.Object,System.Type,EPiServer.Framework.Web.TemplateTypeCategories,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Resolves what rendering template that should be used for the provided item
            given that it is of the provided template category.
            </summary>
      <param name="item">The item of which type the template should be associated with.</param>
      <param name="itemType">in case item is null then type is used for resolving</param>
      <param name="category">The category of template type that should be returned.</param>
      <param name="tags">The tags to use when selecting a template.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
      <remarks>The template tags are treated as a prioritized list meaning a template with a tag matching a 
            preceding tag will be preferred.</remarks>
    </member>
    <member name="T:EPiServer.Web.TemplateResolverExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Web.ITemplateResolver" /> with convinent methods.
            </summary>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverExtensions.HasTemplate(EPiServer.Web.ITemplateResolver,System.Object,EPiServer.Framework.Web.TemplateTypeCategories,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Determines whether the provided item has a template matching the provided template category.
            </summary>
      <param name="templateResolver">The resolver that is being extended</param>
      <param name="item">The item to check template for.</param>
      <param name="category">The category of template type that should be checked for.</param>
      <param name="templateTags">The tags to use when selecting template.</param>
      <returns>
        <c>true</c> if the specified item has a matching template; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverExtensions.HasTemplate(EPiServer.Web.ITemplateResolver,System.Object,EPiServer.Framework.Web.TemplateTypeCategories,System.String)">
      <summary>
            Determines whether the provided item has a template matching the provided template category.
            </summary>
      <param name="templateResolver">The resolver that is being extended</param>
      <param name="item">The item to check template for.</param>
      <param name="category">The category of template type that should be checked for.</param>
      <param name="templateTag">The tags to use when selecting template.</param>
      <returns>
        <c>true</c> if the specified item has a matching template; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverExtensions.HasTemplate(EPiServer.Web.ITemplateResolver,System.Object,EPiServer.Framework.Web.TemplateTypeCategories)">
      <summary>
            Determines whether the provided item has a template matching the provided template category.
            </summary>
      <param name="templateResolver">The resolver that is being extended</param>
      <param name="item">The item to check template for.</param>
      <param name="category">The category of template type that should be checked for.</param>
      <returns>
        <c>true</c> if the specified item has a matching template; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverExtensions.HasTemplate(EPiServer.Web.ITemplateResolver,System.Type,EPiServer.Framework.Web.TemplateTypeCategories,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Determines whether the provided type has a template matching the provided template category.
            </summary>
      <param name="templateResolver">The resolver that is being extended</param>
      <param name="itemType">The type to check template for.</param>
      <param name="category">The category of template type that should be checked for.</param>
      <param name="templateTags">The tags to use when selecting template.</param>
      <returns>
        <c>true</c> if the specified type has a matching template; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverExtensions.Resolve(EPiServer.Web.ITemplateResolver,System.Object,EPiServer.Framework.Web.TemplateTypeCategories,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Resolves what rendering template that should be used for the provided item
            given that it is of the provided template category.
            </summary>
      <param name="templateResolver">The resolver that is being extended</param>
      <param name="item">The item of which type the template should be associated with.</param>
      <param name="category">The category of template type that should be returned.</param>
      <param name="templateTags">The tags to use when selecting template.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
      <remarks>The tags are treated as a prioritized list meaning a template with a tag matching a 
            preceding tag will be preffered.</remarks>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverExtensions.Resolve(EPiServer.Web.ITemplateResolver,System.Object,EPiServer.Framework.Web.TemplateTypeCategories,System.String)">
      <summary>
            Resolves what rendering template that should be used for the provided item
            given that it is of the provided template category.
            </summary>
      <param name="templateResolver">The resolver that is being extended</param>
      <param name="item">The item of which type the template should be associated with.</param>
      <param name="category">The category of template type that should be returned.</param>
      <param name="templateTag">The tag to use when selecting template.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverExtensions.Resolve(EPiServer.Web.ITemplateResolver,System.Type,EPiServer.Framework.Web.TemplateTypeCategories,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Resolves what rendering template that should be used for the provided type
            given that it is of the provided template category.
            </summary>
      <param name="templateResolver">The resolver that is being extended</param>
      <param name="itemType">The type of which type the template should be associated with.</param>
      <param name="category">The category of template type that should be returned.</param>
      <param name="templateTags">The tags to use when selecting template.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
      <remarks>The tags are treated as a prioritized list meaning a template with a tag matching a 
            preceding tag will be preffered.</remarks>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverExtensions.Resolve(EPiServer.Web.ITemplateResolver,System.Type,EPiServer.Framework.Web.TemplateTypeCategories,System.String)">
      <summary>
            Resolves what rendering template that should be used for the provided type
            given that it is of the provided template category.
            </summary>
      <param name="templateResolver">The resolver that is being extended</param>
      <param name="itemType">The type of which type the template should be associated with.</param>
      <param name="category">The category of template type that should be returned.</param>
      <param name="templateTag">The tag to use when selecting template.</param>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverExtensions.Resolve``1(EPiServer.Web.ITemplateResolver,EPiServer.Framework.Web.TemplateTypeCategories,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Resolves what rendering template that should be used for the provided type
            given that it is of the provided template category.
            </summary>
      <param name="templateResolver">The resolver that is being extended</param>
      <param name="category">The category of template type that should be returned.</param>
      <param name="templateTags">The tags to use when selecting template.</param>
      <typeparam name="TItem">The type of which type the template should be associated with.</typeparam>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
      <remarks>The tags are treated as a prioritized list meaning a template with a tag matching a 
            preceding tag will be preffered.</remarks>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverExtensions.Resolve``1(EPiServer.Web.ITemplateResolver,EPiServer.Framework.Web.TemplateTypeCategories,System.String)">
      <summary>
            Resolves what rendering template that should be used for the provided type
            given that it is of the provided template category.
            </summary>
      <param name="templateResolver">The resolver that is being extended</param>
      <param name="category">The category of template type that should be returned.</param>
      <param name="templateTag">The tag to use when selecting template.</param>
      <typeparam name="TItem">The type of which type the template should be associated with.</typeparam>
      <returns>
            A <see cref="T:EPiServer.DataAbstraction.TemplateModel" /> object that contains information on the template.
            </returns>
    </member>
    <member name="T:EPiServer.Web.ITemplateResolverEvents">
      <summary>
            Exposes events raised during template resolving through <see cref="T:EPiServer.Web.ITemplateResolver" /> that can be used to extend template resolving.
            </summary>
    </member>
    <member name="E:EPiServer.Web.ITemplateResolverEvents.TemplateResolving">
      <summary>
            Occurs when a template is about to be resolved.
            </summary>
    </member>
    <member name="E:EPiServer.Web.ITemplateResolverEvents.TemplateResolved">
      <summary>
            Occurs when a rendering template has been resolved.
            This events raises after finding default or first supported template.
            The selected template can be changed by updating the <see cref="P:EPiServer.Web.TemplateResolverEventArgs.SelectedTemplate" /> property.
            </summary>
    </member>
    <member name="T:EPiServer.Web.TemplateResolverEventArgs">
      <summary>
            Event argument used in <see cref="T:EPiServer.Web.ITemplateResolverEvents" /> when a template is resolved for a requested content type.
            </summary>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverEventArgs.#ctor(System.Type,System.Object,System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.TemplateModel},EPiServer.DataAbstraction.TemplateModel,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.TemplateResolverEventArgs" /> class.
            </summary>
      <param name="renderType">Type of the render.</param>
      <param name="itemToRender">The item that should be rendered.</param>
      <param name="templates">The template models.</param>
      <param name="selectedTemplateModel">The selected render model.</param>
      <param name="tags">The tag.</param>
    </member>
    <member name="M:EPiServer.Web.TemplateResolverEventArgs.#ctor(System.Web.HttpContextBase,EPiServer.DataAbstraction.ContentType,System.Type,System.Object,System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.TemplateModel},EPiServer.DataAbstraction.TemplateModel,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Web.TemplateResolverEventArgs" /> class.
            </summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="contentType">Type of the content.</param>
      <param name="renderType">Type of the render.</param>
      <param name="itemToRender">The item that should be rendered.</param>
      <param name="templates">The template models.</param>
      <param name="selectedTemplateModel">The selected render model.</param>
      <param name="tag">The tag.</param>
    </member>
    <member name="P:EPiServer.Web.TemplateResolverEventArgs.WebContext">
      <summary>
            Gets or sets the HTTP context.
            </summary>
      <value>The HTTP context.</value>
    </member>
    <member name="P:EPiServer.Web.TemplateResolverEventArgs.ContentType">
      <summary>
            Gets the current <see cref="P:EPiServer.Web.TemplateResolverEventArgs.ContentType" />.
            </summary>
    </member>
    <member name="P:EPiServer.Web.TemplateResolverEventArgs.Tag">
      <summary>
            Gets or sets the tag.
            </summary>
    </member>
    <member name="P:EPiServer.Web.TemplateResolverEventArgs.ItemToRender">
      <summary>
            Gets the item that should be rendered.
            </summary>
    </member>
    <member name="P:EPiServer.Web.TemplateResolverEventArgs.Tags">
      <summary>
            Gets or sets the template tags that should be or has been used to resolve the template.
            </summary>
    </member>
    <member name="P:EPiServer.Web.TemplateResolverEventArgs.RenderType">
      <summary>
            Gets the current type to resolve template for.
            </summary>
    </member>
    <member name="P:EPiServer.Web.TemplateResolverEventArgs.SupportedTemplates">
      <summary>
            Gets all supported templates that has been registered for the current template request.
            </summary>
    </member>
    <member name="P:EPiServer.Web.TemplateResolverEventArgs.SelectedTemplate">
      <summary>
            Gets or sets the selected template.
            </summary>
    </member>
    <member name="P:EPiServer.Web.TemplateResolverEventArgs.RequestedCategory">
      <summary>
            The categorey that was requested for
            </summary>
    </member>
    <member name="M:EPiServer.ImageLibrary.ImageServiceModule.Init(System.Web.HttpApplication)">
      <summary>
            Initializes an <see cref="T:EPiServer.ImageLibrary.ImageServiceModule" /> module and prepares it to handle requests.
            </summary>
      <param name="context">An <see cref="T:System.Web.HttpApplication" /> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
    </member>
    <member name="M:EPiServer.ImageLibrary.ImageServiceModule.Dispose">
      <summary>
            Disposes of the resources (other than memory) used by this <see cref="T:EPiServer.ImageLibrary.ImageServiceModule" /> instance.
            </summary>
    </member>
    <member name="T:EPiServer.AsyncCopyCompletedEventArgs">
      <summary>
            Argument for asyncronus copy operation
            </summary>
    </member>
    <member name="M:EPiServer.AsyncCopyCompletedEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.AsyncCopyCompletedEventArgs" /> class.
            </summary>
      <param name="sourceLink">The source link.</param>
      <param name="destinationLink">The destination link.</param>
      <param name="newLink">The new link.</param>
      <param name="userState">State of the user.</param>
    </member>
    <member name="M:EPiServer.AsyncCopyCompletedEventArgs.#ctor(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.Exception,System.Boolean,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.AsyncCopyCompletedEventArgs" /> class.
            </summary>
      <param name="sourceLink">The source link.</param>
      <param name="destinationLink">The destination link.</param>
      <param name="newLink">The new link.</param>
      <param name="e">The e.</param>
      <param name="cancelled">if set to <c>true</c> [cancelled].</param>
      <param name="userState">Custom Data.</param>
    </member>
    <member name="M:EPiServer.AsyncCopyCompletedEventArgs.#ctor(System.Exception,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.AsyncCopyCompletedEventArgs" /> class.
            </summary>
      <param name="exception">The exception.</param>
      <param name="userState">State of the user.</param>
    </member>
    <member name="P:EPiServer.AsyncCopyCompletedEventArgs.SourceLink">
      <summary>
            Gets the source link for the pages that was copied.
            <remarks>
            If the operation failed this property will throw <see cref="T:System.Reflection.TargetInvocationException" />.
            Property <see cref="T:System.Exception" /> contains the exception from the background copy operation.
            </remarks></summary>
      <value>The source link.</value>
    </member>
    <member name="P:EPiServer.AsyncCopyCompletedEventArgs.DestinationLink">
      <summary>
            Gets the destination link for the pages that was copied.
            <remarks>
            If the operation failed this property will throw <see cref="T:System.Reflection.TargetInvocationException" />.
            Property <see cref="T:System.Exception" /> contains the exception from the background copy operation.
            </remarks></summary>
      <value>The destination link.</value>
    </member>
    <member name="P:EPiServer.AsyncCopyCompletedEventArgs.NewLink">
      <summary>
            Gets the new link for the pages that where copied.
            <remarks>
            If the operation failed this property will throw <see cref="T:System.Reflection.TargetInvocationException" />.
            Property <see cref="T:System.Exception" /> contains the exception from the background copy operation.
            </remarks></summary>
      <value>The new link.</value>
    </member>
    <member name="T:EPiServer.AsyncCompletedEventArgs`1">
      <summary>
            Argument for asyncronus operation
            </summary>
      <typeparam name="T">Determins the return value type</typeparam>
    </member>
    <member name="M:EPiServer.AsyncCompletedEventArgs`1.#ctor(System.Exception,System.Object,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.AsyncCompletedEventArgs`1" /> class.
            </summary>
      <param name="e">The e.</param>
      <param name="userState">Custom Data.</param>
      <param name="returnValue">The return value.</param>
    </member>
    <member name="P:EPiServer.AsyncCompletedEventArgs`1.ReturnValue">
      <summary>
            Gets or sets the return value of Type T.
            </summary>
      <value>The return value.</value>
    </member>
    <member name="T:EPiServer.AsyncDataFactory">
      <summary>
            Provides asyncronus operations against contatined DataFactory instance.
            </summary>
    </member>
    <member name="M:EPiServer.AsyncDataFactory.#ctor(EPiServer.DataFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.AsyncDataFactory" /> class.
            </summary>
      <param name="dataFactory">The data factory.</param>
    </member>
    <member name="M:EPiServer.AsyncDataFactory.#ctor(EPiServer.IContentRepository)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.AsyncDataFactory" /> class.
            </summary>
      <param name="contentRepository">The content repository.</param>
    </member>
    <member name="E:EPiServer.AsyncDataFactory.CopyCompleted">
      <summary>
            Occurs when the asyncronus copy operation is completed. If the operation failed property Exception on
            <see cref="T:EPiServer.AsyncCopyCompletedEventArgs" /> contains the occured failure.
            </summary>
    </member>
    <member name="E:EPiServer.AsyncDataFactory.DeleteChildrenCompleted">
      <summary>
            Occurs when the asyncronus DeleteChildren operation is completed. If the operation failed property Exception on
            <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> contains the occured failure.
            </summary>
    </member>
    <member name="M:EPiServer.AsyncDataFactory.CopyAsync(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.Boolean,System.Object)">
      <summary>
            Copies pages to another container asyncronusly. When job is finished either successfully or failed the event <see cref="E:EPiServer.AsyncDataFactory.CopyCompleted" />
            is raised.
            </summary>
      <param name="contentLink">The content link.</param>
      <param name="destinationLink">The destination link.</param>
      <param name="publishOnDestination">if set to <c>true</c> the page is published at destination.</param>
      <param name="userState">State of the user.</param>
    </member>
    <member name="M:EPiServer.AsyncDataFactory.DeleteChildrenAsync(EPiServer.Core.ContentReference,System.Object)">
      <summary>
            DeleteChildren asyncronusly. When job is finished either successfully or failed the event <see cref="E:EPiServer.AsyncDataFactory.DeleteChildrenCompleted" />
            is raised.
            </summary>
      <param name="contentLink">The page link.</param>
      <param name="userState">State of the user.</param>
    </member>
    <member name="M:EPiServer.AsyncDataFactory.OnCopyCompleted(EPiServer.AsyncCopyCompletedEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.AsyncDataFactory.CopyCompleted" /> event.
            </summary>
      <param name="copyCompletedArgs">The <see cref="T:EPiServer.AsyncCopyCompletedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.AsyncDataFactory.OnDeleteChildrenCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>
            Raises the <see cref="E:EPiServer.AsyncDataFactory.DeleteChildrenCompleted" /> event.
            </summary>
      <param name="deleteChildrenCompletedArgs">The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:EPiServer.AsyncWorkerManager">
      <summary>
            This class helps the developer to call async call
            </summary>
    </member>
    <member name="M:EPiServer.AsyncWorkerManager.Execute``1(EPiServer.AsyncWorkerManager.AsyncThreadContext,System.Func{``0},System.Action{EPiServer.AsyncCompletedEventArgs{``0}},System.Object)">
      <summary>
            Executes the function f and returns back the result of the f by resultCallback action.
            The resultCallback contains the return value of the function f
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="asyncThreadContext">The async thread context.</param>
      <param name="f">The f.</param>
      <param name="resultCallback">The result callback.</param>
      <param name="userState">State of the user.</param>
    </member>
    <member name="M:EPiServer.AsyncWorkerManager.DoAsync``1(System.Func{``0},System.Action{EPiServer.AsyncCompletedEventArgs{``0}},System.Object)">
      <summary>
            Execute the f asyncronus and the result of the function f be back on result action.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="f">The f.</param>
      <param name="result">The result.</param>
      <param name="userState">State of the user.</param>
    </member>
    <member name="T:EPiServer.DataAccess.DataAccessBaseExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper base class for data access. It is recommended to use <see cref="T:EPiServer.Data.IDatabaseExecutor" /> directly instead.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.DataAccessBaseExtensions.Database(EPiServer.DataAccess.DataAccessBase)">
      <summary>
            Set database handler used for this instance
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="T:EPiServer.DataAccess.Internal.TaskDB">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class to handle the calls to the database regarding task information.
            This class supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TaskDB.#ctor(EPiServer.Data.IDatabaseExecutor)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TaskDB.Save(EPiServer.Personalization.Task)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save/create task
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="task">The task</param>
      <returns>Task id</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TaskDB.SaveActivity(EPiServer.Personalization.Task)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Save/create task
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="task">The task</param>
      <returns>Task id</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TaskDB.Load(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Load task
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="taskID">The id for task</param>
      <returns>Task object</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TaskDB.Delete(System.Int32)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete task
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="taskID">The id for task</param>
      <returns>Return true if task was deleted successfully</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TaskDB.List(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DataAccess.Internal.TaskDB.List(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Lists all task for a specific workflow instance
            This member supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="workflowInstanceId">The workflow instance id.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.UrlBuilderExtensions">
      <summary>
            Extends <see cref="T:EPiServer.UrlBuilder" /></summary>
    </member>
    <member name="M:EPiServer.UrlBuilderExtensions.Rebase(EPiServer.UrlBuilder,EPiServer.UrlBuilder,EPiServer.UrlBuilder,EPiServer.Web.RebaseKind)">
      <summary>
            Rebases this instance assuming it is valid relative the fromBaseUrl to be valid relative toBaseUrl.
            </summary>
      <param name="urlBuilder">The urlBuilder that is extended</param>
      <param name="fromBaseUrl">From base URL.</param>
      <param name="toBaseUrl">To base URL.</param>
      <param name="kind">The form of the result.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.UrlBuilderExtensions.MakeRelative(EPiServer.UrlBuilder,System.String,System.String)">
      <summary>
            Make a root-relative path relative another root-relative path
            </summary>
      <param name="urlBuilder">url builder that is extended</param>
      <param name="fromBase">From base.</param>
      <param name="path">The path.</param>
      <returns>If possible, a shorter, relative path</returns>
      <remarks>
            The reason for not using VirtualPathUtility.MakeRelative is because it is very slow, and we can
            make some rather safe assumptions here which speeds things up significantly.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.AccessDeniedDelegate">
      <summary>
            The delegate type used by <see cref="M:EPiServer.PageBase.AccessDenied" /> to handle access denied reporting to a web browser.
            </summary>
      <param name="source">The object that invokes the delegate.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.DefaultAccessDeniedHandler">
      <summary>
            Default implementation of <see cref="T:EPiServer.AccessDeniedDelegate" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.DefaultAccessDeniedHandler.CreateAccessDeniedDelegate">
      <summary>
            Creates the access denied delegate respect to site authentication mode.
            If the site configured with Forms then creates FormLogonAccessDenied otherwise BrowserLogonAccessDenied
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.WebControls.ControlAdapters.HtmlFormAdapter">
      <summary>
            An adapter for HtmlForm that creates an friendly url of action attribute to
            support AJAX postbacks.
            </summary>
    </member>
    <member name="M:EPiServer.Extensions.Internal.ContentDataExtensions.IsMasterLanguage(EPiServer.Core.IContentData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Checks if a <see cref="T:EPiServer.Core.IContent" /> instance is in the master language. 
            This method will always return true if the language isn't specified or 
            the content type doesn't implement <see cref="T:EPiServer.Core.ILocalizable" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.ContentDataExtensions.MetadataProperty(EPiServer.Core.IContentData,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a metadata property from the PropertyDataCollection mapping the property name 
            to it's metadata equivalent.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.ContentDataExtensions.Cast``1(EPiServer.Core.ContentData)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Casts the pagedata to specified type T.
            </summary>
      <typeparam name="T">The requested type, has to derive from PageData.</typeparam>
      <param name="content">The object this method extends.</param>
      <returns>
            The pagedata as the specified type.
            </returns>
      <exception cref="T:System.InvalidCastException">
            The requested type T is not compatible with the ContentData content
            </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Return enumerable as an <see cref="T:System.Collections.Generic.IList`1" />, only iterating the enumeration if needed. 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Perform an action on each item. 
            NOTE! Be very careful that the action does NOT modify the enumerable in any way as this can result in fatal exceptions!
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Perform an action on each item while also allowing the enumerable to be filtered. 
            Action is not performed until enumerable is read out.
            NOTE! Be very careful that the action does NOT modify the enumerable in any way as this can result in fatal exceptions!
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.EnumerableExtensions.Insert``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Inserts an item at the beginning of the enumerable.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Extensions.Internal.TypeExtensions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extension methods that find interceptable Type and PropertyInfo. 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TypeExtensions.IsInterceptableType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether [is interceptable type] [the specified t].
            </summary>
      <remarks>
                An interceptable type has following criteria 
                <para>1- Should have both Getter and Setter CompilerGenerated property</para><para>2- The CompilerGenerated property should be virtual and Public</para><para>3- The CompilerGenerated property's DeclaringType should be same as ReflectedType</para></remarks>
      <param name="t">The t.</param>
      <returns>
        <c>true</c> if [is interceptable type] [the specified t]; otherwise, <c>false</c>.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TypeExtensions.InterceptableProperties(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Return Interceptables properties.
            </summary>
      <remarks>
                A property is interceptable if has the following creiteria
                <para>1- the property have both Getter and Setter CompilerGenerated accessor</para><para>2- The property should be virtual and Public</para><para>3- The property's DeclaringType should be same as ReflectedType</para></remarks>
      <param name="t">The requested type .</param>
      <returns>Interceptable PropertyInfo</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TypeExtensions.IsGenericTypeDefinitionOf(System.Type,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified type is the bound version of the generic type definition.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TypeExtensions.ImplementsGenericTypeDefinition(System.Type,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the specified type or one of it's base classes implements the provided generic type definition.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TypeExtensions.OriginalType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. If the type is a proxy generated type then the original type is returned, for other types the type itself is returned.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Extensions.Internal.TemplateConventions">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TemplateConventions.IsRenderTemplate(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Determines whether the type is a render template implementation, i.e. a non abstract or generic type definition that implements the <see cref="T:EPiServer.Web.IRenderTemplate" /> interface.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Extensions.Internal.TemplateConventions.GetRenderTemplateModelType(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the model type of the specified render template. 
            This method returns null if <see cref="T:EPiServer.Web.IRenderTemplate`1" /> is not implemented.
            If more than one <see cref="T:EPiServer.Web.IRenderTemplate`1" /> is implemented this method will throw an exception.
            </summary>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Thrown if the type has multiple implementations of <see cref="T:EPiServer.Web.IRenderTemplate`1" />.</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.LocalizationServiceExtensions.GetStringOrNull(EPiServer.Framework.Localization.LocalizationService,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a localized string or null if not found in the current culture or fallback culture if this behavior is configured.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.UriExtension.GetSafeAuthority(System.Uri)">
      <summary>
            Gets the Authority from an Uri. Unlike the Uri class it does not throw
            an exception for relative Uri:s instead it returns null.
            </summary>
      <param name="uri">The URI.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Templates.Common.Internal.ModelTypesInitialization">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Templates.Common.Internal.ModelTypesInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inherit-doc />
      <exclude />
    </member>
    <member name="M:EPiServer.Templates.Common.Internal.ModelTypesInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inherit-doc />
      <exclude />
    </member>
    <member name="T:Sgml.CaseFolding">
      <summary>
            SGML is case insensitive, so here you can choose between converting
            to lower case or upper case tags.  "None" means that the case is left
            alone, except that end tags will be folded to match the start tags.
            </summary>
    </member>
    <member name="T:Sgml.HWStack">
      <summary>
            This stack maintains a high water mark for allocated objects so the client
            can reuse the objects in the stack to reduce memory allocations, this is
            used to maintain current state of the parser for element stack, and attributes
            in each element.
            </summary>
    </member>
    <member name="T:Sgml.Attribute">
      <summary>
            This class represents an attribute.  The AttDef is assigned
            from a validation process, and is used to provide default values.
            </summary>
    </member>
    <member name="M:Sgml.Attribute.Reset(System.String,System.String,System.Char)">
      <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
    </member>
    <member name="T:Sgml.Node">
      <summary>
            This class models an XML node, an array of elements in scope is maintained while parsing
            for validation purposes, and these Node objects are reused to reduce object allocation,
            hence the reset method.  
            </summary>
    </member>
    <member name="M:Sgml.Node.Reset(System.String,System.Xml.XmlNodeType,System.String)">
      <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
    </member>
    <member name="T:Sgml.SgmlReader">
      <summary>
            SgmlReader is an XmlReader API over any SGML document (including built in 
            support for HTML).  
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.Dtd">
      <summary>
            Specify the SgmlDtd object directly.  This allows you to cache the Dtd and share
            it across multipl SgmlReaders.  To load a DTD from a URL use the SystemLiteral property.
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.DocType">
      <summary>
            The name of root element specified in the DOCTYPE tag.
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.PublicIdentifier">
      <summary>
            The PUBLIC identifier in the DOCTYPE tag
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.SystemLiteral">
      <summary>
            The SYSTEM literal in the DOCTYPE tag identifying the location of the DTD.
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.InternalSubset">
      <summary>
            The DTD internal subset in the DOCTYPE tag
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.InputStream">
      <summary>
            The input stream containing SGML data to parse.
            You must specify this property or the Href property before calling Read().
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.WebProxy">
      <summary>
            Sometimes you need to specify a proxy server in order to load data via HTTP
            from outside the firewall.  For example: "itgproxy:80".
            </summary>
    </member>
    <member name="M:Sgml.SgmlReader.SetBaseUri(System.String)">
      <summary>
            The base Uri is used to resolve relative Uri's like the SystemLiteral and
            Href properties.  This is a method because BaseURI is a read-only
            property on the base XmlReader class.
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.Href">
      <summary>
            Specify the location of the input SGML document as a URL.
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.StripDocType">
      <summary>
            Whether to strip out the DOCTYPE tag from the output (default true)
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.ErrorLog">
      <summary>
            DTD validation errors are written to this stream.
            </summary>
    </member>
    <member name="P:Sgml.SgmlReader.ErrorLogFile">
      <summary>
            DTD validation errors are written to this log file.
            </summary>
    </member>
  </members>
</doc>