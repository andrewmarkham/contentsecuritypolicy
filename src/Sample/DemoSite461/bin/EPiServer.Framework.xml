<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EPiServer.Framework</name>
  </assembly>
  <members>
    <member name="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(System.Object,System.Object[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executes the configured method on <paramref name="target" />. This can be used whether or not
            the configured method is asynchronous.
            </summary>
      <remarks>
            Even if the target method is asynchronous, it's desirable to invoke it using Execute rather than
            ExecuteAsync if you know at compile time what the return type is, because then you can directly
            "await" that value (via a cast), and then the generated code will be able to reference the
            resulting awaitable as a value-typed variable. If you use ExecuteAsync instead, the generated
            code will have to treat the resulting awaitable as a boxed object, because it doesn't know at
            compile time what type it would be.
            </remarks>
      <param name="target">The object whose method is to be executed.</param>
      <param name="parameters">Parameters to pass to the method.</param>
      <returns>The method return value.</returns>
      <exclude />
    </member>
    <member name="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.ExecuteAsync(System.Object,System.Object[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Executes the configured method on <paramref name="target" />. This can only be used if the configured
            method is asynchronous.
            </summary>
      <remarks>
            If you don't know at compile time the type of the method's returned awaitable, you can use ExecuteAsync,
            which supplies an awaitable-of-object. This always works, but can incur several extra heap allocations
            as compared with using Execute and then using "await" on the result value typecasted to the known
            awaitable type. The possible extra heap allocations are for:
            
            1. The custom awaitable (though usually there's a heap allocation for this anyway, since normally
               it's a reference type, and you normally create a new instance per call).
            2. The custom awaiter (whether or not it's a value type, since if it's not, you need a new instance
               of it, and if it is, it will have to be boxed so the calling code can reference it as an object).
            3. The async result value, if it's a value type (it has to be boxed as an object, since the calling
               code doesn't know what type it's going to be).
            </remarks>
      <param name="target">The object whose method is to be executed.</param>
      <param name="parameters">Parameters to pass to the method.</param>
      <returns>An object that you can "await" to get the method return value.</returns>
      <exclude />
    </member>
    <member name="T:Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provides a common awaitable structure that <see cref="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.ExecuteAsync(System.Object,System.Object[])" /> can
            return, regardless of whether the underlying value is a System.Task, an FSharpAsync, or an
            application-defined custom awaitable.
            </summary>
      <exclude />
    </member>
    <member name="T:Microsoft.Extensions.Internal.ObjectMethodExecutorFSharpSupport">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper for detecting whether a given type is FSharpAsync`1, and if so, supplying
            an <see cref="T:System.Linq.Expressions.Expression" /> for mapping instances of that type to a C# awaitable.
            </summary>
      <remarks>
            The main design goal here is to avoid taking a compile-time dependency on
            FSharp.Core.dll, because non-F# applications wouldn't use it. So all the references
            to FSharp types have to be constructed dynamically at runtime.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Async.AsyncPaginationResult`1">
      <summary>
            Result from an async paginated method.
            </summary>
      <typeparam name="T">The type of individual items in the paginated result.</typeparam>
    </member>
    <member name="M:EPiServer.Async.AsyncPaginationResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int64)">
      <summary>
            Creates a new instance of .Wait()
            </summary>
      <param name="pagedResult">The current paged result</param>
      <param name="totalCount">The total number of matched result</param>
    </member>
    <member name="P:EPiServer.Async.AsyncPaginationResult`1.PagedResult">
      <summary>
            The current result set in the pagination.
            </summary>
    </member>
    <member name="P:EPiServer.Async.AsyncPaginationResult`1.TotalCount">
      <summary>
            Total number of matched results.
            </summary>
    </member>
    <member name="T:EPiServer.Async.Internal.DefaultTaskExecutor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Async.Internal.DefaultTaskExecutor.CreateWorkAction``1(System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Decorates the work method to pass in cancellation token and progress and wraps the method in a try/catch to ensure that the linked token is used for the cancellation
            exception. This is required if the task should be marked as cancelled.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Async.Internal.DefaultTaskMonitor.IsTasksRunning">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Used from test to determine if task are completed and persisted.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Async.Internal.TaskInformationStorage">
      <internal-api />
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Component that manages persistance of <see cref="T:EPiServer.Async.TaskInformation" />.
            </summary>
      <remarks>
            The implementation is not guaranteed to be thread safe, so if used from singleton instances recommendation is to access instance through usage of <see cref="T:EPiServer.ServiceLocation.ServiceAccessor`1" />.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Async.Internal.TaskInformationStorage.MonitoredTaskTruncateLimit">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The amount of time before a monitored task will be removed.
            </summary>
      <remarks>Default value is 30 days</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Async.Internal.TaskInformationStorage.Save(EPiServer.Async.TaskInformation)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Persists a <see cref="T:EPiServer.Async.TaskInformation" /> instance.
            </summary>
      <param name="task">The <see cref="T:EPiServer.Async.TaskInformation" /> to persist.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Async.Internal.TaskInformationStorage.Delete(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the <see cref="T:EPiServer.Async.TaskInformation" /> entry with specified id.
            </summary>
      <param name="taskInformationId">
      </param>
      <exclude />
    </member>
    <member name="M:EPiServer.Async.Internal.TaskInformationStorage.Load(System.Guid)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads a persisted <see cref="T:EPiServer.Async.TaskInformation" /> instance.
            </summary>
      <param name="taskInformationId">
      </param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Async.Internal.TaskInformationStorage.Tasks">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns a queryable where Linq can be used to get a filtered result.
            </summary>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Async.Internal.TrackingTokenJsonConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A JSON converter for <see cref="T:EPiServer.Async.TrackingToken" />.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Async.Internal.TrackingTokenJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Async.Internal.TrackingTokenJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Async.Internal.TrackingTokenJsonConverter.CanConvert(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Async.TaskEventArgs">
      <summary>
            Event arguments used in events exposed by <see cref="T:EPiServer.Async.TaskExecutor" />. 
            </summary>
    </member>
    <member name="M:EPiServer.Async.TaskEventArgs.#ctor(EPiServer.Async.TaskInformation)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Async.TaskEventArgs" />.
            </summary>
      <param name="information">The associated <see cref="T:EPiServer.Async.TaskInformation" /> instance.</param>
    </member>
    <member name="P:EPiServer.Async.TaskEventArgs.Task">
      <summary>
            The associated <see cref="P:EPiServer.Async.TaskEventArgs.Task" />.
            </summary>
    </member>
    <member name="P:EPiServer.Async.TaskEventArgs.Info">
      <summary>
            The associated <see cref="T:EPiServer.Async.TaskInformation" />.
            </summary>
    </member>
    <member name="T:EPiServer.Async.TaskExecutor">
      <summary>
            Manages execution of asynchronus work using <see cref="T:System.Threading.Tasks.Task" /> API. If the task is associated with a <see cref="T:EPiServer.Async.TrackingToken" /> then
            the task will be monitored by <see cref="T:EPiServer.Async.TaskMonitor" /> and the outcome/status of the task can be retrieved from <see cref="T:EPiServer.Async.TaskMonitor" />.
            </summary>
    </member>
    <member name="E:EPiServer.Async.TaskExecutor.TaskStarting">
      <summary>
            Occurs when a new task is starting.
            </summary>
      <remarks>
            The task itself will not be started until all event handlers has been completed.
            </remarks>
    </member>
    <member name="E:EPiServer.Async.TaskExecutor.TaskStarted">
      <summary>
            Occurs when a task has started.
            </summary>
      <remarks>
            The task work is run on a separate thread to any event handlers.
            Attached event handlers will also not affect the <see cref="E:EPiServer.Async.TaskExecutor.TaskCompleted" /> event.
            </remarks>
    </member>
    <member name="E:EPiServer.Async.TaskExecutor.TaskCompleted">
      <summary>
            Occurs when a task has completed regardless of status.
            </summary>
      <remarks>
            The <see cref="E:EPiServer.Async.TaskExecutor.TaskCompleted" /> event will not be raised until all event handlers attached to either <see cref="E:EPiServer.Async.TaskExecutor.TaskStarted" /> and/or have completed.
            </remarks>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action)">
      <summary>
            Starts the specified work using an asynchronous task.
            </summary>
      <param name="work">The work that should be executed asynchronously.</param>
      <returns>An activated task</returns>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action,EPiServer.Async.TrackingToken)">
      <summary>
            Starts the specified work using an asynchronous task and option to specify if outcome should be tracked.
            </summary>
      <param name="work">The work that should be executed asynchronously.</param>
      <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
      <returns>An activated task</returns>
      <remarks>
        <para>
                The <paramref name="trackingToken" /> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor" />.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.Start``1(System.Func{``0},EPiServer.Async.TrackingToken)">
      <summary>
            Starts the specified work using an asynchronous task and option to specify if outcome should be tracked.
            </summary>
      <param name="work">The work that should be executed asynchronously.</param>
      <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
      <returns>An activated task of type <see cref="T:System.Threading.Tasks.Task`1" /></returns>
      <remarks>
        <para>
                The <paramref name="trackingToken" /> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor" />.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action{System.Threading.CancellationToken})">
      <summary>
            Starts the specified cancelable work using an asynchronous task.
            </summary>
      <param name="work">The work that should be executed asynchronously.</param>
      <returns>An activated task</returns>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action{System.Threading.CancellationToken},EPiServer.Async.TrackingToken)">
      <summary>
            Starts the specified cancelable work using an asynchronous task and option to specify if outcome should be tracked.
            </summary>
      <param name="work">The work that should be executed asynchronously.</param>
      <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
      <returns>An activated task</returns>
      <remarks>
        <para>
                The <paramref name="trackingToken" /> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor" />.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.Start``1(System.Func{System.Threading.CancellationToken,``0},EPiServer.Async.TrackingToken)">
      <summary>
            Starts the specified cancelable work using an asynchronous task and option to specify if outcome should be tracked.
            </summary>
      <param name="work">The work that should be executed asynchronously.</param>
      <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
      <returns>An activated task of type <see cref="T:System.Threading.Tasks.Task`1" /></returns>
      <remarks>
        <para>
                The <paramref name="trackingToken" /> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor" />.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action{System.Threading.CancellationToken},System.Threading.CancellationToken)">
      <summary>
            Starts the specified work using an asynchronous task with the option to cancel the work prematurely.
            </summary>
      <param name="work">The work that should be executed asynchronously.</param>
      <param name="cancellationToken">The cancellation token that can be used to cancel the task.</param>
      <returns>An activated task</returns>
      <remarks>
        <para>
                The <paramref name="cancellationToken" /> parameter can be used to cancel the task externally, but it will not signal if
                the task is cancelled using the <see cref="M:EPiServer.Async.TaskExecutor.Cancel(System.Guid)" /> method. To listen to cancellation from either token, 
                use the optional <see cref="T:System.Threading.CancellationToken" /> passed as an argument to the <paramref name="work" /> action.
            </para>
        <para>
                Note that a task only is marked as cancelled if the <paramref name="work" /> method responds to the cancellation by throwing
                the correct exception, normally using the <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" /> method. If this does 
                not happen, the task status will be set to <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.Start(System.Action{System.Threading.CancellationToken},EPiServer.Async.TrackingToken,System.Threading.CancellationToken)">
      <summary>
            Starts the specified work using an asynchronous task with the option to cancel the work prematurely and to specify if outcome should be tracked.
            </summary>
      <param name="work">The work that should be executed asynchronously.</param>
      <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
      <param name="cancellationToken">The cancellation token that can be used to cancel the task.</param>
      <returns>An activated task</returns>
      <remarks>
        <para>
                The <paramref name="cancellationToken" /> parameter can be used to cancel the task externally, but it will not signal if
                the task is cancelled using the <see cref="M:EPiServer.Async.TaskExecutor.Cancel(System.Guid)" /> method. To listen to cancellation from either token, 
                use the optional <see cref="T:System.Threading.CancellationToken" /> passed as an argument to the <paramref name="work" /> action.
            </para>
        <para>
                The <paramref name="trackingToken" /> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor" />.
            </para>
        <para>
                Note that a task only is marked as cancelled if the <paramref name="work" /> method responds to the cancellation by throwing
                the correct exception, normally using the <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" /> method. If this does 
                not happen, the task status will be set to <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.Start``1(System.Func{System.Threading.CancellationToken,``0},EPiServer.Async.TrackingToken,System.Threading.CancellationToken)">
      <summary>
            Starts the specified work using an asynchronous task with the option to cancel the work prematurely and to specify if outcome should be tracked.
            </summary>
      <param name="work">The work that should be executed asynchronously.</param>
      <param name="trackingToken">The trackingtoken that will be associated with the task so it can be tracked.</param>
      <param name="cancellationToken">The cancellation token that can be used to cancel the task.</param>
      <returns>An activated task of type <see cref="T:System.Threading.Tasks.Task`1" /></returns>
      <remarks>
        <para>
                The <paramref name="cancellationToken" /> parameter can be used to cancel the task externally, but it will not signal if
                the task is cancelled using the <see cref="M:EPiServer.Async.TaskExecutor.Cancel(System.Guid)" /> method. To listen to cancellation from either token, 
                use the optional <see cref="T:System.Threading.CancellationToken" /> passed as an argument to the <paramref name="work" /> action.
            </para>
        <para>
                The <paramref name="trackingToken" /> parameter can be used to specify a token that will be associated with the task. 
                That can then be used to get progress or outcome of task from <see cref="T:EPiServer.Async.TaskMonitor" />.
            </para>
        <para>
                Note that a task only is marked as cancelled if the <paramref name="work" /> method responds to the cancellation by throwing
                the correct exception, normally using the <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" /> method. If this does 
                not happen, the task status will be set to <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.Cancel(System.Guid)">
      <summary>
            Cancels the task with the specified identifier.
            </summary>
      <param name="taskId">The task identifier.</param>
      <returns>The <see cref="T:System.Threading.Tasks.Task" /> object if the task is still running and can be cancelled; otherwise null.</returns>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.OnTaskStarting(EPiServer.Async.TaskEventArgs)">
      <summary>
            Call to raise <see cref="E:EPiServer.Async.TaskExecutor.TaskStarting" /> event.
            </summary>
      <param name="e">The event argument</param>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.OnTaskStarted(EPiServer.Async.TaskEventArgs)">
      <summary>
            Call to raise <see cref="E:EPiServer.Async.TaskExecutor.TaskStarted" /> event.
            </summary>
      <param name="e">The event argument</param>
    </member>
    <member name="M:EPiServer.Async.TaskExecutor.OnTaskCompleted(EPiServer.Async.TaskEventArgs)">
      <summary>
            Call to raise <see cref="E:EPiServer.Async.TaskExecutor.TaskCompleted" /> event.
            </summary>
      <param name="e">The event argument</param>
    </member>
    <member name="T:EPiServer.Async.TaskInformation">
      <summary>
            Contains information such as status and result (if the asynchronus job returned a result) associated with a task.
            </summary>
    </member>
    <member name="M:EPiServer.Async.TaskInformation.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:EPiServer.Async.TaskInformation.#ctor(System.Guid)">
      <summary>
            Constructor to create status with specific id.
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="P:EPiServer.Async.TaskInformation.IsTrackable">
      <summary>
            Indicates if the task was created with an associated <see cref="T:EPiServer.Async.TrackingToken" /></summary>
    </member>
    <member name="P:EPiServer.Async.TaskInformation.Id">
      <summary>
            The unique identifier associated with the task.
            </summary>
    </member>
    <member name="P:EPiServer.Async.TaskInformation.CompletedStatus">
      <summary>
            Contains the status of the task when it was completed. Before completion value is <see cref="F:System.Threading.Tasks.TaskStatus.Created" /></summary>
    </member>
    <member name="P:EPiServer.Async.TaskInformation.User">
      <summary>
            The user under which the context the task was created.
            </summary>
    </member>
    <member name="P:EPiServer.Async.TaskInformation.Created">
      <summary>
            Time (in UTC) for when the task was created.
            </summary>
    </member>
    <member name="P:EPiServer.Async.TaskInformation.Completed">
      <summary>
            Time (in UTC) for when the task was completed.
            </summary>
    </member>
    <member name="P:EPiServer.Async.TaskInformation.Exception">
      <summary>
            In case a task is faulting, this contains the exception message.
            </summary>
    </member>
    <member name="P:EPiServer.Async.TaskInformation.Result">
      <summary>
            In case the asyncronus task had a return value this is the outcome of the task.
            </summary>
    </member>
    <member name="P:EPiServer.Async.TaskInformation.ResultType">
      <summary>
            Gets or sets the <see cref="T:System.Type" /> for <see cref="P:EPiServer.Async.TaskInformation.Result" />. This is used to be able to query for result of specific type.
            </summary>
    </member>
    <member name="T:EPiServer.Async.TaskInformation`1">
      <summary>
            Contains information about a task where status is an typed instance with information specific to the task type.
            </summary>
    </member>
    <member name="M:EPiServer.Async.TaskInformation`1.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:EPiServer.Async.TaskInformation`1.#ctor(System.Guid)">
      <summary>
            Constructor to create status with specific id.
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="P:EPiServer.Async.TaskInformation`1.Result">
      <summary>
            Contains the result from the job, given that job returned <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
    </member>
    <member name="T:EPiServer.Async.TaskMonitor">
      <summary>
            Component that monitors task that are trackable (that is associated with a <see cref="T:EPiServer.Async.TrackingToken" />). 
            </summary>
    </member>
    <member name="M:EPiServer.Async.TaskMonitor.GetStatus``1(EPiServer.Async.TrackingToken)">
      <summary>
            Retrieves a the specific <see cref="T:EPiServer.Async.TaskInformation`1" /> that is associated with <paramref name="trackingToken" />.
            </summary>
      <remarks>
            The persisting of task information is done asynchronusly meaning there is no guarantee that status has been persisted when task is completed.
            </remarks>
      <typeparam name="TResult">The type of result from the task created from <see cref="T:EPiServer.Async.TaskExecutor" />.</typeparam>
      <param name="trackingToken">The <see cref="T:EPiServer.Async.TrackingToken" /> used when creating the task.</param>
      <returns>Information and result about the task.</returns>
    </member>
    <member name="M:EPiServer.Async.TaskMonitor.GetStatus(EPiServer.Async.TrackingToken)">
      <summary>
            Retrieves a the specific <see cref="T:EPiServer.Async.TaskInformation" /> that is associated with <paramref name="trackingToken" />.
            </summary>
      <remarks>
            The persisting of task information is done asynchronusly meaning there is no guarantee that status has been persisted when task is completed.
            </remarks>
      <param name="trackingToken">The <see cref="T:EPiServer.Async.TrackingToken" /> used when creating the task.</param>
      <returns>Information and outcome about the task.</returns>
    </member>
    <member name="T:EPiServer.Async.TrackingToken">
      <summary>
            Used to define a token that will be associated with a <see cref="T:System.Threading.Tasks.Task" />. Can be used to retrieve status about the task using <see cref="T:EPiServer.Async.TaskMonitor" />.
            </summary>
    </member>
    <member name="M:EPiServer.Async.TrackingToken.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Async.TrackingToken" /> class with a new identifier.
            </summary>
    </member>
    <member name="M:EPiServer.Async.TrackingToken.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Async.TrackingToken" /> class with a specific identifier.
            </summary>
      <param name="id">The identifier.</param>
    </member>
    <member name="P:EPiServer.Async.TrackingToken.None">
      <summary>
            Returns an empty TrackingToken value. 
             </summary>
    </member>
    <member name="P:EPiServer.Async.TrackingToken.Id">
      <summary>
            The identifier for the token used to track progress.
            </summary>
    </member>
    <member name="M:EPiServer.Async.TrackingToken.Equals(EPiServer.Async.TrackingToken)">
      <summary>
            Determines if <paramref name="other" /> is considered equal with this instance.
            </summary>
      <param name="other">The other <see cref="T:EPiServer.Async.TrackingToken" /> to compare with.</param>
      <returns>true if the tokens are considered equal else false.</returns>
    </member>
    <member name="M:EPiServer.Async.TrackingToken.Equals(System.Object)">
      <summary>
            Determines if <paramref name="obj" /> is considered equal with this instance.
            </summary>
      <param name="obj">The other <see cref="T:EPiServer.Async.TrackingToken" /> to compare with.</param>
      <returns>true if the tokens are considered equal else false.</returns>
    </member>
    <member name="M:EPiServer.Async.TrackingToken.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Async.TrackingToken.Parse(System.String)">
      <summary>
            Parses <paramref name="value" /> to a <see cref="T:EPiServer.Async.TrackingToken" />.
            </summary>
      <param name="value">The string to parse.</param>
      <returns>A tracking token</returns>
      <exception cref="T:System.ArgumentException">In case the string is not in expected format.</exception>
    </member>
    <member name="M:EPiServer.Async.TrackingToken.TryParse(System.String,EPiServer.Async.TrackingToken@)">
      <summary>
            Tries to parses <paramref name="value" /> to a <see cref="T:EPiServer.Async.TrackingToken" />.
            </summary>
      <param name="value">The string to parse.</param>
      <param name="token">The parsed token or null if <paramref name="value" /> could not be parsed.</param>
      <returns>true if <paramref name="value" /> could be parsed else false.</returns>
    </member>
    <member name="M:EPiServer.Async.TrackingToken.ToString">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Async.TrackingTokenExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Async.TrackingToken" /> with convenience methods.
            </summary>
    </member>
    <member name="M:EPiServer.Async.TrackingTokenExtensions.IsTrackable(EPiServer.Async.TrackingToken)">
      <summary>
            Determines if <paramref name="trackingToken" /> is assigned so it is trackable.
            </summary>
    </member>
    <member name="T:EPiServer.DataAnnotations.IgnoreAttribute">
      <summary>
            When applied to the property of a model type, specifies that the property should be ignored
            </summary>
    </member>
    <member name="T:EPiServer.DataAnnotations.ItemRangeAttribute">
      <summary>
            Specifies a numeric range constraints for each item in a content list property.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.ItemRangeAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.ItemRangeAttribute" /> class.
            </summary>
      <param name="minimum">Specifies the minimum value allowed for each item in the list property.</param>
      <param name="maximum">Specifies the maximum value allowed for each item in the list property.</param>
    </member>
    <member name="M:EPiServer.DataAnnotations.ItemRangeAttribute.#ctor(System.Type,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.ItemRangeAttribute" /> class.
            </summary>
      <param name="type">Specifies the type of the object to test.</param>
      <param name="minimum">Specifies the minimum value allowed for each item in the list property.</param>
      <param name="maximum">Specifies the maximum value allowed for each item in the list property.</param>
    </member>
    <member name="M:EPiServer.DataAnnotations.ItemRangeAttribute.IsValid(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAnnotations.ItemRegularExpressionAttribute">
      <summary>
            Specifies that each item in a content list property must match the specified regular expression.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.ItemRegularExpressionAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.ItemRegularExpressionAttribute" /> class.
            </summary>
      <param name="pattern">The regular expression that is used to validate each item in the list property. </param>
    </member>
    <member name="M:EPiServer.DataAnnotations.ItemRegularExpressionAttribute.IsValid(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAnnotations.ItemStringLengthAttribute">
      <summary>
            Specifies the minimum and maximum length of characters that are allowed for each item in a content list property.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.ItemStringLengthAttribute.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.ItemStringLengthAttribute" /> class.
            </summary>
      <param name="maximumLength">The maximum string length of a each item in the list.</param>
    </member>
    <member name="M:EPiServer.DataAnnotations.ItemStringLengthAttribute.IsValid(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.DataAnnotations.ListItemsAttribute">
      <summary>
            Specifies the minimum and maximum number of items allowed in a content list property.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.ListItemsAttribute.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.ListItemsAttribute" /> class.
            </summary>
      <param name="maximum">The maximum number of items allowed in the list.</param>
    </member>
    <member name="M:EPiServer.DataAnnotations.ListItemsAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.DataAnnotations.ListItemsAttribute" /> class.
            </summary>
      <param name="minimum">The minimum number of items allowed in the list.</param>
      <param name="maximum">The maximum number of items allowed in the list.</param>
    </member>
    <member name="P:EPiServer.DataAnnotations.ListItemsAttribute.Minimum">
      <summary>
            Gets the minimum number of items allowed in the list.
            </summary>
    </member>
    <member name="P:EPiServer.DataAnnotations.ListItemsAttribute.Maximum">
      <summary>
            Gets the maximum number of items allowed in the list.
            </summary>
    </member>
    <member name="M:EPiServer.DataAnnotations.ListItemsAttribute.IsValid(System.Object)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Framework.Blobs.Blob">
      <summary>
            Represents a binary large object
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Blobs.Blob" /> class.
            </summary>
      <param name="id">Resource reference</param>
    </member>
    <member name="P:EPiServer.Framework.Blobs.Blob.ID">
      <summary>
            The identifier of the blob
            </summary>
      <remarks>Required identifier that must contain 1 to 100 characters that are unique and valid as file names, no whitespace allowed</remarks>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.OpenRead">
      <summary>
            Open blob for reading
            </summary>
      <returns>A readable stream</returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.OpenWrite">
      <summary>
            Open blob for writing
            </summary>
      <returns>A writable stream</returns>
      <remarks>This method normally means that the stream is cached in-memory or on disk before piped into storage, prefer to use the Write-method and pass in the stream instead.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.Write(System.IO.Stream)">
      <summary>
            Write stream directly to blob (prefered method for writing)
            </summary>
      <param name="data">The stream</param>
      <remarks>The stream must be set to the correct position before calling this method</remarks>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.NewBlobIdentifier(System.Uri,System.String)">
      <summary>
            Convert a GUID to an identifier that may end up on URL's
            </summary>
      <param name="container">Container identifier</param>
      <param name="extension">The extension for the file</param>
      <returns>A string generated based on a GUID</returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.GetContainerIdentifier(System.Guid)">
      <summary>
            Get a container identifier based on a guid and the default provider
            </summary>
      <param name="container">The container ID</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.GetContainerIdentifier(System.String,System.Guid)">
      <summary>
            Get a container identifier based on a guid and a custom provider
            </summary>
      <param name="provider">The provider name</param>
      <param name="container">The container ID</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.GetContainerIdentifier(System.Uri)">
      <summary>
            Extract the container identifier from an existing ID
            </summary>
      <param name="id">The ID to either a container or an blob</param>
      <returns>A new identifier only for the blob, no validation is done in this method.</returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.ValidateIdentifier(System.Uri,System.Nullable{System.Boolean})">
      <summary>
            Validates a blob identifier (Uri), optionally checking for existance of a file
            </summary>
      <param name="id">The blob identifier</param>
      <param name="testForFile">Check if the identifier has an file</param>
      <remarks>A blob identifier is expected to be in the form of "epi.fx.blob://[container]/[filename]"</remarks>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.IsContainerIdentifier(System.Uri)">
      <summary>
            Determines whether the provided identifier is a valid container identifier, i.e. not a file identifier or an invalid identifier.
            </summary>
      <param name="id">The blob identifier.</param>
      <returns>
        <c>True</c> if the identifier is a valid container identifier; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.IsFileIdentifier(System.Uri)">
      <summary>
            Determines whether the provided identifier is a valid file identifier, i.e. not a container identifier or an invalid identifier.
            </summary>
      <param name="id">The blob identifier.</param>
      <returns>
        <c>True</c> if the identifier is a valid file identifier; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.Blob.IsValidIdentifier(System.Uri)">
      <summary>
            Determines whether the specified identifier is a valid blob container or file identifier.
            </summary>
      <param name="id">The blob identifier.</param>
      <returns>
        <c>True</c> if the identifier is a valid identifier; otherwise <c>false</c>.</returns>
    </member>
    <member name="T:EPiServer.Framework.Blobs.BlobExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Framework.Blobs.Blob" /> with extension methods
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobExtensions.ReadAllBytes(EPiServer.Framework.Blobs.Blob)">
      <summary>
             Writes the blob stream contents to a byte array.
            </summary>
      <param name="blob">The blob</param>
      <returns> A new byte array.</returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobExtensions.WriteAllBytes(EPiServer.Framework.Blobs.Blob,System.Byte[])">
      <summary>
            Writes a whole sequence of bytes to the blob.
            </summary>
      <param name="blob">The destination blob</param>
      <param name="data">The data</param>
    </member>
    <member name="T:EPiServer.Framework.Blobs.BlobOptions">
      <summary>
            Specifies how the blob system should be setup
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Blobs.BlobOptions.DefaultProvider">
      <summary>
            The name of the default <see cref="T:EPiServer.Framework.Blobs.BlobProvider" />.
            This provider will be used if no specific provider has been specified.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Blobs.BlobOptions.Providers">
      <summary>
            List of providers that should be used by the system; each represented by a <see cref="T:EPiServer.Framework.Blobs.BlobProviderBuilder" /> instance.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobOptions.AddProvider``1(System.String)">
      <summary>
            Adds a <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> of the given type.
            </summary>
      <typeparam name="TProvider">The type of provider to add.</typeparam>
      <param name="name">The name of the provider to add.</param>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobOptions.AddProvider``2(System.String,System.Action{``1})">
      <summary>
            Adds a <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> of the given type
            using the provided method to configure the provider options.
            </summary>
      <typeparam name="TProvider">The type of <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> to add.</typeparam>
      <typeparam name="TProviderOptions">The type of the options class expected by the specific provider type.</typeparam>
      <param name="name">The name of the provider to add.</param>
      <param name="configure">Configuration method for setting up provider options.</param>
    </member>
    <member name="T:EPiServer.Framework.Blobs.BlobProvider">
      <summary>
            An abstract provider for binary large objects
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider</param>
      <param name="config"> A collection of the name/value pairs representing the provider-specific attributes
            specified in the configuration for this provider.</param>
    </member>
    <member name="P:EPiServer.Framework.Blobs.BlobProvider.Name">
      <summary>
            Gets the friendly name used to refer to the provider
            </summary>
      <remarks>Default name is 'default'</remarks>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobProvider.CreateBlob(System.Uri,System.String)">
      <summary>
            Create a reference to a new blob
            </summary>
      <param name="id">The identifier of the container</param>
      <param name="extension">The extention (such as .png)</param>
      <returns>A reference to a blob</returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobProvider.GetBlob(System.Uri)">
      <summary>
            Get a reference to a blob
            </summary>
      <param name="id">The identifier</param>
      <returns>A reference to a blob</returns>
      <remarks>This method will always return a reference even though the actual blob does not exists</remarks>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobProvider.Delete(System.Uri)">
      <summary>
            Delete a blob or a container
            </summary>
      <param name="id">The identifier of a blob or a blob container</param>
      <remarks>The Host part of the identifier is the container and the path is the file/blob that is being deleted. If the file is missing it is assumed that the container is being deleted.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobProvider.InitializeAsync">
      <summary>
            Override this method if the provider has some time consuming initialization that can be done parallell with other initalization modules.
            </summary>
      <remarks>
            This method will be called during <see cref="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)" /> and then in 
            <see cref="E:EPiServer.Framework.Initialization.InitializationEngine.InitComplete" /> it will wait for the ongoing task to complete.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Framework.Blobs.BlobProviderBuilder">
      <summary>
            Used to configure and build up <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> instances
            on the <see cref="T:EPiServer.Framework.Blobs.BlobOptions" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobProviderBuilder.#ctor(System.String,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Blobs.BlobProviderBuilder" /> class.
            </summary>
      <param name="name">The name of the blob provider</param>
      <param name="providerType">The type of the provider instance. Must implement <see cref="T:EPiServer.Framework.Blobs.BlobProvider" />.</param>
      <remarks>
            It's recommended to use the <see cref="M:EPiServer.Framework.Blobs.BlobProviderBuilder.Create``1(System.String)" /> method to initialize new instances
            as it will provide type support.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Blobs.BlobProviderBuilder.Name">
      <summary>
            Gets the name of the <see cref="T:EPiServer.Framework.Blobs.BlobProvider" />.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Blobs.BlobProviderBuilder.ProviderType">
      <summary>
            Gets the type of the <see cref="T:EPiServer.Framework.Blobs.BlobProvider" />.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Blobs.BlobProviderBuilder.Options">
      <summary>
            Gets the Options instance. Exposed for test purposes.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobProviderBuilder.Configure``1(System.Action{``0})">
      <summary>
            Adds a configuration of the provider.
            </summary>
      <typeparam name="TProviderOptions">The options type required by the provider configured by this instance.</typeparam>
      <param name="configure">A method used to configure the options for this provider.</param>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobProviderBuilder.Build(EPiServer.ServiceLocation.IServiceLocator)">
      <summary>
            Builds a new <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> instance.
            </summary>
      <param name="serviceLocator">The service locator used to create provider instances.</param>
      <returns>A new <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> instance.</returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.BlobProviderBuilder.Create``1(System.String)">
      <summary>
            Factory method for creating a new <see cref="T:EPiServer.Framework.Blobs.BlobProviderBuilder" /> instance.
            </summary>
      <typeparam name="TProvider">Type of the provider instance. Must implement <see cref="T:EPiServer.Framework.Blobs.BlobProvider" />.</typeparam>
      <param name="name">The name of the <see cref="T:EPiServer.Framework.Blobs.BlobProvider" />.</param>
      <returns>A new <see cref="T:EPiServer.Framework.Blobs.BlobProviderBuilder" /> instance.</returns>
    </member>
    <member name="T:EPiServer.Framework.Blobs.FileBlob">
      <summary>
            Binary large object stored as file on disk
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlob.#ctor(System.Uri,System.String)">
      <summary>
            Create new FileBlob
            </summary>
      <param name="id">the id of blob</param>
      <param name="filePath">The file path</param>
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlob.OpenRead">
      <summary>
            Open filestream for reading
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlob.OpenWrite">
      <summary>
            Open stream for writing
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlob.Write(System.IO.Stream)">
      <summary>
            Write stream directly to filestream
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="P:EPiServer.Framework.Blobs.FileBlob.FilePath">
      <summary>
            Path to file
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Blobs.FileBlobProvider">
      <summary>
            A <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> implementation that serves blobs from files in a file system.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.#ctor">
      <summary>
            Create a new <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider" /> and sets the repository path to the [appDataPath]\blobs directory.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.#ctor(System.String)">
      <summary>
            Create a new <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider" /> with a specific repository path.
            </summary>
      <param name="path">The path to the location where file blobs are stored.</param>
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.#ctor(EPiServer.Framework.Internal.IPhysicalPathResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates a new instance of the <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initialize the <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider" /></summary>
      <param name="name">Name of the provider</param>
      <param name="config">provider settings</param>
      <remarks>
            This method is mainly used by when initialized from the web.config.
            Use other Initialize method for a strongly typed version
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.Initialize(System.String,EPiServer.Framework.Blobs.FileBlobProviderOptions)">
      <summary>
            Initialize the <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider" /></summary>
      <param name="name">Name of the provider</param>
      <param name="options">The provider configuration options.</param>
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.Initialize(System.String)">
      <summary>
            Initialize the <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider" /> with the provided name and the default options.
            </summary>
      <param name="name">Name of the provider</param>
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.GetBlob(System.Uri)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.CreateBlob(System.Uri,System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Blobs.FileBlobProvider.Delete(System.Uri)">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Framework.Blobs.FileBlobProvider.Path">
      <summary>
            Path to blob repository
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Blobs.FileBlobProvider.KeepStructure">
      <summary>
            Set to true to keep created folder structure even if folders are empty
            </summary>
      <remarks>
        <para>Some hosting environments (like ASP.NET) keep track of structure under application and might
            restart application due to changes</para>
        <para>Default value is false</para>
      </remarks>
    </member>
    <member name="T:EPiServer.Framework.Blobs.FileBlobProviderOptions">
      <summary>
            Options for configuring a <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider" /> instance.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Blobs.FileBlobProviderOptions.Path">
      <summary>
            Path to blob repository
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Blobs.FileBlobProviderOptions.KeepStructure">
      <summary>
            Set to true to keep created folder structure even if folders are empty
            </summary>
      <remarks>
        <para>Some hosting environments (like ASP.NET) keep track of structure under application and might
            restart application due to changes</para>
        <para>Default value is false</para>
      </remarks>
    </member>
    <member name="T:EPiServer.Framework.Blobs.IBlobFactory">
      <summary>
            An factory component for working with binary large objects that can be handled by any registered provider.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.IBlobFactory.CreateBlob(System.Uri,System.String)">
      <summary>
            Get a reference to a blob
            </summary>
      <param name="id">The identifier of the container</param>
      <param name="extension">The extension (such as ".png")</param>
      <returns>A reference to a blob</returns>
      <remarks>This method will always return a reference even though the actual blob does not exists</remarks>
    </member>
    <member name="M:EPiServer.Framework.Blobs.IBlobFactory.Delete(System.Uri)">
      <summary>
            Delete a blob or a container
            </summary>
      <param name="id">The identifier of a blob or a blob container</param>
      <remarks>The Host part of the identifier is the container and the path is the file/blob that is being deleted. If the file is missing it is assumed that the container is being deleted.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Blobs.IBlobFactory.GetBlob(System.Uri)">
      <summary>
            Get a reference to a blob
            </summary>
      <param name="id">The identifier</param>
      <returns>A reference to a blob</returns>
      <remarks>This method will always return a reference even though the actual blob does not exists</remarks>
    </member>
    <member name="T:EPiServer.Framework.Blobs.IBlobProviderRegistry">
      <summary>
            An registry where <see cref="T:EPiServer.Framework.Blobs.BlobProvider">Blob Providers</see> can be registered, retrieved and removed.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Blobs.IBlobProviderRegistry.DefaultProvider">
      <summary>
            Gets or sets the name of the default <see cref="T:EPiServer.Framework.Blobs.BlobProvider" />.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.IBlobProviderRegistry.GetProvider(System.Uri)">
      <summary>
            Get the provider from the registry that matches the provided blob authority
            </summary>
      <param name="id">A blob identifier</param>
      <returns>A blob provider</returns>
    </member>
    <member name="M:EPiServer.Framework.Blobs.IBlobProviderRegistry.AddProvider(EPiServer.Framework.Blobs.BlobProvider)">
      <summary>
            Adds a <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> to the registry
            </summary>
      <param name="provider">The provider to register</param>
    </member>
    <member name="M:EPiServer.Framework.Blobs.IBlobProviderRegistry.RemoveProvider(System.String)">
      <summary>
            Remove a a <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> from the registry.
            </summary>
      <param name="name">The name of the provider (also used as authority in blob ID)</param>
      <returns>Returns <c>true</c> if the provider was found and removed</returns>
      <remarks>Provider names are not case sensitive</remarks>
    </member>
    <member name="T:EPiServer.Framework.Blobs.Internal.BlobConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Type converter class for <see cref="T:EPiServer.Framework.Blobs.Blob" /> that handles convertion to and from strings.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.BlobConverter.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Blobs.Internal.BlobConverter" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.BlobConverter.#ctor(EPiServer.Framework.Blobs.IBlobFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Blobs.Internal.BlobConverter" /> class.
            </summary>
      <param name="blobFactory">The BLOB factory.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.BlobConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.BlobConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.BlobConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.BlobConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
      <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Blobs.Internal.DefaultBlobFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An factory class for working with binary large objects that can be handled by any registered provider
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Blobs.Internal.DefaultBlobFactory.DefaultProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The default provider
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.DefaultBlobFactory.CreateBlob(System.Uri,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a reference to a blob
            </summary>
      <param name="id">The identifier of the container</param>
      <param name="extension">The extension (such as ".png")</param>
      <returns>A reference to a blob</returns>
      <remarks>This method will always return a reference even though the actual blob does not exists</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.DefaultBlobFactory.GetBlob(System.Uri)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a reference to a blob
            </summary>
      <param name="id">The identifier</param>
      <returns>A reference to a blob</returns>
      <remarks>This method will always return a reference even though the actual blob does not exists</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.DefaultBlobFactory.Delete(System.Uri)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delete a blob or a container
            </summary>
      <param name="id">The identifier of a blob or a blob container</param>
      <remarks>The Host part of the identifier is the container and the path is the file/blob that is being deleted. If the file is missing it is assumed that the container is being deleted.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.DefaultBlobFactory.GetProvider(System.Uri)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the provider for a blob authority
            </summary>
      <param name="id">The blob identifier</param>
      <returns>A blob provider</returns>
      <exception cref="T:System.ArgumentException">Thrown if no matching provider was found</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.DefaultBlobFactory.AddProvider(EPiServer.Framework.Blobs.BlobProvider)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Register a blob provider
            </summary>
      <param name="provider">The provider to register</param>
      <exception cref="T:System.ArgumentNullException">Thrown when provider or its name is null or empty</exception>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Blobs.Internal.DefaultBlobFactory.RemoveProvider(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Unregister a blob provider
            </summary>
      <param name="name">The name of the provider (also used as authority in blob ID)</param>
      <returns>Returns <c>true</c> if the provider was found and removed</returns>
      <remarks>Provider names are not case sensitive</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Blobs.Internal.NullBlobProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A default implementation used when nothing has been configured (for testing purposes)
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Blobs.TrackableStream">
      <summary>
            A stream that can wrap any <see cref="T:System.IO.Stream" /> that exposes events when the stream is closing and closed.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Blobs.TrackableStream.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Blobs.TrackableStream" /> class.
            </summary>
      <param name="stream">The stream that should be wrapped and tracked</param>
    </member>
    <member name="E:EPiServer.Framework.Blobs.TrackableStream.Closing">
      <summary>
            Called before the stream is closed
            </summary>
    </member>
    <member name="E:EPiServer.Framework.Blobs.TrackableStream.Closed">
      <summary>
            Called after the stream is closed
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Blobs.TrackableStream.InnerStream">
      <summary>
            Gets the <see cref="T:System.IO.Stream" /> that is tracked using this class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Blobs.TrackableStream.CanRead">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Framework.Blobs.TrackableStream.CanSeek">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Framework.Blobs.TrackableStream.CanWrite">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Blobs.TrackableStream.Flush">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Framework.Blobs.TrackableStream.Length">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Framework.Blobs.TrackableStream.Position">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Blobs.TrackableStream.Read(System.Byte[],System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Blobs.TrackableStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Blobs.TrackableStream.SetLength(System.Int64)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Blobs.TrackableStream.Write(System.Byte[],System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Blobs.TrackableStream.Close">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Blobs.TrackableStream.Dispose(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Framework.Blobs.BlobFactory">
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Cache.CacheTimeoutType">
      <summary>
            Types of cache timeout handling.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Cache.CacheTimeoutType.Sliding">
      <summary>
            Sliding timeout, will update the remaining time for each access.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Cache.CacheTimeoutType.Absolute">
      <summary>
            Absolute expiration time. Once time is up, the item will expire.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Cache.CacheTimeoutType.Undefined">
      <summary>
            No time limit defined.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Cache.CacheEvictionPolicy">
      <summary>
            Contains the different cache evicion policies that can be assigned for an item in IObjectInstanceCache.
            </summary>
      <remarks>
            Once an instance of CacheEvictionPolicy has been created, the instance is immutable. This is done to allow
            for re-using the same CacheEvictionPolicy instance multiple times when you have identical cache policy
            requirements for multiple cache insertions.
            </remarks>
    </member>
    <member name="F:EPiServer.Framework.Cache.CacheEvictionPolicy.Empty">
      <summary>
            The empty CacheEvictionPolicy.
            </summary>
      <remarks>
            No special expiration policies have been defined.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
      <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
      <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
      <param name="masterKeys">The master keys that we depend upon.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
      <param name="expiration">The expiration time span.</param>
      <param name="timeoutType">Type of cache timeout.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
      <param name="expiration">The expiration time span.</param>
      <param name="timeoutType">Type of cache timeout.</param>
      <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
      <param name="expiration">The expiration time span.</param>
      <param name="timeoutType">Type of cache timeout.</param>
      <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
      <param name="masterKeys">The master keys that we depend upon.</param>
    </member>
    <member name="P:EPiServer.Framework.Cache.CacheEvictionPolicy.CacheKeys">
      <summary>
            Gets the cache dependency keys.
            </summary>
      <value>
            The cache keys.
            </value>
      <remarks>
            If a dependent cache item with one of the specified cachekeys does not exist in cache then the inserted item will be evicted from cache immediately.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Cache.CacheEvictionPolicy.MasterKeys">
      <summary>
            Gets the master keys.
            </summary>
      <value>
            The master keys.
            </value>
      <remarks>
        <para>
            Master keys are used as markers to set up common dependencies without having to create the cache entries first.
            If you set up a master key dependency, there is no need for the corresponding entry to exist before adding 
            something that depends on the master key.
            </para>
        <para>
            The concept of master keys could be regarded as similar to the cache region concept, but using master keys
            allows you to have more than one, where cache regions is restricted to one per cached item - you can only 
            place the item in one region.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Framework.Cache.CacheEvictionPolicy.Expiration">
      <summary>
            Gets the expiration time span.
            </summary>
      <value>
            The expiration.
            </value>
      <remarks>
            If TimeoutType is set to Absolute, this is how long the item will remain in the cache before it is 
            considered invalid. If TimeoutType is set to Sliding, then this is how long the item will be considered
            valid after the latest access. If TimeoutType is set to Undefined, this value is ignored.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Cache.CacheEvictionPolicy.TimeoutType">
      <summary>
            Gets the type of cache timeout.
            </summary>
      <value>
            The type of the timeout.
            </value>
      <remarks>See <see cref="P:EPiServer.Framework.Cache.CacheEvictionPolicy.Expiration" /> for more information.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
      <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
      <param name="expiration">The expiration time span.</param>
      <param name="timeoutType">Type of cache timeout.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
      <param name="files">The files that the item depends upon.</param>
      <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
      <param name="expiration">The expiration time span.</param>
      <param name="timeoutType">Type of cache timeout.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
      <param name="files">The files that the item depends upon.</param>
      <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
      <param name="masterKeys">The master keys that we depend upon.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
      <param name="files">The files that the item depends upon.</param>
      <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
      <param name="masterKeys">The master keys that we depend upon.</param>
      <param name="expiration">The expiration time span.</param>
      <param name="timeoutType">Type of cache timeout.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.CacheEvictionPolicy.#ctor(System.TimeSpan,EPiServer.Framework.Cache.CacheTimeoutType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> class.
            </summary>
      <param name="expiration">The expiration time span.</param>
      <param name="timeoutType">Type of cache timeout.</param>
      <param name="cacheKeys">The dependencies to other cached items, idetified by their keys.</param>
      <param name="masterKeys">The master keys that we depend upon.</param>
      <param name="files">The files that the item depends upon.</param>
    </member>
    <member name="P:EPiServer.Framework.Cache.CacheEvictionPolicy.Files">
      <summary>
            Gets the file dependencies.
            </summary>
      <value>
            The files.
            </value>
      <remarks>
            The strings should be fully qualified local file system paths to the dependent files.
            </remarks>
    </member>
    <member name="T:EPiServer.Framework.Cache.Internal.RefCountedEvent">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A wrapper for the ManualResetEvent that enables reference counting. Used to keep 
            track of multiple threads waiting for a single pending action.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.RefCountedEvent.#ctor(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.Internal.RefCountedEvent" /> class.
            </summary>
      <param name="context">The context for the instance.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.RefCountedEvent.#ctor(System.Int32,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.Internal.RefCountedEvent" /> class.
            </summary>
      <param name="millisecondsTimeout">The timeout in milliseconds.</param>
      <param name="context">The context for the instance.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.RefCountedEvent.Wait">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Enter wait state for calling thread.
            </summary>
      <returns>Reason for the outcome of the wait operation.</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Cache.Internal.RefCountedEvent.Context">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the context for which the instance was created with.
            </summary>
      <value>The context.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.RefCountedEvent.Signal">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Signals the event with Success reason.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.RefCountedEvent.Signal(EPiServer.Framework.Cache.Internal.SignalReason)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Signals the event with specified reason.
            </summary>
      <param name="reason">The reason.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Cache.Internal.SignalReason">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies reason for signalling of an event.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Framework.Cache.Internal.SignalReason.Success">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The signal was raised as part of normal execution.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Framework.Cache.Internal.SignalReason.Failure">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The event was signalled due to exceptions in the execution flow or other abnormal conditions.
            </summary>
      <remarks>
            If this state is reported after a Wait, the recommended approach is to retry the operation again.
            </remarks>
      <exclude />
    </member>
    <member name="F:EPiServer.Framework.Cache.Internal.SignalReason.NotFound">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The Wait was for fetching information from backing store, but the item did not exist.
            </summary>
      <remarks>
            If this state is reported after wait, return and indicate that item is mssing.
            </remarks>
      <exclude />
    </member>
    <member name="F:EPiServer.Framework.Cache.Internal.SignalReason.Timeout">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The event was signalled due to that the specified timeout elapsed.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Cache.Internal.WeakReferenceCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.WeakReferenceCache.Insert(System.String,System.Object,EPiServer.Framework.Cache.CacheEvictionPolicy)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Inserts the value into the cache with the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value to cache.</param>
      <param name="evictionPolicy">The cache eviction policy.</param>
      <remarks>
            The evicitionPolicy can be null. In that case the item may stay in the cache for an undetermined time.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.WeakReferenceCache.Remove(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes the specified object.
            </summary>
      <param name="key">The key.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.WeakReferenceCache.Get(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the specified object.
            </summary>
      <param name="key">The key.</param>
      <returns>
            The object associated with the key, if it exists. Otherwise returns null.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.WeakReferenceCache.Clear">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes all entries from the cache.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Cache.Internal.CacheItemWrapper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Wrapper for items stored in the weak reference cache.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.CacheItemWrapper.#ctor(System.Object,EPiServer.Framework.Cache.CacheEvictionPolicy,System.DateTime)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Cache.Internal.CacheItemWrapper" /> class.
            </summary>
      <param name="value">The value.</param>
      <param name="eviction">The eviction policy.</param>
      <param name="now">The current time/date stamp.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Cache.Internal.CacheItemWrapper.ReturnIfValid(System.DateTime)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns the object if it is valid (considering expiration and liveness of the weak reference).
            </summary>
      <param name="now">The current time/date stamp.</param>
      <returns>The object if it is valid, otherwise null.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Cache.IObjectInstanceCache">
      <summary>
            An interface for local, fast caching of object instances.
            </summary>
      <remarks>
        <para>
            One assumption is that the objects don't need to be serializable - they will be live object instances.
            </para>
        <para>
            Another assumption is that the items in the cache may be purged at any point-in-time. When you set expiration
            time the system will only guarantee that the cached item will not be available after the expiration time, but
            it may be removed before that time depending on the underlying cache implementation.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Framework.Cache.IObjectInstanceCache.Insert(System.String,System.Object,EPiServer.Framework.Cache.CacheEvictionPolicy)">
      <summary>
            Inserts the value into the cache with the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value to cache.</param>
      <param name="evictionPolicy">The cache eviction policy.</param>
      <remarks>
            The evicitionPolicy can be null. In that case the item may stay in the cache for an undetermined time.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Cache.IObjectInstanceCache.Get(System.String)">
      <summary>
            Gets the specified object.
            </summary>
      <param name="key">The key.</param>
      <returns>The object associated with the key, if it exists. Otherwise returns null.</returns>
    </member>
    <member name="M:EPiServer.Framework.Cache.IObjectInstanceCache.Remove(System.String)">
      <summary>
            Removes the specified object.
            </summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.IObjectInstanceCache.Clear">
      <summary>
            Removes all entries from the cache.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Cache.IRequestCache">
      <summary>
            Signature for a component that implements support to cache values on current request (for a web application a Http request)
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Cache.IRequestCache.IsActive">
      <summary>
            Indicates if caching is active for current scope
            </summary>
      <remarks>
            For a http context based implementation the implementation returns true if a http context is present
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Cache.IRequestCache.Get``1(System.String)">
      <summary>
            Gets a previously cached value (if exist)
            </summary>
      <typeparam name="T">The type of the cached item</typeparam>
      <param name="key">The unique key for the item</param>
      <returns>The cached item or default(T) if not present.</returns>
    </member>
    <member name="M:EPiServer.Framework.Cache.IRequestCache.Set``1(System.String,``0)">
      <summary>
            Inserts a value in the cache
            </summary>
      <typeparam name="T">The type of the item to cache</typeparam>
      <param name="key">The unique key for the item</param>
      <param name="value">The item to cache</param>
    </member>
    <member name="T:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache">
      <summary>
            Object instance cache that has support for synchronizing cache contents over multiple computers.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache.RemoveLocal(System.String)">
      <summary>
            Removes the object instance from the local cache.
            </summary>
      <param name="key">The key of the cached object instance.</param>
    </member>
    <member name="M:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache.RemoveRemote(System.String)">
      <summary>
            Removes the object instance from the remote cache location.
            </summary>
      <param name="key">The key of the cached object.</param>
    </member>
    <member name="P:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache.SynchronizationFailedStrategy">
      <summary>
            Get or set the strategy for handling missed synchronization information.
            </summary>
      <value>
            The synchronization failure strategy.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Cache.ISynchronizedObjectInstanceCache.ObjectInstanceCache">
      <summary>
            Gets the object instance cache used by the synchronized cache implementation.
            </summary>
      <value>
            The object instance cache.
            </value>
    </member>
    <member name="T:EPiServer.Framework.Cache.FailureRecoveryAction">
      <summary>
            The various options for handling cache synchronization failures
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Cache.FailureRecoveryAction.None">
      <summary>
            Ignore cache synchronization failures and continue as if nothing has happened.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Cache.FailureRecoveryAction.ClearAll">
      <summary>
            Clear the entire cache if cache synchronization failures has been detected.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Cache.ObjectInstanceCacheExtensions">
      <summary>
            Extends <see cref="T:EPiServer.Framework.Cache.IObjectInstanceCache" /> with convenient methods
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Cache.ObjectInstanceCacheExtensions.ReadThrough``1(EPiServer.Framework.Cache.IObjectInstanceCache,System.String,System.Func{``0})">
      <summary>
            Read-through cache handling. 
            </summary>
      <remarks>
            Usage of this method will cache instances using <see cref="F:EPiServer.Framework.Cache.CacheEvictionPolicy.Empty" />. If you have custom dependencies use overload that specifies <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /></remarks>
      <typeparam name="T">Type of the value to read.</typeparam>
      <param name="cache">The key.</param>
      <param name="key">The key.</param>
      <param name="readValue">The function to invoke for retrieving the value if it does not exist in the cache.</param>
      <returns>The object associated with the key, if it exists or is read thru the readValue fuction. Otherwise returns null.</returns>
    </member>
    <member name="M:EPiServer.Framework.Cache.ObjectInstanceCacheExtensions.ReadThrough``1(EPiServer.Framework.Cache.IObjectInstanceCache,System.String,System.Func{``0},System.Func{EPiServer.Framework.Cache.CacheEvictionPolicy})">
      <summary>
            Read-through cache handling.
            </summary>
      <remarks>
            If <paramref name="evictionPolicy" /> is null or returns null the item is not insterted to cache. To cache without specific dependencies use
            overload without <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> parameter.
            </remarks>
      <typeparam name="T">Type of the value to read.</typeparam>
      <param name="cache">The key.</param>
      <param name="key">The key.</param>
      <param name="readValue">The function to invoke for retrieving the value if it does not exist in the cache.</param>
      <param name="evictionPolicy">The function to invoke for determining the cache eviction policy in case a new value was retrieved.
            If null is returned item is not added to cache, use overload without <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> to cache item with default restrictions and no dependencies</param>
      <returns>The object associated with the key, if it exists or is read thru the readValue fuction. Otherwise returns null.</returns>
    </member>
    <member name="M:EPiServer.Framework.Cache.ObjectInstanceCacheExtensions.ReadThrough``1(EPiServer.Framework.Cache.IObjectInstanceCache,System.String,System.Func{``0},System.Func{``0,EPiServer.Framework.Cache.CacheEvictionPolicy})">
      <summary>
            Read-through cache handling.
            </summary>
      <remarks>
            If <paramref name="evictionPolicy" /> is null or returns null the item is not insterted to cache. To cache without specific dependencies use
            overload without <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> parameter.
            </remarks>
      <typeparam name="T">Type of the value to read.</typeparam>
      <param name="cache">The key.</param>
      <param name="key">The key.</param>
      <param name="readValue">The function to invoke for retrieving the value if it does not exist in the cache.</param>
      <param name="evictionPolicy">The function to invoke for determining the cache eviction policy in case a new value was retrieved. 
            If null is returned item is not added to cache, use overload without <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> to cache item with default restrictions and no dependencies</param>
      <returns>The object associated with the key, if it exists or is read thru the readValue fuction. Otherwise returns null.</returns>
    </member>
    <member name="M:EPiServer.Framework.Cache.ObjectInstanceCacheExtensions.ReadThrough``1(EPiServer.Framework.Cache.IObjectInstanceCache,System.String,System.Func{``0},EPiServer.Framework.Cache.ReadStrategy)">
      <summary>
            Read-through cache handling.
            </summary>
      <remarks>
            Usage of this method will cache instances using <see cref="F:EPiServer.Framework.Cache.CacheEvictionPolicy.Empty" />. If you have custom dependencies use overload that specifies <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /></remarks>
      <typeparam name="T">Type of the value to read.</typeparam>
      <param name="cache">The extended <see cref="T:EPiServer.Framework.Cache.IObjectInstanceCache" />.</param>
      <param name="key">The key.</param>
      <param name="readValue">The function to invoke for retrieving the value if it does not exist in the cache.</param>
      <param name="readStrategy">Inidicates which read strategy that should be used</param>
      <returns>The object associated with the key, if it exists or is read thru the readValue fuction. Otherwise returns null.</returns>
    </member>
    <member name="M:EPiServer.Framework.Cache.ObjectInstanceCacheExtensions.ReadThrough``1(EPiServer.Framework.Cache.IObjectInstanceCache,System.String,System.Func{``0},System.Func{``0,EPiServer.Framework.Cache.CacheEvictionPolicy},EPiServer.Framework.Cache.ReadStrategy)">
      <summary>
            Read-through cache handling.
            </summary>
      <remarks>
            If <paramref name="evictionPolicy" /> is null or returns null the item is not insterted to cache. To cache without specific dependencies use
            overload without <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> parameter.
            </remarks>
      <typeparam name="T">Type of the value to read.</typeparam>
      <param name="cache">The extended <see cref="T:EPiServer.Framework.Cache.IObjectInstanceCache" />.</param>
      <param name="key">The key.</param>
      <param name="readValue">The function to invoke for retrieving the value if it does not exist in the cache.</param>
      <param name="evictionPolicy">The function to invoke for determining the cache eviction policy in case a new value was retrieved. 
            If null is returned item is not added to cache, use overload without <see cref="T:EPiServer.Framework.Cache.CacheEvictionPolicy" /> to cache item with default restrictions and no dependencies</param>
      <param name="readStrategy">Inidicates which read strategy that should be used</param>
      <returns>The object associated with the key, if it exists or is read thru the readValue fuction. Otherwise returns null.</returns>
    </member>
    <member name="M:EPiServer.Framework.Cache.ObjectInstanceCacheExtensions.Get``1(EPiServer.Framework.Cache.IObjectInstanceCache,System.String,EPiServer.Framework.Cache.ReadStrategy)">
      <summary>
            Read an object from the cache with specified cache key
            </summary>
      <typeparam name="T">The type of item in the cache</typeparam>
      <param name="cache">The cache instance that is extended</param>
      <param name="cacheKey">The cache key.</param>
      <param name="strategy">Specifies which read strategy that should be used</param>
      <returns>The object associated with the key, if it exists. Otherwise returns null </returns>
    </member>
    <member name="M:EPiServer.Framework.Cache.ObjectInstanceCacheExtensions.TryGet``1(EPiServer.Framework.Cache.IObjectInstanceCache,System.String,EPiServer.Framework.Cache.ReadStrategy,``0@)">
      <summary>
            Tries to read an object from the cache.
            </summary>
      <typeparam name="T">The type of item in the cache</typeparam>
      <param name="cache">The cache instance that is extended</param>
      <param name="cacheKey">The cache key.</param>
      <param name="strategy">Specifies which read strategy that should be used</param>
      <param name="instance">The item from the cache or null if not found</param>
      <returns>True if there was an item in the cache with specified key, false otherwise.</returns>
      <remarks>
            A return value as true means there was a cache entry with specified key. However in case <see cref="F:EPiServer.Framework.Cache.ReadStrategy.Wait" />
            is used it might indicate that some other thread read the value but no value was retreived. In that case is <paramref name="instance" /> null
            </remarks>
    </member>
    <member name="T:EPiServer.Framework.Cache.ReadStrategy">
      <summary>
            Used to specify how cache reads should be handled
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Cache.ReadStrategy.Immediate">
      <summary>
            Will not wait for other pending updates
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Cache.ReadStrategy.Wait">
      <summary>
            Will wait for pending updates to finish 
            </summary>
      <remarks>
        <para>Typically used for scenarios where there is likely that several calls are done concurrent for an item
            that is costly to load. In that case only one will perform the actual load while others will wait.
            When the loading is done the waiting threads will be singnalled.</para>
        <para>This option adds a marker object to the cache to signal that data is being loaded, do not use the same
            cache key with other API's that do not take <see cref="T:EPiServer.Framework.Cache.ReadStrategy" /> since they will return the marker object
            if called for example during a costly database operation.</para>
      </remarks>
    </member>
    <member name="T:EPiServer.Framework.ContextCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.ContextCache.Current">
      <summary>
            Get the current <see cref="T:EPiServer.Framework.ContextCache" /> instance.
            </summary>
      <remarks>
            Avoid whenever possible and inject <see cref="T:EPiServer.Framework.ContextCache" /> in constructor instead.
            </remarks>
    </member>
    <member name="T:EPiServer.Framework.DataAnnotations.EditorHintAttribute">
      <summary>
            Works the same way as the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> attribute with the difference that this
            attribute only changes the selection of editors. This works on class level compared to
            <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" /> that works on property level.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.DataAnnotations.MediaDescriptorAttribute">
      <summary>
            Attribute for model type which support media 
            </summary>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.MediaDescriptorAttribute.Extensions">
      <summary>
            The extensions that this type support.
            </summary>
      <remarks>Use <see cref="P:EPiServer.Framework.DataAnnotations.MediaDescriptorAttribute.ExtensionString" /> instead if your project is CLS-compliant.</remarks>
    </member>
    <member name="P:EPiServer.Framework.DataAnnotations.MediaDescriptorAttribute.ExtensionString">
      <summary>
            Gets or sets the Extensions as a comma-separated list.
            </summary>
      <value>The Extensions string.</value>
      <remarks>This can be used instead of <see cref="P:EPiServer.Framework.DataAnnotations.MediaDescriptorAttribute.Extensions" /> if your project is CLS-compliant.</remarks>
    </member>
    <member name="T:EPiServer.Framework.DataAnnotations.PresentationLayer">
      <summary>
            Defines constant strings to select presentation layer for an <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.DataAnnotations.PresentationLayer.Edit">
      <summary>
            Used to select editor.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.DataAnnotations.PresentationLayer.Website">
      <summary>
            The layer used to display the website.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Dependencies.DependencyCycleException">
      <summary>
            Thrown when cycle is detected when resolving dependencies
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Dependencies.DependencyCycleException.CircularDependencies">
      <summary>
            Gets dependencies that make a cycle.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException" /> class.
            </summary>
      <param name="circularDependencies">The circular dependencies.</param>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="circularDependencies">The circular dependencies.</param>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.ToString">
      <summary>
            Overriden. Returns a <see cref="T:System.String" /> that represents this instance and the list of missing prerequisites.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencyCycleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencyCycleException" /> class.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:EPiServer.Framework.Dependencies.DependencySorter`1">
      <summary>
            Performs topological sorting of items based on dependencies.
            </summary>
      <remarks>
            This class is thread safe.
            </remarks>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencySorter`1.Sort(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Collections.Generic.IEnumerable{`0}},System.Boolean)">
      <summary>
            Sorts specified items by dependencies.
            </summary>
      <param name="items">The collection of items that should be sorted by dependencies.</param>
      <param name="getDependenciesDelegate">The deledate to get item dependencies.</param>
      <param name="throwOnCycle">if set to <c>true</c> throw exception when dependency cycle is detected.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencySorter`1.Sort(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Collections.Generic.IEnumerable{`0}})">
      <summary>
            Sorts specified items by dependencies.
            </summary>
      <param name="items">The items.</param>
      <param name="getDependenciesDelegate">The deledate to get item dependencies.</param>
      <returns>
      </returns>
      <exception cref="T:EPiServer.Framework.Dependencies.DependencyCycleException">Thrown when dependency cycle is detected.</exception>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencySorter`1.Visit(`0,EPiServer.Framework.Dependencies.DependencySortingContext{`0})">
      <summary>
            Visits the specified item and all direct and indirect dependencies recursively.
            Items is added to sorted list only when all its dependencies are there.
            </summary>
      <param name="item">The item.</param>
      <param name="context">The sorting context.</param>
    </member>
    <member name="T:EPiServer.Framework.Dependencies.DependencySortingContext`1">
      <summary>
            Context for atomic dependency sorting operation.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`0}},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Dependencies.DependencySortingContext`1" /> class.
            </summary>
      <param name="getDependenciesDelegate">The delegate to get item dependencies.</param>
      <param name="throwOnCycle">if set to <c>true</c> [throw on cycle].</param>
    </member>
    <member name="P:EPiServer.Framework.Dependencies.DependencySortingContext`1.GetDependenciesDelegate">
      <summary>
            The delegate to get item dependencies.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Dependencies.DependencySortingContext`1.ThrowOnCycle">
      <summary>
            Gets a value indicating whether exception should be thrown when dependency cycle is detected.
            </summary>
      <value>
        <c>true</c> if throw exception when cycle is detected; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.IsVisited(`0)">
      <summary>
            Determines whether the specified item is visited.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <c>true</c> if the specified item is visited; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.MarkAsVisited(`0)">
      <summary>
            Marks the specified item as visited.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.IsSorted(`0)">
      <summary>
            Determines whether the specified item and all its dependencies are resolved and sorted.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <c>true</c> if the specified item is sorted; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.MarkAsSorted(`0)">
      <summary>
            Marks the specified item as sorted meaning that all dependencies are resolved and sorted.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.GetSortedItems">
      <summary>
            Gets the sorted items.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Dependencies.DependencySortingContext`1.GetVisitedUnsortedItems">
      <summary>
            Gets the items that are visited but sorting for them is not completed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Framework.EnvironmentOptions">
      <summary>
            Specifies Environment settings for the EPiServer application
            </summary>
    </member>
    <member name="P:EPiServer.Framework.EnvironmentOptions.BasePath">
      <summary>
            Specifies the physical base path for resources used by the application.
            </summary>
      <remarks>Default value is 'App_Data'</remarks>
    </member>
    <member name="T:EPiServer.Framework.FrameworkInitialization">
      <summary>
            Initializes framework features
            </summary>
    </member>
    <member name="M:EPiServer.Framework.FrameworkInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.FrameworkInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Framework.IInitializableModule">
      <summary>
            Interface that you can implement to be part of the EPiServer Framework initialization chain.
            </summary>
      <remarks>
            You should set the attribute [InitializableModule] on the class implementing this interface, or if
            you want to control dependencies (making sure that other modules are initialized before your module gets called)
            use the attribute [ModuleDependency(typeof(ClassThatIDependOn), ...)].
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="context">The context.</param>
      <remarks>
            Gets called as part of the EPiServer Framework initialization sequence. Note that it will be called
            only once per AppDomain, unless the method throws an exception. If an exception is thrown, the initialization
            method will be called repeadetly for each request reaching the site until the method succeeds.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.IInitializableModule.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>
            Resets the module into an uninitialized state.
            </summary>
      <param name="context">The context.</param>
      <remarks>
        <para>
            This method is usually not called when running under a web application since the web app may be shut down very
            abruptly, but your module should still implement it properly since it will make integration and unit testing
            much simpler.
            </para>
        <para>
            Any work done by <see cref="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)" /> as well as any code executing on <see cref="E:EPiServer.Framework.Initialization.InitializationEngine.InitComplete" /> should be reversed.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Framework.InitializableModuleAttribute">
      <summary>
            Used to decorate a class that should be called as part of the initialization process
            </summary>
      <remarks>The class also has to implement the interface <see cref="T:EPiServer.Framework.IInitializableModule" /></remarks>
    </member>
    <member name="M:EPiServer.Framework.InitializableModuleAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.InitializableModuleAttribute" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.InitializableModuleAttribute.UninitializeOnShutdown">
      <summary>
            Indicates if Uninitialize should be called when application is shutdown, e.g. called from System.Web.Hosting.IRegisteredObject.Stop
            </summary>
      <remarks>
            If a shutdown is requested then there is no guaranteed order in which Uninitialize on the modules are called, they might be called in parallel
            </remarks>
    </member>
    <member name="T:EPiServer.Framework.InitializationState">
      <summary>
            The various states for the initialization process
            </summary>
    </member>
    <member name="F:EPiServer.Framework.InitializationState.PreInitialize">
      <summary>
            Before initialization has started.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.InitializationState.Initializing">
      <summary>
            Executing then list of initializable modules.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.InitializationState.InitializeFailed">
      <summary>
            Exception was thrown by one of the initialization modules.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.InitializationState.InitializeDelayed">
      <summary>
            One of the initialization modules requested the processing to delay until a later point in time.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.InitializationState.InitializeComplete">
      <summary>
            The InitComplete event is in progress.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.InitializationState.WaitingBeginRequest">
      <summary>
            The InitComplete event has finished processing and is now waiting for the first BeginRequest event
            </summary>
    </member>
    <member name="F:EPiServer.Framework.InitializationState.Initialized">
      <summary>
            All initialization processing has completed.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.InitializationState.Uninitializing">
      <summary>
            Uninitializing the list of initializable modules
            </summary>
    </member>
    <member name="F:EPiServer.Framework.InitializationState.UninitializeFailed">
      <summary>
            Exception was thrown by one of the initialization modules during uninitialization.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.InitializationState.Uninitialized">
      <summary>
            Uninitialization complete.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Initialization.AssemblyExtension">
      <summary>
            Extension methods to simplify working with assemblies
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.NormalizedName(System.Reflection.Assembly)">
      <summary>
            Normalizes the assembly name.
            </summary>
      <param name="assembly">The assembly.</param>
      <returns>A normalized version of the assembly display name.</returns>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.IsScanAllowed(System.Reflection.Assembly)">
      <summary>
            Determines whether the specified assembly is allowed for type/attribute scanning.
            </summary>
      <param name="assembly">The assembly to check.</param>
      <returns>
        <c>true</c> if scan is allowed; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Any dynamic or .NET Framework assembly will be excluded, as well as any assembly that contains the [PreventAssemblyScan] attribute.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.IsNetFrameworkAssembly(System.Reflection.Assembly)">
      <summary>
            Determines whether the specified assembly is a .NET Framework assembly.
            </summary>
      <param name="assembly">The assembly to check.</param>
      <returns>
        <c>true</c> if it is a .NET Framework assembly; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.IsDynamicAssembly(System.Reflection.Assembly)">
      <summary>
            Determines whether the specified assembly is a dynamically generated assembly.
            </summary>
      <param name="assembly">The assembly to check.</param>
      <returns>
        <c>true</c> if it is a dynamic assembly; otherwise, <c>false</c>.
            </returns>
      <remarks>
            This extension method checks more than just the IsDynamic property, which does not cover all relevant cases
            of dynamic assemblies.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.IsEPiServerSignedAssembly(System.Reflection.Assembly)">
      <summary>
            Determines whether the specified assembly is signed by EPiServer. This method is used to determine if an assembly is a part of EPiServer products family.
            </summary>
      <param name="assembly">The assembly.</param>
      <returns>
        <c>true</c> if the specified assembly is signed by EPiServer; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyExtension.IsSameAssemblyName(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
      <summary>
            Compares assembly names based on name and public key token.
            Returns true if name and public key token of this assembly are equal.
            </summary>
      <param name="assemblyName">The assembly name.</param>
      <param name="assemblyName2">The assembly name for comparison.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Framework.Initialization.AssemblyList">
      <summary>
            Provides a list of assemblies that should be used when scanning for plugins / modules etc.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.AssemblyList" /> class.
            </summary>
      <remarks>
            Initializes the AllowedAssemblies with all assemblies in the app domain, except .NET Framework
            assemblies and assemblies with the PreventAssemblyScan attribute.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyList.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.AssemblyList" /> class.
            </summary>
      <param name="forceBinFolderScan">if set to <c>true</c> the bin folder will be scanned for loading assemblies.</param>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyList.#ctor(System.Boolean,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.AssemblyList" /> class.
            </summary>
      <param name="forceBinFolderScan">if set to <c>true</c> the bin and probing folders will be scanned for loading assemblies.</param>
      <param name="relativeProbingPath">The relative probing path where framework should scan assemblies.</param>
    </member>
    <member name="P:EPiServer.Framework.Initialization.AssemblyList.AllowedAssemblies">
      <summary>
            Gets or sets the allowed assemblies.
            </summary>
      <value>The allowed assemblies.</value>
      <remarks>
        <para>
            See the constructors for details on how the AllowedAssemblies gets populated.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyList.AllScannableAssemblies(System.Boolean,System.String)">
      <summary>
            Loads and returns the list of alls the scannable assemblies.
            </summary>
      <param name="forceBinFolderScan">if set to <c>true</c> then bin and probing folders will be scanned for loading assemblies.</param>
      <param name="relativeProbingPath">The relative probing path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Initialization.AssemblyList.LoadAllAssembliesInFolder(System.String)">
      <summary>
            Loads all assemblies in specified folder.
            </summary>
      <param name="path">The folder path.</param>
    </member>
    <member name="T:EPiServer.Framework.Initialization.IInitializationEngine">
      <summary>
            Used internally by EPiServer to initialize a set of modules
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Initialization.IInitializationEngine.HostType">
      <summary>
            The <see cref="P:EPiServer.Framework.Initialization.IInitializationEngine.HostType" /> of the current application
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Initialization.IInitializationEngine.InitializationState">
      <summary>
            Gets or sets the state of the initialization.
            </summary>
      <value>The state of the initialization.</value>
    </member>
    <member name="P:EPiServer.Framework.Initialization.IInitializationEngine.Modules">
      <summary>
            The list of modules that should be initialized
            </summary>
    </member>
    <member name="E:EPiServer.Framework.Initialization.IInitializationEngine.InitComplete">
      <summary>
            InitComplete is raised when initialization is complete.
            </summary>
      <remarks>
            Initialization is complete when all intializable modules have executed successfully (without throwing
            any exception).
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Initialization.IInitializationEngine.Configure">
      <summary>
            Calls all <see cref="T:EPiServer.ServiceLocation.IConfigurableModule" /> instances.
            </summary>
      <remarks>Calling this method is optional, it must be called before <see cref="M:EPiServer.Framework.Initialization.IInitializationEngine.Initialize" /></remarks>
    </member>
    <member name="M:EPiServer.Framework.Initialization.IInitializationEngine.Initialize">
      <summary>
            Initializes all initializable modules.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.IInitializationEngine.Uninitialize">
      <summary>
            Un-initialize all initializable modules.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Initialization.HostType">
      <summary>
            The type of host application that is being initialized
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Initialization.HostType.Undefined">
      <summary>
            Host type is not defined, it is not supported to initialize with an undefined host type
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Initialization.HostType.WebApplication">
      <summary>
            A web application that supports the full API, supported for production workloads.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Initialization.HostType.Service">
      <summary>
            Legacy mirroring service
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Framework.Initialization.HostType.Installer">
      <summary>
            Legacy installer framework
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Initialization.HostType.VisualStudio">
      <summary>
            Legacy visual studio framework
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Initialization.HostType.TestFramework">
      <summary>
            A limited runtime for integration testing, not supported for production workloads
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Initialization.HostType.LegacyMirroringAppDomain">
      <summary>
            Legacy mirroring appdomain
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Initialization.InitializationEngine">
      <summary>
            Used internally by EPiServer to initialize a set of modules
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Framework.IInitializableModule},EPiServer.Framework.Initialization.HostType)">
      <summary>
            Constructor used for testing and outside-the-web purposes.
            </summary>
      <param name="modules">The list of modules to initialize using this engine.</param>
      <param name="hostType">The type of host this engine initializes.</param>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Framework.IInitializableModule},EPiServer.Framework.Initialization.HostType,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Constructor used for testing and outside-the-web purposes.
            </summary>
      <param name="modules">The list of modules to initialize using this engine.</param>
      <param name="hostType">The type of host this engine initializes.</param>
      <param name="assemblies">A list of assemblies that can be scanned as part of initialization</param>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.#ctor(EPiServer.ServiceLocation.AutoDiscovery.IServiceLocatorFactory)">
      <summary>
            Constructor used when service locator and service configuration provider is created from passed in factory
            </summary>
      <remarks>
            Will initialize the application as <see cref="F:EPiServer.Framework.Initialization.HostType.WebApplication" /></remarks>
      <param name="serviceLocatorFactory">The factory used to create service configuration provider and locator</param>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.#ctor(EPiServer.ServiceLocation.AutoDiscovery.IServiceLocatorFactory,EPiServer.Framework.Initialization.HostType)">
      <summary>
            Constructor used when service locator and service configuration provider is created from passed in factory
            </summary>
      <param name="hostType">Specifies which hosttype the application should be initialized as</param>
      <param name="serviceLocatorFactory">The factory used to create service configuration provider and locator</param>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.#ctor(EPiServer.ServiceLocation.AutoDiscovery.IServiceLocatorFactory,EPiServer.Framework.Initialization.HostType,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Constructor used when service locator and service configuration provider is created from passed in factory and
            scanning is done from explicit specified assemblies
            </summary>
      <param name="hostType">Specifies which hosttype the application should be initialized as</param>
      <param name="serviceLocatorFactory">The factory used to create service configuration provider and locator</param>
      <param name="assemblies">The assemblies to scan</param>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.#ctor(EPiServer.ServiceLocation.AutoDiscovery.IServiceLocatorFactory,System.Collections.Generic.IEnumerable{EPiServer.Framework.IInitializableModule},EPiServer.Framework.Initialization.HostType,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},EPiServer.Framework.TypeScanner.Internal.IAssemblyScanner)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructor used for testing and outside-the-web purposes, not intended for public use
            </summary>
      <param name="serviceLocatorFactory">The factory used to create service configuration provider and locator</param>
      <param name="modules">The list of modules to initialize using this engine.</param>
      <param name="hostType">The type of host this engine initializes.</param>
      <param name="assemblies">A list of assemblies that can be scanned as part of initialization</param>
      <param name="assemblyScanner">The assembly scanner</param>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Initialization.InitializationEngine.Assemblies">
      <summary>
            A list of assemblies that should participate in the initialization
            </summary>
      <remarks>
        <para>This list will be the base for different scanning operations done within the initialization such
            as plug-in systems and services configured using <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationAttribute" />, it is also
            used if <see cref="M:EPiServer.Framework.Initialization.InitializationEngine.ScanAssemblies" /> is called to automatically populate the list of assemblies.</para>
        <para>By default when EPiServer initializes this will be set to a list of allowed assemblies configured
            in <see cref="P:EPiServer.Framework.Initialization.InitializationModule.Assemblies" /></para>
      </remarks>
    </member>
    <member name="P:EPiServer.Framework.Initialization.InitializationEngine.Modules">
      <summary>
            The list of modules that should be initialized
            </summary>
      <remarks>You can automatically populate this list by calling <see cref="M:EPiServer.Framework.Initialization.InitializationEngine.ScanAssemblies" /></remarks>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.GetDependencySortedModules">
      <summary>
            Gets the list of initialization modules sorted by dependencies.
            </summary>
      <returns>A list of IInitializableModule.</returns>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.ScanAssemblies">
      <summary>
            Scans the list of assemblies for initialization modules
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.BuildTypeScanner">
      <summary>
            Builds a <see cref="T:EPiServer.Framework.TypeScanner.ITypeScannerLookup" /> from configured assemblies and modules
            </summary>
      <returns>A type scanner lookup</returns>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.Initialize">
      <summary>
            Initializes all initializable modules.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.Initialize(EPiServer.Framework.Initialization.HostType)">
      <summary>
            Initializes all initializable modules.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.Configure">
      <summary>
            Calls all <see cref="T:EPiServer.ServiceLocation.IConfigurableModule" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.ConfigureModules(System.Collections.Generic.IEnumerable{EPiServer.Framework.IInitializableModule})">
      <summary>
            Calls all <see cref="T:EPiServer.ServiceLocation.IConfigurableModule" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.InitializeModules">
      <summary>
            Initializes the modules.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.Uninitialize">
      <summary>
            Un-initialize all initializable modules.
            </summary>
    </member>
    <member name="E:EPiServer.Framework.Initialization.InitializationEngine.InitComplete">
      <summary>
            InitComplete is raised when initialization is complete.
            </summary>
      <remarks>
            Initialization is complete when all intializable modules have executed successfully (without throwing
            any exception).
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.OnInitComplete">
      <summary>
            Called when initialization is complete to raise the InitComplete event.
            </summary>
      <remarks>
            The invocation of the InitComplete event is a bit special. In order to support the same kind of "retry on
            exception" semantics as for the <see cref="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)" /> method, we simply remove the
            delegate from the event handler once it has executed successfully (i.e. without throwing an exception).
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Initialization.InitializationEngine.InitializationState">
      <summary>
            Gets or sets the state of the initialization.
            </summary>
      <value>The state of the initialization.</value>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationEngine.IsInitialized(EPiServer.Framework.IInitializableModule)">
      <summary>
            Determines whether the specified module is initialized.
            </summary>
      <param name="module">The module.</param>
      <returns>
        <c>true</c> if the specified module is initialized; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.Framework.Initialization.InitializationEngine.HostType">
      <summary>
            The <see cref="P:EPiServer.Framework.Initialization.InitializationEngine.HostType" /> of the current application
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Initialization.InitializationException">
      <summary>
            Thrown by the initialization engine and contains references to one or more initialization modules causing the exception
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.InitializationException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.InitializationException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.InitializationException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.InitializationException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.InitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.InitializationException" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Initialization.InitializationException.ModuleTypes">
      <summary>
            List of initialization modules
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Initialization.Internal.InitializationEngineTypeScanner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Type scanning logic for <see cref="T:EPiServer.Framework.Initialization.InitializationEngine" /></summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Initialization.Internal.InitializationExceptionHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.Internal.InitializationExceptionHelper.ThrowIfAddonSystemIsOld(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. In 7.5 the add-on system itself was an add-on and customers will not get the updated version unless we force them to install via NuGet
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.Internal.InitializationExceptionHelper.ThrowIfMirroringSystemIsOld(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Mirroring have to be manually upgraded, avoid that people are running using the old version.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.Internal.InitializationExceptionHelper.ThrowIfShellIsOld(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Shell was moved to UI in CMS 10, make sure an old Shell is not left in bin if UI is not installed
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.Internal.InitializationExceptionHelper.ThrowIfLegacyDllIsPresent(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The DLLs removed in 9 are  left behind if you do a install rather than an upgrade of the NuGet packages. Make a friendly error.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.Internal.InitializationExceptionHelper.ThrowFriendlyAddonException(System.Exception,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Wrap exception to present information on how to disable add-ons or convert to NuGet add-ons
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Initialization.Internal.InitializationExceptionHelper.ThrowFriendlyTypeScannerException(System.Collections.Generic.IEnumerable{EPiServer.Framework.TypeScanner.TypeScannerReflectionException},System.Collections.Generic.IEnumerable{System.String})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rethrow reflection errors in a more readable approach with support on how to disable add-ons
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Initialization.TimeMeters">
      <summary>
            hold stopowatch for each registered key in memory, 
            The class is not thread safe. It is used only internally
            to see result from time meters you can navigate to ~/siteurl/shell/Debug/ShowTimeMeters with administrator permission has access to the result
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.TimeMeters.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Initialization.TimeMeters" /> class.
            </summary>
      <param name="owner">The t.</param>
    </member>
    <member name="M:EPiServer.Framework.Initialization.TimeMeters.Start(System.String)">
      <summary>
            Stops measuring elapsed time for an interval for the specified key.
            </summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:EPiServer.Framework.Initialization.TimeMeters.Stop(System.String)">
      <summary>
            Stops measuring elapsed time for an interval for the specified key.
            </summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:EPiServer.Framework.Initialization.TimeMeters.Restart(System.String)">
      <summary>
            Stops time interval measurement, resets the elapsed time to zero, and starts 
            measuring elapsed time for the specified key.
            </summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:EPiServer.Framework.Initialization.TimeMeters.ToString(System.String)">
      <summary>
            Returns elapsed time in friendly format for the key.
            </summary>
      <param name="key">The key.</param>
      <returns>
            Elapsed time in friendly format for the key.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Initialization.TimeMeters.Log">
      <summary>
            Logs elapsed time in friendly format for all registered keys.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.TimeMeters.ToString">
      <summary>
             Returns elapsed time in friendly format for all registered keys.
            </summary>
      <returns>
            Returns elapsed time in friendly format for all registered keys.
            </returns>
    </member>
    <member name="P:EPiServer.Framework.Initialization.TimeMeters.Counters">
      <summary>
            Gets the counters.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Initialization.TimeMeters.Owner">
      <summary>
            Gets the owner.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Initialization.TimeMeters.Register(System.Type)">
      <summary>
            Registers a timeMeter for the specified type.
            </summary>
      <param name="owner">The requested type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.Initialization.TimeMeters.GetAllRegistered">
      <summary>
            Gets all registered TimeMeters.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Framework.Initialization.TimeMeters.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Framework.Initialization.TimeMeters" /> is enabled and 
            the TimeMeters can be registered as global in the system
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Framework.Internal.ActivatorUtilities">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Internal.DefaultContextCache">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This implementation of ContextCache uses AsyncLocal type (represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.) 
            which is shared bewteen threads in the Execution Conxtext. Each request threads has own _local.Value becuase runs under separate execution context.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Internal.ICultureAccessor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Internal.IPhysicalPathResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Internal.IPhysicalPathResolver.Rebase(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Rebases the physical path according to the AppDataPathKey value, environment variables and relative paths.
            </summary>
      <param name="path">The path to rebase</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Internal.IRegisterStoppableObjects">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Internal.PhysicalPathResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.ISortable">
      <summary>
            Used to be able to sort items of a type implementing the interface.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.ISortable.SortOrder">
      <summary>
            Used to sort items that implements this interface.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.SortableComparer">
      <summary>
            Used to compare sort two instances that implements <see cref="T:EPiServer.Framework.ISortable" />. 
            </summary>
    </member>
    <member name="M:EPiServer.Framework.SortableComparer.Compare(EPiServer.Framework.ISortable,EPiServer.Framework.ISortable)">
      <summary>
            Compares the specified x.
            </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Framework.ITimeProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.ITimeProvider.RequestTime">
      <summary>
            Gets the time of the current request.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.ITimeProvider.UtcNow">
      <summary>
            Gets the current time in universal format.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.ITimeProvider.Now">
      <summary>
            Gets the current local time.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Localization.CultureInfoExtensions">
      <summary>
            Extension methods to localize the name of CultureInfos.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.CultureInfoExtensions.Translate(System.Globalization.CultureInfo)">
      <summary>
            Translates the specified culture info name using <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current" />.
            </summary>
      <param name="cultureInfo">The culture info.</param>
      <returns>The translated name otherwise the native name.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.CultureInfoExtensions.Translate(System.Globalization.CultureInfo,EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Translates the specified culture info name using the specified <paramref name="localizationService" />.
            </summary>
      <param name="cultureInfo">The culture info.</param>
      <param name="localizationService">The localization service.</param>
      <returns>The translated name otherwise the native name.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.CultureInfoExtensions.TranslateCultureName(System.String)">
      <summary>
            Translates the specified culture name using <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current" />.
            </summary>
      <param name="cultureName">Name of the culture.</param>
      <returns>
      </returns>
      <returns>The translated name otherwise the native name.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.CultureInfoExtensions.TranslateCultureName(System.String,EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Translates the specified culture name using the specified <paramref name="localizationService" />.
            </summary>
      <param name="cultureName">Name of the culture.</param>
      <param name="localizationService">The localization service.</param>
      <returns>The translated name otherwise the native name.</returns>
    </member>
    <member name="T:EPiServer.Framework.Localization.FallbackBehaviors">
      <summary>
            Specifies which behaviours that should be used as fallback when no match is found for the provided key.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Localization.FallbackBehaviors.None">
      <summary>
            An empty string is returned in case of no match.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Localization.FallbackBehaviors.Echo">
      <summary>
            The key is returned unmodified if no match is found and the key is not a complex key.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Localization.FallbackBehaviors.MissingMessage">
      <summary>
            A message saying that no resource was found is returned if no match is found.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Localization.FallbackBehaviors.FallbackCulture">
      <summary>
            The resource is returned using the fallback culture if no match is found.
            Requires a fallback culture to be specified.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Localization.FallbackBehaviors.Null">
      <summary>
            A null string is returned in case of no match.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Localization.ILanguageKeyResolver">
      <summary>
            Signature for component that can be registered with <see cref="T:EPiServer.Framework.Localization.ResourceKeyHandler" /> to handle resolve of qualified language path from a short format given 
            some context, e.g. web context.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ILanguageKeyResolver.Resolve(System.String)">
      <summary>
            Translates a key to a qualified language key from context
            </summary>
      <param name="languageKey">The language key to resolve</param>
      <returns>A resolved language key</returns>
    </member>
    <member name="T:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A memory based implementation of a <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" />. 
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider.#ctor(EPiServer.Framework.Localization.ResourceKeyHandler)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider" /> class.
            </summary>
      <param name="keyHandler">The handler used to manipulate resource keys.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider.Initialize(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes the provider with the default configuration.
            </summary>
      <param name="name">The name of the provider.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider.AddString(System.Globalization.CultureInfo,System.String,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a string to the <see cref="T:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider" /> dictionary.
            </summary>
      <param name="culture">The culture that the string should be associated with.</param>
      <param name="resourceKey">The key that the string should be associated with.</param>
      <param name="value">The string value.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider.RemoveString(System.Globalization.CultureInfo,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes a string from the <see cref="T:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider" /> dictionary.
            </summary>
      <param name="culture">The culture that the string is associated with.</param>
      <param name="resourceKey">The key that the string is associated with.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider.ClearStrings">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes all strings from the <see cref="T:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider" /> dictionary.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider.ClearStrings(System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Removes all strings from the <see cref="T:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider" /> dictionary for a specific culture.
            </summary>
      <param name="culture">The culture to clear all strings from.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider.AvailableLanguages">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all available languages.
            An available language does not need to contain any translations.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider.GetString(System.String,System.String[],System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the localized string for the specified key in the specified culture.
            </summary>
      <param name="originalKey">The original key that was passed into any GetString method.</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the localized string.</param>
      <returns>A localized string or <c>null</c> if no resource is found for the given key and culture.</returns>
      <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)" />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.Internal.MemoryLocalizationProvider.GetAllStrings(System.String,System.String[],System.Globalization.CultureInfo)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets all localized strings for the specified culture below the specified key.
            </summary>
      <param name="originalKey">The original key that was passed into any GetString method.</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the localized strings.</param>
      <returns>All localized strings below the specified key.</returns>
      <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)" />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Localization.LocalizationOptions">
      <summary>
            Contains various options that controls how Localization in EPiServer is setup.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationOptions.FallbackBehavior">
      <summary>
            Specifies which fallback behaviour to use when a localization string does not exist.
            </summary>
      <remarks>
            Default value is FallbackBehaviors.FallbackCulture | FallbackBehaviors.Echo
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationOptions.FallbackCulture">
      <summary>
            Specifies which fallback culture that is used when a localization string does not exist in a specific language.
            </summary>
      <remarks>
            The default value is CultureInfo.GetCultureInfo("en")
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationOptions.Providers">
      <summary>
            The localizations providers that should be used by <see cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService" />.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationOptions.AddProvider``1">
      <summary>
            Adds a <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> of the given type.
            </summary>
      <typeparam name="TProvider">The type of provider to add.</typeparam>
      <remarks>The provider will be assigned a randomly generated name.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationOptions.AddProvider``2(System.Action{``1})">
      <summary>
            Adds a <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> of the given type
            using the provided method to configure the provider options.
            </summary>
      <typeparam name="TProvider">The type of provider to add.</typeparam>
      <typeparam name="TProviderOptions">The type of the options class expected by the specific provider type.</typeparam>
      <param name="configure">Configuration method for setting up provider options.</param>
      <remarks>The provider will be assigned a randomly generated name.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationOptions.InsertProvider``1">
      <summary>
            Inserts a <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> to the top of the <see cref="P:EPiServer.Framework.Localization.LocalizationOptions.Providers" /> list.
            </summary>
      <typeparam name="TProvider">The type of provider to add.</typeparam>
      <remarks>The provider will be assigned a randomly generated name.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationOptions.InsertProvider``2(System.Action{``1})">
      <summary>
            Inserts a <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> to the top of the <see cref="P:EPiServer.Framework.Localization.LocalizationOptions.Providers" /> list
            using the provided method to configure the provider options.
            </summary>
      <typeparam name="TProvider">The type of provider to add.</typeparam>
      <typeparam name="TProviderOptions">The type of the options class expected by the specific provider type.</typeparam>
      <param name="configure">Configuration method for setting up provider options.</param>
      <remarks>The provider will be assigned a randomly generated name.</remarks>
    </member>
    <member name="T:EPiServer.Framework.Localization.LocalizationProvider">
      <summary>
            Provides the base class for creating a provider to handle localized resources.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider</param>
      <param name="config"> A collection of the name/value pairs representing the provider-specific attributes
            specified in the configuration for this provider.</param>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationProvider.Name">
      <summary>
            Gets the friendly name used to refer to the provider
            </summary>
      <remarks>Default name is 'default'</remarks>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationProvider.AvailableLanguages">
      <summary>
            Gets all available languages. 
            An available language does not need to contain any translations.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationProvider.GetString(System.String,System.String[],System.Globalization.CultureInfo)">
      <summary>
            Gets a localized string from a resource key.
            </summary>
      <param name="originalKey">The unmodified key</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the resource string</param>
      <returns>A translated resource string</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationProvider.GetAllStrings(System.String,System.String[],System.Globalization.CultureInfo)">
      <summary>
            Gets all localized strings for a specific culture. Will return all strings below the specified key.
            </summary>
      <param name="originalKey">The unmodified key</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the resource string</param>
      <returns>All resource strings below the specified key</returns>
    </member>
    <member name="T:EPiServer.Framework.Localization.LocalizationProviderBuilder">
      <summary>
            Used to configure and build a <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" />.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationProviderBuilder.#ctor(System.String,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.LocalizationProviderBuilder" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationProviderBuilder.Name">
      <summary>
            Gets the name of the <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" />.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationProviderBuilder.ProviderType">
      <summary>
            Gets the type of the <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" />.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationProviderBuilder.Options">
      <summary>
            Gets the Options instance. Exposed for test purposes.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationProviderBuilder.Configure``1(System.Action{``0})">
      <summary>
            Adds a configuration of the provider.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationProviderBuilder.Build(EPiServer.ServiceLocation.IServiceLocator)">
      <summary>
            Builds a new <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> instance.
            </summary>
      <param name="serviceLocator">The service locator used to create provider instances.</param>
      <returns>A new <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> instance.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationProviderBuilder.Create``1(System.String)">
      <summary>
            Factory method for creating a new <see cref="T:EPiServer.Framework.Localization.LocalizationProviderBuilder" /> instance.
            </summary>
      <typeparam name="TProvider">Type of the provider instance. Must implement LocalizationProvider.</typeparam>
      <param name="name">The name of the localization provider.</param>
      <returns>A new <see cref="T:EPiServer.Framework.Localization.LocalizationProviderBuilder" /> instance.</returns>
      <remarks>If no name is provided, the provider will be assigned a randomly generated name</remarks>
    </member>
    <member name="T:EPiServer.Framework.Localization.LocalizationService">
      <summary>
            Provides the base class for service for localized resources for a specific culture.
            </summary>
      <seealso cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService" />
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.#ctor(EPiServer.Framework.Localization.ResourceKeyHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> class.
            </summary>
      <param name="keyHandler">The handler used to manipulate resource keys.</param>
    </member>
    <member name="F:EPiServer.Framework.Localization.LocalizationService.MissingMessageFormat">
      <summary>
            The formatting string that is used when a key is missing for a language.
            </summary>
    </member>
    <member name="E:EPiServer.Framework.Localization.LocalizationService.ResourceKeyNormalized">
      <summary>
            Occurs when a resource key has been normalized. At this time you have the opportunity to modify the contents of this array.
            </summary>
      <remarks>
            If you modify the contents of the normalized array, you should always ensure that it is not null.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationService.Current">
      <summary>
            Gets the current <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> instance. 
            </summary>
      <remarks>
            This is a shortcut to the <see cref="T:EPiServer.ServiceLocation.ServiceLocator" /> for the current service, 
            but it is guaranteed to never be <c>null</c>.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationService.KeyHandler">
      <summary>
            Gets the handler that is used to manipulate resource keys.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationService.AvailableLocalizations">
      <summary>
            Gets all available localizations that the <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> has knowledge of. 
            </summary>
      <remarks>
        <para>
            An available localizations does not need to contain any translations.
            </para>
        <para>
            Available languages should never contain the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> even though
            it may be supported by the <see cref="T:EPiServer.Framework.Localization.LocalizationService" />.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationService.FallbackBehavior">
      <summary>
            Gets or sets the fallback behavior to use when no resource is found.
            </summary>
      <value>
            The fallback behavior.
            </value>
      <remarks>
        <para>
                    The value can be set by configuration (see 'EPiServer.Framework.Configuration.LocalizationElement') or by code.
                </para>
        <para>
                    If <see name="FallbackBehavior" /> contains <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.Echo" /> then if key does not start with a '#' of a '/', 
                    the resourceKey is returned back unmodified when no match is found.<br />
                    If <see name="FallbackBehavior" /> contains <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.MissingMessage" /> then if no match for key is found 
                    will return a message stating that the resource could not be found.
                </para>
        <para>
                    The reason for the possibility to use an echo behavior is to be able to use EPiServer web controls 
                    that use Translate for visible strings, where you might not have translations in place, or maybe do not want to translate the text.
                </para>
      </remarks>
    </member>
    <member name="P:EPiServer.Framework.Localization.LocalizationService.FallbackCulture">
      <summary>
            Gets or sets the fallback culture to use if a resource is not found for the requested culture.
            </summary>
      <value>
            The fallback culture to use.
            </value>
      <remarks>
        <para>
                Note that the <see cref="T:EPiServer.Framework.Localization.FallbackBehaviors" /> must contain the <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.FallbackCulture" /> flag 
                for this culture to be used.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)">
      <summary>
            Gets the localized string for the specified key in the current UI culture.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <returns>A localized string.</returns>
      <remarks>
        <para>
                    The <paramref name="resourceKey" /> is default typically something like "/admin/settings/heading", where the expression closely follows
                    the folder/file/usage pattern. You can also enter a '#' to automatically constuct a path to the current 
                    file. For example when calling GetString("#heading") from the file /templates/mypage.aspx it is 
                    equivalent to calling GetString("/templates/mypage/heading").
                </para>
        <para>
                    The return value when no match for <paramref name="resourceKey" /> is found is dependent on the value 
                    of the <see cref="P:EPiServer.Framework.Localization.LocalizationService.FallbackBehavior" /> property.
                </para>
        <para>
                    Multiple fallback behaviors can be combined, but fallback will always be evaluated in the follwing order
                    (if specified):
                    <list type="number"><item><description>FallbackCulture</description></item><item><description>Explicit fallback string</description></item><item><description>Echo</description></item><item><description>MissingMessage</description></item><item><description>Null</description></item></list>
                    If no fallback is specified an empty string will be returned.
                </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String,System.String)">
      <summary>
            Gets the localized string for the specified key in the current UI culture.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <param name="fallback">The string to return if no match was found for <paramref name="resourceKey" />.</param>
      <returns>A localized string or <paramref name="fallback" />.</returns>
      <remarks>
        <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)" /> for information on the format of <paramref name="resourceKey" />.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets the localized string for the specified key in the specified culture.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <param name="fallback">The string to return if no match was found for <paramref name="resourceKey" />.</param>
      <param name="culture">The requested culture for the localized string.</param>
      <returns>A localized string or <paramref name="fallback" />.</returns>
      <remarks>
        <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)" /> for information on the format of <paramref name="resourceKey" />.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets the localized string for the specified key in the specified culture
            using the standard fallback behavior.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <param name="culture">The requested culture for the localized string.</param>
      <returns>A localized string.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String,EPiServer.Framework.Localization.FallbackBehaviors)">
      <summary>
            Gets the localized string for the specified key in the current UI culture
            using the provided fallback behavior.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <param name="fallbackBehavior">The fallback behavior to use if the resource is not found.</param>
      <returns>
            A localized string.
            </returns>
      <remarks>
        <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)" /> for information on the format of <paramref name="resourceKey" />.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,EPiServer.Framework.Localization.FallbackBehaviors,System.Globalization.CultureInfo)">
      <summary>
            Gets the localized string for the specified key in the specified culture
            using the provided fallback behavior.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <param name="culture">The requested culture for the localized string.</param>
      <param name="fallbackBehavior">The fallback behavior to use if the resource is not found.</param>
      <returns>A localized string.</returns>
      <remarks>
        <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)" /> for information on the format of <paramref name="resourceKey" />.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,EPiServer.Framework.Localization.FallbackBehaviors,System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets the localized string for the specified key in the specified culture
            using the provided fallback behavior.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <param name="fallbackBehavior">The fallback behavior to use if the resource is not found.</param>
      <param name="fallback">A string that should be returned if no match was found for <paramref name="resourceKey" />.</param>
      <param name="culture">The requested culture for the localized string.</param>
      <returns>A localized string.</returns>
      <remarks>
        <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)" /> for information on the format of <paramref name="resourceKey" />.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.LoadString(System.String[],System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets the localized string for the specified key in the specified culture.
            </summary>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array.</param>
      <param name="originalKey">The original key that was passed into any GetString method.</param>
      <param name="culture">The requested culture for the localized string.</param>
      <returns>A localized string or <c>null</c> if no resource is found for the given key and culture.</returns>
      <remarks>
            Any implementation must make sure that if no resource is found for the given key and culture, 
            <c>null</c> must be returned.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.TryGetString(System.String,System.String@)">
      <summary>
            Tries to get the localized string for the specified key in the current UI culture.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <param name="localizedString">The localized string that if found will be populated. If not found it will be set to null.</param>
      <returns>
        <c>true</c> if a localized string is found; otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)" /> for information on the format of <paramref name="resourceKey" />.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.TryGetStringByCulture(System.String,System.Globalization.CultureInfo,System.String@)">
      <summary>
            Tries to get the localized string for the specified key in the specified culture.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <param name="culture">The requested culture for the localized string.</param>
      <param name="localizedString">The localized string that if found will be populated. If not found it will be set to null.</param>
      <returns>
        <c>true</c> if a localized string is found; otherwise <c>false</c>.</returns>
      <remarks>
        <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)" /> for information on the format of <paramref name="resourceKey" />.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.TryGetStringByCulture(System.String,System.String[],System.Globalization.CultureInfo,System.String@)">
      <summary>
            Tries to get the localized string for the specified key in the specified culture.
            </summary>
      <param name="originalKey">The original key that was passed into any GetString method.</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the localized string.</param>
      <param name="localizedString">The localized string that if found will be populated. If not found it will be set to null.</param>
      <returns>
        <c>true</c> if a localized string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.TryGetStringByCulture(System.String,System.String[],System.Globalization.CultureInfo,System.Globalization.CultureInfo,System.String@)">
      <summary>
            Tries to get the localized string for the specified key in the specified culture.
            </summary>
      <param name="originalKey">The original key that was passed into any GetString method.</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the localized string.</param>
      <param name="fallbackCulture">The fallback culture that should be used if no string is found for the requested culture or it's parents.</param>
      <param name="localizedString">The localized string that if found will be populated. If not found it will be set to null.</param>
      <returns>
        <c>true</c> if a localized string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetAllStrings">
      <summary>
            Gets all localized strings for the current UI culture.
            </summary>
      <returns>All resource strings for the current UI culture.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetAllStringsByCulture(System.Globalization.CultureInfo)">
      <summary>
            Gets all localized strings for the specified culture.
            </summary>
      <param name="culture">The requested culture for the localized strings.</param>
      <returns>All localized strings for the given culture.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetAllStrings(System.String)">
      <summary>
            Gets all localized strings for the current UI culture below the specified key.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <returns>All localized strings for the current UI culture below the specified key.</returns>
      <remarks>
        <para>If the key is empty, all strings will be returned.</para>
        <para>
          <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)" /> for information on the format of <paramref name="resourceKey" />.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetAllStringsByCulture(System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets all localized strings for the specified culture below the specified key.
            </summary>
      <param name="resourceKey">The key that represents the localized string to get.</param>
      <param name="culture">The requested culture for the localized strings.</param>
      <returns>All localized strings below the specified key.</returns>
      <remarks>
        <para>If the key is empty, all strings will be returned.</para>
        <para>
          <see cref="M:EPiServer.Framework.Localization.LocalizationService.GetString(System.String)" /> for information on the format of <paramref name="resourceKey" />.</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.AddFallbackStringsToDictionary(System.Collections.Generic.Dictionary{System.String,EPiServer.Framework.Localization.ResourceItem},System.String,System.String[],System.Globalization.CultureInfo)">
      <summary>
            Adds the fallback resource values according to <see cref="P:EPiServer.Framework.Localization.LocalizationService.FallbackCulture" /> and <see cref="P:EPiServer.Framework.Localization.LocalizationService.FallbackBehavior" /> 
            to the <paramref name="targetResources" /> dictionary.
            </summary>
      <param name="targetResources">The target dictionary where the resouces are added.</param>
      <param name="resourceKey">The resource key.</param>
      <param name="normalizedKey">The normalized key.</param>
      <param name="requestedCulture">The requested culture.</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetAllStringsByCulture(System.String,System.String[],System.Globalization.CultureInfo)">
      <summary>
            Gets all localized strings for the specified culture below the specified key.
            </summary>
      <param name="originalKey">The original key that was passed into any GetString method.</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the localized strings.</param>
      <returns>All localized strings below the specified key.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.NormalizeKey(System.String)">
      <summary>
            Normalizes the resource key to an array of key parts split on forward slash (/). 
            If the key starts with a hash (#), it will use the current request path to resolve the key.
            </summary>
      <param name="resourceKey">The resource key to normalize. The key must start with '/' or '#' for the key to be normalized.</param>
      <returns>An normalized array with key parts.</returns>
      <remarks>
            Raises the <see cref="E:KeyNormalized" /> event once normalization is complete. This event allows for external 
            code to modify the standard normalization behavior.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.OnKeyNormalized(EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs)">
      <summary>
            Raises the <see cref="E:KeyNormalized" /> event.
            </summary>
      <param name="args">The <see cref="T:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetMissingMessage(System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets a missing message string
            </summary>
      <param name="resourceKey">The resource that is missing</param>
      <param name="culture">The culture that the key is missing for</param>
      <returns>A missing message</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetActualFallbackCulture(EPiServer.Framework.Localization.FallbackBehaviors,System.Globalization.CultureInfo)">
      <summary>
            Evaluates what fallback culture to use or <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> if no fallback culture should be evaluated.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.LocalizationService.GetMissingFallbackResourceValue(EPiServer.Framework.Localization.FallbackBehaviors,System.String,System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets the the value for a missing resource based on fallback behavior.
            </summary>
      <remarks>
            This method only handles <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.Echo" /> and <see cref="F:EPiServer.Framework.Localization.FallbackBehaviors.Echo" />. 
            No additional resource lookup is done.
            </remarks>
    </member>
    <member name="T:EPiServer.Framework.Localization.LocalizationService.NullLocalizationService">
      <summary>
            A implementation of <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> that will never return any localizations. 
            Used as a fallback for LocalizationService.Current
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Localization.MemoryLocalizationService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A memory based implementation of <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> intended for unit test usage. 
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.#ctor(EPiServer.Framework.Localization.ResourceKeyHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService" /> class.
            </summary>
      <param name="keyHandler">The handler used to manipulate resource keys.</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.AddString(System.Globalization.CultureInfo,System.String,System.String)">
      <summary>
            Adds a string to the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService" /> dictionary.
            </summary>
      <param name="culture">The culture that the string should be associated with.</param>
      <param name="resourceKey">The key that the string should be associated with.</param>
      <param name="value">The string value.</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.RemoveString(System.Globalization.CultureInfo,System.String)">
      <summary>
            Removes a string from the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService" /> dictionary.
            </summary>
      <param name="culture">The culture that the string is associated with.</param>
      <param name="resourceKey">The key that the string is associated with.</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.ClearStrings">
      <summary>
            Removes all strings from the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService" /> dictionary.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.ClearStrings(System.Globalization.CultureInfo)">
      <summary>
            Removes all strings from the <see cref="T:EPiServer.Framework.Localization.MemoryLocalizationService" /> dictionary for a specific culture.
            </summary>
      <param name="culture">The culture to clear all strings from.</param>
    </member>
    <member name="P:EPiServer.Framework.Localization.MemoryLocalizationService.AvailableLocalizations">
      <summary>
            Gets all available localizations that the <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> has knowledge of.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.LoadString(System.String[],System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets the localized string for the specified key in the specified culture.
            </summary>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="originalKey">The original key that was passed into any GetString method.</param>
      <param name="culture">The requested culture for the localized string.</param>
      <returns>A localized string or <c>null</c> if no resource is found for the given key and culture.</returns>
      <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)" />
    </member>
    <member name="M:EPiServer.Framework.Localization.MemoryLocalizationService.GetAllStringsByCulture(System.String,System.String[],System.Globalization.CultureInfo)">
      <summary>
            Gets all localized strings for the specified culture below the specified key.
            </summary>
      <param name="originalKey">The original key that was passed into any GetString method.</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the localized strings.</param>
      <returns>All localized strings below the specified key.</returns>
      <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)" />
    </member>
    <member name="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService">
      <summary>
            Provider based implementation of <see cref="T:EPiServer.Framework.Localization.LocalizationService" />. Uses <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" />s to load localized resources.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.#ctor(EPiServer.Framework.Localization.ResourceKeyHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService" /> class.
            </summary>
      <param name="keyHandler">The handler used to manipulate resource keys.</param>
    </member>
    <member name="P:EPiServer.Framework.Localization.ProviderBasedLocalizationService.Providers">
      <summary>
            Gets a list of the current set of <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> that are used by the <see cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService" />.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Localization.ProviderBasedLocalizationService.ProviderList">
      <summary>
            Gets a list of the current set of <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> that are used
            by the <see cref="T:EPiServer.Framework.Localization.ProviderBasedLocalizationService" />.
            </summary>
      <remarks>
        <para>
                Providers are processed in prioritized order from first to last and will return
                localized strings from the first provider that returns a value.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.AddProvider(EPiServer.Framework.Localization.LocalizationProvider)">
      <summary>
            Adds a <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> to the service at the end of the provider list.
            </summary>
      <param name="provider">The provider that should be added.</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.InsertProvider(EPiServer.Framework.Localization.LocalizationProvider)">
      <summary>
            Adds a <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> to the service at the to of the provider list.
            </summary>
      <param name="provider">The provider that should be added.</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.RemoveProvider(System.String)">
      <summary>
            Removes an existing <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> from the list of providers for this service.
            </summary>
      <param name="name">The name of the provider to remove.</param>
      <exception cref="T:System.ArgumentException">Thrown if no provider with the given name has been added to the service.</exception>
    </member>
    <member name="P:EPiServer.Framework.Localization.ProviderBasedLocalizationService.AvailableLocalizations">
      <summary>
            Gets all available localizations that the <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> has knowledge of.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.LoadString(System.String[],System.String,System.Globalization.CultureInfo)">
      <summary>
            Gets the localized string for the specified key in the specified culture.
            </summary>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="originalKey">The original key that was passed into any GetString method.</param>
      <param name="culture">The requested culture for the localized string.</param>
      <returns>A localized string or <c>null</c> if no resource is found for the given key and culture.</returns>
      <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)" />
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.GetAllStringsByCulture(System.String,System.String[],System.Globalization.CultureInfo)">
      <summary>
            Gets all localized strings for the specified culture below the specified key.
            </summary>
      <param name="originalKey">The original key that was passed into any GetString method.</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the localized strings.</param>
      <returns>All localized strings below the specified key.</returns>
      <seealso cref="M:EPiServer.Framework.Localization.LocalizationService.GetStringByCulture(System.String,System.Globalization.CultureInfo)" />
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.CreateLocalizationService(EPiServer.Framework.Localization.ResourceKeyHandler,EPiServer.Framework.Localization.LocalizationOptions,EPiServer.ServiceLocation.IServiceLocator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.Create(EPiServer.Framework.Localization.ResourceKeyHandler,EPiServer.Framework.Localization.LocalizationOptions,EPiServer.ServiceLocation.IServiceLocator)">
      <summary>
            Creates a provider based localization service with providers from the given configuration.
            </summary>
      <param name="keyHandler">The key handler to use for the localization service.</param>
      <param name="localizationOptions">The framework options to use.</param>
      <param name="serviceLocator">The service locator used to create localization provider instances.</param>
      <returns>
            A localization service.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ProviderBasedLocalizationService.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
      <summary>
            Configure the IoC container before initialization.
            </summary>
      <param name="context">The context on which the container can be accessed.</param>
    </member>
    <member name="T:EPiServer.Framework.Localization.ResourceItem">
      <summary>
            Represent information about a string resource item in the system.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceItem.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ResourceItem" /> struct.
            </summary>
      <param name="key">The resource key.</param>
      <param name="value">The resource value.</param>
      <param name="sourceCulture">The culture that the resource is specified in.</param>
    </member>
    <member name="P:EPiServer.Framework.Localization.ResourceItem.Key">
      <summary>
            Gets the resource key.
            </summary>
      <value>
            The resource key.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Localization.ResourceItem.Value">
      <summary>
            Gets the resource value.
            </summary>
      <value>
            The resource value.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Localization.ResourceItem.SourceCulture">
      <summary>
            Gets the culture that the resource was specified in.
            </summary>
      <value>
            The source culture.
            </value>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceItem.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceItem.Equals(EPiServer.Framework.Localization.ResourceItem)">
      <summary>
            Determines whether the specified <see cref="T:EPiServer.Framework.Localization.ResourceItem" /> is equal to this instance.
            </summary>
      <param name="other">The <see cref="T:EPiServer.Framework.Localization.ResourceItem" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:EPiServer.Framework.Localization.ResourceItem" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceItem.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceItem.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceItem.op_Equality(EPiServer.Framework.Localization.ResourceItem,EPiServer.Framework.Localization.ResourceItem)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="item1">The item on the left hand side of the operator.</param>
      <param name="item2">The item on the right hand side of the operator.</param>
      <returns>
        <c>true</c> if the first <see cref="T:EPiServer.Framework.Localization.ResourceItem" /> is equal to the second <see cref="T:EPiServer.Framework.Localization.ResourceItem" />; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceItem.op_Inequality(EPiServer.Framework.Localization.ResourceItem,EPiServer.Framework.Localization.ResourceItem)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="item1">The item on the left hand side of the operator.</param>
      <param name="item2">The item on the right hand side of the operator.</param>
      <returns>
        <c>true</c> if the first <see cref="T:EPiServer.Framework.Localization.ResourceItem" /> is not equal to the second <see cref="T:EPiServer.Framework.Localization.ResourceItem" />; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Framework.Localization.ResourceKeyHandler">
      <summary>
            Performs different operations on resource keys for <see cref="T:EPiServer.Framework.Localization.LocalizationService" />.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Localization.ResourceKeyHandler.ComplexResourceKeySeparator">
      <summary>
            The character that separates the different parts of a complex key.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Localization.ResourceKeyHandler.ComplexResourceKeyIdentifier">
      <summary>
            The character that if present at the start of the resource key, 
            identifies that it is a key that is made up of multiple sections.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ResourceKeyHandler" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.AddLanguageKeyResolver(System.Char,EPiServer.Framework.Localization.ILanguageKeyResolver)">
      <summary>
            Adds a custom language key resolver.
            </summary>
      <param name="contextIdentifier">The character that each resourcejey should start with to be handed by the resolver</param>
      <param name="contextResolver">The resolver</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.NormalizeKey(System.String)">
      <summary>
            Normalizes the resource key to an array of key parts split on forward slash (/) or a custom path resolver. 
            </summary>
      <remarks>
        <para>
            Raises the KeyNormalized event once normalization is complete. This event allows for external 
            code to modify the standard normalization behavior.
            </para>
        <para>
            A custom
            </para>
      </remarks>
      <param name="resourceKey">The resource key to normalize.</param>
      <returns>An normalized array with key parts.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.JoinKey(System.String,System.String[])">
      <summary>
            Joins a normalized key back into a single key string.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.IsComplexKey(System.String)">
      <summary>
            Determines whether the specified key is a complex resource key, i.e. made up by multiple sections.
            </summary>
      <param name="key">The key to test.</param>
      <returns>
        <c>true</c> if the specified key is a complex key; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceKeyHandler.TransformResourceKey(System.String)">
      <summary>
            Transforms a resource key that has the character "." as separator to a key with slashes as separator.
            </summary>
      <param name="resourceKeyWithDotSeparator">A resource key with dot as separator.</param>
      <returns>A resource key with slash as separator.</returns>
      <example>From A.Resource.Key to /A/Resource/Key</example>
    </member>
    <member name="T:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs">
      <summary>
            Provides the data for the <see cref="E:EPiServer.Framework.Localization.LocalizationService.ResourceKeyNormalized" /> event of the <see cref="T:EPiServer.Framework.Localization.LocalizationService" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs.#ctor(System.String[],System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs" /> class.
            </summary>
      <param name="normalizedKey">The normalized key array.</param>
      <param name="originalKey">The original key.</param>
    </member>
    <member name="P:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs.NormalizedKey">
      <summary>
            Gets or sets the normalized key. Any changes to this property will be propagated to the <see cref="T:EPiServer.Framework.Localization.LocalizationService" />.
            </summary>
      <value>
            The normalized key array.
            </value>
      <remarks>
            If you modifies the contents of this property, you must ensure that the array is not null 
            and that all included keys are lower-cased.
            </remarks>
    </member>
    <member name="P:EPiServer.Framework.Localization.ResourceKeyNormalizedEventArgs.OriginalKey">
      <summary>
            Gets the original resource key.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Localization.ScriptResourceHelper">
      <summary>
            Contains string utility methods for working with resources strings for client scripts.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ScriptResourceHelper.PrepareResourceForScript(System.String,System.Boolean)">
      <summary>
            Prepares a localized string for client script usage by removing linebreaks and
            surrounding whitespace. Depending on the escape parameter the string will be either
            escaped for safe javascript output otherwise deliberate linebreaks (\n)
            are replaced with the newline character.
            </summary>
      <param name="resource">The resource string that should be prepared for script usage.</param>
      <param name="escape">If set to <c>true</c> the string is escaped for safe script output,
            otherwise \n are replaced with the newline character.</param>
      <returns>
            A string prepared for script usage.
            </returns>
      <remarks>
            The string returned may need to be escaped before rendered as a javascript
            string depending on the <paramref name="escape" /> parameter.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Localization.ScriptResourceHelper.PrepareResourceForScript(System.String)">
      <summary>
            Prepares a localized string for client script usage by removing linebreaks and
            surrounding whitespace. It will then be escaped for safe javascript output.
            </summary>
      <param name="resource">The resource string that should be prepared for script usage.</param>
      <returns>
            A string prepared for script usage.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ScriptResourceHelper.RemoveNewLineWhiteSpace(System.String)">
      <summary>
            Removes all new line characters and surrounding whitespace.
            </summary>
      <param name="resource">The string to remove newline characters from.</param>
      <returns>The string with new line characters removed.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ScriptResourceHelper.ConvertNewLines(System.String)">
      <summary>
            Converts any implied newline characters (backslash + 'n') to actual newlines.
            </summary>
      <param name="resource">The resource string.</param>
      <returns>The string with actual newline characters.</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.ScriptResourceHelper.EscapeForScript(System.String)">
      <summary>
            Escapes a string for script output, but leaves any occurances of \n intact.
            <list type="bullet"><item>Escapes \ with \\</item><item>Escapes ' with \'</item><item>Escapes " with \"</item></list></summary>
      <param name="resource">The resource string to escape.</param>
      <returns>The escaped string</returns>
    </member>
    <member name="T:EPiServer.Framework.Localization.ServiceLocationHelperExtensions">
      <summary>
            Makes Localization services part of the public API.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.ServiceLocationHelperExtensions.LocalizationService(EPiServer.ServiceLocation.ServiceLocationHelper)">
      <summary>
            Resolves the <see cref="M:EPiServer.Framework.Localization.ServiceLocationHelperExtensions.LocalizationService(EPiServer.ServiceLocation.ServiceLocationHelper)" />.
            </summary>
      <param name="helper">The service helper.</param>
      <returns>The currently registered <see cref="M:EPiServer.Framework.Localization.ServiceLocationHelperExtensions.LocalizationService(EPiServer.ServiceLocation.ServiceLocationHelper)" />.</returns>
    </member>
    <member name="T:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProvider">
      <summary>
            A <see cref="T:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider" /> that loads xml files stored as embedded resources.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProvider.Initialize(System.String,EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProviderOptions)">
      <summary>
            Initializes the current provider with the given options.
            </summary>
      <param name="name">The name of the provider</param>
      <param name="options">The provider options</param>
    </member>
    <member name="T:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProviderOptions">
      <summary>
            Provides options for an <see cref="T:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProvider" />.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProviderOptions.ResourceExtension">
      <summary>
            Gets or set a file extension that all resource files embedded in the assemblies will have.
            Default value is '.xml'.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProviderOptions.Assemblies">
      <summary>
            Gets a list of all assemblies from where the provider should load resource files from.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProviderInitializer">
      <summary>
            Initializes a new <see cref="T:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider" /> using xml files stored as embedded resources.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.EmbeddedXmlLocalizationProviderInitializer.GetInitializedProvider(System.String,System.Reflection.Assembly[])">
      <summary>
            Extracts all embedded xml resource files and adds them to a <see cref="T:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider" /></summary>
      <param name="nameOfProvider">The name of the provider.</param>
      <param name="assembliesContainingEmbeddedResources">The assemblies containing embedded xml resource files.</param>
      <returns>A new initialized provider.</returns>
      <remarks>It will try to include all embedded resources that ends with ".xml" from <paramref name="assembliesContainingEmbeddedResources" />.</remarks>
    </member>
    <member name="T:EPiServer.Framework.Localization.XmlResources.Internal.ExtensionMethods">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Extension methods used by the XmlResource system
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Localization.XmlResources.Internal.LanguageDocument">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Used to load and fetch translations that are stored in xml documents.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.Internal.LanguageDocument.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.XmlResources.Internal.LanguageDocument" /> class.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.Internal.LanguageDocument.Root">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the root node.
            </summary>
      <value>The root node.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.Internal.LanguageDocument.FindNode(System.String[])">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Finds the node that matches the given language key.
            </summary>
      <param name="tokens">The tokens.</param>
      <returns>
            The <see cref="T:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode" /> that matches the given key, or null if no such translation exists.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.Internal.LanguageDocument.Translate(System.String[],System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Translates the specified key.
            </summary>
      <param name="keys">The keys.</param>
      <param name="language">The language.</param>
      <returns>
            A translated string if the translation exists; otherwise null.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.Internal.LanguageDocument.Load(System.IO.Stream)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Loads translations from a specified file stream.
            </summary>
      <param name="stream">The stream containg the XML document.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. LanguageNode are items in a <see cref="T:EPiServer.Framework.Localization.XmlResources.Internal.LanguageDocument" /> that is used to store the content of language translation files.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode.#ctor(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Create a new LanguageNode with the given name.
            </summary>
      <param name="name">The name of the new node.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode.Name">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the name of the node.
            </summary>
      <remarks>
            If the node has an attribute, it will be returned with the Name property. To get the
            name without attribute, use the SimpleName property. I e if the node is created with
            constructor parameter "node[@id=23]", Name will return "node[@id=23]", SimpleName
            will return "node" and Attribute will return " [@id=23]".
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode.Value">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Access the value of the node.
            </summary>
      <remarks>
            If the node has not been give a value, it will return String.Empty.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode.Parent">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the parent of this node.
            </summary>
      <remarks>
            If this is the root node, null is returned.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode.Children">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get a collection of children to this node.
            </summary>
      <remarks>
            Even if no children exists, a valid collection is returned with Count = 0
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode.HasChildren">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a value indicating whether this instance has children.
            </summary>
      <value>
        <c>true</c> if this instance has children; otherwise, <c>false</c>.
            </value>
      <remarks>
            Use this property for performance reasons. When accessing the Children property you will create a new dictionary object if none exists.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode.Item(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Accesses the child node with the requested name.
            </summary>
      <param name="name">Name of the child node to access.</param>
      <returns>The requested LanguageNode.</returns>
      <remarks>
            If the node is not found, null is returned for the get accessor and a new node is inserted for the set accessor.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode.Path">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Get the full path to this node.
            </summary>
      <remarks>
            Returns a path formatted as a simple XPath expression, for example "/root/child1/child2".
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode.AddIfNotExist(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Add a new node with the given name if it does not exists, otherwise returns the existing node.
            </summary>
      <param name="name">The node name.</param>
      <returns>A new or previously existing node.</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.Internal.LanguageNode.IsNonPathNode">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Returns <c>true</c> if the node is part of the xml hierarchy, but not included in the language path/key, otherwise <c>false</c>.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider">
      <summary>
            Loads and retrieves translated resources from an xml document.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.Initialize(System.String)">
      <summary>
            Initializes the provider with the default configuration.
            </summary>
      <param name="name">The name of the provider.</param>
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.AvailableLanguages">
      <summary>
            Gets all available languages from the xml document. 
            An available language does not need to contain any translations.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.LanguageDocument">
      <summary>
            The language document for the provider
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.Load(System.IO.Stream)">
      <summary>
            Extracts translations from the <paramref name="stream" />.
            </summary>
      <param name="stream">An <see cref="T:System.IO.Stream" /> containing translated resource strings</param>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.Clear">
      <summary>
            Clears all previous loaded translations.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.GetString(System.String,System.String[],System.Globalization.CultureInfo)">
      <summary>
            Gets a translated string from a language key.
            </summary>
      <param name="originalKey">The unmodified key</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the resource string</param>
      <returns>A translated resource string</returns>
    </member>
    <member name="M:EPiServer.Framework.Localization.XmlResources.XmlLocalizationProvider.GetAllStrings(System.String,System.String[],System.Globalization.CultureInfo)">
      <summary>
            Gets all the resource strings for a specific culture. Will return all strings below the specified key.
            </summary>
      <param name="originalKey">The unmodified key</param>
      <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
      <param name="culture">The requested culture for the resource string</param>
      <returns>All resource strings below the specified key</returns>
    </member>
    <member name="T:EPiServer.Framework.ModuleDependencyAttribute">
      <summary>
            Attribute to define that an <see cref="T:IInitializableModule" /> depends on another module to be initialized first.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.ModuleDependencyAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.ModuleDependencyAttribute" /> class.
            </summary>
      <param name="dependency">The type that you are depending on.</param>
    </member>
    <member name="M:EPiServer.Framework.ModuleDependencyAttribute.#ctor(System.Type[])">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.ModuleDependencyAttribute" /> class.
            </summary>
      <param name="dependencies">The types that you are depending on.</param>
    </member>
    <member name="P:EPiServer.Framework.ModuleDependencyAttribute.Dependencies">
      <summary>
            Gets the dependencies defined by this attribute.
            </summary>
      <value>The dependencies.</value>
    </member>
    <member name="T:EPiServer.Framework.PreventAssemblyScanAttribute">
      <summary>
            Attribute to prevent using the assembly in plugin / module / composition scenarios.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.PreventAssemblyScanAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.PreventAssemblyScanAttribute" /> class.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Properties.Resources.ActivateAllExceptionMessage">
      <summary>
              Looks up a localized string similar to Activation error occurred while trying to get all instances of type {0}.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Properties.Resources.ActivationExceptionMessage">
      <summary>
              Looks up a localized string similar to Activation error occurred while trying to get instance of type {0}, key "{1}".
            </summary>
    </member>
    <member name="T:EPiServer.Framework.ProviderActivationException">
      <summary>
            The exception thrown when a provider cannot be activated correctly.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.ProviderActivationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.ProviderActivationException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.ProviderActivationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.ProviderActivationException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.ProviderActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.ProviderActivationException" /> class.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Security.ISiteSecret">
      <summary>
            Describes a site wide secret used for symmetric encryption and message authentication.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Security.ISiteSecret.Id">
      <summary>
            Gets or sets the id for the secret.
            </summary>
      <value>
            The id.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Security.ISiteSecret.SiteId">
      <summary>
            Id of the site to which this secret belongs.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Security.ISiteSecret.Secret">
      <summary>
            The actual shared secret used for encryption and message authentication.
            </summary>
      <remarks>
            This is highly sensitive information. Only use this for cryptographic functions.
            </remarks>
    </member>
    <member name="T:EPiServer.Framework.Security.ISiteSecretManager">
      <summary>
            Manages all <see cref="T:EPiServer.Framework.Security.ISiteSecret" />s registered for this installation.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Security.ISiteSecretManager.GetSecret(System.String)">
      <summary>
            Gets the site secret for a specific site.
            </summary>
      <param name="siteId">The identity of the site</param>
      <para>Implementations of this interface must create new site secrets if none exists for the specific site.</para>
    </member>
    <member name="M:EPiServer.Framework.Security.ISiteSecretManager.List">
      <summary>
            Lists all registered site secrets.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Serialization.Internal.ObjectSerializerFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Internal.ObjectSerializerFactory.#ctor(System.Collections.Generic.IEnumerable{EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Framework.Serialization.IObjectSerializer}})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Serialization.Internal.ObjectSerializerFactory" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Internal.ObjectSerializerFactory.RegisterSerializer(EPiServer.Framework.Serialization.IObjectSerializer)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> for a given content type.
            </summary>
      <param name="serializer">The serializer.</param>
      <remarks>This overrides any existing serializer.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Internal.ObjectSerializerFactory.RegisterSerializer(System.String,EPiServer.Framework.Serialization.IObjectSerializer)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> for a given content type.
            </summary>
      <param name="contentType">The content type to handle.</param>
      <param name="serializer">The serializer.</param>
      <remarks>This overrides any existing serializer.</remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Internal.ObjectSerializerFactory.RegisterSerializer(System.String,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Framework.Serialization.IObjectSerializer})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> for a given content type.
            </summary>
      <param name="contentType">The content type to handle.</param>
      <param name="accessor">The creator function.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Internal.ObjectSerializerFactory.RegisterSerializer(EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Framework.Serialization.IObjectSerializer})">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Registers an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> for all content types that the serializer specifies in <see cref="P:EPiServer.Framework.Serialization.IObjectSerializer.HandledContentTypes" />.
            </summary>
      <param name="accessor">The accessor.</param>
      <remarks>
            This replaces any existing serializer.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Internal.ObjectSerializerFactory.GetSerializer(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the serializer for the given content type.
            </summary>
      <param name="contentType">The content type.</param>
      <returns>
            An <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> for the given content type or null if no serializer is registered for the content type.
            </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Serialization.IObjectSerializer">
      <summary>
            Defines a service responsible for serializing objects so they can be passed to and from the UI.
            </summary>
      <remarks>
            This serializer is exclusively intended to be used when serializing objects for the Episerver
            user interface. Usage beyond this scope can have unintended side effects and is not supported.
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Serialization.IObjectSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes an object to be passed to the UI using the specified text writer.
            </summary>
      <param name="textWriter">The text writer to where the serialized data is written.</param>
      <param name="value">The object that should be serialized.</param>
    </member>
    <member name="M:EPiServer.Framework.Serialization.IObjectSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes a string passed from the UI using the specified reader.
            </summary>
      <param name="reader">A reader provided the serialized data.</param>
      <param name="objectType">The type of the object to deserialize.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="M:EPiServer.Framework.Serialization.IObjectSerializer.Deserialize``1(System.IO.TextReader)">
      <summary>
            Deserializes a string passed from the UI using the specified reader.
            </summary>
      <typeparam name="T">The type of object to deserialize.</typeparam>
      <param name="reader">A reader provided the serialized data.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="P:EPiServer.Framework.Serialization.IObjectSerializer.HandledContentTypes">
      <summary>
            Gets a list of all content types that are handled by this <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" />.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Serialization.IObjectSerializerFactory">
      <summary>
            Defines a factory service responsible for creating <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> instances 
            used to serialize objects that should be passed to the UI.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Serialization.IObjectSerializerFactory.GetSerializer(System.String)">
      <summary>
            Gets the <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> that is registered for the provided content type.
            </summary>
      <param name="contentType">The content type.</param>
      <returns>An <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> for the given content type or null if no serializer is registered for the content type.</returns>
    </member>
    <member name="M:EPiServer.Framework.Serialization.IObjectSerializerFactory.RegisterSerializer(System.String,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Framework.Serialization.IObjectSerializer})">
      <summary>
            Registers an <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> for a given content type.
            </summary>
      <param name="contentType">The content type to handle.</param>
      <param name="accessor">The accessor delegate.</param>
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.CamelCaseStringEnumConverter">
      <summary>
            Json Converter for enum values that is sent as camelCased string
            </summary>
      <example>
            AnyEnum.EnumValue is converted to "enumValue" in Json objects
            </example>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.CamelCaseStringEnumConverter.FormatValueString(System.String)">
      <summary>
            Format the value to camelcase, i.e. set first character to lower case and keep rest of string as is
            </summary>
      <param name="value">value</param>
      <returns>A camel cased value</returns>
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.CasedStringEnumConverter">
      <summary>
            Abstract class for cased converter for enum values that should be converted to strings. 
            Enum value is converted to string using implemtation in FormatValueString.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.CasedStringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>true if objectType is an enum</returns>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.CasedStringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes value (enum) as a cased string.
            </summary>
      <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
      <param name="value">The value</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.CasedStringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.CasedStringEnumConverter.FormatValueString(System.String)">
      <summary>
            Format string to correct case
            </summary>
      <param name="value">The value</param>
      <returns>The value formatted</returns>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.DateTimeConverter.#ctor">
      <summary>
            Converts a <see cref="T:System.DateTime" />, assumed <see cref="F:System.DateTimeKind.Local" /> from the ISO 8601 date format (e.g. 2008-04-12T12:53Z) to comply with current system design.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.DateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object and will set any <see cref="T:System.DateTime" /> to 
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.Internal.DefaultNewtonsoftContractResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Json contract resolver which ignores injected properties and supports our verison of camel casing
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.Internal.DefaultNewtonsoftNamingStrategy">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.Internal.JsonObjectSerializer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Used for serialization of object to/from JSON format.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.Internal.JsonObjectSerializer.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Serialization.Json.Internal.JsonObjectSerializer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.Internal.JsonObjectSerializer.#ctor(System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter},Newtonsoft.Json.Serialization.IContractResolver)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Serialization.Json.Internal.JsonObjectSerializer" /> class.
            </summary>
      <param name="converters">The json converters.</param>
      <param name="resolver">The json contract resolver</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.Internal.JsonObjectSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Serializes an object using the specified text writer.
            </summary>
      <param name="textWriter">The text writer.</param>
      <param name="value">The object value.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.Internal.JsonObjectSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deserializes the object using the specified reader.
            </summary>
      <param name="reader">The reader.</param>
      <param name="objectType">Type of the object.</param>
      <returns>The serialized object.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.Internal.JsonObjectSerializer.Deserialize``1(System.IO.TextReader)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deserializes the object using the specified reader.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the object to deserialize.</typeparam>
      <param name="reader">The reader.</param>
      <returns>The serialized object.</returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.Serialization.Json.Internal.JsonObjectSerializer.HandledContentTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the handled content types for this serializer.
            </summary>
      <value>The handled content types.</value>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.Internal.StringUtility">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. String utilities for Json contract resolvers and converters.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.Internal.StringUtility.ToCamelCase(System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Convert a string to camel case.
            </summary>
      <param name="input">The input string.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.LowerCaseStringEnumConverter">
      <summary>
            Json Converter for enum values that is sent as lower cased string
            </summary>
      <example>
            AnyEnum.EnumValue is converted to "enumvalue" in Json objects
            </example>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.LowerCaseStringEnumConverter.FormatValueString(System.String)">
      <summary>
            Formast the value to lower case
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.NameValueCollectionConverter">
      <summary>
            Custom converter for (de)serializing NameValueCollection
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.NameValueCollectionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.NameValueCollectionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.NameValueCollectionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.NotANumberConverter">
      <summary>
            Json converter that handles nullable types.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.NotANumberConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.NotANumberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.NotANumberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="P:EPiServer.Framework.Serialization.Json.NotANumberConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.UpperCaseStringEnumConverter">
      <summary>
            Json Converter for enum values that is sent as upper cased string
            </summary>
      <example>
            AnyEnum.EnumValue is converted to "ENUMVALUE" in Json objects
            </example>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.UpperCaseStringEnumConverter.FormatValueString(System.String)">
      <summary>
            Format string value to upper case
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Framework.Serialization.Json.ContractResolver">
      <summary>
            Json contract resolver which is aware of injected properties
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.ContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
      <returns>
            A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </returns>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.ContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>
            The property name camel cased.
            </returns>
      <remarks>
            Overrides the default camel case converter in JSON.NET. E.g XHTML_ is converted into xhtml_ instead of xhtmL_
            </remarks>
    </member>
    <member name="M:EPiServer.Framework.Serialization.Json.ContractResolver.ToCamelCase(System.String)">
      <summary>
            Converts the string to a camel cased string
            </summary>
      <param name="input">The input to camel case.</param>
      <returns>The input in camel cased format</returns>
    </member>
    <member name="T:EPiServer.Framework.Serialization.KnownContentTypes">
      <summary>
            Contains content types for which there are known <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> instances registered.
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Serialization.KnownContentTypes.Json">
      <summary>
            JSON aka Javascript Object Notation.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Serialization.ObjectSerializerExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.Framework.Serialization.IObjectSerializer" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Serialization.ObjectSerializerExtensions.Serialize(EPiServer.Framework.Serialization.IObjectSerializer,System.Object)">
      <summary>
            Serializes the specified object to a string.
            </summary>
      <param name="serializer">The serializer.</param>
      <param name="value">The object that should be serialized to a string.</param>
      <returns>A serialized representation of the provided object</returns>
    </member>
    <member name="M:EPiServer.Framework.Serialization.ObjectSerializerExtensions.Deserialize``1(EPiServer.Framework.Serialization.IObjectSerializer,System.String)">
      <summary>
            Deserializes the specified value to an object of type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The type that the string should be deserialized to.</typeparam>
      <param name="serializer">The serializer.</param>
      <param name="value">The value that should be deserialized.</param>
      <returns>An object of type T</returns>
    </member>
    <member name="T:EPiServer.Framework.TimeProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.TimeProvider.Current">
      <summary>
            Get the current <see cref="T:EPiServer.Framework.ITimeProvider" /> instance.
            </summary>
      <remarks>
            Avoid whenever possible and inject <see cref="T:EPiServer.Framework.ITimeProvider" /> in constructor instead.
            </remarks>
    </member>
    <member name="T:EPiServer.Framework.Timers.ElapsedEventArgs">
      <summary>
            Event argument class for ITimer.Elapsed event.
            This is required as it is not possible to create System.Timers.ElapsedEventArgs objects.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Timers.ElapsedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Timers.ElapsedEventArgs" /> class setting the SignalTime to the current time.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.Timers.ElapsedEventArgs.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.Timers.ElapsedEventArgs" /> class.
            </summary>
      <param name="signalTime">The time the <see cref="T:EPiServer.Framework.Timers.ITimer" /> signalled the Elapsed event.</param>
    </member>
    <member name="P:EPiServer.Framework.Timers.ElapsedEventArgs.SignalTime">
      <summary>
            Gets the time the <see cref="T:EPiServer.Framework.Timers.ITimer" /> signalled the Elapsed event.
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Timers.Internal.NullTimer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Implementation of the <see cref="T:EPiServer.Framework.Timers.ITimer" /> interface that won't raise any Elapsed event regardless of settings.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Framework.Timers.Internal.NullTimer.Instance">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Singleton instance of the <see cref="T:EPiServer.Framework.Timers.Internal.NullTimer" />.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Timers.Internal.SystemTimer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Wrapper around the System.Timers.Timer that implements the ITimer interface.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Timers.Internal.SystemTimer.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Timers.Internal.SystemTimer" /> class.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.Timers.Internal.SystemTimer.#ctor(System.Double)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Framework.Timers.Internal.SystemTimer" /> class with the Interval set to the provided number of milliseconds.
            </summary>
      <param name="interval">The initial interval in milliseconds to use.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.Timers.ITimer">
      <summary>
            Interface that redefines the System.Timers.Timer class core functionality.
            </summary>
    </member>
    <member name="E:EPiServer.Framework.Timers.ITimer.Elapsed">
      <summary>
            Occurs when the timer interval has elapsed.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.Timers.ITimer.AutoReset">
      <summary>
            Gets or sets a value indicating whether the timer should start a new interval after the first interval has completed.
            </summary>
      <value>
        <c>true</c> if the timer should reset automatically and start a new interval; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Timers.ITimer.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Framework.Timers.ITimer" /> is enabled and should raise the Elapsed event at the end of the currently set interval.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.Framework.Timers.ITimer.Interval">
      <summary>
            Gets or sets the interval in milliseconds at which this <see cref="T:EPiServer.Framework.Timers.ITimer" /> should raise the Elapsed event.
            </summary>
      <value>
            The interval in milliseconds.
            </value>
    </member>
    <member name="T:EPiServer.Framework.TypeScanner.Internal.AssemblyScanner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.TypeScanner.Internal.IAssemblyScanner">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Scans for types that defined by <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerRegistrationAttribute" /></summary>
      <remarks>You should use <see cref="T:EPiServer.Framework.TypeScanner.ITypeScannerLookup" /> to get hold of all scanned types rather than doing your own scan which is costly</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.TypeScanner.Internal.ReflectionAssemblyScanner">
      <internal-api />
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Scans for the presence of types
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.TypeScanner.Internal.TypeScannerLookup">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implementation of <see cref="T:EPiServer.Framework.TypeScanner.ITypeScannerLookup" /></summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Framework.TypeScanner.Internal.TypeScannerLookup.AllTypes">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the scanned types.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.TypeScanner.Internal.TypeScannerLookup.Add(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds the specified scanned type.
            </summary>
      <param name="t">The t.</param>
      <exclude />
    </member>
    <member name="M:EPiServer.Framework.TypeScanner.Internal.TypeScannerLookup.Delete(System.Type)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Deletes the specified scanned type.
            </summary>
      <param name="t">The t.</param>
      <exclude />
    </member>
    <member name="T:EPiServer.Framework.TypeScanner.ITypeScannerLookup">
      <summary>
            Interface for all scanned types matching types defined in <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerRegistrationAttribute" /></summary>
    </member>
    <member name="P:EPiServer.Framework.TypeScanner.ITypeScannerLookup.AllTypes">
      <summary>
            All scanned types matching types defined in <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerRegistrationAttribute" /></summary>
    </member>
    <member name="T:EPiServer.Framework.TypeScanner.TypeRelater">
      <summary>
            Gets relation information about types.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.TypeScanner.TypeRelater.GetDistance(System.Type,System.Type)">
      <summary>
            Returns the number of levels of inheritance that separates the a sub type
            frome one of it's super types. If the super type is an Interface, the
            distance to the implementing class is returned.
            </summary>
      <param name="type">The super type to check the distance to.</param>
      <param name="subtype">The sub type to check the distance from.</param>
      <returns>The distance between the types as a non-negative integer.</returns>
      <exception cref="T:System.ArgumentException">Throws an exception if subType is
            not actually a sub type of the super type (can't assign instance of
            subType to pointer of type superType).</exception>
    </member>
    <member name="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException">
      <summary>
            Thrown by type scanner when reflecting a given assembly
            </summary>
    </member>
    <member name="M:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.#ctor(System.String,System.Exception,System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Framework.TypeScanner.TypeScannerReflectionException" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.Assembly">
      <summary>
            The assembly causing the problem
            </summary>
    </member>
    <member name="P:EPiServer.Framework.TypeScanner.TypeScannerReflectionException.LoaderExceptions">
      <summary>
            Exceptions durings loading of typed from assembly
            </summary>
    </member>
    <member name="T:EPiServer.Framework.TypeScanner.TypeScannerRegistrationAttribute">
      <summary>
            Marks a type that should be automatically picked up and added to a centrally managed repository
            </summary>
    </member>
    <member name="T:EPiServer.Framework.Validator">
      <summary>
            Contains validation methods
            </summary>
    </member>
    <member name="F:EPiServer.Framework.Validator.DefaultEmailRegexString">
      <summary>
            The default string used for validation of email adresses.
            </summary>
      <remarks>The difference between this and <see cref="P:EPiServer.Framework.Validator.EmailRegexString" /> is that the later can be changed during the lifetime of the application.</remarks>
    </member>
    <member name="P:EPiServer.Framework.Validator.EmailRegexString">
      <summary>
            Gets or sets the email regex string that is used validating email addresses in EPiServer products.
            </summary>
      <value>The email regex string that is used validating email addresses in EPiServer products.</value>
      <remarks>Note that the regex should handle casing since case sensivity is not supported by the RegularExpressionValidator control.</remarks>
    </member>
    <member name="P:EPiServer.Framework.Validator.EmailRegex">
      <summary>
            Gets the email regex that is used for EPiServer products.
            </summary>
      <value>The email regex that is used for EPiServer products.</value>
      <remarks>If you want to change the regular expression used then set the <see cref="P:EPiServer.Framework.Validator.EmailRegexString" /> to your own regex.</remarks>
    </member>
    <member name="F:EPiServer.Framework.Validator.DefaultMultipleEmailRegexString">
      <summary>
            The default string used for validation of multiple email adresseses.
            </summary>
      <remarks>The difference between this and <see cref="P:EPiServer.Framework.Validator.MultipleEmailRegexString" /> is that the later can be changed during the lifetime of the application.</remarks>
    </member>
    <member name="P:EPiServer.Framework.Validator.MultipleEmailRegexString">
      <summary>
            Gets or sets the email regex string that is used validating multiple email addresses in EPiServer products.
            </summary>
      <value>The email regex string that is used validating multiple email addresses in EPiServer products.</value>
      <remarks>Note that the regex should handle casing since case sensivity is not supported by the RegularExpressionValidator control.</remarks>
    </member>
    <member name="P:EPiServer.Framework.Validator.MultipleEmailRegex">
      <summary>
            Gets the regular expression for multiple email addresses that is used for EPiServer products.
            </summary>
      <value>The email regex that is used to validate multiple email addresses for EPiServer products.</value>
      <remarks>If you want to change the regular expression used then set the <see cref="P:EPiServer.Framework.Validator.MultipleEmailRegexString" /> to your own regex.</remarks>
    </member>
    <member name="M:EPiServer.Framework.Validator.ThrowIfNull(System.String,System.Object)">
      <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <see paramref="value" /> is <see langword="null" /></summary>
      <param name="name">The name of the argument</param>
      <param name="value">The value to check</param>
      <exception cref="T:System.ArgumentNullException">Thrown if the value to check is null</exception>
    </member>
    <member name="M:EPiServer.Framework.Validator.ThrowIfNullOrEmpty(System.String,System.String)">
      <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <see paramref="value" /> is <see langword="null" /> or <see cref="F:System.String.Empty" /></summary>
      <param name="name">The name of the argument</param>
      <param name="value">The value to check</param>
      <exception cref="T:System.ArgumentNullException">Thrown if the value to check is null or empty string</exception>
    </member>
    <member name="M:EPiServer.Framework.Validator.ThrowIfContainsSqlInjectionChars(System.String,System.String)">
      <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <see paramref="value" /> contains potential SQL injection code
            </summary>
      <param name="name">The name of the argument</param>
      <param name="value">The value to check</param>
      <exception cref="T:System.ArgumentException">Thrown if the value contains potential SQL injection code</exception>
    </member>
    <member name="M:EPiServer.Framework.Validator.ThrowIfInvalidLength(System.String,System.String,System.Int32,System.Int32)">
      <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <see paramref="value" /> has a length shorter than <see paramref="minLength" /> or longer than <see paramref="maxLength" /></summary>
      <param name="name">The name of the argument</param>
      <param name="value">The value to check</param>
      <param name="minLength">The minimum length the string can be</param>
      <param name="maxLength">The maximum length the string can be</param>
      <exception cref="T:System.ArgumentNullException">Thrown if the value to check is null or empty string</exception>
      <exception cref="T:System.ArgumentException">If the length requirements are not met</exception>
    </member>
    <member name="T:EPiServer.Framework.UniqueNameGenerator">
      <summary>
            Used to generate unique names for items, for instance when copying an item.
            </summary>
    </member>
    <member name="M:EPiServer.Framework.UniqueNameGenerator.GenerateUniqueName(System.String,System.String,System.Int32,System.Func{System.String,System.Boolean})">
      <summary>
            Generates an unique name of an item.
            </summary>
      <param name="intendedName">The intended name.</param>
      <param name="suffixPattern">The pattern used to generate an unique suffix, in which {0} is preserved for the counter</param>
      <param name="startCounter">Start value of the counter</param>
      <param name="nameExists">The name exists test function</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.UniqueNameGenerator.GenerateUniqueName(System.String,System.Func{System.String,System.Boolean})">
      <summary>
            Generates an unique name of an item.
            </summary>
      <param name="intendedName">The intended name.</param>
      <param name="nameExists">The name exists test function</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Framework.UniqueNameGenerator.GenerateCopyName(System.String,System.Func{System.String,System.Boolean})">
      <summary>
            Generates a copy name of an item.
            </summary>
      <param name="originalName">The original name</param>
      <param name="nameExists">The name exists test function</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Configuration.Transform.Internal.IConfigurationTransform">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.HtmlParsing.AttributeCollection">
      <summary>
            A collection of HTML name/value attributes.
            </summary>
      <remarks>
            Note that a name may appear multiple times.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.AttributeCollection" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.HtmlParsing.AttributeCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:EPiServer.HtmlParsing.AttributeFragment" /> at the specified index.
            </summary>
      <value>The attribute fragment.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.AttributeCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:EPiServer.HtmlParsing.AttributeFragment" /> with the specified key.
            </summary>
      <value>The attribute fragment.</value>
      <remarks>
        <para>
            The key matching is done in a case-insensitive manner.
            </para>
        <para>
            Since an attribute name may appear multiple times, this property will return the first instance. In order to access all
            instances with the given key, you need to iterate thru the collection and check each entry.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the attribute at the specified index.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeCollection.Remove(System.String)">
      <summary>
            Removes the attribute with the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>True if an attribute was removed, false otherwise.</returns>
      <remarks>
        <para>
            The key matching is done in a case-insensitive manner.
            </para>
        <para>
            If there are more than one attribute with the specified key, only the first attribute is removed.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeCollection.RemoveAll(System.String)">
      <summary>
            Removes all attributes with the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeCollection.Add(EPiServer.HtmlParsing.AttributeFragment)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeCollection.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeCollection.Contains(EPiServer.HtmlParsing.AttributeFragment)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeCollection.CopyTo(EPiServer.HtmlParsing.AttributeFragment[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
            -or-
            <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
            </exception>
    </member>
    <member name="P:EPiServer.HtmlParsing.AttributeCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <value>
      </value>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="P:EPiServer.HtmlParsing.AttributeCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:EPiServer.HtmlParsing.AttributeFragment">
      <summary>
            An attribute in a HTML element
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeFragment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.AttributeFragment" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.HtmlParsing.AttributeFragment.UnquotedValue">
      <summary>
            Gets or sets the unquoted value of the attribute.
            </summary>
      <value>The unquoted value.</value>
      <remarks>
            Both single quote (') and double quote (") are considered as valid quote characters.
            </remarks>
    </member>
    <member name="P:EPiServer.HtmlParsing.AttributeFragment.QuoteChar">
      <summary>
            Gets or sets the quote character for the Value.
            </summary>
      <value>The quote char.</value>
      <remarks>
            Both single quote (') and double quote (") are considered as valid quote characters.
            </remarks>
    </member>
    <member name="P:EPiServer.HtmlParsing.AttributeFragment.Value">
      <summary>
            Gets or sets the value of the attribute.
            </summary>
      <value>The value.</value>
      <remarks>
            Returns the attribute value exactly as it was parsed, with quote characters etc.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeFragment.ToWriter(System.IO.TextWriter)">
      <summary>
            Writes the current instance to a TextWriter.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.AttributeFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses a HTML attribute from the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:EPiServer.HtmlParsing.CDataFragment">
      <summary>
            A CDATA fragment in a HTML stream.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.CDataFragment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.CDataFragment" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.HtmlParsing.CDataFragment.Name">
      <summary>
            Gets the name of the fragment, which is always "[CDATA[".
            </summary>
      <value>The name.</value>
      <remarks>
            Attempting to set this property will throw a NotSupportedException.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.CDataFragment.ToWriter(System.IO.TextWriter)">
      <summary>
            Writes the fragment to the given TextWriter.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.CDataFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses the fragment from the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:EPiServer.HtmlParsing.CommentFragment">
      <summary>
            Represents a HTML comment.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.CommentFragment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.CommentFragment" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.HtmlParsing.CommentFragment.Name">
      <summary>
            Gets the name of the fragment, which is always --
            </summary>
      <value>The name.</value>
      <remarks>
            Attempting to set this property will throw a NotSupportedException.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.CommentFragment.ToWriter(System.IO.TextWriter)">
      <summary>
            Writes the fragment to the given TextWriter.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.CommentFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses the fragment from the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:EPiServer.HtmlParsing.DefaultFilterRules">
      <summary>
            Concrete implementation of IFilterRules with conservative rules for creating safe HTML code.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.DefaultFilterRules" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.#ctor(System.Func{EPiServer.HtmlParsing.ElementToken,System.Collections.Generic.IEnumerable{EPiServer.HtmlParsing.AttributeToken}})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.DefaultFilterRules" /> class.
            </summary>
      <param name="whiteList">The white list.</param>
      <remarks>
            The whiteList function will get called for each legal value of ElementToken (as defined by the enumeration) and you are expected to return null
            if the element should be regarded as unsafe, or return an IEnumerable of AttributeToken indicating which attributes that should be allowed for
            the requested element.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.#ctor(System.Func{EPiServer.HtmlParsing.ElementToken,System.Collections.Generic.IEnumerable{EPiServer.HtmlParsing.AttributeToken}},EPiServer.HtmlParsing.DefaultFilterRules)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.DefaultFilterRules" /> class.
            </summary>
      <param name="whiteList">The white list.</param>
      <param name="originalRules">The original rules.</param>
      <remarks>
            Basically the same as the constructor that just takes the whiteList parameter, the change here is that we will inherit the whitelist
            from originalRules and simply append any additional information created by the whiteList function.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.ElementFilterLevel(EPiServer.HtmlParsing.FilterContext)">
      <summary>
            Determine the level of filtering to apply to this element.
            </summary>
      <param name="context">The filtering context.</param>
      <returns>
            An ElementFilterAction enumeration value.
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.IsSafeTextFragment(EPiServer.HtmlParsing.FilterContext,System.String)">
      <summary>
            Determines whether the text fragment should be regarded as safe in the current context.
            </summary>
      <param name="context">The context.</param>
      <param name="content">The content.</param>
      <returns>
        <c>true</c> if the content is safe; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The HTML filter will call this method when the fragment is a Special Text Fragment, i e the content of a style or script element. If
            the text fragment is determined to be unsafe (this method returns false) then the surrounding start and end elements will
            unconditionally be removed, ignoring the return value from KeepNakedElement.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.IsSafeAttribute(EPiServer.HtmlParsing.FilterContext,EPiServer.HtmlParsing.AttributeToken,System.String)">
      <summary>
            Determines whether the attribute is safe in the specified context.
            </summary>
      <param name="context">The context.</param>
      <param name="name">The attribute name.</param>
      <param name="value">The attribute value.</param>
      <returns>
        <c>true</c> if the attribute is safe; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The attribute value will be delivered with quotes removed, i e you do not need to do special quote handling of the attribute value.
            Note that it is still possible for the value to contain embedded quotes but they are part of the actual value.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.DefaultFilterRules.KeepNakedElement(EPiServer.HtmlParsing.FilterContext)">
      <summary>
            Determine whether to keep an element even if it contains no attributes.
            </summary>
      <param name="context">The context.</param>
      <returns>
        <c>true</c> if the element should be kept even when it contains no attributes; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            The default behavior should be to return true and special-case the false handling.
            </para>
        <para>
            Typical scenario is an img element where the src attribute has been removed due to suspected XSS attack. An img without an
            image to show should be removed completely from the resulting HTML.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.HtmlParsing.PublicDocumentType">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Unknown">
      <summary>
            A DOCTYPE directive with name that is not HTML.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Html">
      <summary>
            A DOCTYPE directive with name HTML and PUBLIC which does not match anything below.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Html4">
      <summary>
            HTML 4 DOCTYPE detected (&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt; 
            or something that starts with &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4... )
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Html5">
      <summary>
            HTML 5 DOCTYPE detected (&lt;!DOCTYPE html&gt;)
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Xhtml10Strict">
      <summary>
            XHTML 1.0 Strict DOCTYPE detected (&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;)
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Xhtml10Transitional">
      <summary>
            XHTML 1.0 Transitional DOCTYPE detected (&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;).
            This value is also returned for any XHTML-like DOCTYPE that does not match any of the other DOCTYPES, i e it acts as an XHTML DOCTYPE fallback.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Xhtml10Frameset">
      <summary>
            XHTML 1.0 Frameset DOCTYPE detected (&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;)
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.PublicDocumentType.Xhtml11">
      <summary>
            XHTML 1.1 DOCTYPE detected (&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;)
            </summary>
    </member>
    <member name="T:EPiServer.HtmlParsing.DocumentTypeFragment">
      <summary>
            A DOCTYPE directive in a HTML stream
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.DocumentTypeFragment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.DocumentTypeFragment" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.Name">
      <summary>
            Gets the name of the fragment which is always DOCTYPE.
            </summary>
      <value>The name.</value>
      <remarks>
            Attempting to set this property will throw a NotSupportedException.
            </remarks>
    </member>
    <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.DocumentTypeName">
      <summary>
            Gets or sets the name of the DOCTYPE.
            </summary>
      <value>The name of the document type.</value>
      <remarks>
            Should be "HTML" for almost all cases, otherwise the DOCTYPE directive indicates that it is not actually HTML that
            we are parsing.
            </remarks>
    </member>
    <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.Public">
      <summary>
            Gets or sets the value of the PUBLIC attribute.
            </summary>
      <value>The public attribute value.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.System">
      <summary>
            Gets or sets the value of the system attribute.
            </summary>
      <value>The system attribute value.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.IsHtml">
      <summary>
            Gets a value indicating whether this instance is a HTML DOCTYPE directive.
            </summary>
      <value>
        <c>true</c> if this instance is HTML; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.DocumentTypeFragment.PublicDocType">
      <summary>
            Gets the type of the content as defined by the DOCTYPE directive.
            </summary>
      <value>The type of the content.</value>
    </member>
    <member name="M:EPiServer.HtmlParsing.DocumentTypeFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses the fragment from the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.DocumentTypeFragment.ToWriter(System.IO.TextWriter)">
      <summary>
            Writes the fragment to the given TextWriter.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="T:EPiServer.HtmlParsing.ElementFilterAction">
      <summary>
            The various actions that the HtmlFilter function can request.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ElementFilterAction.KeepElementAndContent">
      <summary>
             Keep the element and content, just continue with attribute fixup
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ElementFilterAction.KeepContent">
      <summary>
             Remove the element and corresponding end element, but continue with contents of element.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ElementFilterAction.Remove">
      <summary>
            Remove the element and all content
            </summary>
    </member>
    <member name="T:EPiServer.HtmlParsing.ElementFragment">
      <summary>
            Represents a HTML element.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.ElementFragment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.ElementFragment" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.HtmlParsing.ElementFragment.Attributes">
      <summary>
            Gets the attributes for this HTML element.
            </summary>
      <value>The attributes.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.ElementFragment.HasAttributes">
      <summary>
            Gets a value indicating whether this instance has attributes.
            </summary>
      <value>
        <c>true</c> if this instance has attributes; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:EPiServer.HtmlParsing.ElementFragment.CallbackOnEndElement">
      <summary>
            Gets or sets the callback to perform when a matching End element is found.
            </summary>
      <value>The <see cref="T:System.Action" /> callback to perform.</value>
      <remarks>
        <para>
            By setting this property to an Action when a <see cref="T:EPiServer.HtmlParsing.ElementFragment" /> is returned by the enumerator, the Action will
            be invoked when the matching <see cref="T:EPiServer.HtmlParsing.EndElementFragment" /> is returned.
            </para>
        <para>
            Important! This setting is mirrored by the CallbackOnEndElement property on HtmlStreamReader, but it is recommended to use the 
            property on ElementFragment since it is much more consistent with the data flow.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.ElementFragment.ToWriter(System.IO.TextWriter)">
      <summary>
            Outputs this HTML element to the writer.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.ElementFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses a HTML element.
            </summary>
      <param name="context">The context.</param>
      <remarks>
            The initial '&lt;' has already been consumed and parsing continues until the entire element has been properly parsed.
            </remarks>
    </member>
    <member name="T:EPiServer.HtmlParsing.ElementToken">
      <summary>
            The various HTML elements that are directly supported by the parser.
            </summary>
    </member>
    <member name="T:EPiServer.HtmlParsing.AttributeToken">
      <summary>
            The various HTML attributes that are directly supported by the parser.
            </summary>
    </member>
    <member name="T:EPiServer.HtmlParsing.EndElementFragment">
      <summary>
            Represents a HTML end element.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.EndElementFragment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.EndElementFragment" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.EndElementFragment.ToWriter(System.IO.TextWriter)">
      <summary>
            Writes the fragment to the given TextWriter.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.EndElementFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses the fragment from the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:EPiServer.HtmlParsing.FilterContext">
      <summary>
            The context passed to HTML filtering methods.
            </summary>
    </member>
    <member name="P:EPiServer.HtmlParsing.FilterContext.CurrentElementName">
      <summary>
            Gets or sets the name of the current element.
            </summary>
      <value>The name of the current element.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.FilterContext.Token">
      <summary>
            Gets or sets the Token corresponding to the current element.
            </summary>
      <value>The token.</value>
    </member>
    <member name="T:EPiServer.HtmlParsing.FilterRules">
      <summary>
            Provides access to standard <see cref="T:EPiServer.HtmlParsing.IFilterRules" />.
            </summary>
    </member>
    <member name="P:EPiServer.HtmlParsing.FilterRules.Default">
      <summary>
            Gets the default <see cref="T:EPiServer.HtmlParsing.IFilterRules" /></summary>
    </member>
    <member name="P:EPiServer.HtmlParsing.FilterRules.StripHtml">
      <summary>
            Gets an <see cref="T:EPiServer.HtmlParsing.IFilterRules" /> instance that will remove all HTML elements from a string.
            </summary>
    </member>
    <member name="T:EPiServer.HtmlParsing.FragmentCreator">
      <summary>
            Concrete implementation of the IFragmentCreator interface.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.FragmentCreator.CreateHtmlFragment(EPiServer.HtmlParsing.HtmlFragmentType)">
      <summary>
            Factory method for creating the specified HTML fragment type.
            </summary>
      <param name="fragmentType">Type of the fragment.</param>
      <returns>
            A HTML fragment that can be used to hold information about the indicated fragment type.
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.FragmentCreator.CreateHtmlFragmentFromStream(EPiServer.HtmlParsing.IHtmlSource)">
      <summary>
            Creates a HTML fragment from stream.
            </summary>
      <param name="source">The source for the HTML stream.</param>
      <returns>
            A HTML fragment that can be used to hold information about the indicated fragment type.
            </returns>
      <remarks>
        <para>
            This method will scan for and create any HTML fragment type except TextFragment. I e this method should be
            called after a '&lt;' has been detected in the HTML source.
            </para>
        <para>
            To fully populate the returned HtmlFragment yuo should call the Parse method on the returned object.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.HtmlParsing.HtmlFilter">
      <summary>
            Simple HTML sanitizer to remove unsafe constructs.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlFilter" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlFilter.#ctor(EPiServer.HtmlParsing.ParserOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlFilter" /> class.
            </summary>
      <param name="options">The options.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlFilter.#ctor(EPiServer.HtmlParsing.IFilterRules)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlFilter" /> class.
            </summary>
      <param name="rules">The rules.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlFilter.#ctor(EPiServer.HtmlParsing.ParserOptions,EPiServer.HtmlParsing.IFilterRules)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlFilter" /> class.
            </summary>
      <param name="options">The options.</param>
      <param name="rules">The rules.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlFilter.FilterHtml(System.IO.TextReader,System.IO.TextWriter)">
      <summary>
            Filters the HTML from input and writes it to the output.
            </summary>
      <param name="input">The input.</param>
      <param name="output">The output.</param>
      <remarks>
            The filtering is controlled by the <see cref="T:EPiServer.HtmlParsing.IFilterRules" /> instance passed to the constructor (or by <see cref="T:EPiServer.HtmlParsing.DefaultFilterRules" /> if not explicitly defined).
            </remarks>
    </member>
    <member name="T:EPiServer.HtmlParsing.HtmlFragmentType">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.Element">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.EndElement">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.Attribute">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.Text">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.CData">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.ProcessingInstruction">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.Comment">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.DocumentType">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.SpecialInstruction">
      <summary>
      </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.HtmlFragmentType.ImplicitCData">
      <summary>
      </summary>
    </member>
    <member name="T:EPiServer.HtmlParsing.HtmlFragment">
      <summary>
            Abstract base class for all HTML fragment types.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlFragment.#ctor(EPiServer.HtmlParsing.HtmlFragmentType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlFragment" /> class.
            </summary>
      <param name="fragmentType">Type of the fragment.</param>
    </member>
    <member name="P:EPiServer.HtmlParsing.HtmlFragment.FragmentType">
      <summary>
            Gets or sets the type of the fragment.
            </summary>
      <value>The type of the fragment.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.HtmlFragment.Name">
      <summary>
            Gets or sets the name of the fragment.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.HtmlFragment.Value">
      <summary>
            Gets or sets the value of the fragment.
            </summary>
      <value>The value.</value>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlFragment.NameEquals(System.String)">
      <summary>
            Case-insensitive comparison of the attribute name.
            </summary>
      <param name="name">The name.</param>
      <returns>True if the given parameter is equal to th eattribute name, False otherwise.</returns>
    </member>
    <member name="P:EPiServer.HtmlParsing.HtmlFragment.IsEmpty">
      <summary>
            Gets or sets a value indicating whether this instance is empty.
            </summary>
      <value>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
      <remarks>
            The exact meaning of "Empty" varies slightly between different fragment types. See the class description for details.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses the fragment from the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlFragment.ToWriter(System.IO.TextWriter)">
      <summary>
            Writes the fragment to the given TextWriter.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlFragment.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlParserContext.#ctor(EPiServer.HtmlParsing.IHtmlSource)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlParserContext" /> class.
            </summary>
      <param name="source">The source of the HTML stream to parse.</param>
    </member>
    <member name="T:EPiServer.HtmlParsing.HtmlStreamReader">
      <summary>
            A streaming HTML parser implementation that will enumerate the HTML fragments in the stream.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader" /> class.
            </summary>
      <param name="reader">The reader that contains the HTML source.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(System.IO.TextReader,EPiServer.HtmlParsing.ParserOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader" /> class.
            </summary>
      <param name="reader">The reader that contains the HTML source.</param>
      <param name="options">The options that should be enabled when parsing HTML.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader" /> class.
            </summary>
      <param name="source">The HTML source.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(System.String,EPiServer.HtmlParsing.ParserOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader" /> class.
            </summary>
      <param name="source">The HTML source.</param>
      <param name="options">The options that should be enabled when parsing HTML.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(EPiServer.HtmlParsing.IHtmlSource,EPiServer.HtmlParsing.ParserOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader" /> class.
            </summary>
      <param name="source">The HTML source provider.</param>
      <param name="options">The options that should be enabled when parsing HTML.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.#ctor(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader" /> class.
            </summary>
      <param name="context">The context that this instance of HtmlStreamReader uses to parse HTML.</param>
    </member>
    <member name="P:EPiServer.HtmlParsing.HtmlStreamReader.Context">
      <summary>
            Gets or sets the context for the HTML parser.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.HtmlStreamReader.CallbackOnEndElement">
      <summary>
            Gets or sets the callback to perform when a matching End element is found.
            </summary>
      <value>The <see cref="T:System.Action" /> callback to perform.</value>
      <remarks>
            Important! This property is no longer supported. Use the CallbackOnEndElement property on ElementFragment instead. 
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.ModifiedFragments(System.Collections.Generic.IEnumerable{EPiServer.HtmlParsing.HtmlFragment})">
      <summary>
            Modifies the fragment sequence.
            </summary>
      <param name="fragments">The fragments.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the parsed HTML fragments.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.HtmlStreamReader.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <remarks>
            Will simply delegate to the generic version of GetEnumerator.
            </remarks>
    </member>
    <member name="T:EPiServer.HtmlParsing.IFilterRules">
      <summary>
            Interface that defines the rules for HTML filtering
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.IFilterRules.ElementFilterLevel(EPiServer.HtmlParsing.FilterContext)">
      <summary>
            Determine the level of filtering to apply to this element.
            </summary>
      <param name="context">The filtering context.</param>
      <returns>An ElementFilterAction enumeration value.</returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.IFilterRules.IsSafeTextFragment(EPiServer.HtmlParsing.FilterContext,System.String)">
      <summary>
            Determines whether the text fragment should be regarded as safe in the current context.
            </summary>
      <param name="context">The context.</param>
      <param name="content">The content.</param>
      <returns>
        <c>true</c> if the content is safe; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The HTML filter will call this method when the fragment is a Special Text Fragment, i e the content of a style or script element. If
            the text fragment is determined to be unsafe (this method returns false) then the surrounding start and end elements will 
            unconditionally be removed, ignoring the return value from KeepNakedElement.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.IFilterRules.IsSafeAttribute(EPiServer.HtmlParsing.FilterContext,EPiServer.HtmlParsing.AttributeToken,System.String)">
      <summary>
            Determines whether the attribute is safe in the specified context.
            </summary>
      <param name="context">The context.</param>
      <param name="name">The attribute name.</param>
      <param name="value">The attribute value.</param>
      <returns>
        <c>true</c> if the attribute is safe; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The attribute value will be delivered with quotes removed, i e you do not need to do special quote handling of the attribute value. 
            Note that it is still possible for the value to contain embedded quotes but they are part of the actual value.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.IFilterRules.KeepNakedElement(EPiServer.HtmlParsing.FilterContext)">
      <summary>
            Determine whether to keep an element even if it contains no attributes.
            </summary>
      <param name="context">The context.</param>
      <returns>
        <c>true</c> if the element should be kept even when it contains no attributes; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            The default behavior should be to return true and special-case the false handling.
            </para>
        <para>
            Typical scenario is an img element where the src attribute has been removed due to suspected XSS attack. An img without an 
            image to show should be removed completely from the resulting HTML.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.HtmlParsing.IFragmentCreator">
      <summary>
            Interface defining the basic handler for HTML fragment creation.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.IFragmentCreator.CreateHtmlFragmentFromStream(EPiServer.HtmlParsing.IHtmlSource)">
      <summary>
            Creates a HTML fragment from stream.
            </summary>
      <param name="source">The source for the HTML stream.</param>
      <returns>A HTML fragment that can be used to hold information about the indicated fragment type.</returns>
      <remarks>
        <para>
            This method will scan for and create any HTML fragment type except TextFragment. I e this method should be
            called after a '&lt;' has been detected in the HTML source.
            </para>
        <para>
            To fully populate the returned HtmlFragment yuo should call the Parse method on the returned object.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.IFragmentCreator.CreateHtmlFragment(EPiServer.HtmlParsing.HtmlFragmentType)">
      <summary>
            Factory method for creating the specified HTML fragment type.
            </summary>
      <param name="fragmentType">Type of the fragment.</param>
      <returns>A HTML fragment that can be used to hold information about the indicated fragment type.</returns>
    </member>
    <member name="T:EPiServer.HtmlParsing.CaseFolding">
      <summary>
            Defines the various case-folding options that the <see cref="T:EPiServer.HtmlParsing.IHtmlParserContext" /> supports.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.CaseFolding.None">
      <summary>
            Leave tag name casing as-is.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.CaseFolding.ToUpper">
      <summary>
            Convert all tag names to upper case.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.CaseFolding.ToLower">
      <summary>
            Convert all tag names to lower case.
            </summary>
    </member>
    <member name="T:EPiServer.HtmlParsing.IHtmlParserContext">
      <summary>
            The interface that connects the <see cref="T:EPiServer.HtmlParsing.HtmlStreamReader" /> with the HTML source to be parsed.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.NextFragment">
      <summary>
            Gets the next HTML fragment from the HTML source stream.
            </summary>
      <returns>A HtmlFragment that represents the next piece of information.</returns>
    </member>
    <member name="P:EPiServer.HtmlParsing.IHtmlParserContext.Options">
      <summary>
            Gets or sets the set of options that controls the parser behavior.
            </summary>
      <value>The options.</value>
      <remarks>
            You should not change the value of Options in the middle of an enumeration as this may cause unexpected results.
            </remarks>
    </member>
    <member name="P:EPiServer.HtmlParsing.IHtmlParserContext.CaseFolding">
      <summary>
            Gets the case folding.
            </summary>
      <value>The case folding.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.IHtmlParserContext.SpecialTextFragment">
      <summary>
            Gets or sets state indicating that the next fragment should be treated as an implicit CDATA fragment.
            </summary>
      <value>The special text fragment element name.</value>
      <remarks>
        <para>
            Used to handle &lt;style&gt; and &lt;script&gt; elements that requires the content between start and end elements
            to be treated as implicit CDATA. This is done to avoid problems with parsing characters that are perfectly legal in
            script or CSS but may look like HTML elements. 
            </para>
        <para>
            Note that the range of elements to handle are defined by the SetSpecialName method. Override that implementation to
            expand or reduce the range of elements to handle in this way.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.SetSpecialName(System.String)">
      <summary>
            Sets the name of the special.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.IsWhiteSpace(System.Char)">
      <summary>
            Determines whether the specified character is white space.
            </summary>
      <param name="character">The character.</param>
      <returns>
        <c>true</c> if the specified character is white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.GetBuilder">
      <summary>
            Gets the shared StringBuilder instance.
            </summary>
      <returns>An empty StringBuilder instance.</returns>
      <remarks>
            This method helps reduce the numer of objects to create when parsing a large HTML stream by allowing the reuse of
            a single StringBuilder instance across the entire run.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.GetRunningComparer(System.String)">
      <summary>
            Gets the running comparer matching the given string.
            </summary>
      <param name="match">The string that the comparer will serach for.</param>
      <returns>An initialized instance of a RunningComparer.</returns>
      <remarks>
            This method helps reduce the numer of objects to create when parsing a large HTML stream by allowing the reuse of
            RunningComparer instances across the entire run.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.GetToken(System.String,System.Int32@)">
      <summary>
            Gets the token.
            </summary>
      <param name="terminators">The terminators.</param>
      <param name="length">The length.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.TryGetString(System.String,System.String@)">
      <summary>
            Tries to get a string that may be quoted or unquoted.
            </summary>
      <param name="terminators">A set of characters that will end the parsing.</param>
      <param name="value">The value.</param>
      <returns>
        <c>true</c> if a valid string is returned in value; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Will ignore leading whitespace characters. A quoted string is defined as starting with a single quote (') or a
            double quote (").
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.TryGetUnquotedString(System.String,System.String@)">
      <summary>
            Tries to get a string that must be unquoted.
            </summary>
      <param name="terminators">A set of characters that will end the parsing.</param>
      <param name="value">The value.</param>
      <returns>
        <c>true</c> if a valid string is returned in value; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Will ignore leading whitespace characters. Since the string must be unquoted, single quote (') and double quote (")
            are implicitly added to the terminators.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.TryGetQuotedString(System.String@)">
      <summary>
            Tries to get a string that must be quoted.
            </summary>
      <param name="quotedString">the quoted string.</param>
      <returns>
        <c>true</c> if a valid string is returned in value; otherwise, <c>false</c>.
            </returns>
      <remarks>
            Will ignore leading whitespace characters.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlParserContext.SkipWhiteSpace">
      <summary>
            Skips white space in the HTML source stream.
            </summary>
      <returns>
        <c>true</c> if at least one white space was found and skipped; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.HtmlParsing.ContextExtensions">
      <summary>
            Extension methods for IHtmlParserContext 
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.ContextExtensions.OptionEnabled(EPiServer.HtmlParsing.IHtmlParserContext,EPiServer.HtmlParsing.ParserOptions)">
      <summary>
            Determines if the specified option is enabled.
            </summary>
      <param name="context">The context to check the option for.</param>
      <param name="option">The parser option.</param>
      <returns>
        <c>true</c> if the specified option is enabled; otherwise, <c>false</c>.
            </returns>
      <remarks>
            If you pass inmultiple ParserOption flags, this method will return True if at least one is set.
            </remarks>
    </member>
    <member name="T:EPiServer.HtmlParsing.IHtmlSource">
      <summary>
            The interface for reading from a HTML source stream.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlSource.Read">
      <summary>
            Reads the next character from the source.
            </summary>
      <returns>The next character. If End-Of-Stream reached, returns 0xffff</returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlSource.Peek">
      <summary>
            Peeks at the next character from the source.
            </summary>
      <returns>The next character. If End-Of-Stream reached, returns 0xffff</returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.IHtmlSource.Pushback(System.Char)">
      <summary>
            Push back the specified character.
            </summary>
      <param name="character">The character.</param>
      <remarks>
            The pushback supports at least 64 characters in the pushback buffer.
            </remarks>
    </member>
    <member name="T:EPiServer.HtmlParsing.ImplicitCDataFragment">
      <summary>
            Represents an implicit CDATA fragment, such as the text in a &lt;script&gt; or &lt;style&gt; tag.
            </summary>
      <remarks>
        <para>
            The text in style and script should be parsed "as-is" until we find a closing style/script tag and completely ignore anything else that
            may appear within the text. This is very similar to how we would treat an explicit CDATA appearing within a style/script tag.
            </para>
        <para>
            Note that an ImplicitCDataFragment is actually seen as a TextFragment - the HtmlFragmentType will be set to TextFragment. The only 
            difference between a TextFragment and an ImplicitCDataFragment is the actual parsing.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.ImplicitCDataFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses the fragment from the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:EPiServer.HtmlParsing.Internal.StringNode`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A node for the string tokenizer tree.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.HtmlParsing.Internal.StringNode`1.#ctor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.Internal.StringNode`1" /> class.
            </summary>
      <remarks>
            Only used to create the root node.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.HtmlParsing.Internal.StringNode`1.#ctor(`0,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.Internal.StringNode`1" /> class.
            </summary>
      <param name="token">The token.</param>
      <param name="name">The name.</param>
      <remarks>
            Used to create all non-root nodes.
            </remarks>
      <exclude />
    </member>
    <member name="P:EPiServer.HtmlParsing.Internal.StringNode`1.Token">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets or sets the token.
            </summary>
      <value>The token.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.HtmlParsing.Internal.StringNode`1.MakeReadOnly">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Makes this instance read-only.
            </summary>
      <remarks>
            In addition to making the StringNode tree immutable, it also sets up the lookup indices for quick token lookup.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.HtmlParsing.Internal.StringToken`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.HtmlParsing.Internal.StringToken`1.TokenResult">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.HtmlParsing.Internal.StripHtmlFilterRules">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Strips all html from filtered input.
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.HtmlParsing.Internal.StripHtmlFilterRules.ElementFilterLevel(EPiServer.HtmlParsing.FilterContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Will keep content for elements except script or style elements.
            </summary>
      <param name="context">The filtering context.</param>
      <returns>
            If <paramref name="context" /> is anything except script or style <see cref="F:EPiServer.HtmlParsing.ElementFilterAction.KeepContent" />;
            otherwise <see cref="F:EPiServer.HtmlParsing.ElementFilterAction.Remove" />.
            </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.HtmlParsing.Internal.StripHtmlFilterRules.IsSafeTextFragment(EPiServer.HtmlParsing.FilterContext,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. No textfragment is safe.
            </summary>
      <param name="context">The filtering context.</param>
      <param name="content">The content.</param>
      <returns>Always <c>false</c>.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.HtmlParsing.Internal.StripHtmlFilterRules.IsSafeAttribute(EPiServer.HtmlParsing.FilterContext,EPiServer.HtmlParsing.AttributeToken,System.String)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. No attribute is safe.
            </summary>
      <param name="context">The filtering context.</param>
      <param name="name">The attribute name.</param>
      <param name="value">The attribute value.</param>
      <returns>Always <c>false</c>.</returns>
      <exclude />
    </member>
    <member name="M:EPiServer.HtmlParsing.Internal.StripHtmlFilterRules.KeepNakedElement(EPiServer.HtmlParsing.FilterContext)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Never keep naked element.
            </summary>
      <param name="context">The filtering context.</param>
      <returns>Always <c>false</c>.</returns>
      <exclude />
    </member>
    <member name="T:EPiServer.HtmlParsing.ParserOptions">
      <summary>
            Controls the behavior of the HtmlStreamParser by configuring specific features.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.None">
      <summary>
            The resulting fragments will be as close as possible to the original input stream.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.TagNamesToLower">
      <summary>
            Set this option to automatically fold element names to lower case.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.TagNamesToUpper">
      <summary>
            Set this option to automatically fold element names to upper case.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.EnforceEmptyContentModel">
      <summary>
            Set this option to enforce empty elements when content model for element is EMPTY.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.EnforceDocumentStructure">
      <summary>
            Set this option to indicate that you want the parser to correct unbalanced elements.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.EnforceElementSemantics">
      <summary>
            Set this option to let HTML parser enforce HTML element semantics, for example not allowing block elements within a p element. Note - This is not yet implemented.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.ObeyDocumentTypeDirective">
      <summary>
            Set this option to dynamically set the parser options based on the DOCTYPE directive in the HTML stream, if it exists.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.TrimEmptyElements">
      <summary>
            Set this option to automatically remove empty elements from the HTML stream that do not effect visual presentation.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.EnableCallbackOnEndElement">
      <summary>
            Set this option to enable callbacks when an end element is found. The callback is set on the CallbackOnEndElement property when the start element is found.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.XhtmlOptions">
      <summary>
            Option set that will produce modern HTML that is basically XHTML compliant.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.HtmlOptions">
      <summary>
            Option set that will allow "old style" HTML to be generated (unbalanced elements etc).
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.DefaultOptions">
      <summary>
            The default set of options, will create modern HTML that is basically XHTML compliant.
            </summary>
    </member>
    <member name="F:EPiServer.HtmlParsing.ParserOptions.SimpleEnumeratorMask">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.HtmlParsing.ProcessingInstructionFragment">
      <summary>
            Represents a Processing Instruction.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.ProcessingInstructionFragment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.ProcessingInstructionFragment" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.ProcessingInstructionFragment.ToWriter(System.IO.TextWriter)">
      <summary>
            Writes the fragment to the given TextWriter.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.ProcessingInstructionFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses the fragment from the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:EPiServer.HtmlParsing.RunningComparer">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specialized string comparison class used to find a string match in a continous stream of characters.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.HtmlParsing.RunningComparer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.RunningComparer" /> class.
            </summary>
      <param name="match">The string to look for in the character-by-character calls to IsMatch.</param>
    </member>
    <member name="P:EPiServer.HtmlParsing.RunningComparer.MatchLength">
      <summary>
            Gets the length of the match.
            </summary>
      <value>The length of the match.</value>
    </member>
    <member name="P:EPiServer.HtmlParsing.RunningComparer.Match">
      <summary>
            Gets the match.
            </summary>
      <value>The match.</value>
    </member>
    <member name="M:EPiServer.HtmlParsing.RunningComparer.IsMatch(System.Char)">
      <summary>
            Determines whether the specified character completes a match with Match.
            </summary>
      <param name="character">The character.</param>
      <returns>
        <c>true</c> if the specified character completes the match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.RunningComparer.Reset">
      <summary>
            Resets this instance.
            </summary>
    </member>
    <member name="T:EPiServer.HtmlParsing.SpecialInstructionFragment">
      <summary>
            Represents a HTML fragment that has a leading &lt;! character sequence, but is not a comment/DOCTYPE/CDATA.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.SpecialInstructionFragment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.SpecialInstructionFragment" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.SpecialInstructionFragment.ToWriter(System.IO.TextWriter)">
      <summary>
            Writes the fragment to the given TextWriter.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.SpecialInstructionFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses the fragment from the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:EPiServer.HtmlParsing.StringSource">
      <summary>
            Concrete implementation of the IHtmlSource interface for pulling HTML from a string.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.StringSource.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.StringSource" /> class.
            </summary>
      <param name="source">The source.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.StringSource.Read">
      <summary>
            Reads the next character from the source.
            </summary>
      <returns>
            The next character. If End-Of-Stream reached, returns 0xffff
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.StringSource.Peek">
      <summary>
            Peeks at the next character from the source.
            </summary>
      <returns>
            The next character. If End-Of-Stream reached, returns 0xffff
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.StringSource.Pushback(System.Char)">
      <summary>
            Push back the specified character.
            </summary>
      <param name="character">The character.</param>
      <remarks>
            This implementatino will ignore the actual character value and simply back up to the previous character in the string.
            </remarks>
    </member>
    <member name="T:EPiServer.HtmlParsing.TextFragment">
      <summary>
            Represents a text node in a HTML stream.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.TextFragment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.TextFragment" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.TextFragment.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.TextFragment.ToWriter(System.IO.TextWriter)">
      <summary>
            Writes the fragment to the given TextWriter.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.TextFragment.Parse(EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses the fragment from the specified context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:EPiServer.HtmlParsing.TextReaderSource">
      <summary>
            Concrete implementation of the IHtmlSource interface for pulling HTML from a TextReader.
            </summary>
    </member>
    <member name="M:EPiServer.HtmlParsing.TextReaderSource.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.HtmlParsing.TextReaderSource" /> class.
            </summary>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:EPiServer.HtmlParsing.TextReaderSource.Read">
      <summary>
            Reads the next character from the source.
            </summary>
      <returns>
            The next character. If End-Of-Stream reached, returns 0xffff
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.TextReaderSource.Peek">
      <summary>
            Peeks at the next character from the source.
            </summary>
      <returns>
            The next character. If End-Of-Stream reached, returns 0xffff
            </returns>
    </member>
    <member name="M:EPiServer.HtmlParsing.TextReaderSource.Pushback(System.Char)">
      <summary>
            Push back the specified character.
            </summary>
      <param name="character">The character.</param>
      <remarks>
            The pushback supports at least 64 characters in the pushback buffer.
            </remarks>
    </member>
    <member name="T:EPiServer.HtmlParsing.TokenFragmentBase`1">
      <summary>
            Abstract class for representing HTML fragments that can have token representation of the fragment name.
            </summary>
      <typeparam name="T">An enum that lists the valid names for the fragment.</typeparam>
      <remarks>
            Used for ElementFragment and AttributeFragment to avoid expensive string comparisons, allowing element identification
            with a simple enum value comparison.
            </remarks>
    </member>
    <member name="M:EPiServer.HtmlParsing.TokenFragmentBase`1.ParseNameToken(System.String,EPiServer.HtmlParsing.IHtmlParserContext)">
      <summary>
            Parses the name and sets the Token property.
            </summary>
      <param name="terminators">The terminators.</param>
      <param name="context">The context.</param>
    </member>
    <member name="T:EPiServer.Logging.Compatibility.ILog">
      <summary>
            Compatibility interface that mimics the ILog interface in log4net.
            </summary>
      <remarks>
            This class is provided to ease the transitioning from log4net and will be removed in a future release. 
            It is recommended to use the <see cref="T:EPiServer.Logging.ILogger" /> for new code.
            </remarks>
    </member>
    <member name="T:EPiServer.Logging.Compatibility.LogManager">
      <summary>
            Compatibility class that mimics some aspects of the LogManager class in log4net.
            Responsible for creating new <see cref="T:EPiServer.Logging.Compatibility.ILog" /> instances that can be used for logging.
            </summary>
      <remarks>
            This class is provided to ease the transitioning from log4net and will be removed in a future release. 
            It is recommended to use the <see cref="T:EPiServer.Logging.LogManager" />
            for new code.
            </remarks>
    </member>
    <member name="M:EPiServer.Logging.Compatibility.LogManager.GetLogger(System.Type)">
      <summary>
            Gets a <see cref="T:EPiServer.Logging.Compatibility.ILog" /> instance for the provided type. 
            </summary>
      <param name="type">The type that the logger should be created for.</param>
      <returns>A new <see cref="T:EPiServer.Logging.Compatibility.ILog" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">type</exception>
      <remarks>
            This class is provided to ease the transitioning from log4net and will be removed in a future release. 
            It is recommended to use the <see cref="M:EPiServer.Logging.LogManager.GetLogger" /> for new code.
            </remarks>
    </member>
    <member name="M:EPiServer.Logging.Compatibility.LogManager.GetLogger(System.String)">
      <summary>
            Gets a <see cref="T:EPiServer.Logging.Compatibility.ILog" /> instance for the provided type. 
            </summary>
      <param name="name">The name of the logger.</param>
      <returns>A new <see cref="T:EPiServer.Logging.Compatibility.ILog" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">name</exception>
      <remarks>
            This class is provided to ease the transitioning from log4net and will be removed in a future release. 
            It is recommended to use the <see cref="M:EPiServer.Logging.LogManager.GetLogger" /> for new code.
            </remarks>
    </member>
    <member name="T:EPiServer.Logging.ILogger">
      <summary>
            Describes an object that can be used to write log messages through.
            </summary>
    </member>
    <member name="M:EPiServer.Logging.ILogger.IsEnabled(EPiServer.Logging.Level)">
      <summary>
            Determines whether logging at the specified level is enabled.
            </summary>
      <param name="level">The level to check.</param>
      <returns>
        <c>true</c> if logging on the provided level is enabled; otherwise <c>false</c></returns>
    </member>
    <member name="M:EPiServer.Logging.ILogger.Log``2(EPiServer.Logging.Level,``0,``1,System.Func{``0,``1,System.String},System.Type)">
      <summary>
            Logs the provided <paramref name="state" /> with the specified level.
            </summary>
      <typeparam name="TState">The type of the state object.</typeparam>
      <typeparam name="TException">The type of the exception.</typeparam>
      <param name="level">The criticality level of the log message.</param>
      <param name="state">The state that should be logged.</param>
      <param name="exception">The exception that should be logged.</param>
      <param name="messageFormatter">The message formatter used to write the state to the log provider.</param>
      <param name="boundaryType">The type at the boundary of the logging framework facing the code using the logging.</param>
    </member>
    <member name="T:EPiServer.Logging.ILoggerFactory">
      <summary>
            Represents a factory that can be used to create new <see cref="T:EPiServer.Logging.ILogger" /> instances.
            </summary>
      <remarks>
            If implemented, register through <see cref="M:LogManager.Instance.AddProvider" /> to activate.
            </remarks>
    </member>
    <member name="M:EPiServer.Logging.ILoggerFactory.Create(System.String)">
      <summary>
            Creates a <see cref="T:EPiServer.Logging.ILogger" /> with the provided name.
            </summary>
      <param name="name">The name of the logger to create.</param>
      <returns>An <see cref="T:EPiServer.Logging.ILogger" /> instance with the provided name.</returns>
    </member>
    <member name="T:EPiServer.Logging.Internal.LoggerMessageFormatter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Provides standard methods for logging messages at different levels.
            </summary>
      <internal-API />
      <exclude />
    </member>
    <member name="P:EPiServer.Logging.Internal.LoggerMessageFormatter.StateAndExceptionMessageFormatter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="M:EPiServer.Logging.Internal.LoggerMessageFormatter.CreateStateAndExceptionMessageFormatter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Logging.Internal.TraceLogger">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An implementation of ILogger which forward log messages to system diagnostics trace.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Logging.Internal.TraceSourceLogger">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. An implementation of ILogger which forward log messages to system diagnostics trace source.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Logging.Internal.TraceSourceLogger.Source">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Only for test
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Logging.Level">
      <summary>
            Represent the severity level that a log message should be created at.
            </summary>
    </member>
    <member name="F:EPiServer.Logging.Level.Trace">
      <summary>
            Designates very fine-grained information potentially useful when debugging an application. Can be very verbose.
            </summary>
    </member>
    <member name="F:EPiServer.Logging.Level.Debug">
      <summary>
            Designates fine-grained information useful when debugging an application
            </summary>
    </member>
    <member name="F:EPiServer.Logging.Level.Information">
      <summary>
            Designates information about non-harmful events in the an application
            </summary>
    </member>
    <member name="F:EPiServer.Logging.Level.Warning">
      <summary>
            Designates information about potentially harmful events in the an application
            </summary>
    </member>
    <member name="F:EPiServer.Logging.Level.Error">
      <summary>
            Designates information about errors in an application that won't prevent it from continuing to execute.
            </summary>
    </member>
    <member name="F:EPiServer.Logging.Level.Critical">
      <summary>
            Designates information about severe error events in an application that will prevents it from continuing to execute.
            </summary>
    </member>
    <member name="T:EPiServer.Logging.LoggerExtensions">
      <summary>
            Provides standard methods for logging messages at different levels.
            </summary>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Log(EPiServer.Logging.ILogger,EPiServer.Logging.Level,System.String)">
      <summary>
            Logs the specified message at the provided level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="level">The level at which to log the message.</param>
      <param name="message">The message that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Log(EPiServer.Logging.ILogger,EPiServer.Logging.Level,System.String,System.Exception)">
      <summary>
            Logs the specified message and exception at the provided level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="level">The level at which to log the message.</param>
      <param name="message">The message that should be logged.</param>
      <param name="exception">The exception that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Log(EPiServer.Logging.ILogger,EPiServer.Logging.Level,System.String,System.Object[])">
      <summary>
            Logs a message at the provided level using the supplied format and arguments.
            </summary>
      <param name="logger">The logger.</param>
      <param name="level">The level at which to log the message.</param>
      <param name="messageFormat">The message format string.</param>
      <param name="args">The arguments.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Log``1(EPiServer.Logging.ILogger,EPiServer.Logging.Level,``0,System.Func{``0,System.String})">
      <summary>
            Logs a message at the provided level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <param name="logger">The logger.</param>
      <param name="level">The level at which to log the message.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Log``2(EPiServer.Logging.ILogger,EPiServer.Logging.Level,``0,``1,System.Func{``0,``1,System.String})">
      <summary>
            Logs a message and exception at the provided level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <typeparam name="TException">The type of the exception that is being logged.</typeparam>
      <param name="logger">The logger.</param>
      <param name="level">The level at which to log the message.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="exception">The exception that should be logged.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.IsTraceEnabled(EPiServer.Logging.ILogger)">
      <summary>
            Checks if Trace logging is enabled.
            </summary>
      <returns>
        <c>true</c> if Trace logging is enabled; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Trace(EPiServer.Logging.ILogger,System.String)">
      <summary>
            Logs the specified message at the Trace level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Trace(EPiServer.Logging.ILogger,System.String,System.Exception)">
      <summary>
            Logs the specified message and exception at the Trace level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <param name="exception">The exception that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Trace(EPiServer.Logging.ILogger,System.String,System.Object[])">
      <summary>
            Logs the specified message at the Trace level using the supplied format and arguments.
            </summary>
      <param name="logger">The logger.</param>
      <param name="messageFormat">The message format string.</param>
      <param name="args">The arguments that should be used to format the message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Trace``1(EPiServer.Logging.ILogger,``0,System.Func{``0,System.String})">
      <summary>
            Logs a message at the Trace level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Trace``2(EPiServer.Logging.ILogger,``0,``1,System.Func{``0,``1,System.String})">
      <summary>
            Logs a message and exception at the Trace level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <typeparam name="TException">The type of the exception that is being logged.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="exception">The exception that should be logged.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.IsDebugEnabled(EPiServer.Logging.ILogger)">
      <summary>
            Checks if Debug logging is enabled.
            </summary>
      <returns>
        <c>true</c> if Debug logging is enabled; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Debug(EPiServer.Logging.ILogger,System.String)">
      <summary>
            Logs the specified message at the Debug level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Debug(EPiServer.Logging.ILogger,System.String,System.Exception)">
      <summary>
            Logs the specified message and exception at the Debug level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <param name="exception">The exception that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Debug(EPiServer.Logging.ILogger,System.String,System.Object[])">
      <summary>
            Logs the specified message at the Debug level using the supplied format and arguments.
            </summary>
      <param name="logger">The logger.</param>
      <param name="messageFormat">The message format string.</param>
      <param name="args">The arguments that should be used to format the message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Debug``1(EPiServer.Logging.ILogger,``0,System.Func{``0,System.String})">
      <summary>
            Logs a message at the Debug level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Debug``2(EPiServer.Logging.ILogger,``0,``1,System.Func{``0,``1,System.String})">
      <summary>
            Logs a message and exception at the Debug level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <typeparam name="TException">The type of the exception that is being logged.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="exception">The exception that should be logged.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.IsInformationEnabled(EPiServer.Logging.ILogger)">
      <summary>
            Checks if Information logging is enabled.
            </summary>
      <returns>
        <c>true</c> if Information logging is enabled; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Information(EPiServer.Logging.ILogger,System.String)">
      <summary>
            Logs the specified message at the Information level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Information(EPiServer.Logging.ILogger,System.String,System.Exception)">
      <summary>
            Logs the specified message and exception at the Information level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <param name="exception">The exception that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Information(EPiServer.Logging.ILogger,System.String,System.Object[])">
      <summary>
            Logs the specified message at the Information level using the supplied format and arguments.
            </summary>
      <param name="logger">The logger.</param>
      <param name="messageFormat">The message format string.</param>
      <param name="args">The arguments that should be used to format the message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Information``1(EPiServer.Logging.ILogger,``0,System.Func{``0,System.String})">
      <summary>
            Logs a message at the Information level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Information``2(EPiServer.Logging.ILogger,``0,``1,System.Func{``0,``1,System.String})">
      <summary>
            Logs a message and exception at the Information level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <typeparam name="TException">The type of the exception that is being logged.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="exception">The exception that should be logged.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.IsWarningEnabled(EPiServer.Logging.ILogger)">
      <summary>
            Checks if Warning logging is enabled.
            </summary>
      <returns>
        <c>true</c> if Warning logging is enabled; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Warning(EPiServer.Logging.ILogger,System.String)">
      <summary>
            Logs the specified message at the Warning level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Warning(EPiServer.Logging.ILogger,System.String,System.Exception)">
      <summary>
            Logs the specified message and exception at the Warning level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <param name="exception">The exception that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Warning(EPiServer.Logging.ILogger,System.String,System.Object[])">
      <summary>
            Logs the specified message at the Warning level using the supplied format and arguments.
            </summary>
      <param name="logger">The logger.</param>
      <param name="messageFormat">The message format string.</param>
      <param name="args">The arguments that should be used to format the message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Warning``1(EPiServer.Logging.ILogger,``0,System.Func{``0,System.String})">
      <summary>
            Logs a message at the Warning level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Warning``2(EPiServer.Logging.ILogger,``0,``1,System.Func{``0,``1,System.String})">
      <summary>
            Logs a message and exception at the Warning level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <typeparam name="TException">The type of the exception that is being logged.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="exception">The exception that should be logged.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.IsErrorEnabled(EPiServer.Logging.ILogger)">
      <summary>
            Checks if Error logging is enabled.
            </summary>
      <returns>
        <c>true</c> if Error logging is enabled; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Error(EPiServer.Logging.ILogger,System.String)">
      <summary>
            Logs the specified message at the Error level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Error(EPiServer.Logging.ILogger,System.String,System.Exception)">
      <summary>
            Logs the specified message and exception at the Error level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <param name="exception">The exception that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Error(EPiServer.Logging.ILogger,System.String,System.Object[])">
      <summary>
            Logs the specified message at the Error level using the supplied format and arguments.
            </summary>
      <param name="logger">The logger.</param>
      <param name="messageFormat">The message format string.</param>
      <param name="args">The arguments that should be used to format the message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Error``1(EPiServer.Logging.ILogger,``0,System.Func{``0,System.String})">
      <summary>
            Logs a message at the Error level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Error``2(EPiServer.Logging.ILogger,``0,``1,System.Func{``0,``1,System.String})">
      <summary>
            Logs a message and exception at the Error level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <typeparam name="TException">The type of the exception that is being logged.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="exception">The exception that should be logged.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.IsCriticalEnabled(EPiServer.Logging.ILogger)">
      <summary>
            Checks if Critical logging is enabled.
            </summary>
      <returns>
        <c>true</c> if Critical logging is enabled; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Critical(EPiServer.Logging.ILogger,System.String)">
      <summary>
            Logs the specified message at the Critical level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Critical(EPiServer.Logging.ILogger,System.String,System.Exception)">
      <summary>
            Logs the specified message and exception at the Critical level.
            </summary>
      <param name="logger">The logger.</param>
      <param name="message">The message that should be logged.</param>
      <param name="exception">The exception that should be logged.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Critical(EPiServer.Logging.ILogger,System.String,System.Object[])">
      <summary>
            Logs the specified message at the Critical level using the supplied format and arguments.
            </summary>
      <param name="logger">The logger.</param>
      <param name="messageFormat">The message format string.</param>
      <param name="args">The arguments that should be used to format the message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Critical``1(EPiServer.Logging.ILogger,``0,System.Func{``0,System.String})">
      <summary>
            Logs a message at the Critical level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="M:EPiServer.Logging.LoggerExtensions.Critical``2(EPiServer.Logging.ILogger,``0,``1,System.Func{``0,``1,System.String})">
      <summary>
            Logs a message and exception at the Critical level using the supplied formatter and state.
            </summary>
      <typeparam name="TState">The type of the state object that should be passed to the formatter method.</typeparam>
      <typeparam name="TException">The type of the exception that is being logged.</typeparam>
      <param name="logger">The logger.</param>
      <param name="state">A state object to pass to the message formatter.</param>
      <param name="exception">The exception that should be logged.</param>
      <param name="messageFormatter">A message formatter that will be called when formatting the log message.</param>
      <exception cref="T:System.ArgumentNullException">logger</exception>
    </member>
    <member name="T:EPiServer.Logging.LoggerFactoryAttribute">
      <summary>
            Attribute that defines a type of <see cref="T:EPiServer.Logging.ILoggerFactory" /> that should be used by the 
            <see cref="T:EPiServer.Logging.LogManager" /> to create logger instances in the system.
            </summary>
      <remarks>
            The standard <see cref="T:EPiServer.Logging.LogManager" /> currently only supports one <see cref="T:EPiServer.Logging.ILoggerFactory" />
            instance and will use the type from the first <see cref="T:EPiServer.Logging.LoggerFactoryAttribute" /> that is found.
            </remarks>
    </member>
    <member name="M:EPiServer.Logging.LoggerFactoryAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Logging.LoggerFactoryAttribute" /> class.
            </summary>
      <param name="loggerFactoryType">Type that should be used to create logger instances. Must implement <see cref="T:EPiServer.Logging.ILoggerFactory" />.</param>
      <exception cref="T:System.ArgumentNullException">loggerFactoryType</exception>
      <exception cref="T:System.ArgumentException">Type must implement ILoggerFactory interface;loggerFactoryType</exception>
    </member>
    <member name="P:EPiServer.Logging.LoggerFactoryAttribute.LoggerFactoryType">
      <summary>
            Gets the type of <see cref="T:EPiServer.Logging.ILoggerFactory" /> that should be used by the <see cref="T:EPiServer.Logging.LogManager" /> to create logger instances in the system.
            </summary>
    </member>
    <member name="T:EPiServer.Logging.LogManager">
      <summary>
            Class responsible for creating new <see cref="T:EPiServer.Logging.ILogger" /> instances.
            </summary>
    </member>
    <member name="M:EPiServer.Logging.LogManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Logging.LogManager" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Logging.LogManager.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Logging.LogManager" /> class.
            </summary>
      <param name="autoCreateFactory">if set to <c>true</c> create a factory from appsettings or scan assemblies to find a factory.</param>
    </member>
    <member name="P:EPiServer.Logging.LogManager.Instance">
      <summary>
            Gets or sets the current <see cref="T:EPiServer.Logging.LogManager" /> instance.
            </summary>
      <remarks>
            This property is guaranteed to always return a <see cref="T:EPiServer.Logging.LogManager" /> object.
            If set to null, all logging will be cancelled.
            </remarks>
    </member>
    <member name="F:EPiServer.Logging.LogManager.BoundaryType">
      <summary>
            Gets the type of the class that represents the boundary of the logging system.
            </summary>
      <remarks>
            This can be used by certain logging framework to find and log the correct stack information.
            </remarks>
    </member>
    <member name="P:EPiServer.Logging.LogManager.LoggerFactory">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Delegate that is used to create a <see cref="T:EPiServer.Logging.ILoggerFactory" /> in case auto create factory was assigned.
            </summary>
      <internal-api />
      <exclude />
    </member>
    <member name="P:EPiServer.Logging.LogManager.Factory">
      <summary>
            Gets or sets the factory that should be used. If not explicitly set, all current 
            loaded assemblies will be scanned to find a factory.
            </summary>
    </member>
    <member name="M:EPiServer.Logging.LogManager.AddFactory(EPiServer.Logging.ILoggerFactory)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Adds a <see cref="T:EPiServer.Logging.ILoggerFactory" /> to the current <see cref="T:EPiServer.Logging.LogManager" />.
            </summary>
      <param name="factory">The factory that should be used.</param>
      <exception cref="T:System.ArgumentNullException">factory</exception>
      <remarks>
        <para>
                The basic <see cref="T:EPiServer.Logging.LogManager" /> implementation currently only supports
                the use of one single <see cref="T:EPiServer.Logging.ILoggerFactory" /> and will only use the instance
                last registered. This behavior is subject to change in future releases.
            </para>
        <para>
                Adding a new factory will not affect any <see cref="T:EPiServer.Logging.ILogger" /> instances
                that has been created and used already.
            </para>
      </remarks>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Logging.LogManager.GetLogger(System.String)">
      <summary>
            Gets a <see cref="T:EPiServer.Logging.ILogger" /> instance for the provided name.
            </summary>
      <param name="name">The name of the logger to get.</param>
      <returns>A new <see cref="T:EPiServer.Logging.ILogger" /> instance</returns>
      <remarks>
            This method is guaranteed to always return an instance.
            </remarks>
    </member>
    <member name="M:EPiServer.Logging.LogManager.GetLogger(System.Type)">
      <summary>
            Gets a <see cref="T:EPiServer.Logging.ILogger" /> instance from the current <see cref="P:EPiServer.Logging.LogManager.Instance" /> for a give type.
            </summary>
      <param name="type">The type that the logger should be created for.</param>
      <returns>A new <see cref="T:EPiServer.Logging.ILogger" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">type</exception>
    </member>
    <member name="M:EPiServer.Logging.LogManager.GetLogger">
      <summary>
            Gets a <see cref="T:EPiServer.Logging.ILogger" /> instance from the current <see cref="P:EPiServer.Logging.LogManager.Instance" /> configured
            for the calling class.
            </summary>
      <returns>A new <see cref="T:EPiServer.Logging.ILogger" /> instance.</returns>
      <remarks>
            As this method uses the stack and some reflection it is not recommended to use this from
            other than initializing static fields.
            </remarks>
    </member>
    <member name="T:EPiServer.Logging.TraceLoggerFactory">
      <summary>
            An implementation of ILoggerFactory which forward log messages to system diagnostics trace.
            </summary>
    </member>
    <member name="M:EPiServer.Logging.TraceLoggerFactory.Create(System.String)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Logging.TraceSourceLoggerFactory">
      <summary>
            An implementation of ILoggerFactory which forward log messages to system diagnostics trace source.
            </summary>
    </member>
    <member name="M:EPiServer.Logging.TraceSourceLoggerFactory.Create(System.String)">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Personalization.GeoCoordinate.Latitude">
      <summary>
            Gets or sets the latitude of the <see cref="T:EPiServer.Personalization.GeoCoordinate" />.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.GeoCoordinate.Longitude">
      <summary>
            Gets or sets the longitude of the <see cref="T:EPiServer.Personalization.GeoCoordinate" />.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.GeoCoordinate.HorizontalAccuracy">
      <summary>
            Gets or sets the accuracy of the latitude and longitude that is given by the <see cref="T:EPiServer.Personalization.GeoCoordinate" />, in meters.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.GeoCoordinate.GetDistanceTo(EPiServer.Personalization.GeoCoordinate)">
      <summary>
            Returns the distance between the latitude and longitude coordinates that are specified by this <see cref="T:EPiServer.Personalization.GeoCoordinate" /> and another specified <see cref="T:EPiServer.Personalization.GeoCoordinate" />.
            </summary>
      <param name="other">The <see cref="T:EPiServer.Personalization.GeoCoordinate" /> for the location to calculate the distance to.</param>
      <returns>The distance between the two coordinates, in meters.</returns>
    </member>
    <member name="M:EPiServer.Personalization.GeoCoordinate.ToString">
      <summary>
            Returns the current <see cref="T:EPiServer.Personalization.GeoCoordinate" /> object's display name
            </summary>
      <returns>The <see cref="T:EPiServer.Personalization.GeoCoordinate" /> object's display name</returns>
    </member>
    <member name="T:EPiServer.Personalization.GeolocationProviderBase">
      <summary>
            Base class that can be used for <see cref="T:EPiServer.Personalization.IGeolocationProvider" /> implementations. Provides a default set of Continents and Countries.
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.GeolocationProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider</param>
      <param name="config"> A collection of the name/value pairs representing the provider-specific attributes
            specified in the configuration for this provider.</param>
    </member>
    <member name="P:EPiServer.Personalization.GeolocationProviderBase.Name">
      <summary>
            Gets the friendly name used to refer to the provider
            </summary>
      <remarks>Default name is 'default'</remarks>
    </member>
    <member name="P:EPiServer.Personalization.GeolocationProviderBase.Capabilities">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Personalization.GeolocationProviderBase.Lookup(System.Net.IPAddress)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Personalization.GeolocationProviderBase.GetContinentCodes">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Personalization.GeolocationProviderBase.GetCountryCodes(System.String)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Personalization.GeolocationProviderBase.GetRegions(System.String)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.Personalization.GeolocationResult">
      <summary>
            Default implementation of <see cref="T:EPiServer.Personalization.IGeolocationResult" /></summary>
    </member>
    <member name="P:EPiServer.Personalization.GeolocationResult.ContinentCode">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Personalization.GeolocationResult.CountryCode">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Personalization.GeolocationResult.Region">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Personalization.GeolocationResult.TimeZone">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Personalization.GeolocationResult.Location">
      <inheritdoc />
    </member>
    <member name="P:EPiServer.Personalization.IGeolocationProvider.Capabilities">
      <summary>
            Get the capabilities of this provider
            </summary>
    </member>
    <member name="M:EPiServer.Personalization.IGeolocationProvider.GetContinentCodes">
      <summary>
            Get the list of two-letter continent codes known to this provider
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.IGeolocationProvider.GetCountryCodes(System.String)">
      <summary>
            Get the list of two-letter country codes known to this provider
            </summary>
      <param name="continentCode">Two-letter continent code to filter the list of countries on (may be null)</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.IGeolocationProvider.GetRegions(System.String)">
      <summary>
            Get the list of regions for a country known to this provider
            </summary>
      <param name="countryCode">Two-letter country code to filter the list of regions on (may be null)</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Personalization.IGeolocationProvider.Lookup(System.Net.IPAddress)">
      <summary>
            Look up IP address in geolocation database
            </summary>
      <param name="address">IP address to look up</param>
      <returns>Geolocation data for the IP address (can be null)</returns>
    </member>
    <member name="T:EPiServer.Personalization.IGeolocationResult">
      <summary>
            Model describing the result of a Geolocation lookup
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.IGeolocationResult.ContinentCode">
      <summary>
            Two characters continent code based on ISO 3166.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.IGeolocationResult.CountryCode">
      <summary>
            Two characters country code based on ISO 3166.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.IGeolocationResult.Region">
      <summary>
            The region within the country
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.IGeolocationResult.TimeZone">
      <summary>
            The time zone.
            </summary>
    </member>
    <member name="P:EPiServer.Personalization.IGeolocationResult.Location">
      <summary>
            Represents the location.
            </summary>
    </member>
    <member name="T:EPiServer.Personalization.Internal.GeographicLocations">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Contains a fixed lists of known continents and country codes based on the ISO 3166-1 standard.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Personalization.Internal.GeographicLocations.Continents">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. List of continent codes.
            </summary>
      <exclude />
    </member>
    <member name="F:EPiServer.Personalization.Internal.GeographicLocations.Countries">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. List of known ISO 3166-1 Alpha 2 Country codes organized by Continent codes.
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Personalization.Internal.NullGeolocationProvider">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Security.AnonymousRole">
      <summary>
            Implementation of the Anonymous virtual role.
            </summary>
      <remarks>   
            A user that is not authenticated will be a member of the Anonymous role.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AnonymousRole.Name">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.AnonymousRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
      <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
      <param name="principal">The principal.</param>
      <param name="context">The context.</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
      <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
    </member>
    <member name="P:EPiServer.Security.AnonymousRole.RoleName">
      <summary>
            Gets or sets the default name of this virtual role.
            </summary>
      <remarks>
        <para>
            This value is set by the initialization engine to reflect the configuration of this role.
            </para>
        <para>
            This name may differ in different instances of this class, only use this name to get the default role name.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Security.AuthenticatedRole">
      <summary>
            Implementation of the Authenticated virtual role.
            </summary>
      <remarks>
            A user that is authenticated will be a member of the Authenticated role.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.AuthenticatedRole.Name">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.AuthenticatedRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
      <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
      <param name="principal">The principal.</param>
      <param name="context">The context.</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
      <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
    </member>
    <member name="P:EPiServer.Security.AuthenticatedRole.RoleName">
      <summary>
            Gets or sets the default name of this virtual role.
            </summary>
      <remarks>
        <para>
            This value is set by the initialization engine to reflect the configuration of this role.
            </para>
        <para>
            This name may differ in different instances of this class, only use this name to get the default role name.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Security.ClaimTypeOptions">
      <summary>
            Defines claim types that are synchronized to cms for a user.
            </summary>
      <remarks>
            By default is claim types defined in <see cref="T:System.Security.Claims.ClaimTypes" /> used.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.ClaimTypeOptions.Email">
      <summary>
            The claim type for email
            </summary>
      <remarks>
            Default value is <see cref="F:System.Security.Claims.ClaimTypes.Email" /></remarks>
    </member>
    <member name="P:EPiServer.Security.ClaimTypeOptions.GivenName">
      <summary>
            The claim type for GivenName
            </summary>
      <remarks>
            Default value is <see cref="F:System.Security.Claims.ClaimTypes.GivenName" /></remarks>
    </member>
    <member name="P:EPiServer.Security.ClaimTypeOptions.Surname">
      <summary>
            The claim type for Surname
            </summary>
      <remarks>
            Default value is <see cref="F:System.Security.Claims.ClaimTypes.Surname" /></remarks>
    </member>
    <member name="T:EPiServer.Security.EveryoneRole">
      <summary>
            Implementation of the Everyone virtual role.
            </summary>
      <remarks>
            Any user will always be a member of the Everyone group.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.EveryoneRole.Name">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.EveryoneRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
      <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
      <param name="principal">The principal.</param>
      <param name="context">The context.</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
      <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
    </member>
    <member name="P:EPiServer.Security.EveryoneRole.RoleName">
      <summary>
            Gets or sets the default name of this virtual role.
            </summary>
      <remarks>
        <para>
            This value is set by the initialization engine to reflect the configuration of this role.
            </para>
        <para>
            This name may differ in different instances of this class, only use this name to get the default role name.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.Security.IInitializableVirtualRole">
      <summary>
            Signature for virtual role implementation that needs initialization
            </summary>
    </member>
    <member name="M:EPiServer.Security.IInitializableVirtualRole.Initialize(System.String)">
      <summary>
            The name of the virtual role to initialize from
            </summary>
      <param name="name">Name of the virtual role</param>
    </member>
    <member name="T:EPiServer.Security.Internal.FallbackPrincipal">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Used to get a principal in cases where no user is available from http context.
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.FallbackPrincipal.AnonymousPrincipal">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets a principal object representing the an anonoymous principal.
            </summary>
      <value>The anonymous principal.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Security.Internal.FallbackPrincipal.Current">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets current thread principal or an anonymus principal.
            </summary>
      <remarks>
            When you get the current principal you are assured to always get a valid IPrincipal.
            </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.FallbackPrincipalAccessor">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.IReplicationType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.VirtualRoleAuthorizationSession">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Runtime class to check if a principal is part of a virtual role
            </summary>
      <remarks>
        <para>Implements a cache for lookups that can be disabled per virtual role using the <see cref="P:EPiServer.Security.VirtualRoleProviderBase.EnableIsInRoleCache" />.</para>
        <para>Since the class is scoped per request or per thread to get session caching it should never be stored in singleton instances</para>
      </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Security.Internal.VirtualRoleAuthorizationSession.IsInVirtualRole(System.Security.Principal.IPrincipal,System.String,EPiServer.Security.SecurityEntityType,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="T:EPiServer.Security.Internal.VirtualRoleToClaimConverter">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Responsible for converting virtual roles into claims
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Security.IPrincipalAccessor">
      <summary>
            Accessor to get current <see cref="T:System.Security.Principal.IPrincipal" /></summary>
    </member>
    <member name="P:EPiServer.Security.IPrincipalAccessor.Principal">
      <summary>
            Gets or sets the <see cref="T:System.Security.Principal.IPrincipal" /> associated with current context.
            </summary>
      <value>The current principal.</value>
      <remarks>
            This method will use user from the HttpContext if it exists, otherwise
            it will fallback to the the Thread.CurrentPrincipal setting.
            <para>
            When you get the current principal you are assured to always get a valid IPrincipal.
            </para></remarks>
    </member>
    <member name="T:EPiServer.Security.IVirtualRoleAuthorizationSession">
      <summary>
            Components that will check if a principal is part of a virtual role
            </summary>
      <remarks>
        <para>The default implementation is scoped per request or per thread to get session caching it should never be stored in singleton instances</para>
      </remarks>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleAuthorizationSession.IsInVirtualRole(System.Security.Principal.IPrincipal,System.String,EPiServer.Security.SecurityEntityType,System.Object)">
      <summary>
            Determines whether the current principal belongs to the specified virtual role.
            </summary>
      <param name="principal">The principal that will be forwarded to the provider</param>
      <param name="role">The name of the role for which to check membership.</param>
      <param name="type">The security type of the role you want to check</param>
      <param name="context">The context under which the query is being performed</param>
      <returns>true if the current principal is a member of the specified role; otherwise, false.</returns>
    </member>
    <member name="T:EPiServer.Security.IVirtualRoleReplication">
      <summary>
            Interface used to replicate changes from <see cref="T:EPiServer.Security.VirtualRoleRepository`1" /></summary>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleReplication.Register(System.String,System.Type)">
      <summary>
            Replicate virtual role to other machines
            </summary>
      <param name="name">Name of the role</param>
      <param name="virtualRoleProviderType">The type of the role</param>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleReplication.Unregister(System.String)">
      <summary>
            Replicate unregistration of the role to another machine
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleReplication.ClearRepositoryCache">
      <summary>
            Sends an event that the repository cache should be cleared
            </summary>
    </member>
    <member name="E:EPiServer.Security.IVirtualRoleReplication.RegisterReceived">
      <summary>
            Fired when an register event is received
            </summary>
    </member>
    <member name="E:EPiServer.Security.IVirtualRoleReplication.UnregisterReceived">
      <summary>
            Fired when an unregister event is received
            </summary>
    </member>
    <member name="E:EPiServer.Security.IVirtualRoleReplication.ClearRepositoryCacheReceived">
      <summary>
            Occurs when a clear cache event has been broadcasted.
            </summary>
    </member>
    <member name="T:EPiServer.Security.IVirtualRoleRepository">
      <summary>
            Signature for a virtual role repository
            </summary>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleRepository.GetAllRoles">
      <summary>
            Get a list of all registered virtual roles in this repository.
            </summary>
      <returns>A list of virtual role names.</returns>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleRepository.GetRoleNamesByType(System.Type)">
      <summary>
            Gets the virtual role names for a specified type.
            </summary>
      <param name="type">Type of the class.</param>
      <returns>The role names.</returns>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleRepository.TryGetRole(System.String,EPiServer.Security.VirtualRoleProviderBase@)">
      <summary>
            Get a role based on name
            </summary>
      <param name="role">Name of the role</param>
      <param name="virtualRole">The virtual role provider registered for this name</param>
      <returns>True if the role was found</returns>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleRepository.SearchRoles(System.String)">
      <summary>
            Find virtual roles registered in this repository
            </summary>
      <param name="query">Query to find roles from.</param>
      <returns>A list of roles that match the roleName</returns>
      <remarks>
            Matching of role names is simply a substring check - if the role contains the string passed in roleName
            anywhere in the string, it is considered a match.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleRepository.Register(System.String,System.Type,System.Boolean)">
      <summary>
            Register a new virtual role and return the instance T.
            </summary>
      <param name="name">Name of the role</param>
      <param name="virtualRoleProviderType">The type of the implementation</param>
      <param name="replicateChanges">True if changes should be replicated to other instances or machines</param>
      <remarks>This method will overwrite any existing registered virtual roles with the same name</remarks>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleRepository.Register(System.String,EPiServer.Security.VirtualRoleProviderBase)">
      <summary>
            Register a new virtual role
            </summary>
      <param name="name">Name of the role</param>
      <param name="provider">The implementation</param>
      <remarks>This method will overwrite any existing registered virtual roles with the same name.
            No events will be raised with this overload.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.IVirtualRoleRepository.Unregister(System.String,System.Boolean)">
      <summary>
            Unregister a virtual role
            </summary>
      <param name="name">The name of the role</param>
      <param name="replicateChanges">Replicate changes to all instences of this class</param>
    </member>
    <member name="T:EPiServer.Security.MappedRole">
      <summary>
            Map one role to several roles in the system.
            roles : Comma separated list of roles. E.g, WebAdmins, WebEditors
            mode : Any or All, Default is Any. If Any is set the principal only has to be a member of one of the roles specifed.
            </summary>
    </member>
    <member name="M:EPiServer.Security.MappedRole.#ctor">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Security.MappedRole" /></summary>
    </member>
    <member name="M:EPiServer.Security.MappedRole.#ctor(EPiServer.Security.IVirtualRoleRepository)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.Security.MappedRole" /></summary>
    </member>
    <member name="M:EPiServer.Security.MappedRole.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.MappedRole.Initialize(System.String,EPiServer.Security.MappedRoleOptions)">
      <summary>
            Initializes the <see cref="T:EPiServer.Security.MappedRole" />.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="options">The set of options that should be used by this role.</param>
    </member>
    <member name="P:EPiServer.Security.MappedRole.Roles">
      <summary>
            A list of roles this role is mapped to.
            </summary>
    </member>
    <member name="P:EPiServer.Security.MappedRole.ShouldMatchAll">
      <summary>
            Specifies if all mapped roles must match to be considered part of this role
            </summary>
    </member>
    <member name="M:EPiServer.Security.MappedRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
      <summary>
            Determines whether the specified principal is a member of the roles specified.
            </summary>
      <param name="principal">The principal.</param>
      <param name="context">External context.</param>
      <returns>
        <c>true</c> if the specified principal is a member of the roles specified; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:EPiServer.Security.MappedRoleOptions.MappedRoles">
      <summary>
            A list of roles this role is mapped to.
            </summary>
    </member>
    <member name="P:EPiServer.Security.MappedRoleOptions.ShouldMatchAll">
      <summary>
            Specifies if all mapped roles must match to be considered part of this role
            </summary>
    </member>
    <member name="T:EPiServer.Security.PrincipalAccessor">
      <summary>
            Accessor to get and set current <see cref="T:System.Security.Principal.IPrincipal" /></summary>
    </member>
    <member name="P:EPiServer.Security.PrincipalAccessor.Current">
      <summary>
            Gets or sets the current <see cref="T:System.Security.Principal.IPrincipal" /></summary>
    </member>
    <member name="T:EPiServer.Security.SecurityEntity">
      <summary>
            Simple immutable class that identifies a security entity, i e a user or a role.
            </summary>
    </member>
    <member name="M:EPiServer.Security.SecurityEntity.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.SecurityEntity" /> class.
            </summary>
      <param name="name">The name of the security entity.</param>
      <remarks>
            By default the entity will be marked as a role.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.SecurityEntity.#ctor(System.String,EPiServer.Security.SecurityEntityType)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.SecurityEntity" /> class.
            </summary>
      <param name="name">The name of the security entity.</param>
      <param name="entityType">Type of the entity.</param>
      <remarks>
            A security entity can be a role or a user.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.SecurityEntity.Name">
      <summary>
            Gets the name of the security entity.
            </summary>
    </member>
    <member name="P:EPiServer.Security.SecurityEntity.EntityType">
      <summary>
            Gets the type of the entity.
            </summary>
    </member>
    <member name="M:EPiServer.Security.SecurityEntity.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
      <remarks>
            The string returned by ToString can always be successfully parsed with the TryParse method.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.SecurityEntity.TryParse(System.String,EPiServer.Security.SecurityEntity@)">
      <summary>
            Tries to parse a string into a SecurityEntity.
            </summary>
      <param name="securityEntity">The string representation of a security entity.</param>
      <param name="entity">The parsed entity.</param>
      <returns>True if the string was successfully parsed; false otherwise.</returns>
      <remarks>
            The expected format is:
            <para>
            SecurityEntityType:Name
            </para><para>
            I e the following are all valid strings that can be successfully parsed:
            </para>
            User:Adam
            Role:Administrator
            User:superuser
            </remarks>
    </member>
    <member name="T:EPiServer.Security.SecurityEntityProvider">
      <summary>
            Signature for component that provides security entities which can be used to apply access rights for items (for example IContent).
            </summary>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider</param>
      <param name="config"> A collection of the name/value pairs representing the provider-specific attributes
            specified in the configuration for this provider.</param>
    </member>
    <member name="P:EPiServer.Security.SecurityEntityProvider.Name">
      <summary>
            Gets the friendly name used to refer to the provider
            </summary>
      <remarks>Default name is 'default'</remarks>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProvider.Search(System.String,System.String)">
      <summary>
            Searches all security entities of given type with a matching name.
            </summary>
      <remarks>
            The recommendation is to support partly matches on <paramref name="partOfValue" />. For example in an implementation
            that uses SQL server the recommendation is to surround the specified value with '%' and use the 'LIKE' operator.
            </remarks>
      <param name="partOfValue">Part of value to match or null to get all of given type.</param>
      <param name="claimType">The claimType to search for.</param>
      <returns>A list of all matching entities or an empty list if no matches.</returns>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProvider.Search(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Searches all security entities of given type with a matching name with paging support.
            </summary>
      <remarks>
            The recommendation is to support partly matches on <paramref name="partOfValue" />. For example in an implementation
            that uses SQL server the recommendation is to surround the specified value with '%' and use the 'LIKE' operator.
            </remarks>
      <param name="partOfValue">Part of value to match or null to get all of given type.</param>
      <param name="claimType">The claim type to search for.</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="totalCount">The total amount of matched entites. Return -1 if provider does not support paging.</param>
      <returns>A list of all matching entities or an empty list if no matches.</returns>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProvider.GetRolesForUser(System.String)">
      <summary>
            Retrieves all roles for user with given userName.
            </summary>
      <param name="userName">The name of the user.</param>
      <returns>A list of all roles for the user.</returns>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProvider.FindUsersInRole(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Returns users that are part of given role.
            </summary>
      <remarks>
        <para>
            The recommendation is to support partly matches on <paramref name="usernameToMatch" />. For example in an implementation
            that uses SQL server the recommendation is to surround the specified value with '%' and use the 'LIKE' operator.
            </para>
        <para>
            Default implementation returns empty list. Should be overridden to support functionality.
            </para>
        <para>
            Implemenations should return empty list when role does not exist
            </para>
      </remarks>
      <param name="roleName">The name of the role to get users for</param>
      <param name="usernameToMatch">The username to match for. Pass in null to match all users.</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="totalCount">The total amount of matched entites.</param>
      <returns>A list of matched users</returns>
    </member>
    <member name="T:EPiServer.Security.SecurityEntityProviderExtensions">
      <summary>
            Convenience extension methods for <see cref="T:EPiServer.Security.SecurityEntityProvider" /></summary>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.SearchRoles(EPiServer.Security.SecurityEntityProvider,System.String)">
      <summary>
            Search all roles matching <paramref name="partOfName" />.
            </summary>
      <param name="securityEntityProvider">The provider that is extended</param>
      <param name="partOfName">part of the role name to match. Null or String.Empty will return all roles.</param>
      <returns>A list of matching roles.</returns>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.SearchRoles(EPiServer.Security.SecurityEntityProvider,System.String,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Search all roles matching <paramref name="partOfName" />.
            </summary>
      <param name="securityEntityProvider">The provider that is extended</param>
      <param name="partOfName">part of the role name to match. Null or String.Empty will return all roles.</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="totalCount">The total amount of matched entites. Return -1 if provider does not support paging.</param>
      <returns>A list of all matching entities or an empty list if no matches.</returns>
      <returns>A list of matching roles.</returns>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.SearchUsersByName(EPiServer.Security.SecurityEntityProvider,System.String)">
      <summary>
            Search all users with a matching <paramref name="partOfName" />.
            </summary>
      <param name="securityEntityProvider">The provider that is extended</param>
      <param name="partOfName">part of the user name to match. Null or String.Empty will return all users.</param>
      <returns>A list of matching users.</returns>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.SearchUsersByName(EPiServer.Security.SecurityEntityProvider,System.String,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Search all users matching <paramref name="partOfName" />.
            </summary>
      <param name="securityEntityProvider">The provider that is extended</param>
      <param name="partOfName">part of the user name to match. Null or String.Empty will return all users.</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="totalCount">The total amount of matched entites. Return -1 if provider does not support paging.</param>
      <returns>A list of all matching entities or an empty list if no matches.</returns>
      <returns>A list of matching users.</returns>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.SearchUsersByEmail(EPiServer.Security.SecurityEntityProvider,System.String)">
      <summary>
            Search all users with an email matching <paramref name="partOfEmail" />.
            </summary>
      <param name="securityEntityProvider">The provider that is extended</param>
      <param name="partOfEmail">part of the email to match.</param>
      <returns>A list of matching users.</returns>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.GetUsersInRole(EPiServer.Security.SecurityEntityProvider,System.String)">
      <summary>
            Returns users that are part of given role.
            </summary>
      <param name="securityEntityProvider">The security entity provider that is extended</param>
      <param name="roleName">The name of the role to get users for</param>
      <returns>All users in role</returns>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.FindUsersInRole(EPiServer.Security.SecurityEntityProvider,System.String,System.String)">
      <summary>
            Returns users that are part of given role.
            </summary>
      <param name="securityEntityProvider">The security entity provider that is extended</param>
      <param name="roleName">The name of the role to get users for</param>
      <param name="usernameToMatch">The username to match for. Pass in null to match all users.</param>
      <returns>All matched users in role</returns>
    </member>
    <member name="M:EPiServer.Security.SecurityEntityProviderExtensions.GetUsersInRole(EPiServer.Security.SecurityEntityProvider,System.String,System.Int32,System.Int32,System.Int32@)">
      <summary>
            Returns users that are part of given role.
            </summary>
      <param name="securityEntityProvider">The security entity provider that is extended</param>
      <param name="roleName">The name of the role to get users for</param>
      <param name="startIndex">The start index, used for paging</param>
      <param name="maxRows">The maximum number of rows returned</param>
      <param name="totalCount">The total amount of matched entites.</param>
      <returns>Matching users</returns>
    </member>
    <member name="T:EPiServer.Security.SecurityEntityType">
      <summary>
            Lists the different types of security entities.
            </summary>
    </member>
    <member name="F:EPiServer.Security.SecurityEntityType.User">
      <summary>
            The Security entity represents a user.
            </summary>
    </member>
    <member name="F:EPiServer.Security.SecurityEntityType.Role">
      <summary>
            The Security entity represents a role.
            </summary>
    </member>
    <member name="F:EPiServer.Security.SecurityEntityType.VisitorGroup">
      <summary>
            The Security entity represents a visitor group.
            </summary>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleBuilder.#ctor(System.String,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.VirtualRoleBuilder" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleBuilder.Name">
      <summary>
            Gets the name of the <see cref="T:EPiServer.Security.VirtualRoleProviderBase" />.
            </summary>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleBuilder.RoleType">
      <summary>
            Gets the type of the <see cref="T:EPiServer.Security.VirtualRoleProviderBase" />.
            </summary>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleBuilder.Options">
      <summary>
            Gets the Options instance. Exposed for test purposes.
            </summary>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleBuilder.Configure``1(System.Action{``0})">
      <summary>
            Adds a configuration of the role.
            </summary>
      <typeparam name="TRoleOptions">The type of option to configure.</typeparam>
      <param name="configure">The method that will configure the options instance.</param>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleBuilder.Build(EPiServer.ServiceLocation.IServiceLocator)">
      <summary>
            Builds a new <see cref="T:EPiServer.Security.VirtualRoleProviderBase" /> instance.
            </summary>
      <param name="serviceLocator">The service locator used to create virtual role instances.</param>
      <returns>A new <see cref="T:EPiServer.Security.VirtualRoleProviderBase" /> instance.</returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleBuilder.Create``1(System.String)">
      <summary>
            Factory method for creating a new <see cref="T:EPiServer.Security.VirtualRoleBuilder" /> instance.
            </summary>
      <typeparam name="TRole">Type of the role instance. Must implement <see cref="T:EPiServer.Security.VirtualRoleProviderBase" />.</typeparam>
      <param name="name">The name of the <see cref="T:EPiServer.Security.VirtualRoleProviderBase" />.</param>
      <returns>A new <see cref="T:EPiServer.Security.VirtualRoleBuilder" /> instance.</returns>
    </member>
    <member name="T:EPiServer.Security.VirtualRoleOptions">
      <summary>
            Specifies how Virtual roles should be setup.
            </summary>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleOptions.Roles">
      <summary>
            List of all virtual roles that should be setup by the system.
            </summary>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleOptions.EPiServer#Security#Internal#IReplicationType#ReplicationType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Security.VirtualRoleOptions.AddRole``1(System.String)">
      <summary>
            Adds a <see cref="T:EPiServer.Security.VirtualRoleProviderBase" /> of the given type.
            </summary>
      <typeparam name="TRole">The type of <see cref="T:EPiServer.Security.VirtualRoleProviderBase" /> to add.</typeparam>
      <param name="name">The name of the role to add.</param>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleOptions.AddRole``2(System.String,System.Action{``1})">
      <summary>
            Adds a <see cref="T:EPiServer.Security.VirtualRoleProviderBase" /> of the given type
            using the provided method to configure the role options.
            </summary>
      <typeparam name="TRole">The type of <see cref="T:EPiServer.Security.VirtualRoleProviderBase" /> to add.</typeparam>
      <typeparam name="TRoleOptions">The type of the options class expected by the specific role type.</typeparam>
      <param name="name">The name of the role to add.</param>
      <param name="configure">Configuration method for setting up role options.</param>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleOptions.AddMappedRole(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Adds a mapping from one role to one or many other roles.
            </summary>
      <param name="name">The name of the role that should be mapped to the provided roles.</param>
      <param name="mappedRoles">All roles that should be mapped to the name.</param>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleOptions.AddMappedRole(System.String,System.String)">
      <summary>
            Adds a mapping from one role to one or many other roles.
            </summary>
      <param name="name">The name of the role that should be mapped to the provided roles.</param>
      <param name="mappedRole">A role that should be mapped to the name.</param>
    </member>
    <member name="T:EPiServer.Security.VirtualRolePrincipal">
      <summary>
            A wrapper class that adds Virtual Role functionality to a principal object.
            </summary>
    </member>
    <member name="M:EPiServer.Security.VirtualRolePrincipal.#ctor(System.Security.Principal.IPrincipal,EPiServer.Security.IVirtualRoleAuthorizationSession)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. This constructor supports the EPiServer infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="principal">The principal to be wrapped</param>
      <param name="authorization">The virtual role authorization</param>
      <internal-api />
      <exclude />
    </member>
    <member name="M:EPiServer.Security.VirtualRolePrincipal.CreateWrapper(System.Security.Principal.IPrincipal)">
      <summary>
            Creates the wrapper.
            </summary>
      <param name="principal">The principal.</param>
      <returns>An IPrincipal that supports virtual roles.</returns>
      <remarks>
            This method will check that the principal object passed as input parameter does not already
            support virtual roles. I e calling CreateWrapper multiple times will not add additional wrappers
            to the principal object.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.VirtualRolePrincipal.Unwrap(System.Security.Principal.IPrincipal)">
      <summary>
            Unwraps a wrapped principal
            </summary>
      <param name="principal">The principal.</param>
    </member>
    <member name="P:EPiServer.Security.VirtualRolePrincipal.FailSafeIsInRole">
      <summary>
            Gets or sets a value indicating whether IsInRole on VirtualRolePrincipal may throw an exception.
            </summary>
      <value>
        <c>true</c> if IsInRole is fail safe (cannot throw exception); otherwise, <c>false</c>.</value>
      <remarks>
            This setting can be useful to emulate the behavior of IsInRole as it worked in .NET Framework 1.0 / 1.1
            In these versions any exceptions thrown by code executing beneath IsInRole were caught and ignored. The IsInRole
            for a WindowsPrincipal in .NET 2.0 may throw an exception if a domain controller is unavailable - this may be
            undesired behavior since it could prevent the logon process, thus preventing any user from logging on. By setting
            this property to True you will cause any exceptions thrown by IsInRole to be caught and ignored. The IsInRole
            call will be interpreted as returning False on throw.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.VirtualRolePrincipal.Identity">
      <summary>
            Gets the identity of the current principal.
            </summary>
      <value>
      </value>
      <returns>The <see cref="T:System.Security.Principal.IIdentity"></see> object associated with the current principal.</returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRolePrincipal.IsInRole(System.String)">
      <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
      <param name="role">The name of the role for which to check membership.</param>
      <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRolePrincipal.IsInRole(System.String,EPiServer.Security.SecurityEntityType)">
      <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
      <param name="role">The name of the role for which to check membership.</param>
      <param name="type">Only check virtual roles of this security type</param>
      <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRolePrincipal.IsInRole(System.String,EPiServer.Security.SecurityEntityType,System.Object)">
      <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
      <param name="role">The name of the role for which to check membership.</param>
      <param name="type">Only check virtual roles of this security type</param>
      <param name="context">The context where the virtual role is queried (ie access control lists)</param>
      <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRolePrincipal.IsInVirtualRole(System.String,EPiServer.Security.SecurityEntityType)">
      <summary>
            Determines whether the current principal belongs to the specified virtual role.
            </summary>
      <param name="role">The name of the role for which to check membership.</param>
      <param name="type">The security type of the role you want to check</param>
      <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRolePrincipal.IsInVirtualRole(System.String,EPiServer.Security.SecurityEntityType,System.Object)">
      <summary>
            Determines whether the current principal belongs to the specified virtual role.
            </summary>
      <param name="role">The name of the role for which to check membership.</param>
      <param name="type">The security type of the role you want to check</param>
      <param name="context">The context where the virtual role is queried (ie access control lists)</param>
      <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
    </member>
    <member name="T:EPiServer.Security.VirtualRoleProviderBase">
      <summary>
            Base class required to implement virtual roles
            </summary>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleProviderBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.VirtualRoleProviderBase" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes the provider.
            </summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleProviderBase.Name">
      <summary>
            Gets or sets the name of the Virtual Role
            </summary>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleProviderBase.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
      <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
      <param name="principal">The principal.</param>
      <param name="context">External context.</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
      <remarks>
            The context parameter may be null but can be used to transfer external context to a Virtual role provider
            </remarks>
      <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleProviderBase.EnableIsInRoleCache">
      <summary>
            Determines if the response from IsInRole is allowed to cached per request (enabled by default)
            </summary>
      <remarks>The response from the first call to IsInRole will be cached per request or thread if no request is available</remarks>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleProviderBase.SupportsClaims">
      <summary>
            Determines if the response from IsInRole can be added as a Role claim
            </summary>
      <remarks>
        <para>Claims are only added when the 'addClaims' configuration setting has been enabled on the 'virtualRoles' element.</para>
      </remarks>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleProviderBase.SecurityEntityType">
      <summary>
            The security entity type is primarily used when checking role membership for page access rights
            </summary>
      <remarks>You should use SecurityEntityType.Role to be part of the normal role checking in ASP.NET</remarks>
    </member>
    <member name="T:EPiServer.Security.VirtualRoleReplicationEventArgs">
      <summary>
            Event arguments used when replicating changes in virtual roles
            </summary>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleReplicationEventArgs.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleReplicationEventArgs.RepositoryName">
      <summary>
            The source of the replication event (multiple respositories share the same events)
            </summary>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleReplicationEventArgs.Name">
      <summary>
            Name of the virtual role
            </summary>
    </member>
    <member name="P:EPiServer.Security.VirtualRoleReplicationEventArgs.TypeName">
      <summary>
            Full type name of the virtual role
            </summary>
    </member>
    <member name="T:EPiServer.Security.VirtualRoleRepository`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. A repository for keeping a set of role names and their implementation
            </summary>
      <remarks>
        <para>
            The purpose of this class is to act as a baseclass for implementations. Dependencies should not be taken to
            this class but instead to abstractions exposed by implementations, such as IVirtualRoleRepository or IVisitorGroupRoleRepository.
            </para>
        <para>
            All operations on this class is thread-safe.
            </para>
      </remarks>
      <internal-api />
      <exclude />
    </member>
    <member name="E:EPiServer.Security.VirtualRoleRepository`1.ClearedCache">
      <summary>
            Occurs when the instance has cleared it cached data
            </summary>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.#ctor(EPiServer.Security.IVirtualRoleReplication)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Security.VirtualRoleRepository`1" /> class.
            </summary>
      <param name="replication">Class that will handle replication of changes</param>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.Register(System.String,System.Type,System.Boolean)">
      <summary>
            Register a new virtual role and return the instance T.
            </summary>
      <param name="name">Name of the role</param>
      <param name="virtualRoleProviderType">The type of the implementation</param>
      <param name="replicateChanges">True if changes should be replicated to other instances or machines</param>
      <remarks>This method will overwrite any existing registered virtual roles with the same name</remarks>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.RegisterInstance(System.String,`0,System.Boolean)">
      <summary>
            Registers an instance of VirtualRoleProviderBase.
            </summary>
      <param name="name">The name.</param>
      <param name="instance">The instance.</param>
      <param name="replicateChanges">if set to <c>true</c> cahgnes are replicated.</param>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.Register(System.String,`0)">
      <summary>
            Register a new virtual role
            </summary>
      <param name="name">Name of the role</param>
      <param name="virtualRoleProvider">The implementation</param>
      <remarks>This method will overwrite any existing registered virtual roles with the same name.
            No events will be raised with this overload.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.BeforeRegister(`0)">
      <summary>
            Called before an instance is registered. 
            </summary>
      <remarks>
            The base implementation does nothing, subclasses can override this method if any 
            processing is needed before registration.
            </remarks>
      <param name="virtualRoleProvider">The virtual role provider.</param>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.AfterUnregister(`0)">
      <summary>
            Called after an instance has been unregistered.
            </summary>
      <remarks>
            The base implementation does nothing, subclasses can override this method if any 
            processing is needed after unregistration.
            </remarks>
      <param name="virtualRoleProvider">The virtual role provider.</param>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.Unregister(System.String,System.Boolean)">
      <summary>
            Unregister a virtual role
            </summary>
      <param name="name">The name of the role</param>
      <param name="replicateChanges">Replicate changes to all instences of this class</param>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.ClearCache(System.Boolean)">
      <summary>
            Clears the internal repository cache.
            </summary>
      <param name="broadcast">if set to <c>true</c> the clear request is broadcasted.</param>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.GetRoleNamesByType(System.Type)">
      <summary>
            Gets the virtual role names for a specified type.
            </summary>
      <param name="type">Type of the class.</param>
      <returns>The role names.</returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.GetAllRoles">
      <summary>
            Get a list of all registered virtual roles in this repository.
            </summary>
      <returns>A list of virtual role names.</returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.SearchRoles(System.String)">
      <summary>
            Find virtual roles registered in this repository
            </summary>
      <param name="query">Query to find roles from.</param>
      <returns>A list of roles that match the roleName</returns>
      <remarks>
            Matching of role names is simply a substring check - if the role contains the string passed in roleName
            anywhere in the string, it is considered a match.
            </remarks>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.TryGetRole(System.String,`0@)">
      <summary>
            Get a role based on name
            </summary>
      <param name="name">Name of the role</param>
      <param name="virtualRoleProvider">The virtual role provider registered for this name</param>
      <returns>True if the role was found</returns>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.Dispose">
      <summary>
            Implements IDisposable
            </summary>
    </member>
    <member name="M:EPiServer.Security.VirtualRoleRepository`1.Dispose(System.Boolean)">
      <summary>
            Implements IDisposable
            </summary>
    </member>
    <member name="T:EPiServer.Security.WindowsAdministratorsRole">
      <summary>
            Implementation of the Administrators virtual role.
            </summary>
      <remarks>
            This virtual role is a bit special, it is intended for Windows operating systems that have localized the
            name of the Administrators group. This virtual role will do a name-independent check for the Windows Administrators
            group. If the principal is not authenticated this role will always return <c>false</c>.
            </remarks>
    </member>
    <member name="P:EPiServer.Security.WindowsAdministratorsRole.Name">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.Security.WindowsAdministratorsRole.IsInVirtualRole(System.Security.Principal.IPrincipal,System.Object)">
      <summary>
            Determines whether the specified principal is a member of this role.
            </summary>
      <param name="principal">The principal.</param>
      <param name="context">The context.</param>
      <returns>
        <c>true</c> if the specified principal is in the virtual role; otherwise, <c>false</c>.
            </returns>
      <note>
            Any implementation of IsInVirtualRole must be fully thread-safe since only one instance of the class
            is created and any role checks are made against the same instance.
            </note>
    </member>
    <member name="P:EPiServer.Security.WindowsAdministratorsRole.RoleName">
      <summary>
            Gets or sets the default name of this virtual role.
            </summary>
      <remarks>
        <para>
            This value is set by the initialization engine to reflect the configuration of this role.
            </para>
        <para>
            This name may differ in different instances of this class, only use this name to get the default role name.
            </para>
      </remarks>
    </member>
    <member name="T:EPiServer.ServiceLocation.ActivationException">
      <summary>
            The standard exception thrown when a ServiceLocator has an error in resolving an object.
            </summary>
      <remarks>This derives from http://commonservicelocator.codeplex.com/.</remarks>
    </member>
    <member name="M:EPiServer.ServiceLocation.ActivationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ActivationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
      <param name="message">
            The message that describes the error. 
             </param>
    </member>
    <member name="M:EPiServer.ServiceLocation.ActivationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">
            The error message that explains the reason for the exception. 
            </param>
      <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
    </member>
    <member name="M:EPiServer.ServiceLocation.ActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. 
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null. 
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). 
            </exception>
    </member>
    <member name="T:EPiServer.ServiceLocation.AutoDiscovery.IServiceLocatorFactory">
      <summary>
            Signature that type specified by <see cref="T:EPiServer.ServiceLocation.AutoDiscovery.ServiceLocatorFactoryAttribute" /> should implement
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.AutoDiscovery.IServiceLocatorFactory.CreateProvider">
      <summary>
            Creates an instance of <see cref="T:EPiServer.ServiceLocation.IServiceConfigurationProvider" /></summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.AutoDiscovery.IServiceLocatorFactory.CreateLocator">
      <summary>
            Creates an instance of <see cref="T:EPiServer.ServiceLocation.IServiceLocator" /></summary>
      <remarks>The returned <see cref="T:EPiServer.ServiceLocation.IServiceLocator" /> must
            contain a singleton registration of itself (as <see cref="T:EPiServer.ServiceLocation.IServiceLocator" />)</remarks>
    </member>
    <member name="T:EPiServer.ServiceLocation.AutoDiscovery.ServiceLocatorFactoryAttribute">
      <summary>
            NOTE: This is a pre-release API that is UNSTABLE and might not satisfy the compatibility requirements as denoted by its associated normal version.
            Used to automatically detrmine a IOC container if no is explicitly registered with <see cref="T:EPiServer.Framework.Initialization.InitializationEngine" />.
            Attribute that defines a type of <see cref="T:EPiServer.ServiceLocation.AutoDiscovery.IServiceLocatorFactory" /> which is the abstraction of the IOC container.
            </summary>
      <remarks>
            In case several attributes is detected it will will use the type from the first <see cref="T:EPiServer.ServiceLocation.AutoDiscovery.ServiceLocatorFactoryAttribute" /> that is found.
            </remarks>
      <preliminary />
    </member>
    <member name="M:EPiServer.ServiceLocation.AutoDiscovery.ServiceLocatorFactoryAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ServiceLocation.AutoDiscovery.ServiceLocatorFactoryAttribute" /> class.
            </summary>
      <param name="serviceLocatorFactoryType">Type that should be created. Must implement <see cref="T:EPiServer.ServiceLocation.AutoDiscovery.IServiceLocatorFactory" />.</param>
      <exception cref="T:System.ArgumentNullException">serviceLocatorFactoryType</exception>
      <exception cref="T:System.ArgumentException">Type must implement IServiceLocatorFactory interface;serviceLocatorFactoryType</exception>
    </member>
    <member name="P:EPiServer.ServiceLocation.AutoDiscovery.ServiceLocatorFactoryAttribute.ServiceLocatorFactoryType">
      <summary>
            Gets the type of <see cref="T:EPiServer.ServiceLocation.AutoDiscovery.IServiceLocatorFactory" /> that should be used by <see cref="T:EPiServer.Framework.Initialization.InitializationEngine" /></summary>
    </member>
    <member name="T:EPiServer.ServiceLocation.BlobServiceConfigurationProviderExtensions">
      <summary>
            Provides extension methods for <see cref="T:EPiServer.ServiceLocation.IServiceConfigurationProvider" /> implemenations.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.BlobServiceConfigurationProviderExtensions.AddBlobProvider``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.String)">
      <summary>
            Adds a blob provider to the CMS blob system.
            </summary>
      <typeparam name="TProvider">The type of <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> to add.</typeparam>
      <param name="name">The name of the provider</param>
      <param name="services">The service configuration provider.</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.BlobServiceConfigurationProviderExtensions.AddBlobProvider``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.String,System.Boolean)">
      <summary>
            Adds a blob provider to the CMS blob system.
            </summary>
      <typeparam name="TProvider">The type of <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> to add.</typeparam>
      <param name="services">The service configuration provider.</param>
      <param name="name">The name of the provider</param>
      <param name="defaultProvider">If <c>true</c> the provider will be set as the default provider</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.BlobServiceConfigurationProviderExtensions.AddBlobProvider``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.String,System.Action{``1})">
      <summary>
            Adds a blob provider to the CMS blob system.
            </summary>
      <typeparam name="TProvider">The type of <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> to add.</typeparam>
      <typeparam name="TProviderOptions">The type of the options class used to configure the <see cref="T:EPiServer.Framework.Blobs.BlobProvider" />.</typeparam>
      <param name="services">The service configuration provider.</param>
      <param name="name">The name of the provider</param>
      <param name="configure">The method used to setup the provider options.</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.BlobServiceConfigurationProviderExtensions.AddBlobProvider``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.String,System.Boolean,System.Action{``1})">
      <summary>
            Adds a blob provider to the CMS blob system.
            </summary>
      <typeparam name="TProvider">The type of <see cref="T:EPiServer.Framework.Blobs.BlobProvider" /> to add.</typeparam>
      <typeparam name="TProviderOptions">The type of the options class used to configure the <see cref="T:EPiServer.Framework.Blobs.BlobProvider" />.</typeparam>
      <param name="services">The service configuration provider.</param>
      <param name="name">The name of the provider</param>
      <param name="defaultProvider">If <c>true</c> the provider will be set as the default provider</param>
      <param name="configure">The method used to setup the provider options.</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.BlobServiceConfigurationProviderExtensions.AddFileBlobProvider(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.String,System.String)">
      <summary>
            Adds a <see cref="T:EPiServer.Framework.Blobs.FileBlobProvider" /> to the CMS blob system configured using the provided path.
            </summary>
      <param name="services">The service configuration provider.</param>
      <param name="name">The name of the provider</param>
      <param name="path">The path that the provider should use.</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.Compatibility.ConfigurationBuilder">
      <summary>
            Used to define the service type that is configured
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfigurationBuilder.For``1">
      <summary>
            Specifies which service type to configure
            </summary>
      <typeparam name="T">The service type</typeparam>
      <returns>A configurable instance for the service</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfigurationBuilder.For(System.Type)">
      <summary>
            Specifies which service type to configure
            </summary>
      <param name="serviceType">The service type</param>
      <returns>A configurable instance for the service</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfigurationBuilder.Forward``2">
      <summary>
            Forwards an existing registration for service <typeparamref name="T1" /> to <typeparamref name="T2" /></summary>
      <typeparam name="T1">The existing service</typeparam>
      <typeparam name="T2">The added service</typeparam>
    </member>
    <member name="T:EPiServer.ServiceLocation.Compatibility.ConfiguredType">
      <summary>
            Represents a configured service
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType.LifecycleIs(EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Specifies which lifecyscle the service should have
            </summary>
      <param name="lifecycle">The lifecycle to set</param>
      <returns>The configured service</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType.Singleton">
      <summary>
            Specifies that the service should be singleton
            </summary>
      <returns>The configured service</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType.Add(System.Type)">
      <summary>
            Adds an implementation type for the service.
            </summary>
      <param name="type">The implementation type</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType.Use(System.Type)">
      <summary>
            Specifies an implementation type for the service.
            </summary>
      <param name="type">The implementation type</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType.Use(System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})">
      <summary>
            Specifies an implementation factory for the service.
            </summary>
      <param name="p">The implementation type factory</param>
    </member>
    <member name="T:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1">
      <summary>
            Represents a typed configured service
            </summary>
      <typeparam name="T">The service type</typeparam>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.LifecycleIs(EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Specifies which lifecyscle the service should have
            </summary>
      <param name="lifecycle">The lifecycle to set</param>
      <returns>The configured service</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Use``1(``0)">
      <summary>
            Registers a instance for the service type..
            </summary>
      <typeparam name="TInstance">The instance type</typeparam>
      <param name="instance">The instance</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Use``1(System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
      <summary>
            Registers a factory for the instance.
            </summary>
      <typeparam name="TInstance">The instance type</typeparam>
      <param name="instanceAccessor">The instance factory</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Use(System.Linq.Expressions.Expression{System.Func{`0}})">
      <summary>
            Registers a factory for the instance.
            </summary>
      <param name="instanceAccessor">The instance factory</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Use``1">
      <summary>
            Registers a concrete type for the service.
            </summary>
      <typeparam name="K">The implementation type</typeparam>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.AlwaysUnique">
      <summary>
            Specifies that the service should be transient
            </summary>
      <returns>The configured service</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Singleton">
      <summary>
            Specifies that the service should be singleton
            </summary>
      <returns>The configured service</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Transient">
      <summary>
            Specifies that the service should be transient
            </summary>
      <returns>The configured service</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.HybridHttpOrThreadLocalScoped">
      <summary>
            Specifies that the service should have hybrid (http context or thread local) lifecycle
            </summary>
      <returns>The configured service</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.Compatibility.ConfiguredType`1.Add``1">
      <summary>
            Adds a implementation type for the service type
            </summary>
      <typeparam name="T1">The implementation type</typeparam>
    </member>
    <member name="T:EPiServer.ServiceLocation.IConfigurableModule">
      <summary>
            Interface you can implement as part of the EPiServer Framework initialization chain.
            ConfigureContainer is called on all <see cref="T:EPiServer.Framework.IInitializableModule" /> before
            initialization begins. This allows modification of the container before service
            instances are created during initialization.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.IConfigurableModule.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
      <summary>
            Configure the IoC container before initialization.
            </summary>
      <param name="context">The context on which the container can be accessed.</param>
    </member>
    <member name="T:EPiServer.ServiceLocation.Injected`1">
      <summary>
            Marks a property for property injection by the IoC container. When a 
            class uses properties of this type is constructed via the IoC container 
            or BuildUp is called properties of this type are injected by the system.
            For objects constructed maually via new the service is located using
            the global service locator object.
            </summary>
      <typeparam name="T">The type of service to inject.</typeparam>
    </member>
    <member name="M:EPiServer.ServiceLocation.Injected`1.#ctor(EPiServer.ServiceLocation.ServiceAccessor{`0})">
      <summary>
            Initializes an instance with a specific service accessor.
            </summary>
      <param name="accessor">The accessor delegate to use for retrieving the service.</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.Injected`1.#ctor(`0)">
      <summary>
            Initializes an instance with a specific service accessor.
            </summary>
      <param name="service">The service instance to use.</param>
    </member>
    <member name="P:EPiServer.ServiceLocation.Injected`1.Accessor">
      <summary>
            Gets or sets an accessor delegate that can be used to retrieve the service that should be injected.
            </summary>
      <remarks>
        <para>
                Setting this property will also affect the Service property.
            </para>
      </remarks>
    </member>
    <member name="P:EPiServer.ServiceLocation.Injected`1.Service">
      <summary>
            Gets or sets the service instance that should be injected. 
            </summary>
      <remarks>
        <para>
                Setting this property will also affect the Accessor property.
            </para>
        <para>
                If not set this property is lazily resolved when first used.
            </para>
      </remarks>
    </member>
    <member name="M:EPiServer.ServiceLocation.Injected`1.op_Implicit(`0)~EPiServer.ServiceLocation.Injected{`0}">
      <summary>
            Simplifies assignment to an injected service.
            </summary>
      <param name="service">The service to assign.</param>
      <returns>An injected object with the service assigned.</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.InjectedCollection`1">
      <summary>
            Marks a property for property injection by the IoC container. When a 
            class uses properties of this type is constructed via the IoC container 
            or BuildUp is called properties of this type are injected by the system.
            For objects constructed maually via new the services are located using
            the global service locator object.
            </summary>
      <typeparam name="T">The type of service to inject all instances of.</typeparam>
    </member>
    <member name="M:EPiServer.ServiceLocation.InjectedCollection`1.#ctor(EPiServer.ServiceLocation.ServiceCollectionAccessor{`0})">
      <summary>
            Initializes an instance with a specific service accessor.
            </summary>
      <param name="accessor">The accessor delegate to use for retrieving the services.</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.InjectedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes an instance with a specific service accessor.
            </summary>
      <param name="services">The services to use.</param>
    </member>
    <member name="P:EPiServer.ServiceLocation.InjectedCollection`1.Services">
      <summary>
            The injected services. This property is lazily resolved when first used.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.InjectedCollection`1.op_Implicit(System.Collections.Generic.List{`0})~EPiServer.ServiceLocation.InjectedCollection{`0}">
      <summary>
            Simplifies assignment to injected services.
            </summary>
      <param name="services">The services to assign.</param>
      <returns>An injected collection with the service assigned.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.InjectedCollection`1.op_Implicit(`0[])~EPiServer.ServiceLocation.InjectedCollection{`0}">
      <summary>
            Simplifies assignment to injected services.
            </summary>
      <param name="services">The services to assign.</param>
      <returns>An injected collection with the services assigned.</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.Internal.HybridHttpOrThreadLocal`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class to store variables that should be cached either on HTTP context or on thread local storage
            </summary>
      <typeparam name="T">
      </typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.ServiceLocation.Internal.HybridHttpOrThreadLocal`1.#ctor(System.Guid,System.Func{`0},EPiServer.Framework.Cache.IRequestCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Creates new instance of <see cref="T:EPiServer.ServiceLocation.Internal.HybridHttpOrThreadLocal`1" /></summary>
      <param name="uniqueId">The unique id for this instance</param>
      <param name="valueFactory">The factory to get not cached value</param>
      <param name="requestCache">The request cache to use</param>
      <exclude />
    </member>
    <member name="P:EPiServer.ServiceLocation.Internal.HybridHttpOrThreadLocal`1.UniqueId">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The unique id for this instance
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ServiceLocation.Internal.HybridHttpOrThreadLocal`1.Value">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Accessor to get value from cache or factory (if not cached)
            </summary>
      <exclude />
    </member>
    <member name="M:EPiServer.ServiceLocation.Internal.HybridHttpOrThreadLocal`1.Dispose">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.ServiceLocation.Internal.HybridHttpOrThreadLocal`1.Dispose(System.Boolean)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Dispose implementation
            </summary>
      <param name="disposing">indicate if disposing</param>
      <exclude />
    </member>
    <member name="T:EPiServer.ServiceLocation.Internal.IInterceptorRegister">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.ServiceLocation.Internal.ReflectiveServiceConfigurationHelper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.ServiceLocation.Internal.ReflectiveServiceConfigurationHelper.ServiceAccessorFactory`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Wraps the usage of the IoC container to resolve a type.
            </summary>
      <typeparam name="TService">
      </typeparam>
      <exclude />
    </member>
    <member name="T:EPiServer.ServiceLocation.Internal.RequestOrFactory`1">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Helper class to store variables that should be cached on HTTP context.
            </summary>
      <typeparam name="T">
      </typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.ServiceLocation.Internal.RequestOrFactory`1.#ctor(System.Guid,System.Func{`0},EPiServer.Framework.Cache.IRequestCache)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Constructs an instance of <see cref="T:EPiServer.ServiceLocation.Internal.RequestOrFactory`1" /></summary>
      <param name="uniqueId">The unique id for this instance</param>
      <param name="valueFactory">The factory to get not cached value</param>
      <param name="requestCache">The request cache to use</param>
      <exclude />
    </member>
    <member name="P:EPiServer.ServiceLocation.Internal.RequestOrFactory`1.UniqueId">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The unique id for this instance
            </summary>
      <exclude />
    </member>
    <member name="P:EPiServer.ServiceLocation.Internal.RequestOrFactory`1.Value">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Accessor to get value from cache or factory (if not cached)
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.ServiceLocation.IRegisteredService">
      <summary>
            Extends <see cref="T:EPiServer.ServiceLocation.IServiceConfigurationProvider" /> with possibility to extend latest registration.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.IRegisteredService.AddServiceAccessor">
      <summary>
            Registers a <see cref="T:EPiServer.ServiceLocation.ServiceAccessor`1" /> for the service type.
            </summary>
      <returns>The service configuration provider</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.IServiceConfiguration">
      <summary>
            When implemented by an attribute, this interface controls how the decorated class 
            is registered in the inversion of control container.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.IServiceConfiguration.ServiceType">
      <summary>
            Gets the type of service the decorated class represents. If null the class is registered with it's own type as service type.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.IServiceConfiguration.Lifecycle">
      <summary>
            Gets the scope of instances of the attributed class, i.e. when to reuse instances of the same service.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.IServiceConfiguration.FactoryMember">
      <summary>
            Gets the name of a static property on the attributed class from which the service instance is retrieved.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.IServiceConfiguration.FactoryType">
      <summary>
            Gets the name of a type that is responsible for creating instances of the attributed service.
            </summary>
    </member>
    <member name="T:EPiServer.ServiceLocation.IServiceConfigurationProvider">
      <summary>
            Use to configure implementations for the services that are used by the application.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.IServiceConfigurationProvider.RemoveAll(System.Type)">
      <summary>
            Removes all previously registered entries for the service.
            </summary>
      <param name="serviceType">The service type to register an implemenation for</param>
      <returns>The used service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.IServiceConfigurationProvider.Contains(System.Type)">
      <summary>
            Checks if a service type has any implementations registered.
            </summary>
      <param name="serviceType">The service type to check for implemenation existance</param>
      <returns>The used service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.IServiceConfigurationProvider.Add(System.Type,System.Type,EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Registers an implementation type for a service type.
            </summary>
      <param name="serviceType">The service type to register an implemenation for</param>
      <param name="implementationType">The implementation type for the service</param>
      <param name="lifetime">Specifies which lifecycle the implementation should have</param>
      <returns>The used service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.IServiceConfigurationProvider.Add(System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object},EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Registers an implementation factory for a service type.
            </summary>
      <param name="serviceType">The service type to register an implemenation for</param>
      <param name="implementationFactory">The factory method used to create service instances</param>
      <param name="lifetime">Specifies which lifecycle the implementation should have</param>
      <returns>The used service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.IServiceConfigurationProvider.Add(System.Type,System.Object)">
      <summary>
            Registers an implementation instance for a service type.
            </summary>
      <param name="serviceType">The service type to register an implemenation for</param>
      <param name="instance">The singleton instance of the service tyep</param>
      <returns>The used service configuration provider</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.IServiceLocator">
      <summary>
            The generic Service Locator interface. This interface is used
            to retrieve services (instances identified by type and optional
            name) from a container.
            </summary>
      <remarks>This derives from http://commonservicelocator.codeplex.com/.</remarks>
    </member>
    <member name="M:EPiServer.ServiceLocation.IServiceLocator.GetInstance(System.Type)">
      <summary>
            Get an instance of the given <paramref name="serviceType" />.
            </summary>
      <param name="serviceType">Type of object requested.</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
      <returns>The requested service instance.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.IServiceLocator.GetInstance``1">
      <summary>
            Get an instance of the given <typeparamref name="TService" />.
            </summary>
      <typeparam name="TService">Type of object requested.</typeparam>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
      <returns>The requested service instance.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.IServiceLocator.TryGetExistingInstance(System.Type,System.Object@)">
      <summary>
            Tries to get an existing instance of the given <paramref name="serviceType" />.
            </summary>
      <param name="serviceType">Type of object requested.</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            <param name="instance">The requested service instance or null if it do not exist</param>
            the service instance.</exception>
      <returns>True if the instance was found</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.IServiceLocator.GetAllInstances(System.Type)">
      <summary>
            Get all instances of the given <paramref name="serviceType" /> currently
            registered in the container.
            </summary>
      <param name="serviceType">Type of object requested.</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
      <returns>A sequence of instances of the requested <paramref name="serviceType" />.</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.LocalizationServiceConfigurationProviderExtensions">
      <summary>
            Provides extension methods for <see cref="T:EPiServer.ServiceLocation.IServiceConfigurationProvider" /> implemenations.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.LocalizationServiceConfigurationProviderExtensions.AddLocalizationProvider``1(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Adds a localization provider to the CMS localization system.
            </summary>
      <typeparam name="TProvider">The type of <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> to add.</typeparam>
      <param name="services">The service configuration provider.</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.LocalizationServiceConfigurationProviderExtensions.AddLocalizationProvider``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Action{``1})">
      <summary>
            Adds a localization provider to the cms localization system.
            </summary>
      <typeparam name="TProvider">The type of <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" /> to add.</typeparam>
      <typeparam name="TProviderOptions">The type of the options class used to configure the <see cref="T:EPiServer.Framework.Localization.LocalizationProvider" />.</typeparam>
      <param name="services">The service configuration provider.</param>
      <param name="configure">The method used to setup the provider options.</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.LocalizationServiceConfigurationProviderExtensions.AddEmbeddedLocalization``1(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Adds embedded localizations from the given <see cref="T:System.Reflection.Assembly" /> to the <see cref="T:EPiServer.Framework.Localization.LocalizationService" />.
            </summary>
      <typeparam name="TAssembly">A type in the <see cref="T:System.Reflection.Assembly" /> which contains embedded localization to be added.</typeparam>
      <param name="services">The service configuration provider.</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.OptionsAttribute">
      <summary>
            Attribute used to declaratively define that a class should be registered in IOC container as an option
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.OptionsAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.ServiceLocation.OptionsAttribute" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.OptionsAttribute.Lifecycle">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceAccessor`1">
      <summary>
            Represents a method used to resolve a service at runtime. During initializing a typed accessor is registered for each service configured using <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationAttribute" />.
            </summary>
      <typeparam name="TService">The type of service to access.</typeparam>
      <returns>An instance of the service resolved at runtime.</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceCollectionAccessor`1">
      <summary>
            Represents a method used to resolve all services at runtime. During initializing a typed accessor is registered for each service configured using <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationAttribute" />.
            </summary>
      <typeparam name="TService">The type of service to access.</typeparam>
      <returns>An instance of the service resolved at runtime.</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceConfigurationAttribute">
      <summary>
            Marks a type that is automatically registered as a service by the EPiServer initialization system.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationAttribute.#ctor">
      <summary>
            Service instance using the attributed type as service type.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationAttribute.#ctor(System.Type)">
      <summary>
            Service instance using the given parameter as service type.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceConfigurationAttribute.ServiceType">
      <summary>
            Gets or sets the type of service the attributed class represents.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceConfigurationAttribute.Lifecycle">
      <summary>
            Gets or sets the scope of instances of the attributed class, i.e. when to reuse instances of the same service.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceConfigurationAttribute.FactoryMember">
      <summary>
            Gets or sets the name of a static property or method on the attributed class from which the service instance is retrieved.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceConfigurationAttribute.FactoryType">
      <summary>
            Gets the name of a type that is responsible for creating instances of the attributed service.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceConfigurationAttribute.IncludeServiceAccessor">
      <summary>
            Indicates if a <see cref="T:EPiServer.ServiceLocation.ServiceAccessor`1" /> should be registered for the type as well.
            </summary>
      <remarks>Default value is true</remarks>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceConfigurationContext">
      <summary>
            This class is used by the <see cref="T:EPiServer.ServiceLocation.IConfigurableModule" /> to expose the
            IoC container for configuration.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationContext.#ctor(EPiServer.Framework.Initialization.HostType,EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Creates an instance of the <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationContext" /> class.
            </summary>
      <param name="hostType">Type of the host.</param>
      <param name="services">The IoC container to expose.</param>
    </member>
    <member name="E:EPiServer.ServiceLocation.ServiceConfigurationContext.ConfigurationComplete">
      <summary>
            ConfigurationComplete is raised when all <see cref="M:EPiServer.ServiceLocation.IConfigurableModule.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)" /> has been called.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceConfigurationContext.Services">
      <summary>
            Provider for the registered inversion of control container. Use this property to configure services into the container.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceConfigurationContext.HostType">
      <summary>
            Gets the type of the host.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceConfigurationContext.Container">
      <summary>
            Previous access to StructureMap now replaced with extension method StructureMap()
            </summary>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceConfigurationEventArgs">
      <summary>
            Event argument used in event <see cref="E:EPiServer.ServiceLocation.ServiceConfigurationContext.ConfigurationComplete" />.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationEventArgs.#ctor(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Creates a new instance of <see cref="T:EPiServer.ServiceLocation.ServiceConfigurationEventArgs" />.
            </summary>
      <param name="services">The services that is being configured.</param>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceConfigurationEventArgs.Services">
      <summary>
            Provider for the registered inversion of control container. Use this property to configure services into the container.
            </summary>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions">
      <summary>
            Provides extension methods for <see cref="T:EPiServer.ServiceLocation.IServiceConfigurationProvider" /> implemenations.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.Add(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Type,EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Registers a transient lifecycled implementation for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="serviceType">The service type</param>
      <param name="implementationType">The implementation type</param>
      <param name="serviceInstanceScope"> The scope of service instances</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.Add``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Registers a singleton lifecycled type for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="serviceInstanceScope">The service instance scope </param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Type)">
      <summary>
            Registers a transient lifecycled implementation for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="serviceType">The service type</param>
      <param name="implementationType">The implementation type</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Registers a transient lifecycled implementation for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type)">
      <summary>
            Registers a transient lifecycled type as a concrete service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="serviceType">The service type</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient``1(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Registers a transient lifecycled type as a concrete service
            </summary>
      <param name="services">The service provider that is extended</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Type)">
      <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled instance as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationType">The implementation type</param>
      <param name="serviceType">The service type</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Type)">
      <summary>
            Registers a singleton lifecycled type for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="serviceType">The service type</param>
      <param name="implementationType">The implementation type</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.Add(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object},EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Registers implementation factory for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="serviceType">The service type</param>
      <param name="implementationFactory">The implementation factory</param>
      <param name="serviceInstanceScope">The service instance scope</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})">
      <summary>
            Registers a transient lifecycled implementation factory for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="serviceType">The service type</param>
      <param name="implementationFactory">The implementation factory</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.Add``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0},EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Registers lifecycled implementation factory for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The implementation factory</param>
      <param name="serviceInstanceScope">The service instance scope</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
      <summary>
            Registers a transient lifecycled factory for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The factory method to create instances</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddTransient``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})">
      <summary>
            Registers a transient lifecycled factory for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The factory method to create instances</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})">
      <summary>
            Registers a singleton lifecycled factory for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="serviceType">The service type</param>
      <param name="implementationFactory">The implementation factory</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Registers a singleton lifecycled type for a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type)">
      <summary>
            Registers a singleton lifecycled concrete type as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="serviceType">The service type</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton``1(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Registers a singleton lifecycled concrete type as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
      <summary>
            Registers a singleton lifecycled factory as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The factory used to create the singleton instance</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})">
      <summary>
            Registers a singleton lifecycled factory as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The factory used to create the singleton instance</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Object)">
      <summary>
            Registers a singleton lifecycled instance as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationInstance">The singleton instance</param>
      <param name="serviceType">The service type</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddSingleton``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,``0)">
      <summary>
            Registers a singleton lifecycled instance as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationInstance">The singleton instance</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})">
      <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled instance factory as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The implementation factory</param>
      <param name="serviceType">The service type</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled instance as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Type)">
      <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled concrete type as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="serviceType">The service type</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped``1(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled concrete type as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
      <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled factory as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The instance factory</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddScoped``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})">
      <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled factory as a service
            </summary>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The instance factory</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.Add(EPiServer.ServiceLocation.IServiceConfigurationProvider,EPiServer.ServiceLocation.ServiceDescriptor)">
      <summary>
            Registers a service as described by <see cref="T:EPiServer.ServiceLocation.ServiceDescriptor" /></summary>
      <param name="services">The service provider that is extended</param>
      <param name="descriptor">The service descriptor</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.TryAdd``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Registers a concrete service if not already registered.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <param name="services">The service provider that is extended</param>
      <param name="serviceInstanceScope">The service scope</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.TryAdd``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0},EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Registers the service if not already registered.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The implementation factory</param>
      <param name="serviceInstanceScope">The service scope</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.TryAdd``2(EPiServer.ServiceLocation.IServiceConfigurationProvider,EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Registers the service if not already registered.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <typeparam name="TImplementation">The implementation type</typeparam>
      <param name="services">The service provider that is extended</param>
      <param name="serviceInstanceScope">The service instance scope</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.TryAdd``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
      <summary>
            Registers the service if not already registered.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The implementation factory</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.Intercept``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0,``0})">
      <summary>
            Used to intercept a registered service. Will replace all registered services in container. The interceptor factory will have
            access to the previous registered service.
            </summary>
      <typeparam name="TService">The existing service that is intercepted</typeparam>
      <param name="services">The service provider that is extended</param>
      <param name="interceptorFactory">The factory that will be called to create the interceptor. The factory have access to the previous registered service.</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.Configure``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Action{``0})">
      <summary>
            Used to configure a registered service before it's returned. Will be applied to all registered services in container of the provided type.
            </summary>
      <typeparam name="TService">The existing service that is configured</typeparam>
      <param name="services">The service provider that is extended</param>
      <param name="configure">The method used to configure the service.</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.Forward``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Register <typeparamref name="T2" /> as a service where actual instance is delegated to <typeparamref name="T1" /></summary>
      <typeparam name="T1">An existing service</typeparam>
      <typeparam name="T2">An additional service</typeparam>
      <param name="services">The service provider that is extended</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.RemoveAll``1(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Removes all previous registrations for the service.
            </summary>
      <typeparam name="TService">The service to remove configurations for</typeparam>
      <param name="services">The service provider that is extended</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddHttpContextOrThreadScoped``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
      <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled factory for a service.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The factory</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddHttpContextOrThreadScoped``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Registers a hybrid (httpcontext or thread local) lifecycled implementation type for a service
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <typeparam name="TImpl">The implementation type</typeparam>
      <param name="services">The service provider that is extended</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddHttpContextScoped``2(EPiServer.ServiceLocation.IServiceConfigurationProvider)">
      <summary>
            Registers a http context lifecycled implementation type for a service
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <typeparam name="TImpl">The implementation type</typeparam>
      <param name="services">The service provider that is extended</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceConfigurationProviderExtensions.AddHttpContextScoped``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
      <summary>
            Registers a http context lifecycled factory for a service
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <param name="services">The service provider that is extended</param>
      <param name="implementationFactory">The implementation factory</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceContainerInitialization">
      <summary>
            Initializes the IoC container. To use <see cref="T:EPiServer.ServiceLocation.ServiceLocator" /> in an initializable module 
            add <see cref="T:EPiServer.Framework.ModuleDependencyAttribute" /> from your initializable module to <see cref="T:EPiServer.ServiceLocation.ServiceContainerInitialization" />.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceContainerInitialization.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceContainerInitialization.#ctor(EPiServer.Framework.TypeScanner.ITypeScannerLookup)">
      <summary>
            Additional constuctor that can be used from tests.
            </summary>
      <remarks>
            When using this constructor the static instance <see cref="P:EPiServer.ServiceLocation.ServiceLocator.Current" /> will not be assigned.
            </remarks>
      <param name="repo">
      </param>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceContainerInitialization.ConfigureContainer(EPiServer.ServiceLocation.ServiceConfigurationContext)">
      <summary>
            Configures the container with default services.
            </summary>
      <param name="context">The context to configure.</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceContainerInitialization.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inheritdoc />
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceContainerInitialization.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <inheritdoc />
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceContainerInitialization.ServiceConfigurationScanner">
      <summary>
            Scans for the presence of attributes implementing <see cref="T:EPiServer.ServiceLocation.IServiceConfiguration" />.
            </summary>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceDescriptor">
      <summary>
            Describes a registration of a concrete implementation for an service/abstraction.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.#ctor(System.Type,System.Type,EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Initializes a new instance of <see cref="T:EPiServer.ServiceLocation.ServiceDescriptor" /> with the specified <paramref name="implementationType" />.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.#ctor(System.Type,System.Object)">
      <summary>
            Initializes a new instance of <see cref="T:EPiServer.ServiceLocation.ServiceDescriptor" /> with the specified <paramref name="instance" />
            as a <see cref="F:EPiServer.ServiceLocation.ServiceInstanceScope.Singleton" />.
            </summary>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service.</param>
      <param name="instance">The instance implementing the service.</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.#ctor(System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object},EPiServer.ServiceLocation.ServiceInstanceScope)">
      <summary>
            Initializes a new instance of <see cref="T:EPiServer.ServiceLocation.ServiceDescriptor" /> with the specified <paramref name="factory" />.
            </summary>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service.</param>
      <param name="factory">A factory used for creating service instances.</param>
      <param name="lifetime">The <see cref="T:EPiServer.ServiceLocation.ServiceInstanceScope" /> of the service.</param>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceDescriptor.Lifetime">
      <summary>
            The lifecycle that the created instances should have
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceDescriptor.ServiceType">
      <summary>
            The service type
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceDescriptor.ImplementationType">
      <summary>
            The implementation type
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceDescriptor.ImplementationInstance">
      <summary>
            The implementation instance
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceDescriptor.IncludeServiceAccessor">
      <summary>
            Specifies if a <see cref="T:EPiServer.ServiceLocation.ServiceAccessor`1" /> should be added for the service.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.AddServiceAccessor">
      <summary>
            Adds a <see cref="T:EPiServer.ServiceLocation.ServiceAccessor`1" /> instance for the service.
            </summary>
      <returns>The service descriptor instance</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Transient``2">
      <summary>
            Creates a transient lifecycled service descriptor.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <typeparam name="TImplementation">The implementation type</typeparam>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Transient(System.Type,System.Type)">
      <summary>
            Creates a transient lifecycled service descriptor.
            </summary>
      <param name="service">The service type</param>
      <param name="implementationType">The implementation type</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Transient``2(System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})">
      <summary>
            Creates a transient lifecycled service descriptor.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <typeparam name="TImplementation">The implementation type</typeparam>
      <param name="implementationFactory">The factory to use</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Transient``1(System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
      <summary>
            Creates a transient lifecycled service descriptor for a service type.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <param name="implementationFactory">The factory</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Transient(System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})">
      <summary>
            Creates a transient lifecycled service descriptor for a service type.
            </summary>
      <param name="service">The service type</param>
      <param name="implementationFactory">The factory</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Scoped``2">
      <summary>
            Creates a hybrid (httpcontext or thread local) lifecycled service descriptor for a service type.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <typeparam name="TImplementation">The implementation type</typeparam>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Scoped(System.Type,System.Type)">
      <summary>
            Creates a hybrid (httpcontext or thread local) lifecycled service descriptor for a service type.
            </summary>
      <param name="service">The service type</param>
      <param name="implementationType">The implementation type</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Scoped``2(System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})">
      <summary>
            Creates a hybrid (httpcontext or thread local) lifecycled service descriptor for a service type.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <typeparam name="TImplementation">The implementation type</typeparam>
      <param name="implementationFactory">The factory to use</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Scoped``1(System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
      <summary>
            Creates a hybrid (httpcontext or thread local) lifecycled service descriptor for a service type.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <param name="implementationFactory">The factory to use</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Scoped(System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})">
      <summary>
            Creates a hybrid (httpcontext or thread local) lifecycled service descriptor for a service type.
            </summary>
      <param name="service">The service type</param>
      <param name="implementationFactory">The factory to use</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Singleton``2">
      <summary>
            Creates a singleton lifecycled service descriptor for a service type.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <typeparam name="TImplementation">The factory to use</typeparam>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Singleton(System.Type,System.Type)">
      <summary>
            Creates a singleton lifecycled service descriptor for a service type.
            </summary>
      <param name="service">The service type</param>
      <param name="implementationType">The factory to use</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Singleton``2(System.Func{EPiServer.ServiceLocation.IServiceLocator,``1})">
      <summary>
            Creates a singleton lifecycled service descriptor for a service type.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <typeparam name="TImplementation">The factory to use</typeparam>
      <param name="implementationFactory">The factory</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Singleton``1(System.Func{EPiServer.ServiceLocation.IServiceLocator,``0})">
      <summary>
            Creates a singleton lifecycled service descriptor for a service type.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <param name="implementationFactory">The factory</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Singleton(System.Type,System.Func{EPiServer.ServiceLocation.IServiceLocator,System.Object})">
      <summary>
            Creates a singleton lifecycled service descriptor for a service type.
            </summary>
      <param name="serviceType">The service type</param>
      <param name="implementationFactory">The factory</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Instance``1(``0)">
      <summary>
            Creates a singleton lifecycled service descriptor for a service instance.
            </summary>
      <typeparam name="TService">The service type</typeparam>
      <param name="implementationInstance">The singleton instance</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceDescriptor.Instance(System.Type,System.Object)">
      <summary>
            Creates a singleton lifecycled service descriptor for a service instance.
            </summary>
      <param name="serviceType">The service type</param>
      <param name="implementationInstance">The singleton instance</param>
      <returns>A service descriptor</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceInstanceScope">
      <summary>
            Scope of service instances.
            </summary>
    </member>
    <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.PerRequest">
      <summary>
            New instance per request.
            </summary>
    </member>
    <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.Singleton">
      <summary>
            One instance per container.
            </summary>
    </member>
    <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.ThreadLocal">
      <summary>
            One instance per thread.
            </summary>
    </member>
    <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.HttpContext">
      <summary>
            New instance per request.
            </summary>
    </member>
    <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.Hybrid">
      <summary>
            New instance per thread or request.
            </summary>
    </member>
    <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.HttpSession">
      <summary>
            New instance per http session.
            </summary>
    </member>
    <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.HybridHttpSession">
      <summary>
            Hybrid instance per session.
            </summary>
    </member>
    <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.Unique">
      <summary>
            New instance per usage
            </summary>
    </member>
    <member name="F:EPiServer.ServiceLocation.ServiceInstanceScope.Transient">
      <summary>
            New instance per usage
            </summary>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceLocationHelper">
      <summary>
            A class that helps resolving services part of the public API. Module namespaces registers
            extensions to this class to indicate that a service is part of the public API. Using
            one of these namespaces reveals the API. Instances of this class are available from
            key base classes and APIs.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceLocationHelper.Advanced">
      <summary>
            The service locator used for resolving services.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocationHelper.#ctor(EPiServer.ServiceLocation.IServiceLocator)">
      <summary>
            Creates a new instance of the <see cref="T:EPiServer.ServiceLocation.ServiceLocationHelper" />.
            </summary>
      <param name="locator">The service locator to use for resolving services.</param>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceLocator">
      <summary>
            This class provides the ambient container for this application. If your
            framework defines such an ambient container, use ServiceLocator.Current
            to get it.
            </summary>
      <remarks>This derives from http://commonservicelocator.codeplex.com/.</remarks>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServiceLocator.Current">
      <summary>
            The current ambient container.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocator.SetLocator(EPiServer.ServiceLocation.IServiceLocator)">
      <summary>
            Sets the service locator provider to a service locator provider using the given service locator.
            </summary>
      <param name="serviceLocator">The container to use for the global service locator instance.</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocator.SetLocatorProvider(EPiServer.ServiceLocation.ServiceLocatorProvider)">
      <summary>
            Set the delegate that is used to retrieve the current container.
            </summary>
      <param name="newProvider">Delegate that, when called, will return
            the current ambient container.</param>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocator.AssignNullService``1(EPiServer.ServiceLocation.IServiceLocator,``0@)">
      <summary>
            Assigns a service reference using the service locator if not already assigned. 
            This method is used internally by EPiServer to simplify optional service parameters.
            </summary>
      <typeparam name="TService">The type of service to retrieve.</typeparam>
      <param name="locator">The service locator instance to use.</param>
      <param name="potentiallyEmptyServiceReference">The object referenced that is checked for null before beeing assigned.</param>
      <returns>True if a service was assigned, otherwise null.</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceLocatorExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.ServiceLocation.IServiceLocator" /></summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorExtensions.TryGetExistingInstance``1(EPiServer.ServiceLocation.IServiceLocator,``0@)">
      <summary>
            Tries to get an existing instance of the given <typeparamref name="TService" />.
            </summary>
      <typeparam name="TService">Type of object requested.</typeparam>
      <param name="serviceLocator">The locator that is being extended</param>
      <param name="instance">The requested service instance or null if it do not exist</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
      <returns>True if the instance was found</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorExtensions.GetAllInstances``1(EPiServer.ServiceLocation.IServiceLocator)">
      <summary>
            Get all instances of the given <typeparamref name="TService" /> currently
            registered in the container.
            </summary>
      <typeparam name="TService">Type of object requested.</typeparam>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
      <returns>A sequence of instances of the requested <typeparamref name="TService" />.</returns>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceLocatorImplBase">
      <summary>
            This class is a helper that provides a default implementation
            for most of the methods of <see cref="T:EPiServer.ServiceLocation.IServiceLocator" />.
            </summary>
      <remarks>This derives from http://commonservicelocator.codeplex.com/.</remarks>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetService(System.Type)">
      <summary>
            Implementation of <see cref="M:System.IServiceProvider.GetService(System.Type)" />.
            </summary>
      <param name="serviceType">The requested service.</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error in resolving the service instance.</exception>
      <returns>The requested object.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetInstance(System.Type)">
      <summary>
            Get an instance of the given <paramref name="serviceType" />.
            </summary>
      <param name="serviceType">Type of object requested.</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
      <returns>The requested service instance.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetInstance(System.Type,System.String)">
      <summary>
            Get an instance of the given named <paramref name="serviceType" />.
            </summary>
      <param name="serviceType">Type of object requested.</param>
      <param name="key">Name the object was registered with.</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
      <returns>The requested service instance.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.TryGetExistingInstance(System.Type,System.Object@)">
      <summary>
            Tries to get an existing instance of the given <paramref name="serviceType" />.
            </summary>
      <param name="serviceType">Type of object requested.</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            <param name="instance">The requested service instance or null if it do not exist</param>
            the service instance.</exception>
      <returns>True if the instance was found</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.TryGetExistingInstance(System.Type,System.String,System.Object@)">
      <summary>
            Tries to get an existing instance of the given named <paramref name="serviceType" />.
            </summary>
      <param name="serviceType">Type of object requested.</param>
      <param name="key">Name the object was registered with.</param>
      <param name="instance">The requested service instance or null if it do not exist</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
      <returns>True if the instance was found</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetAllInstances(System.Type)">
      <summary>
            Get all instances of the given <paramref name="serviceType" /> currently
            registered in the container.
            </summary>
      <param name="serviceType">Type of object requested.</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
      <returns>A sequence of instances of the requested <paramref name="serviceType" />.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetInstance``1">
      <summary>
            Get an instance of the given <typeparamref name="TService" />.
            </summary>
      <typeparam name="TService">Type of object requested.</typeparam>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
      <returns>The requested service instance.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetInstance``1(System.String)">
      <summary>
            Get an instance of the given named <typeparamref name="TService" />.
            </summary>
      <typeparam name="TService">Type of object requested.</typeparam>
      <param name="key">Name the object was registered with.</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
      <returns>The requested service instance.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.TryGetExistingInstance``1(``0@)">
      <summary>
            Tries to get an existing instance of the given <typeparamref name="TService" />.
            </summary>
      <typeparam name="TService">Type of object requested.</typeparam>
      <param name="instance">The requested service instance or null if it do not exist</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
      <returns>True if the instance was found</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.TryGetExistingInstance``1(System.String,``0@)">
      <summary>
            Tries to get an existing instance of the given named <typeparamref name="TService" />.
            </summary>
      <typeparam name="TService">Type of object requested.</typeparam>
      <param name="key">Name the object was registered with.</param>
      <param name="instance">The requested service instance or null if it do not exist</param>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
      <returns>True if the instance was found</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.GetAllInstances``1">
      <summary>
            Get all instances of the given <typeparamref name="TService" /> currently
            registered in the container.
            </summary>
      <typeparam name="TService">Type of object requested.</typeparam>
      <exception cref="T:EPiServer.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
      <returns>A sequence of instances of the requested <typeparamref name="TService" />.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.DoGetInstance(System.Type,System.String)">
      <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
      <param name="serviceType">Type of instance requested.</param>
      <param name="key">Name of registered service you want. May be null.</param>
      <returns>The requested service instance.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.DoTryGetExistingInstance(System.Type,System.String,System.Object@)">
      <summary>
            When implemented by inheriting classes, this method will look if the instance has been
            created and that it exists.
            </summary>
      <param name="serviceType">Type of instance requested.</param>
      <param name="key">Name of registered service you want. May be null.</param>
      <param name="instance">The requested service instance. Null if not existing</param>
      <returns>True if the instance was found</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.DoGetAllInstances(System.Type)">
      <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
      <param name="serviceType">Type of service requested.</param>
      <returns>Sequence of service instance objects.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.FormatActivationExceptionMessage(System.Exception,System.Type,System.String)">
      <summary>
            Format the exception message for use in an <see cref="T:EPiServer.ServiceLocation.ActivationException" />
            that occurs while resolving a single service.
            </summary>
      <param name="actualException">The actual exception thrown by the implementation.</param>
      <param name="serviceType">Type of service requested.</param>
      <param name="key">Name requested.</param>
      <returns>The formatted exception message string.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.FormatActivateAllExceptionMessage(System.Exception,System.Type)">
      <summary>
            Format the exception message for use in an <see cref="T:EPiServer.ServiceLocation.ActivationException" />
            that occurs while resolving multiple service instances.
            </summary>
      <param name="actualException">The actual exception thrown by the implementation.</param>
      <param name="serviceType">Type of service requested.</param>
      <returns>The formatted exception message string.</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.ServiceLocatorImplBase.Buildup(System.Object)">
      <summary>
            Satisfies the dependencies of the given service using setter injection.
            </summary>
      <param name="service">The object whose property depdenencies should be set.</param>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServiceLocatorProvider">
      <summary>
            This delegate type is used to provide a method that will
            return the current container. Used with the <see cref="T:EPiServer.ServiceLocation.ServiceLocator" />
            static accessor class.
            </summary>
      <returns>An <see cref="T:EPiServer.ServiceLocation.IServiceLocator" />.</returns>
      <remarks>This derives from http://commonservicelocator.codeplex.com/.</remarks>
    </member>
    <member name="T:EPiServer.ServiceLocation.ServicePlugInAttributeBase">
      <summary>
            Convenience base class for attributes configuring plugin services.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServicePlugInAttributeBase.ServiceType">
      <summary>
            Gets the type of service the decorated class represents. If null the class is registered with it's own type as service type.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServicePlugInAttributeBase.Lifecycle">
      <summary>
            Gets the scope of instances of the attributed class, i.e. when to reuse instances of the same service.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServicePlugInAttributeBase.FactoryMember">
      <summary>
            Gets the name of a static property or method on the attributed class from which the service instance is retrieved.
            </summary>
    </member>
    <member name="P:EPiServer.ServiceLocation.ServicePlugInAttributeBase.FactoryType">
      <summary>
            Gets the name of a type that is responsible for creating instances of the attributed service.
            </summary>
    </member>
    <member name="T:EPiServer.ServiceLocation.VirtualRoleServiceConfigurationProviderExtensions">
      <summary>
            Provides extension methods for <see cref="T:EPiServer.ServiceLocation.IServiceConfigurationProvider" /> implemenations.
            </summary>
    </member>
    <member name="M:EPiServer.ServiceLocation.VirtualRoleServiceConfigurationProviderExtensions.AddVirtualRole``1(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.String)">
      <summary>
            Adds a virtual role
            </summary>
      <typeparam name="TProvider">The type of virtual role to add.</typeparam>
      <param name="services">The service configuration provider.</param>
      <param name="name">The name of the virtual role</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="M:EPiServer.ServiceLocation.VirtualRoleServiceConfigurationProviderExtensions.AddMappedRole(EPiServer.ServiceLocation.IServiceConfigurationProvider,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Adds a mapping from one role to one or many other roles.
            </summary>
      <param name="services">The service configuration provider.</param>
      <param name="name">The name of the virtual role</param>
      <param name="mappedRoles">The roles that should be mapped.</param>
      <returns>The service configuration provider</returns>
    </member>
    <member name="T:EPiServer.Validation.DataAnnotationsValidator`1">
      <summary>
            Base class for validator classes that does validation against attributes specified in System.ComponentModel.DataAnnotations
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:EPiServer.Validation.DataAnnotationsValidator`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Validation.DataAnnotationsValidator`1" /> class.
            </summary>
    </member>
    <member name="M:EPiServer.Validation.DataAnnotationsValidator`1.#ctor(EPiServer.Framework.Localization.LocalizationService)">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Validation.DataAnnotationsValidator`1" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Validation.DataAnnotationsValidator`1.IgnoredAttributes">
      <summary>
            Gets or sets attribute type that should not be part of validation.
            </summary>
      <remarks>
            Default implementation returns empty enumeration.
            </remarks>
      <value>The ignored attributes.</value>
    </member>
    <member name="M:EPiServer.Validation.DataAnnotationsValidator`1.Validate(`0)">
      <summary>
            Validates the specified instance.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Validation.DataAnnotationsValidator`1.GetDisplayName(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
            Gets the display name for the <paramref name="propertyDescriptor" /> on <paramref name="instance" />.
            </summary>
      <param name="propertyDescriptor">The property to get the display name for.</param>
      <param name="instance">The object instance that <paramref name="propertyDescriptor" /> is defined on.</param>
      <returns>A translated display name if any translation exists.</returns>
    </member>
    <member name="T:EPiServer.Validation.IContextValidate`2">
      <summary>
            Defines the signature for a component that validates instances of <typeparamref name="TInstance" />.
            </summary>
      <remarks>This validator will only be called when <see cref="M:EPiServer.Validation.IContextValidationService.Validate``1(System.Object,``0)" />
            is called. A validator implemeting <see cref="T:EPiServer.Validation.IValidate`1" /> will be called regardless of context and also
            when <see cref="M:EPiServer.Validation.IValidationService.Validate(System.Object)" /> is called.
            </remarks>
      <typeparam name="TInstance">Type to validate</typeparam>
      <typeparam name="TContext">The context for the validation</typeparam>
    </member>
    <member name="M:EPiServer.Validation.IContextValidate`2.Validate(`0,`1)">
      <summary>
            Validates the specified instance given specified context
            </summary>
      <param name="instance">The instance that is validate</param>
      <param name="context">The context for the validation</param>
      <returns>A list of validation errors or empty list if instance is valid</returns>
    </member>
    <member name="T:EPiServer.Validation.IContextValidationService">
      <summary>
            Defines the signature for the service that performs validation of model instances.
            </summary>
    </member>
    <member name="M:EPiServer.Validation.IContextValidationService.Validate``1(System.Object,``0)">
      <summary>
            Validates the specified instance given specified context.
            </summary>
      <remarks>This will call both <see cref="T:EPiServer.Validation.IContextValidate`2" /> instances (given that types complies to TInstance and TContext)
            and <see cref="T:EPiServer.Validation.IValidate`1" /> instances (given that type comply to TInstance)
            </remarks>
      <param name="instance">The instance.</param>
      <param name="context">The context for the validation</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Validation.Internal.ContextValidatorWrapper`2">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that encapsulates an instance of <see cref="T:EPiServer.Validation.IValidate`1" />
            of <see cref="T:EPiServer.Validation.IContextValidate`2" /></summary>
      <typeparam name="TInstance">The type the validator validates</typeparam>
      <typeparam name="TContext">The context the validator is registered for</typeparam>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ContextValidatorWrapper`2.#ctor(EPiServer.Validation.IValidate)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Validation.Internal.ContextValidatorWrapper`2" /> class.
            </summary>
      <param name="implementation">The implementation.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.ContextValidatorWrapper`2.TypeToValidate">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the type to validate.
            </summary>
      <value>The type to validate.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ContextValidatorWrapper`2.Validate(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified instance.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.ContextValidatorWrapper`2.EncapsulatedValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the encapsulated validator.
            </summary>
      <value>The encapsulated validator.</value>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.ContextValidatorWrapper`2.ContextType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. The context type for the <see cref="T:EPiServer.Validation.IContextValidate`2" /></summary>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ContextValidatorWrapper`2.Validate(System.Object,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Calls the wrapped validator with conext if context is supported.
            </summary>
      <param name="instance">The instance to validate</param>
      <param name="context">The context for the validation</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="T:EPiServer.Validation.Internal.NoContext">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class used in <see cref="T:EPiServer.Validation.Internal.ContextValidatorWrapper`2" /> for validators that does not use Context
            </summary>
      <exclude />
    </member>
    <member name="T:EPiServer.Validation.Internal.ValidationService">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Default implemetation of IValidationService.
            </summary>
      <remarks>
            The implementation will scan for all implementaions of <see cref="T:EPiServer.Validation.IValidate`1" /> and during
            validation call all instances where type parameter T can be assigned to from the instance that is to be validated.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ValidationService.Initialize(EPiServer.Framework.TypeScanner.ITypeScannerLookup,EPiServer.ServiceLocation.IServiceLocator)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes a new instance of the <see cref="T:EPiServer.Validation.Internal.ValidationService" /> class.
            </summary>
      <param name="typeScannerLookup">The type scanner lookup.</param>
      <param name="serviceLocator">The service locator.</param>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.ValidationService.RegisteredValidators">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the registered validators.
            </summary>
      <remarks>
            The purpose of exposing registered validators is to make it possible to remove any unwanted validator. 
            Note however that the underlying list is not thread safe so any changes to this list should be done
            from an initialization module.
            </remarks>
      <value>The registered validators.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ValidationService.Validate(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified instance.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ValidationService.Validate``1(System.Object,``0)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <inheritdoc />
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ValidationService.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Initializes this instance.
            </summary>
      <param name="context">The initialization context.</param>
      <remarks>
            Gets called as part of the EPiServer Framework initialization sequence. Note that it will be called
            only once per AppDomain, unless the method throws an exception. If an exception is thrown, the initialization
            method will be called repeatedly for each request reaching the site until the method succeeds.
            </remarks>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ValidationService.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Resets the module into an uninitialized state.
            </summary>
      <param name="context">The context.</param>
      <remarks>
        <para>
            This method is usually not called when running under a web application since the web app may be shut down very
            abruptly, but your module should still implement it properly since it will make integration and unit testing
            much simpler.
            </para>
        <para>
            Any work done by <see cref="M:EPiServer.Framework.IInitializableModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)" /> as well as any code executing on <see cref="E:EPiServer.Framework.Initialization.InitializationEngine.InitComplete" /> should be reversed.
            </para>
      </remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Validation.Internal.ValidatorWrapper">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Class that encapsulates an instance of <see cref="T:EPiServer.Validation.IValidate`1" /></summary>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.ValidatorWrapper.TypeToValidate">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the type to validate.
            </summary>
      <value>The type to validate.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ValidatorWrapper.Validate(System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified instance.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.ValidatorWrapper.EncapsulatedValidator">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Gets the encapsulated validator.
            </summary>
      <value>The encapsulated validator.</value>
      <exclude />
    </member>
    <member name="M:EPiServer.Validation.Internal.ValidatorWrapper.Validate(System.Object,System.Object)">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Validates the specified instance.
            </summary>
      <param name="instance">The instance.</param>
      <param name="context">The context for the validation</param>
      <remarks>The default implementation ignores the context and calls <see cref="M:EPiServer.Validation.Internal.ValidatorWrapper.Validate(System.Object)" /></remarks>
      <returns>
      </returns>
      <exclude />
    </member>
    <member name="P:EPiServer.Validation.Internal.ValidatorWrapper.ContextType">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Specifies the type of context the validator is registered for
            </summary>
      <remarks>Default value is null</remarks>
      <exclude />
    </member>
    <member name="T:EPiServer.Validation.IValidate">
      <summary>
            base interface for <see cref="T:EPiServer.Validation.IValidate`1" /> the signature for a component that validates object instances 
            </summary>
      <remarks>
            This is interface is just a marker interface to be able to locate instances during scanning.
            </remarks>
    </member>
    <member name="T:EPiServer.Validation.IValidate`1">
      <summary>
            Defines the signature for a component that validates instances of <typeparamref name="T" />.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:EPiServer.Validation.IValidate`1.Validate(`0)">
      <summary>
            Validates the specified instance.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Validation.IValidationService">
      <summary>
            Defines the signature for the service that performs vaidation of model instances.
            </summary>
    </member>
    <member name="M:EPiServer.Validation.IValidationService.Validate(System.Object)">
      <summary>
            Validates the specified instance.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Validation.ValidationError">
      <summary>
            Represents a validation error.
            </summary>
    </member>
    <member name="M:EPiServer.Validation.ValidationError.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Validation.ValidationError" /> class.
            </summary>
    </member>
    <member name="P:EPiServer.Validation.ValidationError.Source">
      <summary>
            Gets or sets the <see cref="T:EPiServer.Validation.IValidate`1" /> implementation that caused the validation error.
            </summary>
      <value>The source.</value>
    </member>
    <member name="P:EPiServer.Validation.ValidationError.ValidationType">
      <summary>
            Gets or sets the type of the validation that caused the validation error.
            </summary>
      <value>The type of the validation.</value>
    </member>
    <member name="P:EPiServer.Validation.ValidationError.Severity">
      <summary>
            Gets or sets the severity of the validation error.
            </summary>
      <value>The severity.</value>
      <remarks>Default value is <see cref="F:EPiServer.Validation.ValidationErrorSeverity.Error" />.</remarks>
    </member>
    <member name="P:EPiServer.Validation.ValidationError.PropertyName">
      <summary>
            Gets or sets the name of the property that validation failed for.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:EPiServer.Validation.ValidationError.ErrorMessage">
      <summary>
            Gets or sets the error message.
            </summary>
      <value>The error message.</value>
    </member>
    <member name="P:EPiServer.Validation.ValidationError.RelatedProperties">
      <summary>
            Gets or sets the related properties whose values are affected of <see cref="P:EPiServer.Validation.ValidationError.PropertyName" /> value.
            </summary>
      <value>The related properties.</value>
    </member>
    <member name="T:EPiServer.Validation.ValidationErrorSeverity">
      <summary>
            Indicates the severity for a validation error.
            </summary>
    </member>
    <member name="F:EPiServer.Validation.ValidationErrorSeverity.None">
      <summary>
            Not a validation error.
            </summary>
    </member>
    <member name="F:EPiServer.Validation.ValidationErrorSeverity.Info">
      <summary>
            Info means that the data is ok but might contain settings that the user might want to be aware of.
            </summary>
    </member>
    <member name="F:EPiServer.Validation.ValidationErrorSeverity.Warning">
      <summary>
            This should be fixed but is not blocking.
            </summary>
    </member>
    <member name="F:EPiServer.Validation.ValidationErrorSeverity.Error">
      <summary>
            This is a blocking error that needs to be fixed.
            </summary>
    </member>
    <member name="T:EPiServer.Validation.ValidationErrorType">
      <summary>
            Defines which type of validation that caused the error.
            </summary>
    </member>
    <member name="F:EPiServer.Validation.ValidationErrorType.Unspecified">
      <summary>
            Cause was not specified.
            </summary>
    </member>
    <member name="F:EPiServer.Validation.ValidationErrorType.AttributeMatched">
      <summary>
            Failed to validate against an attribute on the model type.
            </summary>
    </member>
    <member name="F:EPiServer.Validation.ValidationErrorType.StorageValidation">
      <summary>
            Failed to validate against requirements for the storage.
            </summary>
    </member>
    <member name="T:EPiServer.Validation.ValidatorWrapper`1">
      <summary>
            Class that encapsulates an instance of <see cref="T:EPiServer.Validation.IValidate`1" /></summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:EPiServer.Validation.ValidatorWrapper`1.#ctor(EPiServer.Validation.IValidate{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Validation.ValidatorWrapper`1" /> class.
            </summary>
      <param name="implementation">The implementation.</param>
    </member>
    <member name="P:EPiServer.Validation.ValidatorWrapper`1.ValidatorImplementation">
      <summary>
            Gets the validator implementation.
            </summary>
      <value>The validator implementation.</value>
    </member>
    <member name="P:EPiServer.Validation.ValidatorWrapper`1.TypeToValidate">
      <summary>
            Gets the type to validate.
            </summary>
      <value>The type to validate.</value>
    </member>
    <member name="M:EPiServer.Validation.ValidatorWrapper`1.Validate(System.Object)">
      <summary>
            Validates the specified instance.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
    </member>
    <member name="P:EPiServer.Validation.ValidatorWrapper`1.EncapsulatedValidator">
      <summary>
            Gets the encapsulated validator.
            </summary>
      <value>The encapsulated validator.</value>
    </member>
    <member name="T:EPiServer.Web.IMimeTypeResolver">
      <summary>
            Resolves mappings from a filename to a mime type.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IMimeTypeResolver.GetMimeMapping(System.String)">
      <summary>
            Get the MIME type that should be used for the provided filename.
            </summary>
      <param name="fileName">The name of the file for which a MIME type should be resolved.</param>
      <returns>The MIME type to use for a file with the provided name</returns>
    </member>
    <member name="T:EPiServer.Web.Internal.DefaultMimeTypeRegistry">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.DefaultVirtualPathResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice. Have not found any similar logic in ASP.NET Core as VirtualPathUtility offers therefore
            we have this logic our selves for now. Should be replaced with ASP.NET Core logic when/if
            that exist
            </summary>
      <internal-API />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.Internal.RegistryBasedMimeTypeResolver">
      <summary>Unsupported INTERNAL API! Not covered by semantic versioning; might change without notice.</summary>
      <internal-api />
      <exclude />
    </member>
    <member name="T:EPiServer.Web.IMimeTypeRegistry">
      <summary>
            Handles mapping from a file extension to a MIME type.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IMimeTypeRegistry.Add(System.String,System.String)">
      <summary>
            Registers a MIME type to an file extension.
            </summary>
      <param name="extension">The file extension that the MIME type should be associated with.</param>
      <param name="mimeType">The MIME type that should be associated with the file extension.</param>
    </member>
    <member name="M:EPiServer.Web.IMimeTypeRegistry.Remove(System.String)">
      <summary>
            Removes a MIME mapping from the <see cref="T:EPiServer.Web.IMimeTypeRegistry" />.
            </summary>
      <param name="extension">The file extension whos MIME mapping should be removed.</param>
    </member>
    <member name="M:EPiServer.Web.IMimeTypeRegistry.Clear">
      <summary>
            Removes all MIME mappings from the <see cref="T:EPiServer.Web.IMimeTypeRegistry" />.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IMimeTypeRegistry.Get(System.String)">
      <summary>
            Gets the MIME type registered to the provided file extension.
            </summary>
      <param name="extension">The file extension to get the MIME type for.</param>
      <returns>The MIME type associated with the extension or null if not found.</returns>
    </member>
    <member name="T:EPiServer.Web.IVirtualPathResolver">
      <summary>
            Resolves virtual path with respect to virtual application.
            </summary>
    </member>
    <member name="M:EPiServer.Web.IVirtualPathResolver.ToAbsolute(System.String)">
      <summary>
            Converts a virtual path to an application absolute path.
            </summary>
      <param name="virtualPath">The virtual path to convert to an application-relative path</param>
      <returns>The absolute path representation of the specified virtual path.</returns>
    </member>
    <member name="M:EPiServer.Web.IVirtualPathResolver.ToAppRelative(System.String)">
      <summary>
            Converts a virtual path to an application-relative path.
            </summary>
      <param name="virtualPath">The virtual path to convert to an application-relative path.</param>
      <returns>The application-relative path representation of virtualPath.</returns>
    </member>
    <member name="T:EPiServer.Web.IWebHostingEnvironment">
      <summary>
            Path information for files served via the wwwroot
            </summary>
    </member>
    <member name="P:EPiServer.Web.IWebHostingEnvironment.WebRootPath">
      <summary>
            The physical path to the folder serving web content (ie "c:\inetpub\wwwroot")
            </summary>
    </member>
    <member name="P:EPiServer.Web.IWebHostingEnvironment.WebRootVirtualPath">
      <summary>
            The virtual path to the folder serving web content (ie "/")
            </summary>
    </member>
    <member name="T:EPiServer.Web.MimeMapping">
      <summary>
            Handles mapping from an extension to a mime type.
            </summary>
    </member>
    <member name="M:EPiServer.Web.MimeMapping.AddMimeMapping(System.String,System.String)">
      <summary>
            Adds a MIME type to the mimemapping table
            </summary>
      <param name="extension">The extension.</param>
      <param name="mimeType">Type of the MIME.</param>
    </member>
    <member name="M:EPiServer.Web.MimeMapping.RemoveMimeMapping(System.String)">
      <summary>
            Removes a MIME mapping from the mapping table.
            </summary>
      <param name="extension">The extension.</param>
    </member>
    <member name="M:EPiServer.Web.MimeMapping.ClearMimeMappings">
      <summary>
            Removes all MIME mappings from the mapping table.
            </summary>
    </member>
    <member name="M:EPiServer.Web.MimeMapping.GetMimeMapping(System.String)">
      <summary>
            Gets the mime type based on the extension of a file name.
            </summary>
      <param name="fileName">The file name.</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.Routing.IRoutable">
      <summary>
            Represents content specific data for routing.
            </summary>
    </member>
    <member name="P:EPiServer.Web.Routing.IRoutable.RouteSegment">
      <summary>
            Gets or sets the Route segment.
            </summary>
      <value>
            The Route segment.
            </value>
    </member>
    <member name="T:EPiServer.Web.VirtualPathResolver">
      <summary>
            Exposes a convenient way to access the registered <see cref="T:EPiServer.Web.IVirtualPathResolver" /> implementation.
            </summary>
    </member>
    <member name="P:EPiServer.Web.VirtualPathResolver.Instance">
      <summary>
            Convenience property to get the registered <see cref="T:EPiServer.Web.IVirtualPathResolver" /> implementation
            </summary>
      <remarks>
            The recommendation is to get <see cref="T:EPiServer.Web.IVirtualPathResolver" /> from IOC container as a constructor dependency.
            This is exposed for usage at locations where proper dependency injection is difficult to use.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.VirtualPathUtilityEx.GetExtension(System.String)">
      <summary>
            Gets the extension for a file referenced in the virtual path.
            </summary>
      <param name="virtualPath">The virtual path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EPiServer.Web.VirtualPathUtilityEx.ValidatePhysicalPath(System.String)">
      <summary>
            Validates the physical path for the specified path string.
            </summary>
      <param name="physicalPath">The physical path.</param>
      <remarks>
            Throw ArgumentException If the physicalPath is different from the full path.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.VirtualPathUtilityEx.RebasePhysicalPath(System.String)">
      <summary>
            Rebases the physical path according to the AppDataPathKey value, environment variables and relative paths.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">
            if the path contains AppDataPathKey and the it's value is not configured in the config file.
            </exception>
    </member>
    <member name="M:EPiServer.Web.VirtualPathUtilityEx.RemoveTrailingSlash(System.String)">
      <summary>
            Removes a trailing slash mark (/) from a virtual path if it exists
            </summary>
      <param name="virtualPath">The virtual path to remove any trailing slash mark from</param>
      <returns>A virtual path without a trailing slash mark, if the virtual path is not already the root directory ("/"); otherwise, null.</returns>
    </member>
    <member name="M:EPiServer.Web.VirtualPathUtilityEx.AppendTrailingSlash(System.String)">
      <summary>
            Appends the literal slash mark (/) to the end of the virtual path, if one does
                not already exist.
            </summary>
      <param name="virtualPath">The virtual path to append the slash mark to.</param>
      <returns>The modified virtual path.</returns>
    </member>
    <member name="M:EPiServer.Web.VirtualPathUtilityEx.ToAbsolute(System.String)">
      <summary>
            Converts a virtual path to an application absolute path.
            </summary>
      <param name="virtualPath">The virtual path to convert to an application-relative path</param>
      <returns>The absolute path representation of the specified virtual path.</returns>
      <remarks>
            Extends "System.Web.VirtualPathUtility.ToAbsolute(string,string)" to make it work in a non ASP.NET-hosted
            environment.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.VirtualPathUtilityEx.ToAppRelative(System.String)">
      <summary>
            Converts a virtual path to an application-relative path.
            </summary>
      <param name="virtualPath">The virtual path to convert to an application-relative path.</param>
      <returns>The application-relative path representation of virtualPath.</returns>
      <remarks>
            Extends "System.Web.VirtualPathUtility.ToAppRelative(string,string)" to make it work in a non ASP.NET-hosted
            environment.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.VirtualPathUtilityEx.Combine(System.String,System.String)">
      <summary>
            Combines a base path and a relative path, but works in a non ASP.NET-hosted environment, and assumes that the
            relative path is relative - even if it begins with a slash.
            </summary>
      <param name="basePath">The base path.</param>
      <param name="relativePath">The relative path.</param>
      <returns>The combined basePath and relativePath.</returns>
      <remarks>
            Extends "System.Web.VirtualPathUtility.Combine" to make it work in a non ASP.NET-hosted
            environment. Also allows all combos of trailing slash on basePath and leading on relativePath (i.e. will treat
            a 'faulty' relative path starting with a slash as a relative anyway. This is formally incorrect, but pragmatically
            useful due to other EPiServer API:s that for historical reasons work with such 'rooted' paths.
            </remarks>
    </member>
    <member name="M:EPiServer.Web.VirtualPathUtilityEx.IsValidVirtualPath(System.String)">
      <summary>
            Determines whether the given candidate has a valid virtual path syntax.
            </summary>
      <param name="candidate">The candidate virtual path string.</param>
      <returns>
        <c>true</c> if the string is not null or empty and has a valid virtual path syntax; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:EPiServer.Web.VirutalPathResolverExtensions">
      <summary>
            Extension methods for <see cref="T:EPiServer.Web.IVirtualPathResolver" /></summary>
    </member>
    <member name="M:EPiServer.Web.VirutalPathResolverExtensions.ToAbsoluteOrSame(EPiServer.Web.IVirtualPathResolver,System.String)">
      <summary>
            Creates an absolute virtual path for relative virtual paths while inputs that is not qualified as valid relative virtual paths are returned untouched
            </summary>
      <param name="virtualPathResolver">The virtual path resolver that is extended</param>
      <param name="virtualPath">The virtual path to make absolute</param>
      <returns>
      </returns>
    </member>
    <member name="T:EPiServer.Web.WebHostingEnvironment">
      <summary>
            Helper class to access to <see cref="T:EPiServer.Web.IWebHostingEnvironment" /></summary>
    </member>
  </members>
</doc>